
C:\Users\sraas\Repositories\Apple2-ICE\build/Apple2-ICE.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc85 	bl	60001e40 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc40 	bl	60001e08 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc45 	bl	60001e38 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc3f 	bl	60001e30 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00012618 	.word	0x00012618
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20004ec0 	.word	0x20004ec0
600015cc:	60014578 	.word	0x60014578
600015d0:	20000000 	.word	0x20000000
600015d4:	200188e0 	.word	0x200188e0
600015d8:	20004ec0 	.word	0x20004ec0
600015dc:	20004c00 	.word	0x20004c00
600015e0:	0000a239 	.word	0x0000a239
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	0000b651 	.word	0x0000b651
600015f4:	20018868 	.word	0x20018868
600015f8:	0000b655 	.word	0x0000b655
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2001886c 	.word	0x2001886c
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaabf 	.word	0xaaaaaabf
6000164c:	00200007 	.word	0x00200007
60001650:	20068000 	.word	0x20068000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200188e0 	.word	0x200188e0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 f9fe 	bl	60001e28 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	2001889f 	.word	0x2001889f
60001aac:	200053e0 	.word	0x200053e0
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	20018858 	.word	0x20018858
60001c50:	20018854 	.word	0x20018854
60001c54:	2001885c 	.word	0x2001885c
60001c58:	20018860 	.word	0x20018860
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20004c00 	.word	0x20004c00
60001c68:	0000a415 	.word	0x0000a415

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8cc 	bl	60001e18 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f899 	bl	60001e10 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f891 	bl	60001e20 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20004c00 	.word	0x20004c00
60001d50:	0000a5fd 	.word	0x0000a5fd

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	20018899 	.word	0x20018899

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <__pwm_init_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__pwm_init_veneer+0x4>
60001e0c:	0000b9e1 	.word	0x0000b9e1

60001e10 <__delay_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__delay_veneer+0x4>
60001e14:	00009f79 	.word	0x00009f79

60001e18 <__usb_init_serialnumber_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__usb_init_serialnumber_veneer+0x4>
60001e1c:	0000ad6d 	.word	0x0000ad6d

60001e20 <__memset_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__memset_veneer+0x4>
60001e24:	0000cbf1 	.word	0x0000cbf1

60001e28 <__sm_set_pool_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__sm_set_pool_veneer+0x4>
60001e2c:	0000bb49 	.word	0x0000bb49

60001e30 <__main_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <__main_veneer+0x4>
60001e34:	0000a091 	.word	0x0000a091

60001e38 <____libc_init_array_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <____libc_init_array_veneer+0x4>
60001e3c:	0000cea9 	.word	0x0000cea9

60001e40 <__set_arm_clock_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__set_arm_clock_veneer+0x4>
60001e44:	0000b675 	.word	0x0000b675

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 00009a61                       E...a...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20004ec0 	.word	0x20004ec0
      3c:	20004ec0 	.word	0x20004ec0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20015400 	.word	0x20015400
      64:	6001a400 	.word	0x6001a400

00000068 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>:
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	460d      	mov	r5, r1
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	4604      	mov	r4, r0
      6e:	f009 fdeb 	bl	9c48 <String::operator=(String&&)>
		return ADC2_R0;
      72:	f105 0110 	add.w	r1, r5, #16
}
      76:	f104 0010 	add.w	r0, r4, #16
      7a:	f009 fde5 	bl	9c48 <String::operator=(String&&)>
      7e:	f105 0120 	add.w	r1, r5, #32
      82:	f104 0020 	add.w	r0, r4, #32
      86:	f009 fddf 	bl	9c48 <String::operator=(String&&)>
      8a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      92:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
      96:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
      9a:	bd38      	pop	{r3, r4, r5, pc}

0000009c <__tcf_0>:
      9c:	b538      	push	{r3, r4, r5, lr}
      9e:	4c09      	ldr	r4, [pc, #36]	; (c4 <__tcf_0+0x28>)
      a0:	4d09      	ldr	r5, [pc, #36]	; (c8 <__tcf_0+0x2c>)
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      a2:	f104 0020 	add.w	r0, r4, #32
      a6:	f009 fd77 	bl	9b98 <String::~String()>
      aa:	f104 0010 	add.w	r0, r4, #16
      ae:	f009 fd73 	bl	9b98 <String::~String()>
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	4620      	mov	r0, r4
      b4:	f009 fd70 	bl	9b98 <String::~String()>
      b8:	42ac      	cmp	r4, r5
      ba:	f1a4 0434 	sub.w	r4, r4, #52	; 0x34
      be:	d1f0      	bne.n	a2 <__tcf_0+0x6>
      c0:	bd38      	pop	{r3, r4, r5, pc}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	bf00      	nop
      c4:	200187e4 	.word	0x200187e4
      c8:	20015418 	.word	0x20015418

000000cc <Print::println(char const*) [clone .isra.0]>:
      cc:	b538      	push	{r3, r4, r5, lr}
      ce:	4604      	mov	r4, r0
}
      d0:	b149      	cbz	r1, e6 <Print::println(char const*) [clone .isra.0]+0x1a>
	while (newdiv > 65535 && prescale < 7) {
      d2:	4608      	mov	r0, r1
      d4:	460d      	mov	r5, r1
      d6:	f00d f8f3 	bl	d2c0 <strlen>
      da:	6823      	ldr	r3, [r4, #0]
            end_idx = args.length();
    }

    String rv = args.substring(start_idx, end_idx);
    return(rv);
}
      dc:	4602      	mov	r2, r0
      de:	4629      	mov	r1, r5
      e0:	685b      	ldr	r3, [r3, #4]
        return("");
      e2:	4620      	mov	r0, r4
      e4:	4798      	blx	r3
      e6:	4620      	mov	r0, r4
      e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}
      ec:	f009 bd14 	b.w	9b18 <Print::println()>

000000f0 <OpDecoder::~OpDecoder()>:
      f0:	b510      	push	{r4, lr}
      f2:	4604      	mov	r4, r0
      f4:	3020      	adds	r0, #32
      f6:	f009 fd4f 	bl	9b98 <String::~String()>
      fa:	f104 0010 	add.w	r0, r4, #16
      fe:	f009 fd4b 	bl	9b98 <String::~String()>
     102:	4620      	mov	r0, r4


// OPCODE,MNEMONIC,OPERANDS,FLAGS,CYCLES,LENGTH

struct OpDecoder {
     104:	f009 fd48 	bl	9b98 <String::~String()>
     108:	4620      	mov	r0, r4
     10a:	bd10      	pop	{r4, pc}

0000010c <initialize_opcode_info()>:
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (newbuffer) {
     110:	b08f      	sub	sp, #60	; 0x3c
     112:	4cd5      	ldr	r4, [pc, #852]	; (468 <initialize_opcode_info()+0x35c>)
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	49d5      	ldr	r1, [pc, #852]	; (46c <initialize_opcode_info()+0x360>)
		capacity = maxStrLen;
     116:	f240 2a03 	movw	sl, #515	; 0x203
		return 1;
     11a:	a801      	add	r0, sp, #4
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	4dd4      	ldr	r5, [pc, #848]	; (470 <initialize_opcode_info()+0x364>)
     11e:	f009 fd77 	bl	9c10 <String::String(char const*)>
     122:	4621      	mov	r1, r4
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	a805      	add	r0, sp, #20
	mask = p->mask;
     126:	4fd3      	ldr	r7, [pc, #844]	; (474 <initialize_opcode_info()+0x368>)
	pinmode = *(p->reg + 1);
     128:	f009 fd72 	bl	9c10 <String::String(char const*)>
	if (pinmode & mask) {
     12c:	49d2      	ldr	r1, [pc, #840]	; (478 <initialize_opcode_info()+0x36c>)
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     12e:	a809      	add	r0, sp, #36	; 0x24
     130:	f8df 9380 	ldr.w	r9, [pc, #896]	; 4b4 <initialize_opcode_info()+0x3a8>
	mask = p->mask;
     134:	f009 fd6c 	bl	9c10 <String::String(char const*)>
	if (pinmode & mask) {
     138:	f240 1307 	movw	r3, #263	; 0x107
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13c:	a901      	add	r1, sp, #4
     13e:	4628      	mov	r0, r5
     140:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     144:	f7ff ff90 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     148:	a809      	add	r0, sp, #36	; 0x24
     14a:	4ecc      	ldr	r6, [pc, #816]	; (47c <initialize_opcode_info()+0x370>)
     14c:	f009 fd24 	bl	9b98 <String::~String()>
     150:	a805      	add	r0, sp, #20
     152:	f009 fd21 	bl	9b98 <String::~String()>
     156:	a801      	add	r0, sp, #4
     158:	f009 fd1e 	bl	9b98 <String::~String()>
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	4639      	mov	r1, r7
     15e:	a801      	add	r0, sp, #4
     160:	f8df 8354 	ldr.w	r8, [pc, #852]	; 4b8 <initialize_opcode_info()+0x3ac>
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     164:	f009 fd54 	bl	9c10 <String::String(char const*)>
     168:	49c5      	ldr	r1, [pc, #788]	; (480 <initialize_opcode_info()+0x374>)
	NVIC_ENABLE_IRQ(hardware->irq);
     16a:	a805      	add	r0, sp, #20
     16c:	f44f 7b41 	mov.w	fp, #772	; 0x304
     170:	f009 fd4e 	bl	9c10 <String::String(char const*)>
     174:	4649      	mov	r1, r9
     176:	a809      	add	r0, sp, #36	; 0x24
     178:	f009 fd4a 	bl	9c10 <String::String(char const*)>
     17c:	aa01      	add	r2, sp, #4
     17e:	f240 2306 	movw	r3, #518	; 0x206
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     182:	f105 0034 	add.w	r0, r5, #52	; 0x34
     186:	4611      	mov	r1, r2
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     188:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     18c:	f7ff ff6c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     190:	a801      	add	r0, sp, #4
     192:	f7ff ffad 	bl	f0 <OpDecoder::~OpDecoder()>
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     196:	4639      	mov	r1, r7
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     198:	a801      	add	r0, sp, #4
     19a:	f009 fd39 	bl	9c10 <String::String(char const*)>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     19e:	a805      	add	r0, sp, #20
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1a0:	49b8      	ldr	r1, [pc, #736]	; (484 <initialize_opcode_info()+0x378>)
     1a2:	f009 fd35 	bl	9c10 <String::String(char const*)>
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1a6:	4649      	mov	r1, r9
     1a8:	a809      	add	r0, sp, #36	; 0x24
     1aa:	f009 fd31 	bl	9c10 <String::String(char const*)>
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1ae:	aa01      	add	r2, sp, #4
     1b0:	f505 7082 	add.w	r0, r5, #260	; 0x104
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b4:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     1b8:	4611      	mov	r1, r2
     1ba:	f8df a300 	ldr.w	sl, [pc, #768]	; 4bc <initialize_opcode_info()+0x3b0>
     1be:	f7ff ff53 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c2:	a801      	add	r0, sp, #4
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1c4:	f7ff ff94 	bl	f0 <OpDecoder::~OpDecoder()>
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c8:	4651      	mov	r1, sl
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1ca:	a801      	add	r0, sp, #4
     1cc:	f009 fd20 	bl	9c10 <String::String(char const*)>
	port->STAT = c;

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d0:	49ac      	ldr	r1, [pc, #688]	; (484 <initialize_opcode_info()+0x378>)
	port->STAT = c;
     1d2:	a805      	add	r0, sp, #20
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d4:	f009 fd1c 	bl	9c10 <String::String(char const*)>
     1d8:	4631      	mov	r1, r6
     1da:	a809      	add	r0, sp, #36	; 0x24
     1dc:	f009 fd18 	bl	9c10 <String::String(char const*)>

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     1e0:	f240 2205 	movw	r2, #517	; 0x205
};
     1e4:	a901      	add	r1, sp, #4
     1e6:	f505 709c 	add.w	r0, r5, #312	; 0x138
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1ea:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     1ee:	f7ff ff3b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     1f2:	a801      	add	r0, sp, #4
     1f4:	f7ff ff7c 	bl	f0 <OpDecoder::~OpDecoder()>
     1f8:	49a3      	ldr	r1, [pc, #652]	; (488 <initialize_opcode_info()+0x37c>)
     1fa:	a801      	add	r0, sp, #4
     1fc:	f009 fd08 	bl	9c10 <String::String(char const*)>
     200:	4621      	mov	r1, r4
     202:	a805      	add	r0, sp, #20
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     204:	f009 fd04 	bl	9c10 <String::String(char const*)>
     208:	4621      	mov	r1, r4
     20a:	a809      	add	r0, sp, #36	; 0x24
     20c:	f009 fd00 	bl	9c10 <String::String(char const*)>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     210:	f240 1303 	movw	r3, #259	; 0x103
     214:	a901      	add	r1, sp, #4
     216:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
     21a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     21e:	f7ff ff23 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     222:	a801      	add	r0, sp, #4
     224:	f7ff ff64 	bl	f0 <OpDecoder::~OpDecoder()>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     228:	4639      	mov	r1, r7
     22a:	a801      	add	r0, sp, #4
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22c:	f009 fcf0 	bl	9c10 <String::String(char const*)>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	a805      	add	r0, sp, #20
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     232:	4996      	ldr	r1, [pc, #600]	; (48c <initialize_opcode_info()+0x380>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	f009 fcec 	bl	9c10 <String::String(char const*)>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     238:	4649      	mov	r1, r9
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23a:	a809      	add	r0, sp, #36	; 0x24
     23c:	f009 fce8 	bl	9c10 <String::String(char const*)>
};
     240:	f240 2302 	movw	r3, #514	; 0x202
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     244:	a901      	add	r1, sp, #4
     246:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
     24a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     24e:	f7ff ff0b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     252:	a801      	add	r0, sp, #4
     254:	f7ff ff4c 	bl	f0 <OpDecoder::~OpDecoder()>
     258:	4651      	mov	r1, sl
     25a:	a801      	add	r0, sp, #4
     25c:	f009 fcd8 	bl	9c10 <String::String(char const*)>
     260:	4a8b      	ldr	r2, [pc, #556]	; (490 <initialize_opcode_info()+0x384>)
     262:	a805      	add	r0, sp, #20
     264:	4611      	mov	r1, r2
     266:	f009 fcd3 	bl	9c10 <String::String(char const*)>
     26a:	4631      	mov	r1, r6
     26c:	a809      	add	r0, sp, #36	; 0x24
     26e:	f009 fccf 	bl	9c10 <String::String(char const*)>
     272:	f44f 7381 	mov.w	r3, #258	; 0x102
     276:	a901      	add	r1, sp, #4

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
     278:	f505 7002 	add.w	r0, r5, #520	; 0x208
				val *= 10.0f;
     27c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			while (newPrecision > 0) {
     280:	f7ff fef2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
				val *= 10.0f;
     284:	a801      	add	r0, sp, #4
			while (newPrecision > 0) {
     286:	f7ff ff33 	bl	f0 <OpDecoder::~OpDecoder()>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
     28a:	4639      	mov	r1, r7
     28c:	a801      	add	r0, sp, #4
     28e:	f009 fcbf 	bl	9c10 <String::String(char const*)>
     292:	4641      	mov	r1, r8
     294:	a805      	add	r0, sp, #20

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
     296:	f009 fcbb 	bl	9c10 <String::String(char const*)>
     29a:	4649      	mov	r1, r9
     29c:	a809      	add	r0, sp, #36	; 0x24
     29e:	f009 fcb7 	bl	9c10 <String::String(char const*)>
     2a2:	a901      	add	r1, sp, #4
     2a4:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
     2a8:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     2ac:	f7ff fedc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     2b0:	a801      	add	r0, sp, #4
     2b2:	f7ff ff1d 	bl	f0 <OpDecoder::~OpDecoder()>
		int ndigs = (val<0) ? 4 : 3;
     2b6:	4651      	mov	r1, sl
     2b8:	a801      	add	r0, sp, #4
     2ba:	f009 fca9 	bl	9c10 <String::String(char const*)>
     2be:	4641      	mov	r1, r8
     2c0:	a805      	add	r0, sp, #20
     2c2:	f009 fca5 	bl	9c10 <String::String(char const*)>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2c6:	4631      	mov	r1, r6
		if (width<0) {
     2c8:	a809      	add	r0, sp, #36	; 0x24
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
     2ca:	f009 fca1 	bl	9c10 <String::String(char const*)>
		if (width<0) {
     2ce:	f240 3c06 	movw	ip, #774	; 0x306
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     2d2:	a901      	add	r1, sp, #4
     2d4:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
     2d8:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     2dc:	f7ff fec4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     2e0:	a801      	add	r0, sp, #4
     2e2:	f7ff ff05 	bl	f0 <OpDecoder::~OpDecoder()>
     2e6:	496b      	ldr	r1, [pc, #428]	; (494 <initialize_opcode_info()+0x388>)
     2e8:	a801      	add	r0, sp, #4
		while (awidth) {
     2ea:	f009 fc91 	bl	9c10 <String::String(char const*)>
     2ee:	496a      	ldr	r1, [pc, #424]	; (498 <initialize_opcode_info()+0x38c>)
     2f0:	a805      	add	r0, sp, #20
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
     2f2:	f009 fc8d 	bl	9c10 <String::String(char const*)>
     2f6:	4621      	mov	r1, r4
     2f8:	a809      	add	r0, sp, #36	; 0x24
     2fa:	f009 fc89 	bl	9c10 <String::String(char const*)>
     2fe:	f240 2202 	movw	r2, #514	; 0x202
			while (awidth) {
     302:	a901      	add	r1, sp, #4
				*buf++ = ' ';
     304:	f505 7050 	add.w	r0, r5, #832	; 0x340
     308:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     30c:	f7ff feac 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     310:	a801      	add	r0, sp, #4
     312:	f7ff feed 	bl	f0 <OpDecoder::~OpDecoder()>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     316:	4639      	mov	r1, r7
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     318:	a801      	add	r0, sp, #4
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     31a:	f009 fc79 	bl	9c10 <String::String(char const*)>
     31e:	a805      	add	r0, sp, #20
     320:	495e      	ldr	r1, [pc, #376]	; (49c <initialize_opcode_info()+0x390>)
     322:	f009 fc75 	bl	9c10 <String::String(char const*)>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     326:	4649      	mov	r1, r9
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     328:	a809      	add	r0, sp, #36	; 0x24
     32a:	f009 fc71 	bl	9c10 <String::String(char const*)>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
     32e:	f240 2005 	movw	r0, #517	; 0x205
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
     332:	a901      	add	r1, sp, #4
		while (awidth) {
     334:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
		if (val<0) *buf++ = '-';
     338:	f505 705d 	add.w	r0, r5, #884	; 0x374
     33c:	f7ff fe94 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     340:	a801      	add	r0, sp, #4
     342:	f7ff fed5 	bl	f0 <OpDecoder::~OpDecoder()>
     346:	4639      	mov	r1, r7
     348:	a801      	add	r0, sp, #4
     34a:	f009 fc61 	bl	9c10 <String::String(char const*)>
	opcode_info[0x0a] = {"ASL","A","SZC",2,1};
	opcode_info[0x0d] = {"ORA","abs","SZ",4,3};
	opcode_info[0x0e] = {"ASL","abs","SZC",6,3};
	opcode_info[0x10] = {"BPL","rel","",2,2};
	opcode_info[0x11] = {"ORA","(ind),Y","SZ",5,2};
	opcode_info[0x15] = {"ORA","zpg,X","SZ",4,2};
     34e:	4954      	ldr	r1, [pc, #336]	; (4a0 <initialize_opcode_info()+0x394>)
     350:	a805      	add	r0, sp, #20
     352:	f009 fc5d 	bl	9c10 <String::String(char const*)>
     356:	4649      	mov	r1, r9
     358:	a809      	add	r0, sp, #36	; 0x24
     35a:	f009 fc59 	bl	9c10 <String::String(char const*)>
     35e:	f44f 7001 	mov.w	r0, #516	; 0x204
     362:	a901      	add	r1, sp, #4
     364:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     368:	f205 4044 	addw	r0, r5, #1092	; 0x444
     36c:	f7ff fe7c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     370:	f10d 0e04 	add.w	lr, sp, #4
     374:	4670      	mov	r0, lr
     376:	f7ff febb 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x16] = {"ASL","zpg,X","SZC",6,2};
     37a:	f10d 0e04 	add.w	lr, sp, #4
     37e:	4651      	mov	r1, sl
     380:	4670      	mov	r0, lr
     382:	f009 fc45 	bl	9c10 <String::String(char const*)>
     386:	f10d 0e14 	add.w	lr, sp, #20
     38a:	4945      	ldr	r1, [pc, #276]	; (4a0 <initialize_opcode_info()+0x394>)
     38c:	4670      	mov	r0, lr
     38e:	f009 fc3f 	bl	9c10 <String::String(char const*)>
     392:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     396:	4631      	mov	r1, r6
     398:	4670      	mov	r0, lr
     39a:	f009 fc39 	bl	9c10 <String::String(char const*)>
     39e:	f10d 0e04 	add.w	lr, sp, #4
     3a2:	f240 2106 	movw	r1, #518	; 0x206
     3a6:	f505 608f 	add.w	r0, r5, #1144	; 0x478
     3aa:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     3ae:	4671      	mov	r1, lr
     3b0:	f7ff fe5a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     3b4:	f10d 0e04 	add.w	lr, sp, #4
     3b8:	4670      	mov	r0, lr
     3ba:	f7ff fe99 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x18] = {"CLC","","C",2,1};
     3be:	f10d 0e04 	add.w	lr, sp, #4
     3c2:	4938      	ldr	r1, [pc, #224]	; (4a4 <initialize_opcode_info()+0x398>)
     3c4:	4670      	mov	r0, lr
     3c6:	f009 fc23 	bl	9c10 <String::String(char const*)>
     3ca:	f10d 0e14 	add.w	lr, sp, #20
     3ce:	4621      	mov	r1, r4
     3d0:	4670      	mov	r0, lr
     3d2:	f009 fc1d 	bl	9c10 <String::String(char const*)>
     3d6:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     3da:	4933      	ldr	r1, [pc, #204]	; (4a8 <initialize_opcode_info()+0x39c>)
     3dc:	4670      	mov	r0, lr
     3de:	f009 fc17 	bl	9c10 <String::String(char const*)>
     3e2:	f10d 0e04 	add.w	lr, sp, #4
     3e6:	f44f 7381 	mov.w	r3, #258	; 0x102
     3ea:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
     3ee:	4671      	mov	r1, lr
     3f0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     3f4:	f7ff fe38 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     3f8:	f10d 0e04 	add.w	lr, sp, #4
     3fc:	4670      	mov	r0, lr
     3fe:	f7ff fe77 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x19] = {"ORA","abs,Y","SZ",4,3};
     402:	f10d 0e04 	add.w	lr, sp, #4
     406:	4639      	mov	r1, r7
     408:	4670      	mov	r0, lr
     40a:	f009 fc01 	bl	9c10 <String::String(char const*)>
     40e:	f10d 0e14 	add.w	lr, sp, #20
     412:	4926      	ldr	r1, [pc, #152]	; (4ac <initialize_opcode_info()+0x3a0>)
     414:	4670      	mov	r0, lr
     416:	f009 fbfb 	bl	9c10 <String::String(char const*)>
     41a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     41e:	4649      	mov	r1, r9
     420:	4670      	mov	r0, lr
     422:	f009 fbf5 	bl	9c10 <String::String(char const*)>
     426:	f10d 0e04 	add.w	lr, sp, #4
     42a:	f205 5014 	addw	r0, r5, #1300	; 0x514
     42e:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     432:	4671      	mov	r1, lr
     434:	f7ff fe18 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     438:	f10d 0e04 	add.w	lr, sp, #4
     43c:	4670      	mov	r0, lr
     43e:	f7ff fe57 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     442:	f10d 0e04 	add.w	lr, sp, #4
     446:	4639      	mov	r1, r7
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
	opcode_info[0x20] = {"JSR","abs","",6,3};
     448:	f240 3706 	movw	r7, #774	; 0x306
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     44c:	4670      	mov	r0, lr
     44e:	f009 fbdf 	bl	9c10 <String::String(char const*)>
     452:	f10d 0e14 	add.w	lr, sp, #20
     456:	4916      	ldr	r1, [pc, #88]	; (4b0 <initialize_opcode_info()+0x3a4>)
     458:	4670      	mov	r0, lr
     45a:	f009 fbd9 	bl	9c10 <String::String(char const*)>
     45e:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     462:	4649      	mov	r1, r9
     464:	4670      	mov	r0, lr
     466:	e02b      	b.n	4c0 <initialize_opcode_info()+0x3b4>
     468:	2000047c 	.word	0x2000047c
     46c:	2000087c 	.word	0x2000087c
     470:	20015418 	.word	0x20015418
     474:	20000884 	.word	0x20000884
     478:	20000880 	.word	0x20000880
     47c:	2000089c 	.word	0x2000089c
     480:	20000888 	.word	0x20000888
     484:	20000894 	.word	0x20000894
     488:	200008a0 	.word	0x200008a0
     48c:	200008a4 	.word	0x200008a4
     490:	200008a8 	.word	0x200008a8
     494:	200008b0 	.word	0x200008b0
     498:	200008b4 	.word	0x200008b4
     49c:	200008b8 	.word	0x200008b8
     4a0:	200008c0 	.word	0x200008c0
     4a4:	200008c8 	.word	0x200008c8
     4a8:	200008cc 	.word	0x200008cc
     4ac:	200008d0 	.word	0x200008d0
     4b0:	200008d8 	.word	0x200008d8
     4b4:	20000890 	.word	0x20000890
     4b8:	200008ac 	.word	0x200008ac
     4bc:	20000898 	.word	0x20000898
     4c0:	f009 fba6 	bl	9c10 <String::String(char const*)>
     4c4:	f10d 0e04 	add.w	lr, sp, #4
     4c8:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
     4cc:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     4d0:	4671      	mov	r1, lr
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     4d2:	f8df b390 	ldr.w	fp, [pc, #912]	; 864 <initialize_opcode_info()+0x758>
	opcode_info[0x1d] = {"ORA","abs,X","SZ",4,3};
     4d6:	f7ff fdc7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     4da:	f10d 0e04 	add.w	lr, sp, #4
     4de:	4670      	mov	r0, lr
     4e0:	f7ff fe06 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     4e4:	f10d 0e04 	add.w	lr, sp, #4
     4e8:	4651      	mov	r1, sl
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     4ea:	f240 2a03 	movw	sl, #515	; 0x203
	opcode_info[0x1e] = {"ASL","abs,X","SZC",7,3};
     4ee:	4670      	mov	r0, lr
     4f0:	f009 fb8e 	bl	9c10 <String::String(char const*)>
     4f4:	f10d 0e14 	add.w	lr, sp, #20
     4f8:	49cc      	ldr	r1, [pc, #816]	; (82c <initialize_opcode_info()+0x720>)
     4fa:	4670      	mov	r0, lr
     4fc:	f009 fb88 	bl	9c10 <String::String(char const*)>
     500:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
     504:	4631      	mov	r1, r6
     506:	4670      	mov	r0, lr
     508:	f009 fb82 	bl	9c10 <String::String(char const*)>
     50c:	f240 3e07 	movw	lr, #775	; 0x307
     510:	a901      	add	r1, sp, #4
     512:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
     516:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     51a:	f7ff fda5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     51e:	a801      	add	r0, sp, #4
     520:	f7ff fde6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x20] = {"JSR","abs","",6,3};
     524:	49c2      	ldr	r1, [pc, #776]	; (830 <initialize_opcode_info()+0x724>)
     526:	a801      	add	r0, sp, #4
     528:	f009 fb72 	bl	9c10 <String::String(char const*)>
     52c:	4641      	mov	r1, r8
     52e:	a805      	add	r0, sp, #20
     530:	f009 fb6e 	bl	9c10 <String::String(char const*)>
     534:	4621      	mov	r1, r4
     536:	a809      	add	r0, sp, #36	; 0x24
     538:	f009 fb6a 	bl	9c10 <String::String(char const*)>
     53c:	a901      	add	r1, sp, #4
     53e:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
     542:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     546:	4fbb      	ldr	r7, [pc, #748]	; (834 <initialize_opcode_info()+0x728>)
	opcode_info[0x20] = {"JSR","abs","",6,3};
     548:	f7ff fd8e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     54c:	a801      	add	r0, sp, #4
     54e:	f7ff fdcf 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x21] = {"AND","(ind,X)","SZ",6,2};
     552:	4639      	mov	r1, r7
     554:	a801      	add	r0, sp, #4
     556:	f009 fb5b 	bl	9c10 <String::String(char const*)>
     55a:	49b7      	ldr	r1, [pc, #732]	; (838 <initialize_opcode_info()+0x72c>)
     55c:	a805      	add	r0, sp, #20
     55e:	f009 fb57 	bl	9c10 <String::String(char const*)>
     562:	4649      	mov	r1, r9
     564:	a809      	add	r0, sp, #36	; 0x24
     566:	f009 fb53 	bl	9c10 <String::String(char const*)>
     56a:	f240 2106 	movw	r1, #518	; 0x206
     56e:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
     572:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     576:	a901      	add	r1, sp, #4
     578:	f7ff fd76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     57c:	a901      	add	r1, sp, #4
     57e:	4608      	mov	r0, r1
     580:	f7ff fdb6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x24] = {"BIT","zpg","NVZ",3,2};
     584:	aa01      	add	r2, sp, #4
     586:	49ad      	ldr	r1, [pc, #692]	; (83c <initialize_opcode_info()+0x730>)
     588:	4610      	mov	r0, r2
     58a:	f009 fb41 	bl	9c10 <String::String(char const*)>
     58e:	aa05      	add	r2, sp, #20
     590:	49ab      	ldr	r1, [pc, #684]	; (840 <initialize_opcode_info()+0x734>)
     592:	4610      	mov	r0, r2
     594:	f009 fb3c 	bl	9c10 <String::String(char const*)>
     598:	aa09      	add	r2, sp, #36	; 0x24
     59a:	4659      	mov	r1, fp
     59c:	4610      	mov	r0, r2
     59e:	f009 fb37 	bl	9c10 <String::String(char const*)>
     5a2:	a901      	add	r1, sp, #4
     5a4:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
     5a8:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     5ac:	f7ff fd5c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5b0:	a901      	add	r1, sp, #4
     5b2:	4608      	mov	r0, r1
     5b4:	f7ff fd9c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     5b8:	aa01      	add	r2, sp, #4
     5ba:	4639      	mov	r1, r7
     5bc:	4610      	mov	r0, r2
     5be:	f009 fb27 	bl	9c10 <String::String(char const*)>
     5c2:	aa05      	add	r2, sp, #20
     5c4:	499e      	ldr	r1, [pc, #632]	; (840 <initialize_opcode_info()+0x734>)
     5c6:	4610      	mov	r0, r2
     5c8:	f009 fb22 	bl	9c10 <String::String(char const*)>
     5cc:	aa09      	add	r2, sp, #36	; 0x24
     5ce:	4649      	mov	r1, r9
     5d0:	4610      	mov	r0, r2
     5d2:	f009 fb1d 	bl	9c10 <String::String(char const*)>
     5d6:	a901      	add	r1, sp, #4
     5d8:	f205 7084 	addw	r0, r5, #1924	; 0x784
     5dc:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
     5e0:	f7ff fd42 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     5e4:	a901      	add	r1, sp, #4
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     5e6:	f8df a280 	ldr.w	sl, [pc, #640]	; 868 <initialize_opcode_info()+0x75c>
	opcode_info[0x25] = {"AND","zpg","SZ",3,2};
     5ea:	4608      	mov	r0, r1
     5ec:	f7ff fd80 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x26] = {"ROL","zpg","SZC",5,2};
     5f0:	aa01      	add	r2, sp, #4
     5f2:	4651      	mov	r1, sl
     5f4:	4610      	mov	r0, r2
     5f6:	f009 fb0b 	bl	9c10 <String::String(char const*)>
     5fa:	aa05      	add	r2, sp, #20
     5fc:	4990      	ldr	r1, [pc, #576]	; (840 <initialize_opcode_info()+0x734>)
     5fe:	4610      	mov	r0, r2
     600:	f009 fb06 	bl	9c10 <String::String(char const*)>
     604:	aa09      	add	r2, sp, #36	; 0x24
     606:	4631      	mov	r1, r6
     608:	4610      	mov	r0, r2
     60a:	f009 fb01 	bl	9c10 <String::String(char const*)>
     60e:	f240 2c05 	movw	ip, #517	; 0x205
     612:	a901      	add	r1, sp, #4
     614:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
     618:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     61c:	f7ff fd24 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     620:	a901      	add	r1, sp, #4
     622:	4608      	mov	r0, r1
     624:	f7ff fd64 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x28] = {"PLP","","",4,1};
     628:	4986      	ldr	r1, [pc, #536]	; (844 <initialize_opcode_info()+0x738>)
     62a:	a801      	add	r0, sp, #4
     62c:	f009 faf0 	bl	9c10 <String::String(char const*)>
     630:	4621      	mov	r1, r4
     632:	a805      	add	r0, sp, #20
     634:	f009 faec 	bl	9c10 <String::String(char const*)>
     638:	4621      	mov	r1, r4
     63a:	a809      	add	r0, sp, #36	; 0x24
     63c:	f009 fae8 	bl	9c10 <String::String(char const*)>
     640:	f44f 7182 	mov.w	r1, #260	; 0x104
     644:	f505 6002 	add.w	r0, r5, #2080	; 0x820
     648:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     64c:	a901      	add	r1, sp, #4
     64e:	f7ff fd0b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     652:	a901      	add	r1, sp, #4
     654:	4608      	mov	r0, r1
     656:	f7ff fd4b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x29] = {"AND","#","SZ",2,2};
     65a:	4639      	mov	r1, r7
     65c:	a801      	add	r0, sp, #4
     65e:	f009 fad7 	bl	9c10 <String::String(char const*)>
     662:	4979      	ldr	r1, [pc, #484]	; (848 <initialize_opcode_info()+0x73c>)
     664:	a805      	add	r0, sp, #20
     666:	f009 fad3 	bl	9c10 <String::String(char const*)>
     66a:	4649      	mov	r1, r9
     66c:	a809      	add	r0, sp, #36	; 0x24
     66e:	f009 facf 	bl	9c10 <String::String(char const*)>
     672:	f240 2202 	movw	r2, #514	; 0x202
     676:	a901      	add	r1, sp, #4
     678:	f605 0054 	addw	r0, r5, #2132	; 0x854
     67c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     680:	f7ff fcf2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     684:	a901      	add	r1, sp, #4
     686:	4608      	mov	r0, r1
     688:	f7ff fd32 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x2a] = {"ROL","A","SZC",2,1};
     68c:	4651      	mov	r1, sl
     68e:	a801      	add	r0, sp, #4
     690:	f009 fabe 	bl	9c10 <String::String(char const*)>
     694:	4a6d      	ldr	r2, [pc, #436]	; (84c <initialize_opcode_info()+0x740>)
     696:	a805      	add	r0, sp, #20
     698:	4611      	mov	r1, r2
     69a:	f009 fab9 	bl	9c10 <String::String(char const*)>
     69e:	4631      	mov	r1, r6
     6a0:	a809      	add	r0, sp, #36	; 0x24
     6a2:	f009 fab5 	bl	9c10 <String::String(char const*)>
     6a6:	f44f 7381 	mov.w	r3, #258	; 0x102
     6aa:	a901      	add	r1, sp, #4
     6ac:	f605 0088 	addw	r0, r5, #2184	; 0x888
     6b0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     6b4:	f7ff fcd8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6b8:	a901      	add	r1, sp, #4
     6ba:	4608      	mov	r0, r1
     6bc:	f7ff fd18 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x2c] = {"BIT","abs","NVZ",4,3};
     6c0:	495e      	ldr	r1, [pc, #376]	; (83c <initialize_opcode_info()+0x730>)
     6c2:	a801      	add	r0, sp, #4
     6c4:	f009 faa4 	bl	9c10 <String::String(char const*)>
     6c8:	4641      	mov	r1, r8
     6ca:	a805      	add	r0, sp, #20
     6cc:	f009 faa0 	bl	9c10 <String::String(char const*)>
     6d0:	4659      	mov	r1, fp
     6d2:	a809      	add	r0, sp, #36	; 0x24
     6d4:	f44f 7b41 	mov.w	fp, #772	; 0x304
     6d8:	f009 fa9a 	bl	9c10 <String::String(char const*)>
     6dc:	a901      	add	r1, sp, #4
     6de:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
     6e2:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     6e6:	f7ff fcbf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     6ea:	a901      	add	r1, sp, #4
     6ec:	4608      	mov	r0, r1
     6ee:	f7ff fcff 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x2d] = {"AND","abs","SZ",4,3};
     6f2:	4639      	mov	r1, r7
     6f4:	a801      	add	r0, sp, #4
     6f6:	f009 fa8b 	bl	9c10 <String::String(char const*)>
     6fa:	4641      	mov	r1, r8
     6fc:	a805      	add	r0, sp, #20
     6fe:	f009 fa87 	bl	9c10 <String::String(char const*)>
     702:	4649      	mov	r1, r9
     704:	a809      	add	r0, sp, #36	; 0x24
     706:	f009 fa83 	bl	9c10 <String::String(char const*)>
     70a:	a901      	add	r1, sp, #4
     70c:	f605 1024 	addw	r0, r5, #2340	; 0x924
     710:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     714:	f7ff fca8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     718:	a901      	add	r1, sp, #4
     71a:	4608      	mov	r0, r1
     71c:	f7ff fce8 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x2e] = {"ROL","abs","SZC",6,3};
     720:	4651      	mov	r1, sl
     722:	a801      	add	r0, sp, #4
     724:	f009 fa74 	bl	9c10 <String::String(char const*)>
     728:	4641      	mov	r1, r8
     72a:	a805      	add	r0, sp, #20
     72c:	f009 fa70 	bl	9c10 <String::String(char const*)>
     730:	4631      	mov	r1, r6
     732:	a809      	add	r0, sp, #36	; 0x24
     734:	f009 fa6c 	bl	9c10 <String::String(char const*)>
     738:	f240 3e06 	movw	lr, #774	; 0x306
     73c:	a901      	add	r1, sp, #4
     73e:	f605 1058 	addw	r0, r5, #2392	; 0x958
     742:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     746:	f7ff fc8f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     74a:	a901      	add	r1, sp, #4
     74c:	4608      	mov	r0, r1
     74e:	f7ff fccf 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x30] = {"BMI","rel","",2,2};
     752:	493f      	ldr	r1, [pc, #252]	; (850 <initialize_opcode_info()+0x744>)
     754:	a801      	add	r0, sp, #4
     756:	f009 fa5b 	bl	9c10 <String::String(char const*)>
     75a:	493e      	ldr	r1, [pc, #248]	; (854 <initialize_opcode_info()+0x748>)
     75c:	a805      	add	r0, sp, #20
     75e:	f009 fa57 	bl	9c10 <String::String(char const*)>
     762:	4621      	mov	r1, r4
     764:	a809      	add	r0, sp, #36	; 0x24
     766:	f009 fa53 	bl	9c10 <String::String(char const*)>
     76a:	f240 2202 	movw	r2, #514	; 0x202
     76e:	a901      	add	r1, sp, #4
     770:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
     774:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     778:	f7ff fc76 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     77c:	a801      	add	r0, sp, #4
     77e:	f7ff fcb7 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x31] = {"AND","(ind),Y","SZ",5,2};
     782:	4639      	mov	r1, r7
     784:	a801      	add	r0, sp, #4
     786:	f009 fa43 	bl	9c10 <String::String(char const*)>
     78a:	4933      	ldr	r1, [pc, #204]	; (858 <initialize_opcode_info()+0x74c>)
     78c:	a805      	add	r0, sp, #20
     78e:	f009 fa3f 	bl	9c10 <String::String(char const*)>
     792:	4649      	mov	r1, r9
     794:	a809      	add	r0, sp, #36	; 0x24
     796:	f009 fa3b 	bl	9c10 <String::String(char const*)>
     79a:	aa01      	add	r2, sp, #4
     79c:	f240 2c05 	movw	ip, #517	; 0x205
     7a0:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
     7a4:	4611      	mov	r1, r2
     7a6:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     7aa:	f7ff fc5d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7ae:	a801      	add	r0, sp, #4
     7b0:	f7ff fc9e 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x35] = {"AND","zpg,X","SZ",4,2};
     7b4:	4639      	mov	r1, r7
     7b6:	a801      	add	r0, sp, #4
     7b8:	f009 fa2a 	bl	9c10 <String::String(char const*)>
     7bc:	4927      	ldr	r1, [pc, #156]	; (85c <initialize_opcode_info()+0x750>)
     7be:	a805      	add	r0, sp, #20
     7c0:	f009 fa26 	bl	9c10 <String::String(char const*)>
     7c4:	4649      	mov	r1, r9
     7c6:	a809      	add	r0, sp, #36	; 0x24
     7c8:	f009 fa22 	bl	9c10 <String::String(char const*)>
     7cc:	a801      	add	r0, sp, #4
     7ce:	f44f 7c01 	mov.w	ip, #516	; 0x204
     7d2:	4601      	mov	r1, r0
     7d4:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
     7d8:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     7dc:	f7ff fc44 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     7e0:	a801      	add	r0, sp, #4
     7e2:	f7ff fc85 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x36] = {"ROL","zpg,X","SZC",6,2};
     7e6:	4651      	mov	r1, sl
     7e8:	a801      	add	r0, sp, #4
     7ea:	f009 fa11 	bl	9c10 <String::String(char const*)>
     7ee:	491b      	ldr	r1, [pc, #108]	; (85c <initialize_opcode_info()+0x750>)
     7f0:	a805      	add	r0, sp, #20
     7f2:	f009 fa0d 	bl	9c10 <String::String(char const*)>
     7f6:	4631      	mov	r1, r6
     7f8:	a809      	add	r0, sp, #36	; 0x24
     7fa:	f009 fa09 	bl	9c10 <String::String(char const*)>
     7fe:	aa01      	add	r2, sp, #4
     800:	f240 2006 	movw	r0, #518	; 0x206
     804:	4611      	mov	r1, r2
     806:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     80a:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
     80e:	f7ff fc2b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     812:	a801      	add	r0, sp, #4
     814:	f7ff fc6c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x38] = {"SEC","","C",2,1};
     818:	4911      	ldr	r1, [pc, #68]	; (860 <initialize_opcode_info()+0x754>)
     81a:	a801      	add	r0, sp, #4
     81c:	f009 f9f8 	bl	9c10 <String::String(char const*)>
     820:	4621      	mov	r1, r4
     822:	a805      	add	r0, sp, #20
     824:	f009 f9f4 	bl	9c10 <String::String(char const*)>
     828:	e020      	b.n	86c <initialize_opcode_info()+0x760>
     82a:	bf00      	nop
     82c:	200008d8 	.word	0x200008d8
     830:	200008e0 	.word	0x200008e0
     834:	200008e4 	.word	0x200008e4
     838:	20000888 	.word	0x20000888
     83c:	200008e8 	.word	0x200008e8
     840:	20000894 	.word	0x20000894
     844:	200008f4 	.word	0x200008f4
     848:	200008a4 	.word	0x200008a4
     84c:	200008a8 	.word	0x200008a8
     850:	200008f8 	.word	0x200008f8
     854:	200008b4 	.word	0x200008b4
     858:	200008b8 	.word	0x200008b8
     85c:	200008c0 	.word	0x200008c0
     860:	200008fc 	.word	0x200008fc
     864:	200008ec 	.word	0x200008ec
     868:	200008f0 	.word	0x200008f0
     86c:	49ce      	ldr	r1, [pc, #824]	; (ba8 <initialize_opcode_info()+0xa9c>)
     86e:	a809      	add	r0, sp, #36	; 0x24
     870:	f009 f9ce 	bl	9c10 <String::String(char const*)>
     874:	f44f 7381 	mov.w	r3, #258	; 0x102
     878:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
     87c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     880:	ab01      	add	r3, sp, #4
     882:	4619      	mov	r1, r3
     884:	f7ff fbf0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     888:	a801      	add	r0, sp, #4
     88a:	f7ff fc31 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x39] = {"AND","abs,Y","SZ",4,3};
     88e:	4639      	mov	r1, r7
     890:	a801      	add	r0, sp, #4
     892:	f009 f9bd 	bl	9c10 <String::String(char const*)>
     896:	49c5      	ldr	r1, [pc, #788]	; (bac <initialize_opcode_info()+0xaa0>)
     898:	a805      	add	r0, sp, #20
     89a:	f009 f9b9 	bl	9c10 <String::String(char const*)>
     89e:	4649      	mov	r1, r9
     8a0:	a809      	add	r0, sp, #36	; 0x24
     8a2:	f009 f9b5 	bl	9c10 <String::String(char const*)>
     8a6:	ab01      	add	r3, sp, #4
     8a8:	f605 3094 	addw	r0, r5, #2964	; 0xb94
     8ac:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     8b0:	4619      	mov	r1, r3
     8b2:	f7ff fbd9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8b6:	a801      	add	r0, sp, #4
     8b8:	f7ff fc1a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x3d] = {"AND","abs,X","SZ",4,3};
     8bc:	4639      	mov	r1, r7
     8be:	a801      	add	r0, sp, #4
     8c0:	af01      	add	r7, sp, #4
     8c2:	f009 f9a5 	bl	9c10 <String::String(char const*)>
     8c6:	49ba      	ldr	r1, [pc, #744]	; (bb0 <initialize_opcode_info()+0xaa4>)
     8c8:	a805      	add	r0, sp, #20
     8ca:	f009 f9a1 	bl	9c10 <String::String(char const*)>
     8ce:	4649      	mov	r1, r9
     8d0:	a809      	add	r0, sp, #36	; 0x24
     8d2:	f009 f99d 	bl	9c10 <String::String(char const*)>
     8d6:	4639      	mov	r1, r7
     8d8:	f605 4064 	addw	r0, r5, #3172	; 0xc64
     8dc:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     8e0:	f7ff fbc2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     8e4:	4638      	mov	r0, r7
     8e6:	f7ff fc03 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     8ea:	4651      	mov	r1, sl
     8ec:	4638      	mov	r0, r7
     8ee:	f240 3707 	movw	r7, #775	; 0x307
     8f2:	f009 f98d 	bl	9c10 <String::String(char const*)>
     8f6:	49ae      	ldr	r1, [pc, #696]	; (bb0 <initialize_opcode_info()+0xaa4>)
     8f8:	a805      	add	r0, sp, #20
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
     8fa:	f44f 7b83 	mov.w	fp, #262	; 0x106
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     8fe:	f009 f987 	bl	9c10 <String::String(char const*)>
     902:	4631      	mov	r1, r6
     904:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     906:	f8df a2dc 	ldr.w	sl, [pc, #732]	; be4 <initialize_opcode_info()+0xad8>
	opcode_info[0x3e] = {"ROL","abs,X","SZC",7,3};
     90a:	f009 f981 	bl	9c10 <String::String(char const*)>
     90e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
     912:	f605 4798 	addw	r7, r5, #3224	; 0xc98
     916:	a901      	add	r1, sp, #4
     918:	4638      	mov	r0, r7
     91a:	f7ff fba5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     91e:	a801      	add	r0, sp, #4
     920:	f7ff fbe6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x40] = {"RTI","","SZCDVIB",6,1};
     924:	49a3      	ldr	r1, [pc, #652]	; (bb4 <initialize_opcode_info()+0xaa8>)
     926:	a801      	add	r0, sp, #4
     928:	f009 f972 	bl	9c10 <String::String(char const*)>
     92c:	4621      	mov	r1, r4
     92e:	a805      	add	r0, sp, #20
     930:	f009 f96e 	bl	9c10 <String::String(char const*)>
     934:	49a0      	ldr	r1, [pc, #640]	; (bb8 <initialize_opcode_info()+0xaac>)
     936:	a809      	add	r0, sp, #36	; 0x24
     938:	f009 f96a 	bl	9c10 <String::String(char const*)>
     93c:	a901      	add	r1, sp, #4
     93e:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
     942:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
     946:	f7ff fb8f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     94a:	a801      	add	r0, sp, #4
     94c:	f7ff fbd0 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     950:	4651      	mov	r1, sl
     952:	a801      	add	r0, sp, #4
	opcode_info[0x45] = {"EOR","zpg","SZ",3,2};
	opcode_info[0x46] = {"LSR","zpg","SZC",5,2};
     954:	f8df b290 	ldr.w	fp, [pc, #656]	; be8 <initialize_opcode_info()+0xadc>
	opcode_info[0x41] = {"EOR","(ind,X)","SZ",6,2};
     958:	f009 f95a 	bl	9c10 <String::String(char const*)>
     95c:	4997      	ldr	r1, [pc, #604]	; (bbc <initialize_opcode_info()+0xab0>)
     95e:	a805      	add	r0, sp, #20
     960:	f009 f956 	bl	9c10 <String::String(char const*)>
     964:	4649      	mov	r1, r9
     966:	a809      	add	r0, sp, #36	; 0x24
     968:	f009 f952 	bl	9c10 <String::String(char const*)>
     96c:	f240 2006 	movw	r0, #518	; 0x206
     970:	a901      	add	r1, sp, #4
     972:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     976:	f605 5034 	addw	r0, r5, #3380	; 0xd34
     97a:	f7ff fb75 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     97e:	a801      	add	r0, sp, #4
     980:	f7ff fbb6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x45] = {"EOR","zpg","SZ",3,2};
     984:	4651      	mov	r1, sl
     986:	a801      	add	r0, sp, #4
     988:	f009 f942 	bl	9c10 <String::String(char const*)>
     98c:	498c      	ldr	r1, [pc, #560]	; (bc0 <initialize_opcode_info()+0xab4>)
     98e:	a805      	add	r0, sp, #20
     990:	f009 f93e 	bl	9c10 <String::String(char const*)>
     994:	4649      	mov	r1, r9
     996:	a809      	add	r0, sp, #36	; 0x24
     998:	f009 f93a 	bl	9c10 <String::String(char const*)>
     99c:	f240 2e03 	movw	lr, #515	; 0x203
     9a0:	a901      	add	r1, sp, #4
     9a2:	f605 6004 	addw	r0, r5, #3588	; 0xe04
     9a6:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     9aa:	f7ff fb5d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9ae:	a801      	add	r0, sp, #4
     9b0:	f7ff fb9e 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x46] = {"LSR","zpg","SZC",5,2};
     9b4:	4659      	mov	r1, fp
     9b6:	a801      	add	r0, sp, #4
     9b8:	f009 f92a 	bl	9c10 <String::String(char const*)>
     9bc:	4980      	ldr	r1, [pc, #512]	; (bc0 <initialize_opcode_info()+0xab4>)
     9be:	a805      	add	r0, sp, #20
     9c0:	f009 f926 	bl	9c10 <String::String(char const*)>
     9c4:	4631      	mov	r1, r6
     9c6:	a809      	add	r0, sp, #36	; 0x24
     9c8:	f009 f922 	bl	9c10 <String::String(char const*)>
     9cc:	f240 2105 	movw	r1, #517	; 0x205
     9d0:	f605 6038 	addw	r0, r5, #3640	; 0xe38
     9d4:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     9d8:	a901      	add	r1, sp, #4
     9da:	f7ff fb45 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     9de:	a801      	add	r0, sp, #4
     9e0:	f7ff fb86 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x48] = {"PHA","","",3,1};
     9e4:	4977      	ldr	r1, [pc, #476]	; (bc4 <initialize_opcode_info()+0xab8>)
     9e6:	a801      	add	r0, sp, #4
     9e8:	f009 f912 	bl	9c10 <String::String(char const*)>
     9ec:	4621      	mov	r1, r4
     9ee:	a805      	add	r0, sp, #20
     9f0:	f009 f90e 	bl	9c10 <String::String(char const*)>
     9f4:	4621      	mov	r1, r4
     9f6:	a809      	add	r0, sp, #36	; 0x24
     9f8:	f009 f90a 	bl	9c10 <String::String(char const*)>
     9fc:	f240 1303 	movw	r3, #259	; 0x103
     a00:	a901      	add	r1, sp, #4
     a02:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
     a06:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     a0a:	f7ff fb2d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a0e:	a801      	add	r0, sp, #4
     a10:	f7ff fb6e 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x49] = {"EOR","#","SZ",2,2};
     a14:	4651      	mov	r1, sl
     a16:	a801      	add	r0, sp, #4
     a18:	f009 f8fa 	bl	9c10 <String::String(char const*)>
     a1c:	496a      	ldr	r1, [pc, #424]	; (bc8 <initialize_opcode_info()+0xabc>)
     a1e:	a805      	add	r0, sp, #20
     a20:	f009 f8f6 	bl	9c10 <String::String(char const*)>
     a24:	4649      	mov	r1, r9
     a26:	a809      	add	r0, sp, #36	; 0x24
     a28:	f009 f8f2 	bl	9c10 <String::String(char const*)>
     a2c:	aa01      	add	r2, sp, #4
     a2e:	f240 2102 	movw	r1, #514	; 0x202
     a32:	f605 60d4 	addw	r0, r5, #3796	; 0xed4
     a36:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     a3a:	4611      	mov	r1, r2
     a3c:	f7ff fb14 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a40:	aa01      	add	r2, sp, #4
     a42:	4610      	mov	r0, r2
     a44:	f7ff fb54 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x4a] = {"LSR","A","SZC",2,1};
     a48:	aa01      	add	r2, sp, #4
     a4a:	4659      	mov	r1, fp
     a4c:	4610      	mov	r0, r2
     a4e:	f009 f8df 	bl	9c10 <String::String(char const*)>
     a52:	4a5e      	ldr	r2, [pc, #376]	; (bcc <initialize_opcode_info()+0xac0>)
     a54:	4611      	mov	r1, r2
     a56:	aa05      	add	r2, sp, #20
     a58:	4610      	mov	r0, r2
     a5a:	f009 f8d9 	bl	9c10 <String::String(char const*)>
     a5e:	aa09      	add	r2, sp, #36	; 0x24
     a60:	4631      	mov	r1, r6
     a62:	4610      	mov	r0, r2
     a64:	f009 f8d4 	bl	9c10 <String::String(char const*)>
     a68:	ab01      	add	r3, sp, #4
     a6a:	f44f 7281 	mov.w	r2, #258	; 0x102
     a6e:	f605 7008 	addw	r0, r5, #3848	; 0xf08
     a72:	4619      	mov	r1, r3
     a74:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     a78:	f7ff faf6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     a7c:	ab01      	add	r3, sp, #4
     a7e:	4618      	mov	r0, r3
     a80:	f7ff fb36 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x4c] = {"JMP","abs","",3,3};
     a84:	ab01      	add	r3, sp, #4
     a86:	4952      	ldr	r1, [pc, #328]	; (bd0 <initialize_opcode_info()+0xac4>)
     a88:	4618      	mov	r0, r3
     a8a:	f009 f8c1 	bl	9c10 <String::String(char const*)>
     a8e:	ab05      	add	r3, sp, #20
     a90:	4641      	mov	r1, r8
     a92:	4618      	mov	r0, r3
     a94:	f009 f8bc 	bl	9c10 <String::String(char const*)>
     a98:	ab09      	add	r3, sp, #36	; 0x24
     a9a:	4621      	mov	r1, r4
     a9c:	4618      	mov	r0, r3
     a9e:	f009 f8b7 	bl	9c10 <String::String(char const*)>
     aa2:	f240 3303 	movw	r3, #771	; 0x303
     aa6:	f505 6077 	add.w	r0, r5, #3952	; 0xf70
     aaa:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     aae:	ab01      	add	r3, sp, #4
     ab0:	4619      	mov	r1, r3
     ab2:	f7ff fad9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ab6:	ab01      	add	r3, sp, #4
     ab8:	4618      	mov	r0, r3
     aba:	f7ff fb19 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x4d] = {"EOR","abs","SZ",4,3};
     abe:	ab01      	add	r3, sp, #4
     ac0:	4651      	mov	r1, sl
     ac2:	4618      	mov	r0, r3
     ac4:	f009 f8a4 	bl	9c10 <String::String(char const*)>
     ac8:	ab05      	add	r3, sp, #20
     aca:	4641      	mov	r1, r8
     acc:	4618      	mov	r0, r3
     ace:	f009 f89f 	bl	9c10 <String::String(char const*)>
     ad2:	ab09      	add	r3, sp, #36	; 0x24
     ad4:	4649      	mov	r1, r9
     ad6:	4618      	mov	r0, r3
     ad8:	f009 f89a 	bl	9c10 <String::String(char const*)>
     adc:	f44f 7341 	mov.w	r3, #772	; 0x304
     ae0:	f605 70a4 	addw	r0, r5, #4004	; 0xfa4
     ae4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     ae8:	ab01      	add	r3, sp, #4
     aea:	4619      	mov	r1, r3
     aec:	f7ff fabc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     af0:	a801      	add	r0, sp, #4
     af2:	f7ff fafd 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x4e] = {"LSR","abs","SZC",6,3};
     af6:	4659      	mov	r1, fp
     af8:	a801      	add	r0, sp, #4
     afa:	f009 f889 	bl	9c10 <String::String(char const*)>
     afe:	4641      	mov	r1, r8
     b00:	a805      	add	r0, sp, #20
     b02:	f009 f885 	bl	9c10 <String::String(char const*)>
     b06:	4631      	mov	r1, r6
     b08:	a809      	add	r0, sp, #36	; 0x24
     b0a:	f009 f881 	bl	9c10 <String::String(char const*)>
     b0e:	ab01      	add	r3, sp, #4
     b10:	f240 3e06 	movw	lr, #774	; 0x306
     b14:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
     b18:	4619      	mov	r1, r3
     b1a:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     b1e:	f7ff faa3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b22:	a801      	add	r0, sp, #4
     b24:	f7ff fae4 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x50] = {"BVC","rel","",2,2};
     b28:	492a      	ldr	r1, [pc, #168]	; (bd4 <initialize_opcode_info()+0xac8>)
     b2a:	a801      	add	r0, sp, #4
     b2c:	f009 f870 	bl	9c10 <String::String(char const*)>
     b30:	4929      	ldr	r1, [pc, #164]	; (bd8 <initialize_opcode_info()+0xacc>)
     b32:	a805      	add	r0, sp, #20
     b34:	f009 f86c 	bl	9c10 <String::String(char const*)>
     b38:	4621      	mov	r1, r4
     b3a:	a809      	add	r0, sp, #36	; 0x24
     b3c:	f009 f868 	bl	9c10 <String::String(char const*)>
     b40:	aa01      	add	r2, sp, #4
     b42:	f240 2102 	movw	r1, #514	; 0x202
     b46:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
     b4a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     b4e:	4611      	mov	r1, r2
     b50:	f7ff fa8a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b54:	a801      	add	r0, sp, #4
     b56:	f7ff facb 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x51] = {"EOR","(ind),Y","SZ",5,2};
     b5a:	4651      	mov	r1, sl
     b5c:	a801      	add	r0, sp, #4
     b5e:	f009 f857 	bl	9c10 <String::String(char const*)>
     b62:	491e      	ldr	r1, [pc, #120]	; (bdc <initialize_opcode_info()+0xad0>)
     b64:	a805      	add	r0, sp, #20
     b66:	f009 f853 	bl	9c10 <String::String(char const*)>
     b6a:	4649      	mov	r1, r9
     b6c:	a809      	add	r0, sp, #36	; 0x24
     b6e:	f009 f84f 	bl	9c10 <String::String(char const*)>
     b72:	f10d 0c04 	add.w	ip, sp, #4
     b76:	f240 2105 	movw	r1, #517	; 0x205
     b7a:	f507 7077 	add.w	r0, r7, #988	; 0x3dc
     b7e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     b82:	4661      	mov	r1, ip
     b84:	f7ff fa70 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     b88:	a801      	add	r0, sp, #4
     b8a:	f7ff fab1 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x55] = {"EOR","zpg,X","SZ",4,2};
     b8e:	4651      	mov	r1, sl
     b90:	a801      	add	r0, sp, #4
     b92:	f009 f83d 	bl	9c10 <String::String(char const*)>
     b96:	4912      	ldr	r1, [pc, #72]	; (be0 <initialize_opcode_info()+0xad4>)
     b98:	a805      	add	r0, sp, #20
     b9a:	f009 f839 	bl	9c10 <String::String(char const*)>
     b9e:	4649      	mov	r1, r9
     ba0:	a809      	add	r0, sp, #36	; 0x24
     ba2:	f009 f835 	bl	9c10 <String::String(char const*)>
     ba6:	e021      	b.n	bec <initialize_opcode_info()+0xae0>
     ba8:	200008cc 	.word	0x200008cc
     bac:	200008d0 	.word	0x200008d0
     bb0:	200008d8 	.word	0x200008d8
     bb4:	20000900 	.word	0x20000900
     bb8:	20000904 	.word	0x20000904
     bbc:	20000888 	.word	0x20000888
     bc0:	20000894 	.word	0x20000894
     bc4:	20000914 	.word	0x20000914
     bc8:	200008a4 	.word	0x200008a4
     bcc:	200008a8 	.word	0x200008a8
     bd0:	20000918 	.word	0x20000918
     bd4:	2000091c 	.word	0x2000091c
     bd8:	200008b4 	.word	0x200008b4
     bdc:	200008b8 	.word	0x200008b8
     be0:	200008c0 	.word	0x200008c0
     be4:	2000090c 	.word	0x2000090c
     be8:	20000910 	.word	0x20000910
     bec:	aa01      	add	r2, sp, #4
     bee:	f44f 7c01 	mov.w	ip, #516	; 0x204
     bf2:	f207 40ac 	addw	r0, r7, #1196	; 0x4ac
     bf6:	4611      	mov	r1, r2
     bf8:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     bfc:	f7ff fa34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c00:	a801      	add	r0, sp, #4
     c02:	f7ff fa75 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x56] = {"LSR","zpg,X","SZC",6,2};
     c06:	4659      	mov	r1, fp
     c08:	a801      	add	r0, sp, #4
     c0a:	f009 f801 	bl	9c10 <String::String(char const*)>
     c0e:	49da      	ldr	r1, [pc, #872]	; (f78 <initialize_opcode_info()+0xe6c>)
     c10:	a805      	add	r0, sp, #20
     c12:	f008 fffd 	bl	9c10 <String::String(char const*)>
     c16:	4631      	mov	r1, r6
     c18:	a809      	add	r0, sp, #36	; 0x24
     c1a:	f008 fff9 	bl	9c10 <String::String(char const*)>
     c1e:	aa01      	add	r2, sp, #4
     c20:	f240 2006 	movw	r0, #518	; 0x206
     c24:	4611      	mov	r1, r2
     c26:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     c2a:	f507 609c 	add.w	r0, r7, #1248	; 0x4e0
     c2e:	f7ff fa1b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c32:	a801      	add	r0, sp, #4
     c34:	f7ff fa5c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x58] = {"CLI","","I",2,1};
     c38:	49d0      	ldr	r1, [pc, #832]	; (f7c <initialize_opcode_info()+0xe70>)
     c3a:	a801      	add	r0, sp, #4
     c3c:	f008 ffe8 	bl	9c10 <String::String(char const*)>
     c40:	4621      	mov	r1, r4
     c42:	a805      	add	r0, sp, #20
     c44:	f008 ffe4 	bl	9c10 <String::String(char const*)>
     c48:	4bcd      	ldr	r3, [pc, #820]	; (f80 <initialize_opcode_info()+0xe74>)
     c4a:	a809      	add	r0, sp, #36	; 0x24
     c4c:	4619      	mov	r1, r3
     c4e:	f008 ffdf 	bl	9c10 <String::String(char const*)>
     c52:	ab01      	add	r3, sp, #4
     c54:	f44f 7281 	mov.w	r2, #258	; 0x102
     c58:	f505 508f 	add.w	r0, r5, #4576	; 0x11e0
     c5c:	4619      	mov	r1, r3
     c5e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     c62:	f7ff fa01 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c66:	a801      	add	r0, sp, #4
     c68:	f7ff fa42 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x59] = {"EOR","abs,Y","SZ",4,3};
     c6c:	4651      	mov	r1, sl
     c6e:	a801      	add	r0, sp, #4
     c70:	f008 ffce 	bl	9c10 <String::String(char const*)>
     c74:	49c3      	ldr	r1, [pc, #780]	; (f84 <initialize_opcode_info()+0xe78>)
     c76:	a805      	add	r0, sp, #20
     c78:	f008 ffca 	bl	9c10 <String::String(char const*)>
     c7c:	4649      	mov	r1, r9
     c7e:	a809      	add	r0, sp, #36	; 0x24
     c80:	f008 ffc6 	bl	9c10 <String::String(char const*)>
     c84:	f10d 0c04 	add.w	ip, sp, #4
     c88:	f44f 7341 	mov.w	r3, #772	; 0x304
     c8c:	f207 507c 	addw	r0, r7, #1404	; 0x57c
     c90:	4661      	mov	r1, ip
     c92:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     c96:	f7ff f9e7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     c9a:	a801      	add	r0, sp, #4
     c9c:	f7ff fa28 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     ca0:	4651      	mov	r1, sl
     ca2:	f10d 0a04 	add.w	sl, sp, #4
     ca6:	4650      	mov	r0, sl
     ca8:	f10d 0a14 	add.w	sl, sp, #20
     cac:	f008 ffb0 	bl	9c10 <String::String(char const*)>
     cb0:	49b5      	ldr	r1, [pc, #724]	; (f88 <initialize_opcode_info()+0xe7c>)
     cb2:	4650      	mov	r0, sl
     cb4:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     cb8:	f008 ffaa 	bl	9c10 <String::String(char const*)>
     cbc:	4649      	mov	r1, r9
     cbe:	4650      	mov	r0, sl
     cc0:	f10d 0a04 	add.w	sl, sp, #4
     cc4:	f008 ffa4 	bl	9c10 <String::String(char const*)>
     cc8:	f44f 7341 	mov.w	r3, #772	; 0x304
     ccc:	4651      	mov	r1, sl
     cce:	f207 604c 	addw	r0, r7, #1612	; 0x64c
     cd2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     cd6:	f7ff f9c7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     cda:	4650      	mov	r0, sl
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
     cdc:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0x5d] = {"EOR","abs,X","SZ",4,3};
     ce0:	f7ff fa06 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x5e] = {"LSR","abs,X","SZC",7,3};
     ce4:	4650      	mov	r0, sl
     ce6:	f10d 0a14 	add.w	sl, sp, #20
     cea:	4659      	mov	r1, fp
     cec:	f008 ff90 	bl	9c10 <String::String(char const*)>
     cf0:	49a5      	ldr	r1, [pc, #660]	; (f88 <initialize_opcode_info()+0xe7c>)
     cf2:	4650      	mov	r0, sl
     cf4:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     cf8:	f008 ff8a 	bl	9c10 <String::String(char const*)>
     cfc:	4631      	mov	r1, r6
     cfe:	4650      	mov	r0, sl
     d00:	f10d 0a04 	add.w	sl, sp, #4
     d04:	f008 ff84 	bl	9c10 <String::String(char const*)>
     d08:	f507 60d0 	add.w	r0, r7, #1664	; 0x680
     d0c:	4651      	mov	r1, sl
     d0e:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
     d12:	f7ff f9a9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d16:	4650      	mov	r0, sl
     d18:	f7ff f9ea 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x60] = {"RTS","","",6,1};
     d1c:	4650      	mov	r0, sl
     d1e:	f10d 0a14 	add.w	sl, sp, #20
     d22:	499a      	ldr	r1, [pc, #616]	; (f8c <initialize_opcode_info()+0xe80>)
     d24:	f008 ff74 	bl	9c10 <String::String(char const*)>
     d28:	4621      	mov	r1, r4
     d2a:	4650      	mov	r0, sl
     d2c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     d30:	f008 ff6e 	bl	9c10 <String::String(char const*)>
     d34:	f44f 7b83 	mov.w	fp, #262	; 0x106
     d38:	4650      	mov	r0, sl
     d3a:	f10d 0a04 	add.w	sl, sp, #4
     d3e:	4621      	mov	r1, r4
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     d40:	f8df 9274 	ldr.w	r9, [pc, #628]	; fb8 <initialize_opcode_info()+0xeac>
	opcode_info[0x60] = {"RTS","","",6,1};
     d44:	f008 ff64 	bl	9c10 <String::String(char const*)>
     d48:	4651      	mov	r1, sl
     d4a:	f505 509c 	add.w	r0, r5, #4992	; 0x1380
     d4e:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     d52:	f8df b268 	ldr.w	fp, [pc, #616]	; fbc <initialize_opcode_info()+0xeb0>
	opcode_info[0x60] = {"RTS","","",6,1};
     d56:	f7ff f987 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d5a:	4650      	mov	r0, sl
	opcode_info[0x65] = {"ADC","zpg","SVZC",3,2};
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     d5c:	f240 2505 	movw	r5, #517	; 0x205
	opcode_info[0x60] = {"RTS","","",6,1};
     d60:	f7ff f9c6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x61] = {"ADC","(ind,X)","SVZC",6,2};
     d64:	4650      	mov	r0, sl
     d66:	f10d 0a14 	add.w	sl, sp, #20
     d6a:	4659      	mov	r1, fp
     d6c:	f008 ff50 	bl	9c10 <String::String(char const*)>
     d70:	4987      	ldr	r1, [pc, #540]	; (f90 <initialize_opcode_info()+0xe84>)
     d72:	4650      	mov	r0, sl
     d74:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     d78:	f008 ff4a 	bl	9c10 <String::String(char const*)>
     d7c:	4649      	mov	r1, r9
     d7e:	4650      	mov	r0, sl
     d80:	f10d 0a04 	add.w	sl, sp, #4
     d84:	f008 ff44 	bl	9c10 <String::String(char const*)>
     d88:	f240 2006 	movw	r0, #518	; 0x206
     d8c:	4651      	mov	r1, sl
     d8e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
     d92:	f207 701c 	addw	r0, r7, #1820	; 0x71c
     d96:	f7ff f967 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     d9a:	4650      	mov	r0, sl
     d9c:	f7ff f9a8 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x65] = {"ADC","zpg","SVZC",3,2};
     da0:	4650      	mov	r0, sl
     da2:	f10d 0a14 	add.w	sl, sp, #20
     da6:	4659      	mov	r1, fp
     da8:	f008 ff32 	bl	9c10 <String::String(char const*)>
     dac:	4979      	ldr	r1, [pc, #484]	; (f94 <initialize_opcode_info()+0xe88>)
     dae:	4650      	mov	r0, sl
     db0:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     db4:	f008 ff2c 	bl	9c10 <String::String(char const*)>
     db8:	4649      	mov	r1, r9
     dba:	4650      	mov	r0, sl
     dbc:	f10d 0a04 	add.w	sl, sp, #4
     dc0:	f008 ff26 	bl	9c10 <String::String(char const*)>
     dc4:	f240 2e03 	movw	lr, #515	; 0x203
     dc8:	4651      	mov	r1, sl
     dca:	f207 70ec 	addw	r0, r7, #2028	; 0x7ec
     dce:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     dd2:	f7ff f949 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     dd6:	4650      	mov	r0, sl
     dd8:	f7ff f98a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     ddc:	4650      	mov	r0, sl
     dde:	f10d 0a14 	add.w	sl, sp, #20
     de2:	496d      	ldr	r1, [pc, #436]	; (f98 <initialize_opcode_info()+0xe8c>)
     de4:	f008 ff14 	bl	9c10 <String::String(char const*)>
     de8:	496a      	ldr	r1, [pc, #424]	; (f94 <initialize_opcode_info()+0xe88>)
     dea:	4650      	mov	r0, sl
     dec:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
     df0:	f008 ff0e 	bl	9c10 <String::String(char const*)>
     df4:	4631      	mov	r1, r6
     df6:	4650      	mov	r0, sl
     df8:	f10d 0a04 	add.w	sl, sp, #4
     dfc:	f008 ff08 	bl	9c10 <String::String(char const*)>
     e00:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
     e04:	f507 6502 	add.w	r5, r7, #2080	; 0x820
     e08:	4651      	mov	r1, sl
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
	opcode_info[0x78] = {"SEI","","I",2,1};
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
     e0a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; fc0 <initialize_opcode_info()+0xeb4>
	opcode_info[0x66] = {"ROR","zpg","SZC",5,2};
     e0e:	4628      	mov	r0, r5
     e10:	f7ff f92a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e14:	a801      	add	r0, sp, #4
     e16:	f7ff f96b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x68] = {"PLA","","",4,1};
     e1a:	4960      	ldr	r1, [pc, #384]	; (f9c <initialize_opcode_info()+0xe90>)
     e1c:	a801      	add	r0, sp, #4
     e1e:	f008 fef7 	bl	9c10 <String::String(char const*)>
     e22:	4621      	mov	r1, r4
     e24:	a805      	add	r0, sp, #20
     e26:	f008 fef3 	bl	9c10 <String::String(char const*)>
     e2a:	4621      	mov	r1, r4
     e2c:	a809      	add	r0, sp, #36	; 0x24
     e2e:	f008 feef 	bl	9c10 <String::String(char const*)>
     e32:	f44f 7182 	mov.w	r1, #260	; 0x104
     e36:	f607 0088 	addw	r0, r7, #2184	; 0x888
     e3a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     e3e:	a901      	add	r1, sp, #4
     e40:	f7ff f912 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e44:	a801      	add	r0, sp, #4
     e46:	f7ff f953 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x69] = {"ADC","#","SVZC",2,2};
     e4a:	4659      	mov	r1, fp
     e4c:	a801      	add	r0, sp, #4
     e4e:	f008 fedf 	bl	9c10 <String::String(char const*)>
     e52:	4953      	ldr	r1, [pc, #332]	; (fa0 <initialize_opcode_info()+0xe94>)
     e54:	a805      	add	r0, sp, #20
     e56:	f008 fedb 	bl	9c10 <String::String(char const*)>
     e5a:	4649      	mov	r1, r9
     e5c:	a809      	add	r0, sp, #36	; 0x24
     e5e:	f008 fed7 	bl	9c10 <String::String(char const*)>
     e62:	f240 2102 	movw	r1, #514	; 0x202
     e66:	f607 00bc 	addw	r0, r7, #2236	; 0x8bc
     e6a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
     e6e:	a901      	add	r1, sp, #4
     e70:	f7ff f8fa 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     e74:	a801      	add	r0, sp, #4
     e76:	f7ff f93b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x6a] = {"ROR","A","SZC",2,1};
     e7a:	4947      	ldr	r1, [pc, #284]	; (f98 <initialize_opcode_info()+0xe8c>)
     e7c:	a801      	add	r0, sp, #4
     e7e:	f008 fec7 	bl	9c10 <String::String(char const*)>
     e82:	4a48      	ldr	r2, [pc, #288]	; (fa4 <initialize_opcode_info()+0xe98>)
     e84:	a805      	add	r0, sp, #20
     e86:	4611      	mov	r1, r2
     e88:	f008 fec2 	bl	9c10 <String::String(char const*)>
     e8c:	4631      	mov	r1, r6
     e8e:	a809      	add	r0, sp, #36	; 0x24
     e90:	f008 febe 	bl	9c10 <String::String(char const*)>
     e94:	f44f 7281 	mov.w	r2, #258	; 0x102
     e98:	a901      	add	r1, sp, #4
     e9a:	f507 600f 	add.w	r0, r7, #2288	; 0x8f0
     e9e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
     ea2:	f7ff f8e1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ea6:	a801      	add	r0, sp, #4
     ea8:	f7ff f922 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x6c] = {"JMP","(ind)","",5,3};
     eac:	493e      	ldr	r1, [pc, #248]	; (fa8 <initialize_opcode_info()+0xe9c>)
     eae:	a801      	add	r0, sp, #4
     eb0:	f008 feae 	bl	9c10 <String::String(char const*)>
     eb4:	493d      	ldr	r1, [pc, #244]	; (fac <initialize_opcode_info()+0xea0>)
     eb6:	a805      	add	r0, sp, #20
     eb8:	f008 feaa 	bl	9c10 <String::String(char const*)>
     ebc:	4621      	mov	r1, r4
     ebe:	a809      	add	r0, sp, #36	; 0x24
     ec0:	f008 fea6 	bl	9c10 <String::String(char const*)>
     ec4:	f240 3c05 	movw	ip, #773	; 0x305
     ec8:	a901      	add	r1, sp, #4
     eca:	f607 1058 	addw	r0, r7, #2392	; 0x958
     ece:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     ed2:	f7ff f8c9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     ed6:	a801      	add	r0, sp, #4
     ed8:	f7ff f90a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x6d] = {"ADC","abs","SVZC",4,3};
     edc:	4659      	mov	r1, fp
     ede:	a801      	add	r0, sp, #4
     ee0:	f008 fe96 	bl	9c10 <String::String(char const*)>
     ee4:	4641      	mov	r1, r8
     ee6:	a805      	add	r0, sp, #20
     ee8:	f008 fe92 	bl	9c10 <String::String(char const*)>
     eec:	4649      	mov	r1, r9
     eee:	a809      	add	r0, sp, #36	; 0x24
     ef0:	f008 fe8e 	bl	9c10 <String::String(char const*)>
     ef4:	f44f 7341 	mov.w	r3, #772	; 0x304
     ef8:	a901      	add	r1, sp, #4
     efa:	f607 108c 	addw	r0, r7, #2444	; 0x98c
     efe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
     f02:	f7ff f8b1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f06:	a801      	add	r0, sp, #4
     f08:	f7ff f8f2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x6e] = {"ROR","abs","SZC",6,3};
     f0c:	4922      	ldr	r1, [pc, #136]	; (f98 <initialize_opcode_info()+0xe8c>)
     f0e:	a801      	add	r0, sp, #4
     f10:	f008 fe7e 	bl	9c10 <String::String(char const*)>
     f14:	4641      	mov	r1, r8
     f16:	a805      	add	r0, sp, #20
     f18:	f008 fe7a 	bl	9c10 <String::String(char const*)>
     f1c:	4631      	mov	r1, r6
     f1e:	a809      	add	r0, sp, #36	; 0x24
     f20:	f008 fe76 	bl	9c10 <String::String(char const*)>
     f24:	f240 3e06 	movw	lr, #774	; 0x306
     f28:	a901      	add	r1, sp, #4
     f2a:	f507 601c 	add.w	r0, r7, #2496	; 0x9c0
     f2e:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
     f32:	f7ff f899 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f36:	a801      	add	r0, sp, #4
     f38:	f7ff f8da 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x70] = {"BVS","rel","",4,2};
     f3c:	491c      	ldr	r1, [pc, #112]	; (fb0 <initialize_opcode_info()+0xea4>)
     f3e:	a801      	add	r0, sp, #4
     f40:	f008 fe66 	bl	9c10 <String::String(char const*)>
     f44:	491b      	ldr	r1, [pc, #108]	; (fb4 <initialize_opcode_info()+0xea8>)
     f46:	a805      	add	r0, sp, #20
     f48:	f008 fe62 	bl	9c10 <String::String(char const*)>
     f4c:	4621      	mov	r1, r4
     f4e:	a809      	add	r0, sp, #36	; 0x24
     f50:	f008 fe5e 	bl	9c10 <String::String(char const*)>
     f54:	f44f 7c01 	mov.w	ip, #516	; 0x204
     f58:	a901      	add	r1, sp, #4
     f5a:	f607 2028 	addw	r0, r7, #2600	; 0xa28
     f5e:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     f62:	f7ff f881 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     f66:	a801      	add	r0, sp, #4
     f68:	f7ff f8c2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x71] = {"ADC","(ind),Y","SVZC",4,2};
     f6c:	4659      	mov	r1, fp
     f6e:	a801      	add	r0, sp, #4
     f70:	f008 fe4e 	bl	9c10 <String::String(char const*)>
     f74:	e026      	b.n	fc4 <initialize_opcode_info()+0xeb8>
     f76:	bf00      	nop
     f78:	200008c0 	.word	0x200008c0
     f7c:	20000920 	.word	0x20000920
     f80:	20000924 	.word	0x20000924
     f84:	200008d0 	.word	0x200008d0
     f88:	200008d8 	.word	0x200008d8
     f8c:	20000928 	.word	0x20000928
     f90:	20000888 	.word	0x20000888
     f94:	20000894 	.word	0x20000894
     f98:	20000938 	.word	0x20000938
     f9c:	2000093c 	.word	0x2000093c
     fa0:	200008a4 	.word	0x200008a4
     fa4:	200008a8 	.word	0x200008a8
     fa8:	20000918 	.word	0x20000918
     fac:	20000940 	.word	0x20000940
     fb0:	20000948 	.word	0x20000948
     fb4:	200008b4 	.word	0x200008b4
     fb8:	20000930 	.word	0x20000930
     fbc:	2000092c 	.word	0x2000092c
     fc0:	20000950 	.word	0x20000950
     fc4:	49ca      	ldr	r1, [pc, #808]	; (12f0 <initialize_opcode_info()+0x11e4>)
     fc6:	a805      	add	r0, sp, #20
     fc8:	f008 fe22 	bl	9c10 <String::String(char const*)>
     fcc:	4649      	mov	r1, r9
     fce:	a809      	add	r0, sp, #36	; 0x24
     fd0:	f008 fe1e 	bl	9c10 <String::String(char const*)>
     fd4:	f44f 7c01 	mov.w	ip, #516	; 0x204
     fd8:	a901      	add	r1, sp, #4
     fda:	f607 205c 	addw	r0, r7, #2652	; 0xa5c
     fde:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
     fe2:	f7ff f841 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
     fe6:	a801      	add	r0, sp, #4
     fe8:	f7ff f882 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x75] = {"ADC","zpg,X","SVZC",4,2};
     fec:	4659      	mov	r1, fp
     fee:	a801      	add	r0, sp, #4
     ff0:	f008 fe0e 	bl	9c10 <String::String(char const*)>
     ff4:	49bf      	ldr	r1, [pc, #764]	; (12f4 <initialize_opcode_info()+0x11e8>)
     ff6:	a805      	add	r0, sp, #20
     ff8:	f008 fe0a 	bl	9c10 <String::String(char const*)>
     ffc:	4649      	mov	r1, r9
     ffe:	a809      	add	r0, sp, #36	; 0x24
    1000:	f008 fe06 	bl	9c10 <String::String(char const*)>
    1004:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1008:	a901      	add	r1, sp, #4
    100a:	f607 302c 	addw	r0, r7, #2860	; 0xb2c
    100e:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1012:	f7ff f829 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1016:	a801      	add	r0, sp, #4
    1018:	f7ff f86a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x76] = {"ROR","zpg,X","SZC",6,2};
    101c:	49b6      	ldr	r1, [pc, #728]	; (12f8 <initialize_opcode_info()+0x11ec>)
    101e:	a801      	add	r0, sp, #4
    1020:	f008 fdf6 	bl	9c10 <String::String(char const*)>
    1024:	49b3      	ldr	r1, [pc, #716]	; (12f4 <initialize_opcode_info()+0x11e8>)
    1026:	a805      	add	r0, sp, #20
    1028:	f008 fdf2 	bl	9c10 <String::String(char const*)>
    102c:	4631      	mov	r1, r6
    102e:	a809      	add	r0, sp, #36	; 0x24
    1030:	f008 fdee 	bl	9c10 <String::String(char const*)>
    1034:	f240 2006 	movw	r0, #518	; 0x206
    1038:	a901      	add	r1, sp, #4
    103a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    103e:	f507 6036 	add.w	r0, r7, #2912	; 0xb60
    1042:	f7ff f811 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1046:	a801      	add	r0, sp, #4
    1048:	f7ff f852 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x78] = {"SEI","","I",2,1};
    104c:	49ab      	ldr	r1, [pc, #684]	; (12fc <initialize_opcode_info()+0x11f0>)
    104e:	a801      	add	r0, sp, #4
    1050:	f008 fdde 	bl	9c10 <String::String(char const*)>
    1054:	4621      	mov	r1, r4
    1056:	a805      	add	r0, sp, #20
    1058:	f008 fdda 	bl	9c10 <String::String(char const*)>
    105c:	4ba8      	ldr	r3, [pc, #672]	; (1300 <initialize_opcode_info()+0x11f4>)
    105e:	a809      	add	r0, sp, #36	; 0x24
    1060:	4619      	mov	r1, r3
    1062:	f008 fdd5 	bl	9c10 <String::String(char const*)>
    1066:	f44f 7281 	mov.w	r2, #258	; 0x102
    106a:	a901      	add	r1, sp, #4
    106c:	f607 30c8 	addw	r0, r7, #3016	; 0xbc8
    1070:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1074:	f7fe fff8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1078:	a801      	add	r0, sp, #4
    107a:	f7ff f839 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x79] = {"ADC","abs,Y","SVZC",4,3};
    107e:	4659      	mov	r1, fp
    1080:	a801      	add	r0, sp, #4
    1082:	f008 fdc5 	bl	9c10 <String::String(char const*)>
    1086:	499f      	ldr	r1, [pc, #636]	; (1304 <initialize_opcode_info()+0x11f8>)
    1088:	a805      	add	r0, sp, #20
    108a:	f008 fdc1 	bl	9c10 <String::String(char const*)>
    108e:	4649      	mov	r1, r9
    1090:	a809      	add	r0, sp, #36	; 0x24
    1092:	f008 fdbd 	bl	9c10 <String::String(char const*)>
    1096:	f44f 7341 	mov.w	r3, #772	; 0x304
    109a:	a901      	add	r1, sp, #4
    109c:	f607 30fc 	addw	r0, r7, #3068	; 0xbfc
    10a0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    10a4:	f7fe ffe0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10a8:	a801      	add	r0, sp, #4
    10aa:	f7ff f821 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    10ae:	4659      	mov	r1, fp
    10b0:	a801      	add	r0, sp, #4
	opcode_info[0x84] = {"STY","zpg","",3,2};
    10b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 1328 <initialize_opcode_info()+0x121c>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    10b6:	f008 fdab 	bl	9c10 <String::String(char const*)>
    10ba:	4993      	ldr	r1, [pc, #588]	; (1308 <initialize_opcode_info()+0x11fc>)
    10bc:	a805      	add	r0, sp, #20
    10be:	f008 fda7 	bl	9c10 <String::String(char const*)>
    10c2:	4649      	mov	r1, r9
    10c4:	a809      	add	r0, sp, #36	; 0x24
	opcode_info[0x85] = {"STA","zpg","",3,2};
	opcode_info[0x86] = {"STX","zpg","",3,2};
    10c6:	f8df 9264 	ldr.w	r9, [pc, #612]	; 132c <initialize_opcode_info()+0x1220>
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    10ca:	f008 fda1 	bl	9c10 <String::String(char const*)>
    10ce:	f44f 7341 	mov.w	r3, #772	; 0x304
    10d2:	a901      	add	r1, sp, #4
    10d4:	f607 40cc 	addw	r0, r7, #3276	; 0xccc
    10d8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    10dc:	f7fe ffc4 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    10e0:	a801      	add	r0, sp, #4
	opcode_info[0x84] = {"STY","zpg","",3,2};
    10e2:	f240 2703 	movw	r7, #515	; 0x203
	opcode_info[0x7d] = {"ADC","abs,X","SVZC",4,3};
    10e6:	f7ff f803 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x7e] = {"ROR","abs,X","SZC",7,3};
    10ea:	4983      	ldr	r1, [pc, #524]	; (12f8 <initialize_opcode_info()+0x11ec>)
    10ec:	a801      	add	r0, sp, #4
    10ee:	f008 fd8f 	bl	9c10 <String::String(char const*)>
    10f2:	4985      	ldr	r1, [pc, #532]	; (1308 <initialize_opcode_info()+0x11fc>)
    10f4:	a805      	add	r0, sp, #20
    10f6:	f008 fd8b 	bl	9c10 <String::String(char const*)>
    10fa:	4631      	mov	r1, r6
    10fc:	a809      	add	r0, sp, #36	; 0x24
    10fe:	f008 fd87 	bl	9c10 <String::String(char const*)>
    1102:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    1106:	f240 3307 	movw	r3, #775	; 0x307
    110a:	a901      	add	r1, sp, #4
    110c:	4610      	mov	r0, r2
    110e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1112:	f7fe ffa9 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1116:	a801      	add	r0, sp, #4
    1118:	f7fe ffea 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x81] = {"STA","(ind,X)","",6,2};
    111c:	4651      	mov	r1, sl
    111e:	a801      	add	r0, sp, #4
    1120:	f008 fd76 	bl	9c10 <String::String(char const*)>
    1124:	4979      	ldr	r1, [pc, #484]	; (130c <initialize_opcode_info()+0x1200>)
    1126:	a805      	add	r0, sp, #20
    1128:	f008 fd72 	bl	9c10 <String::String(char const*)>
    112c:	4621      	mov	r1, r4
    112e:	a809      	add	r0, sp, #36	; 0x24
    1130:	f008 fd6e 	bl	9c10 <String::String(char const*)>
    1134:	f240 2006 	movw	r0, #518	; 0x206
    1138:	a901      	add	r1, sp, #4
    113a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    113e:	f205 507c 	addw	r0, r5, #1404	; 0x57c
    1142:	f7fe ff91 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1146:	a801      	add	r0, sp, #4
    1148:	f7fe ffd2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x84] = {"STY","zpg","",3,2};
    114c:	4659      	mov	r1, fp
    114e:	a801      	add	r0, sp, #4
    1150:	f008 fd5e 	bl	9c10 <String::String(char const*)>
    1154:	496e      	ldr	r1, [pc, #440]	; (1310 <initialize_opcode_info()+0x1204>)
    1156:	a805      	add	r0, sp, #20
    1158:	f008 fd5a 	bl	9c10 <String::String(char const*)>
    115c:	4621      	mov	r1, r4
    115e:	a809      	add	r0, sp, #36	; 0x24
    1160:	f008 fd56 	bl	9c10 <String::String(char const*)>
    1164:	a901      	add	r1, sp, #4
    1166:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    116a:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    116e:	f7fe ff7b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1172:	a801      	add	r0, sp, #4
    1174:	f7fe ffbc 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x85] = {"STA","zpg","",3,2};
    1178:	4651      	mov	r1, sl
    117a:	a801      	add	r0, sp, #4
    117c:	f008 fd48 	bl	9c10 <String::String(char const*)>
    1180:	4963      	ldr	r1, [pc, #396]	; (1310 <initialize_opcode_info()+0x1204>)
    1182:	a805      	add	r0, sp, #20
    1184:	f008 fd44 	bl	9c10 <String::String(char const*)>
    1188:	4621      	mov	r1, r4
    118a:	a809      	add	r0, sp, #36	; 0x24
    118c:	f008 fd40 	bl	9c10 <String::String(char const*)>
    1190:	a901      	add	r1, sp, #4
    1192:	f205 604c 	addw	r0, r5, #1612	; 0x64c
    1196:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    119a:	f7fe ff65 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    119e:	a801      	add	r0, sp, #4
    11a0:	f7fe ffa6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x86] = {"STX","zpg","",3,2};
    11a4:	4649      	mov	r1, r9
    11a6:	a801      	add	r0, sp, #4
    11a8:	f008 fd32 	bl	9c10 <String::String(char const*)>
    11ac:	4958      	ldr	r1, [pc, #352]	; (1310 <initialize_opcode_info()+0x1204>)
    11ae:	a805      	add	r0, sp, #20
    11b0:	f008 fd2e 	bl	9c10 <String::String(char const*)>
    11b4:	4621      	mov	r1, r4
    11b6:	a809      	add	r0, sp, #36	; 0x24
    11b8:	f008 fd2a 	bl	9c10 <String::String(char const*)>
    11bc:	a901      	add	r1, sp, #4
    11be:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    11c2:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
    11c6:	f7fe ff4f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11ca:	a801      	add	r0, sp, #4
	opcode_info[0x88] = {"DEY","","SZ",2,1};
    11cc:	4f51      	ldr	r7, [pc, #324]	; (1314 <initialize_opcode_info()+0x1208>)
	opcode_info[0x86] = {"STX","zpg","",3,2};
    11ce:	f7fe ff8f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x88] = {"DEY","","SZ",2,1};
    11d2:	4951      	ldr	r1, [pc, #324]	; (1318 <initialize_opcode_info()+0x120c>)
    11d4:	a801      	add	r0, sp, #4
    11d6:	f008 fd1b 	bl	9c10 <String::String(char const*)>
    11da:	4621      	mov	r1, r4
    11dc:	a805      	add	r0, sp, #20
    11de:	f008 fd17 	bl	9c10 <String::String(char const*)>
    11e2:	4639      	mov	r1, r7
    11e4:	a809      	add	r0, sp, #36	; 0x24
    11e6:	f008 fd13 	bl	9c10 <String::String(char const*)>
    11ea:	f44f 7281 	mov.w	r2, #258	; 0x102
    11ee:	a901      	add	r1, sp, #4
    11f0:	f505 60dd 	add.w	r0, r5, #1768	; 0x6e8
    11f4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    11f8:	f7fe ff36 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    11fc:	a801      	add	r0, sp, #4
    11fe:	f7fe ff77 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x8a] = {"TXA","","SZ",2,1};
    1202:	4946      	ldr	r1, [pc, #280]	; (131c <initialize_opcode_info()+0x1210>)
    1204:	a801      	add	r0, sp, #4
    1206:	f008 fd03 	bl	9c10 <String::String(char const*)>
    120a:	4621      	mov	r1, r4
    120c:	a805      	add	r0, sp, #20
    120e:	f008 fcff 	bl	9c10 <String::String(char const*)>
    1212:	4639      	mov	r1, r7
    1214:	a809      	add	r0, sp, #36	; 0x24
    1216:	f008 fcfb 	bl	9c10 <String::String(char const*)>
    121a:	f44f 7281 	mov.w	r2, #258	; 0x102
    121e:	a901      	add	r1, sp, #4
    1220:	f505 60ea 	add.w	r0, r5, #1872	; 0x750
    1224:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1228:	f7fe ff1e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    122c:	a801      	add	r0, sp, #4
    122e:	f7fe ff5f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x8c] = {"STY","abs","",4,3};
    1232:	4659      	mov	r1, fp
    1234:	a801      	add	r0, sp, #4
    1236:	f008 fceb 	bl	9c10 <String::String(char const*)>
    123a:	4641      	mov	r1, r8
    123c:	a805      	add	r0, sp, #20
    123e:	f008 fce7 	bl	9c10 <String::String(char const*)>
    1242:	4621      	mov	r1, r4
    1244:	a809      	add	r0, sp, #36	; 0x24
    1246:	f008 fce3 	bl	9c10 <String::String(char const*)>
    124a:	f44f 7341 	mov.w	r3, #772	; 0x304
    124e:	a901      	add	r1, sp, #4
    1250:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    1254:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1258:	f7fe ff06 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    125c:	a801      	add	r0, sp, #4
    125e:	f7fe ff47 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x8d] = {"STA","abs","",4,3};
    1262:	4651      	mov	r1, sl
    1264:	a801      	add	r0, sp, #4
    1266:	f008 fcd3 	bl	9c10 <String::String(char const*)>
    126a:	4641      	mov	r1, r8
    126c:	a805      	add	r0, sp, #20
    126e:	f008 fccf 	bl	9c10 <String::String(char const*)>
    1272:	4621      	mov	r1, r4
    1274:	a809      	add	r0, sp, #36	; 0x24
    1276:	f008 fccb 	bl	9c10 <String::String(char const*)>
    127a:	f44f 7341 	mov.w	r3, #772	; 0x304
    127e:	a901      	add	r1, sp, #4
    1280:	f205 70ec 	addw	r0, r5, #2028	; 0x7ec
    1284:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1288:	f7fe feee 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    128c:	a801      	add	r0, sp, #4
    128e:	f7fe ff2f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x8e] = {"STX","abs","",4,3};
    1292:	4649      	mov	r1, r9
    1294:	a801      	add	r0, sp, #4
    1296:	f008 fcbb 	bl	9c10 <String::String(char const*)>
    129a:	4641      	mov	r1, r8
    129c:	a805      	add	r0, sp, #20
    129e:	f008 fcb7 	bl	9c10 <String::String(char const*)>
    12a2:	4621      	mov	r1, r4
    12a4:	a809      	add	r0, sp, #36	; 0x24
    12a6:	f008 fcb3 	bl	9c10 <String::String(char const*)>
    12aa:	f44f 7341 	mov.w	r3, #772	; 0x304
    12ae:	a901      	add	r1, sp, #4
    12b0:	f505 6002 	add.w	r0, r5, #2080	; 0x820
    12b4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    12b8:	f7fe fed6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12bc:	a801      	add	r0, sp, #4
    12be:	f7fe ff17 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x90] = {"BCC","rel","",2,2};
    12c2:	4917      	ldr	r1, [pc, #92]	; (1320 <initialize_opcode_info()+0x1214>)
    12c4:	a801      	add	r0, sp, #4
    12c6:	f008 fca3 	bl	9c10 <String::String(char const*)>
    12ca:	4916      	ldr	r1, [pc, #88]	; (1324 <initialize_opcode_info()+0x1218>)
    12cc:	a805      	add	r0, sp, #20
    12ce:	f008 fc9f 	bl	9c10 <String::String(char const*)>
    12d2:	4621      	mov	r1, r4
    12d4:	a809      	add	r0, sp, #36	; 0x24
    12d6:	f008 fc9b 	bl	9c10 <String::String(char const*)>
    12da:	f240 2102 	movw	r1, #514	; 0x202
    12de:	f605 0088 	addw	r0, r5, #2184	; 0x888
    12e2:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    12e6:	a901      	add	r1, sp, #4
    12e8:	f7fe febe 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    12ec:	a801      	add	r0, sp, #4
    12ee:	e01f      	b.n	1330 <initialize_opcode_info()+0x1224>
    12f0:	200008b8 	.word	0x200008b8
    12f4:	200008c0 	.word	0x200008c0
    12f8:	20000938 	.word	0x20000938
    12fc:	2000094c 	.word	0x2000094c
    1300:	20000924 	.word	0x20000924
    1304:	200008d0 	.word	0x200008d0
    1308:	200008d8 	.word	0x200008d8
    130c:	20000888 	.word	0x20000888
    1310:	20000894 	.word	0x20000894
    1314:	20000890 	.word	0x20000890
    1318:	2000095c 	.word	0x2000095c
    131c:	20000960 	.word	0x20000960
    1320:	20000964 	.word	0x20000964
    1324:	200008b4 	.word	0x200008b4
    1328:	20000954 	.word	0x20000954
    132c:	20000958 	.word	0x20000958
    1330:	f7fe fede 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x91] = {"STA","(ind),Y","",6,2};
    1334:	4651      	mov	r1, sl
    1336:	a801      	add	r0, sp, #4
    1338:	f008 fc6a 	bl	9c10 <String::String(char const*)>
    133c:	49d8      	ldr	r1, [pc, #864]	; (16a0 <initialize_opcode_info()+0x1594>)
    133e:	a805      	add	r0, sp, #20
    1340:	f008 fc66 	bl	9c10 <String::String(char const*)>
    1344:	4621      	mov	r1, r4
    1346:	a809      	add	r0, sp, #36	; 0x24
    1348:	f008 fc62 	bl	9c10 <String::String(char const*)>
    134c:	f240 2006 	movw	r0, #518	; 0x206
    1350:	a901      	add	r1, sp, #4
    1352:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1356:	f605 00bc 	addw	r0, r5, #2236	; 0x8bc
    135a:	f7fe fe85 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    135e:	a801      	add	r0, sp, #4
    1360:	f7fe fec6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x94] = {"STY","zpg,X","",4,2};
    1364:	4659      	mov	r1, fp
    1366:	a801      	add	r0, sp, #4
    1368:	f44f 7b01 	mov.w	fp, #516	; 0x204
    136c:	f008 fc50 	bl	9c10 <String::String(char const*)>
    1370:	49cc      	ldr	r1, [pc, #816]	; (16a4 <initialize_opcode_info()+0x1598>)
    1372:	a805      	add	r0, sp, #20
    1374:	f008 fc4c 	bl	9c10 <String::String(char const*)>
    1378:	4621      	mov	r1, r4
    137a:	a809      	add	r0, sp, #36	; 0x24
    137c:	f008 fc48 	bl	9c10 <String::String(char const*)>
    1380:	f10d 0c04 	add.w	ip, sp, #4
    1384:	f605 1058 	addw	r0, r5, #2392	; 0x958
    1388:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    138c:	4661      	mov	r1, ip
    138e:	f7fe fe6b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1392:	f10d 0c04 	add.w	ip, sp, #4
    1396:	4660      	mov	r0, ip
    1398:	f7fe feaa 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x95] = {"STA","zpg,X","",4,2};
    139c:	f10d 0c04 	add.w	ip, sp, #4
    13a0:	4651      	mov	r1, sl
    13a2:	4660      	mov	r0, ip
    13a4:	f008 fc34 	bl	9c10 <String::String(char const*)>
    13a8:	f10d 0c14 	add.w	ip, sp, #20
    13ac:	49bd      	ldr	r1, [pc, #756]	; (16a4 <initialize_opcode_info()+0x1598>)
    13ae:	4660      	mov	r0, ip
    13b0:	f008 fc2e 	bl	9c10 <String::String(char const*)>
    13b4:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
    13b8:	4621      	mov	r1, r4
    13ba:	4660      	mov	r0, ip
    13bc:	f008 fc28 	bl	9c10 <String::String(char const*)>
    13c0:	a901      	add	r1, sp, #4
    13c2:	f605 108c 	addw	r0, r5, #2444	; 0x98c
    13c6:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    13ca:	f7fe fe4d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    13ce:	a801      	add	r0, sp, #4
    13d0:	f7fe fe8e 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    13d4:	4649      	mov	r1, r9
    13d6:	a801      	add	r0, sp, #4
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    13d8:	f44f 7981 	mov.w	r9, #258	; 0x102
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    13dc:	f008 fc18 	bl	9c10 <String::String(char const*)>
    13e0:	4bb1      	ldr	r3, [pc, #708]	; (16a8 <initialize_opcode_info()+0x159c>)
    13e2:	a805      	add	r0, sp, #20
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
	opcode_info[0x9a] = {"TXS","","",2,1};
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    13e4:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 16cc <initialize_opcode_info()+0x15c0>
	opcode_info[0x96] = {"STX","zpg,Y","",4,2};
    13e8:	4619      	mov	r1, r3
    13ea:	f008 fc11 	bl	9c10 <String::String(char const*)>
    13ee:	4621      	mov	r1, r4
    13f0:	a809      	add	r0, sp, #36	; 0x24
    13f2:	f008 fc0d 	bl	9c10 <String::String(char const*)>
    13f6:	f44f 7c01 	mov.w	ip, #516	; 0x204
    13fa:	a901      	add	r1, sp, #4
    13fc:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    1400:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1404:	f7fe fe30 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1408:	a801      	add	r0, sp, #4
    140a:	f7fe fe71 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x98] = {"TYA","","SZ",2,1};
    140e:	49a7      	ldr	r1, [pc, #668]	; (16ac <initialize_opcode_info()+0x15a0>)
    1410:	a801      	add	r0, sp, #4
    1412:	f008 fbfd 	bl	9c10 <String::String(char const*)>
    1416:	4621      	mov	r1, r4
    1418:	a805      	add	r0, sp, #20
    141a:	f008 fbf9 	bl	9c10 <String::String(char const*)>
    141e:	4639      	mov	r1, r7
    1420:	a809      	add	r0, sp, #36	; 0x24
    1422:	f008 fbf5 	bl	9c10 <String::String(char const*)>
    1426:	aa01      	add	r2, sp, #4
    1428:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    142c:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1430:	4611      	mov	r1, r2
    1432:	f7fe fe19 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1436:	aa01      	add	r2, sp, #4
    1438:	4610      	mov	r0, r2
    143a:	f7fe fe59 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x99] = {"STA","abs,Y","",5,3};
    143e:	aa01      	add	r2, sp, #4
    1440:	4651      	mov	r1, sl
    1442:	4610      	mov	r0, r2
    1444:	f008 fbe4 	bl	9c10 <String::String(char const*)>
    1448:	aa05      	add	r2, sp, #20
    144a:	4999      	ldr	r1, [pc, #612]	; (16b0 <initialize_opcode_info()+0x15a4>)
    144c:	4610      	mov	r0, r2
    144e:	f008 fbdf 	bl	9c10 <String::String(char const*)>
    1452:	aa09      	add	r2, sp, #36	; 0x24
    1454:	4621      	mov	r1, r4
    1456:	4610      	mov	r0, r2
    1458:	f008 fbda 	bl	9c10 <String::String(char const*)>
    145c:	f240 3205 	movw	r2, #773	; 0x305
    1460:	f605 205c 	addw	r0, r5, #2652	; 0xa5c
    1464:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1468:	aa01      	add	r2, sp, #4
    146a:	4611      	mov	r1, r2
    146c:	f7fe fdfc 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1470:	aa01      	add	r2, sp, #4
    1472:	4610      	mov	r0, r2
    1474:	f7fe fe3c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x9a] = {"TXS","","",2,1};
    1478:	aa01      	add	r2, sp, #4
    147a:	498e      	ldr	r1, [pc, #568]	; (16b4 <initialize_opcode_info()+0x15a8>)
    147c:	4610      	mov	r0, r2
    147e:	f008 fbc7 	bl	9c10 <String::String(char const*)>
    1482:	aa05      	add	r2, sp, #20
    1484:	4621      	mov	r1, r4
    1486:	4610      	mov	r0, r2
    1488:	f008 fbc2 	bl	9c10 <String::String(char const*)>
    148c:	aa09      	add	r2, sp, #36	; 0x24
    148e:	4621      	mov	r1, r4
    1490:	4610      	mov	r0, r2
    1492:	f008 fbbd 	bl	9c10 <String::String(char const*)>
    1496:	a901      	add	r1, sp, #4
    1498:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    149c:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    14a0:	f7fe fde2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14a4:	a801      	add	r0, sp, #4
    14a6:	f7fe fe23 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    14aa:	4651      	mov	r1, sl
    14ac:	f10d 0a04 	add.w	sl, sp, #4
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    14b0:	f8df 921c 	ldr.w	r9, [pc, #540]	; 16d0 <initialize_opcode_info()+0x15c4>
	opcode_info[0x9d] = {"STA","abs,X","",5,3};
    14b4:	4650      	mov	r0, sl
    14b6:	f10d 0a14 	add.w	sl, sp, #20
    14ba:	f008 fba9 	bl	9c10 <String::String(char const*)>
    14be:	497e      	ldr	r1, [pc, #504]	; (16b8 <initialize_opcode_info()+0x15ac>)
    14c0:	4650      	mov	r0, sl
    14c2:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    14c6:	f008 fba3 	bl	9c10 <String::String(char const*)>
    14ca:	4621      	mov	r1, r4
    14cc:	4650      	mov	r0, sl
    14ce:	f240 3a05 	movw	sl, #773	; 0x305
    14d2:	f008 fb9d 	bl	9c10 <String::String(char const*)>
    14d6:	f605 302c 	addw	r0, r5, #2860	; 0xb2c
    14da:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
    14de:	f10d 0a04 	add.w	sl, sp, #4
    14e2:	4651      	mov	r1, sl
    14e4:	f7fe fdc0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    14e8:	4650      	mov	r0, sl
    14ea:	f7fe fe01 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa0] = {"LDY","#","SZ",2,2};
    14ee:	4650      	mov	r0, sl
    14f0:	f10d 0a14 	add.w	sl, sp, #20
    14f4:	4659      	mov	r1, fp
    14f6:	f008 fb8b 	bl	9c10 <String::String(char const*)>
    14fa:	4970      	ldr	r1, [pc, #448]	; (16bc <initialize_opcode_info()+0x15b0>)
    14fc:	4650      	mov	r0, sl
    14fe:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    1502:	f008 fb85 	bl	9c10 <String::String(char const*)>
    1506:	4639      	mov	r1, r7
    1508:	4650      	mov	r0, sl
    150a:	f10d 0a04 	add.w	sl, sp, #4
    150e:	f008 fb7f 	bl	9c10 <String::String(char const*)>
    1512:	f240 2102 	movw	r1, #514	; 0x202
    1516:	f605 30c8 	addw	r0, r5, #3016	; 0xbc8
    151a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    151e:	4651      	mov	r1, sl
    1520:	f7fe fda2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1524:	4650      	mov	r0, sl
    1526:	f7fe fde3 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    152a:	4650      	mov	r0, sl
    152c:	f10d 0a14 	add.w	sl, sp, #20
    1530:	4649      	mov	r1, r9
    1532:	f008 fb6d 	bl	9c10 <String::String(char const*)>
    1536:	4962      	ldr	r1, [pc, #392]	; (16c0 <initialize_opcode_info()+0x15b4>)
    1538:	4650      	mov	r0, sl
    153a:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
    153e:	f008 fb67 	bl	9c10 <String::String(char const*)>
    1542:	4639      	mov	r1, r7
    1544:	4650      	mov	r0, sl
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    1546:	f8df a18c 	ldr.w	sl, [pc, #396]	; 16d4 <initialize_opcode_info()+0x15c8>
	opcode_info[0xa1] = {"LDA","(ind,X)","SZ",6,2};
    154a:	f008 fb61 	bl	9c10 <String::String(char const*)>
    154e:	aa01      	add	r2, sp, #4
    1550:	f240 2006 	movw	r0, #518	; 0x206
    1554:	4611      	mov	r1, r2
    1556:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    155a:	f605 30fc 	addw	r0, r5, #3068	; 0xbfc
    155e:	f7fe fd83 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1562:	aa01      	add	r2, sp, #4
    1564:	4610      	mov	r0, r2
    1566:	f7fe fdc3 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa2] = {"LDX","#","SZ",2,2};
    156a:	aa01      	add	r2, sp, #4
    156c:	4651      	mov	r1, sl
    156e:	4610      	mov	r0, r2
    1570:	f008 fb4e 	bl	9c10 <String::String(char const*)>
    1574:	aa05      	add	r2, sp, #20
    1576:	4951      	ldr	r1, [pc, #324]	; (16bc <initialize_opcode_info()+0x15b0>)
    1578:	4610      	mov	r0, r2
    157a:	f008 fb49 	bl	9c10 <String::String(char const*)>
    157e:	aa09      	add	r2, sp, #36	; 0x24
    1580:	4639      	mov	r1, r7
    1582:	4610      	mov	r0, r2
    1584:	f008 fb44 	bl	9c10 <String::String(char const*)>
    1588:	aa01      	add	r2, sp, #4
    158a:	f240 2102 	movw	r1, #514	; 0x202
    158e:	f505 6043 	add.w	r0, r5, #3120	; 0xc30
    1592:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1596:	4611      	mov	r1, r2
    1598:	f7fe fd66 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    159c:	aa01      	add	r2, sp, #4
    159e:	4610      	mov	r0, r2
    15a0:	f7fe fda6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa4] = {"LDY","zpg","SZ",3,2};
    15a4:	aa01      	add	r2, sp, #4
    15a6:	4659      	mov	r1, fp
    15a8:	4610      	mov	r0, r2
    15aa:	f008 fb31 	bl	9c10 <String::String(char const*)>
    15ae:	aa05      	add	r2, sp, #20
    15b0:	4944      	ldr	r1, [pc, #272]	; (16c4 <initialize_opcode_info()+0x15b8>)
    15b2:	4610      	mov	r0, r2
    15b4:	f008 fb2c 	bl	9c10 <String::String(char const*)>
    15b8:	aa09      	add	r2, sp, #36	; 0x24
    15ba:	4639      	mov	r1, r7
    15bc:	4610      	mov	r0, r2
    15be:	f008 fb27 	bl	9c10 <String::String(char const*)>
    15c2:	aa01      	add	r2, sp, #4
    15c4:	f240 2e03 	movw	lr, #515	; 0x203
    15c8:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    15cc:	4611      	mov	r1, r2
    15ce:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    15d2:	f7fe fd49 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    15d6:	aa01      	add	r2, sp, #4
    15d8:	4610      	mov	r0, r2
    15da:	f7fe fd89 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa5] = {"LDA","zpg","SZ",3,2};
    15de:	aa01      	add	r2, sp, #4
    15e0:	4649      	mov	r1, r9
    15e2:	4610      	mov	r0, r2
    15e4:	f008 fb14 	bl	9c10 <String::String(char const*)>
    15e8:	aa05      	add	r2, sp, #20
    15ea:	4936      	ldr	r1, [pc, #216]	; (16c4 <initialize_opcode_info()+0x15b8>)
    15ec:	4610      	mov	r0, r2
    15ee:	f008 fb0f 	bl	9c10 <String::String(char const*)>
    15f2:	aa09      	add	r2, sp, #36	; 0x24
    15f4:	4639      	mov	r1, r7
    15f6:	4610      	mov	r0, r2
    15f8:	f008 fb0a 	bl	9c10 <String::String(char const*)>
    15fc:	aa01      	add	r2, sp, #4
    15fe:	f240 2e03 	movw	lr, #515	; 0x203
    1602:	f605 40cc 	addw	r0, r5, #3276	; 0xccc
    1606:	4611      	mov	r1, r2
    1608:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    160c:	f7fe fd2c 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1610:	aa01      	add	r2, sp, #4
    1612:	4610      	mov	r0, r2
    1614:	f7fe fd6c 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa6] = {"LDX","zpg","SZ",3,2};
    1618:	aa01      	add	r2, sp, #4
    161a:	4651      	mov	r1, sl
    161c:	4610      	mov	r0, r2
    161e:	f008 faf7 	bl	9c10 <String::String(char const*)>
    1622:	aa05      	add	r2, sp, #20
    1624:	4927      	ldr	r1, [pc, #156]	; (16c4 <initialize_opcode_info()+0x15b8>)
    1626:	4610      	mov	r0, r2
    1628:	f008 faf2 	bl	9c10 <String::String(char const*)>
    162c:	aa09      	add	r2, sp, #36	; 0x24
    162e:	4639      	mov	r1, r7
    1630:	4610      	mov	r0, r2
    1632:	f008 faed 	bl	9c10 <String::String(char const*)>
    1636:	aa01      	add	r2, sp, #4
    1638:	f240 2e03 	movw	lr, #515	; 0x203
    163c:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    1640:	4611      	mov	r1, r2
    1642:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1646:	f7fe fd0f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    164a:	aa01      	add	r2, sp, #4
    164c:	4610      	mov	r0, r2
    164e:	f7fe fd4f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa8] = {"TAY","","SZ",2,1};
    1652:	aa01      	add	r2, sp, #4
    1654:	491c      	ldr	r1, [pc, #112]	; (16c8 <initialize_opcode_info()+0x15bc>)
    1656:	4610      	mov	r0, r2
    1658:	f008 fada 	bl	9c10 <String::String(char const*)>
    165c:	aa05      	add	r2, sp, #20
    165e:	4621      	mov	r1, r4
    1660:	4610      	mov	r0, r2
    1662:	f008 fad5 	bl	9c10 <String::String(char const*)>
    1666:	aa09      	add	r2, sp, #36	; 0x24
    1668:	4639      	mov	r1, r7
    166a:	4610      	mov	r0, r2
    166c:	f008 fad0 	bl	9c10 <String::String(char const*)>
    1670:	f44f 7281 	mov.w	r2, #258	; 0x102
    1674:	a901      	add	r1, sp, #4
    1676:	f605 5068 	addw	r0, r5, #3432	; 0xd68
    167a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    167e:	f7fe fcf3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1682:	a801      	add	r0, sp, #4
    1684:	f7fe fd34 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xa9] = {"LDA","#","SZ",2,2};
    1688:	4649      	mov	r1, r9
    168a:	a801      	add	r0, sp, #4
    168c:	f008 fac0 	bl	9c10 <String::String(char const*)>
    1690:	490a      	ldr	r1, [pc, #40]	; (16bc <initialize_opcode_info()+0x15b0>)
    1692:	a805      	add	r0, sp, #20
    1694:	f008 fabc 	bl	9c10 <String::String(char const*)>
    1698:	4639      	mov	r1, r7
    169a:	a809      	add	r0, sp, #36	; 0x24
    169c:	e01c      	b.n	16d8 <initialize_opcode_info()+0x15cc>
    169e:	bf00      	nop
    16a0:	200008b8 	.word	0x200008b8
    16a4:	200008c0 	.word	0x200008c0
    16a8:	20000968 	.word	0x20000968
    16ac:	20000970 	.word	0x20000970
    16b0:	200008d0 	.word	0x200008d0
    16b4:	20000974 	.word	0x20000974
    16b8:	200008d8 	.word	0x200008d8
    16bc:	200008a4 	.word	0x200008a4
    16c0:	20000888 	.word	0x20000888
    16c4:	20000894 	.word	0x20000894
    16c8:	20000984 	.word	0x20000984
    16cc:	20000978 	.word	0x20000978
    16d0:	2000097c 	.word	0x2000097c
    16d4:	20000980 	.word	0x20000980
    16d8:	f008 fa9a 	bl	9c10 <String::String(char const*)>
    16dc:	f240 2102 	movw	r1, #514	; 0x202
    16e0:	f605 509c 	addw	r0, r5, #3484	; 0xd9c
    16e4:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    16e8:	a901      	add	r1, sp, #4
    16ea:	f7fe fcbd 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    16ee:	a801      	add	r0, sp, #4
    16f0:	f7fe fcfe 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xaa] = {"TAX","","SZ",2,1};
    16f4:	49d2      	ldr	r1, [pc, #840]	; (1a40 <initialize_opcode_info()+0x1934>)
    16f6:	a801      	add	r0, sp, #4
    16f8:	f008 fa8a 	bl	9c10 <String::String(char const*)>
    16fc:	4621      	mov	r1, r4
    16fe:	a805      	add	r0, sp, #20
    1700:	f008 fa86 	bl	9c10 <String::String(char const*)>
    1704:	4639      	mov	r1, r7
    1706:	a809      	add	r0, sp, #36	; 0x24
    1708:	f008 fa82 	bl	9c10 <String::String(char const*)>
    170c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1710:	a901      	add	r1, sp, #4
    1712:	f505 605d 	add.w	r0, r5, #3536	; 0xdd0
    1716:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    171a:	f7fe fca5 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    171e:	a801      	add	r0, sp, #4
    1720:	f7fe fce6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xac] = {"LDY","abs","SZ",4,3};
    1724:	4659      	mov	r1, fp
    1726:	a801      	add	r0, sp, #4
    1728:	f008 fa72 	bl	9c10 <String::String(char const*)>
    172c:	4641      	mov	r1, r8
    172e:	a805      	add	r0, sp, #20
    1730:	f008 fa6e 	bl	9c10 <String::String(char const*)>
    1734:	4639      	mov	r1, r7
    1736:	a809      	add	r0, sp, #36	; 0x24
    1738:	f008 fa6a 	bl	9c10 <String::String(char const*)>
    173c:	f44f 7341 	mov.w	r3, #772	; 0x304
    1740:	a901      	add	r1, sp, #4
    1742:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    1746:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    174a:	f7fe fc8d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    174e:	a801      	add	r0, sp, #4
    1750:	f7fe fcce 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xad] = {"LDA","abs","SZ",4,3};
    1754:	4649      	mov	r1, r9
    1756:	a801      	add	r0, sp, #4
    1758:	f008 fa5a 	bl	9c10 <String::String(char const*)>
    175c:	4641      	mov	r1, r8
    175e:	a805      	add	r0, sp, #20
    1760:	f008 fa56 	bl	9c10 <String::String(char const*)>
    1764:	4639      	mov	r1, r7
    1766:	a809      	add	r0, sp, #36	; 0x24
    1768:	f008 fa52 	bl	9c10 <String::String(char const*)>
    176c:	f44f 7341 	mov.w	r3, #772	; 0x304
    1770:	f605 606c 	addw	r0, r5, #3692	; 0xe6c
    1774:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1778:	ab01      	add	r3, sp, #4
    177a:	4619      	mov	r1, r3
    177c:	f7fe fc74 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1780:	ab01      	add	r3, sp, #4
    1782:	4618      	mov	r0, r3
    1784:	f7fe fcb4 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xae] = {"LDX","abs","SZ",4,3};
    1788:	ab01      	add	r3, sp, #4
    178a:	4651      	mov	r1, sl
    178c:	4618      	mov	r0, r3
    178e:	f008 fa3f 	bl	9c10 <String::String(char const*)>
    1792:	ab05      	add	r3, sp, #20
    1794:	4641      	mov	r1, r8
    1796:	f44f 7841 	mov.w	r8, #772	; 0x304
    179a:	4618      	mov	r0, r3
    179c:	f008 fa38 	bl	9c10 <String::String(char const*)>
    17a0:	ab09      	add	r3, sp, #36	; 0x24
    17a2:	4639      	mov	r1, r7
    17a4:	4618      	mov	r0, r3
    17a6:	f008 fa33 	bl	9c10 <String::String(char const*)>
    17aa:	ab01      	add	r3, sp, #4
    17ac:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
    17b0:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    17b4:	4619      	mov	r1, r3
    17b6:	f7fe fc57 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17ba:	ab01      	add	r3, sp, #4
    17bc:	4618      	mov	r0, r3
    17be:	f7fe fc97 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb0] = {"BCS","rel","",2,2};
    17c2:	ab01      	add	r3, sp, #4
    17c4:	499f      	ldr	r1, [pc, #636]	; (1a44 <initialize_opcode_info()+0x1938>)
    17c6:	4618      	mov	r0, r3
    17c8:	f008 fa22 	bl	9c10 <String::String(char const*)>
    17cc:	ab05      	add	r3, sp, #20
    17ce:	499e      	ldr	r1, [pc, #632]	; (1a48 <initialize_opcode_info()+0x193c>)
    17d0:	4618      	mov	r0, r3
    17d2:	f008 fa1d 	bl	9c10 <String::String(char const*)>
    17d6:	ab09      	add	r3, sp, #36	; 0x24
    17d8:	4621      	mov	r1, r4
    17da:	4618      	mov	r0, r3
    17dc:	f008 fa18 	bl	9c10 <String::String(char const*)>
    17e0:	ab01      	add	r3, sp, #4
    17e2:	f240 2102 	movw	r1, #514	; 0x202
    17e6:	f605 7008 	addw	r0, r5, #3848	; 0xf08
    17ea:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    17ee:	4619      	mov	r1, r3
    17f0:	f7fe fc3a 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    17f4:	ab01      	add	r3, sp, #4
    17f6:	4618      	mov	r0, r3
    17f8:	f7fe fc7a 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb1] = {"LDA","(ind),Y","SZ",5,2};
    17fc:	ab01      	add	r3, sp, #4
    17fe:	4649      	mov	r1, r9
    1800:	4618      	mov	r0, r3
    1802:	f008 fa05 	bl	9c10 <String::String(char const*)>
    1806:	ab05      	add	r3, sp, #20
    1808:	4990      	ldr	r1, [pc, #576]	; (1a4c <initialize_opcode_info()+0x1940>)
    180a:	4618      	mov	r0, r3
    180c:	f008 fa00 	bl	9c10 <String::String(char const*)>
    1810:	ab09      	add	r3, sp, #36	; 0x24
    1812:	4639      	mov	r1, r7
    1814:	4618      	mov	r0, r3
    1816:	f008 f9fb 	bl	9c10 <String::String(char const*)>
    181a:	ab01      	add	r3, sp, #4
    181c:	f240 2105 	movw	r1, #517	; 0x205
    1820:	f605 703c 	addw	r0, r5, #3900	; 0xf3c
    1824:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1828:	4619      	mov	r1, r3
    182a:	f7fe fc1d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    182e:	ab01      	add	r3, sp, #4
    1830:	4618      	mov	r0, r3
    1832:	f7fe fc5d 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb4] = {"LDY","zpg,X","SZ",4,2};
    1836:	ab01      	add	r3, sp, #4
    1838:	4659      	mov	r1, fp
    183a:	4618      	mov	r0, r3
    183c:	f008 f9e8 	bl	9c10 <String::String(char const*)>
    1840:	ab05      	add	r3, sp, #20
    1842:	4983      	ldr	r1, [pc, #524]	; (1a50 <initialize_opcode_info()+0x1944>)
    1844:	4618      	mov	r0, r3
    1846:	f008 f9e3 	bl	9c10 <String::String(char const*)>
    184a:	ab09      	add	r3, sp, #36	; 0x24
    184c:	4639      	mov	r1, r7
    184e:	4618      	mov	r0, r3
    1850:	f008 f9de 	bl	9c10 <String::String(char const*)>
    1854:	ab01      	add	r3, sp, #4
    1856:	f44f 7c01 	mov.w	ip, #516	; 0x204
    185a:	f605 70d8 	addw	r0, r5, #4056	; 0xfd8
    185e:	4619      	mov	r1, r3
    1860:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1864:	f7fe fc00 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1868:	ab01      	add	r3, sp, #4
    186a:	4618      	mov	r0, r3
    186c:	f7fe fc40 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb5] = {"LDA","zpg,X","SZ",4,2};
    1870:	ab01      	add	r3, sp, #4
    1872:	4649      	mov	r1, r9
    1874:	4618      	mov	r0, r3
    1876:	f008 f9cb 	bl	9c10 <String::String(char const*)>
    187a:	ab05      	add	r3, sp, #20
    187c:	4974      	ldr	r1, [pc, #464]	; (1a50 <initialize_opcode_info()+0x1944>)
    187e:	4618      	mov	r0, r3
    1880:	f008 f9c6 	bl	9c10 <String::String(char const*)>
    1884:	ab09      	add	r3, sp, #36	; 0x24
    1886:	4639      	mov	r1, r7
    1888:	4618      	mov	r0, r3
    188a:	f008 f9c1 	bl	9c10 <String::String(char const*)>
    188e:	f505 629c 	add.w	r2, r5, #1248	; 0x4e0
    1892:	ab01      	add	r3, sp, #4
    1894:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1898:	f602 302c 	addw	r0, r2, #2860	; 0xb2c
    189c:	4619      	mov	r1, r3
    189e:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    18a2:	f7fe fbe1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    18a6:	ab01      	add	r3, sp, #4
    18a8:	4618      	mov	r0, r3
    18aa:	f7fe fc21 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    18ae:	ab01      	add	r3, sp, #4
    18b0:	4651      	mov	r1, sl
    18b2:	4618      	mov	r0, r3
    18b4:	f008 f9ac 	bl	9c10 <String::String(char const*)>
    18b8:	4b66      	ldr	r3, [pc, #408]	; (1a54 <initialize_opcode_info()+0x1948>)
    18ba:	4619      	mov	r1, r3
    18bc:	ab05      	add	r3, sp, #20
    18be:	4618      	mov	r0, r3
    18c0:	f008 f9a6 	bl	9c10 <String::String(char const*)>
    18c4:	ab09      	add	r3, sp, #36	; 0x24
    18c6:	4639      	mov	r1, r7
    18c8:	4618      	mov	r0, r3
    18ca:	f008 f9a1 	bl	9c10 <String::String(char const*)>
    18ce:	ab01      	add	r3, sp, #4
    18d0:	f44f 7c01 	mov.w	ip, #516	; 0x204
    18d4:	f505 5082 	add.w	r0, r5, #4160	; 0x1040
    18d8:	4619      	mov	r1, r3
	opcode_info[0xb8] = {"CLV","","V",2,1};
    18da:	4d5f      	ldr	r5, [pc, #380]	; (1a58 <initialize_opcode_info()+0x194c>)
	opcode_info[0xb6] = {"LDX","zpg,Y","SZ",4,2};
    18dc:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    18e0:	f7fe fbc2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    18e4:	ab01      	add	r3, sp, #4
    18e6:	4618      	mov	r0, r3
    18e8:	f7fe fc02 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb8] = {"CLV","","V",2,1};
    18ec:	ab01      	add	r3, sp, #4
    18ee:	495b      	ldr	r1, [pc, #364]	; (1a5c <initialize_opcode_info()+0x1950>)
    18f0:	4618      	mov	r0, r3
    18f2:	f008 f98d 	bl	9c10 <String::String(char const*)>
    18f6:	ab05      	add	r3, sp, #20
    18f8:	4621      	mov	r1, r4
    18fa:	4618      	mov	r0, r3
    18fc:	f008 f988 	bl	9c10 <String::String(char const*)>
    1900:	ab09      	add	r3, sp, #36	; 0x24
    1902:	4957      	ldr	r1, [pc, #348]	; (1a60 <initialize_opcode_info()+0x1954>)
    1904:	4618      	mov	r0, r3
    1906:	f008 f983 	bl	9c10 <String::String(char const*)>
    190a:	ab01      	add	r3, sp, #4
    190c:	f44f 7281 	mov.w	r2, #258	; 0x102
    1910:	4628      	mov	r0, r5
    1912:	4619      	mov	r1, r3
    1914:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1918:	f7fe fba6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    191c:	ab01      	add	r3, sp, #4
    191e:	4618      	mov	r0, r3
    1920:	f7fe fbe6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xb9] = {"LDA","abs,Y","SZ",4,3};
    1924:	ab01      	add	r3, sp, #4
    1926:	4649      	mov	r1, r9
    1928:	4618      	mov	r0, r3
    192a:	f008 f971 	bl	9c10 <String::String(char const*)>
    192e:	ab05      	add	r3, sp, #20
    1930:	494c      	ldr	r1, [pc, #304]	; (1a64 <initialize_opcode_info()+0x1958>)
    1932:	4618      	mov	r0, r3
    1934:	f008 f96c 	bl	9c10 <String::String(char const*)>
    1938:	ab09      	add	r3, sp, #36	; 0x24
    193a:	4639      	mov	r1, r7
    193c:	4618      	mov	r0, r3
    193e:	f008 f967 	bl	9c10 <String::String(char const*)>
    1942:	ab01      	add	r3, sp, #4
    1944:	f105 0034 	add.w	r0, r5, #52	; 0x34
    1948:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    194c:	4619      	mov	r1, r3
    194e:	f7fe fb8b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1952:	ab01      	add	r3, sp, #4
    1954:	4618      	mov	r0, r3
    1956:	f7fe fbcb 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xba] = {"TSX","","",2,1};
    195a:	ab01      	add	r3, sp, #4
    195c:	4942      	ldr	r1, [pc, #264]	; (1a68 <initialize_opcode_info()+0x195c>)
    195e:	4618      	mov	r0, r3
    1960:	f008 f956 	bl	9c10 <String::String(char const*)>
    1964:	ab05      	add	r3, sp, #20
    1966:	4621      	mov	r1, r4
    1968:	4618      	mov	r0, r3
    196a:	f008 f951 	bl	9c10 <String::String(char const*)>
    196e:	ab09      	add	r3, sp, #36	; 0x24
    1970:	4621      	mov	r1, r4
    1972:	4618      	mov	r0, r3
    1974:	f008 f94c 	bl	9c10 <String::String(char const*)>
    1978:	ab01      	add	r3, sp, #4
    197a:	f44f 7281 	mov.w	r2, #258	; 0x102
    197e:	f105 0068 	add.w	r0, r5, #104	; 0x68
    1982:	4619      	mov	r1, r3
    1984:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1988:	f7fe fb6e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    198c:	ab01      	add	r3, sp, #4
    198e:	4618      	mov	r0, r3
    1990:	f7fe fbae 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    1994:	ab01      	add	r3, sp, #4
    1996:	4659      	mov	r1, fp
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1998:	f10d 0b04 	add.w	fp, sp, #4
	opcode_info[0xbc] = {"LDY","abs,X","SZ",4,3};
    199c:	4618      	mov	r0, r3
    199e:	f008 f937 	bl	9c10 <String::String(char const*)>
    19a2:	ab05      	add	r3, sp, #20
    19a4:	4931      	ldr	r1, [pc, #196]	; (1a6c <initialize_opcode_info()+0x1960>)
    19a6:	4618      	mov	r0, r3
    19a8:	f008 f932 	bl	9c10 <String::String(char const*)>
    19ac:	ab09      	add	r3, sp, #36	; 0x24
    19ae:	4639      	mov	r1, r7
    19b0:	4618      	mov	r0, r3
    19b2:	f008 f92d 	bl	9c10 <String::String(char const*)>
    19b6:	ab01      	add	r3, sp, #4
    19b8:	f105 00d0 	add.w	r0, r5, #208	; 0xd0
    19bc:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    19c0:	4619      	mov	r1, r3
    19c2:	f7fe fb51 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    19c6:	ab01      	add	r3, sp, #4
    19c8:	4618      	mov	r0, r3
    19ca:	f7fe fb91 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    19ce:	ab01      	add	r3, sp, #4
    19d0:	4649      	mov	r1, r9
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    19d2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1a70 <initialize_opcode_info()+0x1964>
	opcode_info[0xbd] = {"LDA","abs,X","SZ",4,3};
    19d6:	4618      	mov	r0, r3
    19d8:	f008 f91a 	bl	9c10 <String::String(char const*)>
    19dc:	ab05      	add	r3, sp, #20
    19de:	4923      	ldr	r1, [pc, #140]	; (1a6c <initialize_opcode_info()+0x1960>)
    19e0:	4618      	mov	r0, r3
    19e2:	f008 f915 	bl	9c10 <String::String(char const*)>
    19e6:	ab09      	add	r3, sp, #36	; 0x24
    19e8:	4639      	mov	r1, r7
    19ea:	4618      	mov	r0, r3
    19ec:	f008 f910 	bl	9c10 <String::String(char const*)>
    19f0:	ab01      	add	r3, sp, #4
    19f2:	f505 7082 	add.w	r0, r5, #260	; 0x104
    19f6:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    19fa:	4619      	mov	r1, r3
    19fc:	f7fe fb34 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a00:	ab01      	add	r3, sp, #4
    1a02:	4618      	mov	r0, r3
    1a04:	f7fe fb74 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1a08:	ab01      	add	r3, sp, #4
    1a0a:	4651      	mov	r1, sl
    1a0c:	f10d 0a04 	add.w	sl, sp, #4
    1a10:	4618      	mov	r0, r3
    1a12:	f008 f8fd 	bl	9c10 <String::String(char const*)>
    1a16:	ab05      	add	r3, sp, #20
    1a18:	4912      	ldr	r1, [pc, #72]	; (1a64 <initialize_opcode_info()+0x1958>)
    1a1a:	4618      	mov	r0, r3
    1a1c:	f008 f8f8 	bl	9c10 <String::String(char const*)>
    1a20:	ab09      	add	r3, sp, #36	; 0x24
    1a22:	4639      	mov	r1, r7
    1a24:	4618      	mov	r0, r3
    1a26:	f008 f8f3 	bl	9c10 <String::String(char const*)>
    1a2a:	4651      	mov	r1, sl
    1a2c:	f505 709c 	add.w	r0, r5, #312	; 0x138
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1a30:	f8df a040 	ldr.w	sl, [pc, #64]	; 1a74 <initialize_opcode_info()+0x1968>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1a34:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
    1a38:	f7fe fb16 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1a3c:	e01c      	b.n	1a78 <initialize_opcode_info()+0x196c>
    1a3e:	bf00      	nop
    1a40:	20000988 	.word	0x20000988
    1a44:	2000098c 	.word	0x2000098c
    1a48:	200008b4 	.word	0x200008b4
    1a4c:	200008b8 	.word	0x200008b8
    1a50:	200008c0 	.word	0x200008c0
    1a54:	20000968 	.word	0x20000968
    1a58:	20017978 	.word	0x20017978
    1a5c:	20000990 	.word	0x20000990
    1a60:	20000994 	.word	0x20000994
    1a64:	200008d0 	.word	0x200008d0
    1a68:	20000998 	.word	0x20000998
    1a6c:	200008d8 	.word	0x200008d8
    1a70:	200009a4 	.word	0x200009a4
    1a74:	2000099c 	.word	0x2000099c
    1a78:	4658      	mov	r0, fp
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1a7a:	f8df 8398 	ldr.w	r8, [pc, #920]	; 1e14 <initialize_opcode_info()+0x1d08>
	opcode_info[0xbe] = {"LDX","abs,Y","SZ",4,3};
    1a7e:	f7fe fb37 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc0] = {"CPY","#","SZC",2,2};
    1a82:	4658      	mov	r0, fp
    1a84:	f10d 0b14 	add.w	fp, sp, #20
    1a88:	4651      	mov	r1, sl
    1a8a:	f008 f8c1 	bl	9c10 <String::String(char const*)>
    1a8e:	49d6      	ldr	r1, [pc, #856]	; (1de8 <initialize_opcode_info()+0x1cdc>)
    1a90:	4658      	mov	r0, fp
    1a92:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    1a96:	f008 f8bb 	bl	9c10 <String::String(char const*)>
    1a9a:	4631      	mov	r1, r6
    1a9c:	4658      	mov	r0, fp
    1a9e:	f10d 0b04 	add.w	fp, sp, #4
    1aa2:	f008 f8b5 	bl	9c10 <String::String(char const*)>
    1aa6:	f240 2102 	movw	r1, #514	; 0x202
    1aaa:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
    1aae:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1ab2:	4659      	mov	r1, fp
    1ab4:	f7fe fad8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ab8:	4658      	mov	r0, fp
    1aba:	f7fe fb19 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc1] = {"CMP","(ind,X)","SZC",6,2};
    1abe:	4658      	mov	r0, fp
    1ac0:	f10d 0b14 	add.w	fp, sp, #20
    1ac4:	4641      	mov	r1, r8
    1ac6:	f008 f8a3 	bl	9c10 <String::String(char const*)>
    1aca:	49c8      	ldr	r1, [pc, #800]	; (1dec <initialize_opcode_info()+0x1ce0>)
    1acc:	4658      	mov	r0, fp
    1ace:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    1ad2:	f008 f89d 	bl	9c10 <String::String(char const*)>
    1ad6:	4631      	mov	r1, r6
    1ad8:	4658      	mov	r0, fp
    1ada:	f10d 0b04 	add.w	fp, sp, #4
    1ade:	f008 f897 	bl	9c10 <String::String(char const*)>
    1ae2:	f240 2006 	movw	r0, #518	; 0x206
    1ae6:	4659      	mov	r1, fp
    1ae8:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1aec:	f505 70ea 	add.w	r0, r5, #468	; 0x1d4
    1af0:	f7fe faba 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1af4:	4658      	mov	r0, fp
    1af6:	f7fe fafb 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc4] = {"CPY","zpg","SZC",3,2};
    1afa:	4658      	mov	r0, fp
    1afc:	f10d 0b14 	add.w	fp, sp, #20
    1b00:	4651      	mov	r1, sl
    1b02:	f008 f885 	bl	9c10 <String::String(char const*)>
    1b06:	49ba      	ldr	r1, [pc, #744]	; (1df0 <initialize_opcode_info()+0x1ce4>)
    1b08:	4658      	mov	r0, fp
    1b0a:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    1b0e:	f008 f87f 	bl	9c10 <String::String(char const*)>
    1b12:	4631      	mov	r1, r6
    1b14:	4658      	mov	r0, fp
    1b16:	f240 2b03 	movw	fp, #515	; 0x203
    1b1a:	f008 f879 	bl	9c10 <String::String(char const*)>
    1b1e:	ab01      	add	r3, sp, #4
    1b20:	f505 701c 	add.w	r0, r5, #624	; 0x270
    1b24:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1b28:	4619      	mov	r1, r3
    1b2a:	f7fe fa9d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b2e:	ab01      	add	r3, sp, #4
    1b30:	4618      	mov	r0, r3
    1b32:	f7fe fadd 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc5] = {"CMP","zpg","SZC",3,2};
    1b36:	ab01      	add	r3, sp, #4
    1b38:	4641      	mov	r1, r8
    1b3a:	4618      	mov	r0, r3
    1b3c:	f008 f868 	bl	9c10 <String::String(char const*)>
    1b40:	ab05      	add	r3, sp, #20
    1b42:	49ab      	ldr	r1, [pc, #684]	; (1df0 <initialize_opcode_info()+0x1ce4>)
    1b44:	4618      	mov	r0, r3
    1b46:	f008 f863 	bl	9c10 <String::String(char const*)>
    1b4a:	ab09      	add	r3, sp, #36	; 0x24
    1b4c:	4631      	mov	r1, r6
    1b4e:	4618      	mov	r0, r3
    1b50:	f008 f85e 	bl	9c10 <String::String(char const*)>
    1b54:	ab01      	add	r3, sp, #4
    1b56:	f505 7029 	add.w	r0, r5, #676	; 0x2a4
    1b5a:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1b5e:	4619      	mov	r1, r3
    1b60:	f7fe fa82 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b64:	ab01      	add	r3, sp, #4
    1b66:	4618      	mov	r0, r3
    1b68:	f7fe fac2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc6] = {"DEC","zpg","SZ",5,2};
    1b6c:	ab01      	add	r3, sp, #4
    1b6e:	4649      	mov	r1, r9
    1b70:	4618      	mov	r0, r3
    1b72:	f008 f84d 	bl	9c10 <String::String(char const*)>
    1b76:	ab05      	add	r3, sp, #20
    1b78:	499d      	ldr	r1, [pc, #628]	; (1df0 <initialize_opcode_info()+0x1ce4>)
    1b7a:	4618      	mov	r0, r3
    1b7c:	f008 f848 	bl	9c10 <String::String(char const*)>
    1b80:	ab09      	add	r3, sp, #36	; 0x24
    1b82:	4639      	mov	r1, r7
    1b84:	4618      	mov	r0, r3
    1b86:	f008 f843 	bl	9c10 <String::String(char const*)>
    1b8a:	ab01      	add	r3, sp, #4
    1b8c:	f240 2e05 	movw	lr, #517	; 0x205
    1b90:	f505 7036 	add.w	r0, r5, #728	; 0x2d8
    1b94:	4619      	mov	r1, r3
    1b96:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1b9a:	f7fe fa65 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1b9e:	ab01      	add	r3, sp, #4
    1ba0:	4618      	mov	r0, r3
    1ba2:	f7fe faa5 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc8] = {"INY","","",2,1};
    1ba6:	ab01      	add	r3, sp, #4
    1ba8:	4992      	ldr	r1, [pc, #584]	; (1df4 <initialize_opcode_info()+0x1ce8>)
    1baa:	4618      	mov	r0, r3
    1bac:	f008 f830 	bl	9c10 <String::String(char const*)>
    1bb0:	ab05      	add	r3, sp, #20
    1bb2:	4621      	mov	r1, r4
    1bb4:	4618      	mov	r0, r3
    1bb6:	f008 f82b 	bl	9c10 <String::String(char const*)>
    1bba:	ab09      	add	r3, sp, #36	; 0x24
    1bbc:	4621      	mov	r1, r4
    1bbe:	4618      	mov	r0, r3
    1bc0:	f008 f826 	bl	9c10 <String::String(char const*)>
    1bc4:	ab01      	add	r3, sp, #4
    1bc6:	f44f 7281 	mov.w	r2, #258	; 0x102
    1bca:	f505 7050 	add.w	r0, r5, #832	; 0x340
    1bce:	4619      	mov	r1, r3
    1bd0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1bd4:	f7fe fa48 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1bd8:	ab01      	add	r3, sp, #4
    1bda:	4618      	mov	r0, r3
    1bdc:	f7fe fa88 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xc9] = {"CMP","#","SZC",2,2};
    1be0:	ab01      	add	r3, sp, #4
    1be2:	4641      	mov	r1, r8
    1be4:	4618      	mov	r0, r3
    1be6:	f008 f813 	bl	9c10 <String::String(char const*)>
    1bea:	ab05      	add	r3, sp, #20
    1bec:	497e      	ldr	r1, [pc, #504]	; (1de8 <initialize_opcode_info()+0x1cdc>)
    1bee:	4618      	mov	r0, r3
    1bf0:	f008 f80e 	bl	9c10 <String::String(char const*)>
    1bf4:	ab09      	add	r3, sp, #36	; 0x24
    1bf6:	4631      	mov	r1, r6
    1bf8:	4618      	mov	r0, r3
    1bfa:	f008 f809 	bl	9c10 <String::String(char const*)>
    1bfe:	ab01      	add	r3, sp, #4
    1c00:	f240 2102 	movw	r1, #514	; 0x202
    1c04:	f505 705d 	add.w	r0, r5, #884	; 0x374
    1c08:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1c0c:	4619      	mov	r1, r3
    1c0e:	f7fe fa2b 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c12:	ab01      	add	r3, sp, #4
    1c14:	4618      	mov	r0, r3
    1c16:	f7fe fa6b 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xca] = {"DEX","","SZ",2,1};
    1c1a:	ab01      	add	r3, sp, #4
    1c1c:	4976      	ldr	r1, [pc, #472]	; (1df8 <initialize_opcode_info()+0x1cec>)
    1c1e:	4618      	mov	r0, r3
    1c20:	f007 fff6 	bl	9c10 <String::String(char const*)>
    1c24:	ab05      	add	r3, sp, #20
    1c26:	4621      	mov	r1, r4
    1c28:	4618      	mov	r0, r3
    1c2a:	f007 fff1 	bl	9c10 <String::String(char const*)>
    1c2e:	ab09      	add	r3, sp, #36	; 0x24
    1c30:	4639      	mov	r1, r7
    1c32:	4618      	mov	r0, r3
    1c34:	f007 ffec 	bl	9c10 <String::String(char const*)>
    1c38:	ab01      	add	r3, sp, #4
    1c3a:	f44f 7281 	mov.w	r2, #258	; 0x102
    1c3e:	f505 706a 	add.w	r0, r5, #936	; 0x3a8
    1c42:	4619      	mov	r1, r3
    1c44:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1c48:	f7fe fa0e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c4c:	ab01      	add	r3, sp, #4
    1c4e:	4618      	mov	r0, r3
    1c50:	f7fe fa4e 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xcc] = {"CPY","abs","SZC",4,3};
    1c54:	4651      	mov	r1, sl
    1c56:	f10d 0a04 	add.w	sl, sp, #4
    1c5a:	4650      	mov	r0, sl
    1c5c:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 1e18 <initialize_opcode_info()+0x1d0c>
    1c60:	f007 ffd6 	bl	9c10 <String::String(char const*)>
    1c64:	ab05      	add	r3, sp, #20
    1c66:	4651      	mov	r1, sl
    1c68:	4618      	mov	r0, r3
    1c6a:	f007 ffd1 	bl	9c10 <String::String(char const*)>
    1c6e:	ab09      	add	r3, sp, #36	; 0x24
    1c70:	4631      	mov	r1, r6
    1c72:	4618      	mov	r0, r3
    1c74:	f007 ffcc 	bl	9c10 <String::String(char const*)>
    1c78:	f44f 7341 	mov.w	r3, #772	; 0x304
    1c7c:	a901      	add	r1, sp, #4
    1c7e:	f505 6082 	add.w	r0, r5, #1040	; 0x410
    1c82:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1c86:	f7fe f9ef 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1c8a:	a801      	add	r0, sp, #4
    1c8c:	f7fe fa30 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xcd] = {"CMP","abs","SZC",4,3};
    1c90:	4641      	mov	r1, r8
    1c92:	a801      	add	r0, sp, #4
    1c94:	f007 ffbc 	bl	9c10 <String::String(char const*)>
    1c98:	4651      	mov	r1, sl
    1c9a:	a805      	add	r0, sp, #20
    1c9c:	f007 ffb8 	bl	9c10 <String::String(char const*)>
    1ca0:	4631      	mov	r1, r6
    1ca2:	a809      	add	r0, sp, #36	; 0x24
    1ca4:	f007 ffb4 	bl	9c10 <String::String(char const*)>
    1ca8:	f44f 7341 	mov.w	r3, #772	; 0x304
    1cac:	a901      	add	r1, sp, #4
    1cae:	f205 4044 	addw	r0, r5, #1092	; 0x444
    1cb2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1cb6:	f7fe f9d7 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cba:	a801      	add	r0, sp, #4
    1cbc:	f7fe fa18 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xce] = {"DEC","abs","SZ",6,3};
    1cc0:	4649      	mov	r1, r9
    1cc2:	a801      	add	r0, sp, #4
    1cc4:	f007 ffa4 	bl	9c10 <String::String(char const*)>
    1cc8:	4651      	mov	r1, sl
    1cca:	a805      	add	r0, sp, #20
    1ccc:	f007 ffa0 	bl	9c10 <String::String(char const*)>
    1cd0:	4639      	mov	r1, r7
    1cd2:	a809      	add	r0, sp, #36	; 0x24
    1cd4:	f007 ff9c 	bl	9c10 <String::String(char const*)>
    1cd8:	f240 3e06 	movw	lr, #774	; 0x306
    1cdc:	a901      	add	r1, sp, #4
    1cde:	f505 608f 	add.w	r0, r5, #1144	; 0x478
    1ce2:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1ce6:	f7fe f9bf 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1cea:	a801      	add	r0, sp, #4
    1cec:	f7fe fa00 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd0] = {"BNE","rel","",2,2};
    1cf0:	4942      	ldr	r1, [pc, #264]	; (1dfc <initialize_opcode_info()+0x1cf0>)
    1cf2:	a801      	add	r0, sp, #4
    1cf4:	f007 ff8c 	bl	9c10 <String::String(char const*)>
    1cf8:	4a41      	ldr	r2, [pc, #260]	; (1e00 <initialize_opcode_info()+0x1cf4>)
    1cfa:	a805      	add	r0, sp, #20
    1cfc:	4611      	mov	r1, r2
    1cfe:	f007 ff87 	bl	9c10 <String::String(char const*)>
    1d02:	4621      	mov	r1, r4
    1d04:	a809      	add	r0, sp, #36	; 0x24
    1d06:	f007 ff83 	bl	9c10 <String::String(char const*)>
    1d0a:	f240 2102 	movw	r1, #514	; 0x202
    1d0e:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
    1d12:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1d16:	a901      	add	r1, sp, #4
    1d18:	f7fe f9a6 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d1c:	a801      	add	r0, sp, #4
    1d1e:	f7fe f9e7 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd1] = {"CMP","(ind),Y","SZC",5,2};
    1d22:	4641      	mov	r1, r8
    1d24:	a801      	add	r0, sp, #4
    1d26:	f007 ff73 	bl	9c10 <String::String(char const*)>
    1d2a:	4b36      	ldr	r3, [pc, #216]	; (1e04 <initialize_opcode_info()+0x1cf8>)
    1d2c:	a805      	add	r0, sp, #20
    1d2e:	4619      	mov	r1, r3
    1d30:	f007 ff6e 	bl	9c10 <String::String(char const*)>
    1d34:	4631      	mov	r1, r6
    1d36:	a809      	add	r0, sp, #36	; 0x24
    1d38:	f007 ff6a 	bl	9c10 <String::String(char const*)>
    1d3c:	f240 2e05 	movw	lr, #517	; 0x205
    1d40:	a901      	add	r1, sp, #4
    1d42:	f205 5014 	addw	r0, r5, #1300	; 0x514
    1d46:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1d4a:	f7fe f98d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d4e:	a801      	add	r0, sp, #4
    1d50:	f7fe f9ce 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd5] = {"CMP","zpg,X","SZC",4,2};
    1d54:	4641      	mov	r1, r8
    1d56:	a801      	add	r0, sp, #4
    1d58:	f007 ff5a 	bl	9c10 <String::String(char const*)>
    1d5c:	492a      	ldr	r1, [pc, #168]	; (1e08 <initialize_opcode_info()+0x1cfc>)
    1d5e:	a805      	add	r0, sp, #20
    1d60:	f007 ff56 	bl	9c10 <String::String(char const*)>
    1d64:	4631      	mov	r1, r6
    1d66:	a809      	add	r0, sp, #36	; 0x24
    1d68:	f007 ff52 	bl	9c10 <String::String(char const*)>
    1d6c:	f44f 7c01 	mov.w	ip, #516	; 0x204
    1d70:	a901      	add	r1, sp, #4
    1d72:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
    1d76:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    1d7a:	f7fe f975 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1d7e:	a801      	add	r0, sp, #4
    1d80:	f7fe f9b6 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd6] = {"DEC","zpg,X","SZ",6,2};
    1d84:	4649      	mov	r1, r9
    1d86:	a801      	add	r0, sp, #4
    1d88:	f007 ff42 	bl	9c10 <String::String(char const*)>
    1d8c:	491e      	ldr	r1, [pc, #120]	; (1e08 <initialize_opcode_info()+0x1cfc>)
    1d8e:	a805      	add	r0, sp, #20
    1d90:	f007 ff3e 	bl	9c10 <String::String(char const*)>
    1d94:	4639      	mov	r1, r7
    1d96:	a809      	add	r0, sp, #36	; 0x24
    1d98:	f007 ff3a 	bl	9c10 <String::String(char const*)>
    1d9c:	f240 2006 	movw	r0, #518	; 0x206
    1da0:	a901      	add	r1, sp, #4
    1da2:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1da6:	f505 60c3 	add.w	r0, r5, #1560	; 0x618
    1daa:	f7fe f95d 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dae:	a801      	add	r0, sp, #4
    1db0:	f7fe f99e 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xd8] = {"CLD","","D",2,1};
    1db4:	4915      	ldr	r1, [pc, #84]	; (1e0c <initialize_opcode_info()+0x1d00>)
    1db6:	a801      	add	r0, sp, #4
    1db8:	f007 ff2a 	bl	9c10 <String::String(char const*)>
    1dbc:	4621      	mov	r1, r4
    1dbe:	a805      	add	r0, sp, #20
    1dc0:	f007 ff26 	bl	9c10 <String::String(char const*)>
    1dc4:	4912      	ldr	r1, [pc, #72]	; (1e10 <initialize_opcode_info()+0x1d04>)
    1dc6:	a809      	add	r0, sp, #36	; 0x24
    1dc8:	f007 ff22 	bl	9c10 <String::String(char const*)>
    1dcc:	f44f 7281 	mov.w	r2, #258	; 0x102
    1dd0:	a901      	add	r1, sp, #4
    1dd2:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
    1dd6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    1dda:	f7fe f945 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1dde:	a801      	add	r0, sp, #4
    1de0:	f7fe f986 	bl	f0 <OpDecoder::~OpDecoder()>
    1de4:	e01a      	b.n	1e1c <initialize_opcode_info()+0x1d10>
    1de6:	bf00      	nop
    1de8:	200008a4 	.word	0x200008a4
    1dec:	20000888 	.word	0x20000888
    1df0:	20000894 	.word	0x20000894
    1df4:	200009a8 	.word	0x200009a8
    1df8:	200009ac 	.word	0x200009ac
    1dfc:	200009b0 	.word	0x200009b0
    1e00:	200008b4 	.word	0x200008b4
    1e04:	200008b8 	.word	0x200008b8
    1e08:	200008c0 	.word	0x200008c0
    1e0c:	200009b4 	.word	0x200009b4
    1e10:	200009b8 	.word	0x200009b8
    1e14:	200009a0 	.word	0x200009a0
    1e18:	200008ac 	.word	0x200008ac
	opcode_info[0xd9] = {"CMP","abs,Y","SZC",4,3};
    1e1c:	4641      	mov	r1, r8
    1e1e:	a801      	add	r0, sp, #4
    1e20:	f007 fef6 	bl	9c10 <String::String(char const*)>
    1e24:	49d3      	ldr	r1, [pc, #844]	; (2174 <initialize_opcode_info()+0x2068>)
    1e26:	a805      	add	r0, sp, #20
    1e28:	f007 fef2 	bl	9c10 <String::String(char const*)>
    1e2c:	4631      	mov	r1, r6
    1e2e:	a809      	add	r0, sp, #36	; 0x24
    1e30:	f007 feee 	bl	9c10 <String::String(char const*)>
    1e34:	f44f 7341 	mov.w	r3, #772	; 0x304
    1e38:	a901      	add	r1, sp, #4
    1e3a:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
    1e3e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1e42:	f7fe f911 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e46:	a801      	add	r0, sp, #4
    1e48:	f7fe f952 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xdd] = {"CMP","abs,X","SZC",4,3};
    1e4c:	4641      	mov	r1, r8
    1e4e:	f10d 0804 	add.w	r8, sp, #4
    1e52:	4640      	mov	r0, r8
    1e54:	f10d 0814 	add.w	r8, sp, #20
    1e58:	f007 feda 	bl	9c10 <String::String(char const*)>
    1e5c:	49c6      	ldr	r1, [pc, #792]	; (2178 <initialize_opcode_info()+0x206c>)
    1e5e:	4640      	mov	r0, r8
    1e60:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1e64:	f007 fed4 	bl	9c10 <String::String(char const*)>
    1e68:	4631      	mov	r1, r6
    1e6a:	4640      	mov	r0, r8
    1e6c:	f10d 0804 	add.w	r8, sp, #4
    1e70:	f007 fece 	bl	9c10 <String::String(char const*)>
    1e74:	f44f 7341 	mov.w	r3, #772	; 0x304
    1e78:	4641      	mov	r1, r8
    1e7a:	f205 7084 	addw	r0, r5, #1924	; 0x784
    1e7e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    1e82:	f7fe f8f1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1e86:	4640      	mov	r0, r8
    1e88:	f7fe f932 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xde] = {"DEC","abs,X","SZ",7,3};
    1e8c:	4640      	mov	r0, r8
    1e8e:	f10d 0814 	add.w	r8, sp, #20
    1e92:	4649      	mov	r1, r9
    1e94:	f007 febc 	bl	9c10 <String::String(char const*)>
    1e98:	49b7      	ldr	r1, [pc, #732]	; (2178 <initialize_opcode_info()+0x206c>)
    1e9a:	4640      	mov	r0, r8
    1e9c:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1ea0:	f007 feb6 	bl	9c10 <String::String(char const*)>
    1ea4:	f240 3907 	movw	r9, #775	; 0x307
    1ea8:	4640      	mov	r0, r8
    1eaa:	f10d 0804 	add.w	r8, sp, #4
    1eae:	4639      	mov	r1, r7
    1eb0:	f007 feae 	bl	9c10 <String::String(char const*)>
    1eb4:	4641      	mov	r1, r8
    1eb6:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
    1eba:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    1ebe:	f7fe f8d3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1ec2:	4640      	mov	r0, r8
    1ec4:	f7fe f914 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    1ec8:	4640      	mov	r0, r8
    1eca:	f10d 0814 	add.w	r8, sp, #20
    1ece:	49ab      	ldr	r1, [pc, #684]	; (217c <initialize_opcode_info()+0x2070>)
    1ed0:	f007 fe9e 	bl	9c10 <String::String(char const*)>
    1ed4:	49aa      	ldr	r1, [pc, #680]	; (2180 <initialize_opcode_info()+0x2074>)
    1ed6:	4640      	mov	r0, r8
    1ed8:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    1edc:	f007 fe98 	bl	9c10 <String::String(char const*)>
    1ee0:	4631      	mov	r1, r6
    1ee2:	4640      	mov	r0, r8
    1ee4:	f10d 0804 	add.w	r8, sp, #4
    1ee8:	f007 fe92 	bl	9c10 <String::String(char const*)>
    1eec:	f240 2102 	movw	r1, #514	; 0x202
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    1ef0:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 21a4 <initialize_opcode_info()+0x2098>
	opcode_info[0xe0] = {"CPX","#","SZC",2,2};
    1ef4:	f505 6002 	add.w	r0, r5, #2080	; 0x820
    1ef8:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    1efc:	4641      	mov	r1, r8
    1efe:	f7fe f8b3 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f02:	4640      	mov	r0, r8
    1f04:	f7fe f8f4 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe1] = {"SBC","(ind,X)","SVZC",6,2};
    1f08:	f8df 829c 	ldr.w	r8, [pc, #668]	; 21a8 <initialize_opcode_info()+0x209c>
    1f0c:	4649      	mov	r1, r9
    1f0e:	a801      	add	r0, sp, #4
    1f10:	f007 fe7e 	bl	9c10 <String::String(char const*)>
    1f14:	499b      	ldr	r1, [pc, #620]	; (2184 <initialize_opcode_info()+0x2078>)
    1f16:	a805      	add	r0, sp, #20
    1f18:	f007 fe7a 	bl	9c10 <String::String(char const*)>
    1f1c:	4641      	mov	r1, r8
    1f1e:	a809      	add	r0, sp, #36	; 0x24
    1f20:	f007 fe76 	bl	9c10 <String::String(char const*)>
    1f24:	f240 2006 	movw	r0, #518	; 0x206
    1f28:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    1f2c:	a801      	add	r0, sp, #4
    1f2e:	4601      	mov	r1, r0
    1f30:	f605 0054 	addw	r0, r5, #2132	; 0x854
    1f34:	f7fe f898 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f38:	a801      	add	r0, sp, #4
    1f3a:	f7fe f8d9 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe4] = {"CPX","zpg","SZC",3,2};
    1f3e:	498f      	ldr	r1, [pc, #572]	; (217c <initialize_opcode_info()+0x2070>)
    1f40:	a801      	add	r0, sp, #4
    1f42:	f007 fe65 	bl	9c10 <String::String(char const*)>
    1f46:	4990      	ldr	r1, [pc, #576]	; (2188 <initialize_opcode_info()+0x207c>)
    1f48:	a805      	add	r0, sp, #20
    1f4a:	f007 fe61 	bl	9c10 <String::String(char const*)>
    1f4e:	4631      	mov	r1, r6
    1f50:	a809      	add	r0, sp, #36	; 0x24
    1f52:	f007 fe5d 	bl	9c10 <String::String(char const*)>
    1f56:	a801      	add	r0, sp, #4
    1f58:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1f5c:	4601      	mov	r1, r0
    1f5e:	f505 600f 	add.w	r0, r5, #2288	; 0x8f0
    1f62:	f7fe f881 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f66:	a801      	add	r0, sp, #4
    1f68:	f7fe f8c2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    1f6c:	4649      	mov	r1, r9
    1f6e:	a801      	add	r0, sp, #4
    1f70:	f007 fe4e 	bl	9c10 <String::String(char const*)>
    1f74:	4984      	ldr	r1, [pc, #528]	; (2188 <initialize_opcode_info()+0x207c>)
    1f76:	a805      	add	r0, sp, #20
    1f78:	f007 fe4a 	bl	9c10 <String::String(char const*)>
    1f7c:	4641      	mov	r1, r8
    1f7e:	a809      	add	r0, sp, #36	; 0x24
    1f80:	f007 fe46 	bl	9c10 <String::String(char const*)>
    1f84:	a801      	add	r0, sp, #4
    1f86:	f8ad b034 	strh.w	fp, [sp, #52]	; 0x34
    1f8a:	4601      	mov	r1, r0
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    1f8c:	f8df b21c 	ldr.w	fp, [pc, #540]	; 21ac <initialize_opcode_info()+0x20a0>
	opcode_info[0xe5] = {"SBC","zpg","SVZC",3,2};
    1f90:	f605 1024 	addw	r0, r5, #2340	; 0x924
    1f94:	f7fe f868 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    1f98:	a801      	add	r0, sp, #4
    1f9a:	f7fe f8a9 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe6] = {"INC","zpg","SZ",5,2};
    1f9e:	4659      	mov	r1, fp
    1fa0:	a801      	add	r0, sp, #4
    1fa2:	f007 fe35 	bl	9c10 <String::String(char const*)>
    1fa6:	4978      	ldr	r1, [pc, #480]	; (2188 <initialize_opcode_info()+0x207c>)
    1fa8:	a805      	add	r0, sp, #20
    1faa:	f007 fe31 	bl	9c10 <String::String(char const*)>
    1fae:	4639      	mov	r1, r7
    1fb0:	a809      	add	r0, sp, #36	; 0x24
    1fb2:	f007 fe2d 	bl	9c10 <String::String(char const*)>
    1fb6:	a801      	add	r0, sp, #4
    1fb8:	f240 2e05 	movw	lr, #517	; 0x205
    1fbc:	4601      	mov	r1, r0
    1fbe:	f605 1058 	addw	r0, r5, #2392	; 0x958
    1fc2:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    1fc6:	f7fe f84f 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
struct OpDecoder {
    1fca:	a809      	add	r0, sp, #36	; 0x24
    1fcc:	f007 fde4 	bl	9b98 <String::~String()>
    1fd0:	a805      	add	r0, sp, #20
    1fd2:	f007 fde1 	bl	9b98 <String::~String()>
    1fd6:	a801      	add	r0, sp, #4
    1fd8:	f007 fdde 	bl	9b98 <String::~String()>
	opcode_info[0xe8] = {"INX","","SZ",2,1};
    1fdc:	496b      	ldr	r1, [pc, #428]	; (218c <initialize_opcode_info()+0x2080>)
    1fde:	a801      	add	r0, sp, #4
    1fe0:	f007 fe16 	bl	9c10 <String::String(char const*)>
    1fe4:	4621      	mov	r1, r4
    1fe6:	a805      	add	r0, sp, #20
    1fe8:	f007 fe12 	bl	9c10 <String::String(char const*)>
    1fec:	4639      	mov	r1, r7
    1fee:	a809      	add	r0, sp, #36	; 0x24
    1ff0:	f007 fe0e 	bl	9c10 <String::String(char const*)>
    1ff4:	a801      	add	r0, sp, #4
    1ff6:	f44f 7281 	mov.w	r2, #258	; 0x102
    1ffa:	4601      	mov	r1, r0
    1ffc:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
    2000:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    2004:	f7fe f830 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2008:	a801      	add	r0, sp, #4
    200a:	f7fe f871 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xe9] = {"SBC","#","SVZC",2,2};
    200e:	4649      	mov	r1, r9
    2010:	a801      	add	r0, sp, #4
    2012:	f007 fdfd 	bl	9c10 <String::String(char const*)>
    2016:	495a      	ldr	r1, [pc, #360]	; (2180 <initialize_opcode_info()+0x2074>)
    2018:	a805      	add	r0, sp, #20
    201a:	f007 fdf9 	bl	9c10 <String::String(char const*)>
    201e:	4641      	mov	r1, r8
    2020:	a809      	add	r0, sp, #36	; 0x24
    2022:	f007 fdf5 	bl	9c10 <String::String(char const*)>
    2026:	f240 2102 	movw	r1, #514	; 0x202
    202a:	f605 10f4 	addw	r0, r5, #2548	; 0x9f4
    202e:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    2032:	a901      	add	r1, sp, #4
    2034:	f7fe f818 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2038:	a801      	add	r0, sp, #4
    203a:	f7fe f859 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xea] = {"NOP","","",2,1};
    203e:	4954      	ldr	r1, [pc, #336]	; (2190 <initialize_opcode_info()+0x2084>)
    2040:	a801      	add	r0, sp, #4
    2042:	f007 fde5 	bl	9c10 <String::String(char const*)>
    2046:	4621      	mov	r1, r4
    2048:	a805      	add	r0, sp, #20
    204a:	f007 fde1 	bl	9c10 <String::String(char const*)>
    204e:	4621      	mov	r1, r4
    2050:	a809      	add	r0, sp, #36	; 0x24
    2052:	f007 fddd 	bl	9c10 <String::String(char const*)>
    2056:	f44f 7281 	mov.w	r2, #258	; 0x102
    205a:	a901      	add	r1, sp, #4
    205c:	f605 2028 	addw	r0, r5, #2600	; 0xa28
    2060:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    2064:	f7fe f800 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2068:	a801      	add	r0, sp, #4
    206a:	f7fe f841 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xec] = {"CPX","abs","SZC",4,3};
    206e:	4943      	ldr	r1, [pc, #268]	; (217c <initialize_opcode_info()+0x2070>)
    2070:	a801      	add	r0, sp, #4
    2072:	f007 fdcd 	bl	9c10 <String::String(char const*)>
    2076:	4651      	mov	r1, sl
    2078:	a805      	add	r0, sp, #20
    207a:	f007 fdc9 	bl	9c10 <String::String(char const*)>
    207e:	4631      	mov	r1, r6
    2080:	a809      	add	r0, sp, #36	; 0x24
    2082:	f44f 7641 	mov.w	r6, #772	; 0x304
    2086:	f007 fdc3 	bl	9c10 <String::String(char const*)>
    208a:	a901      	add	r1, sp, #4
    208c:	f505 6029 	add.w	r0, r5, #2704	; 0xa90
    2090:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    2094:	f7fd ffe8 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2098:	a801      	add	r0, sp, #4
    209a:	f7fe f829 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xed] = {"SBC","abs","SVZC",4,3};
    209e:	4649      	mov	r1, r9
    20a0:	a801      	add	r0, sp, #4
    20a2:	f007 fdb5 	bl	9c10 <String::String(char const*)>
    20a6:	4651      	mov	r1, sl
    20a8:	a805      	add	r0, sp, #20
    20aa:	f007 fdb1 	bl	9c10 <String::String(char const*)>
    20ae:	4641      	mov	r1, r8
    20b0:	a809      	add	r0, sp, #36	; 0x24
    20b2:	f007 fdad 	bl	9c10 <String::String(char const*)>
    20b6:	a901      	add	r1, sp, #4
    20b8:	f605 20c4 	addw	r0, r5, #2756	; 0xac4
    20bc:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
    20c0:	f7fd ffd2 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20c4:	a801      	add	r0, sp, #4
    20c6:	f7fe f813 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xee] = {"INC","abs","SZ",6,3};
    20ca:	4659      	mov	r1, fp
    20cc:	a801      	add	r0, sp, #4
    20ce:	f007 fd9f 	bl	9c10 <String::String(char const*)>
    20d2:	4651      	mov	r1, sl
    20d4:	a805      	add	r0, sp, #20
    20d6:	f007 fd9b 	bl	9c10 <String::String(char const*)>
    20da:	4639      	mov	r1, r7
    20dc:	a809      	add	r0, sp, #36	; 0x24
    20de:	f007 fd97 	bl	9c10 <String::String(char const*)>
    20e2:	f240 3306 	movw	r3, #774	; 0x306
    20e6:	a901      	add	r1, sp, #4
    20e8:	f605 20f8 	addw	r0, r5, #2808	; 0xaf8
    20ec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    20f0:	f7fd ffba 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    20f4:	a801      	add	r0, sp, #4
    20f6:	f7fd fffb 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf0] = {"BEQ","rel","",2,2};
    20fa:	4926      	ldr	r1, [pc, #152]	; (2194 <initialize_opcode_info()+0x2088>)
    20fc:	a801      	add	r0, sp, #4
    20fe:	f007 fd87 	bl	9c10 <String::String(char const*)>
    2102:	4a25      	ldr	r2, [pc, #148]	; (2198 <initialize_opcode_info()+0x208c>)
    2104:	a805      	add	r0, sp, #20
    2106:	4611      	mov	r1, r2
    2108:	f007 fd82 	bl	9c10 <String::String(char const*)>
    210c:	4621      	mov	r1, r4
    210e:	a809      	add	r0, sp, #36	; 0x24
    2110:	f007 fd7e 	bl	9c10 <String::String(char const*)>
    2114:	f240 2202 	movw	r2, #514	; 0x202
    2118:	a901      	add	r1, sp, #4
    211a:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
    211e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
    2122:	f7fd ffa1 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2126:	a801      	add	r0, sp, #4
    2128:	f7fd ffe2 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf1] = {"SBC","(ind),Y","SVZC",5,2};
    212c:	4649      	mov	r1, r9
    212e:	a801      	add	r0, sp, #4
    2130:	f007 fd6e 	bl	9c10 <String::String(char const*)>
    2134:	4b19      	ldr	r3, [pc, #100]	; (219c <initialize_opcode_info()+0x2090>)
    2136:	a805      	add	r0, sp, #20
    2138:	4619      	mov	r1, r3
    213a:	f007 fd69 	bl	9c10 <String::String(char const*)>
    213e:	4641      	mov	r1, r8
    2140:	a809      	add	r0, sp, #36	; 0x24
    2142:	f007 fd65 	bl	9c10 <String::String(char const*)>
    2146:	f240 2e05 	movw	lr, #517	; 0x205
    214a:	a901      	add	r1, sp, #4
    214c:	f605 3094 	addw	r0, r5, #2964	; 0xb94
    2150:	f8ad e034 	strh.w	lr, [sp, #52]	; 0x34
    2154:	f7fd ff88 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2158:	a801      	add	r0, sp, #4
    215a:	f7fd ffc9 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf5] = {"SBC","zpg,X","SVZC",4,2};
    215e:	4649      	mov	r1, r9
    2160:	a801      	add	r0, sp, #4
    2162:	f007 fd55 	bl	9c10 <String::String(char const*)>
    2166:	490e      	ldr	r1, [pc, #56]	; (21a0 <initialize_opcode_info()+0x2094>)
    2168:	a805      	add	r0, sp, #20
    216a:	f007 fd51 	bl	9c10 <String::String(char const*)>
    216e:	4641      	mov	r1, r8
    2170:	e01e      	b.n	21b0 <initialize_opcode_info()+0x20a4>
    2172:	bf00      	nop
    2174:	200008d0 	.word	0x200008d0
    2178:	200008d8 	.word	0x200008d8
    217c:	200009bc 	.word	0x200009bc
    2180:	200008a4 	.word	0x200008a4
    2184:	20000888 	.word	0x20000888
    2188:	20000894 	.word	0x20000894
    218c:	200009c8 	.word	0x200009c8
    2190:	200009cc 	.word	0x200009cc
    2194:	200009d0 	.word	0x200009d0
    2198:	200008b4 	.word	0x200008b4
    219c:	200008b8 	.word	0x200008b8
    21a0:	200008c0 	.word	0x200008c0
    21a4:	200009c0 	.word	0x200009c0
    21a8:	20000930 	.word	0x20000930
    21ac:	200009c4 	.word	0x200009c4
    21b0:	a809      	add	r0, sp, #36	; 0x24
    21b2:	f007 fd2d 	bl	9c10 <String::String(char const*)>
    21b6:	f44f 7c01 	mov.w	ip, #516	; 0x204
    21ba:	a901      	add	r1, sp, #4
    21bc:	f605 4064 	addw	r0, r5, #3172	; 0xc64
    21c0:	f8ad c034 	strh.w	ip, [sp, #52]	; 0x34
    21c4:	f7fd ff50 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21c8:	a801      	add	r0, sp, #4
    21ca:	f7fd ff91 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf6] = {"INC","zpg,X","SZ",6,2};
    21ce:	4659      	mov	r1, fp
    21d0:	a801      	add	r0, sp, #4
    21d2:	f007 fd1d 	bl	9c10 <String::String(char const*)>
    21d6:	493a      	ldr	r1, [pc, #232]	; (22c0 <initialize_opcode_info()+0x21b4>)
    21d8:	a805      	add	r0, sp, #20
    21da:	f007 fd19 	bl	9c10 <String::String(char const*)>
    21de:	4639      	mov	r1, r7
    21e0:	a809      	add	r0, sp, #36	; 0x24
    21e2:	f007 fd15 	bl	9c10 <String::String(char const*)>
    21e6:	f240 2306 	movw	r3, #518	; 0x206
    21ea:	a901      	add	r1, sp, #4
    21ec:	f605 4098 	addw	r0, r5, #3224	; 0xc98
    21f0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    21f4:	f7fd ff38 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    21f8:	a801      	add	r0, sp, #4
    21fa:	f7fd ff79 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf8] = {"SED","","D",2,1};
    21fe:	4931      	ldr	r1, [pc, #196]	; (22c4 <initialize_opcode_info()+0x21b8>)
    2200:	a801      	add	r0, sp, #4
    2202:	f007 fd05 	bl	9c10 <String::String(char const*)>
    2206:	4621      	mov	r1, r4
    2208:	a805      	add	r0, sp, #20
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    220a:	f44f 7441 	mov.w	r4, #772	; 0x304
	opcode_info[0xf8] = {"SED","","D",2,1};
    220e:	f007 fcff 	bl	9c10 <String::String(char const*)>
    2212:	492d      	ldr	r1, [pc, #180]	; (22c8 <initialize_opcode_info()+0x21bc>)
    2214:	a809      	add	r0, sp, #36	; 0x24
    2216:	f007 fcfb 	bl	9c10 <String::String(char const*)>
    221a:	f44f 7381 	mov.w	r3, #258	; 0x102
    221e:	a901      	add	r1, sp, #4
    2220:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
    2224:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    2228:	f7fd ff1e 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    222c:	a801      	add	r0, sp, #4
    222e:	f7fd ff5f 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xf9] = {"SBC","abs,Y","SVZC",4,3};
    2232:	4649      	mov	r1, r9
    2234:	a801      	add	r0, sp, #4
    2236:	f007 fceb 	bl	9c10 <String::String(char const*)>
    223a:	4924      	ldr	r1, [pc, #144]	; (22cc <initialize_opcode_info()+0x21c0>)
    223c:	a805      	add	r0, sp, #20
    223e:	f007 fce7 	bl	9c10 <String::String(char const*)>
    2242:	4641      	mov	r1, r8
    2244:	a809      	add	r0, sp, #36	; 0x24
    2246:	f007 fce3 	bl	9c10 <String::String(char const*)>
    224a:	a901      	add	r1, sp, #4
    224c:	f605 5034 	addw	r0, r5, #3380	; 0xd34
    2250:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2254:	f7fd ff08 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2258:	a801      	add	r0, sp, #4
    225a:	f7fd ff49 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    225e:	4649      	mov	r1, r9
    2260:	a801      	add	r0, sp, #4
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    2262:	f240 3907 	movw	r9, #775	; 0x307
	opcode_info[0xfd] = {"SBC","abs,X","SVZC",4,3};
    2266:	f007 fcd3 	bl	9c10 <String::String(char const*)>
    226a:	4919      	ldr	r1, [pc, #100]	; (22d0 <initialize_opcode_info()+0x21c4>)
    226c:	a805      	add	r0, sp, #20
    226e:	f007 fccf 	bl	9c10 <String::String(char const*)>
    2272:	4641      	mov	r1, r8
    2274:	a809      	add	r0, sp, #36	; 0x24
    2276:	f007 fccb 	bl	9c10 <String::String(char const*)>
    227a:	a901      	add	r1, sp, #4
    227c:	f605 6004 	addw	r0, r5, #3588	; 0xe04
    2280:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    2284:	f7fd fef0 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    2288:	a801      	add	r0, sp, #4
    228a:	f7fd ff31 	bl	f0 <OpDecoder::~OpDecoder()>
	opcode_info[0xfe] = {"INC","abs,X","SZ",7,3};
    228e:	4659      	mov	r1, fp
    2290:	a801      	add	r0, sp, #4
    2292:	f007 fcbd 	bl	9c10 <String::String(char const*)>
    2296:	490e      	ldr	r1, [pc, #56]	; (22d0 <initialize_opcode_info()+0x21c4>)
    2298:	a805      	add	r0, sp, #20
    229a:	f007 fcb9 	bl	9c10 <String::String(char const*)>
    229e:	4639      	mov	r1, r7
    22a0:	a809      	add	r0, sp, #36	; 0x24
    22a2:	f007 fcb5 	bl	9c10 <String::String(char const*)>
    22a6:	a901      	add	r1, sp, #4
    22a8:	f605 6038 	addw	r0, r5, #3640	; 0xe38
    22ac:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
    22b0:	f7fd feda 	bl	68 <OpDecoder::operator=(OpDecoder&&) [clone .isra.0]>
    22b4:	a801      	add	r0, sp, #4
    22b6:	f7fd ff1b 	bl	f0 <OpDecoder::~OpDecoder()>
    22ba:	b00f      	add	sp, #60	; 0x3c
    22bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22c0:	200008c0 	.word	0x200008c0
    22c4:	200009d4 	.word	0x200009d4
    22c8:	200009b8 	.word	0x200009b8
    22cc:	200008d0 	.word	0x200008d0
    22d0:	200008d8 	.word	0x200008d8

000022d4 <check_for_CLK_activity()>:
    22d4:	4a0e      	ldr	r2, [pc, #56]	; (2310 <check_for_CLK_activity()+0x3c>)
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    22d6:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    22da:	6811      	ldr	r1, [r2, #0]
    22dc:	e004      	b.n	22e8 <check_for_CLK_activity()+0x14>
    22de:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    22e0:	1a5b      	subs	r3, r3, r1
    22e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    22e6:	d812      	bhi.n	230e <check_for_CLK_activity()+0x3a>
    while (((GPIO6_DR >> 12) & 0x1) == 0) {  // Teensy 4.1 Pin-24  GPIO6_DR[12]  CLK
    22e8:	f8dc 0000 	ldr.w	r0, [ip]
    22ec:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
    22f0:	d0f5      	beq.n	22de <check_for_CLK_activity()+0xa>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    22f2:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
    22f6:	e004      	b.n	2302 <check_for_CLK_activity()+0x2e>
    22f8:	6813      	ldr	r3, [r2, #0]
        if (millis() - start > 500) {
    22fa:	1a5b      	subs	r3, r3, r1
    22fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    2300:	d804      	bhi.n	230c <check_for_CLK_activity()+0x38>
    while (((GPIO6_DR >> 12) & 0x1) != 0) {
    2302:	6803      	ldr	r3, [r0, #0]
    2304:	04db      	lsls	r3, r3, #19
    2306:	d4f7      	bmi.n	22f8 <check_for_CLK_activity()+0x24>
    return(true);
    2308:	2001      	movs	r0, #1
    230a:	4770      	bx	lr
            return(false);
    230c:	2000      	movs	r0, #0
}
    230e:	4770      	bx	lr
    2310:	2001886c 	.word	0x2001886c

00002314 <setup>:
void setup() {
    2314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pinMode(PIN_CLK0_INV, INPUT);
    2318:	2100      	movs	r1, #0
void setup() {
    231a:	b089      	sub	sp, #36	; 0x24
    pinMode(PIN_CLK0_INV, INPUT);
    231c:	2018      	movs	r0, #24
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    231e:	4d94      	ldr	r5, [pc, #592]	; (2570 <setup+0x25c>)
    2320:	f007 fe7e 	bl	a020 <pinMode>
    pinMode(PIN_RESET, INPUT);
    2324:	2100      	movs	r1, #0
    2326:	2028      	movs	r0, #40	; 0x28
    2328:	4c92      	ldr	r4, [pc, #584]	; (2574 <setup+0x260>)
    232a:	f007 fe79 	bl	a020 <pinMode>
    pinMode(PIN_READY_n, INPUT);
    232e:	2100      	movs	r1, #0
    2330:	201a      	movs	r0, #26
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2332:	4f91      	ldr	r7, [pc, #580]	; (2578 <setup+0x264>)
    2334:	f007 fe74 	bl	a020 <pinMode>
    pinMode(PIN_IRQ, INPUT);
    2338:	2100      	movs	r1, #0
    233a:	2019      	movs	r0, #25
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    233c:	f8df 928c 	ldr.w	r9, [pc, #652]	; 25cc <setup+0x2b8>
    2340:	f007 fe6e 	bl	a020 <pinMode>
    pinMode(PIN_NMI, INPUT);
    2344:	2100      	movs	r1, #0
    2346:	2029      	movs	r0, #41	; 0x29
				if (elapsed > 750) break;
    2348:	f240 28ee 	movw	r8, #750	; 0x2ee
    234c:	f007 fe68 	bl	a020 <pinMode>
    pinMode(PIN_RDWR_n, OUTPUT);
    2350:	2101      	movs	r1, #1
    2352:	200c      	movs	r0, #12
    2354:	f007 fe64 	bl	a020 <pinMode>
    pinMode(PIN_SYNC, OUTPUT);
    2358:	2101      	movs	r1, #1
    235a:	2027      	movs	r0, #39	; 0x27
    235c:	f007 fe60 	bl	a020 <pinMode>
    pinMode(PIN_ADDR0, OUTPUT);
    2360:	2101      	movs	r1, #1
    2362:	201b      	movs	r0, #27
    2364:	f007 fe5c 	bl	a020 <pinMode>
    pinMode(PIN_ADDR1, OUTPUT);
    2368:	2101      	movs	r1, #1
    236a:	2026      	movs	r0, #38	; 0x26
    236c:	f007 fe58 	bl	a020 <pinMode>
    pinMode(PIN_ADDR2, OUTPUT);
    2370:	2101      	movs	r1, #1
    2372:	201c      	movs	r0, #28
    2374:	f007 fe54 	bl	a020 <pinMode>
    pinMode(PIN_ADDR3, OUTPUT);
    2378:	2101      	movs	r1, #1
    237a:	2025      	movs	r0, #37	; 0x25
    237c:	f007 fe50 	bl	a020 <pinMode>
    pinMode(PIN_ADDR4, OUTPUT);
    2380:	2101      	movs	r1, #1
    2382:	201d      	movs	r0, #29
    2384:	f007 fe4c 	bl	a020 <pinMode>
    pinMode(PIN_ADDR5, OUTPUT);
    2388:	2101      	movs	r1, #1
    238a:	2024      	movs	r0, #36	; 0x24
    238c:	f007 fe48 	bl	a020 <pinMode>
    pinMode(PIN_ADDR6, OUTPUT);
    2390:	2101      	movs	r1, #1
    2392:	201e      	movs	r0, #30
    2394:	f007 fe44 	bl	a020 <pinMode>
    pinMode(PIN_ADDR7, OUTPUT);
    2398:	2101      	movs	r1, #1
    239a:	2023      	movs	r0, #35	; 0x23
    239c:	f007 fe40 	bl	a020 <pinMode>
    pinMode(PIN_ADDR8, OUTPUT);
    23a0:	2101      	movs	r1, #1
    23a2:	201f      	movs	r0, #31
    23a4:	f007 fe3c 	bl	a020 <pinMode>
    pinMode(PIN_ADDR9, OUTPUT);
    23a8:	2101      	movs	r1, #1
    23aa:	2022      	movs	r0, #34	; 0x22
    23ac:	f007 fe38 	bl	a020 <pinMode>
    pinMode(PIN_ADDR10, OUTPUT);
    23b0:	2101      	movs	r1, #1
    23b2:	2020      	movs	r0, #32
    23b4:	f007 fe34 	bl	a020 <pinMode>
    pinMode(PIN_ADDR11, OUTPUT);
    23b8:	2101      	movs	r1, #1
    23ba:	2021      	movs	r0, #33	; 0x21
    23bc:	f007 fe30 	bl	a020 <pinMode>
    pinMode(PIN_ADDR12, OUTPUT);
    23c0:	2101      	movs	r1, #1
    23c2:	4608      	mov	r0, r1
    23c4:	f007 fe2c 	bl	a020 <pinMode>
    pinMode(PIN_ADDR13, OUTPUT);
    23c8:	2101      	movs	r1, #1
    23ca:	2000      	movs	r0, #0
    23cc:	f007 fe28 	bl	a020 <pinMode>
    pinMode(PIN_ADDR14, OUTPUT);
    23d0:	2101      	movs	r1, #1
    23d2:	2002      	movs	r0, #2
    23d4:	f007 fe24 	bl	a020 <pinMode>
    pinMode(PIN_ADDR15, OUTPUT);
    23d8:	2101      	movs	r1, #1
    23da:	2017      	movs	r0, #23
    23dc:	f007 fe20 	bl	a020 <pinMode>
    pinMode(PIN_DATAIN0, INPUT);
    23e0:	2100      	movs	r1, #0
    23e2:	200e      	movs	r0, #14
    23e4:	f007 fe1c 	bl	a020 <pinMode>
    pinMode(PIN_DATAIN1, INPUT);
    23e8:	2100      	movs	r1, #0
    23ea:	200f      	movs	r0, #15
    23ec:	f007 fe18 	bl	a020 <pinMode>
    pinMode(PIN_DATAIN2, INPUT);
    23f0:	2100      	movs	r1, #0
    23f2:	2010      	movs	r0, #16
    23f4:	f007 fe14 	bl	a020 <pinMode>
    pinMode(PIN_DATAIN3, INPUT);
    23f8:	2100      	movs	r1, #0
    23fa:	2011      	movs	r0, #17
    23fc:	f007 fe10 	bl	a020 <pinMode>
    pinMode(PIN_DATAIN4, INPUT);
    2400:	2100      	movs	r1, #0
    2402:	2012      	movs	r0, #18
    2404:	f007 fe0c 	bl	a020 <pinMode>
    pinMode(PIN_DATAIN5, INPUT);
    2408:	2100      	movs	r1, #0
    240a:	2013      	movs	r0, #19
    240c:	f007 fe08 	bl	a020 <pinMode>
    pinMode(PIN_DATAIN6, INPUT);
    2410:	2100      	movs	r1, #0
    2412:	2014      	movs	r0, #20
    2414:	f007 fe04 	bl	a020 <pinMode>
    pinMode(PIN_DATAIN7, INPUT);
    2418:	2100      	movs	r1, #0
    241a:	2015      	movs	r0, #21
    241c:	f007 fe00 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT0, OUTPUT);
    2420:	2101      	movs	r1, #1
    2422:	200b      	movs	r0, #11
    2424:	f007 fdfc 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT1, OUTPUT);
    2428:	2101      	movs	r1, #1
    242a:	200a      	movs	r0, #10
    242c:	f007 fdf8 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT2, OUTPUT);
    2430:	2101      	movs	r1, #1
    2432:	2009      	movs	r0, #9
    2434:	f007 fdf4 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT3, OUTPUT);
    2438:	2101      	movs	r1, #1
    243a:	2008      	movs	r0, #8
    243c:	f007 fdf0 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT4, OUTPUT);
    2440:	2101      	movs	r1, #1
    2442:	2007      	movs	r0, #7
    2444:	f007 fdec 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT5, OUTPUT);
    2448:	2101      	movs	r1, #1
    244a:	2006      	movs	r0, #6
    244c:	f007 fde8 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT6, OUTPUT);
    2450:	2101      	movs	r1, #1
    2452:	2005      	movs	r0, #5
    2454:	f007 fde4 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT7, OUTPUT);
    2458:	2101      	movs	r1, #1
    245a:	2004      	movs	r0, #4
    245c:	f007 fde0 	bl	a020 <pinMode>
    pinMode(PIN_DATAOUT_OE_n, OUTPUT);
    2460:	2101      	movs	r1, #1
    2462:	2003      	movs	r0, #3
    2464:	f007 fddc 	bl	a020 <pinMode>
        internal_RAM[0xD000 + u] = AppleIIP_ROM_D0[u];
    2468:	f44f 6200 	mov.w	r2, #2048	; 0x800
    246c:	4943      	ldr	r1, [pc, #268]	; (257c <setup+0x268>)
    246e:	4844      	ldr	r0, [pc, #272]	; (2580 <setup+0x26c>)
    2470:	f007 fe16 	bl	a0a0 <memcpy>
        internal_RAM[0xD800 + u] = AppleIIP_ROM_D8[u];
    2474:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2478:	4942      	ldr	r1, [pc, #264]	; (2584 <setup+0x270>)
    247a:	4843      	ldr	r0, [pc, #268]	; (2588 <setup+0x274>)
    247c:	f007 fe10 	bl	a0a0 <memcpy>
        internal_RAM[0xE000 + u] = AppleIIP_ROM_E0[u];
    2480:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2484:	4941      	ldr	r1, [pc, #260]	; (258c <setup+0x278>)
    2486:	4842      	ldr	r0, [pc, #264]	; (2590 <setup+0x27c>)
    2488:	f007 fe0a 	bl	a0a0 <memcpy>
        internal_RAM[0xE800 + u] = AppleIIP_ROM_E8[u];
    248c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2490:	4940      	ldr	r1, [pc, #256]	; (2594 <setup+0x280>)
    2492:	4841      	ldr	r0, [pc, #260]	; (2598 <setup+0x284>)
    2494:	f007 fe04 	bl	a0a0 <memcpy>
        internal_RAM[0xF000 + u] = AppleIIP_ROM_F0[u];
    2498:	f44f 6200 	mov.w	r2, #2048	; 0x800
    249c:	493f      	ldr	r1, [pc, #252]	; (259c <setup+0x288>)
    249e:	4840      	ldr	r0, [pc, #256]	; (25a0 <setup+0x28c>)
    24a0:	f007 fdfe 	bl	a0a0 <memcpy>
        internal_RAM[0xF800 + u] = AppleIIP_ROM_F8[u];
    24a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    24a8:	493e      	ldr	r1, [pc, #248]	; (25a4 <setup+0x290>)
    24aa:	483f      	ldr	r0, [pc, #252]	; (25a8 <setup+0x294>)
    24ac:	f007 fdf8 	bl	a0a0 <memcpy>
		uint32_t millis_begin = systick_millis_count;
    24b0:	682e      	ldr	r6, [r5, #0]
		yield();
    24b2:	f009 f833 	bl	b51c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    24b6:	7823      	ldrb	r3, [r4, #0]
    24b8:	2b00      	cmp	r3, #0
    24ba:	d03e      	beq.n	253a <setup+0x226>
    24bc:	783b      	ldrb	r3, [r7, #0]
    24be:	07db      	lsls	r3, r3, #31
    24c0:	d53b      	bpl.n	253a <setup+0x226>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    24c2:	682b      	ldr	r3, [r5, #0]
    24c4:	f8d9 2000 	ldr.w	r2, [r9]
    24c8:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    24ca:	2b0e      	cmp	r3, #14
    24cc:	d935      	bls.n	253a <setup+0x226>
    Serial.setTimeout(5000);
    24ce:	f241 3188 	movw	r1, #5000	; 0x1388
    24d2:	4836      	ldr	r0, [pc, #216]	; (25ac <setup+0x298>)
    24d4:	f007 fb40 	bl	9b58 <Stream::setTimeout(unsigned long)>
    Serial.println(String("Apple ][+ In-circuit Emulator\n\rVersion ") + VERSION_NUM);
    24d8:	4935      	ldr	r1, [pc, #212]	; (25b0 <setup+0x29c>)
    24da:	4668      	mov	r0, sp
    24dc:	f007 fb98 	bl	9c10 <String::String(char const*)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    24e0:	4669      	mov	r1, sp
    24e2:	a804      	add	r0, sp, #16
    24e4:	f007 fb3a 	bl	9b5c <String::String(String const&)>
    24e8:	4932      	ldr	r1, [pc, #200]	; (25b4 <setup+0x2a0>)
    24ea:	a804      	add	r0, sp, #16
    24ec:	f007 fc2c 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
    24f0:	4601      	mov	r1, r0
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
    24f2:	482e      	ldr	r0, [pc, #184]	; (25ac <setup+0x298>)
    24f4:	f007 faea 	bl	9acc <Print::print(String const&)>
    24f8:	482c      	ldr	r0, [pc, #176]	; (25ac <setup+0x298>)
    24fa:	f007 fb0d 	bl	9b18 <Print::println()>
class StringSumHelper : public String
    24fe:	a804      	add	r0, sp, #16
    2500:	f007 fb4a 	bl	9b98 <String::~String()>
    2504:	4668      	mov	r0, sp
    2506:	f007 fb47 	bl	9b98 <String::~String()>
    if ( !check_for_CLK_activity() ) {
    250a:	f7ff fee3 	bl	22d4 <check_for_CLK_activity()>
    250e:	bb08      	cbnz	r0, 2554 <setup+0x240>
        debug_mode = true;
    2510:	4829      	ldr	r0, [pc, #164]	; (25b8 <setup+0x2a4>)
    2512:	2401      	movs	r4, #1
        addr_mode = All_Fast_Internal;
    2514:	4b29      	ldr	r3, [pc, #164]	; (25bc <setup+0x2a8>)
    2516:	2203      	movs	r2, #3
        debug_mode = true;
    2518:	7004      	strb	r4, [r0, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    251a:	2146      	movs	r1, #70	; 0x46
    251c:	4828      	ldr	r0, [pc, #160]	; (25c0 <setup+0x2ac>)
        addr_mode = All_Fast_Internal;
    251e:	701a      	strb	r2, [r3, #0]
    2520:	f008 ff7e 	bl	b420 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
    2524:	4821      	ldr	r0, [pc, #132]	; (25ac <setup+0x298>)
    2526:	f007 faf7 	bl	9b18 <Print::println()>
    run_mode = WAITING;
    252a:	4b26      	ldr	r3, [pc, #152]	; (25c4 <setup+0x2b0>)
    252c:	2200      	movs	r2, #0
    252e:	701a      	strb	r2, [r3, #0]
}
    2530:	b009      	add	sp, #36	; 0x24
    2532:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    initialize_opcode_info();
    2536:	f7fd bde9 	b.w	10c <initialize_opcode_info()>
			uint32_t elapsed = systick_millis_count - millis_begin;
    253a:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    253c:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    253e:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    2540:	b12a      	cbz	r2, 254e <setup+0x23a>
				if (elapsed > 2000) break;
    2542:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    2546:	d8c2      	bhi.n	24ce <setup+0x1ba>
			yield();
    2548:	f008 ffe8 	bl	b51c <yield>
    254c:	e7b1      	b.n	24b2 <setup+0x19e>
				if (elapsed > 750) break;
    254e:	4543      	cmp	r3, r8
    2550:	d9fa      	bls.n	2548 <setup+0x234>
    2552:	e7bc      	b.n	24ce <setup+0x1ba>
        debug_mode = false;
    2554:	2300      	movs	r3, #0
        addr_mode = All_External;
    2556:	4a19      	ldr	r2, [pc, #100]	; (25bc <setup+0x2a8>)
        debug_mode = false;
    2558:	4c17      	ldr	r4, [pc, #92]	; (25b8 <setup+0x2a4>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    255a:	2146      	movs	r1, #70	; 0x46
    255c:	481a      	ldr	r0, [pc, #104]	; (25c8 <setup+0x2b4>)
    255e:	7023      	strb	r3, [r4, #0]
        addr_mode = All_External;
    2560:	7013      	strb	r3, [r2, #0]
    2562:	f008 ff5d 	bl	b420 <usb_serial_write>
    2566:	4811      	ldr	r0, [pc, #68]	; (25ac <setup+0x298>)
    2568:	f007 fad6 	bl	9b18 <Print::println()>
    256c:	e7dd      	b.n	252a <setup+0x216>
    256e:	bf00      	nop
    2570:	2001886c 	.word	0x2001886c
    2574:	200188af 	.word	0x200188af
    2578:	200188ae 	.word	0x200188ae
    257c:	20001350 	.word	0x20001350
    2580:	200123f0 	.word	0x200123f0
    2584:	20001b50 	.word	0x20001b50
    2588:	20012bf0 	.word	0x20012bf0
    258c:	20002350 	.word	0x20002350
    2590:	200133f0 	.word	0x200133f0
    2594:	20002b50 	.word	0x20002b50
    2598:	20013bf0 	.word	0x20013bf0
    259c:	20003350 	.word	0x20003350
    25a0:	200143f0 	.word	0x200143f0
    25a4:	20003b50 	.word	0x20003b50
    25a8:	20014bf0 	.word	0x20014bf0
    25ac:	20004358 	.word	0x20004358
    25b0:	20001080 	.word	0x20001080
    25b4:	200010a8 	.word	0x200010a8
    25b8:	20004966 	.word	0x20004966
    25bc:	20018898 	.word	0x20018898
    25c0:	200010b0 	.word	0x200010b0
    25c4:	200188a6 	.word	0x200188a6
    25c8:	200010f8 	.word	0x200010f8
    25cc:	2001887c 	.word	0x2001887c

000025d0 <sample_at_CLK_rising_edge()>:
    if (debug_mode)
    25d0:	4b21      	ldr	r3, [pc, #132]	; (2658 <sample_at_CLK_rising_edge()+0x88>)
    25d2:	781b      	ldrb	r3, [r3, #0]
    25d4:	b103      	cbz	r3, 25d8 <sample_at_CLK_rising_edge()+0x8>
    25d6:	4770      	bx	lr
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    25d8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
inline void sample_at_CLK_rising_edge() {
    25dc:	b500      	push	{lr}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    25de:	6813      	ldr	r3, [r2, #0]
    25e0:	04db      	lsls	r3, r3, #19
    25e2:	d4fc      	bmi.n	25de <sample_at_CLK_rising_edge()+0xe>
    while (CLK0) {}      // Wait for CLK0 to become low
    25e4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    25e8:	6813      	ldr	r3, [r2, #0]
    25ea:	04d8      	lsls	r0, r3, #19
    25ec:	d5fc      	bpl.n	25e8 <sample_at_CLK_rising_edge()+0x18>
        GPIO6_data_d1 = GPIO6_DR;
    25ee:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    25f2:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    25f4:	04d9      	lsls	r1, r3, #19
    25f6:	d5fc      	bpl.n	25f2 <sample_at_CLK_rising_edge()+0x22>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    25f8:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    25fc:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    25fe:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2600:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2604:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2608:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    260a:	ea42 020e 	orr.w	r2, r2, lr
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    260e:	f00c 0e01 	and.w	lr, ip, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2612:	f000 0c10 	and.w	ip, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2616:	ea42 020c 	orr.w	r2, r2, ip
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    261a:	f000 0c01 	and.w	ip, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    261e:	0cd8      	lsrs	r0, r3, #19
    2620:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2624:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2626:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    262a:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    262e:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    2630:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2634:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2638:	4302      	orrs	r2, r0
    263a:	4808      	ldr	r0, [pc, #32]	; (265c <sample_at_CLK_rising_edge()+0x8c>)
    263c:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    263e:	4a08      	ldr	r2, [pc, #32]	; (2660 <sample_at_CLK_rising_edge()+0x90>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2640:	4808      	ldr	r0, [pc, #32]	; (2664 <sample_at_CLK_rising_edge()+0x94>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2642:	f882 c000 	strb.w	ip, [r2]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    2646:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2648:	4a07      	ldr	r2, [pc, #28]	; (2668 <sample_at_CLK_rising_edge()+0x98>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    264a:	4b08      	ldr	r3, [pc, #32]	; (266c <sample_at_CLK_rising_edge()+0x9c>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    264c:	f882 e000 	strb.w	lr, [r2]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    2650:	7019      	strb	r1, [r3, #0]
}
    2652:	f85d fb04 	ldr.w	pc, [sp], #4
    2656:	bf00      	nop
    2658:	20004966 	.word	0x20004966
    265c:	2001889a 	.word	0x2001889a
    2660:	2001889b 	.word	0x2001889b
    2664:	2001889d 	.word	0x2001889d
    2668:	2001889e 	.word	0x2001889e
    266c:	2001889c 	.word	0x2001889c

00002670 <read_byte(unsigned short, bool)>:
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2670:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
inline uint8_t read_byte(uint16_t local_address, bool assert_sync) {
    2674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2678:	d33c      	bcc.n	26f4 <read_byte(unsigned short, bool)+0x84>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    267a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    267e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2682:	d355      	bcc.n	2730 <read_byte(unsigned short, bool)+0xc0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2684:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    2688:	b294      	uxth	r4, r2
    268a:	f5b4 4f34 	cmp.w	r4, #46080	; 0xb400
    268e:	d331      	bcc.n	26f4 <read_byte(unsigned short, bool)+0x84>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2690:	2900      	cmp	r1, #0
    2692:	f000 8118 	beq.w	28c6 <read_byte(unsigned short, bool)+0x256>
    2696:	4cb3      	ldr	r4, [pc, #716]	; (2964 <read_byte(unsigned short, bool)+0x2f4>)
    2698:	f894 8000 	ldrb.w	r8, [r4]
    269c:	f1b8 0f01 	cmp.w	r8, #1
    26a0:	f040 814f 	bne.w	2942 <read_byte(unsigned short, bool)+0x2d2>
    current_address = local_address;
    26a4:	4ab0      	ldr	r2, [pc, #704]	; (2968 <read_byte(unsigned short, bool)+0x2f8>)
    26a6:	f04f 0801 	mov.w	r8, #1
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    26aa:	2100      	movs	r1, #0
    current_address = local_address;
    26ac:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    26ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    26b2:	d311      	bcc.n	26d8 <read_byte(unsigned short, bool)+0x68>
    26b4:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    26b8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
    26bc:	f0c0 8135 	bcc.w	292a <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x2000) && (local_address < 0x6000)) return addr_mode; //  Apple IIPlus  HIRES Page 1 and 2
    26c0:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
    26c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    26c8:	f0c0 812f 	bcc.w	292a <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    26cc:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    26d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    26d4:	f0c0 8129 	bcc.w	292a <read_byte(unsigned short, bool)+0x2ba>
        last_access_internal_RAM = 0;
    26d8:	4ba4      	ldr	r3, [pc, #656]	; (296c <read_byte(unsigned short, bool)+0x2fc>)
    26da:	2200      	movs	r2, #0
        if ((run_mode != SINGLE_STEP) && assert_sync)
    26dc:	f1b8 0f01 	cmp.w	r8, #1
        last_access_internal_RAM = 0;
    26e0:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    26e2:	d02f      	beq.n	2744 <read_byte(unsigned short, bool)+0xd4>
    26e4:	b371      	cbz	r1, 2744 <read_byte(unsigned short, bool)+0xd4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    26e6:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    26ea:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    26ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    26f2:	e027      	b.n	2744 <read_byte(unsigned short, bool)+0xd4>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    26f4:	4b9e      	ldr	r3, [pc, #632]	; (2970 <read_byte(unsigned short, bool)+0x300>)
    if (internal_address_check(local_address) > Read_Internal_Write_External) {  // Either Fast mode
    26f6:	781a      	ldrb	r2, [r3, #0]
    26f8:	2a01      	cmp	r2, #1
    26fa:	d906      	bls.n	270a <read_byte(unsigned short, bool)+0x9a>
        last_access_internal_RAM = 1;
    26fc:	4a9b      	ldr	r2, [pc, #620]	; (296c <read_byte(unsigned short, bool)+0x2fc>)
    26fe:	2101      	movs	r1, #1
        return internal_RAM[local_address];
    2700:	4b9c      	ldr	r3, [pc, #624]	; (2974 <read_byte(unsigned short, bool)+0x304>)
        last_access_internal_RAM = 1;
    2702:	7011      	strb	r1, [r2, #0]
        return internal_RAM[local_address];
    2704:	5c18      	ldrb	r0, [r3, r0]
}
    2706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    270a:	4a96      	ldr	r2, [pc, #600]	; (2964 <read_byte(unsigned short, bool)+0x2f4>)
    270c:	f892 8000 	ldrb.w	r8, [r2]
    2710:	2900      	cmp	r1, #0
    2712:	f040 80de 	bne.w	28d2 <read_byte(unsigned short, bool)+0x262>
    2716:	2100      	movs	r1, #0
    current_address = local_address;
    2718:	4a93      	ldr	r2, [pc, #588]	; (2968 <read_byte(unsigned short, bool)+0x2f8>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    271a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    271e:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2720:	f080 811d 	bcs.w	295e <read_byte(unsigned short, bool)+0x2ee>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    2724:	781b      	ldrb	r3, [r3, #0]
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    2726:	2b01      	cmp	r3, #1
    2728:	d9d6      	bls.n	26d8 <read_byte(unsigned short, bool)+0x68>
    if (debug_mode) return;
    272a:	4b93      	ldr	r3, [pc, #588]	; (2978 <read_byte(unsigned short, bool)+0x308>)
    272c:	781c      	ldrb	r4, [r3, #0]
    272e:	e06c      	b.n	280a <read_byte(unsigned short, bool)+0x19a>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    2730:	2900      	cmp	r1, #0
    2732:	f040 813d 	bne.w	29b0 <read_byte(unsigned short, bool)+0x340>
    2736:	4b8b      	ldr	r3, [pc, #556]	; (2964 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    2738:	4c8b      	ldr	r4, [pc, #556]	; (2968 <read_byte(unsigned short, bool)+0x2f8>)
        last_access_internal_RAM = 0;
    273a:	4a8c      	ldr	r2, [pc, #560]	; (296c <read_byte(unsigned short, bool)+0x2fc>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    273c:	f893 8000 	ldrb.w	r8, [r3]
    current_address = local_address;
    2740:	8020      	strh	r0, [r4, #0]
        last_access_internal_RAM = 0;
    2742:	7011      	strb	r1, [r2, #0]
    if (debug_mode) return;
    2744:	4b8c      	ldr	r3, [pc, #560]	; (2978 <read_byte(unsigned short, bool)+0x308>)
    2746:	781c      	ldrb	r4, [r3, #0]
    2748:	b94c      	cbnz	r4, 275e <read_byte(unsigned short, bool)+0xee>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    274a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    274e:	6813      	ldr	r3, [r2, #0]
    2750:	04de      	lsls	r6, r3, #19
    2752:	d4fc      	bmi.n	274e <read_byte(unsigned short, bool)+0xde>
    while (CLK0) {}      // Wait for CLK0 to become low
    2754:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2758:	6813      	ldr	r3, [r2, #0]
    275a:	04dd      	lsls	r5, r3, #19
    275c:	d5fc      	bpl.n	2758 <read_byte(unsigned short, bool)+0xe8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    275e:	4e87      	ldr	r6, [pc, #540]	; (297c <read_byte(unsigned short, bool)+0x30c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2760:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
    2764:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2766:	0282      	lsls	r2, r0, #10
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2768:	0a85      	lsrs	r5, r0, #10
    276a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    276e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2772:	f8dc 1000 	ldr.w	r1, [ip]
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2776:	f005 070c 	and.w	r7, r5, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    277a:	4b81      	ldr	r3, [pc, #516]	; (2980 <read_byte(unsigned short, bool)+0x310>)
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    277c:	f005 0510 	and.w	r5, r5, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2780:	400b      	ands	r3, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2782:	06c1      	lsls	r1, r0, #27
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2784:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    2788:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    278a:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    278c:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    278e:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2792:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2796:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    279a:	433b      	orrs	r3, r7
    279c:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    27a0:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27a2:	6837      	ldr	r7, [r6, #0]
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27a4:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    27a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    27ac:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27ae:	4b75      	ldr	r3, [pc, #468]	; (2984 <read_byte(unsigned short, bool)+0x314>)
    27b0:	403b      	ands	r3, r7
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    27b2:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    27b4:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    27b6:	0543      	lsls	r3, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    27b8:	f407 2e00 	and.w	lr, r7, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    27bc:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    27c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    27c4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    27c6:	0342      	lsls	r2, r0, #13
    27c8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    27cc:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    27ce:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    27d0:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    27d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    27d8:	6032      	str	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    27da:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27dc:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    27e0:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    27e4:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27e6:	f8dc 2000 	ldr.w	r2, [ip]
    27ea:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    27ee:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    27f0:	4a65      	ldr	r2, [pc, #404]	; (2988 <read_byte(unsigned short, bool)+0x318>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    27f2:	433b      	orrs	r3, r7
    27f4:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    27f8:	0903      	lsrs	r3, r0, #4
    27fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    27fe:	432b      	orrs	r3, r5
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2800:	6835      	ldr	r5, [r6, #0]
    2802:	402a      	ands	r2, r5
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2804:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2806:	430b      	orrs	r3, r1
    2808:	6033      	str	r3, [r6, #0]
    return;
    280a:	4d60      	ldr	r5, [pc, #384]	; (298c <read_byte(unsigned short, bool)+0x31c>)
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    280c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    2810:	f8df e184 	ldr.w	lr, [pc, #388]	; 2998 <read_byte(unsigned short, bool)+0x328>
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2814:	f8df c188 	ldr.w	ip, [pc, #392]	; 29a0 <read_byte(unsigned short, bool)+0x330>
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2818:	4f5d      	ldr	r7, [pc, #372]	; (2990 <read_byte(unsigned short, bool)+0x320>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    281a:	4e5e      	ldr	r6, [pc, #376]	; (2994 <read_byte(unsigned short, bool)+0x324>)
    if (debug_mode)
    281c:	b1d4      	cbz	r4, 2854 <read_byte(unsigned short, bool)+0x1e4>
        } while (direct_ready_n == 0x1); // Delay a clock cycle until ready is active 
    281e:	782b      	ldrb	r3, [r5, #0]
    2820:	2b01      	cmp	r3, #1
    2822:	d0fb      	beq.n	281c <read_byte(unsigned short, bool)+0x1ac>
        if (run_mode != SINGLE_STEP)
    2824:	f1b8 0f01 	cmp.w	r8, #1
    2828:	d005      	beq.n	2836 <read_byte(unsigned short, bool)+0x1c6>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    282a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    282e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    2832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (local_address == 0xC000) {
    2836:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    283a:	d05d      	beq.n	28f8 <read_byte(unsigned short, bool)+0x288>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    283c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    2840:	d352      	bcc.n	28e8 <read_byte(unsigned short, bool)+0x278>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2842:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    284a:	d247      	bcs.n	28dc <read_byte(unsigned short, bool)+0x26c>
            return internal_RAM[current_address];
    284c:	4b49      	ldr	r3, [pc, #292]	; (2974 <read_byte(unsigned short, bool)+0x304>)
    284e:	5c18      	ldrb	r0, [r3, r0]
}
    2850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2854:	6813      	ldr	r3, [r2, #0]
    2856:	04d9      	lsls	r1, r3, #19
    2858:	d4fc      	bmi.n	2854 <read_byte(unsigned short, bool)+0x1e4>
    while (CLK0) {}      // Wait for CLK0 to become low
    285a:	6813      	ldr	r3, [r2, #0]
    285c:	04db      	lsls	r3, r3, #19
    285e:	d5fc      	bpl.n	285a <read_byte(unsigned short, bool)+0x1ea>
        GPIO6_data_d1 = GPIO6_DR;
    2860:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    2862:	04d9      	lsls	r1, r3, #19
    2864:	d5fc      	bpl.n	2860 <read_byte(unsigned short, bool)+0x1f0>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2866:	ea4f 5a13 	mov.w	sl, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    286a:	0ad9      	lsrs	r1, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    286c:	ea4f 3953 	mov.w	r9, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    2870:	f00a 0bc0 	and.w	fp, sl, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    2874:	f001 0120 	and.w	r1, r1, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2878:	f00a 0a01 	and.w	sl, sl, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    287c:	ea41 010b 	orr.w	r1, r1, fp
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    2880:	f887 a000 	strb.w	sl, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    2884:	f009 0a10 	and.w	sl, r9, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2888:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    288c:	ea41 0a0a 	orr.w	sl, r1, sl
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    2890:	0cd9      	lsrs	r1, r3, #19
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    2892:	f88c 9000 	strb.w	r9, [ip]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    2896:	ea4f 5953 	mov.w	r9, r3, lsr #21
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    289a:	f001 0108 	and.w	r1, r1, #8
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    289e:	f009 0b04 	and.w	fp, r9, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    28a2:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    28a6:	ea4a 0101 	orr.w	r1, sl, r1
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    28aa:	f3c3 4a81 	ubfx	sl, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    28ae:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    28b2:	f886 9000 	strb.w	r9, [r6]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    28b6:	ea41 010b 	orr.w	r1, r1, fp
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    28ba:	702b      	strb	r3, [r5, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    28bc:	ea41 010a 	orr.w	r1, r1, sl
    28c0:	f88e 1000 	strb.w	r1, [lr]
    return;
    28c4:	e7ac      	b.n	2820 <read_byte(unsigned short, bool)+0x1b0>
    current_address = local_address;
    28c6:	4c28      	ldr	r4, [pc, #160]	; (2968 <read_byte(unsigned short, bool)+0x2f8>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    28c8:	4b26      	ldr	r3, [pc, #152]	; (2964 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
    28ca:	8020      	strh	r0, [r4, #0]
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    28cc:	f893 8000 	ldrb.w	r8, [r3]
    28d0:	e6f2      	b.n	26b8 <read_byte(unsigned short, bool)+0x48>
    28d2:	f1b8 0f01 	cmp.w	r8, #1
    28d6:	f47f af1f 	bne.w	2718 <read_byte(unsigned short, bool)+0xa8>
    28da:	e71c      	b.n	2716 <read_byte(unsigned short, bool)+0xa6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    28dc:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    28e0:	b29b      	uxth	r3, r3
    28e2:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    28e6:	d203      	bcs.n	28f0 <read_byte(unsigned short, bool)+0x280>
    28e8:	4b21      	ldr	r3, [pc, #132]	; (2970 <read_byte(unsigned short, bool)+0x300>)
    28ea:	781b      	ldrb	r3, [r3, #0]
        if (internal_address_check(current_address) != All_External) {
    28ec:	2b00      	cmp	r3, #0
    28ee:	d1ad      	bne.n	284c <read_byte(unsigned short, bool)+0x1dc>
    28f0:	4b29      	ldr	r3, [pc, #164]	; (2998 <read_byte(unsigned short, bool)+0x328>)
            return direct_datain;
    28f2:	7818      	ldrb	r0, [r3, #0]
}
    28f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    28f8:	4928      	ldr	r1, [pc, #160]	; (299c <read_byte(unsigned short, bool)+0x32c>)
    28fa:	4b27      	ldr	r3, [pc, #156]	; (2998 <read_byte(unsigned short, bool)+0x328>)
    28fc:	780a      	ldrb	r2, [r1, #0]
    28fe:	b9b2      	cbnz	r2, 292e <read_byte(unsigned short, bool)+0x2be>
    2900:	781a      	ldrb	r2, [r3, #0]
    2902:	2a88      	cmp	r2, #136	; 0x88
    2904:	d1f5      	bne.n	28f2 <read_byte(unsigned short, bool)+0x282>
    2906:	2201      	movs	r2, #1
    2908:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 3) {
    290a:	780a      	ldrb	r2, [r1, #0]
    290c:	2a03      	cmp	r2, #3
    290e:	d1f0      	bne.n	28f2 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
    2910:	7818      	ldrb	r0, [r3, #0]
                if (direct_datain == 0xB0) {
    2912:	28b0      	cmp	r0, #176	; 0xb0
    2914:	d018      	beq.n	2948 <read_byte(unsigned short, bool)+0x2d8>
                if (direct_datain == 0xB1) {
    2916:	28b1      	cmp	r0, #177	; 0xb1
    2918:	d044      	beq.n	29a4 <read_byte(unsigned short, bool)+0x334>
                if (direct_datain == 0xB2) {
    291a:	28b2      	cmp	r0, #178	; 0xb2
    291c:	d155      	bne.n	29ca <read_byte(unsigned short, bool)+0x35a>
                    addr_mode = Read_Fast_Internal_Write_External;
    291e:	4814      	ldr	r0, [pc, #80]	; (2970 <read_byte(unsigned short, bool)+0x300>)
    2920:	2402      	movs	r4, #2
                    rx_byte_state = 0;
    2922:	2200      	movs	r2, #0
                    addr_mode = Read_Fast_Internal_Write_External;
    2924:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    2926:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2928:	e7e3      	b.n	28f2 <read_byte(unsigned short, bool)+0x282>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    292a:	4b11      	ldr	r3, [pc, #68]	; (2970 <read_byte(unsigned short, bool)+0x300>)
    292c:	e6fa      	b.n	2724 <read_byte(unsigned short, bool)+0xb4>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    292e:	2a01      	cmp	r2, #1
    2930:	d00f      	beq.n	2952 <read_byte(unsigned short, bool)+0x2e2>
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    2932:	2a02      	cmp	r2, #2
    2934:	d1ea      	bne.n	290c <read_byte(unsigned short, bool)+0x29c>
    2936:	781a      	ldrb	r2, [r3, #0]
    2938:	2a88      	cmp	r2, #136	; 0x88
    293a:	d1da      	bne.n	28f2 <read_byte(unsigned short, bool)+0x282>
    293c:	2203      	movs	r2, #3
    293e:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    2940:	e7d7      	b.n	28f2 <read_byte(unsigned short, bool)+0x282>
    current_address = local_address;
    2942:	4b09      	ldr	r3, [pc, #36]	; (2968 <read_byte(unsigned short, bool)+0x2f8>)
    2944:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    2946:	e6b7      	b.n	26b8 <read_byte(unsigned short, bool)+0x48>
                    addr_mode = All_External;
    2948:	2200      	movs	r2, #0
    294a:	4809      	ldr	r0, [pc, #36]	; (2970 <read_byte(unsigned short, bool)+0x300>)
                    rx_byte_state = 0;
    294c:	700a      	strb	r2, [r1, #0]
                    addr_mode = All_External;
    294e:	7002      	strb	r2, [r0, #0]
                if (direct_datain == 0xB3) {
    2950:	e7cf      	b.n	28f2 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
    2952:	781a      	ldrb	r2, [r3, #0]
    2954:	2a95      	cmp	r2, #149	; 0x95
    2956:	d1d8      	bne.n	290a <read_byte(unsigned short, bool)+0x29a>
    2958:	2202      	movs	r2, #2
    295a:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
    295c:	e7c9      	b.n	28f2 <read_byte(unsigned short, bool)+0x282>
    295e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2962:	e6a4      	b.n	26ae <read_byte(unsigned short, bool)+0x3e>
    2964:	200188a6 	.word	0x200188a6
    2968:	20018888 	.word	0x20018888
    296c:	200188a1 	.word	0x200188a1
    2970:	20018898 	.word	0x20018898
    2974:	200053f0 	.word	0x200053f0
    2978:	20004966 	.word	0x20004966
    297c:	42004000 	.word	0x42004000
    2980:	6dfffff3 	.word	0x6dfffff3
    2984:	cff3efff 	.word	0xcff3efff
    2988:	7fffff6f 	.word	0x7fffff6f
    298c:	2001889d 	.word	0x2001889d
    2990:	2001889e 	.word	0x2001889e
    2994:	2001889c 	.word	0x2001889c
    2998:	2001889a 	.word	0x2001889a
    299c:	200188a7 	.word	0x200188a7
    29a0:	2001889b 	.word	0x2001889b
                    addr_mode = Read_Internal_Write_External;
    29a4:	480c      	ldr	r0, [pc, #48]	; (29d8 <read_byte(unsigned short, bool)+0x368>)
    29a6:	2401      	movs	r4, #1
                    rx_byte_state = 0;
    29a8:	2200      	movs	r2, #0
                    addr_mode = Read_Internal_Write_External;
    29aa:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
    29ac:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
    29ae:	e7a0      	b.n	28f2 <read_byte(unsigned short, bool)+0x282>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
    29b0:	4a0a      	ldr	r2, [pc, #40]	; (29dc <read_byte(unsigned short, bool)+0x36c>)
    29b2:	f892 8000 	ldrb.w	r8, [r2]
    29b6:	f1b8 0f01 	cmp.w	r8, #1
    29ba:	f43f ae73 	beq.w	26a4 <read_byte(unsigned short, bool)+0x34>
    current_address = local_address;
    29be:	4908      	ldr	r1, [pc, #32]	; (29e0 <read_byte(unsigned short, bool)+0x370>)
        last_access_internal_RAM = 0;
    29c0:	2200      	movs	r2, #0
    29c2:	4b08      	ldr	r3, [pc, #32]	; (29e4 <read_byte(unsigned short, bool)+0x374>)
    current_address = local_address;
    29c4:	8008      	strh	r0, [r1, #0]
        last_access_internal_RAM = 0;
    29c6:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    29c8:	e68d      	b.n	26e6 <read_byte(unsigned short, bool)+0x76>
                if (direct_datain == 0xB3) {
    29ca:	28b3      	cmp	r0, #179	; 0xb3
    29cc:	d191      	bne.n	28f2 <read_byte(unsigned short, bool)+0x282>
                    addr_mode = All_Fast_Internal;
    29ce:	4c02      	ldr	r4, [pc, #8]	; (29d8 <read_byte(unsigned short, bool)+0x368>)
                    rx_byte_state = 0;
    29d0:	2000      	movs	r0, #0
                    addr_mode = All_Fast_Internal;
    29d2:	7022      	strb	r2, [r4, #0]
                    rx_byte_state = 0;
    29d4:	7008      	strb	r0, [r1, #0]
    29d6:	e78c      	b.n	28f2 <read_byte(unsigned short, bool)+0x282>
    29d8:	20018898 	.word	0x20018898
    29dc:	200188a6 	.word	0x200188a6
    29e0:	20018888 	.word	0x20018888
    29e4:	200188a1 	.word	0x200188a1

000029e8 <write_byte(unsigned short, unsigned char)>:
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    29e8:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
inline void write_byte(uint16_t local_address, uint8_t local_write_data) {
    29ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
    29ee:	d201      	bcs.n	29f4 <write_byte(unsigned short, unsigned char)+0xc>
    29f0:	4b77      	ldr	r3, [pc, #476]	; (2bd0 <write_byte(unsigned short, unsigned char)+0x1e8>)
    29f2:	5419      	strb	r1, [r3, r0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    29f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    29f8:	f0c0 80ad 	bcc.w	2b56 <write_byte(unsigned short, unsigned char)+0x16e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    29fc:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    2a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    2a04:	d306      	bcc.n	2a14 <write_byte(unsigned short, unsigned char)+0x2c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    2a06:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    2a0a:	b29b      	uxth	r3, r3
    2a0c:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    2a10:	f0c0 80a1 	bcc.w	2b56 <write_byte(unsigned short, unsigned char)+0x16e>
    if (debug_mode) return;
    2a14:	4b6f      	ldr	r3, [pc, #444]	; (2bd4 <write_byte(unsigned short, unsigned char)+0x1ec>)
    2a16:	781b      	ldrb	r3, [r3, #0]
    2a18:	b94b      	cbnz	r3, 2a2e <write_byte(unsigned short, unsigned char)+0x46>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    2a1a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2a1e:	6813      	ldr	r3, [r2, #0]
    2a20:	04df      	lsls	r7, r3, #19
    2a22:	d4fc      	bmi.n	2a1e <write_byte(unsigned short, unsigned char)+0x36>
    while (CLK0) {}      // Wait for CLK0 to become low
    2a24:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    2a28:	6813      	ldr	r3, [r2, #0]
    2a2a:	04de      	lsls	r6, r3, #19
    2a2c:	d5fc      	bpl.n	2a28 <write_byte(unsigned short, unsigned char)+0x40>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
    2a2e:	4c6a      	ldr	r4, [pc, #424]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2a30:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    2a34:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    2a36:	ea4f 2e90 	mov.w	lr, r0, lsr #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2a3a:	ea4f 6cc0 	mov.w	ip, r0, lsl #27
    2a3e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    2a42:	f00e 050c 	and.w	r5, lr, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2a46:	6832      	ldr	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    2a48:	f00e 0e10 	and.w	lr, lr, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2a4c:	4b63      	ldr	r3, [pc, #396]	; (2bdc <write_byte(unsigned short, unsigned char)+0x1f4>)
    2a4e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2a50:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2a52:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    2a56:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2a5a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2a5c:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2a5e:	432b      	orrs	r3, r5
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    2a60:	f00c 5580 	and.w	r5, ip, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    2a64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2a68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    2a6c:	432b      	orrs	r3, r5
    2a6e:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2a70:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2a72:	6825      	ldr	r5, [r4, #0]
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2a74:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2a7a:	f406 2700 	and.w	r7, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2a7e:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2a82:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2a84:	4a56      	ldr	r2, [pc, #344]	; (2be0 <write_byte(unsigned short, unsigned char)+0x1f8>)
    2a86:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2a88:	4d56      	ldr	r5, [pc, #344]	; (2be4 <write_byte(unsigned short, unsigned char)+0x1fc>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    2a8a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    2a8c:	0542      	lsls	r2, r0, #21
    2a8e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    2a92:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    2a94:	0343      	lsls	r3, r0, #13
    2a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    2a9a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2a9c:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2a9e:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2aa0:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    2aa2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    2aa6:	6023      	str	r3, [r4, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2aa8:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2aaa:	f407 0000 	and.w	r0, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2ab2:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ab4:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2ab6:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2aba:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    2abe:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ac0:	4849      	ldr	r0, [pc, #292]	; (2be8 <write_byte(unsigned short, unsigned char)+0x200>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    2ac2:	4332      	orrs	r2, r6
    2ac4:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    2ac6:	4a49      	ldr	r2, [pc, #292]	; (2bec <write_byte(unsigned short, unsigned char)+0x204>)
    2ac8:	6805      	ldr	r5, [r0, #0]
    2aca:	402a      	ands	r2, r5
		if (val) {
    2acc:	07cd      	lsls	r5, r1, #31
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    2ace:	ea43 0302 	orr.w	r3, r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    2ad2:	ea43 030c 	orr.w	r3, r3, ip
    2ad6:	6003      	str	r3, [r0, #0]
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2ad8:	f04f 0304 	mov.w	r3, #4
		if (val) {
    2adc:	d444      	bmi.n	2b68 <write_byte(unsigned short, unsigned char)+0x180>
    2ade:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
    2ae0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2ae4:	f04f 0201 	mov.w	r2, #1
    2ae8:	4b3b      	ldr	r3, [pc, #236]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2aea:	d544      	bpl.n	2b76 <write_byte(unsigned short, unsigned char)+0x18e>
    2aec:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2af2:	4b39      	ldr	r3, [pc, #228]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2af8:	d544      	bpl.n	2b84 <write_byte(unsigned short, unsigned char)+0x19c>
    2afa:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2b00:	4b35      	ldr	r3, [pc, #212]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2b06:	d544      	bpl.n	2b92 <write_byte(unsigned short, unsigned char)+0x1aa>
    2b08:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2b0e:	4b32      	ldr	r3, [pc, #200]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2b14:	d544      	bpl.n	2ba0 <write_byte(unsigned short, unsigned char)+0x1b8>
    2b16:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2b1c:	4b2e      	ldr	r3, [pc, #184]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2b22:	d544      	bpl.n	2bae <write_byte(unsigned short, unsigned char)+0x1c6>
    2b24:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2b2a:	4b2f      	ldr	r3, [pc, #188]	; (2be8 <write_byte(unsigned short, unsigned char)+0x200>)
    2b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2b30:	d544      	bpl.n	2bbc <write_byte(unsigned short, unsigned char)+0x1d4>
    2b32:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2b38:	4b2b      	ldr	r3, [pc, #172]	; (2be8 <write_byte(unsigned short, unsigned char)+0x200>)
    2b3a:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2b3e:	d044      	beq.n	2bca <write_byte(unsigned short, unsigned char)+0x1e2>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
    2b44:	4c28      	ldr	r4, [pc, #160]	; (2be8 <write_byte(unsigned short, unsigned char)+0x200>)
    2b46:	2520      	movs	r5, #32
    2b48:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        sample_at_CLK_rising_edge();
    2b4c:	f7ff fd40 	bl	25d0 <sample_at_CLK_rising_edge()>
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    2b50:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
    2b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    2b56:	4b26      	ldr	r3, [pc, #152]	; (2bf0 <write_byte(unsigned short, unsigned char)+0x208>)
    if (internal_address_check(local_address) > 0x2) {
    2b58:	781b      	ldrb	r3, [r3, #0]
    2b5a:	2b02      	cmp	r3, #2
    2b5c:	f67f af5a 	bls.w	2a14 <write_byte(unsigned short, unsigned char)+0x2c>
        last_access_internal_RAM = 1;
    2b60:	4b24      	ldr	r3, [pc, #144]	; (2bf4 <write_byte(unsigned short, unsigned char)+0x20c>)
    2b62:	2201      	movs	r2, #1
    2b64:	701a      	strb	r2, [r3, #0]
}
    2b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (val) {
    2b68:	0788      	lsls	r0, r1, #30
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
    2b6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
    2b6e:	f04f 0201 	mov.w	r2, #1
    2b72:	4b19      	ldr	r3, [pc, #100]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
		if (val) {
    2b74:	d4ba      	bmi.n	2aec <write_byte(unsigned short, unsigned char)+0x104>
    2b76:	074f      	lsls	r7, r1, #29
				CORE_PIN10_PORTCLEAR = CORE_PIN10_BITMASK;
    2b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
    2b7c:	4b16      	ldr	r3, [pc, #88]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
    2b82:	d4ba      	bmi.n	2afa <write_byte(unsigned short, unsigned char)+0x112>
    2b84:	070e      	lsls	r6, r1, #28
				CORE_PIN9_PORTCLEAR = CORE_PIN9_BITMASK;
    2b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
    2b8a:	4b13      	ldr	r3, [pc, #76]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
    2b90:	d4ba      	bmi.n	2b08 <write_byte(unsigned short, unsigned char)+0x120>
    2b92:	06cd      	lsls	r5, r1, #27
				CORE_PIN8_PORTCLEAR = CORE_PIN8_BITMASK;
    2b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
    2b98:	4b0f      	ldr	r3, [pc, #60]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2b9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
    2b9e:	d4ba      	bmi.n	2b16 <write_byte(unsigned short, unsigned char)+0x12e>
    2ba0:	068c      	lsls	r4, r1, #26
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
    2ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
    2ba6:	4b0c      	ldr	r3, [pc, #48]	; (2bd8 <write_byte(unsigned short, unsigned char)+0x1f0>)
    2ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
    2bac:	d4ba      	bmi.n	2b24 <write_byte(unsigned short, unsigned char)+0x13c>
    2bae:	0648      	lsls	r0, r1, #25
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
    2bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
    2bb4:	4b0c      	ldr	r3, [pc, #48]	; (2be8 <write_byte(unsigned short, unsigned char)+0x200>)
    2bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
    2bba:	d4ba      	bmi.n	2b32 <write_byte(unsigned short, unsigned char)+0x14a>
    2bbc:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
    2bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
    2bc2:	4b09      	ldr	r3, [pc, #36]	; (2be8 <write_byte(unsigned short, unsigned char)+0x200>)
    2bc4:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
    2bc8:	d1ba      	bne.n	2b40 <write_byte(unsigned short, unsigned char)+0x158>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
    2bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2bce:	e7b9      	b.n	2b44 <write_byte(unsigned short, unsigned char)+0x15c>
    2bd0:	200053f0 	.word	0x200053f0
    2bd4:	20004966 	.word	0x20004966
    2bd8:	42004000 	.word	0x42004000
    2bdc:	6dfffff3 	.word	0x6dfffff3
    2be0:	cff3efff 	.word	0xcff3efff
    2be4:	42008000 	.word	0x42008000
    2be8:	4200c000 	.word	0x4200c000
    2bec:	7fffff6f 	.word	0x7fffff6f
    2bf0:	20018898 	.word	0x20018898
    2bf4:	200188a1 	.word	0x200188a1

00002bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>:
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2bf8:	4a08      	ldr	r2, [pc, #32]	; (2c1c <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x24>)
    2bfa:	0601      	lsls	r1, r0, #24
    2bfc:	7813      	ldrb	r3, [r2, #0]
    2bfe:	d407      	bmi.n	2c10 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x18>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c04:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2c06:	b928      	cbnz	r0, 2c14 <Calc_Flags_NEGATIVE_ZERO(unsigned char)+0x1c>
    2c08:	f043 0302 	orr.w	r3, r3, #2
    return;
    2c0c:	7013      	strb	r3, [r2, #0]
}
    2c0e:	4770      	bx	lr
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2c14:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2c18:	7013      	strb	r3, [r2, #0]
}
    2c1a:	4770      	bx	lr
    2c1c:	20004968 	.word	0x20004968

00002c20 <Fetch_Immediate(unsigned char)>:
uint8_t Fetch_Immediate(uint8_t offset) {
    2c20:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2c22:	4b04      	ldr	r3, [pc, #16]	; (2c34 <Fetch_Immediate(unsigned char)+0x14>)
    2c24:	2100      	movs	r1, #0
    2c26:	881b      	ldrh	r3, [r3, #0]
    2c28:	4418      	add	r0, r3
    2c2a:	b280      	uxth	r0, r0
    2c2c:	f7ff fd20 	bl	2670 <read_byte(unsigned short, bool)>
}
    2c30:	bd08      	pop	{r3, pc}
    2c32:	bf00      	nop
    2c34:	2001888c 	.word	0x2001888c

00002c38 <Fetch_ZeroPage()>:
uint8_t Fetch_ZeroPage() {
    2c38:	b508      	push	{r3, lr}
    return read_byte(register_pc+offset, false);
    2c3a:	4b07      	ldr	r3, [pc, #28]	; (2c58 <Fetch_ZeroPage()+0x20>)
    2c3c:	2100      	movs	r1, #0
    2c3e:	8818      	ldrh	r0, [r3, #0]
    2c40:	3001      	adds	r0, #1
    2c42:	b280      	uxth	r0, r0
    2c44:	f7ff fd14 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    2c48:	4b04      	ldr	r3, [pc, #16]	; (2c5c <Fetch_ZeroPage()+0x24>)
    2c4a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2c4c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2c4e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2c50:	f7ff fd0e 	bl	2670 <read_byte(unsigned short, bool)>
}
    2c54:	bd08      	pop	{r3, pc}
    2c56:	bf00      	nop
    2c58:	2001888c 	.word	0x2001888c
    2c5c:	2001888a 	.word	0x2001888a

00002c60 <Fetch_ZeroPage_X()>:
uint8_t Fetch_ZeroPage_X() {
    2c60:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2c62:	4c0c      	ldr	r4, [pc, #48]	; (2c94 <Fetch_ZeroPage_X()+0x34>)
    2c64:	2100      	movs	r1, #0
    2c66:	8820      	ldrh	r0, [r4, #0]
    2c68:	3001      	adds	r0, #1
    2c6a:	b280      	uxth	r0, r0
    2c6c:	f7ff fd00 	bl	2670 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2c70:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2c72:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2c74:	2100      	movs	r1, #0
    2c76:	1c58      	adds	r0, r3, #1
    2c78:	b280      	uxth	r0, r0
    2c7a:	f7ff fcf9 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_x));
    2c7e:	4a06      	ldr	r2, [pc, #24]	; (2c98 <Fetch_ZeroPage_X()+0x38>)
    2c80:	4b06      	ldr	r3, [pc, #24]	; (2c9c <Fetch_ZeroPage_X()+0x3c>)
    return read_byte(effective_address, false);
    2c82:	2100      	movs	r1, #0
    2c84:	7812      	ldrb	r2, [r2, #0]
    2c86:	18a0      	adds	r0, r4, r2
    2c88:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_x));
    2c8a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2c8c:	f7ff fcf0 	bl	2670 <read_byte(unsigned short, bool)>
}
    2c90:	bd10      	pop	{r4, pc}
    2c92:	bf00      	nop
    2c94:	2001888c 	.word	0x2001888c
    2c98:	200188a4 	.word	0x200188a4
    2c9c:	2001888a 	.word	0x2001888a

00002ca0 <Fetch_ZeroPage_Y()>:
uint8_t Fetch_ZeroPage_Y() {
    2ca0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2ca2:	4c0c      	ldr	r4, [pc, #48]	; (2cd4 <Fetch_ZeroPage_Y()+0x34>)
    2ca4:	2100      	movs	r1, #0
    2ca6:	8820      	ldrh	r0, [r4, #0]
    2ca8:	3001      	adds	r0, #1
    2caa:	b280      	uxth	r0, r0
    2cac:	f7ff fce0 	bl	2670 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    2cb0:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc+offset, false);
    2cb2:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    2cb4:	2100      	movs	r1, #0
    2cb6:	1c58      	adds	r0, r3, #1
    2cb8:	b280      	uxth	r0, r0
    2cba:	f7ff fcd9 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    2cbe:	4a06      	ldr	r2, [pc, #24]	; (2cd8 <Fetch_ZeroPage_Y()+0x38>)
    2cc0:	4b06      	ldr	r3, [pc, #24]	; (2cdc <Fetch_ZeroPage_Y()+0x3c>)
    return read_byte(effective_address, false);
    2cc2:	2100      	movs	r1, #0
    2cc4:	7812      	ldrb	r2, [r2, #0]
    2cc6:	18a0      	adds	r0, r4, r2
    2cc8:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    2cca:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2ccc:	f7ff fcd0 	bl	2670 <read_byte(unsigned short, bool)>
}
    2cd0:	bd10      	pop	{r4, pc}
    2cd2:	bf00      	nop
    2cd4:	2001888c 	.word	0x2001888c
    2cd8:	200188a5 	.word	0x200188a5
    2cdc:	2001888a 	.word	0x2001888a

00002ce0 <Fetch_Absolute()>:
uint8_t Fetch_Absolute() {
    2ce0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    2ce2:	4c0b      	ldr	r4, [pc, #44]	; (2d10 <Fetch_Absolute()+0x30>)
    2ce4:	2100      	movs	r1, #0
    2ce6:	8820      	ldrh	r0, [r4, #0]
    2ce8:	3001      	adds	r0, #1
    2cea:	b280      	uxth	r0, r0
    2cec:	f7ff fcc0 	bl	2670 <read_byte(unsigned short, bool)>
    2cf0:	8823      	ldrh	r3, [r4, #0]
    2cf2:	4604      	mov	r4, r0
    2cf4:	2100      	movs	r1, #0
    2cf6:	1c98      	adds	r0, r3, #2
    2cf8:	b280      	uxth	r0, r0
    2cfa:	f7ff fcb9 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    2cfe:	4b05      	ldr	r3, [pc, #20]	; (2d14 <Fetch_Absolute()+0x34>)
    2d00:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    return read_byte(effective_address, false);
    2d04:	2100      	movs	r1, #0
    effective_address = adl + adh;
    2d06:	b280      	uxth	r0, r0
    2d08:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2d0a:	f7ff fcb1 	bl	2670 <read_byte(unsigned short, bool)>
}
    2d0e:	bd10      	pop	{r4, pc}
    2d10:	2001888c 	.word	0x2001888c
    2d14:	2001888a 	.word	0x2001888a

00002d18 <Fetch_Absolute_X(unsigned char)>:
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    2d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2d1a:	4c14      	ldr	r4, [pc, #80]	; (2d6c <Fetch_Absolute_X(unsigned char)+0x54>)
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
    2d1c:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2d1e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    2d20:	4d13      	ldr	r5, [pc, #76]	; (2d70 <Fetch_Absolute_X(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    2d22:	8823      	ldrh	r3, [r4, #0]
    2d24:	1c58      	adds	r0, r3, #1
    2d26:	b280      	uxth	r0, r0
    2d28:	f7ff fca2 	bl	2670 <read_byte(unsigned short, bool)>
    2d2c:	8823      	ldrh	r3, [r4, #0]
    2d2e:	4607      	mov	r7, r0
    2d30:	2100      	movs	r1, #0
    2d32:	1c98      	adds	r0, r3, #2
    2d34:	b280      	uxth	r0, r0
    2d36:	f7ff fc9b 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_x;
    2d3a:	4b0e      	ldr	r3, [pc, #56]	; (2d74 <Fetch_Absolute_X(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    2d3c:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2d3e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
    2d40:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2d42:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_x;
    2d44:	443b      	add	r3, r7
    2d46:	4423      	add	r3, r4
    2d48:	b298      	uxth	r0, r3
    2d4a:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    2d4c:	f7ff fc90 	bl	2670 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2d50:	2e01      	cmp	r6, #1
    2d52:	d000      	beq.n	2d56 <Fetch_Absolute_X(unsigned char)+0x3e>
}
    2d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2d56:	882b      	ldrh	r3, [r5, #0]
    2d58:	405c      	eors	r4, r3
    2d5a:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2d5e:	d0f9      	beq.n	2d54 <Fetch_Absolute_X(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    2d60:	2100      	movs	r1, #0
    2d62:	4618      	mov	r0, r3
    2d64:	f7ff fc84 	bl	2670 <read_byte(unsigned short, bool)>
}
    2d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d6a:	bf00      	nop
    2d6c:	2001888c 	.word	0x2001888c
    2d70:	2001888a 	.word	0x2001888a
    2d74:	200188a4 	.word	0x200188a4

00002d78 <Fetch_Absolute_Y(unsigned char)>:
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    2d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2d7a:	4c14      	ldr	r4, [pc, #80]	; (2dcc <Fetch_Absolute_Y(unsigned char)+0x54>)
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
    2d7c:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2d7e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2d80:	4d13      	ldr	r5, [pc, #76]	; (2dd0 <Fetch_Absolute_Y(unsigned char)+0x58>)
    return read_byte(register_pc+offset, false);
    2d82:	8823      	ldrh	r3, [r4, #0]
    2d84:	1c58      	adds	r0, r3, #1
    2d86:	b280      	uxth	r0, r0
    2d88:	f7ff fc72 	bl	2670 <read_byte(unsigned short, bool)>
    2d8c:	8823      	ldrh	r3, [r4, #0]
    2d8e:	4607      	mov	r7, r0
    2d90:	2100      	movs	r1, #0
    2d92:	1c98      	adds	r0, r3, #2
    2d94:	b280      	uxth	r0, r0
    2d96:	f7ff fc6b 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2d9a:	4b0e      	ldr	r3, [pc, #56]	; (2dd4 <Fetch_Absolute_Y(unsigned char)+0x5c>)
    bah = Fetch_Immediate(2) << 8;
    2d9c:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2d9e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2da0:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2da2:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    2da4:	443b      	add	r3, r7
    2da6:	4423      	add	r3, r4
    2da8:	b298      	uxth	r0, r3
    2daa:	8028      	strh	r0, [r5, #0]
    local_data = read_byte(effective_address, false);
    2dac:	f7ff fc60 	bl	2670 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2db0:	2e01      	cmp	r6, #1
    2db2:	d000      	beq.n	2db6 <Fetch_Absolute_Y(unsigned char)+0x3e>
}
    2db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2db6:	882b      	ldrh	r3, [r5, #0]
    2db8:	405c      	eors	r4, r3
    2dba:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2dbe:	d0f9      	beq.n	2db4 <Fetch_Absolute_Y(unsigned char)+0x3c>
        local_data = read_byte(effective_address, false);
    2dc0:	2100      	movs	r1, #0
    2dc2:	4618      	mov	r0, r3
    2dc4:	f7ff fc54 	bl	2670 <read_byte(unsigned short, bool)>
}
    2dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dca:	bf00      	nop
    2dcc:	2001888c 	.word	0x2001888c
    2dd0:	2001888a 	.word	0x2001888a
    2dd4:	200188a5 	.word	0x200188a5

00002dd8 <Fetch_Indexed_Indirect_X()>:
uint8_t Fetch_Indexed_Indirect_X() {
    2dd8:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2dda:	4b11      	ldr	r3, [pc, #68]	; (2e20 <Fetch_Indexed_Indirect_X()+0x48>)
    2ddc:	2100      	movs	r1, #0
    2dde:	8818      	ldrh	r0, [r3, #0]
    2de0:	3001      	adds	r0, #1
    2de2:	b280      	uxth	r0, r0
    2de4:	f7ff fc44 	bl	2670 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate(1) + register_x;
    2de8:	4b0e      	ldr	r3, [pc, #56]	; (2e24 <Fetch_Indexed_Indirect_X()+0x4c>)
    read_byte(bal, false);
    2dea:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1) + register_x;
    2dec:	781c      	ldrb	r4, [r3, #0]
    2dee:	4404      	add	r4, r0
    2df0:	b2a4      	uxth	r4, r4
    read_byte(bal, false);
    2df2:	4620      	mov	r0, r4
    2df4:	f7ff fc3c 	bl	2670 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & bal, false);
    2df8:	2100      	movs	r1, #0
    2dfa:	b2e0      	uxtb	r0, r4
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    2dfc:	3401      	adds	r4, #1
    adl = read_byte(0xFF & bal, false);
    2dfe:	f7ff fc37 	bl	2670 <read_byte(unsigned short, bool)>
    2e02:	4605      	mov	r5, r0
    adh = read_byte(0xFF & (bal + 1), false) << 8;
    2e04:	2100      	movs	r1, #0
    2e06:	b2e0      	uxtb	r0, r4
    2e08:	f7ff fc32 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    2e0c:	4b06      	ldr	r3, [pc, #24]	; (2e28 <Fetch_Indexed_Indirect_X()+0x50>)
    2e0e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
    local_data = read_byte(effective_address, false);
    2e12:	2100      	movs	r1, #0
    effective_address = adh + adl;
    2e14:	b280      	uxth	r0, r0
    2e16:	8018      	strh	r0, [r3, #0]
    local_data = read_byte(effective_address, false);
    2e18:	f7ff fc2a 	bl	2670 <read_byte(unsigned short, bool)>
}
    2e1c:	bd38      	pop	{r3, r4, r5, pc}
    2e1e:	bf00      	nop
    2e20:	2001888c 	.word	0x2001888c
    2e24:	200188a4 	.word	0x200188a4
    2e28:	2001888a 	.word	0x2001888a

00002e2c <Fetch_Indexed_Indirect_Y(unsigned char)>:
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    2e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2e2e:	4b16      	ldr	r3, [pc, #88]	; (2e88 <Fetch_Indexed_Indirect_Y(unsigned char)+0x5c>)
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
    2e30:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2e32:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2e34:	4e15      	ldr	r6, [pc, #84]	; (2e8c <Fetch_Indexed_Indirect_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    2e36:	881b      	ldrh	r3, [r3, #0]
    2e38:	1c58      	adds	r0, r3, #1
    2e3a:	b280      	uxth	r0, r0
    2e3c:	f7ff fc18 	bl	2670 <read_byte(unsigned short, bool)>
    bal = read_byte(0xFF & ial, false);
    2e40:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    2e42:	b284      	uxth	r4, r0
    bal = read_byte(0xFF & ial, false);
    2e44:	4620      	mov	r0, r4
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2e46:	3401      	adds	r4, #1
    bal = read_byte(0xFF & ial, false);
    2e48:	f7ff fc12 	bl	2670 <read_byte(unsigned short, bool)>
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2e4c:	2100      	movs	r1, #0
    bal = read_byte(0xFF & ial, false);
    2e4e:	4607      	mov	r7, r0
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2e50:	b2e0      	uxtb	r0, r4
    2e52:	f7ff fc0d 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    2e56:	4b0e      	ldr	r3, [pc, #56]	; (2e90 <Fetch_Indexed_Indirect_Y(unsigned char)+0x64>)
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2e58:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
    2e5a:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    2e5c:	781b      	ldrb	r3, [r3, #0]
    bah = read_byte(0xFF & (ial + 1), false) << 8;
    2e5e:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
    2e60:	443b      	add	r3, r7
    2e62:	4423      	add	r3, r4
    2e64:	b298      	uxth	r0, r3
    2e66:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
    2e68:	f7ff fc02 	bl	2670 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2e6c:	2d01      	cmp	r5, #1
    2e6e:	d000      	beq.n	2e72 <Fetch_Indexed_Indirect_Y(unsigned char)+0x46>
}
    2e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
    2e72:	8833      	ldrh	r3, [r6, #0]
    2e74:	405c      	eors	r4, r3
    2e76:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2e7a:	d0f9      	beq.n	2e70 <Fetch_Indexed_Indirect_Y(unsigned char)+0x44>
        local_data = read_byte(effective_address, false);
    2e7c:	2100      	movs	r1, #0
    2e7e:	4618      	mov	r0, r3
    2e80:	f7ff fbf6 	bl	2670 <read_byte(unsigned short, bool)>
}
    2e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e86:	bf00      	nop
    2e88:	2001888c 	.word	0x2001888c
    2e8c:	2001888a 	.word	0x2001888a
    2e90:	200188a5 	.word	0x200188a5

00002e94 <Write_Absolute(unsigned char)>:
void Write_Absolute(uint8_t local_data) {
    2e94:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    2e96:	4e0c      	ldr	r6, [pc, #48]	; (2ec8 <Write_Absolute(unsigned char)+0x34>)
void Write_Absolute(uint8_t local_data) {
    2e98:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    2e9a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2e9c:	4c0b      	ldr	r4, [pc, #44]	; (2ecc <Write_Absolute(unsigned char)+0x38>)
    return read_byte(register_pc+offset, false);
    2e9e:	8833      	ldrh	r3, [r6, #0]
    2ea0:	1c58      	adds	r0, r3, #1
    2ea2:	b280      	uxth	r0, r0
    2ea4:	f7ff fbe4 	bl	2670 <read_byte(unsigned short, bool)>
    2ea8:	8833      	ldrh	r3, [r6, #0]
    effective_address = Fetch_Immediate(1);
    2eaa:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc+offset, false);
    2eac:	2100      	movs	r1, #0
    2eae:	1c98      	adds	r0, r3, #2
    2eb0:	b280      	uxth	r0, r0
    2eb2:	f7ff fbdd 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    2eb6:	8823      	ldrh	r3, [r4, #0]
    write_byte(effective_address, local_data);
    2eb8:	4629      	mov	r1, r5
    effective_address = (Fetch_Immediate(2) << 8) + effective_address;
    2eba:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    2ebe:	b280      	uxth	r0, r0
    2ec0:	8020      	strh	r0, [r4, #0]
    write_byte(effective_address, local_data);
    2ec2:	f7ff fd91 	bl	29e8 <write_byte(unsigned short, unsigned char)>
}
    2ec6:	bd70      	pop	{r4, r5, r6, pc}
    2ec8:	2001888c 	.word	0x2001888c
    2ecc:	2001888a 	.word	0x2001888a

00002ed0 <Write_ZeroPage_X(unsigned char)>:
void Write_ZeroPage_X(uint8_t local_data) {
    2ed0:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2ed2:	4b0b      	ldr	r3, [pc, #44]	; (2f00 <Write_ZeroPage_X(unsigned char)+0x30>)
void Write_ZeroPage_X(uint8_t local_data) {
    2ed4:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2ed6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2ed8:	4d0a      	ldr	r5, [pc, #40]	; (2f04 <Write_ZeroPage_X(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    2eda:	881b      	ldrh	r3, [r3, #0]
    2edc:	1c58      	adds	r0, r3, #1
    2ede:	b280      	uxth	r0, r0
    2ee0:	f7ff fbc6 	bl	2670 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    2ee4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2ee6:	b280      	uxth	r0, r0
    2ee8:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2eea:	f7ff fbc1 	bl	2670 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_x)), local_data);
    2eee:	4a06      	ldr	r2, [pc, #24]	; (2f08 <Write_ZeroPage_X(unsigned char)+0x38>)
    2ef0:	4621      	mov	r1, r4
    2ef2:	882b      	ldrh	r3, [r5, #0]
    2ef4:	7810      	ldrb	r0, [r2, #0]
    2ef6:	4418      	add	r0, r3
    2ef8:	b2c0      	uxtb	r0, r0
    2efa:	f7ff fd75 	bl	29e8 <write_byte(unsigned short, unsigned char)>
}
    2efe:	bd38      	pop	{r3, r4, r5, pc}
    2f00:	2001888c 	.word	0x2001888c
    2f04:	2001888a 	.word	0x2001888a
    2f08:	200188a4 	.word	0x200188a4

00002f0c <Write_ZeroPage_Y(unsigned char)>:
void Write_ZeroPage_Y(uint8_t local_data) {
    2f0c:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    2f0e:	4b0b      	ldr	r3, [pc, #44]	; (2f3c <Write_ZeroPage_Y(unsigned char)+0x30>)
void Write_ZeroPage_Y(uint8_t local_data) {
    2f10:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2f12:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f14:	4d0a      	ldr	r5, [pc, #40]	; (2f40 <Write_ZeroPage_Y(unsigned char)+0x34>)
    return read_byte(register_pc+offset, false);
    2f16:	881b      	ldrh	r3, [r3, #0]
    2f18:	1c58      	adds	r0, r3, #1
    2f1a:	b280      	uxth	r0, r0
    2f1c:	f7ff fba8 	bl	2670 <read_byte(unsigned short, bool)>
    read_byte(effective_address, false);
    2f20:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    2f22:	b280      	uxth	r0, r0
    2f24:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2f26:	f7ff fba3 	bl	2670 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
    2f2a:	4a06      	ldr	r2, [pc, #24]	; (2f44 <Write_ZeroPage_Y(unsigned char)+0x38>)
    2f2c:	4621      	mov	r1, r4
    2f2e:	882b      	ldrh	r3, [r5, #0]
    2f30:	7810      	ldrb	r0, [r2, #0]
    2f32:	4418      	add	r0, r3
    2f34:	b2c0      	uxtb	r0, r0
    2f36:	f7ff fd57 	bl	29e8 <write_byte(unsigned short, unsigned char)>
}
    2f3a:	bd38      	pop	{r3, r4, r5, pc}
    2f3c:	2001888c 	.word	0x2001888c
    2f40:	2001888a 	.word	0x2001888a
    2f44:	200188a5 	.word	0x200188a5

00002f48 <Write_Absolute_X(unsigned char)>:
void Write_Absolute_X(uint8_t local_data) {
    2f48:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    2f4a:	4d0f      	ldr	r5, [pc, #60]	; (2f88 <Write_Absolute_X(unsigned char)+0x40>)
void Write_Absolute_X(uint8_t local_data) {
    2f4c:	4604      	mov	r4, r0
    return read_byte(register_pc+offset, false);
    2f4e:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    2f50:	4e0e      	ldr	r6, [pc, #56]	; (2f8c <Write_Absolute_X(unsigned char)+0x44>)
    return read_byte(register_pc+offset, false);
    2f52:	882b      	ldrh	r3, [r5, #0]
    2f54:	1c58      	adds	r0, r3, #1
    2f56:	b280      	uxth	r0, r0
    2f58:	f7ff fb8a 	bl	2670 <read_byte(unsigned short, bool)>
    2f5c:	882b      	ldrh	r3, [r5, #0]
    2f5e:	4605      	mov	r5, r0
    2f60:	2100      	movs	r1, #0
    2f62:	1c98      	adds	r0, r3, #2
    2f64:	b280      	uxth	r0, r0
    2f66:	f7ff fb83 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_x;
    2f6a:	4b09      	ldr	r3, [pc, #36]	; (2f90 <Write_Absolute_X(unsigned char)+0x48>)
    read_byte(effective_address, false);
    2f6c:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
    2f6e:	781b      	ldrb	r3, [r3, #0]
    2f70:	442b      	add	r3, r5
    2f72:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    2f76:	b298      	uxth	r0, r3
    2f78:	8030      	strh	r0, [r6, #0]
    read_byte(effective_address, false);
    2f7a:	f7ff fb79 	bl	2670 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2f7e:	4621      	mov	r1, r4
    2f80:	8830      	ldrh	r0, [r6, #0]
    2f82:	f7ff fd31 	bl	29e8 <write_byte(unsigned short, unsigned char)>
}
    2f86:	bd70      	pop	{r4, r5, r6, pc}
    2f88:	2001888c 	.word	0x2001888c
    2f8c:	2001888a 	.word	0x2001888a
    2f90:	200188a4 	.word	0x200188a4

00002f94 <Write_Absolute_Y(unsigned char)>:
void Write_Absolute_Y(uint8_t local_data) {
    2f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2f96:	4c16      	ldr	r4, [pc, #88]	; (2ff0 <Write_Absolute_Y(unsigned char)+0x5c>)
void Write_Absolute_Y(uint8_t local_data) {
    2f98:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    2f9a:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    2f9c:	4d15      	ldr	r5, [pc, #84]	; (2ff4 <Write_Absolute_Y(unsigned char)+0x60>)
    return read_byte(register_pc+offset, false);
    2f9e:	8823      	ldrh	r3, [r4, #0]
    2fa0:	1c58      	adds	r0, r3, #1
    2fa2:	b280      	uxth	r0, r0
    2fa4:	f7ff fb64 	bl	2670 <read_byte(unsigned short, bool)>
    2fa8:	8823      	ldrh	r3, [r4, #0]
    2faa:	4607      	mov	r7, r0
    2fac:	2100      	movs	r1, #0
    2fae:	1c98      	adds	r0, r3, #2
    2fb0:	b280      	uxth	r0, r0
    2fb2:	f7ff fb5d 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_y;
    2fb6:	4b10      	ldr	r3, [pc, #64]	; (2ff8 <Write_Absolute_Y(unsigned char)+0x64>)
    bah = Fetch_Immediate(2) << 8;
    2fb8:	0204      	lsls	r4, r0, #8
    read_byte(effective_address, false);
    2fba:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
    2fbc:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate(2) << 8;
    2fbe:	b2a4      	uxth	r4, r4
    effective_address = bal + bah + register_y;
    2fc0:	443b      	add	r3, r7
    2fc2:	4423      	add	r3, r4
    2fc4:	b298      	uxth	r0, r3
    2fc6:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    2fc8:	f7ff fb52 	bl	2670 <read_byte(unsigned short, bool)>
    if ((0xFF00 & effective_address) != (0xFF00 & bah)) {
    2fcc:	8828      	ldrh	r0, [r5, #0]
    2fce:	4044      	eors	r4, r0
    2fd0:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
    2fd4:	d103      	bne.n	2fde <Write_Absolute_Y(unsigned char)+0x4a>
    write_byte(effective_address, local_data);
    2fd6:	4631      	mov	r1, r6
    2fd8:	f7ff fd06 	bl	29e8 <write_byte(unsigned short, unsigned char)>
}
    2fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        read_byte(effective_address, false);
    2fde:	2100      	movs	r1, #0
    2fe0:	f7ff fb46 	bl	2670 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    2fe4:	8828      	ldrh	r0, [r5, #0]
    2fe6:	4631      	mov	r1, r6
    2fe8:	f7ff fcfe 	bl	29e8 <write_byte(unsigned short, unsigned char)>
}
    2fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2fee:	bf00      	nop
    2ff0:	2001888c 	.word	0x2001888c
    2ff4:	2001888a 	.word	0x2001888a
    2ff8:	200188a5 	.word	0x200188a5

00002ffc <Write_Indexed_Indirect_X(unsigned char)>:
void Write_Indexed_Indirect_X(uint8_t local_data) {
    2ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    2ffe:	4b13      	ldr	r3, [pc, #76]	; (304c <Write_Indexed_Indirect_X(unsigned char)+0x50>)
void Write_Indexed_Indirect_X(uint8_t local_data) {
    3000:	4606      	mov	r6, r0
    return read_byte(register_pc+offset, false);
    3002:	2100      	movs	r1, #0
    adl = read_byte(0xFF & (bal + register_x), false);
    3004:	4f12      	ldr	r7, [pc, #72]	; (3050 <Write_Indexed_Indirect_X(unsigned char)+0x54>)
    return read_byte(register_pc+offset, false);
    3006:	881b      	ldrh	r3, [r3, #0]
    3008:	1c58      	adds	r0, r3, #1
    300a:	b280      	uxth	r0, r0
    300c:	f7ff fb30 	bl	2670 <read_byte(unsigned short, bool)>
    read_byte(bal, false);
    3010:	2100      	movs	r1, #0
    bal = Fetch_Immediate(1);
    3012:	b285      	uxth	r5, r0
    return read_byte(register_pc+offset, false);
    3014:	4604      	mov	r4, r0
    read_byte(bal, false);
    3016:	4628      	mov	r0, r5
    3018:	f7ff fb2a 	bl	2670 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & (bal + register_x), false);
    301c:	783b      	ldrb	r3, [r7, #0]
    301e:	2100      	movs	r1, #0
    3020:	441c      	add	r4, r3
    3022:	b2e0      	uxtb	r0, r4
    3024:	f7ff fb24 	bl	2670 <read_byte(unsigned short, bool)>
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    3028:	783b      	ldrb	r3, [r7, #0]
    adl = read_byte(0xFF & (bal + register_x), false);
    302a:	4604      	mov	r4, r0
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
    302c:	2100      	movs	r1, #0
    302e:	3301      	adds	r3, #1
    3030:	441d      	add	r5, r3
    3032:	b2e8      	uxtb	r0, r5
    3034:	f7ff fb1c 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    3038:	4b06      	ldr	r3, [pc, #24]	; (3054 <Write_Indexed_Indirect_X(unsigned char)+0x58>)
    303a:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    write_byte(effective_address, local_data);
    303e:	4631      	mov	r1, r6
    effective_address = adh + adl;
    3040:	b280      	uxth	r0, r0
    3042:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    3044:	f7ff fcd0 	bl	29e8 <write_byte(unsigned short, unsigned char)>
}
    3048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    304a:	bf00      	nop
    304c:	2001888c 	.word	0x2001888c
    3050:	200188a4 	.word	0x200188a4
    3054:	2001888a 	.word	0x2001888a

00003058 <Write_Indexed_Indirect_Y(unsigned char)>:
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    3058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    305a:	4b11      	ldr	r3, [pc, #68]	; (30a0 <Write_Indexed_Indirect_Y(unsigned char)+0x48>)
void Write_Indexed_Indirect_Y(uint8_t local_data) {
    305c:	4605      	mov	r5, r0
    return read_byte(register_pc+offset, false);
    305e:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3060:	4f10      	ldr	r7, [pc, #64]	; (30a4 <Write_Indexed_Indirect_Y(unsigned char)+0x4c>)
    return read_byte(register_pc+offset, false);
    3062:	881b      	ldrh	r3, [r3, #0]
    3064:	1c58      	adds	r0, r3, #1
    3066:	b280      	uxth	r0, r0
    3068:	f7ff fb02 	bl	2670 <read_byte(unsigned short, bool)>
    bal = read_byte(ial, false);
    306c:	2100      	movs	r1, #0
    ial = Fetch_Immediate(1);
    306e:	b284      	uxth	r4, r0
    bal = read_byte(ial, false);
    3070:	4620      	mov	r0, r4
    bah = read_byte(ial + 1, false) << 8;
    3072:	3401      	adds	r4, #1
    bal = read_byte(ial, false);
    3074:	f7ff fafc 	bl	2670 <read_byte(unsigned short, bool)>
    bah = read_byte(ial + 1, false) << 8;
    3078:	2100      	movs	r1, #0
    bal = read_byte(ial, false);
    307a:	4606      	mov	r6, r0
    bah = read_byte(ial + 1, false) << 8;
    307c:	b2a0      	uxth	r0, r4
    307e:	f7ff faf7 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
    3082:	4b09      	ldr	r3, [pc, #36]	; (30a8 <Write_Indexed_Indirect_Y(unsigned char)+0x50>)
    read_byte(effective_address, false);
    3084:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
    3086:	781b      	ldrb	r3, [r3, #0]
    3088:	4433      	add	r3, r6
    308a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    308e:	b298      	uxth	r0, r3
    3090:	8038      	strh	r0, [r7, #0]
    read_byte(effective_address, false);
    3092:	f7ff faed 	bl	2670 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
    3096:	4629      	mov	r1, r5
    3098:	8838      	ldrh	r0, [r7, #0]
    309a:	f7ff fca5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
}
    309e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30a0:	2001888c 	.word	0x2001888c
    30a4:	2001888a 	.word	0x2001888a
    30a8:	200188a5 	.word	0x200188a5

000030ac <reset_sequence()>:
void reset_sequence() {
    30ac:	b570      	push	{r4, r5, r6, lr}
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    30ae:	4b65      	ldr	r3, [pc, #404]	; (3244 <reset_sequence()+0x198>)
    30b0:	2220      	movs	r2, #32
    temp1 = read_byte(register_pc, false); // Address ??
    30b2:	4d65      	ldr	r5, [pc, #404]	; (3248 <reset_sequence()+0x19c>)
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    30b4:	2002      	movs	r0, #2
    30b6:	4965      	ldr	r1, [pc, #404]	; (324c <reset_sequence()+0x1a0>)
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    30b8:	4c65      	ldr	r4, [pc, #404]	; (3250 <reset_sequence()+0x1a4>)
    30ba:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    temp1 = read_byte(register_pc, false); // Address ??
    30be:	2100      	movs	r1, #0
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
    30c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    30c4:	8828      	ldrh	r0, [r5, #0]
    30c6:	f7ff fad3 	bl	2670 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_pc + 1, false); // Address ?? + 1
    30ca:	8828      	ldrh	r0, [r5, #0]
    30cc:	2100      	movs	r1, #0
    30ce:	3001      	adds	r0, #1
    30d0:	b280      	uxth	r0, r0
    30d2:	f7ff facd 	bl	2670 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed, false); // Address SP
    30d6:	7820      	ldrb	r0, [r4, #0]
    30d8:	2100      	movs	r1, #0
    30da:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    30de:	f7ff fac7 	bl	2670 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 1, false); // Address SP - 1
    30e2:	7820      	ldrb	r0, [r4, #0]
    30e4:	2100      	movs	r1, #0
    30e6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    30ea:	3801      	subs	r0, #1
    30ec:	b280      	uxth	r0, r0
    30ee:	f7ff fabf 	bl	2670 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 2, false); // Address SP - 2
    30f2:	7820      	ldrb	r0, [r4, #0]
    30f4:	2100      	movs	r1, #0
    30f6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    30fa:	3802      	subs	r0, #2
    30fc:	b280      	uxth	r0, r0
    30fe:	f7ff fab7 	bl	2670 <read_byte(unsigned short, bool)>
    temp1 = read_byte(0xFFFC, false); // Fetch Vector PCL
    3102:	2100      	movs	r1, #0
    3104:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    3108:	f7ff fab2 	bl	2670 <read_byte(unsigned short, bool)>
    310c:	4604      	mov	r4, r0
    temp2 = read_byte(0xFFFD, false); // Fetch Vector PCH
    310e:	2100      	movs	r1, #0
    3110:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    3114:	f7ff faac 	bl	2670 <read_byte(unsigned short, bool)>
    register_flags = 0x34; // Set the I and B flags
    3118:	4a4e      	ldr	r2, [pc, #312]	; (3254 <reset_sequence()+0x1a8>)
    register_pc = (temp2 << 8) | temp1;
    311a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    register_flags = 0x34; // Set the I and B flags
    311e:	2134      	movs	r1, #52	; 0x34
    current_address = local_address;
    3120:	4b4d      	ldr	r3, [pc, #308]	; (3258 <reset_sequence()+0x1ac>)
    register_pc = (temp2 << 8) | temp1;
    3122:	b280      	uxth	r0, r0
    register_flags = 0x34; // Set the I and B flags
    3124:	7011      	strb	r1, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3126:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    312a:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    312c:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    312e:	d37b      	bcc.n	3228 <reset_sequence()+0x17c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3130:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3138:	d309      	bcc.n	314e <reset_sequence()+0xa2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    313a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    313e:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3142:	d371      	bcc.n	3228 <reset_sequence()+0x17c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3144:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3148:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    314c:	d36c      	bcc.n	3228 <reset_sequence()+0x17c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    314e:	4b43      	ldr	r3, [pc, #268]	; (325c <reset_sequence()+0x1b0>)
        last_access_internal_RAM = 0;
    3150:	2100      	movs	r1, #0
    3152:	4a43      	ldr	r2, [pc, #268]	; (3260 <reset_sequence()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3154:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3156:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3158:	2b01      	cmp	r3, #1
    315a:	d005      	beq.n	3168 <reset_sequence()+0xbc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    315c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3160:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3168:	4b3e      	ldr	r3, [pc, #248]	; (3264 <reset_sequence()+0x1b8>)
    316a:	781b      	ldrb	r3, [r3, #0]
    316c:	b94b      	cbnz	r3, 3182 <reset_sequence()+0xd6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    316e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3172:	6813      	ldr	r3, [r2, #0]
    3174:	04d9      	lsls	r1, r3, #19
    3176:	d4fc      	bmi.n	3172 <reset_sequence()+0xc6>
    while (CLK0) {}      // Wait for CLK0 to become low
    3178:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    317c:	6813      	ldr	r3, [r2, #0]
    317e:	04db      	lsls	r3, r3, #19
    3180:	d5fc      	bpl.n	317c <reset_sequence()+0xd0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3182:	4e32      	ldr	r6, [pc, #200]	; (324c <reset_sequence()+0x1a0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3184:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3188:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    318a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    318c:	06c1      	lsls	r1, r0, #27
    318e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3192:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3196:	682a      	ldr	r2, [r5, #0]
    3198:	4b33      	ldr	r3, [pc, #204]	; (3268 <reset_sequence()+0x1bc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    319a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    319e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    31a0:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    31a2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    31a6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    31aa:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    31ac:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    31b0:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    31b4:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    31b6:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    31ba:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    31be:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    31c0:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    31c2:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    31c4:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    31c6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    31ca:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    31cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    31d0:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    31d2:	4a26      	ldr	r2, [pc, #152]	; (326c <reset_sequence()+0x1c0>)
    31d4:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    31d6:	4d26      	ldr	r5, [pc, #152]	; (3270 <reset_sequence()+0x1c4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    31d8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    31da:	0542      	lsls	r2, r0, #21
    31dc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    31e0:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    31e2:	0343      	lsls	r3, r0, #13
    31e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    31e8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    31ea:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    31ec:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    31f0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    31f4:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    31f6:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    31fa:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    31fe:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3200:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3204:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3208:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    320a:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    320c:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    320e:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3212:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3214:	480b      	ldr	r0, [pc, #44]	; (3244 <reset_sequence()+0x198>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3216:	4332      	orrs	r2, r6
    3218:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    321a:	4a16      	ldr	r2, [pc, #88]	; (3274 <reset_sequence()+0x1c8>)
    321c:	6804      	ldr	r4, [r0, #0]
    321e:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3220:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3222:	430b      	orrs	r3, r1
    3224:	6003      	str	r3, [r0, #0]
    return;
    3226:	e003      	b.n	3230 <reset_sequence()+0x184>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3228:	4b13      	ldr	r3, [pc, #76]	; (3278 <reset_sequence()+0x1cc>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    322a:	781b      	ldrb	r3, [r3, #0]
    322c:	2b01      	cmp	r3, #1
    322e:	d98e      	bls.n	314e <reset_sequence()+0xa2>
    3230:	2110      	movs	r1, #16
    3232:	4812      	ldr	r0, [pc, #72]	; (327c <reset_sequence()+0x1d0>)
    3234:	f008 f8f4 	bl	b420 <usb_serial_write>
    3238:	4811      	ldr	r0, [pc, #68]	; (3280 <reset_sequence()+0x1d4>)
}
    323a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    323e:	f006 bc6b 	b.w	9b18 <Print::println()>
    3242:	bf00      	nop
    3244:	4200c000 	.word	0x4200c000
    3248:	2001888c 	.word	0x2001888c
    324c:	42004000 	.word	0x42004000
    3250:	20004969 	.word	0x20004969
    3254:	20004968 	.word	0x20004968
    3258:	20018888 	.word	0x20018888
    325c:	200188a6 	.word	0x200188a6
    3260:	200188a1 	.word	0x200188a1
    3264:	20004966 	.word	0x20004966
    3268:	6dfffff3 	.word	0x6dfffff3
    326c:	cff3efff 	.word	0xcff3efff
    3270:	42008000 	.word	0x42008000
    3274:	7fffff6f 	.word	0x7fffff6f
    3278:	20018898 	.word	0x20018898
    327c:	200003cc 	.word	0x200003cc
    3280:	20004358 	.word	0x20004358

00003284 <nmi_handler()>:
void nmi_handler() {
    3284:	b570      	push	{r4, r5, r6, lr}
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3286:	4e67      	ldr	r6, [pc, #412]	; (3424 <nmi_handler()+0x1a0>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    3288:	f7ff f9a2 	bl	25d0 <sample_at_CLK_rising_edge()>
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    328c:	4c66      	ldr	r4, [pc, #408]	; (3428 <nmi_handler()+0x1a4>)
    328e:	2100      	movs	r1, #0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3290:	7833      	ldrb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3292:	8820      	ldrh	r0, [r4, #0]
    register_flags = register_flags & 0xEF; // Clear the B flag     
    3294:	f023 0310 	bic.w	r3, r3, #16
    write_byte(register_sp_fixed, push_data);
    3298:	4d64      	ldr	r5, [pc, #400]	; (342c <nmi_handler()+0x1a8>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    329a:	3001      	adds	r0, #1
    register_flags = register_flags & 0xEF; // Clear the B flag     
    329c:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    32a0:	b280      	uxth	r0, r0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    32a2:	7033      	strb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    32a4:	f7ff f9e4 	bl	2670 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    32a8:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    32aa:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    32ac:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    32b0:	0a09      	lsrs	r1, r1, #8
    32b2:	f7ff fb99 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    32b6:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    32b8:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    32ba:	3801      	subs	r0, #1
    32bc:	b2c0      	uxtb	r0, r0
    32be:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    32c0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    32c4:	f7ff fb90 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    32c8:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    32ca:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    32cc:	3801      	subs	r0, #1
    32ce:	b2c0      	uxtb	r0, r0
    32d0:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    32d2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    32d6:	f7ff fb87 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    32da:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    32dc:	2100      	movs	r1, #0
    32de:	f64f 70fa 	movw	r0, #65530	; 0xfffa
    register_sp = register_sp - 1;
    32e2:	3b01      	subs	r3, #1
    32e4:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    32e6:	f7ff f9c3 	bl	2670 <read_byte(unsigned short, bool)>
    32ea:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFB, false); // Fetch Vector PCH
    32ec:	2100      	movs	r1, #0
    32ee:	f64f 70fb 	movw	r0, #65531	; 0xfffb
    32f2:	f7ff f9bd 	bl	2670 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    32f6:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    32f8:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    32fc:	4a4c      	ldr	r2, [pc, #304]	; (3430 <nmi_handler()+0x1ac>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    32fe:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    3302:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    3304:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3306:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    330a:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    330c:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    330e:	d37b      	bcc.n	3408 <nmi_handler()+0x184>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3310:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3318:	d309      	bcc.n	332e <nmi_handler()+0xaa>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    331a:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    331e:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    3322:	d371      	bcc.n	3408 <nmi_handler()+0x184>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    3324:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3328:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    332c:	d36c      	bcc.n	3408 <nmi_handler()+0x184>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    332e:	4b41      	ldr	r3, [pc, #260]	; (3434 <nmi_handler()+0x1b0>)
        last_access_internal_RAM = 0;
    3330:	2100      	movs	r1, #0
    3332:	4a41      	ldr	r2, [pc, #260]	; (3438 <nmi_handler()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3334:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3336:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3338:	2b01      	cmp	r3, #1
    333a:	d005      	beq.n	3348 <nmi_handler()+0xc4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    333c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3340:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3348:	4b3c      	ldr	r3, [pc, #240]	; (343c <nmi_handler()+0x1b8>)
    334a:	781b      	ldrb	r3, [r3, #0]
    334c:	b94b      	cbnz	r3, 3362 <nmi_handler()+0xde>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    334e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3352:	6813      	ldr	r3, [r2, #0]
    3354:	04d9      	lsls	r1, r3, #19
    3356:	d4fc      	bmi.n	3352 <nmi_handler()+0xce>
    while (CLK0) {}      // Wait for CLK0 to become low
    3358:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    335c:	6813      	ldr	r3, [r2, #0]
    335e:	04db      	lsls	r3, r3, #19
    3360:	d5fc      	bpl.n	335c <nmi_handler()+0xd8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3362:	4e37      	ldr	r6, [pc, #220]	; (3440 <nmi_handler()+0x1bc>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3364:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3368:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    336a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    336c:	06c1      	lsls	r1, r0, #27
    336e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3372:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3376:	682a      	ldr	r2, [r5, #0]
    3378:	4b32      	ldr	r3, [pc, #200]	; (3444 <nmi_handler()+0x1c0>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    337a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    337e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3380:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3382:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3386:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    338a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    338c:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3390:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3394:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3396:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    339a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    339e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    33a0:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    33a2:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    33a4:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    33a6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33aa:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    33ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    33b0:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33b2:	4a25      	ldr	r2, [pc, #148]	; (3448 <nmi_handler()+0x1c4>)
    33b4:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33b6:	4d25      	ldr	r5, [pc, #148]	; (344c <nmi_handler()+0x1c8>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    33b8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    33ba:	0542      	lsls	r2, r0, #21
    33bc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    33c0:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    33c2:	0343      	lsls	r3, r0, #13
    33c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    33c8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    33ca:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    33cc:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    33d0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    33d4:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    33d6:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    33da:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    33de:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    33e0:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    33e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    33e8:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33ea:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    33ec:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33ee:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    33f2:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33f4:	4816      	ldr	r0, [pc, #88]	; (3450 <nmi_handler()+0x1cc>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    33f6:	4332      	orrs	r2, r6
    33f8:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    33fa:	4a16      	ldr	r2, [pc, #88]	; (3454 <nmi_handler()+0x1d0>)
    33fc:	6804      	ldr	r4, [r0, #0]
    33fe:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3400:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3402:	430b      	orrs	r3, r1
    3404:	6003      	str	r3, [r0, #0]
    return;
    3406:	e003      	b.n	3410 <nmi_handler()+0x18c>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3408:	4b13      	ldr	r3, [pc, #76]	; (3458 <nmi_handler()+0x1d4>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    340a:	781b      	ldrb	r3, [r3, #0]
    340c:	2b01      	cmp	r3, #1
    340e:	d98e      	bls.n	332e <nmi_handler()+0xaa>
    3410:	210e      	movs	r1, #14
    3412:	4812      	ldr	r0, [pc, #72]	; (345c <nmi_handler()+0x1d8>)
    3414:	f008 f804 	bl	b420 <usb_serial_write>
    3418:	4811      	ldr	r0, [pc, #68]	; (3460 <nmi_handler()+0x1dc>)
}
    341a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    341e:	f006 bb7b 	b.w	9b18 <Print::println()>
    3422:	bf00      	nop
    3424:	20004968 	.word	0x20004968
    3428:	2001888c 	.word	0x2001888c
    342c:	20004969 	.word	0x20004969
    3430:	20018888 	.word	0x20018888
    3434:	200188a6 	.word	0x200188a6
    3438:	200188a1 	.word	0x200188a1
    343c:	20004966 	.word	0x20004966
    3440:	42004000 	.word	0x42004000
    3444:	6dfffff3 	.word	0x6dfffff3
    3448:	cff3efff 	.word	0xcff3efff
    344c:	42008000 	.word	0x42008000
    3450:	4200c000 	.word	0x4200c000
    3454:	7fffff6f 	.word	0x7fffff6f
    3458:	20018898 	.word	0x20018898
    345c:	20000388 	.word	0x20000388
    3460:	20004358 	.word	0x20004358

00003464 <irq_handler(unsigned char)>:
void irq_handler(uint8_t opcode_is_brk) {
    3464:	b570      	push	{r4, r5, r6, lr}
    3466:	4604      	mov	r4, r0
    register_flags = register_flags | 0x20; // Set the flag[5]          
    3468:	4e69      	ldr	r6, [pc, #420]	; (3610 <irq_handler(unsigned char)+0x1ac>)
    sample_at_CLK_rising_edge(); // Begin processing on next CLK edge
    346a:	f7ff f8b1 	bl	25d0 <sample_at_CLK_rising_edge()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    346e:	2c01      	cmp	r4, #1
    register_flags = register_flags | 0x20; // Set the flag[5]          
    3470:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    3472:	f000 80ca 	beq.w	360a <irq_handler(unsigned char)+0x1a6>
    else register_flags = register_flags & 0xEF; // Clear the B flag
    3476:	f023 0310 	bic.w	r3, r3, #16
    347a:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    347e:	4c65      	ldr	r4, [pc, #404]	; (3614 <irq_handler(unsigned char)+0x1b0>)
    3480:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    3482:	4d65      	ldr	r5, [pc, #404]	; (3618 <irq_handler(unsigned char)+0x1b4>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    3484:	8820      	ldrh	r0, [r4, #0]
    3486:	7033      	strb	r3, [r6, #0]
    3488:	3001      	adds	r0, #1
    348a:	b280      	uxth	r0, r0
    348c:	f7ff f8f0 	bl	2670 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    3490:	7828      	ldrb	r0, [r5, #0]
    push(register_pc >> 8); // Push PCH
    3492:	8821      	ldrh	r1, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    3494:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3498:	0a09      	lsrs	r1, r1, #8
    349a:	f7ff faa5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    349e:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    34a0:	7821      	ldrb	r1, [r4, #0]
    register_sp = register_sp - 1;
    34a2:	3801      	subs	r0, #1
    34a4:	b2c0      	uxtb	r0, r0
    34a6:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    34a8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    34ac:	f7ff fa9c 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    34b0:	7828      	ldrb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    34b2:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    34b4:	3801      	subs	r0, #1
    34b6:	b2c0      	uxtb	r0, r0
    34b8:	7028      	strb	r0, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    34ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    34be:	f7ff fa93 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    34c2:	782b      	ldrb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    34c4:	2100      	movs	r1, #0
    34c6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    register_sp = register_sp - 1;
    34ca:	3b01      	subs	r3, #1
    34cc:	702b      	strb	r3, [r5, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    34ce:	f7ff f8cf 	bl	2670 <read_byte(unsigned short, bool)>
    34d2:	4605      	mov	r5, r0
    temp2 = read_byte(0xFFFF, false); // Fetch Vector PCH
    34d4:	2100      	movs	r1, #0
    34d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    34da:	f7ff f8c9 	bl	2670 <read_byte(unsigned short, bool)>
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    34de:	7833      	ldrb	r3, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    34e0:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    current_address = local_address;
    34e4:	4a4d      	ldr	r2, [pc, #308]	; (361c <irq_handler(unsigned char)+0x1b8>)
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    34e6:	f043 0334 	orr.w	r3, r3, #52	; 0x34
    register_pc = (temp2 << 8) | temp1;
    34ea:	b280      	uxth	r0, r0
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    34ec:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    34ee:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
    34f2:	8020      	strh	r0, [r4, #0]
    current_address = local_address;
    34f4:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    34f6:	d37b      	bcc.n	35f0 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    34f8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    34fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3500:	d309      	bcc.n	3516 <irq_handler(unsigned char)+0xb2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3502:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3506:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
    350a:	d371      	bcc.n	35f0 <irq_handler(unsigned char)+0x18c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    350c:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
    3510:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
    3514:	d36c      	bcc.n	35f0 <irq_handler(unsigned char)+0x18c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3516:	4b42      	ldr	r3, [pc, #264]	; (3620 <irq_handler(unsigned char)+0x1bc>)
        last_access_internal_RAM = 0;
    3518:	2100      	movs	r1, #0
    351a:	4a42      	ldr	r2, [pc, #264]	; (3624 <irq_handler(unsigned char)+0x1c0>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    351c:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    351e:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3520:	2b01      	cmp	r3, #1
    3522:	d005      	beq.n	3530 <irq_handler(unsigned char)+0xcc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3524:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3528:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    352c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3530:	4b3d      	ldr	r3, [pc, #244]	; (3628 <irq_handler(unsigned char)+0x1c4>)
    3532:	781b      	ldrb	r3, [r3, #0]
    3534:	b94b      	cbnz	r3, 354a <irq_handler(unsigned char)+0xe6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3536:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    353a:	6813      	ldr	r3, [r2, #0]
    353c:	04d9      	lsls	r1, r3, #19
    353e:	d4fc      	bmi.n	353a <irq_handler(unsigned char)+0xd6>
    while (CLK0) {}      // Wait for CLK0 to become low
    3540:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3544:	6813      	ldr	r3, [r2, #0]
    3546:	04db      	lsls	r3, r3, #19
    3548:	d5fc      	bpl.n	3544 <irq_handler(unsigned char)+0xe0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    354a:	4e38      	ldr	r6, [pc, #224]	; (362c <irq_handler(unsigned char)+0x1c8>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    354c:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3550:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3552:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3554:	06c1      	lsls	r1, r0, #27
    3556:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    355a:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    355e:	682a      	ldr	r2, [r5, #0]
    3560:	4b33      	ldr	r3, [pc, #204]	; (3630 <irq_handler(unsigned char)+0x1cc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3562:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3566:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3568:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    356a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    356e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3572:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    3574:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3578:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    357c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    357e:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3582:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3586:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3588:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    358a:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    358c:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    358e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3592:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3598:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    359a:	4a26      	ldr	r2, [pc, #152]	; (3634 <irq_handler(unsigned char)+0x1d0>)
    359c:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    359e:	4d26      	ldr	r5, [pc, #152]	; (3638 <irq_handler(unsigned char)+0x1d4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    35a0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    35a2:	0542      	lsls	r2, r0, #21
    35a4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    35a8:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    35aa:	0343      	lsls	r3, r0, #13
    35ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    35b0:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    35b2:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    35b4:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    35b8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    35bc:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    35be:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    35c2:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    35c6:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    35c8:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    35cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    35d0:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35d2:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    35d4:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35d6:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    35da:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35dc:	4817      	ldr	r0, [pc, #92]	; (363c <irq_handler(unsigned char)+0x1d8>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    35de:	4332      	orrs	r2, r6
    35e0:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    35e2:	4a17      	ldr	r2, [pc, #92]	; (3640 <irq_handler(unsigned char)+0x1dc>)
    35e4:	6804      	ldr	r4, [r0, #0]
    35e6:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    35e8:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    35ea:	430b      	orrs	r3, r1
    35ec:	6003      	str	r3, [r0, #0]
    return;
    35ee:	e003      	b.n	35f8 <irq_handler(unsigned char)+0x194>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    35f0:	4b14      	ldr	r3, [pc, #80]	; (3644 <irq_handler(unsigned char)+0x1e0>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    35f2:	781b      	ldrb	r3, [r3, #0]
    35f4:	2b01      	cmp	r3, #1
    35f6:	d98e      	bls.n	3516 <irq_handler(unsigned char)+0xb2>
    35f8:	210e      	movs	r1, #14
    35fa:	4813      	ldr	r0, [pc, #76]	; (3648 <irq_handler(unsigned char)+0x1e4>)
    35fc:	f007 ff10 	bl	b420 <usb_serial_write>
    3600:	4812      	ldr	r0, [pc, #72]	; (364c <irq_handler(unsigned char)+0x1e8>)
}
    3602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3606:	f006 ba87 	b.w	9b18 <Print::println()>
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    360a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    360e:	e736      	b.n	347e <irq_handler(unsigned char)+0x1a>
    3610:	20004968 	.word	0x20004968
    3614:	2001888c 	.word	0x2001888c
    3618:	20004969 	.word	0x20004969
    361c:	20018888 	.word	0x20018888
    3620:	200188a6 	.word	0x200188a6
    3624:	200188a1 	.word	0x200188a1
    3628:	20004966 	.word	0x20004966
    362c:	42004000 	.word	0x42004000
    3630:	6dfffff3 	.word	0x6dfffff3
    3634:	cff3efff 	.word	0xcff3efff
    3638:	42008000 	.word	0x42008000
    363c:	4200c000 	.word	0x4200c000
    3640:	7fffff6f 	.word	0x7fffff6f
    3644:	20018898 	.word	0x20018898
    3648:	20000378 	.word	0x20000378
    364c:	20004358 	.word	0x20004358

00003650 <opcode_0x0A()>:
// -------------------------------------------------

// -------------------------------------------------
// 0x0A - ASL A - Arithmetic Shift Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x0A() {
    3650:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    3652:	4c14      	ldr	r4, [pc, #80]	; (36a4 <opcode_0x0A()+0x54>)
    3654:	2100      	movs	r1, #0
    3656:	8820      	ldrh	r0, [r4, #0]
    3658:	f7ff f80a 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    365c:	4912      	ldr	r1, [pc, #72]	; (36a8 <opcode_0x0A()+0x58>)
    365e:	4813      	ldr	r0, [pc, #76]	; (36ac <opcode_0x0A()+0x5c>)
    3660:	780a      	ldrb	r2, [r1, #0]
    3662:	f991 3000 	ldrsb.w	r3, [r1]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a << 1;
    3666:	0052      	lsls	r2, r2, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3668:	2b00      	cmp	r3, #0
    366a:	7803      	ldrb	r3, [r0, #0]
    register_a = register_a << 1;
    366c:	b2d2      	uxtb	r2, r2
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    366e:	bfb4      	ite	lt
    3670:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3674:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = register_a << 1;
    3678:	700a      	strb	r2, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    367a:	0611      	lsls	r1, r2, #24
    367c:	d40d      	bmi.n	369a <opcode_0x0A()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    367e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3682:	7003      	strb	r3, [r0, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3684:	b95a      	cbnz	r2, 369e <opcode_0x0A()+0x4e>
    3686:	f043 0302 	orr.w	r3, r3, #2

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x0A].length);
    368a:	4909      	ldr	r1, [pc, #36]	; (36b0 <opcode_0x0A()+0x60>)
    368c:	8822      	ldrh	r2, [r4, #0]
    368e:	7003      	strb	r3, [r0, #0]
    3690:	f891 0239 	ldrb.w	r0, [r1, #569]	; 0x239
    3694:	4410      	add	r0, r2
}
    3696:	b280      	uxth	r0, r0
    3698:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    369a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    369e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    36a2:	e7f2      	b.n	368a <opcode_0x0A()+0x3a>
    36a4:	2001888c 	.word	0x2001888c
    36a8:	200188a3 	.word	0x200188a3
    36ac:	20004968 	.word	0x20004968
    36b0:	20015418 	.word	0x20015418

000036b4 <opcode_0x4A()>:

// -------------------------------------------------
// 0x4A - LSR A - Logical Shift Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x4A() {
    36b4:	b510      	push	{r4, lr}

    read_byte(register_pc, false);
    36b6:	4c11      	ldr	r4, [pc, #68]	; (36fc <opcode_0x4A()+0x48>)
    36b8:	2100      	movs	r1, #0
    36ba:	8820      	ldrh	r0, [r4, #0]
    36bc:	f7fe ffd8 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36c0:	480f      	ldr	r0, [pc, #60]	; (3700 <opcode_0x4A()+0x4c>)
    36c2:	4910      	ldr	r1, [pc, #64]	; (3704 <opcode_0x4A()+0x50>)
    36c4:	7802      	ldrb	r2, [r0, #0]
    36c6:	780b      	ldrb	r3, [r1, #0]
    36c8:	f012 0f01 	tst.w	r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a >> 1;
    36cc:	ea4f 0252 	mov.w	r2, r2, lsr #1
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    36d0:	bf14      	ite	ne
    36d2:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    36d6:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = register_a >> 1;
    36da:	7002      	strb	r2, [r0, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    36dc:	b95a      	cbnz	r2, 36f6 <opcode_0x4A()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    36de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    36e2:	f043 0302 	orr.w	r3, r3, #2

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x4A].length);
    36e6:	4808      	ldr	r0, [pc, #32]	; (3708 <opcode_0x4A()+0x54>)
    36e8:	8822      	ldrh	r2, [r4, #0]
    36ea:	f890 0f39 	ldrb.w	r0, [r0, #3897]	; 0xf39
    36ee:	700b      	strb	r3, [r1, #0]
    36f0:	4410      	add	r0, r2
    36f2:	b280      	uxth	r0, r0
}
    36f4:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    36f6:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    36fa:	e7f4      	b.n	36e6 <opcode_0x4A()+0x32>
    36fc:	2001888c 	.word	0x2001888c
    3700:	200188a3 	.word	0x200188a3
    3704:	20004968 	.word	0x20004968
    3708:	20015418 	.word	0x20015418

0000370c <opcode_0x6A()>:

// -------------------------------------------------
// 0x6A - ROR A - Rotate Right - Accumulator
// -------------------------------------------------
uint16_t opcode_0x6A() {
    370c:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    370e:	4c15      	ldr	r4, [pc, #84]	; (3764 <opcode_0x6A()+0x58>)
    3710:	2100      	movs	r1, #0
    3712:	8820      	ldrh	r0, [r4, #0]
    3714:	f7fe ffac 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3718:	4913      	ldr	r1, [pc, #76]	; (3768 <opcode_0x6A()+0x5c>)

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    371a:	4814      	ldr	r0, [pc, #80]	; (376c <opcode_0x6A()+0x60>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    371c:	780b      	ldrb	r3, [r1, #0]
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    371e:	f890 c000 	ldrb.w	ip, [r0]
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3722:	01da      	lsls	r2, r3, #7
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3724:	f01c 0f01 	tst.w	ip, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3728:	b2d2      	uxtb	r2, r2
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    372a:	bf14      	ite	ne
    372c:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3730:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe

    register_a = (old_carry_flag | (register_a >> 1));
    3734:	ea42 025c 	orr.w	r2, r2, ip, lsr #1
    3738:	7002      	strb	r2, [r0, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    373a:	0610      	lsls	r0, r2, #24
    373c:	d40c      	bmi.n	3758 <opcode_0x6A()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    373e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3742:	b95a      	cbnz	r2, 375c <opcode_0x6A()+0x50>
    3744:	f043 0302 	orr.w	r3, r3, #2

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x6A].length);
    3748:	4809      	ldr	r0, [pc, #36]	; (3770 <opcode_0x6A()+0x64>)
    374a:	8822      	ldrh	r2, [r4, #0]
    374c:	f890 05b9 	ldrb.w	r0, [r0, #1465]	; 0x5b9
    3750:	700b      	strb	r3, [r1, #0]
    3752:	4410      	add	r0, r2
}
    3754:	b280      	uxth	r0, r0
    3756:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    375c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3760:	e7f2      	b.n	3748 <opcode_0x6A()+0x3c>
    3762:	bf00      	nop
    3764:	2001888c 	.word	0x2001888c
    3768:	20004968 	.word	0x20004968
    376c:	200188a3 	.word	0x200188a3
    3770:	20016418 	.word	0x20016418

00003774 <opcode_0x2A()>:

// -------------------------------------------------
// 0x2A - ROL A - Rotate Left - Accumulator
// -------------------------------------------------
uint16_t opcode_0x2A() {
    3774:	b510      	push	{r4, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    3776:	4c16      	ldr	r4, [pc, #88]	; (37d0 <opcode_0x2A()+0x5c>)
    3778:	2100      	movs	r1, #0
    377a:	8820      	ldrh	r0, [r4, #0]
    377c:	f7fe ff78 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3780:	4814      	ldr	r0, [pc, #80]	; (37d4 <opcode_0x2A()+0x60>)

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3782:	4915      	ldr	r1, [pc, #84]	; (37d8 <opcode_0x2A()+0x64>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3784:	7803      	ldrb	r3, [r0, #0]
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3786:	f891 c000 	ldrb.w	ip, [r1]
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    378a:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    378e:	f991 e000 	ldrsb.w	lr, [r1]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = (register_a << 1) | old_carry_flag;
    3792:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    3796:	f1be 0f00 	cmp.w	lr, #0
    register_a = (register_a << 1) | old_carry_flag;
    379a:	b2d2      	uxtb	r2, r2
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    379c:	bfb4      	ite	lt
    379e:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    37a2:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = (register_a << 1) | old_carry_flag;
    37a6:	700a      	strb	r2, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    37a8:	0611      	lsls	r1, r2, #24
    37aa:	d40c      	bmi.n	37c6 <opcode_0x2A()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    37ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    37b0:	b95a      	cbnz	r2, 37ca <opcode_0x2A()+0x56>
    37b2:	f043 0302 	orr.w	r3, r3, #2

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x2A].length);
    37b6:	4909      	ldr	r1, [pc, #36]	; (37dc <opcode_0x2A()+0x68>)
    37b8:	8822      	ldrh	r2, [r4, #0]
    37ba:	7003      	strb	r3, [r0, #0]
    37bc:	f891 08b9 	ldrb.w	r0, [r1, #2233]	; 0x8b9
    37c0:	4410      	add	r0, r2
}
    37c2:	b280      	uxth	r0, r0
    37c4:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    37c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    37ca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    37ce:	e7f2      	b.n	37b6 <opcode_0x2A()+0x42>
    37d0:	2001888c 	.word	0x2001888c
    37d4:	20004968 	.word	0x20004968
    37d8:	200188a3 	.word	0x200188a3
    37dc:	20015418 	.word	0x20015418

000037e0 <Calculate_ADC(unsigned short)>:

// -------------------------------------------------
// ADC 
// -------------------------------------------------
void Calculate_ADC(uint16_t local_data) {
    37e0:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if ((flag_d) == 1) {
    37e2:	4c2f      	ldr	r4, [pc, #188]	; (38a0 <Calculate_ADC(unsigned short)+0xc0>)
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    37e4:	492f      	ldr	r1, [pc, #188]	; (38a4 <Calculate_ADC(unsigned short)+0xc4>)
    if ((flag_d) == 1) {
    37e6:	7822      	ldrb	r2, [r4, #0]
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    37e8:	f891 c000 	ldrb.w	ip, [r1]
    if ((flag_d) == 1) {
    37ec:	0716      	lsls	r6, r2, #28
    37ee:	d532      	bpl.n	3856 <Calculate_ADC(unsigned short)+0x76>
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    37f0:	f002 0e01 	and.w	lr, r2, #1
    37f4:	f00c 030f 	and.w	r3, ip, #15
    37f8:	f000 050f 	and.w	r5, r0, #15
    37fc:	4473      	add	r3, lr
    37fe:	442b      	add	r3, r5
        if (bcd_low > 0x9) {
    3800:	2b09      	cmp	r3, #9
    3802:	d823      	bhi.n	384c <Calculate_ADC(unsigned short)+0x6c>
    3804:	f04f 0e00 	mov.w	lr, #0
            low_carry = 0x10;
            bcd_low = bcd_low - 0xA;
        }

        bcd_high = (0xF0 & register_a) + (0xF0 & local_data) + low_carry;
    3808:	f00c 05f0 	and.w	r5, ip, #240	; 0xf0
    380c:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3810:	4435      	add	r5, r6
    3812:	44ae      	add	lr, r5
        if (bcd_high > 0x90) {
    3814:	f1be 0f90 	cmp.w	lr, #144	; 0x90
    3818:	d838      	bhi.n	388c <Calculate_ADC(unsigned short)+0xac>
            high_carry = 1;
            bcd_high = bcd_high - 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    381a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    381e:	4473      	add	r3, lr
    3820:	b2db      	uxtb	r3, r3
        else register_flags = register_flags & 0xFE; // Clear the C flag
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3822:	fa4f fc8c 	sxtb.w	ip, ip
    3826:	fa4f fe80 	sxtb.w	lr, r0

    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    382a:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    382e:	b2d8      	uxtb	r0, r3
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3830:	db20      	blt.n	3874 <Calculate_ADC(unsigned short)+0x94>
    3832:	f1be 0f00 	cmp.w	lr, #0
    3836:	db1a      	blt.n	386e <Calculate_ADC(unsigned short)+0x8e>
    3838:	061d      	lsls	r5, r3, #24
    383a:	d41f      	bmi.n	387c <Calculate_ADC(unsigned short)+0x9c>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    383c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf

    register_a = (0xFF & total);
    3840:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3842:	7022      	strb	r2, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3848:	f7ff b9d6 	b.w	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low - 0xA;
    384c:	3b0a      	subs	r3, #10
    384e:	f04f 0e10 	mov.w	lr, #16
    3852:	b29b      	uxth	r3, r3
    3854:	e7d8      	b.n	3808 <Calculate_ADC(unsigned short)+0x28>
        total = register_a + local_data + (flag_c);
    3856:	f002 0301 	and.w	r3, r2, #1
    385a:	4403      	add	r3, r0
    385c:	4463      	add	r3, ip
    385e:	b29b      	uxth	r3, r3
        if (total > 255) register_flags = register_flags | 0x01; // Set the C flag
    3860:	2bff      	cmp	r3, #255	; 0xff
    3862:	bf8c      	ite	hi
    3864:	f042 0201 	orrhi.w	r2, r2, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag
    3868:	f002 02fe 	andls.w	r2, r2, #254	; 0xfe
    386c:	e7d9      	b.n	3822 <Calculate_ADC(unsigned short)+0x42>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    386e:	f1bc 0f00 	cmp.w	ip, #0
    3872:	dae3      	bge.n	383c <Calculate_ADC(unsigned short)+0x5c>
    3874:	ea63 030e 	orn	r3, r3, lr
    3878:	061b      	lsls	r3, r3, #24
    387a:	d4df      	bmi.n	383c <Calculate_ADC(unsigned short)+0x5c>
    387c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    register_a = (0xFF & total);
    3880:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3882:	7022      	strb	r2, [r4, #0]
}
    3884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3888:	f7ff b9b6 	b.w	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high - 0xA0;
    388c:	f1ae 0ea0 	sub.w	lr, lr, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3890:	f022 0201 	bic.w	r2, r2, #1
            bcd_high = bcd_high - 0xA0;
    3894:	fa1f fe8e 	uxth.w	lr, lr
            register_flags = register_flags | 0x01;
    3898:	f042 0201 	orr.w	r2, r2, #1
    389c:	e7bf      	b.n	381e <Calculate_ADC(unsigned short)+0x3e>
    389e:	bf00      	nop
    38a0:	20004968 	.word	0x20004968
    38a4:	200188a3 	.word	0x200188a3

000038a8 <opcode_0x69()>:
uint16_t opcode_0x69() {
    38a8:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    38aa:	4c08      	ldr	r4, [pc, #32]	; (38cc <opcode_0x69()+0x24>)
    38ac:	2100      	movs	r1, #0
    38ae:	8820      	ldrh	r0, [r4, #0]
    38b0:	3001      	adds	r0, #1
    38b2:	b280      	uxth	r0, r0
    38b4:	f7fe fedc 	bl	2670 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_Immediate(1));
    38b8:	b280      	uxth	r0, r0
    38ba:	f7ff ff91 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x69].length);
    38be:	4a04      	ldr	r2, [pc, #16]	; (38d0 <opcode_0x69()+0x28>)
    38c0:	8823      	ldrh	r3, [r4, #0]
    38c2:	f892 0585 	ldrb.w	r0, [r2, #1413]	; 0x585
    38c6:	4418      	add	r0, r3
} // 0x69 - ADC - Immediate - Binary
    38c8:	b280      	uxth	r0, r0
    38ca:	bd10      	pop	{r4, pc}
    38cc:	2001888c 	.word	0x2001888c
    38d0:	20016418 	.word	0x20016418

000038d4 <opcode_0x65()>:
uint16_t opcode_0x65() {
    38d4:	b510      	push	{r4, lr}
    38d6:	4c0b      	ldr	r4, [pc, #44]	; (3904 <opcode_0x65()+0x30>)
    38d8:	2100      	movs	r1, #0
    38da:	8820      	ldrh	r0, [r4, #0]
    38dc:	3001      	adds	r0, #1
    38de:	b280      	uxth	r0, r0
    38e0:	f7fe fec6 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    38e4:	4b08      	ldr	r3, [pc, #32]	; (3908 <opcode_0x65()+0x34>)
    38e6:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    38e8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    38ea:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    38ec:	f7fe fec0 	bl	2670 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_ZeroPage());
    38f0:	b280      	uxth	r0, r0
    38f2:	f7ff ff75 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x65].length);
    38f6:	4a05      	ldr	r2, [pc, #20]	; (390c <opcode_0x65()+0x38>)
    38f8:	8823      	ldrh	r3, [r4, #0]
    38fa:	f892 04b5 	ldrb.w	r0, [r2, #1205]	; 0x4b5
    38fe:	4418      	add	r0, r3
} // 0x65 - ADC - ZeroPage
    3900:	b280      	uxth	r0, r0
    3902:	bd10      	pop	{r4, pc}
    3904:	2001888c 	.word	0x2001888c
    3908:	2001888a 	.word	0x2001888a
    390c:	20016418 	.word	0x20016418

00003910 <opcode_0x75()>:
uint16_t opcode_0x75() {
    3910:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_ZeroPage_X());
    3912:	f7ff f9a5 	bl	2c60 <Fetch_ZeroPage_X()>
    3916:	b280      	uxth	r0, r0
    3918:	f7ff ff62 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x75].length);
    391c:	4a03      	ldr	r2, [pc, #12]	; (392c <opcode_0x75()+0x1c>)
    391e:	4b04      	ldr	r3, [pc, #16]	; (3930 <opcode_0x75()+0x20>)
    3920:	f892 07f5 	ldrb.w	r0, [r2, #2037]	; 0x7f5
    3924:	881b      	ldrh	r3, [r3, #0]
    3926:	4418      	add	r0, r3
} // 0x75 - ADC - ZeroPage , X
    3928:	b280      	uxth	r0, r0
    392a:	bd08      	pop	{r3, pc}
    392c:	20016418 	.word	0x20016418
    3930:	2001888c 	.word	0x2001888c

00003934 <opcode_0x6D()>:
uint16_t opcode_0x6D() {
    3934:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute());
    3936:	f7ff f9d3 	bl	2ce0 <Fetch_Absolute()>
    393a:	b280      	uxth	r0, r0
    393c:	f7ff ff50 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6D].length);
    3940:	4a03      	ldr	r2, [pc, #12]	; (3950 <opcode_0x6D()+0x1c>)
    3942:	4b04      	ldr	r3, [pc, #16]	; (3954 <opcode_0x6D()+0x20>)
    3944:	f892 0655 	ldrb.w	r0, [r2, #1621]	; 0x655
    3948:	881b      	ldrh	r3, [r3, #0]
    394a:	4418      	add	r0, r3
} // 0x6D - ADC - Absolute
    394c:	b280      	uxth	r0, r0
    394e:	bd08      	pop	{r3, pc}
    3950:	20016418 	.word	0x20016418
    3954:	2001888c 	.word	0x2001888c

00003958 <opcode_0x7D()>:
uint16_t opcode_0x7D() {
    3958:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute_X(1));
    395a:	2001      	movs	r0, #1
    395c:	f7ff f9dc 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    3960:	b280      	uxth	r0, r0
    3962:	f7ff ff3d 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7D].length);
    3966:	4a04      	ldr	r2, [pc, #16]	; (3978 <opcode_0x7D()+0x20>)
    3968:	4b04      	ldr	r3, [pc, #16]	; (397c <opcode_0x7D()+0x24>)
    396a:	f892 0995 	ldrb.w	r0, [r2, #2453]	; 0x995
    396e:	881b      	ldrh	r3, [r3, #0]
    3970:	4418      	add	r0, r3
} // 0x7D - ADC - Absolute , X
    3972:	b280      	uxth	r0, r0
    3974:	bd08      	pop	{r3, pc}
    3976:	bf00      	nop
    3978:	20016418 	.word	0x20016418
    397c:	2001888c 	.word	0x2001888c

00003980 <opcode_0x79()>:
uint16_t opcode_0x79() {
    3980:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute_Y(1));
    3982:	2001      	movs	r0, #1
    3984:	f7ff f9f8 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    3988:	b280      	uxth	r0, r0
    398a:	f7ff ff29 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x79].length);
    398e:	4a04      	ldr	r2, [pc, #16]	; (39a0 <opcode_0x79()+0x20>)
    3990:	4b04      	ldr	r3, [pc, #16]	; (39a4 <opcode_0x79()+0x24>)
    3992:	f892 08c5 	ldrb.w	r0, [r2, #2245]	; 0x8c5
    3996:	881b      	ldrh	r3, [r3, #0]
    3998:	4418      	add	r0, r3
} // 0x79 - ADC - Absolute , Y
    399a:	b280      	uxth	r0, r0
    399c:	bd08      	pop	{r3, pc}
    399e:	bf00      	nop
    39a0:	20016418 	.word	0x20016418
    39a4:	2001888c 	.word	0x2001888c

000039a8 <opcode_0x61()>:
uint16_t opcode_0x61() {
    39a8:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    39aa:	f7ff fa15 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    39ae:	b280      	uxth	r0, r0
    39b0:	f7ff ff16 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x61].length);
    39b4:	4a03      	ldr	r2, [pc, #12]	; (39c4 <opcode_0x61()+0x1c>)
    39b6:	4b04      	ldr	r3, [pc, #16]	; (39c8 <opcode_0x61()+0x20>)
    39b8:	f892 03e5 	ldrb.w	r0, [r2, #997]	; 0x3e5
    39bc:	881b      	ldrh	r3, [r3, #0]
    39be:	4418      	add	r0, r3
} // 0x61 - ADC - Indexed Indirect X
    39c0:	b280      	uxth	r0, r0
    39c2:	bd08      	pop	{r3, pc}
    39c4:	20016418 	.word	0x20016418
    39c8:	2001888c 	.word	0x2001888c

000039cc <opcode_0x71()>:
uint16_t opcode_0x71() {
    39cc:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    39ce:	2001      	movs	r0, #1
    39d0:	f7ff fa2c 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    39d4:	b280      	uxth	r0, r0
    39d6:	f7ff ff03 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x71].length);
    39da:	4a04      	ldr	r2, [pc, #16]	; (39ec <opcode_0x71()+0x20>)
    39dc:	4b04      	ldr	r3, [pc, #16]	; (39f0 <opcode_0x71()+0x24>)
    39de:	f892 0725 	ldrb.w	r0, [r2, #1829]	; 0x725
    39e2:	881b      	ldrh	r3, [r3, #0]
    39e4:	4418      	add	r0, r3
} // 0x71 - ADC - Indirect Indexed  Y
    39e6:	b280      	uxth	r0, r0
    39e8:	bd08      	pop	{r3, pc}
    39ea:	bf00      	nop
    39ec:	20016418 	.word	0x20016418
    39f0:	2001888c 	.word	0x2001888c

000039f4 <Calculate_SBC(unsigned short)>:

// -------------------------------------------------
// SBC 
// -------------------------------------------------
void Calculate_SBC(uint16_t local_data) {
    39f4:	b570      	push	{r4, r5, r6, lr}
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if (flag_c != 0) flag_c_invert = 0;
    39f6:	4c32      	ldr	r4, [pc, #200]	; (3ac0 <Calculate_SBC(unsigned short)+0xcc>)
    else flag_c_invert = 1;

    if ((flag_d) == 1) {
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    39f8:	4932      	ldr	r1, [pc, #200]	; (3ac4 <Calculate_SBC(unsigned short)+0xd0>)
    if (flag_c != 0) flag_c_invert = 0;
    39fa:	7823      	ldrb	r3, [r4, #0]
    39fc:	43da      	mvns	r2, r3
    if ((flag_d) == 1) {
    39fe:	071e      	lsls	r6, r3, #28
    3a00:	f002 0201 	and.w	r2, r2, #1
    3a04:	d539      	bpl.n	3a7a <Calculate_SBC(unsigned short)+0x86>
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    3a06:	f000 0c0f 	and.w	ip, r0, #15
    3a0a:	f891 e000 	ldrb.w	lr, [r1]
    3a0e:	4462      	add	r2, ip
    3a10:	f00e 0c0f 	and.w	ip, lr, #15
    3a14:	ebac 0c02 	sub.w	ip, ip, r2
    3a18:	fa1f fc8c 	uxth.w	ip, ip
        if (bcd_low > 0x9) {
    3a1c:	f1bc 0f09 	cmp.w	ip, #9
    3a20:	d825      	bhi.n	3a6e <Calculate_SBC(unsigned short)+0x7a>
    3a22:	2500      	movs	r5, #0
            low_carry = 0x10;
            bcd_low = bcd_low + 0xA;
        }

        bcd_high = (0xF0 & register_a) - (0xF0 & local_data) - low_carry;
    3a24:	f00e 02f0 	and.w	r2, lr, #240	; 0xf0
    3a28:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    3a2c:	1b92      	subs	r2, r2, r6
    3a2e:	1b52      	subs	r2, r2, r5
    3a30:	b292      	uxth	r2, r2
        if (bcd_high > 0x90) {
    3a32:	2a90      	cmp	r2, #144	; 0x90
    3a34:	d83f      	bhi.n	3ab6 <Calculate_SBC(unsigned short)+0xc2>
            high_carry = 1;
            bcd_high = bcd_high + 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    3a36:	f023 0301 	bic.w	r3, r3, #1
            bcd_total = bcd_total - 0x0A;
        }

        if (high_carry == 0) {
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
    3a3a:	f043 0301 	orr.w	r3, r3, #1
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    3a3e:	4494      	add	ip, r2
    3a40:	fa5f fc8c 	uxtb.w	ip, ip
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    3a44:	fa4f fe8e 	sxtb.w	lr, lr
    3a48:	b242      	sxtb	r2, r0

    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3a4a:	f1be 0f00 	cmp.w	lr, #0
    result = (total & 0x80);
    3a4e:	fa5f f08c 	uxtb.w	r0, ip
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3a52:	db24      	blt.n	3a9e <Calculate_SBC(unsigned short)+0xaa>
    3a54:	2a00      	cmp	r2, #0
    3a56:	da1f      	bge.n	3a98 <Calculate_SBC(unsigned short)+0xa4>
    3a58:	f01c 0f80 	tst.w	ip, #128	; 0x80
    3a5c:	d123      	bne.n	3aa6 <Calculate_SBC(unsigned short)+0xb2>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    3a5e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    3a62:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3a64:	7023      	strb	r3, [r4, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    3a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3a6a:	f7ff b8c5 	b.w	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_low = bcd_low + 0xA;
    3a6e:	f10c 0c0a 	add.w	ip, ip, #10
    3a72:	2510      	movs	r5, #16
    3a74:	fa1f fc8c 	uxth.w	ip, ip
    3a78:	e7d4      	b.n	3a24 <Calculate_SBC(unsigned short)+0x30>
        total = register_a - local_data - flag_c_invert;
    3a7a:	f891 e000 	ldrb.w	lr, [r1]
    3a7e:	ebae 0c00 	sub.w	ip, lr, r0
    3a82:	ebac 0202 	sub.w	r2, ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3a86:	0415      	lsls	r5, r2, #16
        total = register_a - local_data - flag_c_invert;
    3a88:	fa1f fc82 	uxth.w	ip, r2
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    3a8c:	bf54      	ite	pl
    3a8e:	f043 0301 	orrpl.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    3a92:	f003 03fe 	andmi.w	r3, r3, #254	; 0xfe
    3a96:	e7d5      	b.n	3a44 <Calculate_SBC(unsigned short)+0x50>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    3a98:	f1be 0f00 	cmp.w	lr, #0
    3a9c:	dadf      	bge.n	3a5e <Calculate_SBC(unsigned short)+0x6a>
    3a9e:	ea42 020c 	orr.w	r2, r2, ip
    3aa2:	0612      	lsls	r2, r2, #24
    3aa4:	d4db      	bmi.n	3a5e <Calculate_SBC(unsigned short)+0x6a>
    3aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    3aaa:	7008      	strb	r0, [r1, #0]
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    3aac:	7023      	strb	r3, [r4, #0]
}
    3aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calc_Flags_NEGATIVE_ZERO(register_a);
    3ab2:	f7ff b8a1 	b.w	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
            bcd_high = bcd_high + 0xA0;
    3ab6:	32a0      	adds	r2, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    3ab8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_high = bcd_high + 0xA0;
    3abc:	b292      	uxth	r2, r2
        if (high_carry == 0) {
    3abe:	e7be      	b.n	3a3e <Calculate_SBC(unsigned short)+0x4a>
    3ac0:	20004968 	.word	0x20004968
    3ac4:	200188a3 	.word	0x200188a3

00003ac8 <opcode_0xE9()>:
uint16_t opcode_0xE9() {
    3ac8:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    3aca:	4c08      	ldr	r4, [pc, #32]	; (3aec <opcode_0xE9()+0x24>)
    3acc:	2100      	movs	r1, #0
    3ace:	8820      	ldrh	r0, [r4, #0]
    3ad0:	3001      	adds	r0, #1
    3ad2:	b280      	uxth	r0, r0
    3ad4:	f7fe fdcc 	bl	2670 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate(1));
    3ad8:	b280      	uxth	r0, r0
    3ada:	f7ff ff8b 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE9].length);
    3ade:	4a04      	ldr	r2, [pc, #16]	; (3af0 <opcode_0xE9()+0x28>)
    3ae0:	8823      	ldrh	r3, [r4, #0]
    3ae2:	f892 0f85 	ldrb.w	r0, [r2, #3973]	; 0xf85
    3ae6:	4418      	add	r0, r3
} // 0xE9 - SBC - Immediate
    3ae8:	b280      	uxth	r0, r0
    3aea:	bd10      	pop	{r4, pc}
    3aec:	2001888c 	.word	0x2001888c
    3af0:	20017418 	.word	0x20017418

00003af4 <opcode_0xE5()>:
uint16_t opcode_0xE5() {
    3af4:	b510      	push	{r4, lr}
    3af6:	4c0b      	ldr	r4, [pc, #44]	; (3b24 <opcode_0xE5()+0x30>)
    3af8:	2100      	movs	r1, #0
    3afa:	8820      	ldrh	r0, [r4, #0]
    3afc:	3001      	adds	r0, #1
    3afe:	b280      	uxth	r0, r0
    3b00:	f7fe fdb6 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    3b04:	4b08      	ldr	r3, [pc, #32]	; (3b28 <opcode_0xE5()+0x34>)
    3b06:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3b08:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    3b0a:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    3b0c:	f7fe fdb0 	bl	2670 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_ZeroPage());
    3b10:	b280      	uxth	r0, r0
    3b12:	f7ff ff6f 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE5].length);
    3b16:	4a05      	ldr	r2, [pc, #20]	; (3b2c <opcode_0xE5()+0x38>)
    3b18:	8823      	ldrh	r3, [r4, #0]
    3b1a:	f892 0eb5 	ldrb.w	r0, [r2, #3765]	; 0xeb5
    3b1e:	4418      	add	r0, r3
} // 0xE5 - SBC - ZeroPage
    3b20:	b280      	uxth	r0, r0
    3b22:	bd10      	pop	{r4, pc}
    3b24:	2001888c 	.word	0x2001888c
    3b28:	2001888a 	.word	0x2001888a
    3b2c:	20017418 	.word	0x20017418

00003b30 <opcode_0xF5()>:
uint16_t opcode_0xF5() {
    3b30:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_ZeroPage_X());
    3b32:	f7ff f895 	bl	2c60 <Fetch_ZeroPage_X()>
    3b36:	b280      	uxth	r0, r0
    3b38:	f7ff ff5c 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF5].length);
    3b3c:	4a03      	ldr	r2, [pc, #12]	; (3b4c <opcode_0xF5()+0x1c>)
    3b3e:	4b04      	ldr	r3, [pc, #16]	; (3b50 <opcode_0xF5()+0x20>)
    3b40:	f892 01f5 	ldrb.w	r0, [r2, #501]	; 0x1f5
    3b44:	881b      	ldrh	r3, [r3, #0]
    3b46:	4418      	add	r0, r3
} // 0xF5 - SBC - ZeroPage , X
    3b48:	b280      	uxth	r0, r0
    3b4a:	bd08      	pop	{r3, pc}
    3b4c:	20018418 	.word	0x20018418
    3b50:	2001888c 	.word	0x2001888c

00003b54 <opcode_0xED()>:
uint16_t opcode_0xED() {
    3b54:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute());
    3b56:	f7ff f8c3 	bl	2ce0 <Fetch_Absolute()>
    3b5a:	b280      	uxth	r0, r0
    3b5c:	f7ff ff4a 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xED].length);
    3b60:	4a03      	ldr	r2, [pc, #12]	; (3b70 <opcode_0xED()+0x1c>)
    3b62:	4b04      	ldr	r3, [pc, #16]	; (3b74 <opcode_0xED()+0x20>)
    3b64:	f892 0055 	ldrb.w	r0, [r2, #85]	; 0x55
    3b68:	881b      	ldrh	r3, [r3, #0]
    3b6a:	4418      	add	r0, r3
} // 0xED - SBC - Absolute
    3b6c:	b280      	uxth	r0, r0
    3b6e:	bd08      	pop	{r3, pc}
    3b70:	20018418 	.word	0x20018418
    3b74:	2001888c 	.word	0x2001888c

00003b78 <opcode_0xFD()>:
uint16_t opcode_0xFD() {
    3b78:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute_X(1));
    3b7a:	2001      	movs	r0, #1
    3b7c:	f7ff f8cc 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    3b80:	b280      	uxth	r0, r0
    3b82:	f7ff ff37 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFD].length);
    3b86:	4a04      	ldr	r2, [pc, #16]	; (3b98 <opcode_0xFD()+0x20>)
    3b88:	4b04      	ldr	r3, [pc, #16]	; (3b9c <opcode_0xFD()+0x24>)
    3b8a:	f892 0395 	ldrb.w	r0, [r2, #917]	; 0x395
    3b8e:	881b      	ldrh	r3, [r3, #0]
    3b90:	4418      	add	r0, r3
} // 0xFD - SBC - Absolute , X
    3b92:	b280      	uxth	r0, r0
    3b94:	bd08      	pop	{r3, pc}
    3b96:	bf00      	nop
    3b98:	20018418 	.word	0x20018418
    3b9c:	2001888c 	.word	0x2001888c

00003ba0 <opcode_0xF9()>:
uint16_t opcode_0xF9() {
    3ba0:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute_Y(1));
    3ba2:	2001      	movs	r0, #1
    3ba4:	f7ff f8e8 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    3ba8:	b280      	uxth	r0, r0
    3baa:	f7ff ff23 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF9].length);
    3bae:	4a04      	ldr	r2, [pc, #16]	; (3bc0 <opcode_0xF9()+0x20>)
    3bb0:	4b04      	ldr	r3, [pc, #16]	; (3bc4 <opcode_0xF9()+0x24>)
    3bb2:	f892 02c5 	ldrb.w	r0, [r2, #709]	; 0x2c5
    3bb6:	881b      	ldrh	r3, [r3, #0]
    3bb8:	4418      	add	r0, r3
} // 0xF9 - SBC - Absolute , Y
    3bba:	b280      	uxth	r0, r0
    3bbc:	bd08      	pop	{r3, pc}
    3bbe:	bf00      	nop
    3bc0:	20018418 	.word	0x20018418
    3bc4:	2001888c 	.word	0x2001888c

00003bc8 <opcode_0xE1()>:
uint16_t opcode_0xE1() {
    3bc8:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    3bca:	f7ff f905 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    3bce:	b280      	uxth	r0, r0
    3bd0:	f7ff ff10 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE1].length);
    3bd4:	4a03      	ldr	r2, [pc, #12]	; (3be4 <opcode_0xE1()+0x1c>)
    3bd6:	4b04      	ldr	r3, [pc, #16]	; (3be8 <opcode_0xE1()+0x20>)
    3bd8:	f892 0de5 	ldrb.w	r0, [r2, #3557]	; 0xde5
    3bdc:	881b      	ldrh	r3, [r3, #0]
    3bde:	4418      	add	r0, r3
} // 0xE1 - SBC - Indexed Indirect X
    3be0:	b280      	uxth	r0, r0
    3be2:	bd08      	pop	{r3, pc}
    3be4:	20017418 	.word	0x20017418
    3be8:	2001888c 	.word	0x2001888c

00003bec <opcode_0xF1()>:
uint16_t opcode_0xF1() {
    3bec:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    3bee:	2001      	movs	r0, #1
    3bf0:	f7ff f91c 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    3bf4:	b280      	uxth	r0, r0
    3bf6:	f7ff fefd 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF1].length);
    3bfa:	4a04      	ldr	r2, [pc, #16]	; (3c0c <opcode_0xF1()+0x20>)
    3bfc:	4b04      	ldr	r3, [pc, #16]	; (3c10 <opcode_0xF1()+0x24>)
    3bfe:	f892 0125 	ldrb.w	r0, [r2, #293]	; 0x125
    3c02:	881b      	ldrh	r3, [r3, #0]
    3c04:	4418      	add	r0, r3
} // 0xF1 - SBC - Indirect Indexed  Y
    3c06:	b280      	uxth	r0, r0
    3c08:	bd08      	pop	{r3, pc}
    3c0a:	bf00      	nop
    3c0c:	20018418 	.word	0x20018418
    3c10:	2001888c 	.word	0x2001888c

00003c14 <opcode_0xEA()>:

// -------------------------------------------------
// Flag set/resets and NOP
// -------------------------------------------------
uint16_t opcode_0xEA() {
    3c14:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3c16:	4c07      	ldr	r4, [pc, #28]	; (3c34 <opcode_0xEA()+0x20>)
    3c18:	2100      	movs	r1, #0
    3c1a:	8820      	ldrh	r0, [r4, #0]
    3c1c:	3001      	adds	r0, #1
    3c1e:	b280      	uxth	r0, r0
    3c20:	f7fe fd26 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEA].length);
    3c24:	4a04      	ldr	r2, [pc, #16]	; (3c38 <opcode_0xEA()+0x24>)
    3c26:	8823      	ldrh	r3, [r4, #0]
    3c28:	f892 0fb9 	ldrb.w	r0, [r2, #4025]	; 0xfb9
    3c2c:	4418      	add	r0, r3
} // 0xEA - NOP   
    3c2e:	b280      	uxth	r0, r0
    3c30:	bd10      	pop	{r4, pc}
    3c32:	bf00      	nop
    3c34:	2001888c 	.word	0x2001888c
    3c38:	20017418 	.word	0x20017418

00003c3c <opcode_0x18()>:
uint16_t opcode_0x18() {
    3c3c:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3c3e:	4c09      	ldr	r4, [pc, #36]	; (3c64 <opcode_0x18()+0x28>)
    3c40:	2100      	movs	r1, #0
    3c42:	8820      	ldrh	r0, [r4, #0]
    3c44:	3001      	adds	r0, #1
    3c46:	b280      	uxth	r0, r0
    3c48:	f7fe fd12 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xFE;
    3c4c:	4a06      	ldr	r2, [pc, #24]	; (3c68 <opcode_0x18()+0x2c>)
    return(register_pc + opcode_info[0x18].length);
    3c4e:	4807      	ldr	r0, [pc, #28]	; (3c6c <opcode_0x18()+0x30>)
    register_flags = register_flags & 0xFE;
    3c50:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x18].length);
    3c52:	8821      	ldrh	r1, [r4, #0]
    3c54:	f890 0511 	ldrb.w	r0, [r0, #1297]	; 0x511
    register_flags = register_flags & 0xFE;
    3c58:	f023 0301 	bic.w	r3, r3, #1
    return(register_pc + opcode_info[0x18].length);
    3c5c:	4408      	add	r0, r1
    register_flags = register_flags & 0xFE;
    3c5e:	7013      	strb	r3, [r2, #0]
} // 0x18 - CLC - Clear Carry Flag  
    3c60:	b280      	uxth	r0, r0
    3c62:	bd10      	pop	{r4, pc}
    3c64:	2001888c 	.word	0x2001888c
    3c68:	20004968 	.word	0x20004968
    3c6c:	20015418 	.word	0x20015418

00003c70 <opcode_0xD8()>:
uint16_t opcode_0xD8() {
    3c70:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3c72:	4c09      	ldr	r4, [pc, #36]	; (3c98 <opcode_0xD8()+0x28>)
    3c74:	2100      	movs	r1, #0
    3c76:	8820      	ldrh	r0, [r4, #0]
    3c78:	3001      	adds	r0, #1
    3c7a:	b280      	uxth	r0, r0
    3c7c:	f7fe fcf8 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xF7;
    3c80:	4a06      	ldr	r2, [pc, #24]	; (3c9c <opcode_0xD8()+0x2c>)
    return(register_pc + opcode_info[0xD8].length);
    3c82:	4807      	ldr	r0, [pc, #28]	; (3ca0 <opcode_0xD8()+0x30>)
    register_flags = register_flags & 0xF7;
    3c84:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xD8].length);
    3c86:	8821      	ldrh	r1, [r4, #0]
    3c88:	f890 0c11 	ldrb.w	r0, [r0, #3089]	; 0xc11
    register_flags = register_flags & 0xF7;
    3c8c:	f023 0308 	bic.w	r3, r3, #8
    return(register_pc + opcode_info[0xD8].length);
    3c90:	4408      	add	r0, r1
    register_flags = register_flags & 0xF7;
    3c92:	7013      	strb	r3, [r2, #0]
} // 0xD8 - CLD - Clear Decimal Mode  
    3c94:	b280      	uxth	r0, r0
    3c96:	bd10      	pop	{r4, pc}
    3c98:	2001888c 	.word	0x2001888c
    3c9c:	20004968 	.word	0x20004968
    3ca0:	20017418 	.word	0x20017418

00003ca4 <opcode_0x58()>:
uint16_t opcode_0x58() {
    3ca4:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3ca6:	4c09      	ldr	r4, [pc, #36]	; (3ccc <opcode_0x58()+0x28>)
    3ca8:	2100      	movs	r1, #0
    3caa:	8820      	ldrh	r0, [r4, #0]
    3cac:	3001      	adds	r0, #1
    3cae:	b280      	uxth	r0, r0
    3cb0:	f7fe fcde 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xFB;
    3cb4:	4a06      	ldr	r2, [pc, #24]	; (3cd0 <opcode_0x58()+0x2c>)
    return(register_pc + opcode_info[0x58].length);
    3cb6:	4807      	ldr	r0, [pc, #28]	; (3cd4 <opcode_0x58()+0x30>)
    register_flags = register_flags & 0xFB;
    3cb8:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x58].length);
    3cba:	8821      	ldrh	r1, [r4, #0]
    3cbc:	f890 0211 	ldrb.w	r0, [r0, #529]	; 0x211
    register_flags = register_flags & 0xFB;
    3cc0:	f023 0304 	bic.w	r3, r3, #4
    return(register_pc + opcode_info[0x58].length);
    3cc4:	4408      	add	r0, r1
    register_flags = register_flags & 0xFB;
    3cc6:	7013      	strb	r3, [r2, #0]
} // 0x58 - CLI - Clear Interrupt Flag  
    3cc8:	b280      	uxth	r0, r0
    3cca:	bd10      	pop	{r4, pc}
    3ccc:	2001888c 	.word	0x2001888c
    3cd0:	20004968 	.word	0x20004968
    3cd4:	20016418 	.word	0x20016418

00003cd8 <opcode_0xB8()>:
uint16_t opcode_0xB8() {
    3cd8:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3cda:	4c09      	ldr	r4, [pc, #36]	; (3d00 <opcode_0xB8()+0x28>)
    3cdc:	2100      	movs	r1, #0
    3cde:	8820      	ldrh	r0, [r4, #0]
    3ce0:	3001      	adds	r0, #1
    3ce2:	b280      	uxth	r0, r0
    3ce4:	f7fe fcc4 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xBF;
    3ce8:	4a06      	ldr	r2, [pc, #24]	; (3d04 <opcode_0xB8()+0x2c>)
    return(register_pc + opcode_info[0xB8].length);
    3cea:	4807      	ldr	r0, [pc, #28]	; (3d08 <opcode_0xB8()+0x30>)
    register_flags = register_flags & 0xBF;
    3cec:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xB8].length);
    3cee:	8821      	ldrh	r1, [r4, #0]
    3cf0:	f890 0591 	ldrb.w	r0, [r0, #1425]	; 0x591
    register_flags = register_flags & 0xBF;
    3cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    return(register_pc + opcode_info[0xB8].length);
    3cf8:	4408      	add	r0, r1
    register_flags = register_flags & 0xBF;
    3cfa:	7013      	strb	r3, [r2, #0]
} // 0xB8 - CLV - Clear Overflow Flag  
    3cfc:	b280      	uxth	r0, r0
    3cfe:	bd10      	pop	{r4, pc}
    3d00:	2001888c 	.word	0x2001888c
    3d04:	20004968 	.word	0x20004968
    3d08:	20017418 	.word	0x20017418

00003d0c <opcode_0x38()>:
uint16_t opcode_0x38() {
    3d0c:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3d0e:	4c09      	ldr	r4, [pc, #36]	; (3d34 <opcode_0x38()+0x28>)
    3d10:	2100      	movs	r1, #0
    3d12:	8820      	ldrh	r0, [r4, #0]
    3d14:	3001      	adds	r0, #1
    3d16:	b280      	uxth	r0, r0
    3d18:	f7fe fcaa 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x01;
    3d1c:	4a06      	ldr	r2, [pc, #24]	; (3d38 <opcode_0x38()+0x2c>)
    return(register_pc + opcode_info[0x38].length);
    3d1e:	4807      	ldr	r0, [pc, #28]	; (3d3c <opcode_0x38()+0x30>)
    register_flags = register_flags | 0x01;
    3d20:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x38].length);
    3d22:	8821      	ldrh	r1, [r4, #0]
    3d24:	f890 0b91 	ldrb.w	r0, [r0, #2961]	; 0xb91
    register_flags = register_flags | 0x01;
    3d28:	f043 0301 	orr.w	r3, r3, #1
    return(register_pc + opcode_info[0x38].length);
    3d2c:	4408      	add	r0, r1
    register_flags = register_flags | 0x01;
    3d2e:	7013      	strb	r3, [r2, #0]
} // 0x38 - SEC - Set Carry Flag  
    3d30:	b280      	uxth	r0, r0
    3d32:	bd10      	pop	{r4, pc}
    3d34:	2001888c 	.word	0x2001888c
    3d38:	20004968 	.word	0x20004968
    3d3c:	20015418 	.word	0x20015418

00003d40 <opcode_0x78()>:
uint16_t opcode_0x78() {
    3d40:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3d42:	4c09      	ldr	r4, [pc, #36]	; (3d68 <opcode_0x78()+0x28>)
    3d44:	2100      	movs	r1, #0
    3d46:	8820      	ldrh	r0, [r4, #0]
    3d48:	3001      	adds	r0, #1
    3d4a:	b280      	uxth	r0, r0
    3d4c:	f7fe fc90 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x04;
    3d50:	4a06      	ldr	r2, [pc, #24]	; (3d6c <opcode_0x78()+0x2c>)
    return(register_pc + opcode_info[0x78].length);
    3d52:	4807      	ldr	r0, [pc, #28]	; (3d70 <opcode_0x78()+0x30>)
    register_flags = register_flags | 0x04;
    3d54:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0x78].length);
    3d56:	8821      	ldrh	r1, [r4, #0]
    3d58:	f890 0891 	ldrb.w	r0, [r0, #2193]	; 0x891
    register_flags = register_flags | 0x04;
    3d5c:	f043 0304 	orr.w	r3, r3, #4
    return(register_pc + opcode_info[0x78].length);
    3d60:	4408      	add	r0, r1
    register_flags = register_flags | 0x04;
    3d62:	7013      	strb	r3, [r2, #0]
} // 0x78 - SEI - Set Interrupt Flag  
    3d64:	b280      	uxth	r0, r0
    3d66:	bd10      	pop	{r4, pc}
    3d68:	2001888c 	.word	0x2001888c
    3d6c:	20004968 	.word	0x20004968
    3d70:	20016418 	.word	0x20016418

00003d74 <opcode_0xF8()>:
uint16_t opcode_0xF8() {
    3d74:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3d76:	4c09      	ldr	r4, [pc, #36]	; (3d9c <opcode_0xF8()+0x28>)
    3d78:	2100      	movs	r1, #0
    3d7a:	8820      	ldrh	r0, [r4, #0]
    3d7c:	3001      	adds	r0, #1
    3d7e:	b280      	uxth	r0, r0
    3d80:	f7fe fc76 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x08;
    3d84:	4a06      	ldr	r2, [pc, #24]	; (3da0 <opcode_0xF8()+0x2c>)
    return(register_pc + opcode_info[0xF8].length);
    3d86:	4807      	ldr	r0, [pc, #28]	; (3da4 <opcode_0xF8()+0x30>)
    register_flags = register_flags | 0x08;
    3d88:	7813      	ldrb	r3, [r2, #0]
    return(register_pc + opcode_info[0xF8].length);
    3d8a:	8821      	ldrh	r1, [r4, #0]
    3d8c:	f890 0291 	ldrb.w	r0, [r0, #657]	; 0x291
    register_flags = register_flags | 0x08;
    3d90:	f043 0308 	orr.w	r3, r3, #8
    return(register_pc + opcode_info[0xF8].length);
    3d94:	4408      	add	r0, r1
    register_flags = register_flags | 0x08;
    3d96:	7013      	strb	r3, [r2, #0]
} // 0xF8 - SED - Set Decimal Mode  
    3d98:	b280      	uxth	r0, r0
    3d9a:	bd10      	pop	{r4, pc}
    3d9c:	2001888c 	.word	0x2001888c
    3da0:	20004968 	.word	0x20004968
    3da4:	20018418 	.word	0x20018418

00003da8 <opcode_0xCA()>:

// -------------------------------------------------
// Increment/Decrements
// -------------------------------------------------
uint16_t opcode_0xCA() {
    3da8:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3daa:	4c11      	ldr	r4, [pc, #68]	; (3df0 <opcode_0xCA()+0x48>)
    3dac:	2100      	movs	r1, #0
    3dae:	8820      	ldrh	r0, [r4, #0]
    3db0:	3001      	adds	r0, #1
    3db2:	b280      	uxth	r0, r0
    3db4:	f7fe fc5c 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_x - 1;
    3db8:	4a0e      	ldr	r2, [pc, #56]	; (3df4 <opcode_0xCA()+0x4c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3dba:	490f      	ldr	r1, [pc, #60]	; (3df8 <opcode_0xCA()+0x50>)
    3dbc:	7813      	ldrb	r3, [r2, #0]
    3dbe:	3b01      	subs	r3, #1
    3dc0:	b2db      	uxtb	r3, r3
    3dc2:	0618      	lsls	r0, r3, #24
    3dc4:	7013      	strb	r3, [r2, #0]
    3dc6:	780a      	ldrb	r2, [r1, #0]
    3dc8:	d40d      	bmi.n	3de6 <opcode_0xCA()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3dca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3dce:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3dd0:	b95b      	cbnz	r3, 3dea <opcode_0xCA()+0x42>
    3dd2:	f042 0202 	orr.w	r2, r2, #2
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xCA].length);
    3dd6:	4809      	ldr	r0, [pc, #36]	; (3dfc <opcode_0xCA()+0x54>)
    3dd8:	8823      	ldrh	r3, [r4, #0]
    3dda:	f890 0939 	ldrb.w	r0, [r0, #2361]	; 0x939
    3dde:	700a      	strb	r2, [r1, #0]
    3de0:	4418      	add	r0, r3
} // 0xCA - DEX - Decrement X  
    3de2:	b280      	uxth	r0, r0
    3de4:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3dea:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3dee:	e7f2      	b.n	3dd6 <opcode_0xCA()+0x2e>
    3df0:	2001888c 	.word	0x2001888c
    3df4:	200188a4 	.word	0x200188a4
    3df8:	20004968 	.word	0x20004968
    3dfc:	20017418 	.word	0x20017418

00003e00 <opcode_0x88()>:
uint16_t opcode_0x88() {
    3e00:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3e02:	4c11      	ldr	r4, [pc, #68]	; (3e48 <opcode_0x88()+0x48>)
    3e04:	2100      	movs	r1, #0
    3e06:	8820      	ldrh	r0, [r4, #0]
    3e08:	3001      	adds	r0, #1
    3e0a:	b280      	uxth	r0, r0
    3e0c:	f7fe fc30 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_y - 1;
    3e10:	4a0e      	ldr	r2, [pc, #56]	; (3e4c <opcode_0x88()+0x4c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3e12:	490f      	ldr	r1, [pc, #60]	; (3e50 <opcode_0x88()+0x50>)
    3e14:	7813      	ldrb	r3, [r2, #0]
    3e16:	3b01      	subs	r3, #1
    3e18:	b2db      	uxtb	r3, r3
    3e1a:	0618      	lsls	r0, r3, #24
    3e1c:	7013      	strb	r3, [r2, #0]
    3e1e:	780a      	ldrb	r2, [r1, #0]
    3e20:	d40d      	bmi.n	3e3e <opcode_0x88()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3e22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3e26:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3e28:	b95b      	cbnz	r3, 3e42 <opcode_0x88()+0x42>
    3e2a:	f042 0202 	orr.w	r2, r2, #2
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0x88].length);
    3e2e:	4809      	ldr	r0, [pc, #36]	; (3e54 <opcode_0x88()+0x54>)
    3e30:	8823      	ldrh	r3, [r4, #0]
    3e32:	f890 0bd1 	ldrb.w	r0, [r0, #3025]	; 0xbd1
    3e36:	700a      	strb	r2, [r1, #0]
    3e38:	4418      	add	r0, r3
} // 0x88 - DEY - Decrement Y  
    3e3a:	b280      	uxth	r0, r0
    3e3c:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3e3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3e42:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3e46:	e7f2      	b.n	3e2e <opcode_0x88()+0x2e>
    3e48:	2001888c 	.word	0x2001888c
    3e4c:	200188a5 	.word	0x200188a5
    3e50:	20004968 	.word	0x20004968
    3e54:	20016418 	.word	0x20016418

00003e58 <opcode_0xE8()>:
uint16_t opcode_0xE8() {
    3e58:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3e5a:	4c11      	ldr	r4, [pc, #68]	; (3ea0 <opcode_0xE8()+0x48>)
    3e5c:	2100      	movs	r1, #0
    3e5e:	8820      	ldrh	r0, [r4, #0]
    3e60:	3001      	adds	r0, #1
    3e62:	b280      	uxth	r0, r0
    3e64:	f7fe fc04 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_x + 1;
    3e68:	4a0e      	ldr	r2, [pc, #56]	; (3ea4 <opcode_0xE8()+0x4c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3e6a:	490f      	ldr	r1, [pc, #60]	; (3ea8 <opcode_0xE8()+0x50>)
    3e6c:	7813      	ldrb	r3, [r2, #0]
    3e6e:	3301      	adds	r3, #1
    3e70:	b2db      	uxtb	r3, r3
    3e72:	0618      	lsls	r0, r3, #24
    3e74:	7013      	strb	r3, [r2, #0]
    3e76:	780a      	ldrb	r2, [r1, #0]
    3e78:	d40d      	bmi.n	3e96 <opcode_0xE8()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3e7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3e7e:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3e80:	b95b      	cbnz	r3, 3e9a <opcode_0xE8()+0x42>
    3e82:	f042 0202 	orr.w	r2, r2, #2
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xE8].length);
    3e86:	4809      	ldr	r0, [pc, #36]	; (3eac <opcode_0xE8()+0x54>)
    3e88:	8823      	ldrh	r3, [r4, #0]
    3e8a:	f890 0f51 	ldrb.w	r0, [r0, #3921]	; 0xf51
    3e8e:	700a      	strb	r2, [r1, #0]
    3e90:	4418      	add	r0, r3
} // 0xE8 - INX - Increment X  
    3e92:	b280      	uxth	r0, r0
    3e94:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3e96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3e9a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3e9e:	e7f2      	b.n	3e86 <opcode_0xE8()+0x2e>
    3ea0:	2001888c 	.word	0x2001888c
    3ea4:	200188a4 	.word	0x200188a4
    3ea8:	20004968 	.word	0x20004968
    3eac:	20017418 	.word	0x20017418

00003eb0 <opcode_0xC8()>:
uint16_t opcode_0xC8() {
    3eb0:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3eb2:	4c11      	ldr	r4, [pc, #68]	; (3ef8 <opcode_0xC8()+0x48>)
    3eb4:	2100      	movs	r1, #0
    3eb6:	8820      	ldrh	r0, [r4, #0]
    3eb8:	3001      	adds	r0, #1
    3eba:	b280      	uxth	r0, r0
    3ebc:	f7fe fbd8 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_y + 1;
    3ec0:	4a0e      	ldr	r2, [pc, #56]	; (3efc <opcode_0xC8()+0x4c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3ec2:	490f      	ldr	r1, [pc, #60]	; (3f00 <opcode_0xC8()+0x50>)
    3ec4:	7813      	ldrb	r3, [r2, #0]
    3ec6:	3301      	adds	r3, #1
    3ec8:	b2db      	uxtb	r3, r3
    3eca:	0618      	lsls	r0, r3, #24
    3ecc:	7013      	strb	r3, [r2, #0]
    3ece:	780a      	ldrb	r2, [r1, #0]
    3ed0:	d40d      	bmi.n	3eee <opcode_0xC8()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3ed6:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3ed8:	b95b      	cbnz	r3, 3ef2 <opcode_0xC8()+0x42>
    3eda:	f042 0202 	orr.w	r2, r2, #2
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xC8].length);
    3ede:	4809      	ldr	r0, [pc, #36]	; (3f04 <opcode_0xC8()+0x54>)
    3ee0:	8823      	ldrh	r3, [r4, #0]
    3ee2:	f890 08d1 	ldrb.w	r0, [r0, #2257]	; 0x8d1
    3ee6:	700a      	strb	r2, [r1, #0]
    3ee8:	4418      	add	r0, r3
} // 0xC8 - INY - Increment Y  
    3eea:	b280      	uxth	r0, r0
    3eec:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3eee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3ef2:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    3ef6:	e7f2      	b.n	3ede <opcode_0xC8()+0x2e>
    3ef8:	2001888c 	.word	0x2001888c
    3efc:	200188a5 	.word	0x200188a5
    3f00:	20004968 	.word	0x20004968
    3f04:	20017418 	.word	0x20017418

00003f08 <opcode_0xAA()>:

// -------------------------------------------------
// Transfers
// -------------------------------------------------
uint16_t opcode_0xAA() {
    3f08:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3f0a:	4c11      	ldr	r4, [pc, #68]	; (3f50 <opcode_0xAA()+0x48>)
    3f0c:	2100      	movs	r1, #0
    3f0e:	8820      	ldrh	r0, [r4, #0]
    3f10:	3001      	adds	r0, #1
    3f12:	b280      	uxth	r0, r0
    3f14:	f7fe fbac 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_a;
    3f18:	4a0e      	ldr	r2, [pc, #56]	; (3f54 <opcode_0xAA()+0x4c>)
    3f1a:	4b0f      	ldr	r3, [pc, #60]	; (3f58 <opcode_0xAA()+0x50>)
    3f1c:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f1e:	4a0f      	ldr	r2, [pc, #60]	; (3f5c <opcode_0xAA()+0x54>)
    3f20:	0608      	lsls	r0, r1, #24
    3f22:	7019      	strb	r1, [r3, #0]
    3f24:	7813      	ldrb	r3, [r2, #0]
    3f26:	d40d      	bmi.n	3f44 <opcode_0xAA()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f2c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f2e:	b959      	cbnz	r1, 3f48 <opcode_0xAA()+0x40>
    3f30:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xAA].length);
    3f34:	480a      	ldr	r0, [pc, #40]	; (3f60 <opcode_0xAA()+0x58>)
    3f36:	8821      	ldrh	r1, [r4, #0]
    3f38:	f890 02b9 	ldrb.w	r0, [r0, #697]	; 0x2b9
    3f3c:	7013      	strb	r3, [r2, #0]
    3f3e:	4408      	add	r0, r1
} // 0xAA - TAX - Transfer Accumulator to X 
    3f40:	b280      	uxth	r0, r0
    3f42:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3f48:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3f4c:	e7f2      	b.n	3f34 <opcode_0xAA()+0x2c>
    3f4e:	bf00      	nop
    3f50:	2001888c 	.word	0x2001888c
    3f54:	200188a3 	.word	0x200188a3
    3f58:	200188a4 	.word	0x200188a4
    3f5c:	20004968 	.word	0x20004968
    3f60:	20017418 	.word	0x20017418

00003f64 <opcode_0xA8()>:
uint16_t opcode_0xA8() {
    3f64:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3f66:	4c11      	ldr	r4, [pc, #68]	; (3fac <opcode_0xA8()+0x48>)
    3f68:	2100      	movs	r1, #0
    3f6a:	8820      	ldrh	r0, [r4, #0]
    3f6c:	3001      	adds	r0, #1
    3f6e:	b280      	uxth	r0, r0
    3f70:	f7fe fb7e 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_a;
    3f74:	4a0e      	ldr	r2, [pc, #56]	; (3fb0 <opcode_0xA8()+0x4c>)
    3f76:	4b0f      	ldr	r3, [pc, #60]	; (3fb4 <opcode_0xA8()+0x50>)
    3f78:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3f7a:	4a0f      	ldr	r2, [pc, #60]	; (3fb8 <opcode_0xA8()+0x54>)
    3f7c:	0608      	lsls	r0, r1, #24
    3f7e:	7019      	strb	r1, [r3, #0]
    3f80:	7813      	ldrb	r3, [r2, #0]
    3f82:	d40d      	bmi.n	3fa0 <opcode_0xA8()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f88:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3f8a:	b959      	cbnz	r1, 3fa4 <opcode_0xA8()+0x40>
    3f8c:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xA8].length);
    3f90:	480a      	ldr	r0, [pc, #40]	; (3fbc <opcode_0xA8()+0x58>)
    3f92:	8821      	ldrh	r1, [r4, #0]
    3f94:	f890 0251 	ldrb.w	r0, [r0, #593]	; 0x251
    3f98:	7013      	strb	r3, [r2, #0]
    3f9a:	4408      	add	r0, r1
} // 0xA8 - TAY - Transfer Accumulator to Y
    3f9c:	b280      	uxth	r0, r0
    3f9e:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3fa4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3fa8:	e7f2      	b.n	3f90 <opcode_0xA8()+0x2c>
    3faa:	bf00      	nop
    3fac:	2001888c 	.word	0x2001888c
    3fb0:	200188a3 	.word	0x200188a3
    3fb4:	200188a5 	.word	0x200188a5
    3fb8:	20004968 	.word	0x20004968
    3fbc:	20017418 	.word	0x20017418

00003fc0 <opcode_0xBA()>:
uint16_t opcode_0xBA() {
    3fc0:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    3fc2:	4c11      	ldr	r4, [pc, #68]	; (4008 <opcode_0xBA()+0x48>)
    3fc4:	2100      	movs	r1, #0
    3fc6:	8820      	ldrh	r0, [r4, #0]
    3fc8:	3001      	adds	r0, #1
    3fca:	b280      	uxth	r0, r0
    3fcc:	f7fe fb50 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_sp;
    3fd0:	4a0e      	ldr	r2, [pc, #56]	; (400c <opcode_0xBA()+0x4c>)
    3fd2:	4b0f      	ldr	r3, [pc, #60]	; (4010 <opcode_0xBA()+0x50>)
    3fd4:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3fd6:	4a0f      	ldr	r2, [pc, #60]	; (4014 <opcode_0xBA()+0x54>)
    3fd8:	0608      	lsls	r0, r1, #24
    3fda:	7019      	strb	r1, [r3, #0]
    3fdc:	7813      	ldrb	r3, [r2, #0]
    3fde:	d40d      	bmi.n	3ffc <opcode_0xBA()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3fe4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3fe6:	b959      	cbnz	r1, 4000 <opcode_0xBA()+0x40>
    3fe8:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xBA].length);
    3fec:	480a      	ldr	r0, [pc, #40]	; (4018 <opcode_0xBA()+0x58>)
    3fee:	8821      	ldrh	r1, [r4, #0]
    3ff0:	f890 05f9 	ldrb.w	r0, [r0, #1529]	; 0x5f9
    3ff4:	7013      	strb	r3, [r2, #0]
    3ff6:	4408      	add	r0, r1
} // 0xBA - TSX - Transfer Stack Pointer to X
    3ff8:	b280      	uxth	r0, r0
    3ffa:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4000:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4004:	e7f2      	b.n	3fec <opcode_0xBA()+0x2c>
    4006:	bf00      	nop
    4008:	2001888c 	.word	0x2001888c
    400c:	20004969 	.word	0x20004969
    4010:	200188a4 	.word	0x200188a4
    4014:	20004968 	.word	0x20004968
    4018:	20017418 	.word	0x20017418

0000401c <opcode_0x8A()>:
uint16_t opcode_0x8A() {
    401c:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    401e:	4c11      	ldr	r4, [pc, #68]	; (4064 <opcode_0x8A()+0x48>)
    4020:	2100      	movs	r1, #0
    4022:	8820      	ldrh	r0, [r4, #0]
    4024:	3001      	adds	r0, #1
    4026:	b280      	uxth	r0, r0
    4028:	f7fe fb22 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_a = register_x;
    402c:	4a0e      	ldr	r2, [pc, #56]	; (4068 <opcode_0x8A()+0x4c>)
    402e:	4b0f      	ldr	r3, [pc, #60]	; (406c <opcode_0x8A()+0x50>)
    4030:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4032:	4a0f      	ldr	r2, [pc, #60]	; (4070 <opcode_0x8A()+0x54>)
    4034:	0608      	lsls	r0, r1, #24
    4036:	7019      	strb	r1, [r3, #0]
    4038:	7813      	ldrb	r3, [r2, #0]
    403a:	d40d      	bmi.n	4058 <opcode_0x8A()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    403c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4040:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4042:	b959      	cbnz	r1, 405c <opcode_0x8A()+0x40>
    4044:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x8A].length);
    4048:	480a      	ldr	r0, [pc, #40]	; (4074 <opcode_0x8A()+0x58>)
    404a:	8821      	ldrh	r1, [r4, #0]
    404c:	f890 0c39 	ldrb.w	r0, [r0, #3129]	; 0xc39
    4050:	7013      	strb	r3, [r2, #0]
    4052:	4408      	add	r0, r1
} // 0x8A - TXA - Transfer X to Accumulator
    4054:	b280      	uxth	r0, r0
    4056:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    405c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4060:	e7f2      	b.n	4048 <opcode_0x8A()+0x2c>
    4062:	bf00      	nop
    4064:	2001888c 	.word	0x2001888c
    4068:	200188a4 	.word	0x200188a4
    406c:	200188a3 	.word	0x200188a3
    4070:	20004968 	.word	0x20004968
    4074:	20016418 	.word	0x20016418

00004078 <opcode_0x9A()>:
uint16_t opcode_0x9A() {
    4078:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    407a:	4c09      	ldr	r4, [pc, #36]	; (40a0 <opcode_0x9A()+0x28>)
    407c:	2100      	movs	r1, #0
    407e:	8820      	ldrh	r0, [r4, #0]
    4080:	3001      	adds	r0, #1
    4082:	b280      	uxth	r0, r0
    4084:	f7fe faf4 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_sp = register_x;
    return(register_pc + opcode_info[0x9A].length);
    4088:	4b06      	ldr	r3, [pc, #24]	; (40a4 <opcode_0x9A()+0x2c>)
    408a:	8821      	ldrh	r1, [r4, #0]
    408c:	f893 0f79 	ldrb.w	r0, [r3, #3961]	; 0xf79
    register_sp = register_x;
    4090:	4a05      	ldr	r2, [pc, #20]	; (40a8 <opcode_0x9A()+0x30>)
    4092:	4b06      	ldr	r3, [pc, #24]	; (40ac <opcode_0x9A()+0x34>)
    return(register_pc + opcode_info[0x9A].length);
    4094:	4408      	add	r0, r1
    register_sp = register_x;
    4096:	7812      	ldrb	r2, [r2, #0]
} // 0x9A - TXS - Transfer X to Stack Pointer
    4098:	b280      	uxth	r0, r0
    register_sp = register_x;
    409a:	701a      	strb	r2, [r3, #0]
} // 0x9A - TXS - Transfer X to Stack Pointer
    409c:	bd10      	pop	{r4, pc}
    409e:	bf00      	nop
    40a0:	2001888c 	.word	0x2001888c
    40a4:	20016418 	.word	0x20016418
    40a8:	200188a4 	.word	0x200188a4
    40ac:	20004969 	.word	0x20004969

000040b0 <opcode_0x98()>:
uint16_t opcode_0x98() {
    40b0:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    40b2:	4c11      	ldr	r4, [pc, #68]	; (40f8 <opcode_0x98()+0x48>)
    40b4:	2100      	movs	r1, #0
    40b6:	8820      	ldrh	r0, [r4, #0]
    40b8:	3001      	adds	r0, #1
    40ba:	b280      	uxth	r0, r0
    40bc:	f7fe fad8 	bl	2670 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_a = register_y;
    40c0:	4a0e      	ldr	r2, [pc, #56]	; (40fc <opcode_0x98()+0x4c>)
    40c2:	4b0f      	ldr	r3, [pc, #60]	; (4100 <opcode_0x98()+0x50>)
    40c4:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    40c6:	4a0f      	ldr	r2, [pc, #60]	; (4104 <opcode_0x98()+0x54>)
    40c8:	0608      	lsls	r0, r1, #24
    40ca:	7019      	strb	r1, [r3, #0]
    40cc:	7813      	ldrb	r3, [r2, #0]
    40ce:	d40d      	bmi.n	40ec <opcode_0x98()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    40d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    40d4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    40d6:	b959      	cbnz	r1, 40f0 <opcode_0x98()+0x40>
    40d8:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x98].length);
    40dc:	480a      	ldr	r0, [pc, #40]	; (4108 <opcode_0x98()+0x58>)
    40de:	8821      	ldrh	r1, [r4, #0]
    40e0:	f890 0f11 	ldrb.w	r0, [r0, #3857]	; 0xf11
    40e4:	7013      	strb	r3, [r2, #0]
    40e6:	4408      	add	r0, r1
} // 0x98 - TYA - Transfer Y to Accumulator
    40e8:	b280      	uxth	r0, r0
    40ea:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    40ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    40f0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    40f4:	e7f2      	b.n	40dc <opcode_0x98()+0x2c>
    40f6:	bf00      	nop
    40f8:	2001888c 	.word	0x2001888c
    40fc:	200188a5 	.word	0x200188a5
    4100:	200188a3 	.word	0x200188a3
    4104:	20004968 	.word	0x20004968
    4108:	20016418 	.word	0x20016418

0000410c <opcode_0x08()>:

// -------------------------------------------------
// PUSH/POP Flags and Accumulator 
// -------------------------------------------------
uint16_t opcode_0x08() {
    410c:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    410e:	4d0d      	ldr	r5, [pc, #52]	; (4144 <opcode_0x08()+0x38>)
    4110:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    4112:	4c0d      	ldr	r4, [pc, #52]	; (4148 <opcode_0x08()+0x3c>)
    4114:	8828      	ldrh	r0, [r5, #0]
    4116:	3001      	adds	r0, #1
    4118:	b280      	uxth	r0, r0
    411a:	f7fe faa9 	bl	2670 <read_byte(unsigned short, bool)>
    push(register_flags | 0x30);
    411e:	4b0b      	ldr	r3, [pc, #44]	; (414c <opcode_0x08()+0x40>)
    4120:	7820      	ldrb	r0, [r4, #0]
    4122:	7819      	ldrb	r1, [r3, #0]
    4124:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4128:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    412c:	f7fe fc5c 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x08].length);
    4130:	4907      	ldr	r1, [pc, #28]	; (4150 <opcode_0x08()+0x44>)
    register_sp = register_sp - 1;
    4132:	7823      	ldrb	r3, [r4, #0]
    4134:	882a      	ldrh	r2, [r5, #0]
    4136:	f891 01d1 	ldrb.w	r0, [r1, #465]	; 0x1d1
    413a:	3b01      	subs	r3, #1
    413c:	4410      	add	r0, r2
    413e:	7023      	strb	r3, [r4, #0]
} // 0x08 - PHP - Push Flags to Stack
    4140:	b280      	uxth	r0, r0
    4142:	bd38      	pop	{r3, r4, r5, pc}
    4144:	2001888c 	.word	0x2001888c
    4148:	20004969 	.word	0x20004969
    414c:	20004968 	.word	0x20004968
    4150:	20015418 	.word	0x20015418

00004154 <opcode_0x48()>:
uint16_t opcode_0x48() {
    4154:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    4156:	4d0c      	ldr	r5, [pc, #48]	; (4188 <opcode_0x48()+0x34>)
    4158:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    415a:	4c0c      	ldr	r4, [pc, #48]	; (418c <opcode_0x48()+0x38>)
    415c:	8828      	ldrh	r0, [r5, #0]
    415e:	3001      	adds	r0, #1
    4160:	b280      	uxth	r0, r0
    4162:	f7fe fa85 	bl	2670 <read_byte(unsigned short, bool)>
    4166:	7820      	ldrb	r0, [r4, #0]
    push(register_a);
    4168:	4b09      	ldr	r3, [pc, #36]	; (4190 <opcode_0x48()+0x3c>)
    416a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    416e:	7819      	ldrb	r1, [r3, #0]
    4170:	f7fe fc3a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x48].length);
    4174:	4907      	ldr	r1, [pc, #28]	; (4194 <opcode_0x48()+0x40>)
    register_sp = register_sp - 1;
    4176:	7823      	ldrb	r3, [r4, #0]
    4178:	882a      	ldrh	r2, [r5, #0]
    417a:	f891 0ed1 	ldrb.w	r0, [r1, #3793]	; 0xed1
    417e:	3b01      	subs	r3, #1
    4180:	4410      	add	r0, r2
    4182:	7023      	strb	r3, [r4, #0]
} // 0x48 - PHA - Push Accumulator to the stack
    4184:	b280      	uxth	r0, r0
    4186:	bd38      	pop	{r3, r4, r5, pc}
    4188:	2001888c 	.word	0x2001888c
    418c:	20004969 	.word	0x20004969
    4190:	200188a3 	.word	0x200188a3
    4194:	20015418 	.word	0x20015418

00004198 <opcode_0x28()>:
uint16_t opcode_0x28() {
    4198:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    419a:	4d11      	ldr	r5, [pc, #68]	; (41e0 <opcode_0x28()+0x48>)
    419c:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    419e:	4c11      	ldr	r4, [pc, #68]	; (41e4 <opcode_0x28()+0x4c>)
    read_byte(register_pc+1, false);
    41a0:	8828      	ldrh	r0, [r5, #0]
    41a2:	3001      	adds	r0, #1
    41a4:	b280      	uxth	r0, r0
    41a6:	f7fe fa63 	bl	2670 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    41aa:	7820      	ldrb	r0, [r4, #0]
    41ac:	2100      	movs	r1, #0
    41ae:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    41b2:	f7fe fa5d 	bl	2670 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    41b6:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    41b8:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    41ba:	3301      	adds	r3, #1
    41bc:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    41be:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    41c2:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    41c4:	f7fe fa54 	bl	2670 <read_byte(unsigned short, bool)>
    register_flags = (pop() | 0x30);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x28].length);
    41c8:	4b07      	ldr	r3, [pc, #28]	; (41e8 <opcode_0x28()+0x50>)
    41ca:	882a      	ldrh	r2, [r5, #0]
    register_flags = (pop() | 0x30);
    41cc:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    41d0:	4906      	ldr	r1, [pc, #24]	; (41ec <opcode_0x28()+0x54>)
    return(register_pc + opcode_info[0x28].length);
    41d2:	f893 3851 	ldrb.w	r3, [r3, #2129]	; 0x851
    register_flags = (pop() | 0x30);
    41d6:	7008      	strb	r0, [r1, #0]
    return(register_pc + opcode_info[0x28].length);
    41d8:	1898      	adds	r0, r3, r2
} // 0x28 - PLP - Pop Flags from Stack
    41da:	b280      	uxth	r0, r0
    41dc:	bd38      	pop	{r3, r4, r5, pc}
    41de:	bf00      	nop
    41e0:	2001888c 	.word	0x2001888c
    41e4:	20004969 	.word	0x20004969
    41e8:	20015418 	.word	0x20015418
    41ec:	20004968 	.word	0x20004968

000041f0 <opcode_0x68()>:
uint16_t opcode_0x68() {
    41f0:	b538      	push	{r3, r4, r5, lr}
    read_byte(register_pc+1, false);
    41f2:	4c18      	ldr	r4, [pc, #96]	; (4254 <opcode_0x68()+0x64>)
    41f4:	2100      	movs	r1, #0
    read_byte(register_sp_fixed, false);
    41f6:	4d18      	ldr	r5, [pc, #96]	; (4258 <opcode_0x68()+0x68>)
    read_byte(register_pc+1, false);
    41f8:	8820      	ldrh	r0, [r4, #0]
    41fa:	3001      	adds	r0, #1
    41fc:	b280      	uxth	r0, r0
    41fe:	f7fe fa37 	bl	2670 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    4202:	7828      	ldrb	r0, [r5, #0]
    4204:	2100      	movs	r1, #0
    4206:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    420a:	f7fe fa31 	bl	2670 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    420e:	782b      	ldrb	r3, [r5, #0]
    temp = read_byte(register_sp_fixed, false);
    4210:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4212:	3301      	adds	r3, #1
    4214:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4216:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    421a:	702b      	strb	r3, [r5, #0]
    temp = read_byte(register_sp_fixed, false);
    421c:	f7fe fa28 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = pop();
    4220:	4b0e      	ldr	r3, [pc, #56]	; (425c <opcode_0x68()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4222:	4a0f      	ldr	r2, [pc, #60]	; (4260 <opcode_0x68()+0x70>)
    4224:	0601      	lsls	r1, r0, #24
    4226:	7018      	strb	r0, [r3, #0]
    4228:	7813      	ldrb	r3, [r2, #0]
    422a:	d40d      	bmi.n	4248 <opcode_0x68()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    422c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4230:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4232:	b958      	cbnz	r0, 424c <opcode_0x68()+0x5c>
    4234:	f043 0302 	orr.w	r3, r3, #2
    Calc_Flags_NEGATIVE_ZERO(register_a);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x68].length);
    4238:	480a      	ldr	r0, [pc, #40]	; (4264 <opcode_0x68()+0x74>)
    423a:	8821      	ldrh	r1, [r4, #0]
    423c:	f890 0551 	ldrb.w	r0, [r0, #1361]	; 0x551
    4240:	7013      	strb	r3, [r2, #0]
    4242:	4408      	add	r0, r1
} // 0x68 - PLA - Pop Accumulator from Stack
    4244:	b280      	uxth	r0, r0
    4246:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    424c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4250:	e7f2      	b.n	4238 <opcode_0x68()+0x48>
    4252:	bf00      	nop
    4254:	2001888c 	.word	0x2001888c
    4258:	20004969 	.word	0x20004969
    425c:	200188a3 	.word	0x200188a3
    4260:	20004968 	.word	0x20004968
    4264:	20016418 	.word	0x20016418

00004268 <opcode_0x29()>:

// -------------------------------------------------
// AND
// -------------------------------------------------
uint16_t opcode_0x29() {
    4268:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    426a:	4c11      	ldr	r4, [pc, #68]	; (42b0 <opcode_0x29()+0x48>)
    426c:	2100      	movs	r1, #0
    426e:	8820      	ldrh	r0, [r4, #0]
    4270:	3001      	adds	r0, #1
    4272:	b280      	uxth	r0, r0
    4274:	f7fe f9fc 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_Immediate(1));
    4278:	4b0e      	ldr	r3, [pc, #56]	; (42b4 <opcode_0x29()+0x4c>)
    427a:	781a      	ldrb	r2, [r3, #0]
    427c:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    427e:	4a0e      	ldr	r2, [pc, #56]	; (42b8 <opcode_0x29()+0x50>)
    4280:	0601      	lsls	r1, r0, #24
    4282:	7018      	strb	r0, [r3, #0]
    4284:	7813      	ldrb	r3, [r2, #0]
    4286:	d40d      	bmi.n	42a4 <opcode_0x29()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    428c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    428e:	b958      	cbnz	r0, 42a8 <opcode_0x29()+0x40>
    4290:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x29].length);
    4294:	4809      	ldr	r0, [pc, #36]	; (42bc <opcode_0x29()+0x54>)
    4296:	8821      	ldrh	r1, [r4, #0]
    4298:	f890 0885 	ldrb.w	r0, [r0, #2181]	; 0x885
    429c:	7013      	strb	r3, [r2, #0]
    429e:	4408      	add	r0, r1
} // 0x29 - AND - Immediate
    42a0:	b280      	uxth	r0, r0
    42a2:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    42a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    42a8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    42ac:	e7f2      	b.n	4294 <opcode_0x29()+0x2c>
    42ae:	bf00      	nop
    42b0:	2001888c 	.word	0x2001888c
    42b4:	200188a3 	.word	0x200188a3
    42b8:	20004968 	.word	0x20004968
    42bc:	20015418 	.word	0x20015418

000042c0 <opcode_0x25()>:
uint16_t opcode_0x25() {
    42c0:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    42c2:	4c14      	ldr	r4, [pc, #80]	; (4314 <opcode_0x25()+0x54>)
    42c4:	2100      	movs	r1, #0
    42c6:	8820      	ldrh	r0, [r4, #0]
    42c8:	3001      	adds	r0, #1
    42ca:	b280      	uxth	r0, r0
    42cc:	f7fe f9d0 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    42d0:	4b11      	ldr	r3, [pc, #68]	; (4318 <opcode_0x25()+0x58>)
    42d2:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    42d4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    42d6:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    42d8:	f7fe f9ca 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_ZeroPage());
    42dc:	4b0f      	ldr	r3, [pc, #60]	; (431c <opcode_0x25()+0x5c>)
    42de:	781a      	ldrb	r2, [r3, #0]
    42e0:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    42e2:	4a0f      	ldr	r2, [pc, #60]	; (4320 <opcode_0x25()+0x60>)
    42e4:	0601      	lsls	r1, r0, #24
    42e6:	7018      	strb	r0, [r3, #0]
    42e8:	7813      	ldrb	r3, [r2, #0]
    42ea:	d40d      	bmi.n	4308 <opcode_0x25()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    42ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    42f0:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    42f2:	b958      	cbnz	r0, 430c <opcode_0x25()+0x4c>
    42f4:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x25].length);
    42f8:	480a      	ldr	r0, [pc, #40]	; (4324 <opcode_0x25()+0x64>)
    42fa:	8821      	ldrh	r1, [r4, #0]
    42fc:	f890 07b5 	ldrb.w	r0, [r0, #1973]	; 0x7b5
    4300:	7013      	strb	r3, [r2, #0]
    4302:	4408      	add	r0, r1
} // 0x25 - AND - ZeroPage
    4304:	b280      	uxth	r0, r0
    4306:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    430c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4310:	e7f2      	b.n	42f8 <opcode_0x25()+0x38>
    4312:	bf00      	nop
    4314:	2001888c 	.word	0x2001888c
    4318:	2001888a 	.word	0x2001888a
    431c:	200188a3 	.word	0x200188a3
    4320:	20004968 	.word	0x20004968
    4324:	20015418 	.word	0x20015418

00004328 <opcode_0x35()>:
uint16_t opcode_0x35() {
    4328:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_ZeroPage_X());
    432a:	f7fe fc99 	bl	2c60 <Fetch_ZeroPage_X()>
    432e:	4b0e      	ldr	r3, [pc, #56]	; (4368 <opcode_0x35()+0x40>)
    4330:	781a      	ldrb	r2, [r3, #0]
    4332:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4334:	4a0d      	ldr	r2, [pc, #52]	; (436c <opcode_0x35()+0x44>)
    4336:	0601      	lsls	r1, r0, #24
    4338:	7018      	strb	r0, [r3, #0]
    433a:	7813      	ldrb	r3, [r2, #0]
    433c:	d40e      	bmi.n	435c <opcode_0x35()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    433e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4342:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4344:	b960      	cbnz	r0, 4360 <opcode_0x35()+0x38>
    4346:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x35].length);
    434a:	4909      	ldr	r1, [pc, #36]	; (4370 <opcode_0x35()+0x48>)
    434c:	4809      	ldr	r0, [pc, #36]	; (4374 <opcode_0x35()+0x4c>)
    434e:	7013      	strb	r3, [r2, #0]
    4350:	f890 0af5 	ldrb.w	r0, [r0, #2805]	; 0xaf5
    4354:	880b      	ldrh	r3, [r1, #0]
    4356:	4418      	add	r0, r3
} // 0x35 - AND - ZeroPage , X
    4358:	b280      	uxth	r0, r0
    435a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    435c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4360:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4364:	e7f1      	b.n	434a <opcode_0x35()+0x22>
    4366:	bf00      	nop
    4368:	200188a3 	.word	0x200188a3
    436c:	20004968 	.word	0x20004968
    4370:	2001888c 	.word	0x2001888c
    4374:	20015418 	.word	0x20015418

00004378 <opcode_0x2D()>:
uint16_t opcode_0x2D() {
    4378:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute());
    437a:	f7fe fcb1 	bl	2ce0 <Fetch_Absolute()>
    437e:	4b0e      	ldr	r3, [pc, #56]	; (43b8 <opcode_0x2D()+0x40>)
    4380:	781a      	ldrb	r2, [r3, #0]
    4382:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4384:	4a0d      	ldr	r2, [pc, #52]	; (43bc <opcode_0x2D()+0x44>)
    4386:	0601      	lsls	r1, r0, #24
    4388:	7018      	strb	r0, [r3, #0]
    438a:	7813      	ldrb	r3, [r2, #0]
    438c:	d40e      	bmi.n	43ac <opcode_0x2D()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    438e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4392:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4394:	b960      	cbnz	r0, 43b0 <opcode_0x2D()+0x38>
    4396:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x2D].length);
    439a:	4909      	ldr	r1, [pc, #36]	; (43c0 <opcode_0x2D()+0x48>)
    439c:	4809      	ldr	r0, [pc, #36]	; (43c4 <opcode_0x2D()+0x4c>)
    439e:	7013      	strb	r3, [r2, #0]
    43a0:	f890 0955 	ldrb.w	r0, [r0, #2389]	; 0x955
    43a4:	880b      	ldrh	r3, [r1, #0]
    43a6:	4418      	add	r0, r3
} // 0x2D - AND - Absolute
    43a8:	b280      	uxth	r0, r0
    43aa:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    43ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    43b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    43b4:	e7f1      	b.n	439a <opcode_0x2D()+0x22>
    43b6:	bf00      	nop
    43b8:	200188a3 	.word	0x200188a3
    43bc:	20004968 	.word	0x20004968
    43c0:	2001888c 	.word	0x2001888c
    43c4:	20015418 	.word	0x20015418

000043c8 <opcode_0x3D()>:
uint16_t opcode_0x3D() {
    43c8:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute_X(1));
    43ca:	2001      	movs	r0, #1
    43cc:	f7fe fca4 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    43d0:	4b0d      	ldr	r3, [pc, #52]	; (4408 <opcode_0x3D()+0x40>)
    43d2:	781a      	ldrb	r2, [r3, #0]
    43d4:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    43d6:	4a0d      	ldr	r2, [pc, #52]	; (440c <opcode_0x3D()+0x44>)
    43d8:	0601      	lsls	r1, r0, #24
    43da:	7018      	strb	r0, [r3, #0]
    43dc:	7813      	ldrb	r3, [r2, #0]
    43de:	d40e      	bmi.n	43fe <opcode_0x3D()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    43e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43e4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    43e6:	b960      	cbnz	r0, 4402 <opcode_0x3D()+0x3a>
    43e8:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x3D].length);
    43ec:	4908      	ldr	r1, [pc, #32]	; (4410 <opcode_0x3D()+0x48>)
    43ee:	4809      	ldr	r0, [pc, #36]	; (4414 <opcode_0x3D()+0x4c>)
    43f0:	7013      	strb	r3, [r2, #0]
    43f2:	f890 0c95 	ldrb.w	r0, [r0, #3221]	; 0xc95
    43f6:	880b      	ldrh	r3, [r1, #0]
    43f8:	4418      	add	r0, r3
} // 0x3D - AND - Absolute , X
    43fa:	b280      	uxth	r0, r0
    43fc:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    43fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4402:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4406:	e7f1      	b.n	43ec <opcode_0x3D()+0x24>
    4408:	200188a3 	.word	0x200188a3
    440c:	20004968 	.word	0x20004968
    4410:	2001888c 	.word	0x2001888c
    4414:	20015418 	.word	0x20015418

00004418 <opcode_0x39()>:
uint16_t opcode_0x39() {
    4418:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute_Y(1));
    441a:	2001      	movs	r0, #1
    441c:	f7fe fcac 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    4420:	4b0d      	ldr	r3, [pc, #52]	; (4458 <opcode_0x39()+0x40>)
    4422:	781a      	ldrb	r2, [r3, #0]
    4424:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4426:	4a0d      	ldr	r2, [pc, #52]	; (445c <opcode_0x39()+0x44>)
    4428:	0601      	lsls	r1, r0, #24
    442a:	7018      	strb	r0, [r3, #0]
    442c:	7813      	ldrb	r3, [r2, #0]
    442e:	d40e      	bmi.n	444e <opcode_0x39()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4434:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4436:	b960      	cbnz	r0, 4452 <opcode_0x39()+0x3a>
    4438:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x39].length);
    443c:	4908      	ldr	r1, [pc, #32]	; (4460 <opcode_0x39()+0x48>)
    443e:	4809      	ldr	r0, [pc, #36]	; (4464 <opcode_0x39()+0x4c>)
    4440:	7013      	strb	r3, [r2, #0]
    4442:	f890 0bc5 	ldrb.w	r0, [r0, #3013]	; 0xbc5
    4446:	880b      	ldrh	r3, [r1, #0]
    4448:	4418      	add	r0, r3
} // 0x19 - OR - Absolute , Y
    444a:	b280      	uxth	r0, r0
    444c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    444e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4452:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4456:	e7f1      	b.n	443c <opcode_0x39()+0x24>
    4458:	200188a3 	.word	0x200188a3
    445c:	20004968 	.word	0x20004968
    4460:	2001888c 	.word	0x2001888c
    4464:	20015418 	.word	0x20015418

00004468 <opcode_0x21()>:
uint16_t opcode_0x21() {
    4468:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Indexed_Indirect_X());
    446a:	f7fe fcb5 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    446e:	4b0e      	ldr	r3, [pc, #56]	; (44a8 <opcode_0x21()+0x40>)
    4470:	781a      	ldrb	r2, [r3, #0]
    4472:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4474:	4a0d      	ldr	r2, [pc, #52]	; (44ac <opcode_0x21()+0x44>)
    4476:	0601      	lsls	r1, r0, #24
    4478:	7018      	strb	r0, [r3, #0]
    447a:	7813      	ldrb	r3, [r2, #0]
    447c:	d40e      	bmi.n	449c <opcode_0x21()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    447e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4482:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4484:	b960      	cbnz	r0, 44a0 <opcode_0x21()+0x38>
    4486:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x21].length);
    448a:	4909      	ldr	r1, [pc, #36]	; (44b0 <opcode_0x21()+0x48>)
    448c:	4809      	ldr	r0, [pc, #36]	; (44b4 <opcode_0x21()+0x4c>)
    448e:	7013      	strb	r3, [r2, #0]
    4490:	f890 06e5 	ldrb.w	r0, [r0, #1765]	; 0x6e5
    4494:	880b      	ldrh	r3, [r1, #0]
    4496:	4418      	add	r0, r3
} // 0x21 - AND - Indexed Indirect X
    4498:	b280      	uxth	r0, r0
    449a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    449c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    44a0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    44a4:	e7f1      	b.n	448a <opcode_0x21()+0x22>
    44a6:	bf00      	nop
    44a8:	200188a3 	.word	0x200188a3
    44ac:	20004968 	.word	0x20004968
    44b0:	2001888c 	.word	0x2001888c
    44b4:	20015418 	.word	0x20015418

000044b8 <opcode_0x31()>:
uint16_t opcode_0x31() {
    44b8:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Indexed_Indirect_Y(1));
    44ba:	2001      	movs	r0, #1
    44bc:	f7fe fcb6 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    44c0:	4b0d      	ldr	r3, [pc, #52]	; (44f8 <opcode_0x31()+0x40>)
    44c2:	781a      	ldrb	r2, [r3, #0]
    44c4:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    44c6:	4a0d      	ldr	r2, [pc, #52]	; (44fc <opcode_0x31()+0x44>)
    44c8:	0601      	lsls	r1, r0, #24
    44ca:	7018      	strb	r0, [r3, #0]
    44cc:	7813      	ldrb	r3, [r2, #0]
    44ce:	d40e      	bmi.n	44ee <opcode_0x31()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    44d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    44d4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    44d6:	b960      	cbnz	r0, 44f2 <opcode_0x31()+0x3a>
    44d8:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x31].length);
    44dc:	4908      	ldr	r1, [pc, #32]	; (4500 <opcode_0x31()+0x48>)
    44de:	4809      	ldr	r0, [pc, #36]	; (4504 <opcode_0x31()+0x4c>)
    44e0:	7013      	strb	r3, [r2, #0]
    44e2:	f890 0a25 	ldrb.w	r0, [r0, #2597]	; 0xa25
    44e6:	880b      	ldrh	r3, [r1, #0]
    44e8:	4418      	add	r0, r3
} // 0x31 - AND - Indirect Indexed  Y
    44ea:	b280      	uxth	r0, r0
    44ec:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    44ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    44f2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    44f6:	e7f1      	b.n	44dc <opcode_0x31()+0x24>
    44f8:	200188a3 	.word	0x200188a3
    44fc:	20004968 	.word	0x20004968
    4500:	2001888c 	.word	0x2001888c
    4504:	20015418 	.word	0x20015418

00004508 <opcode_0x09()>:

// -------------------------------------------------
// ORA
// -------------------------------------------------
uint16_t opcode_0x09() {
    4508:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    450a:	4c11      	ldr	r4, [pc, #68]	; (4550 <opcode_0x09()+0x48>)
    450c:	2100      	movs	r1, #0
    450e:	8820      	ldrh	r0, [r4, #0]
    4510:	3001      	adds	r0, #1
    4512:	b280      	uxth	r0, r0
    4514:	f7fe f8ac 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_Immediate(1));
    4518:	4b0e      	ldr	r3, [pc, #56]	; (4554 <opcode_0x09()+0x4c>)
    451a:	781a      	ldrb	r2, [r3, #0]
    451c:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    451e:	4a0e      	ldr	r2, [pc, #56]	; (4558 <opcode_0x09()+0x50>)
    4520:	b2c0      	uxtb	r0, r0
    4522:	0601      	lsls	r1, r0, #24
    4524:	7018      	strb	r0, [r3, #0]
    4526:	7813      	ldrb	r3, [r2, #0]
    4528:	d40d      	bmi.n	4546 <opcode_0x09()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    452a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    452e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4530:	b958      	cbnz	r0, 454a <opcode_0x09()+0x42>
    4532:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x09].length);
    4536:	4809      	ldr	r0, [pc, #36]	; (455c <opcode_0x09()+0x54>)
    4538:	8821      	ldrh	r1, [r4, #0]
    453a:	f890 0205 	ldrb.w	r0, [r0, #517]	; 0x205
    453e:	7013      	strb	r3, [r2, #0]
    4540:	4408      	add	r0, r1
} // 0x09 - OR - Immediate
    4542:	b280      	uxth	r0, r0
    4544:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    454a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    454e:	e7f2      	b.n	4536 <opcode_0x09()+0x2e>
    4550:	2001888c 	.word	0x2001888c
    4554:	200188a3 	.word	0x200188a3
    4558:	20004968 	.word	0x20004968
    455c:	20015418 	.word	0x20015418

00004560 <opcode_0x05()>:
uint16_t opcode_0x05() {
    4560:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4562:	4c14      	ldr	r4, [pc, #80]	; (45b4 <opcode_0x05()+0x54>)
    4564:	2100      	movs	r1, #0
    4566:	8820      	ldrh	r0, [r4, #0]
    4568:	3001      	adds	r0, #1
    456a:	b280      	uxth	r0, r0
    456c:	f7fe f880 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4570:	4b11      	ldr	r3, [pc, #68]	; (45b8 <opcode_0x05()+0x58>)
    4572:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4574:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4576:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4578:	f7fe f87a 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_ZeroPage());
    457c:	4b0f      	ldr	r3, [pc, #60]	; (45bc <opcode_0x05()+0x5c>)
    457e:	781a      	ldrb	r2, [r3, #0]
    4580:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4582:	4a0f      	ldr	r2, [pc, #60]	; (45c0 <opcode_0x05()+0x60>)
    4584:	b2c0      	uxtb	r0, r0
    4586:	0601      	lsls	r1, r0, #24
    4588:	7018      	strb	r0, [r3, #0]
    458a:	7813      	ldrb	r3, [r2, #0]
    458c:	d40d      	bmi.n	45aa <opcode_0x05()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    458e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4592:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4594:	b958      	cbnz	r0, 45ae <opcode_0x05()+0x4e>
    4596:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x05].length);
    459a:	480a      	ldr	r0, [pc, #40]	; (45c4 <opcode_0x05()+0x64>)
    459c:	8821      	ldrh	r1, [r4, #0]
    459e:	f890 0135 	ldrb.w	r0, [r0, #309]	; 0x135
    45a2:	7013      	strb	r3, [r2, #0]
    45a4:	4408      	add	r0, r1
} // 0x05 - OR - ZeroPage
    45a6:	b280      	uxth	r0, r0
    45a8:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    45aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    45ae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    45b2:	e7f2      	b.n	459a <opcode_0x05()+0x3a>
    45b4:	2001888c 	.word	0x2001888c
    45b8:	2001888a 	.word	0x2001888a
    45bc:	200188a3 	.word	0x200188a3
    45c0:	20004968 	.word	0x20004968
    45c4:	20015418 	.word	0x20015418

000045c8 <opcode_0x15()>:
uint16_t opcode_0x15() {
    45c8:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_ZeroPage_X());
    45ca:	f7fe fb49 	bl	2c60 <Fetch_ZeroPage_X()>
    45ce:	4b0e      	ldr	r3, [pc, #56]	; (4608 <opcode_0x15()+0x40>)
    45d0:	781a      	ldrb	r2, [r3, #0]
    45d2:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    45d4:	4a0d      	ldr	r2, [pc, #52]	; (460c <opcode_0x15()+0x44>)
    45d6:	b2c0      	uxtb	r0, r0
    45d8:	0601      	lsls	r1, r0, #24
    45da:	7018      	strb	r0, [r3, #0]
    45dc:	7813      	ldrb	r3, [r2, #0]
    45de:	d40e      	bmi.n	45fe <opcode_0x15()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    45e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    45e4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    45e6:	b960      	cbnz	r0, 4602 <opcode_0x15()+0x3a>
    45e8:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x15].length);
    45ec:	4908      	ldr	r1, [pc, #32]	; (4610 <opcode_0x15()+0x48>)
    45ee:	4809      	ldr	r0, [pc, #36]	; (4614 <opcode_0x15()+0x4c>)
    45f0:	7013      	strb	r3, [r2, #0]
    45f2:	f890 0475 	ldrb.w	r0, [r0, #1141]	; 0x475
    45f6:	880b      	ldrh	r3, [r1, #0]
    45f8:	4418      	add	r0, r3
} // 0x15 - OR - ZeroPage , X
    45fa:	b280      	uxth	r0, r0
    45fc:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    45fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4602:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4606:	e7f1      	b.n	45ec <opcode_0x15()+0x24>
    4608:	200188a3 	.word	0x200188a3
    460c:	20004968 	.word	0x20004968
    4610:	2001888c 	.word	0x2001888c
    4614:	20015418 	.word	0x20015418

00004618 <opcode_0x0D()>:
uint16_t opcode_0x0D() {
    4618:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute());
    461a:	f7fe fb61 	bl	2ce0 <Fetch_Absolute()>
    461e:	4b0e      	ldr	r3, [pc, #56]	; (4658 <opcode_0x0D()+0x40>)
    4620:	781a      	ldrb	r2, [r3, #0]
    4622:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4624:	4a0d      	ldr	r2, [pc, #52]	; (465c <opcode_0x0D()+0x44>)
    4626:	b2c0      	uxtb	r0, r0
    4628:	0601      	lsls	r1, r0, #24
    462a:	7018      	strb	r0, [r3, #0]
    462c:	7813      	ldrb	r3, [r2, #0]
    462e:	d40e      	bmi.n	464e <opcode_0x0D()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4634:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4636:	b960      	cbnz	r0, 4652 <opcode_0x0D()+0x3a>
    4638:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x0D].length);
    463c:	4908      	ldr	r1, [pc, #32]	; (4660 <opcode_0x0D()+0x48>)
    463e:	4809      	ldr	r0, [pc, #36]	; (4664 <opcode_0x0D()+0x4c>)
    4640:	7013      	strb	r3, [r2, #0]
    4642:	f890 02d5 	ldrb.w	r0, [r0, #725]	; 0x2d5
    4646:	880b      	ldrh	r3, [r1, #0]
    4648:	4418      	add	r0, r3
} // 0x0D - OR - Absolute
    464a:	b280      	uxth	r0, r0
    464c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4652:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4656:	e7f1      	b.n	463c <opcode_0x0D()+0x24>
    4658:	200188a3 	.word	0x200188a3
    465c:	20004968 	.word	0x20004968
    4660:	2001888c 	.word	0x2001888c
    4664:	20015418 	.word	0x20015418

00004668 <opcode_0x1D()>:
uint16_t opcode_0x1D() {
    4668:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute_X(1));
    466a:	2001      	movs	r0, #1
    466c:	f7fe fb54 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    4670:	4b0e      	ldr	r3, [pc, #56]	; (46ac <opcode_0x1D()+0x44>)
    4672:	781a      	ldrb	r2, [r3, #0]
    4674:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4676:	4a0e      	ldr	r2, [pc, #56]	; (46b0 <opcode_0x1D()+0x48>)
    4678:	b2c0      	uxtb	r0, r0
    467a:	0601      	lsls	r1, r0, #24
    467c:	7018      	strb	r0, [r3, #0]
    467e:	7813      	ldrb	r3, [r2, #0]
    4680:	d40e      	bmi.n	46a0 <opcode_0x1D()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4686:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4688:	b960      	cbnz	r0, 46a4 <opcode_0x1D()+0x3c>
    468a:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x1D].length);
    468e:	4909      	ldr	r1, [pc, #36]	; (46b4 <opcode_0x1D()+0x4c>)
    4690:	4809      	ldr	r0, [pc, #36]	; (46b8 <opcode_0x1D()+0x50>)
    4692:	7013      	strb	r3, [r2, #0]
    4694:	f890 0615 	ldrb.w	r0, [r0, #1557]	; 0x615
    4698:	880b      	ldrh	r3, [r1, #0]
    469a:	4418      	add	r0, r3
} // 0x1D - OR - Absolute , X
    469c:	b280      	uxth	r0, r0
    469e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    46a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    46a4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    46a8:	e7f1      	b.n	468e <opcode_0x1D()+0x26>
    46aa:	bf00      	nop
    46ac:	200188a3 	.word	0x200188a3
    46b0:	20004968 	.word	0x20004968
    46b4:	2001888c 	.word	0x2001888c
    46b8:	20015418 	.word	0x20015418

000046bc <opcode_0x19()>:
uint16_t opcode_0x19() {
    46bc:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute_Y(1));
    46be:	2001      	movs	r0, #1
    46c0:	f7fe fb5a 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    46c4:	4b0e      	ldr	r3, [pc, #56]	; (4700 <opcode_0x19()+0x44>)
    46c6:	781a      	ldrb	r2, [r3, #0]
    46c8:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    46ca:	4a0e      	ldr	r2, [pc, #56]	; (4704 <opcode_0x19()+0x48>)
    46cc:	b2c0      	uxtb	r0, r0
    46ce:	0601      	lsls	r1, r0, #24
    46d0:	7018      	strb	r0, [r3, #0]
    46d2:	7813      	ldrb	r3, [r2, #0]
    46d4:	d40e      	bmi.n	46f4 <opcode_0x19()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    46d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    46da:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    46dc:	b960      	cbnz	r0, 46f8 <opcode_0x19()+0x3c>
    46de:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x19].length);
    46e2:	4909      	ldr	r1, [pc, #36]	; (4708 <opcode_0x19()+0x4c>)
    46e4:	4809      	ldr	r0, [pc, #36]	; (470c <opcode_0x19()+0x50>)
    46e6:	7013      	strb	r3, [r2, #0]
    46e8:	f890 0545 	ldrb.w	r0, [r0, #1349]	; 0x545
    46ec:	880b      	ldrh	r3, [r1, #0]
    46ee:	4418      	add	r0, r3
} // 0x19 - OR - Absolute , Y
    46f0:	b280      	uxth	r0, r0
    46f2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    46f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    46f8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    46fc:	e7f1      	b.n	46e2 <opcode_0x19()+0x26>
    46fe:	bf00      	nop
    4700:	200188a3 	.word	0x200188a3
    4704:	20004968 	.word	0x20004968
    4708:	2001888c 	.word	0x2001888c
    470c:	20015418 	.word	0x20015418

00004710 <opcode_0x01()>:
uint16_t opcode_0x01() {
    4710:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Indexed_Indirect_X());
    4712:	f7fe fb61 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    4716:	4b0e      	ldr	r3, [pc, #56]	; (4750 <opcode_0x01()+0x40>)
    4718:	781a      	ldrb	r2, [r3, #0]
    471a:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    471c:	4a0d      	ldr	r2, [pc, #52]	; (4754 <opcode_0x01()+0x44>)
    471e:	b2c0      	uxtb	r0, r0
    4720:	0601      	lsls	r1, r0, #24
    4722:	7018      	strb	r0, [r3, #0]
    4724:	7813      	ldrb	r3, [r2, #0]
    4726:	d40e      	bmi.n	4746 <opcode_0x01()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    472c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    472e:	b960      	cbnz	r0, 474a <opcode_0x01()+0x3a>
    4730:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x01].length);
    4734:	4908      	ldr	r1, [pc, #32]	; (4758 <opcode_0x01()+0x48>)
    4736:	4809      	ldr	r0, [pc, #36]	; (475c <opcode_0x01()+0x4c>)
    4738:	7013      	strb	r3, [r2, #0]
    473a:	f890 0065 	ldrb.w	r0, [r0, #101]	; 0x65
    473e:	880b      	ldrh	r3, [r1, #0]
    4740:	4418      	add	r0, r3
} // 0x01 - OR - Indexed Indirect X
    4742:	b280      	uxth	r0, r0
    4744:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    474a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    474e:	e7f1      	b.n	4734 <opcode_0x01()+0x24>
    4750:	200188a3 	.word	0x200188a3
    4754:	20004968 	.word	0x20004968
    4758:	2001888c 	.word	0x2001888c
    475c:	20015418 	.word	0x20015418

00004760 <opcode_0x11()>:
uint16_t opcode_0x11() {
    4760:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Indexed_Indirect_Y(1));
    4762:	2001      	movs	r0, #1
    4764:	f7fe fb62 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    4768:	4b0e      	ldr	r3, [pc, #56]	; (47a4 <opcode_0x11()+0x44>)
    476a:	781a      	ldrb	r2, [r3, #0]
    476c:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    476e:	4a0e      	ldr	r2, [pc, #56]	; (47a8 <opcode_0x11()+0x48>)
    4770:	b2c0      	uxtb	r0, r0
    4772:	0601      	lsls	r1, r0, #24
    4774:	7018      	strb	r0, [r3, #0]
    4776:	7813      	ldrb	r3, [r2, #0]
    4778:	d40e      	bmi.n	4798 <opcode_0x11()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    477a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    477e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4780:	b960      	cbnz	r0, 479c <opcode_0x11()+0x3c>
    4782:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x11].length);
    4786:	4909      	ldr	r1, [pc, #36]	; (47ac <opcode_0x11()+0x4c>)
    4788:	4809      	ldr	r0, [pc, #36]	; (47b0 <opcode_0x11()+0x50>)
    478a:	7013      	strb	r3, [r2, #0]
    478c:	f890 03a5 	ldrb.w	r0, [r0, #933]	; 0x3a5
    4790:	880b      	ldrh	r3, [r1, #0]
    4792:	4418      	add	r0, r3
} // 0x11 - OR - Indirect Indexed  Y
    4794:	b280      	uxth	r0, r0
    4796:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    479c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    47a0:	e7f1      	b.n	4786 <opcode_0x11()+0x26>
    47a2:	bf00      	nop
    47a4:	200188a3 	.word	0x200188a3
    47a8:	20004968 	.word	0x20004968
    47ac:	2001888c 	.word	0x2001888c
    47b0:	20015418 	.word	0x20015418

000047b4 <opcode_0x49()>:

// -------------------------------------------------
// EOR
// -------------------------------------------------
uint16_t opcode_0x49() {
    47b4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    47b6:	4c12      	ldr	r4, [pc, #72]	; (4800 <opcode_0x49()+0x4c>)
    47b8:	2100      	movs	r1, #0
    47ba:	8820      	ldrh	r0, [r4, #0]
    47bc:	3001      	adds	r0, #1
    47be:	b280      	uxth	r0, r0
    47c0:	f7fd ff56 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_Immediate(1));
    47c4:	4a0f      	ldr	r2, [pc, #60]	; (4804 <opcode_0x49()+0x50>)
    47c6:	7811      	ldrb	r1, [r2, #0]
    47c8:	ea81 0300 	eor.w	r3, r1, r0
    47cc:	b2db      	uxtb	r3, r3
    47ce:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    47d0:	f013 0f80 	tst.w	r3, #128	; 0x80
    47d4:	4a0c      	ldr	r2, [pc, #48]	; (4808 <opcode_0x49()+0x54>)
    47d6:	7813      	ldrb	r3, [r2, #0]
    47d8:	bf14      	ite	ne
    47da:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    47de:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    47e2:	4281      	cmp	r1, r0
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x49].length);
    47e4:	4809      	ldr	r0, [pc, #36]	; (480c <opcode_0x49()+0x58>)
    47e6:	8821      	ldrh	r1, [r4, #0]
    47e8:	f890 0f05 	ldrb.w	r0, [r0, #3845]	; 0xf05
    47ec:	bf0c      	ite	eq
    47ee:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    47f2:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    47f6:	4408      	add	r0, r1
    47f8:	7013      	strb	r3, [r2, #0]
} // 0x49 - EOR - Immediate
    47fa:	b280      	uxth	r0, r0
    47fc:	bd10      	pop	{r4, pc}
    47fe:	bf00      	nop
    4800:	2001888c 	.word	0x2001888c
    4804:	200188a3 	.word	0x200188a3
    4808:	20004968 	.word	0x20004968
    480c:	20015418 	.word	0x20015418

00004810 <opcode_0x45()>:
uint16_t opcode_0x45() {
    4810:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4812:	4c15      	ldr	r4, [pc, #84]	; (4868 <opcode_0x45()+0x58>)
    4814:	2100      	movs	r1, #0
    4816:	8820      	ldrh	r0, [r4, #0]
    4818:	3001      	adds	r0, #1
    481a:	b280      	uxth	r0, r0
    481c:	f7fd ff28 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4820:	4b12      	ldr	r3, [pc, #72]	; (486c <opcode_0x45()+0x5c>)
    4822:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4824:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4826:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4828:	f7fd ff22 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_ZeroPage());
    482c:	4a10      	ldr	r2, [pc, #64]	; (4870 <opcode_0x45()+0x60>)
    482e:	7811      	ldrb	r1, [r2, #0]
    4830:	ea81 0300 	eor.w	r3, r1, r0
    4834:	b2db      	uxtb	r3, r3
    4836:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4838:	f013 0f80 	tst.w	r3, #128	; 0x80
    483c:	4a0d      	ldr	r2, [pc, #52]	; (4874 <opcode_0x45()+0x64>)
    483e:	7813      	ldrb	r3, [r2, #0]
    4840:	bf14      	ite	ne
    4842:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4846:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    484a:	4281      	cmp	r1, r0
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x45].length);
    484c:	480a      	ldr	r0, [pc, #40]	; (4878 <opcode_0x45()+0x68>)
    484e:	8821      	ldrh	r1, [r4, #0]
    4850:	f890 0e35 	ldrb.w	r0, [r0, #3637]	; 0xe35
    4854:	bf0c      	ite	eq
    4856:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    485a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    485e:	4408      	add	r0, r1
    4860:	7013      	strb	r3, [r2, #0]
} // 0x45 - EOR - ZeroPage
    4862:	b280      	uxth	r0, r0
    4864:	bd10      	pop	{r4, pc}
    4866:	bf00      	nop
    4868:	2001888c 	.word	0x2001888c
    486c:	2001888a 	.word	0x2001888a
    4870:	200188a3 	.word	0x200188a3
    4874:	20004968 	.word	0x20004968
    4878:	20015418 	.word	0x20015418

0000487c <opcode_0x55()>:
uint16_t opcode_0x55() {
    487c:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_ZeroPage_X());
    487e:	f7fe f9ef 	bl	2c60 <Fetch_ZeroPage_X()>
    4882:	4a0f      	ldr	r2, [pc, #60]	; (48c0 <opcode_0x55()+0x44>)
    4884:	7811      	ldrb	r1, [r2, #0]
    4886:	ea80 0301 	eor.w	r3, r0, r1
    488a:	b2db      	uxtb	r3, r3
    488c:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    488e:	f013 0f80 	tst.w	r3, #128	; 0x80
    4892:	4a0c      	ldr	r2, [pc, #48]	; (48c4 <opcode_0x55()+0x48>)
    4894:	7813      	ldrb	r3, [r2, #0]
    4896:	bf14      	ite	ne
    4898:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    489c:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    48a0:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x55].length);
    48a2:	4909      	ldr	r1, [pc, #36]	; (48c8 <opcode_0x55()+0x4c>)
    48a4:	4809      	ldr	r0, [pc, #36]	; (48cc <opcode_0x55()+0x50>)
    48a6:	bf0c      	ite	eq
    48a8:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    48ac:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    48b0:	f890 0175 	ldrb.w	r0, [r0, #373]	; 0x175
    48b4:	7013      	strb	r3, [r2, #0]
    48b6:	880b      	ldrh	r3, [r1, #0]
    48b8:	4418      	add	r0, r3
} // 0x55 - EOR - ZeroPage , X
    48ba:	b280      	uxth	r0, r0
    48bc:	bd08      	pop	{r3, pc}
    48be:	bf00      	nop
    48c0:	200188a3 	.word	0x200188a3
    48c4:	20004968 	.word	0x20004968
    48c8:	2001888c 	.word	0x2001888c
    48cc:	20016418 	.word	0x20016418

000048d0 <opcode_0x4D()>:
uint16_t opcode_0x4D() {
    48d0:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute());
    48d2:	f7fe fa05 	bl	2ce0 <Fetch_Absolute()>
    48d6:	4a0f      	ldr	r2, [pc, #60]	; (4914 <opcode_0x4D()+0x44>)
    48d8:	7811      	ldrb	r1, [r2, #0]
    48da:	ea80 0301 	eor.w	r3, r0, r1
    48de:	b2db      	uxtb	r3, r3
    48e0:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    48e2:	f013 0f80 	tst.w	r3, #128	; 0x80
    48e6:	4a0c      	ldr	r2, [pc, #48]	; (4918 <opcode_0x4D()+0x48>)
    48e8:	7813      	ldrb	r3, [r2, #0]
    48ea:	bf14      	ite	ne
    48ec:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    48f0:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    48f4:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x4D].length);
    48f6:	4909      	ldr	r1, [pc, #36]	; (491c <opcode_0x4D()+0x4c>)
    48f8:	4809      	ldr	r0, [pc, #36]	; (4920 <opcode_0x4D()+0x50>)
    48fa:	bf0c      	ite	eq
    48fc:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4900:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4904:	f890 0fd5 	ldrb.w	r0, [r0, #4053]	; 0xfd5
    4908:	7013      	strb	r3, [r2, #0]
    490a:	880b      	ldrh	r3, [r1, #0]
    490c:	4418      	add	r0, r3
} // 0x4D - EOR - Absolute
    490e:	b280      	uxth	r0, r0
    4910:	bd08      	pop	{r3, pc}
    4912:	bf00      	nop
    4914:	200188a3 	.word	0x200188a3
    4918:	20004968 	.word	0x20004968
    491c:	2001888c 	.word	0x2001888c
    4920:	20015418 	.word	0x20015418

00004924 <opcode_0x5D()>:
uint16_t opcode_0x5D() {
    4924:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute_X(1));
    4926:	2001      	movs	r0, #1
    4928:	f7fe f9f6 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    492c:	4a0e      	ldr	r2, [pc, #56]	; (4968 <opcode_0x5D()+0x44>)
    492e:	7811      	ldrb	r1, [r2, #0]
    4930:	ea80 0301 	eor.w	r3, r0, r1
    4934:	b2db      	uxtb	r3, r3
    4936:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4938:	f013 0f80 	tst.w	r3, #128	; 0x80
    493c:	4a0b      	ldr	r2, [pc, #44]	; (496c <opcode_0x5D()+0x48>)
    493e:	7813      	ldrb	r3, [r2, #0]
    4940:	bf14      	ite	ne
    4942:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4946:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    494a:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x5D].length);
    494c:	4908      	ldr	r1, [pc, #32]	; (4970 <opcode_0x5D()+0x4c>)
    494e:	4809      	ldr	r0, [pc, #36]	; (4974 <opcode_0x5D()+0x50>)
    4950:	bf0c      	ite	eq
    4952:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4956:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    495a:	f890 0315 	ldrb.w	r0, [r0, #789]	; 0x315
    495e:	7013      	strb	r3, [r2, #0]
    4960:	880b      	ldrh	r3, [r1, #0]
    4962:	4418      	add	r0, r3
} // 0x5D - EOR - Absolute , X
    4964:	b280      	uxth	r0, r0
    4966:	bd08      	pop	{r3, pc}
    4968:	200188a3 	.word	0x200188a3
    496c:	20004968 	.word	0x20004968
    4970:	2001888c 	.word	0x2001888c
    4974:	20016418 	.word	0x20016418

00004978 <opcode_0x59()>:
uint16_t opcode_0x59() {
    4978:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute_Y(1));
    497a:	2001      	movs	r0, #1
    497c:	f7fe f9fc 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    4980:	4a0e      	ldr	r2, [pc, #56]	; (49bc <opcode_0x59()+0x44>)
    4982:	7811      	ldrb	r1, [r2, #0]
    4984:	ea80 0301 	eor.w	r3, r0, r1
    4988:	b2db      	uxtb	r3, r3
    498a:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    498c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4990:	4a0b      	ldr	r2, [pc, #44]	; (49c0 <opcode_0x59()+0x48>)
    4992:	7813      	ldrb	r3, [r2, #0]
    4994:	bf14      	ite	ne
    4996:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    499a:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    499e:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x59].length);
    49a0:	4908      	ldr	r1, [pc, #32]	; (49c4 <opcode_0x59()+0x4c>)
    49a2:	4809      	ldr	r0, [pc, #36]	; (49c8 <opcode_0x59()+0x50>)
    49a4:	bf0c      	ite	eq
    49a6:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    49aa:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    49ae:	f890 0245 	ldrb.w	r0, [r0, #581]	; 0x245
    49b2:	7013      	strb	r3, [r2, #0]
    49b4:	880b      	ldrh	r3, [r1, #0]
    49b6:	4418      	add	r0, r3
} // 0x59 - EOR - Absolute , Y
    49b8:	b280      	uxth	r0, r0
    49ba:	bd08      	pop	{r3, pc}
    49bc:	200188a3 	.word	0x200188a3
    49c0:	20004968 	.word	0x20004968
    49c4:	2001888c 	.word	0x2001888c
    49c8:	20016418 	.word	0x20016418

000049cc <opcode_0x41()>:
uint16_t opcode_0x41() {
    49cc:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Indexed_Indirect_X());
    49ce:	f7fe fa03 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    49d2:	4a0f      	ldr	r2, [pc, #60]	; (4a10 <opcode_0x41()+0x44>)
    49d4:	7811      	ldrb	r1, [r2, #0]
    49d6:	ea80 0301 	eor.w	r3, r0, r1
    49da:	b2db      	uxtb	r3, r3
    49dc:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    49de:	f013 0f80 	tst.w	r3, #128	; 0x80
    49e2:	4a0c      	ldr	r2, [pc, #48]	; (4a14 <opcode_0x41()+0x48>)
    49e4:	7813      	ldrb	r3, [r2, #0]
    49e6:	bf14      	ite	ne
    49e8:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    49ec:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    49f0:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x41].length);
    49f2:	4909      	ldr	r1, [pc, #36]	; (4a18 <opcode_0x41()+0x4c>)
    49f4:	4809      	ldr	r0, [pc, #36]	; (4a1c <opcode_0x41()+0x50>)
    49f6:	bf0c      	ite	eq
    49f8:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    49fc:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4a00:	f890 0d65 	ldrb.w	r0, [r0, #3429]	; 0xd65
    4a04:	7013      	strb	r3, [r2, #0]
    4a06:	880b      	ldrh	r3, [r1, #0]
    4a08:	4418      	add	r0, r3
} // 0x41 - EOR - Indexed Indirect X
    4a0a:	b280      	uxth	r0, r0
    4a0c:	bd08      	pop	{r3, pc}
    4a0e:	bf00      	nop
    4a10:	200188a3 	.word	0x200188a3
    4a14:	20004968 	.word	0x20004968
    4a18:	2001888c 	.word	0x2001888c
    4a1c:	20015418 	.word	0x20015418

00004a20 <opcode_0x51()>:
uint16_t opcode_0x51() {
    4a20:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Indexed_Indirect_Y(1));
    4a22:	2001      	movs	r0, #1
    4a24:	f7fe fa02 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    4a28:	4a0e      	ldr	r2, [pc, #56]	; (4a64 <opcode_0x51()+0x44>)
    4a2a:	7811      	ldrb	r1, [r2, #0]
    4a2c:	ea80 0301 	eor.w	r3, r0, r1
    4a30:	b2db      	uxtb	r3, r3
    4a32:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a34:	f013 0f80 	tst.w	r3, #128	; 0x80
    4a38:	4a0b      	ldr	r2, [pc, #44]	; (4a68 <opcode_0x51()+0x48>)
    4a3a:	7813      	ldrb	r3, [r2, #0]
    4a3c:	bf14      	ite	ne
    4a3e:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4a42:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4a46:	4288      	cmp	r0, r1
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0x51].length);
    4a48:	4908      	ldr	r1, [pc, #32]	; (4a6c <opcode_0x51()+0x4c>)
    4a4a:	4809      	ldr	r0, [pc, #36]	; (4a70 <opcode_0x51()+0x50>)
    4a4c:	bf0c      	ite	eq
    4a4e:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4a52:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4a56:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    4a5a:	7013      	strb	r3, [r2, #0]
    4a5c:	880b      	ldrh	r3, [r1, #0]
    4a5e:	4418      	add	r0, r3
} // 0x51 - EOR - Indirect Indexed  Y
    4a60:	b280      	uxth	r0, r0
    4a62:	bd08      	pop	{r3, pc}
    4a64:	200188a3 	.word	0x200188a3
    4a68:	20004968 	.word	0x20004968
    4a6c:	2001888c 	.word	0x2001888c
    4a70:	20016418 	.word	0x20016418

00004a74 <opcode_0xA9()>:

// -------------------------------------------------
// LDA
// -------------------------------------------------
uint16_t opcode_0xA9() {
    4a74:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4a76:	4c10      	ldr	r4, [pc, #64]	; (4ab8 <opcode_0xA9()+0x44>)
    4a78:	2100      	movs	r1, #0
    4a7a:	8820      	ldrh	r0, [r4, #0]
    4a7c:	3001      	adds	r0, #1
    4a7e:	b280      	uxth	r0, r0
    4a80:	f7fd fdf6 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = Fetch_Immediate(1);
    4a84:	4b0d      	ldr	r3, [pc, #52]	; (4abc <opcode_0xA9()+0x48>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a86:	4a0e      	ldr	r2, [pc, #56]	; (4ac0 <opcode_0xA9()+0x4c>)
    4a88:	0601      	lsls	r1, r0, #24
    4a8a:	7018      	strb	r0, [r3, #0]
    4a8c:	7813      	ldrb	r3, [r2, #0]
    4a8e:	d40d      	bmi.n	4aac <opcode_0xA9()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4a94:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4a96:	b958      	cbnz	r0, 4ab0 <opcode_0xA9()+0x3c>
    4a98:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA9].length);
    4a9c:	4809      	ldr	r0, [pc, #36]	; (4ac4 <opcode_0xA9()+0x50>)
    4a9e:	8821      	ldrh	r1, [r4, #0]
    4aa0:	f890 0285 	ldrb.w	r0, [r0, #645]	; 0x285
    4aa4:	7013      	strb	r3, [r2, #0]
    4aa6:	4408      	add	r0, r1
} // 0xA9 - LDA - Immediate
    4aa8:	b280      	uxth	r0, r0
    4aaa:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4ab0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ab4:	e7f2      	b.n	4a9c <opcode_0xA9()+0x28>
    4ab6:	bf00      	nop
    4ab8:	2001888c 	.word	0x2001888c
    4abc:	200188a3 	.word	0x200188a3
    4ac0:	20004968 	.word	0x20004968
    4ac4:	20017418 	.word	0x20017418

00004ac8 <opcode_0xA5()>:
uint16_t opcode_0xA5() {
    4ac8:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4aca:	4c13      	ldr	r4, [pc, #76]	; (4b18 <opcode_0xA5()+0x50>)
    4acc:	2100      	movs	r1, #0
    4ace:	8820      	ldrh	r0, [r4, #0]
    4ad0:	3001      	adds	r0, #1
    4ad2:	b280      	uxth	r0, r0
    4ad4:	f7fd fdcc 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4ad8:	4b10      	ldr	r3, [pc, #64]	; (4b1c <opcode_0xA5()+0x54>)
    4ada:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4adc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4ade:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4ae0:	f7fd fdc6 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = Fetch_ZeroPage();
    4ae4:	4b0e      	ldr	r3, [pc, #56]	; (4b20 <opcode_0xA5()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ae6:	0601      	lsls	r1, r0, #24
    4ae8:	4a0e      	ldr	r2, [pc, #56]	; (4b24 <opcode_0xA5()+0x5c>)
    4aea:	7018      	strb	r0, [r3, #0]
    4aec:	7813      	ldrb	r3, [r2, #0]
    4aee:	d40d      	bmi.n	4b0c <opcode_0xA5()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4af4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4af6:	b958      	cbnz	r0, 4b10 <opcode_0xA5()+0x48>
    4af8:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA5].length);
    4afc:	480a      	ldr	r0, [pc, #40]	; (4b28 <opcode_0xA5()+0x60>)
    4afe:	8821      	ldrh	r1, [r4, #0]
    4b00:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    4b04:	7013      	strb	r3, [r2, #0]
    4b06:	4408      	add	r0, r1
} // 0xA5 - LDA - ZeroPage
    4b08:	b280      	uxth	r0, r0
    4b0a:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4b10:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4b14:	e7f2      	b.n	4afc <opcode_0xA5()+0x34>
    4b16:	bf00      	nop
    4b18:	2001888c 	.word	0x2001888c
    4b1c:	2001888a 	.word	0x2001888a
    4b20:	200188a3 	.word	0x200188a3
    4b24:	20004968 	.word	0x20004968
    4b28:	20017418 	.word	0x20017418

00004b2c <opcode_0xB5()>:
uint16_t opcode_0xB5() {
    4b2c:	b508      	push	{r3, lr}
    register_a = Fetch_ZeroPage_X();
    4b2e:	f7fe f897 	bl	2c60 <Fetch_ZeroPage_X()>
    4b32:	4b0d      	ldr	r3, [pc, #52]	; (4b68 <opcode_0xB5()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4b34:	4a0d      	ldr	r2, [pc, #52]	; (4b6c <opcode_0xB5()+0x40>)
    4b36:	0601      	lsls	r1, r0, #24
    4b38:	7018      	strb	r0, [r3, #0]
    4b3a:	7813      	ldrb	r3, [r2, #0]
    4b3c:	d40e      	bmi.n	4b5c <opcode_0xB5()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b42:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4b44:	b960      	cbnz	r0, 4b60 <opcode_0xB5()+0x34>
    4b46:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB5].length);
    4b4a:	4909      	ldr	r1, [pc, #36]	; (4b70 <opcode_0xB5()+0x44>)
    4b4c:	4809      	ldr	r0, [pc, #36]	; (4b74 <opcode_0xB5()+0x48>)
    4b4e:	7013      	strb	r3, [r2, #0]
    4b50:	f890 04f5 	ldrb.w	r0, [r0, #1269]	; 0x4f5
    4b54:	880b      	ldrh	r3, [r1, #0]
    4b56:	4418      	add	r0, r3
} // 0xB5 - LDA - ZeroPage , X
    4b58:	b280      	uxth	r0, r0
    4b5a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4b60:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4b64:	e7f1      	b.n	4b4a <opcode_0xB5()+0x1e>
    4b66:	bf00      	nop
    4b68:	200188a3 	.word	0x200188a3
    4b6c:	20004968 	.word	0x20004968
    4b70:	2001888c 	.word	0x2001888c
    4b74:	20017418 	.word	0x20017418

00004b78 <opcode_0xAD()>:
uint16_t opcode_0xAD() {
    4b78:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute();
    4b7a:	f7fe f8b1 	bl	2ce0 <Fetch_Absolute()>
    4b7e:	4b0d      	ldr	r3, [pc, #52]	; (4bb4 <opcode_0xAD()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4b80:	4a0d      	ldr	r2, [pc, #52]	; (4bb8 <opcode_0xAD()+0x40>)
    4b82:	0601      	lsls	r1, r0, #24
    4b84:	7018      	strb	r0, [r3, #0]
    4b86:	7813      	ldrb	r3, [r2, #0]
    4b88:	d40e      	bmi.n	4ba8 <opcode_0xAD()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b8e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4b90:	b960      	cbnz	r0, 4bac <opcode_0xAD()+0x34>
    4b92:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xAD].length);
    4b96:	4909      	ldr	r1, [pc, #36]	; (4bbc <opcode_0xAD()+0x44>)
    4b98:	4809      	ldr	r0, [pc, #36]	; (4bc0 <opcode_0xAD()+0x48>)
    4b9a:	7013      	strb	r3, [r2, #0]
    4b9c:	f890 0355 	ldrb.w	r0, [r0, #853]	; 0x355
    4ba0:	880b      	ldrh	r3, [r1, #0]
    4ba2:	4418      	add	r0, r3
} // 0xAD - LDA - Absolute
    4ba4:	b280      	uxth	r0, r0
    4ba6:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4bac:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4bb0:	e7f1      	b.n	4b96 <opcode_0xAD()+0x1e>
    4bb2:	bf00      	nop
    4bb4:	200188a3 	.word	0x200188a3
    4bb8:	20004968 	.word	0x20004968
    4bbc:	2001888c 	.word	0x2001888c
    4bc0:	20017418 	.word	0x20017418

00004bc4 <opcode_0xBD()>:
uint16_t opcode_0xBD() {
    4bc4:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_X(1);
    4bc6:	2001      	movs	r0, #1
    4bc8:	f7fe f8a6 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    4bcc:	4b0c      	ldr	r3, [pc, #48]	; (4c00 <opcode_0xBD()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4bce:	4a0d      	ldr	r2, [pc, #52]	; (4c04 <opcode_0xBD()+0x40>)
    4bd0:	0601      	lsls	r1, r0, #24
    4bd2:	7018      	strb	r0, [r3, #0]
    4bd4:	7813      	ldrb	r3, [r2, #0]
    4bd6:	d40e      	bmi.n	4bf6 <opcode_0xBD()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4bdc:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4bde:	b960      	cbnz	r0, 4bfa <opcode_0xBD()+0x36>
    4be0:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xBD].length);
    4be4:	4908      	ldr	r1, [pc, #32]	; (4c08 <opcode_0xBD()+0x44>)
    4be6:	4809      	ldr	r0, [pc, #36]	; (4c0c <opcode_0xBD()+0x48>)
    4be8:	7013      	strb	r3, [r2, #0]
    4bea:	f890 0695 	ldrb.w	r0, [r0, #1685]	; 0x695
    4bee:	880b      	ldrh	r3, [r1, #0]
    4bf0:	4418      	add	r0, r3
} // 0xBD - LDA - Absolute , X
    4bf2:	b280      	uxth	r0, r0
    4bf4:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4bfa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4bfe:	e7f1      	b.n	4be4 <opcode_0xBD()+0x20>
    4c00:	200188a3 	.word	0x200188a3
    4c04:	20004968 	.word	0x20004968
    4c08:	2001888c 	.word	0x2001888c
    4c0c:	20017418 	.word	0x20017418

00004c10 <opcode_0xB9()>:
uint16_t opcode_0xB9() {
    4c10:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_Y(1);
    4c12:	2001      	movs	r0, #1
    4c14:	f7fe f8b0 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    4c18:	4b0c      	ldr	r3, [pc, #48]	; (4c4c <opcode_0xB9()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4c1a:	4a0d      	ldr	r2, [pc, #52]	; (4c50 <opcode_0xB9()+0x40>)
    4c1c:	0601      	lsls	r1, r0, #24
    4c1e:	7018      	strb	r0, [r3, #0]
    4c20:	7813      	ldrb	r3, [r2, #0]
    4c22:	d40e      	bmi.n	4c42 <opcode_0xB9()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c28:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4c2a:	b960      	cbnz	r0, 4c46 <opcode_0xB9()+0x36>
    4c2c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB9].length);
    4c30:	4908      	ldr	r1, [pc, #32]	; (4c54 <opcode_0xB9()+0x44>)
    4c32:	4809      	ldr	r0, [pc, #36]	; (4c58 <opcode_0xB9()+0x48>)
    4c34:	7013      	strb	r3, [r2, #0]
    4c36:	f890 05c5 	ldrb.w	r0, [r0, #1477]	; 0x5c5
    4c3a:	880b      	ldrh	r3, [r1, #0]
    4c3c:	4418      	add	r0, r3
} // 0xB9 - LDA - Absolute , Y
    4c3e:	b280      	uxth	r0, r0
    4c40:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4c46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4c4a:	e7f1      	b.n	4c30 <opcode_0xB9()+0x20>
    4c4c:	200188a3 	.word	0x200188a3
    4c50:	20004968 	.word	0x20004968
    4c54:	2001888c 	.word	0x2001888c
    4c58:	20017418 	.word	0x20017418

00004c5c <opcode_0xA1()>:
uint16_t opcode_0xA1() {
    4c5c:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_X();
    4c5e:	f7fe f8bb 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    4c62:	4b0d      	ldr	r3, [pc, #52]	; (4c98 <opcode_0xA1()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4c64:	4a0d      	ldr	r2, [pc, #52]	; (4c9c <opcode_0xA1()+0x40>)
    4c66:	0601      	lsls	r1, r0, #24
    4c68:	7018      	strb	r0, [r3, #0]
    4c6a:	7813      	ldrb	r3, [r2, #0]
    4c6c:	d40e      	bmi.n	4c8c <opcode_0xA1()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4c72:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4c74:	b960      	cbnz	r0, 4c90 <opcode_0xA1()+0x34>
    4c76:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA1].length);
    4c7a:	4909      	ldr	r1, [pc, #36]	; (4ca0 <opcode_0xA1()+0x44>)
    4c7c:	4809      	ldr	r0, [pc, #36]	; (4ca4 <opcode_0xA1()+0x48>)
    4c7e:	7013      	strb	r3, [r2, #0]
    4c80:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
    4c84:	880b      	ldrh	r3, [r1, #0]
    4c86:	4418      	add	r0, r3
} // 0xA1 - LDA - Indexed Indirect X
    4c88:	b280      	uxth	r0, r0
    4c8a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4c90:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4c94:	e7f1      	b.n	4c7a <opcode_0xA1()+0x1e>
    4c96:	bf00      	nop
    4c98:	200188a3 	.word	0x200188a3
    4c9c:	20004968 	.word	0x20004968
    4ca0:	2001888c 	.word	0x2001888c
    4ca4:	20017418 	.word	0x20017418

00004ca8 <opcode_0xB1()>:
uint16_t opcode_0xB1() {
    4ca8:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_Y(1);
    4caa:	2001      	movs	r0, #1
    4cac:	f7fe f8be 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    4cb0:	4b0c      	ldr	r3, [pc, #48]	; (4ce4 <opcode_0xB1()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4cb2:	4a0d      	ldr	r2, [pc, #52]	; (4ce8 <opcode_0xB1()+0x40>)
    4cb4:	0601      	lsls	r1, r0, #24
    4cb6:	7018      	strb	r0, [r3, #0]
    4cb8:	7813      	ldrb	r3, [r2, #0]
    4cba:	d40e      	bmi.n	4cda <opcode_0xB1()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4cc0:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4cc2:	b960      	cbnz	r0, 4cde <opcode_0xB1()+0x36>
    4cc4:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB1].length);
    4cc8:	4908      	ldr	r1, [pc, #32]	; (4cec <opcode_0xB1()+0x44>)
    4cca:	4809      	ldr	r0, [pc, #36]	; (4cf0 <opcode_0xB1()+0x48>)
    4ccc:	7013      	strb	r3, [r2, #0]
    4cce:	f890 0425 	ldrb.w	r0, [r0, #1061]	; 0x425
    4cd2:	880b      	ldrh	r3, [r1, #0]
    4cd4:	4418      	add	r0, r3
} // 0xB1 - LDA - Indirect Indexed  Y
    4cd6:	b280      	uxth	r0, r0
    4cd8:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4cde:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ce2:	e7f1      	b.n	4cc8 <opcode_0xB1()+0x20>
    4ce4:	200188a3 	.word	0x200188a3
    4ce8:	20004968 	.word	0x20004968
    4cec:	2001888c 	.word	0x2001888c
    4cf0:	20017418 	.word	0x20017418

00004cf4 <opcode_0xA2()>:

// -------------------------------------------------
// LDX
// -------------------------------------------------
uint16_t opcode_0xA2() {
    4cf4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4cf6:	4c10      	ldr	r4, [pc, #64]	; (4d38 <opcode_0xA2()+0x44>)
    4cf8:	2100      	movs	r1, #0
    4cfa:	8820      	ldrh	r0, [r4, #0]
    4cfc:	3001      	adds	r0, #1
    4cfe:	b280      	uxth	r0, r0
    4d00:	f7fd fcb6 	bl	2670 <read_byte(unsigned short, bool)>
    register_x = Fetch_Immediate(1);
    4d04:	4b0d      	ldr	r3, [pc, #52]	; (4d3c <opcode_0xA2()+0x48>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d06:	4a0e      	ldr	r2, [pc, #56]	; (4d40 <opcode_0xA2()+0x4c>)
    4d08:	0601      	lsls	r1, r0, #24
    4d0a:	7018      	strb	r0, [r3, #0]
    4d0c:	7813      	ldrb	r3, [r2, #0]
    4d0e:	d40d      	bmi.n	4d2c <opcode_0xA2()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d14:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4d16:	b958      	cbnz	r0, 4d30 <opcode_0xA2()+0x3c>
    4d18:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xA2].length);
    4d1c:	4809      	ldr	r0, [pc, #36]	; (4d44 <opcode_0xA2()+0x50>)
    4d1e:	8821      	ldrh	r1, [r4, #0]
    4d20:	f890 0119 	ldrb.w	r0, [r0, #281]	; 0x119
    4d24:	7013      	strb	r3, [r2, #0]
    4d26:	4408      	add	r0, r1
} // 0xA2 - LDX - Immediate
    4d28:	b280      	uxth	r0, r0
    4d2a:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4d30:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4d34:	e7f2      	b.n	4d1c <opcode_0xA2()+0x28>
    4d36:	bf00      	nop
    4d38:	2001888c 	.word	0x2001888c
    4d3c:	200188a4 	.word	0x200188a4
    4d40:	20004968 	.word	0x20004968
    4d44:	20017418 	.word	0x20017418

00004d48 <opcode_0xA6()>:
uint16_t opcode_0xA6() {
    4d48:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4d4a:	4c13      	ldr	r4, [pc, #76]	; (4d98 <opcode_0xA6()+0x50>)
    4d4c:	2100      	movs	r1, #0
    4d4e:	8820      	ldrh	r0, [r4, #0]
    4d50:	3001      	adds	r0, #1
    4d52:	b280      	uxth	r0, r0
    4d54:	f7fd fc8c 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4d58:	4b10      	ldr	r3, [pc, #64]	; (4d9c <opcode_0xA6()+0x54>)
    4d5a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4d5c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4d5e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4d60:	f7fd fc86 	bl	2670 <read_byte(unsigned short, bool)>
    register_x = Fetch_ZeroPage();
    4d64:	4b0e      	ldr	r3, [pc, #56]	; (4da0 <opcode_0xA6()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d66:	0601      	lsls	r1, r0, #24
    4d68:	4a0e      	ldr	r2, [pc, #56]	; (4da4 <opcode_0xA6()+0x5c>)
    4d6a:	7018      	strb	r0, [r3, #0]
    4d6c:	7813      	ldrb	r3, [r2, #0]
    4d6e:	d40d      	bmi.n	4d8c <opcode_0xA6()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d74:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4d76:	b958      	cbnz	r0, 4d90 <opcode_0xA6()+0x48>
    4d78:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xA6].length);
    4d7c:	480a      	ldr	r0, [pc, #40]	; (4da8 <opcode_0xA6()+0x60>)
    4d7e:	8821      	ldrh	r1, [r4, #0]
    4d80:	f890 01e9 	ldrb.w	r0, [r0, #489]	; 0x1e9
    4d84:	7013      	strb	r3, [r2, #0]
    4d86:	4408      	add	r0, r1
} // 0xA6 - LDX - ZeroPage
    4d88:	b280      	uxth	r0, r0
    4d8a:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4d90:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4d94:	e7f2      	b.n	4d7c <opcode_0xA6()+0x34>
    4d96:	bf00      	nop
    4d98:	2001888c 	.word	0x2001888c
    4d9c:	2001888a 	.word	0x2001888a
    4da0:	200188a4 	.word	0x200188a4
    4da4:	20004968 	.word	0x20004968
    4da8:	20017418 	.word	0x20017418

00004dac <opcode_0xB6()>:
uint16_t opcode_0xB6() {
    4dac:	b508      	push	{r3, lr}
    register_x = Fetch_ZeroPage_Y();
    4dae:	f7fd ff77 	bl	2ca0 <Fetch_ZeroPage_Y()>
    4db2:	4b0d      	ldr	r3, [pc, #52]	; (4de8 <opcode_0xB6()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4db4:	4a0d      	ldr	r2, [pc, #52]	; (4dec <opcode_0xB6()+0x40>)
    4db6:	0601      	lsls	r1, r0, #24
    4db8:	7018      	strb	r0, [r3, #0]
    4dba:	7813      	ldrb	r3, [r2, #0]
    4dbc:	d40e      	bmi.n	4ddc <opcode_0xB6()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4dc2:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4dc4:	b960      	cbnz	r0, 4de0 <opcode_0xB6()+0x34>
    4dc6:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xB6].length);
    4dca:	4909      	ldr	r1, [pc, #36]	; (4df0 <opcode_0xB6()+0x44>)
    4dcc:	4809      	ldr	r0, [pc, #36]	; (4df4 <opcode_0xB6()+0x48>)
    4dce:	7013      	strb	r3, [r2, #0]
    4dd0:	f890 0529 	ldrb.w	r0, [r0, #1321]	; 0x529
    4dd4:	880b      	ldrh	r3, [r1, #0]
    4dd6:	4418      	add	r0, r3
} // 0xB6 - LDX - ZeroPage , Y
    4dd8:	b280      	uxth	r0, r0
    4dda:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4de0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4de4:	e7f1      	b.n	4dca <opcode_0xB6()+0x1e>
    4de6:	bf00      	nop
    4de8:	200188a4 	.word	0x200188a4
    4dec:	20004968 	.word	0x20004968
    4df0:	2001888c 	.word	0x2001888c
    4df4:	20017418 	.word	0x20017418

00004df8 <opcode_0xAE()>:
uint16_t opcode_0xAE() {
    4df8:	b508      	push	{r3, lr}
    register_x = Fetch_Absolute();
    4dfa:	f7fd ff71 	bl	2ce0 <Fetch_Absolute()>
    4dfe:	4b0d      	ldr	r3, [pc, #52]	; (4e34 <opcode_0xAE()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e00:	4a0d      	ldr	r2, [pc, #52]	; (4e38 <opcode_0xAE()+0x40>)
    4e02:	0601      	lsls	r1, r0, #24
    4e04:	7018      	strb	r0, [r3, #0]
    4e06:	7813      	ldrb	r3, [r2, #0]
    4e08:	d40e      	bmi.n	4e28 <opcode_0xAE()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e0e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4e10:	b960      	cbnz	r0, 4e2c <opcode_0xAE()+0x34>
    4e12:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xAE].length);
    4e16:	4909      	ldr	r1, [pc, #36]	; (4e3c <opcode_0xAE()+0x44>)
    4e18:	4809      	ldr	r0, [pc, #36]	; (4e40 <opcode_0xAE()+0x48>)
    4e1a:	7013      	strb	r3, [r2, #0]
    4e1c:	f890 0389 	ldrb.w	r0, [r0, #905]	; 0x389
    4e20:	880b      	ldrh	r3, [r1, #0]
    4e22:	4418      	add	r0, r3
} // 0xAE - LDX - Absolute
    4e24:	b280      	uxth	r0, r0
    4e26:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4e2c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4e30:	e7f1      	b.n	4e16 <opcode_0xAE()+0x1e>
    4e32:	bf00      	nop
    4e34:	200188a4 	.word	0x200188a4
    4e38:	20004968 	.word	0x20004968
    4e3c:	2001888c 	.word	0x2001888c
    4e40:	20017418 	.word	0x20017418

00004e44 <opcode_0xBE()>:
uint16_t opcode_0xBE() {
    4e44:	b508      	push	{r3, lr}
    register_x = Fetch_Absolute_Y(1);
    4e46:	2001      	movs	r0, #1
    4e48:	f7fd ff96 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    4e4c:	4b0c      	ldr	r3, [pc, #48]	; (4e80 <opcode_0xBE()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e4e:	4a0d      	ldr	r2, [pc, #52]	; (4e84 <opcode_0xBE()+0x40>)
    4e50:	0601      	lsls	r1, r0, #24
    4e52:	7018      	strb	r0, [r3, #0]
    4e54:	7813      	ldrb	r3, [r2, #0]
    4e56:	d40e      	bmi.n	4e76 <opcode_0xBE()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e5c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4e5e:	b960      	cbnz	r0, 4e7a <opcode_0xBE()+0x36>
    4e60:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return(register_pc + opcode_info[0xBE].length);
    4e64:	4908      	ldr	r1, [pc, #32]	; (4e88 <opcode_0xBE()+0x44>)
    4e66:	4809      	ldr	r0, [pc, #36]	; (4e8c <opcode_0xBE()+0x48>)
    4e68:	7013      	strb	r3, [r2, #0]
    4e6a:	f890 06c9 	ldrb.w	r0, [r0, #1737]	; 0x6c9
    4e6e:	880b      	ldrh	r3, [r1, #0]
    4e70:	4418      	add	r0, r3
} // 0xBE - LDX - Absolute , Y
    4e72:	b280      	uxth	r0, r0
    4e74:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4e7a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4e7e:	e7f1      	b.n	4e64 <opcode_0xBE()+0x20>
    4e80:	200188a4 	.word	0x200188a4
    4e84:	20004968 	.word	0x20004968
    4e88:	2001888c 	.word	0x2001888c
    4e8c:	20017418 	.word	0x20017418

00004e90 <opcode_0xA0()>:

// -------------------------------------------------          
// LDY                                                        
// -------------------------------------------------          
uint16_t opcode_0xA0() {
    4e90:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4e92:	4c10      	ldr	r4, [pc, #64]	; (4ed4 <opcode_0xA0()+0x44>)
    4e94:	2100      	movs	r1, #0
    4e96:	8820      	ldrh	r0, [r4, #0]
    4e98:	3001      	adds	r0, #1
    4e9a:	b280      	uxth	r0, r0
    4e9c:	f7fd fbe8 	bl	2670 <read_byte(unsigned short, bool)>
    register_y = Fetch_Immediate(1);
    4ea0:	4b0d      	ldr	r3, [pc, #52]	; (4ed8 <opcode_0xA0()+0x48>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ea2:	4a0e      	ldr	r2, [pc, #56]	; (4edc <opcode_0xA0()+0x4c>)
    4ea4:	0601      	lsls	r1, r0, #24
    4ea6:	7018      	strb	r0, [r3, #0]
    4ea8:	7813      	ldrb	r3, [r2, #0]
    4eaa:	d40d      	bmi.n	4ec8 <opcode_0xA0()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4eb0:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4eb2:	b958      	cbnz	r0, 4ecc <opcode_0xA0()+0x3c>
    4eb4:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xA0].length);
    4eb8:	4809      	ldr	r0, [pc, #36]	; (4ee0 <opcode_0xA0()+0x50>)
    4eba:	8821      	ldrh	r1, [r4, #0]
    4ebc:	f890 00b1 	ldrb.w	r0, [r0, #177]	; 0xb1
    4ec0:	7013      	strb	r3, [r2, #0]
    4ec2:	4408      	add	r0, r1
} // 0xA0 - LDY - Immediate
    4ec4:	b280      	uxth	r0, r0
    4ec6:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4ecc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ed0:	e7f2      	b.n	4eb8 <opcode_0xA0()+0x28>
    4ed2:	bf00      	nop
    4ed4:	2001888c 	.word	0x2001888c
    4ed8:	200188a5 	.word	0x200188a5
    4edc:	20004968 	.word	0x20004968
    4ee0:	20017418 	.word	0x20017418

00004ee4 <opcode_0xA4()>:
uint16_t opcode_0xA4() {
    4ee4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    4ee6:	4c13      	ldr	r4, [pc, #76]	; (4f34 <opcode_0xA4()+0x50>)
    4ee8:	2100      	movs	r1, #0
    4eea:	8820      	ldrh	r0, [r4, #0]
    4eec:	3001      	adds	r0, #1
    4eee:	b280      	uxth	r0, r0
    4ef0:	f7fd fbbe 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    4ef4:	4b10      	ldr	r3, [pc, #64]	; (4f38 <opcode_0xA4()+0x54>)
    4ef6:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4ef8:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    4efa:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4efc:	f7fd fbb8 	bl	2670 <read_byte(unsigned short, bool)>
    register_y = Fetch_ZeroPage();
    4f00:	4b0e      	ldr	r3, [pc, #56]	; (4f3c <opcode_0xA4()+0x58>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f02:	0601      	lsls	r1, r0, #24
    4f04:	4a0e      	ldr	r2, [pc, #56]	; (4f40 <opcode_0xA4()+0x5c>)
    4f06:	7018      	strb	r0, [r3, #0]
    4f08:	7813      	ldrb	r3, [r2, #0]
    4f0a:	d40d      	bmi.n	4f28 <opcode_0xA4()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f10:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4f12:	b958      	cbnz	r0, 4f2c <opcode_0xA4()+0x48>
    4f14:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xA4].length);
    4f18:	480a      	ldr	r0, [pc, #40]	; (4f44 <opcode_0xA4()+0x60>)
    4f1a:	8821      	ldrh	r1, [r4, #0]
    4f1c:	f890 0181 	ldrb.w	r0, [r0, #385]	; 0x181
    4f20:	7013      	strb	r3, [r2, #0]
    4f22:	4408      	add	r0, r1
} // 0xA4 - LDY - ZeroPage
    4f24:	b280      	uxth	r0, r0
    4f26:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4f2c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4f30:	e7f2      	b.n	4f18 <opcode_0xA4()+0x34>
    4f32:	bf00      	nop
    4f34:	2001888c 	.word	0x2001888c
    4f38:	2001888a 	.word	0x2001888a
    4f3c:	200188a5 	.word	0x200188a5
    4f40:	20004968 	.word	0x20004968
    4f44:	20017418 	.word	0x20017418

00004f48 <opcode_0xB4()>:
uint16_t opcode_0xB4() {
    4f48:	b508      	push	{r3, lr}
    register_y = Fetch_ZeroPage_X();
    4f4a:	f7fd fe89 	bl	2c60 <Fetch_ZeroPage_X()>
    4f4e:	4b0d      	ldr	r3, [pc, #52]	; (4f84 <opcode_0xB4()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f50:	4a0d      	ldr	r2, [pc, #52]	; (4f88 <opcode_0xB4()+0x40>)
    4f52:	0601      	lsls	r1, r0, #24
    4f54:	7018      	strb	r0, [r3, #0]
    4f56:	7813      	ldrb	r3, [r2, #0]
    4f58:	d40e      	bmi.n	4f78 <opcode_0xB4()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f5e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4f60:	b960      	cbnz	r0, 4f7c <opcode_0xB4()+0x34>
    4f62:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xB4].length);
    4f66:	4909      	ldr	r1, [pc, #36]	; (4f8c <opcode_0xB4()+0x44>)
    4f68:	4809      	ldr	r0, [pc, #36]	; (4f90 <opcode_0xB4()+0x48>)
    4f6a:	7013      	strb	r3, [r2, #0]
    4f6c:	f890 04c1 	ldrb.w	r0, [r0, #1217]	; 0x4c1
    4f70:	880b      	ldrh	r3, [r1, #0]
    4f72:	4418      	add	r0, r3
} // 0xB4 - LDY - ZeroPage , X
    4f74:	b280      	uxth	r0, r0
    4f76:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4f7c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4f80:	e7f1      	b.n	4f66 <opcode_0xB4()+0x1e>
    4f82:	bf00      	nop
    4f84:	200188a5 	.word	0x200188a5
    4f88:	20004968 	.word	0x20004968
    4f8c:	2001888c 	.word	0x2001888c
    4f90:	20017418 	.word	0x20017418

00004f94 <opcode_0xAC()>:
uint16_t opcode_0xAC() {
    4f94:	b508      	push	{r3, lr}
    register_y = Fetch_Absolute();
    4f96:	f7fd fea3 	bl	2ce0 <Fetch_Absolute()>
    4f9a:	4b0d      	ldr	r3, [pc, #52]	; (4fd0 <opcode_0xAC()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f9c:	4a0d      	ldr	r2, [pc, #52]	; (4fd4 <opcode_0xAC()+0x40>)
    4f9e:	0601      	lsls	r1, r0, #24
    4fa0:	7018      	strb	r0, [r3, #0]
    4fa2:	7813      	ldrb	r3, [r2, #0]
    4fa4:	d40e      	bmi.n	4fc4 <opcode_0xAC()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4faa:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4fac:	b960      	cbnz	r0, 4fc8 <opcode_0xAC()+0x34>
    4fae:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xAC].length);
    4fb2:	4909      	ldr	r1, [pc, #36]	; (4fd8 <opcode_0xAC()+0x44>)
    4fb4:	4809      	ldr	r0, [pc, #36]	; (4fdc <opcode_0xAC()+0x48>)
    4fb6:	7013      	strb	r3, [r2, #0]
    4fb8:	f890 0321 	ldrb.w	r0, [r0, #801]	; 0x321
    4fbc:	880b      	ldrh	r3, [r1, #0]
    4fbe:	4418      	add	r0, r3
} // 0xAC - LDY - Absolute
    4fc0:	b280      	uxth	r0, r0
    4fc2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4fc8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4fcc:	e7f1      	b.n	4fb2 <opcode_0xAC()+0x1e>
    4fce:	bf00      	nop
    4fd0:	200188a5 	.word	0x200188a5
    4fd4:	20004968 	.word	0x20004968
    4fd8:	2001888c 	.word	0x2001888c
    4fdc:	20017418 	.word	0x20017418

00004fe0 <opcode_0xBC()>:
uint16_t opcode_0xBC() {
    4fe0:	b508      	push	{r3, lr}
    register_y = Fetch_Absolute_X(1);
    4fe2:	2001      	movs	r0, #1
    4fe4:	f7fd fe98 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    4fe8:	4b0c      	ldr	r3, [pc, #48]	; (501c <opcode_0xBC()+0x3c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4fea:	4a0d      	ldr	r2, [pc, #52]	; (5020 <opcode_0xBC()+0x40>)
    4fec:	0601      	lsls	r1, r0, #24
    4fee:	7018      	strb	r0, [r3, #0]
    4ff0:	7813      	ldrb	r3, [r2, #0]
    4ff2:	d40e      	bmi.n	5012 <opcode_0xBC()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ff8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4ffa:	b960      	cbnz	r0, 5016 <opcode_0xBC()+0x36>
    4ffc:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return(register_pc + opcode_info[0xBC].length);
    5000:	4908      	ldr	r1, [pc, #32]	; (5024 <opcode_0xBC()+0x44>)
    5002:	4809      	ldr	r0, [pc, #36]	; (5028 <opcode_0xBC()+0x48>)
    5004:	7013      	strb	r3, [r2, #0]
    5006:	f890 0661 	ldrb.w	r0, [r0, #1633]	; 0x661
    500a:	880b      	ldrh	r3, [r1, #0]
    500c:	4418      	add	r0, r3
} // 0xBC - LDY - Absolute , X
    500e:	b280      	uxth	r0, r0
    5010:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5016:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    501a:	e7f1      	b.n	5000 <opcode_0xBC()+0x20>
    501c:	200188a5 	.word	0x200188a5
    5020:	20004968 	.word	0x20004968
    5024:	2001888c 	.word	0x2001888c
    5028:	20017418 	.word	0x20017418

0000502c <opcode_0x24()>:
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    else register_flags = register_flags & 0xFD; // Clear the Z flag 

    return;
}
uint16_t opcode_0x24() {
    502c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    502e:	4c12      	ldr	r4, [pc, #72]	; (5078 <opcode_0x24()+0x4c>)
    5030:	2100      	movs	r1, #0
    5032:	8820      	ldrh	r0, [r4, #0]
    5034:	3001      	adds	r0, #1
    5036:	b280      	uxth	r0, r0
    5038:	f7fd fb1a 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    503c:	4b0f      	ldr	r3, [pc, #60]	; (507c <opcode_0x24()+0x50>)
    503e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    5040:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5042:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    5044:	f7fd fb14 	bl	2670 <read_byte(unsigned short, bool)>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    5048:	490d      	ldr	r1, [pc, #52]	; (5080 <opcode_0x24()+0x54>)
    504a:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    504e:	780a      	ldrb	r2, [r1, #0]
    5050:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    5054:	4313      	orrs	r3, r2
    temp = local_data & register_a;
    5056:	4a0b      	ldr	r2, [pc, #44]	; (5084 <opcode_0x24()+0x58>)
    5058:	7812      	ldrb	r2, [r2, #0]
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    505a:	4210      	tst	r0, r2
    Calculate_BIT(Fetch_ZeroPage());
    return(register_pc + opcode_info[0x24].length);
    505c:	480a      	ldr	r0, [pc, #40]	; (5088 <opcode_0x24()+0x5c>)
    505e:	8822      	ldrh	r2, [r4, #0]
    5060:	f890 0781 	ldrb.w	r0, [r0, #1921]	; 0x781
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5064:	bf0c      	ite	eq
    5066:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    506a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    return(register_pc + opcode_info[0x24].length);
    506e:	4410      	add	r0, r2
    5070:	700b      	strb	r3, [r1, #0]
} // 0x24 - BIT - ZeroPage
    5072:	b280      	uxth	r0, r0
    5074:	bd10      	pop	{r4, pc}
    5076:	bf00      	nop
    5078:	2001888c 	.word	0x2001888c
    507c:	2001888a 	.word	0x2001888a
    5080:	20004968 	.word	0x20004968
    5084:	200188a3 	.word	0x200188a3
    5088:	20015418 	.word	0x20015418

0000508c <opcode_0x2C()>:
uint16_t opcode_0x2C() {
    508c:	b508      	push	{r3, lr}
    Calculate_BIT(Fetch_Absolute());
    508e:	f7fd fe27 	bl	2ce0 <Fetch_Absolute()>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    5092:	490d      	ldr	r1, [pc, #52]	; (50c8 <opcode_0x2C()+0x3c>)
    temp = local_data & register_a;
    5094:	4b0d      	ldr	r3, [pc, #52]	; (50cc <opcode_0x2C()+0x40>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    5096:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    5098:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    509c:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    50a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    50a4:	ea10 0f0c 	tst.w	r0, ip
    return(register_pc + opcode_info[0x2C].length);
    50a8:	4809      	ldr	r0, [pc, #36]	; (50d0 <opcode_0x2C()+0x44>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    50aa:	ea43 0302 	orr.w	r3, r3, r2
    return(register_pc + opcode_info[0x2C].length);
    50ae:	4a09      	ldr	r2, [pc, #36]	; (50d4 <opcode_0x2C()+0x48>)
    50b0:	f890 0921 	ldrb.w	r0, [r0, #2337]	; 0x921
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    50b4:	bf0c      	ite	eq
    50b6:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    50ba:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    50be:	700b      	strb	r3, [r1, #0]
    return(register_pc + opcode_info[0x2C].length);
    50c0:	8813      	ldrh	r3, [r2, #0]
    50c2:	4418      	add	r0, r3
} // 0x2C - BIT - Absolute
    50c4:	b280      	uxth	r0, r0
    50c6:	bd08      	pop	{r3, pc}
    50c8:	20004968 	.word	0x20004968
    50cc:	200188a3 	.word	0x200188a3
    50d0:	20015418 	.word	0x20015418
    50d4:	2001888c 	.word	0x2001888c

000050d8 <opcode_0xC9()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC9() {
    50d8:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    50da:	4c14      	ldr	r4, [pc, #80]	; (512c <opcode_0xC9()+0x54>)
    50dc:	2100      	movs	r1, #0
    50de:	8820      	ldrh	r0, [r4, #0]
    50e0:	3001      	adds	r0, #1
    50e2:	b280      	uxth	r0, r0
    50e4:	f7fd fac4 	bl	2670 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    50e8:	4b11      	ldr	r3, [pc, #68]	; (5130 <opcode_0xC9()+0x58>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    50ea:	4912      	ldr	r1, [pc, #72]	; (5134 <opcode_0xC9()+0x5c>)
    temp = register_a - local_data;
    50ec:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    50ee:	780b      	ldrb	r3, [r1, #0]
    50f0:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    50f2:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    50f6:	bf94      	ite	ls
    50f8:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    50fc:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5100:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5102:	0600      	lsls	r0, r0, #24
    5104:	d40d      	bmi.n	5122 <opcode_0xC9()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    510a:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    510c:	b95a      	cbnz	r2, 5126 <opcode_0xC9()+0x4e>
    510e:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CMP(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC9].length);
    5112:	4809      	ldr	r0, [pc, #36]	; (5138 <opcode_0xC9()+0x60>)
    5114:	8822      	ldrh	r2, [r4, #0]
    5116:	f890 0905 	ldrb.w	r0, [r0, #2309]	; 0x905
    511a:	700b      	strb	r3, [r1, #0]
    511c:	4410      	add	r0, r2
} // 0xC9 - CMP - Immediate
    511e:	b280      	uxth	r0, r0
    5120:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5126:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    512a:	e7f2      	b.n	5112 <opcode_0xC9()+0x3a>
    512c:	2001888c 	.word	0x2001888c
    5130:	200188a3 	.word	0x200188a3
    5134:	20004968 	.word	0x20004968
    5138:	20017418 	.word	0x20017418

0000513c <opcode_0xC5()>:
uint16_t opcode_0xC5() {
    513c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    513e:	4c17      	ldr	r4, [pc, #92]	; (519c <opcode_0xC5()+0x60>)
    5140:	2100      	movs	r1, #0
    5142:	8820      	ldrh	r0, [r4, #0]
    5144:	3001      	adds	r0, #1
    5146:	b280      	uxth	r0, r0
    5148:	f7fd fa92 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    514c:	4b14      	ldr	r3, [pc, #80]	; (51a0 <opcode_0xC5()+0x64>)
    514e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    5150:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5152:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    5154:	f7fd fa8c 	bl	2670 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    5158:	4b12      	ldr	r3, [pc, #72]	; (51a4 <opcode_0xC5()+0x68>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    515a:	4913      	ldr	r1, [pc, #76]	; (51a8 <opcode_0xC5()+0x6c>)
    temp = register_a - local_data;
    515c:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    515e:	780b      	ldrb	r3, [r1, #0]
    5160:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    5162:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5166:	bf2c      	ite	cs
    5168:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    516c:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5170:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5172:	0600      	lsls	r0, r0, #24
    5174:	d40d      	bmi.n	5192 <opcode_0xC5()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    517a:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    517c:	b95a      	cbnz	r2, 5196 <opcode_0xC5()+0x5a>
    517e:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CMP(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC5].length);
    5182:	480a      	ldr	r0, [pc, #40]	; (51ac <opcode_0xC5()+0x70>)
    5184:	8822      	ldrh	r2, [r4, #0]
    5186:	f890 0835 	ldrb.w	r0, [r0, #2101]	; 0x835
    518a:	700b      	strb	r3, [r1, #0]
    518c:	4410      	add	r0, r2
} // 0xC5 - CMP - ZeroPage
    518e:	b280      	uxth	r0, r0
    5190:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5196:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    519a:	e7f2      	b.n	5182 <opcode_0xC5()+0x46>
    519c:	2001888c 	.word	0x2001888c
    51a0:	2001888a 	.word	0x2001888a
    51a4:	200188a3 	.word	0x200188a3
    51a8:	20004968 	.word	0x20004968
    51ac:	20017418 	.word	0x20017418

000051b0 <opcode_0xD5()>:
uint16_t opcode_0xD5() {
    51b0:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_ZeroPage_X());
    51b2:	f7fd fd55 	bl	2c60 <Fetch_ZeroPage_X()>
    temp = register_a - local_data;
    51b6:	4b11      	ldr	r3, [pc, #68]	; (51fc <opcode_0xD5()+0x4c>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    51b8:	4911      	ldr	r1, [pc, #68]	; (5200 <opcode_0xD5()+0x50>)
    temp = register_a - local_data;
    51ba:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    51bc:	780b      	ldrb	r3, [r1, #0]
    51be:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    51c0:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    51c4:	bf94      	ite	ls
    51c6:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    51ca:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    51ce:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    51d0:	0600      	lsls	r0, r0, #24
    51d2:	d40e      	bmi.n	51f2 <opcode_0xD5()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    51d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    51d8:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    51da:	b962      	cbnz	r2, 51f6 <opcode_0xD5()+0x46>
    51dc:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD5].length);
    51e0:	4a08      	ldr	r2, [pc, #32]	; (5204 <opcode_0xD5()+0x54>)
    51e2:	4809      	ldr	r0, [pc, #36]	; (5208 <opcode_0xD5()+0x58>)
    51e4:	700b      	strb	r3, [r1, #0]
    51e6:	f890 0b75 	ldrb.w	r0, [r0, #2933]	; 0xb75
    51ea:	8813      	ldrh	r3, [r2, #0]
    51ec:	4418      	add	r0, r3
} // 0xD5 - CMP - ZeroPage , X
    51ee:	b280      	uxth	r0, r0
    51f0:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    51f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    51f6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    51fa:	e7f1      	b.n	51e0 <opcode_0xD5()+0x30>
    51fc:	200188a3 	.word	0x200188a3
    5200:	20004968 	.word	0x20004968
    5204:	2001888c 	.word	0x2001888c
    5208:	20017418 	.word	0x20017418

0000520c <opcode_0xCD()>:
uint16_t opcode_0xCD() {
    520c:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute());
    520e:	f7fd fd67 	bl	2ce0 <Fetch_Absolute()>
    temp = register_a - local_data;
    5212:	4b11      	ldr	r3, [pc, #68]	; (5258 <opcode_0xCD()+0x4c>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5214:	4911      	ldr	r1, [pc, #68]	; (525c <opcode_0xCD()+0x50>)
    temp = register_a - local_data;
    5216:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5218:	780b      	ldrb	r3, [r1, #0]
    521a:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    521c:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5220:	bf94      	ite	ls
    5222:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5226:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    522a:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    522c:	0600      	lsls	r0, r0, #24
    522e:	d40e      	bmi.n	524e <opcode_0xCD()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5234:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5236:	b962      	cbnz	r2, 5252 <opcode_0xCD()+0x46>
    5238:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xCD].length);
    523c:	4a08      	ldr	r2, [pc, #32]	; (5260 <opcode_0xCD()+0x54>)
    523e:	4809      	ldr	r0, [pc, #36]	; (5264 <opcode_0xCD()+0x58>)
    5240:	700b      	strb	r3, [r1, #0]
    5242:	f890 09d5 	ldrb.w	r0, [r0, #2517]	; 0x9d5
    5246:	8813      	ldrh	r3, [r2, #0]
    5248:	4418      	add	r0, r3
} // 0xCD - CMP - Absolute
    524a:	b280      	uxth	r0, r0
    524c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5252:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5256:	e7f1      	b.n	523c <opcode_0xCD()+0x30>
    5258:	200188a3 	.word	0x200188a3
    525c:	20004968 	.word	0x20004968
    5260:	2001888c 	.word	0x2001888c
    5264:	20017418 	.word	0x20017418

00005268 <opcode_0xDD()>:
uint16_t opcode_0xDD() {
    5268:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute_X(1));
    526a:	2001      	movs	r0, #1
    526c:	f7fd fd54 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    temp = register_a - local_data;
    5270:	4b11      	ldr	r3, [pc, #68]	; (52b8 <opcode_0xDD()+0x50>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5272:	4912      	ldr	r1, [pc, #72]	; (52bc <opcode_0xDD()+0x54>)
    temp = register_a - local_data;
    5274:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5276:	780b      	ldrb	r3, [r1, #0]
    5278:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    527a:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    527e:	bf94      	ite	ls
    5280:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5284:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5288:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    528a:	0600      	lsls	r0, r0, #24
    528c:	d40e      	bmi.n	52ac <opcode_0xDD()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    528e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5292:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5294:	b962      	cbnz	r2, 52b0 <opcode_0xDD()+0x48>
    5296:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xDD].length);
    529a:	4a09      	ldr	r2, [pc, #36]	; (52c0 <opcode_0xDD()+0x58>)
    529c:	4809      	ldr	r0, [pc, #36]	; (52c4 <opcode_0xDD()+0x5c>)
    529e:	700b      	strb	r3, [r1, #0]
    52a0:	f890 0d15 	ldrb.w	r0, [r0, #3349]	; 0xd15
    52a4:	8813      	ldrh	r3, [r2, #0]
    52a6:	4418      	add	r0, r3
} // 0xDD - CMP - Absolute , X
    52a8:	b280      	uxth	r0, r0
    52aa:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    52ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    52b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    52b4:	e7f1      	b.n	529a <opcode_0xDD()+0x32>
    52b6:	bf00      	nop
    52b8:	200188a3 	.word	0x200188a3
    52bc:	20004968 	.word	0x20004968
    52c0:	2001888c 	.word	0x2001888c
    52c4:	20017418 	.word	0x20017418

000052c8 <opcode_0xD9()>:
uint16_t opcode_0xD9() {
    52c8:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute_Y(1));
    52ca:	2001      	movs	r0, #1
    52cc:	f7fd fd54 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    temp = register_a - local_data;
    52d0:	4b11      	ldr	r3, [pc, #68]	; (5318 <opcode_0xD9()+0x50>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    52d2:	4912      	ldr	r1, [pc, #72]	; (531c <opcode_0xD9()+0x54>)
    temp = register_a - local_data;
    52d4:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    52d6:	780b      	ldrb	r3, [r1, #0]
    52d8:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    52da:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    52de:	bf94      	ite	ls
    52e0:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    52e4:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    52e8:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    52ea:	0600      	lsls	r0, r0, #24
    52ec:	d40e      	bmi.n	530c <opcode_0xD9()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    52ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    52f2:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    52f4:	b962      	cbnz	r2, 5310 <opcode_0xD9()+0x48>
    52f6:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD9].length);
    52fa:	4a09      	ldr	r2, [pc, #36]	; (5320 <opcode_0xD9()+0x58>)
    52fc:	4809      	ldr	r0, [pc, #36]	; (5324 <opcode_0xD9()+0x5c>)
    52fe:	700b      	strb	r3, [r1, #0]
    5300:	f890 0c45 	ldrb.w	r0, [r0, #3141]	; 0xc45
    5304:	8813      	ldrh	r3, [r2, #0]
    5306:	4418      	add	r0, r3
} // 0xD9 - CMP - Absolute , Y
    5308:	b280      	uxth	r0, r0
    530a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5310:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5314:	e7f1      	b.n	52fa <opcode_0xD9()+0x32>
    5316:	bf00      	nop
    5318:	200188a3 	.word	0x200188a3
    531c:	20004968 	.word	0x20004968
    5320:	2001888c 	.word	0x2001888c
    5324:	20017418 	.word	0x20017418

00005328 <opcode_0xC1()>:
uint16_t opcode_0xC1() {
    5328:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Indexed_Indirect_X());
    532a:	f7fd fd55 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    temp = register_a - local_data;
    532e:	4b11      	ldr	r3, [pc, #68]	; (5374 <opcode_0xC1()+0x4c>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5330:	4911      	ldr	r1, [pc, #68]	; (5378 <opcode_0xC1()+0x50>)
    temp = register_a - local_data;
    5332:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5334:	780b      	ldrb	r3, [r1, #0]
    5336:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5338:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    533c:	bf94      	ite	ls
    533e:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5342:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5346:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5348:	0600      	lsls	r0, r0, #24
    534a:	d40e      	bmi.n	536a <opcode_0xC1()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    534c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5350:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5352:	b962      	cbnz	r2, 536e <opcode_0xC1()+0x46>
    5354:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xC1].length);
    5358:	4a08      	ldr	r2, [pc, #32]	; (537c <opcode_0xC1()+0x54>)
    535a:	4809      	ldr	r0, [pc, #36]	; (5380 <opcode_0xC1()+0x58>)
    535c:	700b      	strb	r3, [r1, #0]
    535e:	f890 0765 	ldrb.w	r0, [r0, #1893]	; 0x765
    5362:	8813      	ldrh	r3, [r2, #0]
    5364:	4418      	add	r0, r3
} // 0xC1 - CMP - Indexed Indirect X
    5366:	b280      	uxth	r0, r0
    5368:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    536a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    536e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5372:	e7f1      	b.n	5358 <opcode_0xC1()+0x30>
    5374:	200188a3 	.word	0x200188a3
    5378:	20004968 	.word	0x20004968
    537c:	2001888c 	.word	0x2001888c
    5380:	20017418 	.word	0x20017418

00005384 <opcode_0xD1()>:
uint16_t opcode_0xD1() {
    5384:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Indexed_Indirect_Y(1));
    5386:	2001      	movs	r0, #1
    5388:	f7fd fd50 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    temp = register_a - local_data;
    538c:	4b11      	ldr	r3, [pc, #68]	; (53d4 <opcode_0xD1()+0x50>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    538e:	4912      	ldr	r1, [pc, #72]	; (53d8 <opcode_0xD1()+0x54>)
    temp = register_a - local_data;
    5390:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5392:	780b      	ldrb	r3, [r1, #0]
    5394:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5396:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    539a:	bf94      	ite	ls
    539c:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    53a0:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    53a4:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    53a6:	0600      	lsls	r0, r0, #24
    53a8:	d40e      	bmi.n	53c8 <opcode_0xD1()+0x44>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    53aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    53ae:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    53b0:	b962      	cbnz	r2, 53cc <opcode_0xD1()+0x48>
    53b2:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD1].length);
    53b6:	4a09      	ldr	r2, [pc, #36]	; (53dc <opcode_0xD1()+0x58>)
    53b8:	4809      	ldr	r0, [pc, #36]	; (53e0 <opcode_0xD1()+0x5c>)
    53ba:	700b      	strb	r3, [r1, #0]
    53bc:	f890 0aa5 	ldrb.w	r0, [r0, #2725]	; 0xaa5
    53c0:	8813      	ldrh	r3, [r2, #0]
    53c2:	4418      	add	r0, r3
} // 0xD1 - CMP - Indirect Indexed  Y
    53c4:	b280      	uxth	r0, r0
    53c6:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    53c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    53cc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    53d0:	e7f1      	b.n	53b6 <opcode_0xD1()+0x32>
    53d2:	bf00      	nop
    53d4:	200188a3 	.word	0x200188a3
    53d8:	20004968 	.word	0x20004968
    53dc:	2001888c 	.word	0x2001888c
    53e0:	20017418 	.word	0x20017418

000053e4 <opcode_0xE0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xE0() {
    53e4:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    53e6:	4c14      	ldr	r4, [pc, #80]	; (5438 <opcode_0xE0()+0x54>)
    53e8:	2100      	movs	r1, #0
    53ea:	8820      	ldrh	r0, [r4, #0]
    53ec:	3001      	adds	r0, #1
    53ee:	b280      	uxth	r0, r0
    53f0:	f7fd f93e 	bl	2670 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    53f4:	4b11      	ldr	r3, [pc, #68]	; (543c <opcode_0xE0()+0x58>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    53f6:	4912      	ldr	r1, [pc, #72]	; (5440 <opcode_0xE0()+0x5c>)
    temp = register_x - local_data;
    53f8:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    53fa:	780b      	ldrb	r3, [r1, #0]
    53fc:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    53fe:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5402:	bf94      	ite	ls
    5404:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5408:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    540c:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    540e:	0600      	lsls	r0, r0, #24
    5410:	d40d      	bmi.n	542e <opcode_0xE0()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5416:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5418:	b95a      	cbnz	r2, 5432 <opcode_0xE0()+0x4e>
    541a:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CPX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xE0].length);
    541e:	4809      	ldr	r0, [pc, #36]	; (5444 <opcode_0xE0()+0x60>)
    5420:	8822      	ldrh	r2, [r4, #0]
    5422:	f890 0db1 	ldrb.w	r0, [r0, #3505]	; 0xdb1
    5426:	700b      	strb	r3, [r1, #0]
    5428:	4410      	add	r0, r2
} // 0xE0 - CPX - Immediate
    542a:	b280      	uxth	r0, r0
    542c:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    542e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5432:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5436:	e7f2      	b.n	541e <opcode_0xE0()+0x3a>
    5438:	2001888c 	.word	0x2001888c
    543c:	200188a4 	.word	0x200188a4
    5440:	20004968 	.word	0x20004968
    5444:	20017418 	.word	0x20017418

00005448 <opcode_0xE4()>:
uint16_t opcode_0xE4() {
    5448:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    544a:	4c17      	ldr	r4, [pc, #92]	; (54a8 <opcode_0xE4()+0x60>)
    544c:	2100      	movs	r1, #0
    544e:	8820      	ldrh	r0, [r4, #0]
    5450:	3001      	adds	r0, #1
    5452:	b280      	uxth	r0, r0
    5454:	f7fd f90c 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    5458:	4b14      	ldr	r3, [pc, #80]	; (54ac <opcode_0xE4()+0x64>)
    545a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    545c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    545e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    5460:	f7fd f906 	bl	2670 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    5464:	4b12      	ldr	r3, [pc, #72]	; (54b0 <opcode_0xE4()+0x68>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5466:	4913      	ldr	r1, [pc, #76]	; (54b4 <opcode_0xE4()+0x6c>)
    temp = register_x - local_data;
    5468:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    546a:	780b      	ldrb	r3, [r1, #0]
    546c:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    546e:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5472:	bf2c      	ite	cs
    5474:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5478:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    547c:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    547e:	0600      	lsls	r0, r0, #24
    5480:	d40d      	bmi.n	549e <opcode_0xE4()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5486:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5488:	b95a      	cbnz	r2, 54a2 <opcode_0xE4()+0x5a>
    548a:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CPX(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xE4].length);
    548e:	480a      	ldr	r0, [pc, #40]	; (54b8 <opcode_0xE4()+0x70>)
    5490:	8822      	ldrh	r2, [r4, #0]
    5492:	f890 0e81 	ldrb.w	r0, [r0, #3713]	; 0xe81
    5496:	700b      	strb	r3, [r1, #0]
    5498:	4410      	add	r0, r2
} // 0xE4 - CPX - ZeroPage
    549a:	b280      	uxth	r0, r0
    549c:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    549e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    54a2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    54a6:	e7f2      	b.n	548e <opcode_0xE4()+0x46>
    54a8:	2001888c 	.word	0x2001888c
    54ac:	2001888a 	.word	0x2001888a
    54b0:	200188a4 	.word	0x200188a4
    54b4:	20004968 	.word	0x20004968
    54b8:	20017418 	.word	0x20017418

000054bc <opcode_0xEC()>:
uint16_t opcode_0xEC() {
    54bc:	b508      	push	{r3, lr}
    Calculate_CPX(Fetch_Absolute());
    54be:	f7fd fc0f 	bl	2ce0 <Fetch_Absolute()>
    temp = register_x - local_data;
    54c2:	4b11      	ldr	r3, [pc, #68]	; (5508 <opcode_0xEC()+0x4c>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    54c4:	4911      	ldr	r1, [pc, #68]	; (550c <opcode_0xEC()+0x50>)
    temp = register_x - local_data;
    54c6:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    54c8:	780b      	ldrb	r3, [r1, #0]
    54ca:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    54cc:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    54d0:	bf94      	ite	ls
    54d2:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    54d6:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    54da:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    54dc:	0600      	lsls	r0, r0, #24
    54de:	d40e      	bmi.n	54fe <opcode_0xEC()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    54e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    54e4:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    54e6:	b962      	cbnz	r2, 5502 <opcode_0xEC()+0x46>
    54e8:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xEC].length);
    54ec:	4a08      	ldr	r2, [pc, #32]	; (5510 <opcode_0xEC()+0x54>)
    54ee:	4809      	ldr	r0, [pc, #36]	; (5514 <opcode_0xEC()+0x58>)
    54f0:	700b      	strb	r3, [r1, #0]
    54f2:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    54f6:	8813      	ldrh	r3, [r2, #0]
    54f8:	4418      	add	r0, r3
} // 0xEC - CPX - Absolute
    54fa:	b280      	uxth	r0, r0
    54fc:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    54fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5502:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5506:	e7f1      	b.n	54ec <opcode_0xEC()+0x30>
    5508:	200188a4 	.word	0x200188a4
    550c:	20004968 	.word	0x20004968
    5510:	2001888c 	.word	0x2001888c
    5514:	20018418 	.word	0x20018418

00005518 <opcode_0xC0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
uint16_t opcode_0xC0() {
    5518:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    551a:	4c14      	ldr	r4, [pc, #80]	; (556c <opcode_0xC0()+0x54>)
    551c:	2100      	movs	r1, #0
    551e:	8820      	ldrh	r0, [r4, #0]
    5520:	3001      	adds	r0, #1
    5522:	b280      	uxth	r0, r0
    5524:	f7fd f8a4 	bl	2670 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    5528:	4b11      	ldr	r3, [pc, #68]	; (5570 <opcode_0xC0()+0x58>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    552a:	4912      	ldr	r1, [pc, #72]	; (5574 <opcode_0xC0()+0x5c>)
    temp = register_y - local_data;
    552c:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    552e:	780b      	ldrb	r3, [r1, #0]
    5530:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5532:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5536:	bf94      	ite	ls
    5538:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    553c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5540:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5542:	0600      	lsls	r0, r0, #24
    5544:	d40d      	bmi.n	5562 <opcode_0xC0()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    554a:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    554c:	b95a      	cbnz	r2, 5566 <opcode_0xC0()+0x4e>
    554e:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CPY(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xC0].length);
    5552:	4809      	ldr	r0, [pc, #36]	; (5578 <opcode_0xC0()+0x60>)
    5554:	8822      	ldrh	r2, [r4, #0]
    5556:	f890 0731 	ldrb.w	r0, [r0, #1841]	; 0x731
    555a:	700b      	strb	r3, [r1, #0]
    555c:	4410      	add	r0, r2
} // 0xC0 - CPY - Immediate
    555e:	b280      	uxth	r0, r0
    5560:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5566:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    556a:	e7f2      	b.n	5552 <opcode_0xC0()+0x3a>
    556c:	2001888c 	.word	0x2001888c
    5570:	200188a5 	.word	0x200188a5
    5574:	20004968 	.word	0x20004968
    5578:	20017418 	.word	0x20017418

0000557c <opcode_0xC4()>:
uint16_t opcode_0xC4() {
    557c:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    557e:	4c17      	ldr	r4, [pc, #92]	; (55dc <opcode_0xC4()+0x60>)
    5580:	2100      	movs	r1, #0
    5582:	8820      	ldrh	r0, [r4, #0]
    5584:	3001      	adds	r0, #1
    5586:	b280      	uxth	r0, r0
    5588:	f7fd f872 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    558c:	4b14      	ldr	r3, [pc, #80]	; (55e0 <opcode_0xC4()+0x64>)
    558e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    5590:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5592:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    5594:	f7fd f86c 	bl	2670 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    5598:	4b12      	ldr	r3, [pc, #72]	; (55e4 <opcode_0xC4()+0x68>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    559a:	4913      	ldr	r1, [pc, #76]	; (55e8 <opcode_0xC4()+0x6c>)
    temp = register_y - local_data;
    559c:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    559e:	780b      	ldrb	r3, [r1, #0]
    55a0:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    55a2:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    55a6:	bf2c      	ite	cs
    55a8:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    55ac:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    55b0:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    55b2:	0600      	lsls	r0, r0, #24
    55b4:	d40d      	bmi.n	55d2 <opcode_0xC4()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    55b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    55ba:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    55bc:	b95a      	cbnz	r2, 55d6 <opcode_0xC4()+0x5a>
    55be:	f043 0302 	orr.w	r3, r3, #2
    Calculate_CPY(Fetch_ZeroPage());
    return(register_pc + opcode_info[0xC4].length);
    55c2:	480a      	ldr	r0, [pc, #40]	; (55ec <opcode_0xC4()+0x70>)
    55c4:	8822      	ldrh	r2, [r4, #0]
    55c6:	f890 0801 	ldrb.w	r0, [r0, #2049]	; 0x801
    55ca:	700b      	strb	r3, [r1, #0]
    55cc:	4410      	add	r0, r2
} // 0xC4 - CPY - ZeroPage
    55ce:	b280      	uxth	r0, r0
    55d0:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    55d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    55d6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    55da:	e7f2      	b.n	55c2 <opcode_0xC4()+0x46>
    55dc:	2001888c 	.word	0x2001888c
    55e0:	2001888a 	.word	0x2001888a
    55e4:	200188a5 	.word	0x200188a5
    55e8:	20004968 	.word	0x20004968
    55ec:	20017418 	.word	0x20017418

000055f0 <opcode_0xCC()>:
uint16_t opcode_0xCC() {
    55f0:	b508      	push	{r3, lr}
    Calculate_CPY(Fetch_Absolute());
    55f2:	f7fd fb75 	bl	2ce0 <Fetch_Absolute()>
    temp = register_y - local_data;
    55f6:	4b11      	ldr	r3, [pc, #68]	; (563c <opcode_0xCC()+0x4c>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    55f8:	4911      	ldr	r1, [pc, #68]	; (5640 <opcode_0xCC()+0x50>)
    temp = register_y - local_data;
    55fa:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    55fc:	780b      	ldrb	r3, [r1, #0]
    55fe:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5600:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5604:	bf94      	ite	ls
    5606:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    560a:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    560e:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5610:	0600      	lsls	r0, r0, #24
    5612:	d40e      	bmi.n	5632 <opcode_0xCC()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5618:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    561a:	b962      	cbnz	r2, 5636 <opcode_0xCC()+0x46>
    561c:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xCC].length);
    5620:	4a08      	ldr	r2, [pc, #32]	; (5644 <opcode_0xCC()+0x54>)
    5622:	4809      	ldr	r0, [pc, #36]	; (5648 <opcode_0xCC()+0x58>)
    5624:	700b      	strb	r3, [r1, #0]
    5626:	f890 09a1 	ldrb.w	r0, [r0, #2465]	; 0x9a1
    562a:	8813      	ldrh	r3, [r2, #0]
    562c:	4418      	add	r0, r3
} // 0xCC - CPY - Absolute
    562e:	b280      	uxth	r0, r0
    5630:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5636:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    563a:	e7f1      	b.n	5620 <opcode_0xCC()+0x30>
    563c:	200188a5 	.word	0x200188a5
    5640:	20004968 	.word	0x20004968
    5644:	2001888c 	.word	0x2001888c
    5648:	20017418 	.word	0x20017418

0000564c <opcode_0x85()>:

// -------------------------------------------------
// Store Operations
// -------------------------------------------------
uint16_t opcode_0x85() {
    564c:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    564e:	4c0b      	ldr	r4, [pc, #44]	; (567c <opcode_0x85()+0x30>)
    5650:	2100      	movs	r1, #0
    Write_ZeroPage(register_a);
    5652:	4b0b      	ldr	r3, [pc, #44]	; (5680 <opcode_0x85()+0x34>)
    5654:	8820      	ldrh	r0, [r4, #0]
    5656:	781d      	ldrb	r5, [r3, #0]
    5658:	3001      	adds	r0, #1
    565a:	b280      	uxth	r0, r0
    565c:	f7fd f808 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    5660:	4b08      	ldr	r3, [pc, #32]	; (5684 <opcode_0x85()+0x38>)
    5662:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    5664:	4629      	mov	r1, r5
    effective_address = Fetch_Immediate(1);
    5666:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    5668:	f7fd f9be 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x85].length);
    566c:	4a06      	ldr	r2, [pc, #24]	; (5688 <opcode_0x85()+0x3c>)
    566e:	8823      	ldrh	r3, [r4, #0]
    5670:	f892 0b35 	ldrb.w	r0, [r2, #2869]	; 0xb35
    5674:	4418      	add	r0, r3
} // 0x85 - STA - ZeroPage
    5676:	b280      	uxth	r0, r0
    5678:	bd38      	pop	{r3, r4, r5, pc}
    567a:	bf00      	nop
    567c:	2001888c 	.word	0x2001888c
    5680:	200188a3 	.word	0x200188a3
    5684:	2001888a 	.word	0x2001888a
    5688:	20016418 	.word	0x20016418

0000568c <opcode_0x8D()>:
uint16_t opcode_0x8D() {
    568c:	b508      	push	{r3, lr}
    Write_Absolute(register_a);
    568e:	4b06      	ldr	r3, [pc, #24]	; (56a8 <opcode_0x8D()+0x1c>)
    5690:	7818      	ldrb	r0, [r3, #0]
    5692:	f7fd fbff 	bl	2e94 <Write_Absolute(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8D].length);
    5696:	4a05      	ldr	r2, [pc, #20]	; (56ac <opcode_0x8D()+0x20>)
    5698:	4b05      	ldr	r3, [pc, #20]	; (56b0 <opcode_0x8D()+0x24>)
    569a:	f892 0cd5 	ldrb.w	r0, [r2, #3285]	; 0xcd5
    569e:	881b      	ldrh	r3, [r3, #0]
    56a0:	4418      	add	r0, r3
} // 0x8D - STA - Absolute
    56a2:	b280      	uxth	r0, r0
    56a4:	bd08      	pop	{r3, pc}
    56a6:	bf00      	nop
    56a8:	200188a3 	.word	0x200188a3
    56ac:	20016418 	.word	0x20016418
    56b0:	2001888c 	.word	0x2001888c

000056b4 <opcode_0x95()>:
uint16_t opcode_0x95() {
    56b4:	b508      	push	{r3, lr}
    Write_ZeroPage_X(register_a);
    56b6:	4b06      	ldr	r3, [pc, #24]	; (56d0 <opcode_0x95()+0x1c>)
    56b8:	7818      	ldrb	r0, [r3, #0]
    56ba:	f7fd fc09 	bl	2ed0 <Write_ZeroPage_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x95].length);
    56be:	4a05      	ldr	r2, [pc, #20]	; (56d4 <opcode_0x95()+0x20>)
    56c0:	4b05      	ldr	r3, [pc, #20]	; (56d8 <opcode_0x95()+0x24>)
    56c2:	f892 0e75 	ldrb.w	r0, [r2, #3701]	; 0xe75
    56c6:	881b      	ldrh	r3, [r3, #0]
    56c8:	4418      	add	r0, r3
} // 0x95 - STA - ZeroPage , X
    56ca:	b280      	uxth	r0, r0
    56cc:	bd08      	pop	{r3, pc}
    56ce:	bf00      	nop
    56d0:	200188a3 	.word	0x200188a3
    56d4:	20016418 	.word	0x20016418
    56d8:	2001888c 	.word	0x2001888c

000056dc <opcode_0x9D()>:
uint16_t opcode_0x9D() {
    56dc:	b508      	push	{r3, lr}
    Write_Absolute_X(register_a);
    56de:	4b05      	ldr	r3, [pc, #20]	; (56f4 <opcode_0x9D()+0x18>)
    56e0:	7818      	ldrb	r0, [r3, #0]
    56e2:	f7fd fc31 	bl	2f48 <Write_Absolute_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9D].length);
    56e6:	4a04      	ldr	r2, [pc, #16]	; (56f8 <opcode_0x9D()+0x1c>)
    56e8:	4b04      	ldr	r3, [pc, #16]	; (56fc <opcode_0x9D()+0x20>)
    56ea:	7d50      	ldrb	r0, [r2, #21]
    56ec:	881b      	ldrh	r3, [r3, #0]
    56ee:	4418      	add	r0, r3
} // 0x9D - STA - Absolute , X
    56f0:	b280      	uxth	r0, r0
    56f2:	bd08      	pop	{r3, pc}
    56f4:	200188a3 	.word	0x200188a3
    56f8:	20017418 	.word	0x20017418
    56fc:	2001888c 	.word	0x2001888c

00005700 <opcode_0x99()>:
uint16_t opcode_0x99() {
    5700:	b508      	push	{r3, lr}
    Write_Absolute_Y(register_a);
    5702:	4b06      	ldr	r3, [pc, #24]	; (571c <opcode_0x99()+0x1c>)
    5704:	7818      	ldrb	r0, [r3, #0]
    5706:	f7fd fc45 	bl	2f94 <Write_Absolute_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x99].length);
    570a:	4a05      	ldr	r2, [pc, #20]	; (5720 <opcode_0x99()+0x20>)
    570c:	4b05      	ldr	r3, [pc, #20]	; (5724 <opcode_0x99()+0x24>)
    570e:	f892 0f45 	ldrb.w	r0, [r2, #3909]	; 0xf45
    5712:	881b      	ldrh	r3, [r3, #0]
    5714:	4418      	add	r0, r3
} // 0x99 - STA - Absolute , Y
    5716:	b280      	uxth	r0, r0
    5718:	bd08      	pop	{r3, pc}
    571a:	bf00      	nop
    571c:	200188a3 	.word	0x200188a3
    5720:	20016418 	.word	0x20016418
    5724:	2001888c 	.word	0x2001888c

00005728 <opcode_0x81()>:
uint16_t opcode_0x81() {
    5728:	b508      	push	{r3, lr}
    Write_Indexed_Indirect_X(register_a);
    572a:	4b06      	ldr	r3, [pc, #24]	; (5744 <opcode_0x81()+0x1c>)
    572c:	7818      	ldrb	r0, [r3, #0]
    572e:	f7fd fc65 	bl	2ffc <Write_Indexed_Indirect_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x81].length);
    5732:	4a05      	ldr	r2, [pc, #20]	; (5748 <opcode_0x81()+0x20>)
    5734:	4b05      	ldr	r3, [pc, #20]	; (574c <opcode_0x81()+0x24>)
    5736:	f892 0a65 	ldrb.w	r0, [r2, #2661]	; 0xa65
    573a:	881b      	ldrh	r3, [r3, #0]
    573c:	4418      	add	r0, r3
} // 0x81 - STA - Indexed Indirect X
    573e:	b280      	uxth	r0, r0
    5740:	bd08      	pop	{r3, pc}
    5742:	bf00      	nop
    5744:	200188a3 	.word	0x200188a3
    5748:	20016418 	.word	0x20016418
    574c:	2001888c 	.word	0x2001888c

00005750 <opcode_0x91()>:
uint16_t opcode_0x91() {
    5750:	b508      	push	{r3, lr}
    Write_Indexed_Indirect_Y(register_a);
    5752:	4b06      	ldr	r3, [pc, #24]	; (576c <opcode_0x91()+0x1c>)
    5754:	7818      	ldrb	r0, [r3, #0]
    5756:	f7fd fc7f 	bl	3058 <Write_Indexed_Indirect_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x91].length);
    575a:	4a05      	ldr	r2, [pc, #20]	; (5770 <opcode_0x91()+0x20>)
    575c:	4b05      	ldr	r3, [pc, #20]	; (5774 <opcode_0x91()+0x24>)
    575e:	f892 0da5 	ldrb.w	r0, [r2, #3493]	; 0xda5
    5762:	881b      	ldrh	r3, [r3, #0]
    5764:	4418      	add	r0, r3
} // 0x91 - STA - Indirect Indexed  Y
    5766:	b280      	uxth	r0, r0
    5768:	bd08      	pop	{r3, pc}
    576a:	bf00      	nop
    576c:	200188a3 	.word	0x200188a3
    5770:	20016418 	.word	0x20016418
    5774:	2001888c 	.word	0x2001888c

00005778 <opcode_0x86()>:
uint16_t opcode_0x86() {
    5778:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    577a:	4c0b      	ldr	r4, [pc, #44]	; (57a8 <opcode_0x86()+0x30>)
    577c:	2100      	movs	r1, #0
    Write_ZeroPage(register_x);
    577e:	4b0b      	ldr	r3, [pc, #44]	; (57ac <opcode_0x86()+0x34>)
    5780:	8820      	ldrh	r0, [r4, #0]
    5782:	781d      	ldrb	r5, [r3, #0]
    5784:	3001      	adds	r0, #1
    5786:	b280      	uxth	r0, r0
    5788:	f7fc ff72 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    578c:	4b08      	ldr	r3, [pc, #32]	; (57b0 <opcode_0x86()+0x38>)
    578e:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    5790:	4629      	mov	r1, r5
    effective_address = Fetch_Immediate(1);
    5792:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    5794:	f7fd f928 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x86].length);
    5798:	4a06      	ldr	r2, [pc, #24]	; (57b4 <opcode_0x86()+0x3c>)
    579a:	8823      	ldrh	r3, [r4, #0]
    579c:	f892 0b69 	ldrb.w	r0, [r2, #2921]	; 0xb69
    57a0:	4418      	add	r0, r3
} // 0x86 - STX - ZeroPage
    57a2:	b280      	uxth	r0, r0
    57a4:	bd38      	pop	{r3, r4, r5, pc}
    57a6:	bf00      	nop
    57a8:	2001888c 	.word	0x2001888c
    57ac:	200188a4 	.word	0x200188a4
    57b0:	2001888a 	.word	0x2001888a
    57b4:	20016418 	.word	0x20016418

000057b8 <opcode_0x96()>:
uint16_t opcode_0x96() {
    57b8:	b508      	push	{r3, lr}
    Write_ZeroPage_Y(register_x);
    57ba:	4b06      	ldr	r3, [pc, #24]	; (57d4 <opcode_0x96()+0x1c>)
    57bc:	7818      	ldrb	r0, [r3, #0]
    57be:	f7fd fba5 	bl	2f0c <Write_ZeroPage_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x96].length);
    57c2:	4a05      	ldr	r2, [pc, #20]	; (57d8 <opcode_0x96()+0x20>)
    57c4:	4b05      	ldr	r3, [pc, #20]	; (57dc <opcode_0x96()+0x24>)
    57c6:	f892 0ea9 	ldrb.w	r0, [r2, #3753]	; 0xea9
    57ca:	881b      	ldrh	r3, [r3, #0]
    57cc:	4418      	add	r0, r3
} // 0x96 - STX - ZeroPage , Y
    57ce:	b280      	uxth	r0, r0
    57d0:	bd08      	pop	{r3, pc}
    57d2:	bf00      	nop
    57d4:	200188a4 	.word	0x200188a4
    57d8:	20016418 	.word	0x20016418
    57dc:	2001888c 	.word	0x2001888c

000057e0 <opcode_0x8E()>:
uint16_t opcode_0x8E() {
    57e0:	b508      	push	{r3, lr}
    Write_Absolute(register_x);
    57e2:	4b06      	ldr	r3, [pc, #24]	; (57fc <opcode_0x8E()+0x1c>)
    57e4:	7818      	ldrb	r0, [r3, #0]
    57e6:	f7fd fb55 	bl	2e94 <Write_Absolute(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8E].length);
    57ea:	4a05      	ldr	r2, [pc, #20]	; (5800 <opcode_0x8E()+0x20>)
    57ec:	4b05      	ldr	r3, [pc, #20]	; (5804 <opcode_0x8E()+0x24>)
    57ee:	f892 0d09 	ldrb.w	r0, [r2, #3337]	; 0xd09
    57f2:	881b      	ldrh	r3, [r3, #0]
    57f4:	4418      	add	r0, r3
} // 0x8E - STX - Absolute
    57f6:	b280      	uxth	r0, r0
    57f8:	bd08      	pop	{r3, pc}
    57fa:	bf00      	nop
    57fc:	200188a4 	.word	0x200188a4
    5800:	20016418 	.word	0x20016418
    5804:	2001888c 	.word	0x2001888c

00005808 <opcode_0x84()>:
uint16_t opcode_0x84() {
    5808:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    580a:	4c0b      	ldr	r4, [pc, #44]	; (5838 <opcode_0x84()+0x30>)
    580c:	2100      	movs	r1, #0
    Write_ZeroPage(register_y);
    580e:	4b0b      	ldr	r3, [pc, #44]	; (583c <opcode_0x84()+0x34>)
    5810:	8820      	ldrh	r0, [r4, #0]
    5812:	781d      	ldrb	r5, [r3, #0]
    5814:	3001      	adds	r0, #1
    5816:	b280      	uxth	r0, r0
    5818:	f7fc ff2a 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    581c:	4b08      	ldr	r3, [pc, #32]	; (5840 <opcode_0x84()+0x38>)
    581e:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    5820:	4629      	mov	r1, r5
    effective_address = Fetch_Immediate(1);
    5822:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    5824:	f7fd f8e0 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x84].length);
    5828:	4a06      	ldr	r2, [pc, #24]	; (5844 <opcode_0x84()+0x3c>)
    582a:	8823      	ldrh	r3, [r4, #0]
    582c:	f892 0b01 	ldrb.w	r0, [r2, #2817]	; 0xb01
    5830:	4418      	add	r0, r3
} // 0x84 - STY - ZeroPage
    5832:	b280      	uxth	r0, r0
    5834:	bd38      	pop	{r3, r4, r5, pc}
    5836:	bf00      	nop
    5838:	2001888c 	.word	0x2001888c
    583c:	200188a5 	.word	0x200188a5
    5840:	2001888a 	.word	0x2001888a
    5844:	20016418 	.word	0x20016418

00005848 <opcode_0x94()>:
uint16_t opcode_0x94() {
    5848:	b508      	push	{r3, lr}
    Write_ZeroPage_X(register_y);
    584a:	4b06      	ldr	r3, [pc, #24]	; (5864 <opcode_0x94()+0x1c>)
    584c:	7818      	ldrb	r0, [r3, #0]
    584e:	f7fd fb3f 	bl	2ed0 <Write_ZeroPage_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x94].length);
    5852:	4a05      	ldr	r2, [pc, #20]	; (5868 <opcode_0x94()+0x20>)
    5854:	4b05      	ldr	r3, [pc, #20]	; (586c <opcode_0x94()+0x24>)
    5856:	f892 0e41 	ldrb.w	r0, [r2, #3649]	; 0xe41
    585a:	881b      	ldrh	r3, [r3, #0]
    585c:	4418      	add	r0, r3
} // 0x94 - STY - ZeroPage , X
    585e:	b280      	uxth	r0, r0
    5860:	bd08      	pop	{r3, pc}
    5862:	bf00      	nop
    5864:	200188a5 	.word	0x200188a5
    5868:	20016418 	.word	0x20016418
    586c:	2001888c 	.word	0x2001888c

00005870 <opcode_0x8C()>:
uint16_t opcode_0x8C() {
    5870:	b508      	push	{r3, lr}
    Write_Absolute(register_y);
    5872:	4b06      	ldr	r3, [pc, #24]	; (588c <opcode_0x8C()+0x1c>)
    5874:	7818      	ldrb	r0, [r3, #0]
    5876:	f7fd fb0d 	bl	2e94 <Write_Absolute(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8C].length);
    587a:	4a05      	ldr	r2, [pc, #20]	; (5890 <opcode_0x8C()+0x20>)
    587c:	4b05      	ldr	r3, [pc, #20]	; (5894 <opcode_0x8C()+0x24>)
    587e:	f892 0ca1 	ldrb.w	r0, [r2, #3233]	; 0xca1
    5882:	881b      	ldrh	r3, [r3, #0]
    5884:	4418      	add	r0, r3
} // 0x8C - STY - Absolute
    5886:	b280      	uxth	r0, r0
    5888:	bd08      	pop	{r3, pc}
    588a:	bf00      	nop
    588c:	200188a5 	.word	0x200188a5
    5890:	20016418 	.word	0x20016418
    5894:	2001888c 	.word	0x2001888c

00005898 <opcode_0x06()>:
}

// -------------------------------------------------
// ASL - Read-modify-write Operations
// -------------------------------------------------
uint16_t opcode_0x06() {
    5898:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    589a:	4d17      	ldr	r5, [pc, #92]	; (58f8 <opcode_0x06()+0x60>)
    589c:	b083      	sub	sp, #12
    589e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    58a0:	4c16      	ldr	r4, [pc, #88]	; (58fc <opcode_0x06()+0x64>)
    return read_byte(register_pc+offset, false);
    58a2:	8828      	ldrh	r0, [r5, #0]
    58a4:	3001      	adds	r0, #1
    58a6:	b280      	uxth	r0, r0
    58a8:	f7fc fee2 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    58ac:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    58ae:	b280      	uxth	r0, r0
    58b0:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    58b2:	f7fc fedd 	bl	2670 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    58b6:	4a12      	ldr	r2, [pc, #72]	; (5900 <opcode_0x06()+0x68>)
    58b8:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    58ba:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    58be:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    58c0:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    58c2:	bf4c      	ite	mi
    58c4:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    58c8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(local_data);
    58cc:	4608      	mov	r0, r1
    58ce:	9101      	str	r1, [sp, #4]
    58d0:	7013      	strb	r3, [r2, #0]
    58d2:	f7fd f991 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    58d6:	9901      	ldr	r1, [sp, #4]
    58d8:	8820      	ldrh	r0, [r4, #0]
    58da:	f7fd f885 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    58de:	8820      	ldrh	r0, [r4, #0]
    58e0:	9901      	ldr	r1, [sp, #4]
    58e2:	f7fd f881 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x06].length);
    58e6:	4a07      	ldr	r2, [pc, #28]	; (5904 <opcode_0x06()+0x6c>)
    58e8:	882b      	ldrh	r3, [r5, #0]
    58ea:	f892 0169 	ldrb.w	r0, [r2, #361]	; 0x169
    58ee:	4418      	add	r0, r3
} // 0x06 - ASL  - Arithmetic Shift Left - ZeroPage
    58f0:	b280      	uxth	r0, r0
    58f2:	b003      	add	sp, #12
    58f4:	bd30      	pop	{r4, r5, pc}
    58f6:	bf00      	nop
    58f8:	2001888c 	.word	0x2001888c
    58fc:	2001888a 	.word	0x2001888a
    5900:	20004968 	.word	0x20004968
    5904:	20015418 	.word	0x20015418

00005908 <opcode_0x16()>:
uint16_t opcode_0x16() {
    5908:	b510      	push	{r4, lr}
    590a:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage_X()));
    590c:	f7fd f9a8 	bl	2c60 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5910:	4a14      	ldr	r2, [pc, #80]	; (5964 <opcode_0x16()+0x5c>)
    5912:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5914:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5918:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    591a:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    591c:	bf4c      	ite	mi
    591e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5922:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5926:	0600      	lsls	r0, r0, #24
    5928:	bf4c      	ite	mi
    592a:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    592e:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5932:	b9a1      	cbnz	r1, 595e <opcode_0x16()+0x56>
    5934:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5938:	4c0b      	ldr	r4, [pc, #44]	; (5968 <opcode_0x16()+0x60>)
    593a:	7013      	strb	r3, [r2, #0]
    593c:	8820      	ldrh	r0, [r4, #0]
    593e:	9101      	str	r1, [sp, #4]
    5940:	f7fd f852 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5944:	8820      	ldrh	r0, [r4, #0]
    5946:	9901      	ldr	r1, [sp, #4]
    5948:	f7fd f84e 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x16].length);
    594c:	4a07      	ldr	r2, [pc, #28]	; (596c <opcode_0x16()+0x64>)
    594e:	4b08      	ldr	r3, [pc, #32]	; (5970 <opcode_0x16()+0x68>)
    5950:	f892 04a9 	ldrb.w	r0, [r2, #1193]	; 0x4a9
    5954:	881b      	ldrh	r3, [r3, #0]
    5956:	4418      	add	r0, r3
} // 0x16 - ASL  - Arithmetic Shift Left - ZeroPage , X
    5958:	b280      	uxth	r0, r0
    595a:	b002      	add	sp, #8
    595c:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    595e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5962:	e7e9      	b.n	5938 <opcode_0x16()+0x30>
    5964:	20004968 	.word	0x20004968
    5968:	2001888a 	.word	0x2001888a
    596c:	20015418 	.word	0x20015418
    5970:	2001888c 	.word	0x2001888c

00005974 <opcode_0x0E()>:
uint16_t opcode_0x0E() {
    5974:	b510      	push	{r4, lr}
    5976:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute()));
    5978:	f7fd f9b2 	bl	2ce0 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    597c:	4a14      	ldr	r2, [pc, #80]	; (59d0 <opcode_0x0E()+0x5c>)
    597e:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    5980:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5984:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    5986:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5988:	bf4c      	ite	mi
    598a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    598e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5992:	0600      	lsls	r0, r0, #24
    5994:	bf4c      	ite	mi
    5996:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    599a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    599e:	b9a1      	cbnz	r1, 59ca <opcode_0x0E()+0x56>
    59a0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    59a4:	4c0b      	ldr	r4, [pc, #44]	; (59d4 <opcode_0x0E()+0x60>)
    59a6:	7013      	strb	r3, [r2, #0]
    59a8:	8820      	ldrh	r0, [r4, #0]
    59aa:	9101      	str	r1, [sp, #4]
    59ac:	f7fd f81c 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    59b0:	8820      	ldrh	r0, [r4, #0]
    59b2:	9901      	ldr	r1, [sp, #4]
    59b4:	f7fd f818 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0E].length);
    59b8:	4a07      	ldr	r2, [pc, #28]	; (59d8 <opcode_0x0E()+0x64>)
    59ba:	4b08      	ldr	r3, [pc, #32]	; (59dc <opcode_0x0E()+0x68>)
    59bc:	f892 0309 	ldrb.w	r0, [r2, #777]	; 0x309
    59c0:	881b      	ldrh	r3, [r3, #0]
    59c2:	4418      	add	r0, r3
} // 0x0E - ASL  - Arithmetic Shift Left - Absolute
    59c4:	b280      	uxth	r0, r0
    59c6:	b002      	add	sp, #8
    59c8:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    59ca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    59ce:	e7e9      	b.n	59a4 <opcode_0x0E()+0x30>
    59d0:	20004968 	.word	0x20004968
    59d4:	2001888a 	.word	0x2001888a
    59d8:	20015418 	.word	0x20015418
    59dc:	2001888c 	.word	0x2001888c

000059e0 <opcode_0x1E()>:
uint16_t opcode_0x1E() {
    59e0:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    59e2:	2000      	movs	r0, #0
uint16_t opcode_0x1E() {
    59e4:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    59e6:	f7fd f997 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    59ea:	4a15      	ldr	r2, [pc, #84]	; (5a40 <opcode_0x1E()+0x60>)
    59ec:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    59ee:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    59f2:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    59f4:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    59f6:	bf4c      	ite	mi
    59f8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    59fc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5a00:	0600      	lsls	r0, r0, #24
    5a02:	bf4c      	ite	mi
    5a04:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5a08:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5a0c:	b9a1      	cbnz	r1, 5a38 <opcode_0x1E()+0x58>
    5a0e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5a12:	4c0c      	ldr	r4, [pc, #48]	; (5a44 <opcode_0x1E()+0x64>)
    5a14:	7013      	strb	r3, [r2, #0]
    5a16:	8820      	ldrh	r0, [r4, #0]
    5a18:	9101      	str	r1, [sp, #4]
    5a1a:	f7fc ffe5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a1e:	8820      	ldrh	r0, [r4, #0]
    5a20:	9901      	ldr	r1, [sp, #4]
    5a22:	f7fc ffe1 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1E].length);
    5a26:	4a08      	ldr	r2, [pc, #32]	; (5a48 <opcode_0x1E()+0x68>)
    5a28:	4b08      	ldr	r3, [pc, #32]	; (5a4c <opcode_0x1E()+0x6c>)
    5a2a:	f892 0649 	ldrb.w	r0, [r2, #1609]	; 0x649
    5a2e:	881b      	ldrh	r3, [r3, #0]
    5a30:	4418      	add	r0, r3
} // 0x1E - ASL  - Arithmetic Shift Left - Absolute , X
    5a32:	b280      	uxth	r0, r0
    5a34:	b002      	add	sp, #8
    5a36:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5a38:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5a3c:	e7e9      	b.n	5a12 <opcode_0x1E()+0x32>
    5a3e:	bf00      	nop
    5a40:	20004968 	.word	0x20004968
    5a44:	2001888a 	.word	0x2001888a
    5a48:	20015418 	.word	0x20015418
    5a4c:	2001888c 	.word	0x2001888c

00005a50 <opcode_0xE6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xE6() {
    5a50:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    5a52:	4e18      	ldr	r6, [pc, #96]	; (5ab4 <opcode_0xE6()+0x64>)
    5a54:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5a56:	4d18      	ldr	r5, [pc, #96]	; (5ab8 <opcode_0xE6()+0x68>)
    return read_byte(register_pc+offset, false);
    5a58:	8830      	ldrh	r0, [r6, #0]
    5a5a:	3001      	adds	r0, #1
    5a5c:	b280      	uxth	r0, r0
    5a5e:	f7fc fe07 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5a62:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5a64:	b280      	uxth	r0, r0
    5a66:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5a68:	f7fc fe02 	bl	2670 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    5a6c:	3001      	adds	r0, #1
    global_temp = local_data;
    5a6e:	4b13      	ldr	r3, [pc, #76]	; (5abc <opcode_0xE6()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5a70:	4a13      	ldr	r2, [pc, #76]	; (5ac0 <opcode_0xE6()+0x70>)
    local_data = local_data + 1;
    5a72:	b2c4      	uxtb	r4, r0
    5a74:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5a76:	701c      	strb	r4, [r3, #0]
    5a78:	7813      	ldrb	r3, [r2, #0]
    5a7a:	d415      	bmi.n	5aa8 <opcode_0xE6()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a80:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5a82:	b99c      	cbnz	r4, 5aac <opcode_0xE6()+0x5c>
    5a84:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5a88:	8828      	ldrh	r0, [r5, #0]
    5a8a:	4621      	mov	r1, r4
    5a8c:	7013      	strb	r3, [r2, #0]
    5a8e:	f7fc ffab 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5a92:	8828      	ldrh	r0, [r5, #0]
    5a94:	4621      	mov	r1, r4
    5a96:	f7fc ffa7 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xE6].length);
    5a9a:	4a0a      	ldr	r2, [pc, #40]	; (5ac4 <opcode_0xE6()+0x74>)
    5a9c:	8833      	ldrh	r3, [r6, #0]
    5a9e:	f892 0ee9 	ldrb.w	r0, [r2, #3817]	; 0xee9
    5aa2:	4418      	add	r0, r3
} // 0xE6 - INC - ZeroPage
    5aa4:	b280      	uxth	r0, r0
    5aa6:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5aac:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5ab0:	e7ea      	b.n	5a88 <opcode_0xE6()+0x38>
    5ab2:	bf00      	nop
    5ab4:	2001888c 	.word	0x2001888c
    5ab8:	2001888a 	.word	0x2001888a
    5abc:	200188a0 	.word	0x200188a0
    5ac0:	20004968 	.word	0x20004968
    5ac4:	20017418 	.word	0x20017418

00005ac8 <opcode_0xF6()>:
uint16_t opcode_0xF6() {
    5ac8:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    5aca:	f7fd f8c9 	bl	2c60 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    5ace:	3001      	adds	r0, #1
    global_temp = local_data;
    5ad0:	4b11      	ldr	r3, [pc, #68]	; (5b18 <opcode_0xF6()+0x50>)
    local_data = local_data + 1;
    5ad2:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5ad4:	4a11      	ldr	r2, [pc, #68]	; (5b1c <opcode_0xF6()+0x54>)
    5ad6:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5ad8:	701c      	strb	r4, [r3, #0]
    5ada:	7813      	ldrb	r3, [r2, #0]
    5adc:	d417      	bmi.n	5b0e <opcode_0xF6()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ae2:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5ae4:	b9ac      	cbnz	r4, 5b12 <opcode_0xF6()+0x4a>
    5ae6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5aea:	4d0d      	ldr	r5, [pc, #52]	; (5b20 <opcode_0xF6()+0x58>)
    5aec:	4621      	mov	r1, r4
    5aee:	7013      	strb	r3, [r2, #0]
    5af0:	8828      	ldrh	r0, [r5, #0]
    5af2:	f7fc ff79 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5af6:	8828      	ldrh	r0, [r5, #0]
    5af8:	4621      	mov	r1, r4
    5afa:	f7fc ff75 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xF6].length);
    5afe:	4a09      	ldr	r2, [pc, #36]	; (5b24 <opcode_0xF6()+0x5c>)
    5b00:	4b09      	ldr	r3, [pc, #36]	; (5b28 <opcode_0xF6()+0x60>)
    5b02:	f892 0229 	ldrb.w	r0, [r2, #553]	; 0x229
    5b06:	881b      	ldrh	r3, [r3, #0]
    5b08:	4418      	add	r0, r3
} // 0xF6 - INC - ZeroPage , X
    5b0a:	b280      	uxth	r0, r0
    5b0c:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5b12:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5b16:	e7e8      	b.n	5aea <opcode_0xF6()+0x22>
    5b18:	200188a0 	.word	0x200188a0
    5b1c:	20004968 	.word	0x20004968
    5b20:	2001888a 	.word	0x2001888a
    5b24:	20018418 	.word	0x20018418
    5b28:	2001888c 	.word	0x2001888c

00005b2c <opcode_0xEE()>:
uint16_t opcode_0xEE() {
    5b2c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    5b2e:	f7fd f8d7 	bl	2ce0 <Fetch_Absolute()>
    local_data = local_data + 1;
    5b32:	3001      	adds	r0, #1
    global_temp = local_data;
    5b34:	4b11      	ldr	r3, [pc, #68]	; (5b7c <opcode_0xEE()+0x50>)
    local_data = local_data + 1;
    5b36:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5b38:	4a11      	ldr	r2, [pc, #68]	; (5b80 <opcode_0xEE()+0x54>)
    5b3a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5b3c:	701c      	strb	r4, [r3, #0]
    5b3e:	7813      	ldrb	r3, [r2, #0]
    5b40:	d417      	bmi.n	5b72 <opcode_0xEE()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b46:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5b48:	b9ac      	cbnz	r4, 5b76 <opcode_0xEE()+0x4a>
    5b4a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5b4e:	4d0d      	ldr	r5, [pc, #52]	; (5b84 <opcode_0xEE()+0x58>)
    5b50:	4621      	mov	r1, r4
    5b52:	7013      	strb	r3, [r2, #0]
    5b54:	8828      	ldrh	r0, [r5, #0]
    5b56:	f7fc ff47 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5b5a:	8828      	ldrh	r0, [r5, #0]
    5b5c:	4621      	mov	r1, r4
    5b5e:	f7fc ff43 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xEE].length);
    5b62:	4a09      	ldr	r2, [pc, #36]	; (5b88 <opcode_0xEE()+0x5c>)
    5b64:	4b09      	ldr	r3, [pc, #36]	; (5b8c <opcode_0xEE()+0x60>)
    5b66:	f892 0089 	ldrb.w	r0, [r2, #137]	; 0x89
    5b6a:	881b      	ldrh	r3, [r3, #0]
    5b6c:	4418      	add	r0, r3
} // 0xEE - INC - Absolute
    5b6e:	b280      	uxth	r0, r0
    5b70:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5b76:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5b7a:	e7e8      	b.n	5b4e <opcode_0xEE()+0x22>
    5b7c:	200188a0 	.word	0x200188a0
    5b80:	20004968 	.word	0x20004968
    5b84:	2001888a 	.word	0x2001888a
    5b88:	20018418 	.word	0x20018418
    5b8c:	2001888c 	.word	0x2001888c

00005b90 <opcode_0xC6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

uint16_t opcode_0xC6() {
    5b90:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    5b92:	4e18      	ldr	r6, [pc, #96]	; (5bf4 <opcode_0xC6()+0x64>)
    5b94:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5b96:	4d18      	ldr	r5, [pc, #96]	; (5bf8 <opcode_0xC6()+0x68>)
    return read_byte(register_pc+offset, false);
    5b98:	8830      	ldrh	r0, [r6, #0]
    5b9a:	3001      	adds	r0, #1
    5b9c:	b280      	uxth	r0, r0
    5b9e:	f7fc fd67 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5ba2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5ba4:	b280      	uxth	r0, r0
    5ba6:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5ba8:	f7fc fd62 	bl	2670 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    5bac:	3801      	subs	r0, #1
    global_temp = local_data;
    5bae:	4b13      	ldr	r3, [pc, #76]	; (5bfc <opcode_0xC6()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5bb0:	4a13      	ldr	r2, [pc, #76]	; (5c00 <opcode_0xC6()+0x70>)
    local_data = local_data - 1;
    5bb2:	b2c4      	uxtb	r4, r0
    5bb4:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5bb6:	701c      	strb	r4, [r3, #0]
    5bb8:	7813      	ldrb	r3, [r2, #0]
    5bba:	d415      	bmi.n	5be8 <opcode_0xC6()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5bc0:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5bc2:	b99c      	cbnz	r4, 5bec <opcode_0xC6()+0x5c>
    5bc4:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5bc8:	8828      	ldrh	r0, [r5, #0]
    5bca:	4621      	mov	r1, r4
    5bcc:	7013      	strb	r3, [r2, #0]
    5bce:	f7fc ff0b 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5bd2:	8828      	ldrh	r0, [r5, #0]
    5bd4:	4621      	mov	r1, r4
    5bd6:	f7fc ff07 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xC6].length);
    5bda:	4a0a      	ldr	r2, [pc, #40]	; (5c04 <opcode_0xC6()+0x74>)
    5bdc:	8833      	ldrh	r3, [r6, #0]
    5bde:	f892 0869 	ldrb.w	r0, [r2, #2153]	; 0x869
    5be2:	4418      	add	r0, r3
} // 0xC6 - DEC - ZeroPage
    5be4:	b280      	uxth	r0, r0
    5be6:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5bec:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5bf0:	e7ea      	b.n	5bc8 <opcode_0xC6()+0x38>
    5bf2:	bf00      	nop
    5bf4:	2001888c 	.word	0x2001888c
    5bf8:	2001888a 	.word	0x2001888a
    5bfc:	200188a0 	.word	0x200188a0
    5c00:	20004968 	.word	0x20004968
    5c04:	20017418 	.word	0x20017418

00005c08 <opcode_0xD6()>:
uint16_t opcode_0xD6() {
    5c08:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    5c0a:	f7fd f829 	bl	2c60 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    5c0e:	3801      	subs	r0, #1
    global_temp = local_data;
    5c10:	4b11      	ldr	r3, [pc, #68]	; (5c58 <opcode_0xD6()+0x50>)
    local_data = local_data - 1;
    5c12:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5c14:	4a11      	ldr	r2, [pc, #68]	; (5c5c <opcode_0xD6()+0x54>)
    5c16:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5c18:	701c      	strb	r4, [r3, #0]
    5c1a:	7813      	ldrb	r3, [r2, #0]
    5c1c:	d417      	bmi.n	5c4e <opcode_0xD6()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c22:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5c24:	b9ac      	cbnz	r4, 5c52 <opcode_0xD6()+0x4a>
    5c26:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5c2a:	4d0d      	ldr	r5, [pc, #52]	; (5c60 <opcode_0xD6()+0x58>)
    5c2c:	4621      	mov	r1, r4
    5c2e:	7013      	strb	r3, [r2, #0]
    5c30:	8828      	ldrh	r0, [r5, #0]
    5c32:	f7fc fed9 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c36:	8828      	ldrh	r0, [r5, #0]
    5c38:	4621      	mov	r1, r4
    5c3a:	f7fc fed5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xD6].length);
    5c3e:	4a09      	ldr	r2, [pc, #36]	; (5c64 <opcode_0xD6()+0x5c>)
    5c40:	4b09      	ldr	r3, [pc, #36]	; (5c68 <opcode_0xD6()+0x60>)
    5c42:	f892 0ba9 	ldrb.w	r0, [r2, #2985]	; 0xba9
    5c46:	881b      	ldrh	r3, [r3, #0]
    5c48:	4418      	add	r0, r3
} // 0xD6 - DEC - ZeroPage , X
    5c4a:	b280      	uxth	r0, r0
    5c4c:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5c52:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5c56:	e7e8      	b.n	5c2a <opcode_0xD6()+0x22>
    5c58:	200188a0 	.word	0x200188a0
    5c5c:	20004968 	.word	0x20004968
    5c60:	2001888a 	.word	0x2001888a
    5c64:	20017418 	.word	0x20017418
    5c68:	2001888c 	.word	0x2001888c

00005c6c <opcode_0xCE()>:
uint16_t opcode_0xCE() {
    5c6c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    5c6e:	f7fd f837 	bl	2ce0 <Fetch_Absolute()>
    local_data = local_data - 1;
    5c72:	3801      	subs	r0, #1
    global_temp = local_data;
    5c74:	4b11      	ldr	r3, [pc, #68]	; (5cbc <opcode_0xCE()+0x50>)
    local_data = local_data - 1;
    5c76:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5c78:	4a11      	ldr	r2, [pc, #68]	; (5cc0 <opcode_0xCE()+0x54>)
    5c7a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5c7c:	701c      	strb	r4, [r3, #0]
    5c7e:	7813      	ldrb	r3, [r2, #0]
    5c80:	d417      	bmi.n	5cb2 <opcode_0xCE()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c86:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5c88:	b9ac      	cbnz	r4, 5cb6 <opcode_0xCE()+0x4a>
    5c8a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5c8e:	4d0d      	ldr	r5, [pc, #52]	; (5cc4 <opcode_0xCE()+0x58>)
    5c90:	4621      	mov	r1, r4
    5c92:	7013      	strb	r3, [r2, #0]
    5c94:	8828      	ldrh	r0, [r5, #0]
    5c96:	f7fc fea7 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5c9a:	8828      	ldrh	r0, [r5, #0]
    5c9c:	4621      	mov	r1, r4
    5c9e:	f7fc fea3 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xCE].length);
    5ca2:	4a09      	ldr	r2, [pc, #36]	; (5cc8 <opcode_0xCE()+0x5c>)
    5ca4:	4b09      	ldr	r3, [pc, #36]	; (5ccc <opcode_0xCE()+0x60>)
    5ca6:	f892 0a09 	ldrb.w	r0, [r2, #2569]	; 0xa09
    5caa:	881b      	ldrh	r3, [r3, #0]
    5cac:	4418      	add	r0, r3
} // 0xCE - DEC - Absolute
    5cae:	b280      	uxth	r0, r0
    5cb0:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5cb6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5cba:	e7e8      	b.n	5c8e <opcode_0xCE()+0x22>
    5cbc:	200188a0 	.word	0x200188a0
    5cc0:	20004968 	.word	0x20004968
    5cc4:	2001888a 	.word	0x2001888a
    5cc8:	20017418 	.word	0x20017418
    5ccc:	2001888c 	.word	0x2001888c

00005cd0 <opcode_0xDE()>:
uint16_t opcode_0xDE() {
    5cd0:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    5cd2:	2000      	movs	r0, #0
    5cd4:	f7fd f820 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    5cd8:	3801      	subs	r0, #1
    global_temp = local_data;
    5cda:	4b12      	ldr	r3, [pc, #72]	; (5d24 <opcode_0xDE()+0x54>)
    local_data = local_data - 1;
    5cdc:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5cde:	4a12      	ldr	r2, [pc, #72]	; (5d28 <opcode_0xDE()+0x58>)
    5ce0:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5ce2:	701c      	strb	r4, [r3, #0]
    5ce4:	7813      	ldrb	r3, [r2, #0]
    5ce6:	d417      	bmi.n	5d18 <opcode_0xDE()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5cec:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5cee:	b9ac      	cbnz	r4, 5d1c <opcode_0xDE()+0x4c>
    5cf0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5cf4:	4d0d      	ldr	r5, [pc, #52]	; (5d2c <opcode_0xDE()+0x5c>)
    5cf6:	4621      	mov	r1, r4
    5cf8:	7013      	strb	r3, [r2, #0]
    5cfa:	8828      	ldrh	r0, [r5, #0]
    5cfc:	f7fc fe74 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d00:	8828      	ldrh	r0, [r5, #0]
    5d02:	4621      	mov	r1, r4
    5d04:	f7fc fe70 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xDE].length);
    5d08:	4a09      	ldr	r2, [pc, #36]	; (5d30 <opcode_0xDE()+0x60>)
    5d0a:	4b0a      	ldr	r3, [pc, #40]	; (5d34 <opcode_0xDE()+0x64>)
    5d0c:	f892 0d49 	ldrb.w	r0, [r2, #3401]	; 0xd49
    5d10:	881b      	ldrh	r3, [r3, #0]
    5d12:	4418      	add	r0, r3
} // 0xDE - DEC - Absolute , X
    5d14:	b280      	uxth	r0, r0
    5d16:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5d1c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5d20:	e7e8      	b.n	5cf4 <opcode_0xDE()+0x24>
    5d22:	bf00      	nop
    5d24:	200188a0 	.word	0x200188a0
    5d28:	20004968 	.word	0x20004968
    5d2c:	2001888a 	.word	0x2001888a
    5d30:	20017418 	.word	0x20017418
    5d34:	2001888c 	.word	0x2001888c

00005d38 <opcode_0x46()>:
    local_data = (0x7F & (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x46() {
    5d38:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5d3a:	4d16      	ldr	r5, [pc, #88]	; (5d94 <opcode_0x46()+0x5c>)
    5d3c:	b083      	sub	sp, #12
    5d3e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5d40:	4c15      	ldr	r4, [pc, #84]	; (5d98 <opcode_0x46()+0x60>)
    return read_byte(register_pc+offset, false);
    5d42:	8828      	ldrh	r0, [r5, #0]
    5d44:	3001      	adds	r0, #1
    5d46:	b280      	uxth	r0, r0
    5d48:	f7fc fc92 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5d4c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5d4e:	b280      	uxth	r0, r0
    5d50:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5d52:	f7fc fc8d 	bl	2670 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d56:	4a11      	ldr	r2, [pc, #68]	; (5d9c <opcode_0x46()+0x64>)
    5d58:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5d5a:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d5e:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5d60:	4608      	mov	r0, r1
    5d62:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5d64:	bf4c      	ite	mi
    5d66:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5d6a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    5d6e:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5d70:	f7fc ff42 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5d74:	9901      	ldr	r1, [sp, #4]
    5d76:	8820      	ldrh	r0, [r4, #0]
    5d78:	f7fc fe36 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5d7c:	8820      	ldrh	r0, [r4, #0]
    5d7e:	9901      	ldr	r1, [sp, #4]
    5d80:	f7fc fe32 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x46].length);
    5d84:	4a06      	ldr	r2, [pc, #24]	; (5da0 <opcode_0x46()+0x68>)
    5d86:	882b      	ldrh	r3, [r5, #0]
    5d88:	f892 0e69 	ldrb.w	r0, [r2, #3689]	; 0xe69
    5d8c:	4418      	add	r0, r3
} // 0x46 - LSR - Logical Shift Right - ZeroPage
    5d8e:	b280      	uxth	r0, r0
    5d90:	b003      	add	sp, #12
    5d92:	bd30      	pop	{r4, r5, pc}
    5d94:	2001888c 	.word	0x2001888c
    5d98:	2001888a 	.word	0x2001888a
    5d9c:	20004968 	.word	0x20004968
    5da0:	20015418 	.word	0x20015418

00005da4 <opcode_0x56()>:
uint16_t opcode_0x56() {
    5da4:	b510      	push	{r4, lr}
    5da6:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage_X()));
    5da8:	f7fc ff5a 	bl	2c60 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5dac:	4a12      	ldr	r2, [pc, #72]	; (5df8 <opcode_0x56()+0x54>)
    5dae:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5db0:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5db4:	7813      	ldrb	r3, [r2, #0]
    5db6:	bf4c      	ite	mi
    5db8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5dbc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5dc0:	b9b1      	cbnz	r1, 5df0 <opcode_0x56()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5dc6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5dca:	4c0c      	ldr	r4, [pc, #48]	; (5dfc <opcode_0x56()+0x58>)
    5dcc:	7013      	strb	r3, [r2, #0]
    5dce:	8820      	ldrh	r0, [r4, #0]
    5dd0:	9101      	str	r1, [sp, #4]
    5dd2:	f7fc fe09 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5dd6:	8820      	ldrh	r0, [r4, #0]
    5dd8:	9901      	ldr	r1, [sp, #4]
    5dda:	f7fc fe05 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x56].length);
    5dde:	4a08      	ldr	r2, [pc, #32]	; (5e00 <opcode_0x56()+0x5c>)
    5de0:	4b08      	ldr	r3, [pc, #32]	; (5e04 <opcode_0x56()+0x60>)
    5de2:	f892 01a9 	ldrb.w	r0, [r2, #425]	; 0x1a9
    5de6:	881b      	ldrh	r3, [r3, #0]
    5de8:	4418      	add	r0, r3
    5dea:	b280      	uxth	r0, r0
} // 0x56 - LSR - Logical Shift Right - ZeroPage , X
    5dec:	b002      	add	sp, #8
    5dee:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5df0:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    5df4:	e7e9      	b.n	5dca <opcode_0x56()+0x26>
    5df6:	bf00      	nop
    5df8:	20004968 	.word	0x20004968
    5dfc:	2001888a 	.word	0x2001888a
    5e00:	20016418 	.word	0x20016418
    5e04:	2001888c 	.word	0x2001888c

00005e08 <opcode_0x4E()>:
uint16_t opcode_0x4E() {
    5e08:	b510      	push	{r4, lr}
    5e0a:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute()));
    5e0c:	f7fc ff68 	bl	2ce0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e10:	4a11      	ldr	r2, [pc, #68]	; (5e58 <opcode_0x4E()+0x50>)
    5e12:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5e14:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e18:	7813      	ldrb	r3, [r2, #0]
    5e1a:	bf4c      	ite	mi
    5e1c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e20:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5e24:	b9a9      	cbnz	r1, 5e52 <opcode_0x4E()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5e2a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5e2e:	4c0b      	ldr	r4, [pc, #44]	; (5e5c <opcode_0x4E()+0x54>)
    5e30:	7013      	strb	r3, [r2, #0]
    5e32:	8820      	ldrh	r0, [r4, #0]
    5e34:	9101      	str	r1, [sp, #4]
    5e36:	f7fc fdd7 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e3a:	8820      	ldrh	r0, [r4, #0]
    5e3c:	9901      	ldr	r1, [sp, #4]
    5e3e:	f7fc fdd3 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4E].length);
    5e42:	4a07      	ldr	r2, [pc, #28]	; (5e60 <opcode_0x4E()+0x58>)
    5e44:	4b07      	ldr	r3, [pc, #28]	; (5e64 <opcode_0x4E()+0x5c>)
    5e46:	7a50      	ldrb	r0, [r2, #9]
    5e48:	881b      	ldrh	r3, [r3, #0]
    5e4a:	4418      	add	r0, r3
    5e4c:	b280      	uxth	r0, r0
} // 0x4E - LSR - Logical Shift Right - Absolute
    5e4e:	b002      	add	sp, #8
    5e50:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5e52:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    5e56:	e7ea      	b.n	5e2e <opcode_0x4E()+0x26>
    5e58:	20004968 	.word	0x20004968
    5e5c:	2001888a 	.word	0x2001888a
    5e60:	20016418 	.word	0x20016418
    5e64:	2001888c 	.word	0x2001888c

00005e68 <opcode_0x5E()>:
uint16_t opcode_0x5E() {
    5e68:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    5e6a:	2000      	movs	r0, #0
uint16_t opcode_0x5E() {
    5e6c:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    5e6e:	f7fc ff53 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e72:	4a12      	ldr	r2, [pc, #72]	; (5ebc <opcode_0x5E()+0x54>)
    5e74:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    5e76:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5e7a:	7813      	ldrb	r3, [r2, #0]
    5e7c:	bf4c      	ite	mi
    5e7e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5e82:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5e86:	b9b1      	cbnz	r1, 5eb6 <opcode_0x5E()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5e8c:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5e90:	4c0b      	ldr	r4, [pc, #44]	; (5ec0 <opcode_0x5E()+0x58>)
    5e92:	7013      	strb	r3, [r2, #0]
    5e94:	8820      	ldrh	r0, [r4, #0]
    5e96:	9101      	str	r1, [sp, #4]
    5e98:	f7fc fda6 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5e9c:	8820      	ldrh	r0, [r4, #0]
    5e9e:	9901      	ldr	r1, [sp, #4]
    5ea0:	f7fc fda2 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5E].length);
    5ea4:	4a07      	ldr	r2, [pc, #28]	; (5ec4 <opcode_0x5E()+0x5c>)
    5ea6:	4b08      	ldr	r3, [pc, #32]	; (5ec8 <opcode_0x5E()+0x60>)
    5ea8:	f892 0349 	ldrb.w	r0, [r2, #841]	; 0x349
    5eac:	881b      	ldrh	r3, [r3, #0]
    5eae:	4418      	add	r0, r3
    5eb0:	b280      	uxth	r0, r0
} // 0x5E - LSR - Logical Shift Right - Absolute , X
    5eb2:	b002      	add	sp, #8
    5eb4:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5eb6:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    5eba:	e7e9      	b.n	5e90 <opcode_0x5E()+0x28>
    5ebc:	20004968 	.word	0x20004968
    5ec0:	2001888a 	.word	0x2001888a
    5ec4:	20016418 	.word	0x20016418
    5ec8:	2001888c 	.word	0x2001888c

00005ecc <opcode_0x66()>:
    local_data = (old_carry_flag | (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x66() {
    5ecc:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    5ece:	4d19      	ldr	r5, [pc, #100]	; (5f34 <opcode_0x66()+0x68>)
    5ed0:	b083      	sub	sp, #12
    5ed2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5ed4:	4c18      	ldr	r4, [pc, #96]	; (5f38 <opcode_0x66()+0x6c>)
    return read_byte(register_pc+offset, false);
    5ed6:	8828      	ldrh	r0, [r5, #0]
    5ed8:	3001      	adds	r0, #1
    5eda:	b280      	uxth	r0, r0
    5edc:	f7fc fbc8 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    5ee0:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    5ee2:	b280      	uxth	r0, r0
    5ee4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    5ee6:	f7fc fbc3 	bl	2670 <read_byte(unsigned short, bool)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5eea:	4a14      	ldr	r2, [pc, #80]	; (5f3c <opcode_0x66()+0x70>)
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5eec:	f010 0f01 	tst.w	r0, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5ef0:	7813      	ldrb	r3, [r2, #0]
    5ef2:	ea4f 11c3 	mov.w	r1, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5ef6:	bf14      	ite	ne
    5ef8:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5efc:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5f00:	b2c9      	uxtb	r1, r1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5f02:	7013      	strb	r3, [r2, #0]
    local_data = (old_carry_flag | (local_data >> 1));
    5f04:	ea41 0050 	orr.w	r0, r1, r0, lsr #1
    5f08:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    5f0a:	4608      	mov	r0, r1
    5f0c:	9101      	str	r1, [sp, #4]
    5f0e:	f7fc fe73 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    5f12:	9901      	ldr	r1, [sp, #4]
    5f14:	8820      	ldrh	r0, [r4, #0]
    5f16:	f7fc fd67 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f1a:	8820      	ldrh	r0, [r4, #0]
    5f1c:	9901      	ldr	r1, [sp, #4]
    5f1e:	f7fc fd63 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x66].length);
    5f22:	4a07      	ldr	r2, [pc, #28]	; (5f40 <opcode_0x66()+0x74>)
    5f24:	882b      	ldrh	r3, [r5, #0]
    5f26:	f892 04e9 	ldrb.w	r0, [r2, #1257]	; 0x4e9
    5f2a:	4418      	add	r0, r3
} // 0x66 - ROR - Rotate Right - ZeroPage
    5f2c:	b280      	uxth	r0, r0
    5f2e:	b003      	add	sp, #12
    5f30:	bd30      	pop	{r4, r5, pc}
    5f32:	bf00      	nop
    5f34:	2001888c 	.word	0x2001888c
    5f38:	2001888a 	.word	0x2001888a
    5f3c:	20004968 	.word	0x20004968
    5f40:	20016418 	.word	0x20016418

00005f44 <opcode_0x76()>:
uint16_t opcode_0x76() {
    5f44:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5f46:	4d18      	ldr	r5, [pc, #96]	; (5fa8 <opcode_0x76()+0x64>)
uint16_t opcode_0x76() {
    5f48:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage_X()));
    5f4a:	f7fc fe89 	bl	2c60 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f4e:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5f50:	782b      	ldrb	r3, [r5, #0]
    5f52:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5f56:	bf4c      	ite	mi
    5f58:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5f5c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5f60:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    5f62:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5f66:	0602      	lsls	r2, r0, #24
    5f68:	b2c1      	uxtb	r1, r0
    5f6a:	d417      	bmi.n	5f9c <opcode_0x76()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5f70:	b9b1      	cbnz	r1, 5fa0 <opcode_0x76()+0x5c>
    5f72:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5f76:	4c0d      	ldr	r4, [pc, #52]	; (5fac <opcode_0x76()+0x68>)
    5f78:	702b      	strb	r3, [r5, #0]
    5f7a:	8820      	ldrh	r0, [r4, #0]
    5f7c:	9101      	str	r1, [sp, #4]
    5f7e:	f7fc fd33 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5f82:	8820      	ldrh	r0, [r4, #0]
    5f84:	9901      	ldr	r1, [sp, #4]
    5f86:	f7fc fd2f 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x76].length);
    5f8a:	4a09      	ldr	r2, [pc, #36]	; (5fb0 <opcode_0x76()+0x6c>)
    5f8c:	4b09      	ldr	r3, [pc, #36]	; (5fb4 <opcode_0x76()+0x70>)
    5f8e:	f892 0829 	ldrb.w	r0, [r2, #2089]	; 0x829
    5f92:	881b      	ldrh	r3, [r3, #0]
    5f94:	4418      	add	r0, r3
} // 0x76 - ROR - Rotate Right - ZeroPage , X
    5f96:	b280      	uxth	r0, r0
    5f98:	b003      	add	sp, #12
    5f9a:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5fa0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5fa4:	e7e7      	b.n	5f76 <opcode_0x76()+0x32>
    5fa6:	bf00      	nop
    5fa8:	20004968 	.word	0x20004968
    5fac:	2001888a 	.word	0x2001888a
    5fb0:	20016418 	.word	0x20016418
    5fb4:	2001888c 	.word	0x2001888c

00005fb8 <opcode_0x6E()>:
uint16_t opcode_0x6E() {
    5fb8:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5fba:	4d18      	ldr	r5, [pc, #96]	; (601c <opcode_0x6E()+0x64>)
uint16_t opcode_0x6E() {
    5fbc:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_Absolute()));
    5fbe:	f7fc fe8f 	bl	2ce0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5fc2:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5fc4:	782b      	ldrb	r3, [r5, #0]
    5fc6:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    5fca:	bf4c      	ite	mi
    5fcc:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    5fd0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    5fd4:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    5fd6:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5fda:	0602      	lsls	r2, r0, #24
    5fdc:	b2c1      	uxtb	r1, r0
    5fde:	d417      	bmi.n	6010 <opcode_0x6E()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5fe4:	b9b1      	cbnz	r1, 6014 <opcode_0x6E()+0x5c>
    5fe6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5fea:	4c0d      	ldr	r4, [pc, #52]	; (6020 <opcode_0x6E()+0x68>)
    5fec:	702b      	strb	r3, [r5, #0]
    5fee:	8820      	ldrh	r0, [r4, #0]
    5ff0:	9101      	str	r1, [sp, #4]
    5ff2:	f7fc fcf9 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5ff6:	8820      	ldrh	r0, [r4, #0]
    5ff8:	9901      	ldr	r1, [sp, #4]
    5ffa:	f7fc fcf5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x6E].length);
    5ffe:	4a09      	ldr	r2, [pc, #36]	; (6024 <opcode_0x6E()+0x6c>)
    6000:	4b09      	ldr	r3, [pc, #36]	; (6028 <opcode_0x6E()+0x70>)
    6002:	f892 0689 	ldrb.w	r0, [r2, #1673]	; 0x689
    6006:	881b      	ldrh	r3, [r3, #0]
    6008:	4418      	add	r0, r3
} // 0x6E - ROR - Rotate Right - Absolute
    600a:	b280      	uxth	r0, r0
    600c:	b003      	add	sp, #12
    600e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6014:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6018:	e7e7      	b.n	5fea <opcode_0x6E()+0x32>
    601a:	bf00      	nop
    601c:	20004968 	.word	0x20004968
    6020:	2001888a 	.word	0x2001888a
    6024:	20016418 	.word	0x20016418
    6028:	2001888c 	.word	0x2001888c

0000602c <opcode_0x7E()>:
uint16_t opcode_0x7E() {
    602c:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    602e:	4d18      	ldr	r5, [pc, #96]	; (6090 <opcode_0x7E()+0x64>)
uint16_t opcode_0x7E() {
    6030:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    6032:	2000      	movs	r0, #0
    6034:	f7fc fe70 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    6038:	782b      	ldrb	r3, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    603a:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    603c:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    6040:	bf4c      	ite	mi
    6042:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6046:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    604a:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    604c:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6050:	0602      	lsls	r2, r0, #24
    6052:	b2c1      	uxtb	r1, r0
    6054:	d417      	bmi.n	6086 <opcode_0x7E()+0x5a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    605a:	b9b1      	cbnz	r1, 608a <opcode_0x7E()+0x5e>
    605c:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6060:	4c0c      	ldr	r4, [pc, #48]	; (6094 <opcode_0x7E()+0x68>)
    6062:	702b      	strb	r3, [r5, #0]
    6064:	8820      	ldrh	r0, [r4, #0]
    6066:	9101      	str	r1, [sp, #4]
    6068:	f7fc fcbe 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    606c:	8820      	ldrh	r0, [r4, #0]
    606e:	9901      	ldr	r1, [sp, #4]
    6070:	f7fc fcba 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x7E].length);
    6074:	4a08      	ldr	r2, [pc, #32]	; (6098 <opcode_0x7E()+0x6c>)
    6076:	4b09      	ldr	r3, [pc, #36]	; (609c <opcode_0x7E()+0x70>)
    6078:	f892 09c9 	ldrb.w	r0, [r2, #2505]	; 0x9c9
    607c:	881b      	ldrh	r3, [r3, #0]
    607e:	4418      	add	r0, r3
} // 0x7E - ROR - Rotate Right - Absolute , X
    6080:	b280      	uxth	r0, r0
    6082:	b003      	add	sp, #12
    6084:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    608a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    608e:	e7e7      	b.n	6060 <opcode_0x7E()+0x34>
    6090:	20004968 	.word	0x20004968
    6094:	2001888a 	.word	0x2001888a
    6098:	20016418 	.word	0x20016418
    609c:	2001888c 	.word	0x2001888c

000060a0 <opcode_0x26()>:
    local_data = (local_data << 1) | old_carry_flag;

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
uint16_t opcode_0x26() {
    60a0:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    60a2:	4d18      	ldr	r5, [pc, #96]	; (6104 <opcode_0x26()+0x64>)
    60a4:	b083      	sub	sp, #12
    60a6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    60a8:	4c17      	ldr	r4, [pc, #92]	; (6108 <opcode_0x26()+0x68>)
    return read_byte(register_pc+offset, false);
    60aa:	8828      	ldrh	r0, [r5, #0]
    60ac:	3001      	adds	r0, #1
    60ae:	b280      	uxth	r0, r0
    60b0:	f7fc fade 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    60b4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    60b6:	b280      	uxth	r0, r0
    60b8:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    60ba:	f7fc fad9 	bl	2670 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    60be:	4a13      	ldr	r2, [pc, #76]	; (610c <opcode_0x26()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    60c0:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    60c4:	7813      	ldrb	r3, [r2, #0]
    60c6:	f003 0101 	and.w	r1, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    60ca:	bf14      	ite	ne
    60cc:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    60d0:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    60d4:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    60d8:	7013      	strb	r3, [r2, #0]
    60da:	b2c1      	uxtb	r1, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    60dc:	4608      	mov	r0, r1
    60de:	9101      	str	r1, [sp, #4]
    60e0:	f7fc fd8a 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    60e4:	9901      	ldr	r1, [sp, #4]
    60e6:	8820      	ldrh	r0, [r4, #0]
    60e8:	f7fc fc7e 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    60ec:	8820      	ldrh	r0, [r4, #0]
    60ee:	9901      	ldr	r1, [sp, #4]
    60f0:	f7fc fc7a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x26].length);
    60f4:	4a06      	ldr	r2, [pc, #24]	; (6110 <opcode_0x26()+0x70>)
    60f6:	882b      	ldrh	r3, [r5, #0]
    60f8:	f892 07e9 	ldrb.w	r0, [r2, #2025]	; 0x7e9
    60fc:	4418      	add	r0, r3
} // 0x26 - ROL - Rotate Left - ZeroPage
    60fe:	b280      	uxth	r0, r0
    6100:	b003      	add	sp, #12
    6102:	bd30      	pop	{r4, r5, pc}
    6104:	2001888c 	.word	0x2001888c
    6108:	2001888a 	.word	0x2001888a
    610c:	20004968 	.word	0x20004968
    6110:	20015418 	.word	0x20015418

00006114 <opcode_0x36()>:
uint16_t opcode_0x36() {
    6114:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6116:	4d17      	ldr	r5, [pc, #92]	; (6174 <opcode_0x36()+0x60>)
uint16_t opcode_0x36() {
    6118:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage_X()));
    611a:	f7fc fda1 	bl	2c60 <Fetch_ZeroPage_X()>
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    611e:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6120:	782b      	ldrb	r3, [r5, #0]
    6122:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6126:	bf4c      	ite	mi
    6128:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    612c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    6130:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6134:	0602      	lsls	r2, r0, #24
    6136:	b2c1      	uxtb	r1, r0
    6138:	d417      	bmi.n	616a <opcode_0x36()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    613a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    613e:	b9b1      	cbnz	r1, 616e <opcode_0x36()+0x5a>
    6140:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6144:	4c0c      	ldr	r4, [pc, #48]	; (6178 <opcode_0x36()+0x64>)
    6146:	702b      	strb	r3, [r5, #0]
    6148:	8820      	ldrh	r0, [r4, #0]
    614a:	9101      	str	r1, [sp, #4]
    614c:	f7fc fc4c 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6150:	8820      	ldrh	r0, [r4, #0]
    6152:	9901      	ldr	r1, [sp, #4]
    6154:	f7fc fc48 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x36].length);
    6158:	4a08      	ldr	r2, [pc, #32]	; (617c <opcode_0x36()+0x68>)
    615a:	4b09      	ldr	r3, [pc, #36]	; (6180 <opcode_0x36()+0x6c>)
    615c:	f892 0b29 	ldrb.w	r0, [r2, #2857]	; 0xb29
    6160:	881b      	ldrh	r3, [r3, #0]
    6162:	4418      	add	r0, r3
} // 0x36 - ROL - Rotate Left - ZeroPage , X
    6164:	b280      	uxth	r0, r0
    6166:	b003      	add	sp, #12
    6168:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    616e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6172:	e7e7      	b.n	6144 <opcode_0x36()+0x30>
    6174:	20004968 	.word	0x20004968
    6178:	2001888a 	.word	0x2001888a
    617c:	20015418 	.word	0x20015418
    6180:	2001888c 	.word	0x2001888c

00006184 <opcode_0x2E()>:
uint16_t opcode_0x2E() {
    6184:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6186:	4d17      	ldr	r5, [pc, #92]	; (61e4 <opcode_0x2E()+0x60>)
uint16_t opcode_0x2E() {
    6188:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_Absolute()));
    618a:	f7fc fda9 	bl	2ce0 <Fetch_Absolute()>
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    618e:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6190:	782b      	ldrb	r3, [r5, #0]
    6192:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6196:	bf4c      	ite	mi
    6198:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    619c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    61a0:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    61a4:	0602      	lsls	r2, r0, #24
    61a6:	b2c1      	uxtb	r1, r0
    61a8:	d417      	bmi.n	61da <opcode_0x2E()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    61aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    61ae:	b9b1      	cbnz	r1, 61de <opcode_0x2E()+0x5a>
    61b0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    61b4:	4c0c      	ldr	r4, [pc, #48]	; (61e8 <opcode_0x2E()+0x64>)
    61b6:	702b      	strb	r3, [r5, #0]
    61b8:	8820      	ldrh	r0, [r4, #0]
    61ba:	9101      	str	r1, [sp, #4]
    61bc:	f7fc fc14 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    61c0:	8820      	ldrh	r0, [r4, #0]
    61c2:	9901      	ldr	r1, [sp, #4]
    61c4:	f7fc fc10 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2E].length);
    61c8:	4a08      	ldr	r2, [pc, #32]	; (61ec <opcode_0x2E()+0x68>)
    61ca:	4b09      	ldr	r3, [pc, #36]	; (61f0 <opcode_0x2E()+0x6c>)
    61cc:	f892 0989 	ldrb.w	r0, [r2, #2441]	; 0x989
    61d0:	881b      	ldrh	r3, [r3, #0]
    61d2:	4418      	add	r0, r3
} // 0x2E - ROL - Rotate Left - Absolute
    61d4:	b280      	uxth	r0, r0
    61d6:	b003      	add	sp, #12
    61d8:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    61da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    61de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    61e2:	e7e7      	b.n	61b4 <opcode_0x2E()+0x30>
    61e4:	20004968 	.word	0x20004968
    61e8:	2001888a 	.word	0x2001888a
    61ec:	20015418 	.word	0x20015418
    61f0:	2001888c 	.word	0x2001888c

000061f4 <opcode_0x3E()>:
uint16_t opcode_0x3E() {
    61f4:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    61f6:	4d18      	ldr	r5, [pc, #96]	; (6258 <opcode_0x3E()+0x64>)
uint16_t opcode_0x3E() {
    61f8:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    61fa:	2000      	movs	r0, #0
    61fc:	f7fc fd8c 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6200:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6202:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    6204:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    6208:	bf4c      	ite	mi
    620a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    620e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    6212:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6216:	0602      	lsls	r2, r0, #24
    6218:	b2c1      	uxtb	r1, r0
    621a:	d417      	bmi.n	624c <opcode_0x3E()+0x58>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    621c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6220:	b9b1      	cbnz	r1, 6250 <opcode_0x3E()+0x5c>
    6222:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6226:	4c0d      	ldr	r4, [pc, #52]	; (625c <opcode_0x3E()+0x68>)
    6228:	702b      	strb	r3, [r5, #0]
    622a:	8820      	ldrh	r0, [r4, #0]
    622c:	9101      	str	r1, [sp, #4]
    622e:	f7fc fbdb 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6232:	8820      	ldrh	r0, [r4, #0]
    6234:	9901      	ldr	r1, [sp, #4]
    6236:	f7fc fbd7 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3E].length);
    623a:	4a09      	ldr	r2, [pc, #36]	; (6260 <opcode_0x3E()+0x6c>)
    623c:	4b09      	ldr	r3, [pc, #36]	; (6264 <opcode_0x3E()+0x70>)
    623e:	f892 0cc9 	ldrb.w	r0, [r2, #3273]	; 0xcc9
    6242:	881b      	ldrh	r3, [r3, #0]
    6244:	4418      	add	r0, r3
} // 0x3E - ROL - Rotate Left - Absolute , X
    6246:	b280      	uxth	r0, r0
    6248:	b003      	add	sp, #12
    624a:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    624c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6250:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6254:	e7e7      	b.n	6226 <opcode_0x3E()+0x32>
    6256:	bf00      	nop
    6258:	20004968 	.word	0x20004968
    625c:	2001888a 	.word	0x2001888a
    6260:	20015418 	.word	0x20015418
    6264:	2001888c 	.word	0x2001888c

00006268 <Branch_Taken()>:

// -------------------------------------------------
// Branches
// -------------------------------------------------
void Branch_Taken() {
    6268:	b570      	push	{r4, r5, r6, lr}
    return read_byte(register_pc+offset, false);
    626a:	4c52      	ldr	r4, [pc, #328]	; (63b4 <Branch_Taken()+0x14c>)
    626c:	2100      	movs	r1, #0
    626e:	8820      	ldrh	r0, [r4, #0]
    6270:	3001      	adds	r0, #1
    6272:	b280      	uxth	r0, r0
    6274:	f7fc f9fc 	bl	2670 <read_byte(unsigned short, bool)>
    if ((reg_data & 0x0080) == 0x0080) {
    6278:	0605      	lsls	r5, r0, #24

    effective_address = Sign_Extend16(Fetch_Immediate(1));
    627a:	b283      	uxth	r3, r0
    effective_address = (register_pc + 1) + effective_address;
    627c:	8820      	ldrh	r0, [r4, #0]
    627e:	4d4e      	ldr	r5, [pc, #312]	; (63b8 <Branch_Taken()+0x150>)
        return (reg_data | 0xFF00);
    6280:	bf48      	it	mi
    6282:	f443 437f 	orrmi.w	r3, r3, #65280	; 0xff00
    6286:	1c42      	adds	r2, r0, #1
    6288:	4413      	add	r3, r2
    628a:	b29b      	uxth	r3, r3

    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    628c:	ea80 0103 	eor.w	r1, r0, r3
    effective_address = (register_pc + 1) + effective_address;
    6290:	802b      	strh	r3, [r5, #0]
    return read_byte(register_pc+offset, false);
    6292:	3002      	adds	r0, #2
    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    6294:	f411 417f 	ands.w	r1, r1, #65280	; 0xff00
    6298:	d006      	beq.n	62a8 <Branch_Taken()+0x40>
    629a:	2100      	movs	r1, #0
    629c:	b280      	uxth	r0, r0
    629e:	f7fc f9e7 	bl	2670 <read_byte(unsigned short, bool)>
    62a2:	8820      	ldrh	r0, [r4, #0]
    62a4:	2100      	movs	r1, #0
    62a6:	3003      	adds	r0, #3
    62a8:	b280      	uxth	r0, r0
    62aa:	f7fc f9e1 	bl	2670 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(2);
        Fetch_Immediate(3);
    } // Page boundary crossed

    register_pc = effective_address;
    62ae:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    62b0:	4a42      	ldr	r2, [pc, #264]	; (63bc <Branch_Taken()+0x154>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    62b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    62b6:	8023      	strh	r3, [r4, #0]
    current_address = local_address;
    62b8:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    62ba:	d376      	bcc.n	63aa <Branch_Taken()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    62bc:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    62c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    62c4:	d305      	bcc.n	62d2 <Branch_Taken()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    62c6:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    62ca:	b292      	uxth	r2, r2
    62cc:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    62d0:	d36b      	bcc.n	63aa <Branch_Taken()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    62d2:	4a3b      	ldr	r2, [pc, #236]	; (63c0 <Branch_Taken()+0x158>)
        last_access_internal_RAM = 0;
    62d4:	2000      	movs	r0, #0
    62d6:	493b      	ldr	r1, [pc, #236]	; (63c4 <Branch_Taken()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    62d8:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    62da:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    62dc:	2a01      	cmp	r2, #1
    62de:	d005      	beq.n	62ec <Branch_Taken()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    62e0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    62e4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    62e8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    62ec:	4a36      	ldr	r2, [pc, #216]	; (63c8 <Branch_Taken()+0x160>)
    62ee:	7812      	ldrb	r2, [r2, #0]
    62f0:	b94a      	cbnz	r2, 6306 <Branch_Taken()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    62f2:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    62f6:	680a      	ldr	r2, [r1, #0]
    62f8:	04d0      	lsls	r0, r2, #19
    62fa:	d4fc      	bmi.n	62f6 <Branch_Taken()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    62fc:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    6300:	680a      	ldr	r2, [r1, #0]
    6302:	04d2      	lsls	r2, r2, #19
    6304:	d5fc      	bpl.n	6300 <Branch_Taken()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    6306:	4e31      	ldr	r6, [pc, #196]	; (63cc <Branch_Taken()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6308:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    630c:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    630e:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6310:	06d8      	lsls	r0, r3, #27
    6312:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6316:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    631a:	6829      	ldr	r1, [r5, #0]
    631c:	4a2c      	ldr	r2, [pc, #176]	; (63d0 <Branch_Taken()+0x168>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    631e:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6322:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6324:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6326:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    632a:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    632e:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6330:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    6334:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6338:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    633a:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    633e:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6342:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6344:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6346:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6348:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    634a:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    634e:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6350:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6354:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6356:	491f      	ldr	r1, [pc, #124]	; (63d4 <Branch_Taken()+0x16c>)
    6358:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    635a:	4d1f      	ldr	r5, [pc, #124]	; (63d8 <Branch_Taken()+0x170>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    635c:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    635e:	0559      	lsls	r1, r3, #21
    6360:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    6364:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    6366:	0359      	lsls	r1, r3, #13
    6368:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    636c:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    636e:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6370:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6374:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6378:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    637a:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    637c:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    637e:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6382:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6386:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    638a:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    638c:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    638e:	682c      	ldr	r4, [r5, #0]
    6390:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6394:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6396:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6398:	4910      	ldr	r1, [pc, #64]	; (63dc <Branch_Taken()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    639a:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    639c:	4a10      	ldr	r2, [pc, #64]	; (63e0 <Branch_Taken()+0x178>)
    639e:	680c      	ldr	r4, [r1, #0]
    63a0:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    63a2:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    63a4:	4303      	orrs	r3, r0
    63a6:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    63a8:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    63aa:	4a0e      	ldr	r2, [pc, #56]	; (63e4 <Branch_Taken()+0x17c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    63ac:	7812      	ldrb	r2, [r2, #0]
    63ae:	2a01      	cmp	r2, #1
    63b0:	d98f      	bls.n	62d2 <Branch_Taken()+0x6a>
    63b2:	bd70      	pop	{r4, r5, r6, pc}
    63b4:	2001888c 	.word	0x2001888c
    63b8:	2001888a 	.word	0x2001888a
    63bc:	20018888 	.word	0x20018888
    63c0:	200188a6 	.word	0x200188a6
    63c4:	200188a1 	.word	0x200188a1
    63c8:	20004966 	.word	0x20004966
    63cc:	42004000 	.word	0x42004000
    63d0:	6dfffff3 	.word	0x6dfffff3
    63d4:	cff3efff 	.word	0xcff3efff
    63d8:	42008000 	.word	0x42008000
    63dc:	4200c000 	.word	0x4200c000
    63e0:	7fffff6f 	.word	0x7fffff6f
    63e4:	20018898 	.word	0x20018898

000063e8 <opcode_0xB0()>:
uint16_t opcode_0xB0() {
    if ((flag_c) == 1) Branch_Taken();
    63e8:	4b08      	ldr	r3, [pc, #32]	; (640c <opcode_0xB0()+0x24>)
uint16_t opcode_0xB0() {
    63ea:	b510      	push	{r4, lr}
    if ((flag_c) == 1) Branch_Taken();
    63ec:	7819      	ldrb	r1, [r3, #0]
    63ee:	4c08      	ldr	r4, [pc, #32]	; (6410 <opcode_0xB0()+0x28>)
    63f0:	f011 0101 	ands.w	r1, r1, #1
    63f4:	d003      	beq.n	63fe <opcode_0xB0()+0x16>
    63f6:	f7ff ff37 	bl	6268 <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xB0 - BCS - Branch on Carry Set
    63fa:	8820      	ldrh	r0, [r4, #0]
    63fc:	bd10      	pop	{r4, pc}
    return read_byte(register_pc+offset, false);
    63fe:	8820      	ldrh	r0, [r4, #0]
    6400:	3001      	adds	r0, #1
    6402:	b280      	uxth	r0, r0
    6404:	f7fc f934 	bl	2670 <read_byte(unsigned short, bool)>
    6408:	8820      	ldrh	r0, [r4, #0]
    640a:	bd10      	pop	{r4, pc}
    640c:	20004968 	.word	0x20004968
    6410:	2001888c 	.word	0x2001888c

00006414 <opcode_0x90()>:
uint16_t opcode_0x90() {
    if ((flag_c) == 0) Branch_Taken();
    6414:	4b08      	ldr	r3, [pc, #32]	; (6438 <opcode_0x90()+0x24>)
uint16_t opcode_0x90() {
    6416:	b510      	push	{r4, lr}
    if ((flag_c) == 0) Branch_Taken();
    6418:	781b      	ldrb	r3, [r3, #0]
    641a:	4c08      	ldr	r4, [pc, #32]	; (643c <opcode_0x90()+0x28>)
    641c:	07db      	lsls	r3, r3, #31
    641e:	d403      	bmi.n	6428 <opcode_0x90()+0x14>
    6420:	f7ff ff22 	bl	6268 <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x90 - BCC - Branch on Carry Clear
    6424:	8820      	ldrh	r0, [r4, #0]
    6426:	bd10      	pop	{r4, pc}
    6428:	8820      	ldrh	r0, [r4, #0]
    642a:	2100      	movs	r1, #0
    642c:	3001      	adds	r0, #1
    642e:	b280      	uxth	r0, r0
    6430:	f7fc f91e 	bl	2670 <read_byte(unsigned short, bool)>
    6434:	8820      	ldrh	r0, [r4, #0]
    6436:	bd10      	pop	{r4, pc}
    6438:	20004968 	.word	0x20004968
    643c:	2001888c 	.word	0x2001888c

00006440 <opcode_0xF0()>:
uint16_t opcode_0xF0() {
    if ((flag_z) == 1) Branch_Taken();
    6440:	4b09      	ldr	r3, [pc, #36]	; (6468 <opcode_0xF0()+0x28>)
uint16_t opcode_0xF0() {
    6442:	b510      	push	{r4, lr}
    if ((flag_z) == 1) Branch_Taken();
    6444:	781b      	ldrb	r3, [r3, #0]
    6446:	4c09      	ldr	r4, [pc, #36]	; (646c <opcode_0xF0()+0x2c>)
    6448:	f3c3 0140 	ubfx	r1, r3, #1, #1
    644c:	079b      	lsls	r3, r3, #30
    644e:	d503      	bpl.n	6458 <opcode_0xF0()+0x18>
    6450:	f7ff ff0a 	bl	6268 <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xF0 - BEQ - Branch on Zero Set
    6454:	8820      	ldrh	r0, [r4, #0]
    6456:	bd10      	pop	{r4, pc}
    6458:	8820      	ldrh	r0, [r4, #0]
    645a:	3001      	adds	r0, #1
    645c:	b280      	uxth	r0, r0
    645e:	f7fc f907 	bl	2670 <read_byte(unsigned short, bool)>
    6462:	8820      	ldrh	r0, [r4, #0]
    6464:	bd10      	pop	{r4, pc}
    6466:	bf00      	nop
    6468:	20004968 	.word	0x20004968
    646c:	2001888c 	.word	0x2001888c

00006470 <opcode_0xD0()>:
uint16_t opcode_0xD0() {
    if ((flag_z) == 0) Branch_Taken();
    6470:	4b08      	ldr	r3, [pc, #32]	; (6494 <opcode_0xD0()+0x24>)
uint16_t opcode_0xD0() {
    6472:	b510      	push	{r4, lr}
    if ((flag_z) == 0) Branch_Taken();
    6474:	781b      	ldrb	r3, [r3, #0]
    6476:	4c08      	ldr	r4, [pc, #32]	; (6498 <opcode_0xD0()+0x28>)
    6478:	079b      	lsls	r3, r3, #30
    647a:	d403      	bmi.n	6484 <opcode_0xD0()+0x14>
    647c:	f7ff fef4 	bl	6268 <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0xD0 - BNE - Branch on Zero Clear
    6480:	8820      	ldrh	r0, [r4, #0]
    6482:	bd10      	pop	{r4, pc}
    6484:	8820      	ldrh	r0, [r4, #0]
    6486:	2100      	movs	r1, #0
    6488:	3001      	adds	r0, #1
    648a:	b280      	uxth	r0, r0
    648c:	f7fc f8f0 	bl	2670 <read_byte(unsigned short, bool)>
    6490:	8820      	ldrh	r0, [r4, #0]
    6492:	bd10      	pop	{r4, pc}
    6494:	20004968 	.word	0x20004968
    6498:	2001888c 	.word	0x2001888c

0000649c <opcode_0x70()>:
uint16_t opcode_0x70() {
    if ((flag_v) == 1) Branch_Taken();
    649c:	4b09      	ldr	r3, [pc, #36]	; (64c4 <opcode_0x70()+0x28>)
uint16_t opcode_0x70() {
    649e:	b510      	push	{r4, lr}
    if ((flag_v) == 1) Branch_Taken();
    64a0:	781b      	ldrb	r3, [r3, #0]
    64a2:	4c09      	ldr	r4, [pc, #36]	; (64c8 <opcode_0x70()+0x2c>)
    64a4:	f3c3 1180 	ubfx	r1, r3, #6, #1
    64a8:	065b      	lsls	r3, r3, #25
    64aa:	d503      	bpl.n	64b4 <opcode_0x70()+0x18>
    64ac:	f7ff fedc 	bl	6268 <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x70 - BVS - Branch on Overflow Set
    64b0:	8820      	ldrh	r0, [r4, #0]
    64b2:	bd10      	pop	{r4, pc}
    64b4:	8820      	ldrh	r0, [r4, #0]
    64b6:	3001      	adds	r0, #1
    64b8:	b280      	uxth	r0, r0
    64ba:	f7fc f8d9 	bl	2670 <read_byte(unsigned short, bool)>
    64be:	8820      	ldrh	r0, [r4, #0]
    64c0:	bd10      	pop	{r4, pc}
    64c2:	bf00      	nop
    64c4:	20004968 	.word	0x20004968
    64c8:	2001888c 	.word	0x2001888c

000064cc <opcode_0x50()>:
uint16_t opcode_0x50() {
    if ((flag_v) == 0) Branch_Taken();
    64cc:	4b08      	ldr	r3, [pc, #32]	; (64f0 <opcode_0x50()+0x24>)
uint16_t opcode_0x50() {
    64ce:	b510      	push	{r4, lr}
    if ((flag_v) == 0) Branch_Taken();
    64d0:	781b      	ldrb	r3, [r3, #0]
    64d2:	4c08      	ldr	r4, [pc, #32]	; (64f4 <opcode_0x50()+0x28>)
    64d4:	065b      	lsls	r3, r3, #25
    64d6:	d403      	bmi.n	64e0 <opcode_0x50()+0x14>
    64d8:	f7ff fec6 	bl	6268 <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x50 - BVC - Branch on Overflow Clear
    64dc:	8820      	ldrh	r0, [r4, #0]
    64de:	bd10      	pop	{r4, pc}
    64e0:	8820      	ldrh	r0, [r4, #0]
    64e2:	2100      	movs	r1, #0
    64e4:	3001      	adds	r0, #1
    64e6:	b280      	uxth	r0, r0
    64e8:	f7fc f8c2 	bl	2670 <read_byte(unsigned short, bool)>
    64ec:	8820      	ldrh	r0, [r4, #0]
    64ee:	bd10      	pop	{r4, pc}
    64f0:	20004968 	.word	0x20004968
    64f4:	2001888c 	.word	0x2001888c

000064f8 <opcode_0x30()>:
uint16_t opcode_0x30() {
    if ((flag_n) == 1) Branch_Taken();
    64f8:	4b08      	ldr	r3, [pc, #32]	; (651c <opcode_0x30()+0x24>)
uint16_t opcode_0x30() {
    64fa:	b510      	push	{r4, lr}
    if ((flag_n) == 1) Branch_Taken();
    64fc:	781b      	ldrb	r3, [r3, #0]
    64fe:	4c08      	ldr	r4, [pc, #32]	; (6520 <opcode_0x30()+0x28>)
    6500:	09db      	lsrs	r3, r3, #7
    6502:	d107      	bne.n	6514 <opcode_0x30()+0x1c>
    6504:	8820      	ldrh	r0, [r4, #0]
    6506:	2100      	movs	r1, #0
    6508:	3001      	adds	r0, #1
    650a:	b280      	uxth	r0, r0
    650c:	f7fc f8b0 	bl	2670 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    }
    return(register_pc);
} // 0x30 - BMI - Branch on Minus (N Flag Set)
    6510:	8820      	ldrh	r0, [r4, #0]
    6512:	bd10      	pop	{r4, pc}
    if ((flag_n) == 1) Branch_Taken();
    6514:	f7ff fea8 	bl	6268 <Branch_Taken()>
} // 0x30 - BMI - Branch on Minus (N Flag Set)
    6518:	8820      	ldrh	r0, [r4, #0]
    651a:	bd10      	pop	{r4, pc}
    651c:	20004968 	.word	0x20004968
    6520:	2001888c 	.word	0x2001888c

00006524 <opcode_0x10()>:
uint16_t opcode_0x10() {
    if ((flag_n) == 0) Branch_Taken();
    6524:	4b09      	ldr	r3, [pc, #36]	; (654c <opcode_0x10()+0x28>)
uint16_t opcode_0x10() {
    6526:	b510      	push	{r4, lr}
    if ((flag_n) == 0) Branch_Taken();
    6528:	f993 3000 	ldrsb.w	r3, [r3]
    652c:	4c08      	ldr	r4, [pc, #32]	; (6550 <opcode_0x10()+0x2c>)
    652e:	2b00      	cmp	r3, #0
    6530:	db03      	blt.n	653a <opcode_0x10()+0x16>
    6532:	f7ff fe99 	bl	6268 <Branch_Taken()>
    else {
        Fetch_Immediate(1);
        Begin_Fetch_Next_Opcode();
    } 
    return(register_pc);
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)
    6536:	8820      	ldrh	r0, [r4, #0]
    6538:	bd10      	pop	{r4, pc}
    653a:	8820      	ldrh	r0, [r4, #0]
    653c:	2100      	movs	r1, #0
    653e:	3001      	adds	r0, #1
    6540:	b280      	uxth	r0, r0
    6542:	f7fc f895 	bl	2670 <read_byte(unsigned short, bool)>
    6546:	8820      	ldrh	r0, [r4, #0]
    6548:	bd10      	pop	{r4, pc}
    654a:	bf00      	nop
    654c:	20004968 	.word	0x20004968
    6550:	2001888c 	.word	0x2001888c

00006554 <opcode_0x4C()>:

// -------------------------------------------------
// Jumps and Returns
// -------------------------------------------------
uint16_t opcode_0x4C() {
    6554:	b570      	push	{r4, r5, r6, lr}
    6556:	4d4b      	ldr	r5, [pc, #300]	; (6684 <opcode_0x4C()+0x130>)
    6558:	2100      	movs	r1, #0
    655a:	8828      	ldrh	r0, [r5, #0]
    655c:	3001      	adds	r0, #1
    655e:	b280      	uxth	r0, r0
    6560:	f7fc f886 	bl	2670 <read_byte(unsigned short, bool)>
    6564:	882b      	ldrh	r3, [r5, #0]
    6566:	4604      	mov	r4, r0
    6568:	2100      	movs	r1, #0
    656a:	1c98      	adds	r0, r3, #2
    656c:	b280      	uxth	r0, r0
    656e:	f7fc f87f 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    6572:	4a45      	ldr	r2, [pc, #276]	; (6688 <opcode_0x4C()+0x134>)
    6574:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    current_address = local_address;
    6578:	4b44      	ldr	r3, [pc, #272]	; (668c <opcode_0x4C()+0x138>)
    effective_address = adl + adh;
    657a:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    657c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    effective_address = adl + adh;
    6580:	8010      	strh	r0, [r2, #0]
    register_pc = Calculate_Absolute();
    6582:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    6584:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6586:	d378      	bcc.n	667a <opcode_0x4C()+0x126>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    6588:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    658c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6590:	d305      	bcc.n	659e <opcode_0x4C()+0x4a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    6592:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    6596:	b29b      	uxth	r3, r3
    6598:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    659c:	d36d      	bcc.n	667a <opcode_0x4C()+0x126>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    659e:	4b3c      	ldr	r3, [pc, #240]	; (6690 <opcode_0x4C()+0x13c>)
        last_access_internal_RAM = 0;
    65a0:	2100      	movs	r1, #0
    65a2:	4a3c      	ldr	r2, [pc, #240]	; (6694 <opcode_0x4C()+0x140>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    65a4:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    65a6:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    65a8:	2b01      	cmp	r3, #1
    65aa:	d005      	beq.n	65b8 <opcode_0x4C()+0x64>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    65ac:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    65b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    65b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    65b8:	4b37      	ldr	r3, [pc, #220]	; (6698 <opcode_0x4C()+0x144>)
    65ba:	781b      	ldrb	r3, [r3, #0]
    65bc:	b94b      	cbnz	r3, 65d2 <opcode_0x4C()+0x7e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    65be:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    65c2:	6813      	ldr	r3, [r2, #0]
    65c4:	04d9      	lsls	r1, r3, #19
    65c6:	d4fc      	bmi.n	65c2 <opcode_0x4C()+0x6e>
    while (CLK0) {}      // Wait for CLK0 to become low
    65c8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    65cc:	6813      	ldr	r3, [r2, #0]
    65ce:	04db      	lsls	r3, r3, #19
    65d0:	d5fc      	bpl.n	65cc <opcode_0x4C()+0x78>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    65d2:	4d32      	ldr	r5, [pc, #200]	; (669c <opcode_0x4C()+0x148>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    65d4:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    65d8:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    65da:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    65dc:	06c1      	lsls	r1, r0, #27
    65de:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    65e2:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    65e6:	6832      	ldr	r2, [r6, #0]
    65e8:	4b2d      	ldr	r3, [pc, #180]	; (66a0 <opcode_0x4C()+0x14c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    65ea:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    65ee:	f40c 2c80 	and.w	ip, ip, #262144	; 0x40000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    65f2:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    65f4:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    65f6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    65fa:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    65fe:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6600:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    6604:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6608:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    660a:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    660e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6612:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6614:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6616:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6618:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    661a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    661e:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6624:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6626:	4a1f      	ldr	r2, [pc, #124]	; (66a4 <opcode_0x4C()+0x150>)
    6628:	4032      	ands	r2, r6
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    662a:	4e1f      	ldr	r6, [pc, #124]	; (66a8 <opcode_0x4C()+0x154>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    662c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    662e:	0542      	lsls	r2, r0, #21
    6630:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    6634:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    6636:	0342      	lsls	r2, r0, #13
    6638:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    663c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    663e:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6640:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6648:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    664a:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    664c:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6650:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    6654:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6656:	6832      	ldr	r2, [r6, #0]
    6658:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    665c:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    665e:	4a13      	ldr	r2, [pc, #76]	; (66ac <opcode_0x4C()+0x158>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6660:	ea43 030c 	orr.w	r3, r3, ip
    6664:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6666:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6668:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    666a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    666e:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6670:	4323      	orrs	r3, r4
    6672:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6674:	430b      	orrs	r3, r1
    6676:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
} // 0x4C - JMP - Jump Absolute
    6678:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    667a:	4b0d      	ldr	r3, [pc, #52]	; (66b0 <opcode_0x4C()+0x15c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	2b01      	cmp	r3, #1
    6680:	d98d      	bls.n	659e <opcode_0x4C()+0x4a>
    6682:	bd70      	pop	{r4, r5, r6, pc}
    6684:	2001888c 	.word	0x2001888c
    6688:	2001888a 	.word	0x2001888a
    668c:	20018888 	.word	0x20018888
    6690:	200188a6 	.word	0x200188a6
    6694:	200188a1 	.word	0x200188a1
    6698:	20004966 	.word	0x20004966
    669c:	42004000 	.word	0x42004000
    66a0:	6dfffff3 	.word	0x6dfffff3
    66a4:	cff3efff 	.word	0xcff3efff
    66a8:	42008000 	.word	0x42008000
    66ac:	7fffff6f 	.word	0x7fffff6f
    66b0:	20018898 	.word	0x20018898

000066b4 <opcode_0x6C()>:

// -------------------------------------------------
// 0x6C - JMP - Jump Indirect
// -------------------------------------------------
uint16_t opcode_0x6C() {
    66b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    66b6:	4e52      	ldr	r6, [pc, #328]	; (6800 <opcode_0x6C()+0x14c>)
    66b8:	2100      	movs	r1, #0
    66ba:	8830      	ldrh	r0, [r6, #0]
    66bc:	3001      	adds	r0, #1
    66be:	b280      	uxth	r0, r0
    66c0:	f7fb ffd6 	bl	2670 <read_byte(unsigned short, bool)>
    66c4:	8833      	ldrh	r3, [r6, #0]
    66c6:	4604      	mov	r4, r0
    66c8:	2100      	movs	r1, #0
    66ca:	1c98      	adds	r0, r3, #2
    66cc:	b280      	uxth	r0, r0
    66ce:	f7fb ffcf 	bl	2670 <read_byte(unsigned short, bool)>
    uint16_t lal, lah;
    uint16_t adl, adh;

    lal = Fetch_Immediate(1);
    lah = Fetch_Immediate(2) << 8;
    adl = read_byte(lah + lal, false);
    66d2:	2100      	movs	r1, #0
    66d4:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    66d8:	b284      	uxth	r4, r0
    66da:	4620      	mov	r0, r4
    adh = read_byte(lah + lal + 1, false) << 8;
    66dc:	3401      	adds	r4, #1
    adl = read_byte(lah + lal, false);
    66de:	f7fb ffc7 	bl	2670 <read_byte(unsigned short, bool)>
    adh = read_byte(lah + lal + 1, false) << 8;
    66e2:	2100      	movs	r1, #0
    adl = read_byte(lah + lal, false);
    66e4:	4605      	mov	r5, r0
    adh = read_byte(lah + lal + 1, false) << 8;
    66e6:	b2a0      	uxth	r0, r4
    66e8:	f7fb ffc2 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    66ec:	4945      	ldr	r1, [pc, #276]	; (6804 <opcode_0x6C()+0x150>)
    adh = read_byte(lah + lal + 1, false) << 8;
    66ee:	0200      	lsls	r0, r0, #8
    current_address = local_address;
    66f0:	4a45      	ldr	r2, [pc, #276]	; (6808 <opcode_0x6C()+0x154>)
    66f2:	b280      	uxth	r0, r0
    effective_address = adh + adl;
    66f4:	1943      	adds	r3, r0, r5
    66f6:	b29b      	uxth	r3, r3
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    66f8:	b2dc      	uxtb	r4, r3
    effective_address = adh + adl;
    66fa:	800b      	strh	r3, [r1, #0]
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    66fc:	4320      	orrs	r0, r4
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    66fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    6702:	8030      	strh	r0, [r6, #0]
    current_address = local_address;
    6704:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6706:	d376      	bcc.n	67f6 <opcode_0x6C()+0x142>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    6708:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    670c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6710:	d305      	bcc.n	671e <opcode_0x6C()+0x6a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    6712:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    6716:	b29b      	uxth	r3, r3
    6718:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    671c:	d36b      	bcc.n	67f6 <opcode_0x6C()+0x142>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    671e:	4b3b      	ldr	r3, [pc, #236]	; (680c <opcode_0x6C()+0x158>)
        last_access_internal_RAM = 0;
    6720:	2100      	movs	r1, #0
    6722:	4a3b      	ldr	r2, [pc, #236]	; (6810 <opcode_0x6C()+0x15c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6724:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    6726:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6728:	2b01      	cmp	r3, #1
    672a:	d005      	beq.n	6738 <opcode_0x6C()+0x84>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    672c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6730:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    6738:	4b36      	ldr	r3, [pc, #216]	; (6814 <opcode_0x6C()+0x160>)
    673a:	781b      	ldrb	r3, [r3, #0]
    673c:	b94b      	cbnz	r3, 6752 <opcode_0x6C()+0x9e>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    673e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6742:	6813      	ldr	r3, [r2, #0]
    6744:	04d9      	lsls	r1, r3, #19
    6746:	d4fc      	bmi.n	6742 <opcode_0x6C()+0x8e>
    while (CLK0) {}      // Wait for CLK0 to become low
    6748:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    674c:	6813      	ldr	r3, [r2, #0]
    674e:	04db      	lsls	r3, r3, #19
    6750:	d5fc      	bpl.n	674c <opcode_0x6C()+0x98>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    6752:	4d31      	ldr	r5, [pc, #196]	; (6818 <opcode_0x6C()+0x164>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6754:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    6758:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    675a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    675c:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    675e:	4f2f      	ldr	r7, [pc, #188]	; (681c <opcode_0x6C()+0x168>)
    6760:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6764:	4b2e      	ldr	r3, [pc, #184]	; (6820 <opcode_0x6C()+0x16c>)
    6766:	6832      	ldr	r2, [r6, #0]
    6768:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    676a:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    676c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6770:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6774:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6776:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    677a:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    677e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6780:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6788:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    678a:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    678c:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    678e:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6790:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6794:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    679a:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    679c:	4a21      	ldr	r2, [pc, #132]	; (6824 <opcode_0x6C()+0x170>)
    679e:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    67a0:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    67a2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    67a4:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    67a6:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    67aa:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    67ae:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    67b2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    67b4:	0342      	lsls	r2, r0, #13
    67b6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    67ba:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    67bc:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    67be:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    67c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    67c6:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    67c8:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    67ca:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    67ce:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    67d2:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    67d4:	683a      	ldr	r2, [r7, #0]
    67d6:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    67da:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    67dc:	4a12      	ldr	r2, [pc, #72]	; (6828 <opcode_0x6C()+0x174>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    67de:	4333      	orrs	r3, r6
    67e0:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    67e2:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    67e4:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    67e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    67ea:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    67ec:	4323      	orrs	r3, r4
    67ee:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    67f0:	430b      	orrs	r3, r1
    67f2:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    67f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    67f6:	4b0d      	ldr	r3, [pc, #52]	; (682c <opcode_0x6C()+0x178>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    67f8:	781b      	ldrb	r3, [r3, #0]
    67fa:	2b01      	cmp	r3, #1
    67fc:	d98f      	bls.n	671e <opcode_0x6C()+0x6a>
    67fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6800:	2001888c 	.word	0x2001888c
    6804:	2001888a 	.word	0x2001888a
    6808:	20018888 	.word	0x20018888
    680c:	200188a6 	.word	0x200188a6
    6810:	200188a1 	.word	0x200188a1
    6814:	20004966 	.word	0x20004966
    6818:	42004000 	.word	0x42004000
    681c:	42008000 	.word	0x42008000
    6820:	6dfffff3 	.word	0x6dfffff3
    6824:	cff3efff 	.word	0xcff3efff
    6828:	7fffff6f 	.word	0x7fffff6f
    682c:	20018898 	.word	0x20018898

00006830 <opcode_0x20()>:

// -------------------------------------------------
// 0x20 - JSR - Jump to Subroutine
// -------------------------------------------------
uint16_t opcode_0x20() {
    6830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    6832:	4d57      	ldr	r5, [pc, #348]	; (6990 <opcode_0x20()+0x160>)
    6834:	2100      	movs	r1, #0
    uint16_t adl, adh;

    adl = Fetch_Immediate(1);
    adh = Fetch_Immediate(2) << 8;
    read_byte(register_sp_fixed, false);
    6836:	4c57      	ldr	r4, [pc, #348]	; (6994 <opcode_0x20()+0x164>)
    6838:	8828      	ldrh	r0, [r5, #0]
    683a:	3001      	adds	r0, #1
    683c:	b280      	uxth	r0, r0
    683e:	f7fb ff17 	bl	2670 <read_byte(unsigned short, bool)>
    6842:	882b      	ldrh	r3, [r5, #0]
    6844:	4606      	mov	r6, r0
    6846:	2100      	movs	r1, #0
    6848:	1c98      	adds	r0, r3, #2
    684a:	b280      	uxth	r0, r0
    684c:	f7fb ff10 	bl	2670 <read_byte(unsigned short, bool)>
    6850:	7823      	ldrb	r3, [r4, #0]
    6852:	4607      	mov	r7, r0
    6854:	2100      	movs	r1, #0
    6856:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    685a:	f7fb ff09 	bl	2670 <read_byte(unsigned short, bool)>
    push((0xFF00 & register_pc) >> 8);
    685e:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    6860:	7820      	ldrb	r0, [r4, #0]
    6862:	0a09      	lsrs	r1, r1, #8
    6864:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6868:	f7fc f8be 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    686c:	7823      	ldrb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    686e:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    6870:	3b01      	subs	r3, #1
    6872:	b2db      	uxtb	r3, r3
    write_byte(register_sp_fixed, push_data);
    6874:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp - 1;
    6878:	7023      	strb	r3, [r4, #0]
    write_byte(register_sp_fixed, push_data);
    687a:	f7fc f8b5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    687e:	7823      	ldrb	r3, [r4, #0]

    push(0x00FF & register_pc);
    register_pc = adh + adl;
    6880:	eb06 2007 	add.w	r0, r6, r7, lsl #8
    current_address = local_address;
    6884:	4a44      	ldr	r2, [pc, #272]	; (6998 <opcode_0x20()+0x168>)
    register_sp = register_sp - 1;
    6886:	3b01      	subs	r3, #1
    6888:	b280      	uxth	r0, r0
    688a:	7023      	strb	r3, [r4, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    688c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    6890:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    6892:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6894:	d376      	bcc.n	6984 <opcode_0x20()+0x154>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    6896:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    689a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    689e:	d305      	bcc.n	68ac <opcode_0x20()+0x7c>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    68a0:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    68a4:	b29b      	uxth	r3, r3
    68a6:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    68aa:	d36b      	bcc.n	6984 <opcode_0x20()+0x154>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    68ac:	4b3b      	ldr	r3, [pc, #236]	; (699c <opcode_0x20()+0x16c>)
        last_access_internal_RAM = 0;
    68ae:	2100      	movs	r1, #0
    68b0:	4a3b      	ldr	r2, [pc, #236]	; (69a0 <opcode_0x20()+0x170>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    68b2:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    68b4:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    68b6:	2b01      	cmp	r3, #1
    68b8:	d005      	beq.n	68c6 <opcode_0x20()+0x96>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    68ba:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    68be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    68c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    68c6:	4b37      	ldr	r3, [pc, #220]	; (69a4 <opcode_0x20()+0x174>)
    68c8:	781b      	ldrb	r3, [r3, #0]
    68ca:	b94b      	cbnz	r3, 68e0 <opcode_0x20()+0xb0>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    68cc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    68d0:	6813      	ldr	r3, [r2, #0]
    68d2:	04d9      	lsls	r1, r3, #19
    68d4:	d4fc      	bmi.n	68d0 <opcode_0x20()+0xa0>
    while (CLK0) {}      // Wait for CLK0 to become low
    68d6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    68da:	6813      	ldr	r3, [r2, #0]
    68dc:	04db      	lsls	r3, r3, #19
    68de:	d5fc      	bpl.n	68da <opcode_0x20()+0xaa>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    68e0:	4d31      	ldr	r5, [pc, #196]	; (69a8 <opcode_0x20()+0x178>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    68e2:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    68e6:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    68e8:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    68ea:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    68ec:	4f2f      	ldr	r7, [pc, #188]	; (69ac <opcode_0x20()+0x17c>)
    68ee:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    68f2:	4b2f      	ldr	r3, [pc, #188]	; (69b0 <opcode_0x20()+0x180>)
    68f4:	6832      	ldr	r2, [r6, #0]
    68f6:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    68f8:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    68fa:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    68fe:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6902:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6904:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    6908:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    690c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    690e:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6912:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6916:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6918:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    691a:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    691c:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    691e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6922:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6928:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    692a:	4a22      	ldr	r2, [pc, #136]	; (69b4 <opcode_0x20()+0x184>)
    692c:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    692e:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6930:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6932:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6934:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6938:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    693c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    6940:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    6942:	0342      	lsls	r2, r0, #13
    6944:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    6948:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    694a:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    694c:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6954:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6956:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6958:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    695c:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    6960:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6962:	683a      	ldr	r2, [r7, #0]
    6964:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6968:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    696a:	4a13      	ldr	r2, [pc, #76]	; (69b8 <opcode_0x20()+0x188>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    696c:	4333      	orrs	r3, r6
    696e:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6970:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6972:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6974:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6978:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    697a:	4323      	orrs	r3, r4
    697c:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    697e:	430b      	orrs	r3, r1
    6980:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    6982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6984:	4b0d      	ldr	r3, [pc, #52]	; (69bc <opcode_0x20()+0x18c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	2b01      	cmp	r3, #1
    698a:	d98f      	bls.n	68ac <opcode_0x20()+0x7c>
    698c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    698e:	bf00      	nop
    6990:	2001888c 	.word	0x2001888c
    6994:	20004969 	.word	0x20004969
    6998:	20018888 	.word	0x20018888
    699c:	200188a6 	.word	0x200188a6
    69a0:	200188a1 	.word	0x200188a1
    69a4:	20004966 	.word	0x20004966
    69a8:	42004000 	.word	0x42004000
    69ac:	42008000 	.word	0x42008000
    69b0:	6dfffff3 	.word	0x6dfffff3
    69b4:	cff3efff 	.word	0xcff3efff
    69b8:	7fffff6f 	.word	0x7fffff6f
    69bc:	20018898 	.word	0x20018898

000069c0 <opcode_0x40()>:

// -------------------------------------------------
// 0x40 - RTI - Return from Interrupt
// -------------------------------------------------
uint16_t opcode_0x40() {
    69c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    69c2:	4d58      	ldr	r5, [pc, #352]	; (6b24 <opcode_0x40()+0x164>)
    69c4:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    69c6:	4c58      	ldr	r4, [pc, #352]	; (6b28 <opcode_0x40()+0x168>)
    69c8:	8828      	ldrh	r0, [r5, #0]
    69ca:	3001      	adds	r0, #1
    69cc:	b280      	uxth	r0, r0
    69ce:	f7fb fe4f 	bl	2670 <read_byte(unsigned short, bool)>
    69d2:	7820      	ldrb	r0, [r4, #0]
    69d4:	2100      	movs	r1, #0
    69d6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    69da:	f7fb fe49 	bl	2670 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    69de:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    69e0:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    69e2:	3301      	adds	r3, #1
    69e4:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    69e6:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    69ea:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    69ec:	f7fb fe40 	bl	2670 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    69f0:	7823      	ldrb	r3, [r4, #0]
    register_flags = pop();
    69f2:	4a4e      	ldr	r2, [pc, #312]	; (6b2c <opcode_0x40()+0x16c>)
    temp = read_byte(register_sp_fixed, false);
    69f4:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    69f6:	3301      	adds	r3, #1
    69f8:	7010      	strb	r0, [r2, #0]
    69fa:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    69fc:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    6a00:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    6a02:	f7fb fe35 	bl	2670 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    6a06:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    6a08:	4606      	mov	r6, r0
    6a0a:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    6a0c:	3301      	adds	r3, #1
    6a0e:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    6a10:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    6a14:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    6a16:	f7fb fe2b 	bl	2670 <read_byte(unsigned short, bool)>
    current_address = local_address;
    6a1a:	4b45      	ldr	r3, [pc, #276]	; (6b30 <opcode_0x40()+0x170>)
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl;
    6a1c:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    6a20:	b280      	uxth	r0, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6a22:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    6a26:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    6a28:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6a2a:	d376      	bcc.n	6b1a <opcode_0x40()+0x15a>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    6a2c:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    6a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6a34:	d305      	bcc.n	6a42 <opcode_0x40()+0x82>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    6a36:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    6a3a:	b29b      	uxth	r3, r3
    6a3c:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    6a40:	d36b      	bcc.n	6b1a <opcode_0x40()+0x15a>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6a42:	4b3c      	ldr	r3, [pc, #240]	; (6b34 <opcode_0x40()+0x174>)
        last_access_internal_RAM = 0;
    6a44:	2100      	movs	r1, #0
    6a46:	4a3c      	ldr	r2, [pc, #240]	; (6b38 <opcode_0x40()+0x178>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6a48:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    6a4a:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6a4c:	2b01      	cmp	r3, #1
    6a4e:	d005      	beq.n	6a5c <opcode_0x40()+0x9c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6a50:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6a54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    6a5c:	4b37      	ldr	r3, [pc, #220]	; (6b3c <opcode_0x40()+0x17c>)
    6a5e:	781b      	ldrb	r3, [r3, #0]
    6a60:	b94b      	cbnz	r3, 6a76 <opcode_0x40()+0xb6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    6a62:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6a66:	6813      	ldr	r3, [r2, #0]
    6a68:	04d9      	lsls	r1, r3, #19
    6a6a:	d4fc      	bmi.n	6a66 <opcode_0x40()+0xa6>
    while (CLK0) {}      // Wait for CLK0 to become low
    6a6c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6a70:	6813      	ldr	r3, [r2, #0]
    6a72:	04db      	lsls	r3, r3, #19
    6a74:	d5fc      	bpl.n	6a70 <opcode_0x40()+0xb0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    6a76:	4d32      	ldr	r5, [pc, #200]	; (6b40 <opcode_0x40()+0x180>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6a78:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    6a7c:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    6a7e:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6a80:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6a82:	4f30      	ldr	r7, [pc, #192]	; (6b44 <opcode_0x40()+0x184>)
    6a84:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6a88:	4b2f      	ldr	r3, [pc, #188]	; (6b48 <opcode_0x40()+0x188>)
    6a8a:	6832      	ldr	r2, [r6, #0]
    6a8c:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6a8e:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6a90:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6a94:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6a98:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6a9a:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    6a9e:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6aa2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6aa4:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6aa8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6aac:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6aae:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6ab0:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6ab2:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6ab4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6ab8:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6abe:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6ac0:	4a22      	ldr	r2, [pc, #136]	; (6b4c <opcode_0x40()+0x18c>)
    6ac2:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6ac4:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6ac6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6ac8:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6aca:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6ace:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6ad2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    6ad6:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    6ad8:	0342      	lsls	r2, r0, #13
    6ada:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    6ade:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6ae0:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6ae2:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6aea:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6aec:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6aee:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6af2:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    6af6:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6af8:	683a      	ldr	r2, [r7, #0]
    6afa:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6afe:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b00:	4a13      	ldr	r2, [pc, #76]	; (6b50 <opcode_0x40()+0x190>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6b02:	4333      	orrs	r3, r6
    6b04:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6b06:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b08:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6b0e:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6b10:	4323      	orrs	r3, r4
    6b12:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6b14:	430b      	orrs	r3, r1
    6b16:	602b      	str	r3, [r5, #0]
    start_read(register_pc, true);
    return(register_pc);
}
    6b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6b1a:	4b0e      	ldr	r3, [pc, #56]	; (6b54 <opcode_0x40()+0x194>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    6b1c:	781b      	ldrb	r3, [r3, #0]
    6b1e:	2b01      	cmp	r3, #1
    6b20:	d98f      	bls.n	6a42 <opcode_0x40()+0x82>
    6b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b24:	2001888c 	.word	0x2001888c
    6b28:	20004969 	.word	0x20004969
    6b2c:	20004968 	.word	0x20004968
    6b30:	20018888 	.word	0x20018888
    6b34:	200188a6 	.word	0x200188a6
    6b38:	200188a1 	.word	0x200188a1
    6b3c:	20004966 	.word	0x20004966
    6b40:	42004000 	.word	0x42004000
    6b44:	42008000 	.word	0x42008000
    6b48:	6dfffff3 	.word	0x6dfffff3
    6b4c:	cff3efff 	.word	0xcff3efff
    6b50:	7fffff6f 	.word	0x7fffff6f
    6b54:	20018898 	.word	0x20018898

00006b58 <opcode_0x60()>:

// -------------------------------------------------
// 0x60 - RTS - Return from Subroutine
// -------------------------------------------------
uint16_t opcode_0x60() {
    6b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    6b5a:	4d55      	ldr	r5, [pc, #340]	; (6cb0 <opcode_0x60()+0x158>)
    6b5c:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate(1);
    read_byte(register_sp_fixed, false);
    6b5e:	4e55      	ldr	r6, [pc, #340]	; (6cb4 <opcode_0x60()+0x15c>)
    6b60:	8828      	ldrh	r0, [r5, #0]
    6b62:	3001      	adds	r0, #1
    6b64:	b280      	uxth	r0, r0
    6b66:	f7fb fd83 	bl	2670 <read_byte(unsigned short, bool)>
    6b6a:	7830      	ldrb	r0, [r6, #0]
    6b6c:	2100      	movs	r1, #0
    6b6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6b72:	f7fb fd7d 	bl	2670 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    6b76:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    6b78:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    6b7a:	3301      	adds	r3, #1
    6b7c:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    6b7e:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    6b82:	7033      	strb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    6b84:	f7fb fd74 	bl	2670 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    6b88:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    6b8a:	4604      	mov	r4, r0
    6b8c:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    6b8e:	1c58      	adds	r0, r3, #1
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl + 1;
    6b90:	3401      	adds	r4, #1
    6b92:	b2c0      	uxtb	r0, r0
    6b94:	7030      	strb	r0, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    6b96:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6b9a:	f7fb fd69 	bl	2670 <read_byte(unsigned short, bool)>
    read_byte(register_pc, false);
    6b9e:	2100      	movs	r1, #0
    register_pc = pch + pcl + 1;
    6ba0:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    6ba4:	b280      	uxth	r0, r0
    6ba6:	8028      	strh	r0, [r5, #0]
    read_byte(register_pc, false);
    6ba8:	f7fb fd62 	bl	2670 <read_byte(unsigned short, bool)>
    start_read(register_pc, true);
    6bac:	8828      	ldrh	r0, [r5, #0]
    current_address = local_address;
    6bae:	4b42      	ldr	r3, [pc, #264]	; (6cb8 <opcode_0x60()+0x160>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6bb0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
    6bb4:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6bb6:	d376      	bcc.n	6ca6 <opcode_0x60()+0x14e>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    6bb8:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    6bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6bc0:	d305      	bcc.n	6bce <opcode_0x60()+0x76>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    6bc2:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    6bc6:	b29b      	uxth	r3, r3
    6bc8:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    6bcc:	d36b      	bcc.n	6ca6 <opcode_0x60()+0x14e>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6bce:	4b3b      	ldr	r3, [pc, #236]	; (6cbc <opcode_0x60()+0x164>)
        last_access_internal_RAM = 0;
    6bd0:	2100      	movs	r1, #0
    6bd2:	4a3b      	ldr	r2, [pc, #236]	; (6cc0 <opcode_0x60()+0x168>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6bd4:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    6bd6:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    6bd8:	2b01      	cmp	r3, #1
    6bda:	d005      	beq.n	6be8 <opcode_0x60()+0x90>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    6bdc:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    6be0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    6be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    6be8:	4b36      	ldr	r3, [pc, #216]	; (6cc4 <opcode_0x60()+0x16c>)
    6bea:	781b      	ldrb	r3, [r3, #0]
    6bec:	b94b      	cbnz	r3, 6c02 <opcode_0x60()+0xaa>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    6bee:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6bf2:	6813      	ldr	r3, [r2, #0]
    6bf4:	04d9      	lsls	r1, r3, #19
    6bf6:	d4fc      	bmi.n	6bf2 <opcode_0x60()+0x9a>
    while (CLK0) {}      // Wait for CLK0 to become low
    6bf8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    6bfc:	6813      	ldr	r3, [r2, #0]
    6bfe:	04db      	lsls	r3, r3, #19
    6c00:	d5fc      	bpl.n	6bfc <opcode_0x60()+0xa4>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    6c02:	4d31      	ldr	r5, [pc, #196]	; (6cc8 <opcode_0x60()+0x170>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c04:	f04f 4684 	mov.w	r6, #1107296256	; 0x42000000
    6c08:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    6c0a:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6c0c:	06c1      	lsls	r1, r0, #27
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c0e:	4f2f      	ldr	r7, [pc, #188]	; (6ccc <opcode_0x60()+0x174>)
    6c10:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c14:	4b2e      	ldr	r3, [pc, #184]	; (6cd0 <opcode_0x60()+0x178>)
    6c16:	6832      	ldr	r2, [r6, #0]
    6c18:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6c1a:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6c1c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    6c20:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6c24:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    6c26:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    6c2a:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6c2e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    6c30:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6c34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6c38:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6c3a:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    6c3c:	6033      	str	r3, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6c3e:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6c40:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c44:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    6c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6c4a:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c4c:	4a21      	ldr	r2, [pc, #132]	; (6cd4 <opcode_0x60()+0x17c>)
    6c4e:	4032      	ands	r2, r6
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6c50:	0406      	lsls	r6, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    6c52:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6c54:	0542      	lsls	r2, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6c56:	f406 2c00 	and.w	ip, r6, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6c5a:	f406 2680 	and.w	r6, r6, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    6c5e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    6c62:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    6c64:	0342      	lsls	r2, r0, #13
    6c66:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    6c6a:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6c6c:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6c6e:	ea42 020c 	orr.w	r2, r2, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    6c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    6c76:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6c78:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c7a:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6c7e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    6c82:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c84:	683a      	ldr	r2, [r7, #0]
    6c86:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    6c8a:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c8c:	4a12      	ldr	r2, [pc, #72]	; (6cd8 <opcode_0x60()+0x180>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    6c8e:	4333      	orrs	r3, r6
    6c90:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6c92:	0903      	lsrs	r3, r0, #4
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c94:	682e      	ldr	r6, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    6c9a:	4032      	ands	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    6c9c:	4323      	orrs	r3, r4
    6c9e:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    6ca0:	430b      	orrs	r3, r1
    6ca2:	602b      	str	r3, [r5, #0]
    return(register_pc);
}
    6ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    6ca6:	4b0d      	ldr	r3, [pc, #52]	; (6cdc <opcode_0x60()+0x184>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    6ca8:	781b      	ldrb	r3, [r3, #0]
    6caa:	2b01      	cmp	r3, #1
    6cac:	d98f      	bls.n	6bce <opcode_0x60()+0x76>
    6cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6cb0:	2001888c 	.word	0x2001888c
    6cb4:	20004969 	.word	0x20004969
    6cb8:	20018888 	.word	0x20018888
    6cbc:	200188a6 	.word	0x200188a6
    6cc0:	200188a1 	.word	0x200188a1
    6cc4:	20004966 	.word	0x20004966
    6cc8:	42004000 	.word	0x42004000
    6ccc:	42008000 	.word	0x42008000
    6cd0:	6dfffff3 	.word	0x6dfffff3
    6cd4:	cff3efff 	.word	0xcff3efff
    6cd8:	7fffff6f 	.word	0x7fffff6f
    6cdc:	20018898 	.word	0x20018898

00006ce0 <opcode_0x07()>:
    register_a = register_a | local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x07() {
    6ce0:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    6ce2:	4d18      	ldr	r5, [pc, #96]	; (6d44 <opcode_0x07()+0x64>)
    6ce4:	b083      	sub	sp, #12
    6ce6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6ce8:	4c17      	ldr	r4, [pc, #92]	; (6d48 <opcode_0x07()+0x68>)
    return read_byte(register_pc+offset, false);
    6cea:	8828      	ldrh	r0, [r5, #0]
    6cec:	3001      	adds	r0, #1
    6cee:	b280      	uxth	r0, r0
    6cf0:	f7fb fcbe 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    6cf4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    6cf6:	b280      	uxth	r0, r0
    6cf8:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    6cfa:	f7fb fcb9 	bl	2670 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6cfe:	4a13      	ldr	r2, [pc, #76]	; (6d4c <opcode_0x07()+0x6c>)
    6d00:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6d02:	ea4f 0140 	mov.w	r1, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d06:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    6d08:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d0a:	bf4c      	ite	mi
    6d0c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6d10:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    6d14:	9101      	str	r1, [sp, #4]
    6d16:	7013      	strb	r3, [r2, #0]
    6d18:	4b0d      	ldr	r3, [pc, #52]	; (6d50 <opcode_0x07()+0x70>)
    6d1a:	7818      	ldrb	r0, [r3, #0]
    6d1c:	4308      	orrs	r0, r1
    6d1e:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    6d20:	f7fb ff6a 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    6d24:	9901      	ldr	r1, [sp, #4]
    6d26:	8820      	ldrh	r0, [r4, #0]
    6d28:	f7fb fe5e 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6d2c:	8820      	ldrh	r0, [r4, #0]
    6d2e:	9901      	ldr	r1, [sp, #4]
    6d30:	f7fb fe5a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x07].length);
    6d34:	4a07      	ldr	r2, [pc, #28]	; (6d54 <opcode_0x07()+0x74>)
    6d36:	882b      	ldrh	r3, [r5, #0]
    6d38:	f892 019d 	ldrb.w	r0, [r2, #413]	; 0x19d
    6d3c:	4418      	add	r0, r3
} // 0x07 - SLO - ZeroPage
    6d3e:	b280      	uxth	r0, r0
    6d40:	b003      	add	sp, #12
    6d42:	bd30      	pop	{r4, r5, pc}
    6d44:	2001888c 	.word	0x2001888c
    6d48:	2001888a 	.word	0x2001888a
    6d4c:	20004968 	.word	0x20004968
    6d50:	200188a3 	.word	0x200188a3
    6d54:	20015418 	.word	0x20015418

00006d58 <opcode_0x17()>:
uint16_t opcode_0x17() {
    6d58:	b530      	push	{r4, r5, lr}
    6d5a:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d5c:	4c18      	ldr	r4, [pc, #96]	; (6dc0 <opcode_0x17()+0x68>)
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage_X()));
    6d5e:	f7fb ff7f 	bl	2c60 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d62:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6d64:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6d68:	4d16      	ldr	r5, [pc, #88]	; (6dc4 <opcode_0x17()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d6a:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6d6c:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6d6e:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6d70:	bf4c      	ite	mi
    6d72:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6d76:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    6d7a:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6d7c:	0610      	lsls	r0, r2, #24
    6d7e:	702a      	strb	r2, [r5, #0]
    6d80:	d418      	bmi.n	6db4 <opcode_0x17()+0x5c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6d86:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6d88:	b9b2      	cbnz	r2, 6db8 <opcode_0x17()+0x60>
    6d8a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6d8e:	4d0e      	ldr	r5, [pc, #56]	; (6dc8 <opcode_0x17()+0x70>)
    6d90:	7023      	strb	r3, [r4, #0]
    6d92:	8828      	ldrh	r0, [r5, #0]
    6d94:	9101      	str	r1, [sp, #4]
    6d96:	f7fb fe27 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6d9a:	8828      	ldrh	r0, [r5, #0]
    6d9c:	9901      	ldr	r1, [sp, #4]
    6d9e:	f7fb fe23 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x17].length);
    6da2:	4a0a      	ldr	r2, [pc, #40]	; (6dcc <opcode_0x17()+0x74>)
    6da4:	4b0a      	ldr	r3, [pc, #40]	; (6dd0 <opcode_0x17()+0x78>)
    6da6:	f892 04dd 	ldrb.w	r0, [r2, #1245]	; 0x4dd
    6daa:	881b      	ldrh	r3, [r3, #0]
    6dac:	4418      	add	r0, r3
} // 0x17 - SLO - ZeroPage , X
    6dae:	b280      	uxth	r0, r0
    6db0:	b003      	add	sp, #12
    6db2:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6db8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6dbc:	e7e7      	b.n	6d8e <opcode_0x17()+0x36>
    6dbe:	bf00      	nop
    6dc0:	20004968 	.word	0x20004968
    6dc4:	200188a3 	.word	0x200188a3
    6dc8:	2001888a 	.word	0x2001888a
    6dcc:	20015418 	.word	0x20015418
    6dd0:	2001888c 	.word	0x2001888c

00006dd4 <opcode_0x03()>:
uint16_t opcode_0x03() {
    6dd4:	b530      	push	{r4, r5, lr}
    6dd6:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6dd8:	4c18      	ldr	r4, [pc, #96]	; (6e3c <opcode_0x03()+0x68>)
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_X()));
    6dda:	f7fb fffd 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6dde:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6de0:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6de4:	4d16      	ldr	r5, [pc, #88]	; (6e40 <opcode_0x03()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6de6:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6de8:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6dea:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6dec:	bf4c      	ite	mi
    6dee:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6df2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    6df6:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6df8:	0610      	lsls	r0, r2, #24
    6dfa:	702a      	strb	r2, [r5, #0]
    6dfc:	d418      	bmi.n	6e30 <opcode_0x03()+0x5c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6e02:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6e04:	b9b2      	cbnz	r2, 6e34 <opcode_0x03()+0x60>
    6e06:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6e0a:	4d0e      	ldr	r5, [pc, #56]	; (6e44 <opcode_0x03()+0x70>)
    6e0c:	7023      	strb	r3, [r4, #0]
    6e0e:	8828      	ldrh	r0, [r5, #0]
    6e10:	9101      	str	r1, [sp, #4]
    6e12:	f7fb fde9 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6e16:	8828      	ldrh	r0, [r5, #0]
    6e18:	9901      	ldr	r1, [sp, #4]
    6e1a:	f7fb fde5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x03].length);
    6e1e:	4a0a      	ldr	r2, [pc, #40]	; (6e48 <opcode_0x03()+0x74>)
    6e20:	4b0a      	ldr	r3, [pc, #40]	; (6e4c <opcode_0x03()+0x78>)
    6e22:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
    6e26:	881b      	ldrh	r3, [r3, #0]
    6e28:	4418      	add	r0, r3
} // 0x03 - SLO - Indexed Indirect X
    6e2a:	b280      	uxth	r0, r0
    6e2c:	b003      	add	sp, #12
    6e2e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6e34:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6e38:	e7e7      	b.n	6e0a <opcode_0x03()+0x36>
    6e3a:	bf00      	nop
    6e3c:	20004968 	.word	0x20004968
    6e40:	200188a3 	.word	0x200188a3
    6e44:	2001888a 	.word	0x2001888a
    6e48:	20015418 	.word	0x20015418
    6e4c:	2001888c 	.word	0x2001888c

00006e50 <opcode_0x13()>:
uint16_t opcode_0x13() {
    6e50:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    6e52:	2001      	movs	r0, #1
uint16_t opcode_0x13() {
    6e54:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    6e56:	f7fb ffe9 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e5a:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6e5c:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6e60:	4d16      	ldr	r5, [pc, #88]	; (6ebc <opcode_0x13()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e62:	4c17      	ldr	r4, [pc, #92]	; (6ec0 <opcode_0x13()+0x70>)
    register_a = register_a | local_data;
    6e64:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6e66:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e68:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6e6a:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6e6e:	bf4c      	ite	mi
    6e70:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6e74:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6e78:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    6e7a:	702a      	strb	r2, [r5, #0]
    6e7c:	d418      	bmi.n	6eb0 <opcode_0x13()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6e82:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6e84:	b9b2      	cbnz	r2, 6eb4 <opcode_0x13()+0x64>
    6e86:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6e8a:	4d0e      	ldr	r5, [pc, #56]	; (6ec4 <opcode_0x13()+0x74>)
    6e8c:	7023      	strb	r3, [r4, #0]
    6e8e:	8828      	ldrh	r0, [r5, #0]
    6e90:	9101      	str	r1, [sp, #4]
    6e92:	f7fb fda9 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6e96:	8828      	ldrh	r0, [r5, #0]
    6e98:	9901      	ldr	r1, [sp, #4]
    6e9a:	f7fb fda5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x13].length);
    6e9e:	4a0a      	ldr	r2, [pc, #40]	; (6ec8 <opcode_0x13()+0x78>)
    6ea0:	4b0a      	ldr	r3, [pc, #40]	; (6ecc <opcode_0x13()+0x7c>)
    6ea2:	f892 040d 	ldrb.w	r0, [r2, #1037]	; 0x40d
    6ea6:	881b      	ldrh	r3, [r3, #0]
    6ea8:	4418      	add	r0, r3
} // 0x13 - SLO - Indirect Indexed  Y
    6eaa:	b280      	uxth	r0, r0
    6eac:	b003      	add	sp, #12
    6eae:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6eb4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6eb8:	e7e7      	b.n	6e8a <opcode_0x13()+0x3a>
    6eba:	bf00      	nop
    6ebc:	200188a3 	.word	0x200188a3
    6ec0:	20004968 	.word	0x20004968
    6ec4:	2001888a 	.word	0x2001888a
    6ec8:	20015418 	.word	0x20015418
    6ecc:	2001888c 	.word	0x2001888c

00006ed0 <opcode_0x0F()>:
uint16_t opcode_0x0F() {
    6ed0:	b530      	push	{r4, r5, lr}
    6ed2:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6ed4:	4c18      	ldr	r4, [pc, #96]	; (6f38 <opcode_0x0F()+0x68>)
    Double_WriteBack(Calculate_SLO(Fetch_Absolute()));
    6ed6:	f7fb ff03 	bl	2ce0 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6eda:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6edc:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6ee0:	4d16      	ldr	r5, [pc, #88]	; (6f3c <opcode_0x0F()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6ee2:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6ee4:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6ee6:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6ee8:	bf4c      	ite	mi
    6eea:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6eee:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    6ef2:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6ef4:	0610      	lsls	r0, r2, #24
    6ef6:	702a      	strb	r2, [r5, #0]
    6ef8:	d418      	bmi.n	6f2c <opcode_0x0F()+0x5c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6efe:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6f00:	b9b2      	cbnz	r2, 6f30 <opcode_0x0F()+0x60>
    6f02:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6f06:	4d0e      	ldr	r5, [pc, #56]	; (6f40 <opcode_0x0F()+0x70>)
    6f08:	7023      	strb	r3, [r4, #0]
    6f0a:	8828      	ldrh	r0, [r5, #0]
    6f0c:	9101      	str	r1, [sp, #4]
    6f0e:	f7fb fd6b 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6f12:	8828      	ldrh	r0, [r5, #0]
    6f14:	9901      	ldr	r1, [sp, #4]
    6f16:	f7fb fd67 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x0F].length);
    6f1a:	4a0a      	ldr	r2, [pc, #40]	; (6f44 <opcode_0x0F()+0x74>)
    6f1c:	4b0a      	ldr	r3, [pc, #40]	; (6f48 <opcode_0x0F()+0x78>)
    6f1e:	f892 033d 	ldrb.w	r0, [r2, #829]	; 0x33d
    6f22:	881b      	ldrh	r3, [r3, #0]
    6f24:	4418      	add	r0, r3
} // 0x0F - SLO - Absolute
    6f26:	b280      	uxth	r0, r0
    6f28:	b003      	add	sp, #12
    6f2a:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6f30:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6f34:	e7e7      	b.n	6f06 <opcode_0x0F()+0x36>
    6f36:	bf00      	nop
    6f38:	20004968 	.word	0x20004968
    6f3c:	200188a3 	.word	0x200188a3
    6f40:	2001888a 	.word	0x2001888a
    6f44:	20015418 	.word	0x20015418
    6f48:	2001888c 	.word	0x2001888c

00006f4c <opcode_0x1F()>:
uint16_t opcode_0x1F() {
    6f4c:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    6f4e:	2001      	movs	r0, #1
uint16_t opcode_0x1F() {
    6f50:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    6f52:	f7fb fee1 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6f56:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6f58:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6f5c:	4d16      	ldr	r5, [pc, #88]	; (6fb8 <opcode_0x1F()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6f5e:	4c17      	ldr	r4, [pc, #92]	; (6fbc <opcode_0x1F()+0x70>)
    register_a = register_a | local_data;
    6f60:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6f62:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6f64:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6f66:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6f6a:	bf4c      	ite	mi
    6f6c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6f70:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6f74:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    6f76:	702a      	strb	r2, [r5, #0]
    6f78:	d418      	bmi.n	6fac <opcode_0x1F()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6f7e:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    6f80:	b9b2      	cbnz	r2, 6fb0 <opcode_0x1F()+0x64>
    6f82:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    6f86:	4d0e      	ldr	r5, [pc, #56]	; (6fc0 <opcode_0x1F()+0x74>)
    6f88:	7023      	strb	r3, [r4, #0]
    6f8a:	8828      	ldrh	r0, [r5, #0]
    6f8c:	9101      	str	r1, [sp, #4]
    6f8e:	f7fb fd2b 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    6f92:	8828      	ldrh	r0, [r5, #0]
    6f94:	9901      	ldr	r1, [sp, #4]
    6f96:	f7fb fd27 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1F].length);
    6f9a:	4a0a      	ldr	r2, [pc, #40]	; (6fc4 <opcode_0x1F()+0x78>)
    6f9c:	4b0a      	ldr	r3, [pc, #40]	; (6fc8 <opcode_0x1F()+0x7c>)
    6f9e:	f892 067d 	ldrb.w	r0, [r2, #1661]	; 0x67d
    6fa2:	881b      	ldrh	r3, [r3, #0]
    6fa4:	4418      	add	r0, r3
} // 0x1F - SLO - Absolute , X
    6fa6:	b280      	uxth	r0, r0
    6fa8:	b003      	add	sp, #12
    6faa:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    6fb0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6fb4:	e7e7      	b.n	6f86 <opcode_0x1F()+0x3a>
    6fb6:	bf00      	nop
    6fb8:	200188a3 	.word	0x200188a3
    6fbc:	20004968 	.word	0x20004968
    6fc0:	2001888a 	.word	0x2001888a
    6fc4:	20015418 	.word	0x20015418
    6fc8:	2001888c 	.word	0x2001888c

00006fcc <opcode_0x1B()>:
uint16_t opcode_0x1B() {
    6fcc:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    6fce:	2001      	movs	r0, #1
uint16_t opcode_0x1B() {
    6fd0:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    6fd2:	f7fb fed1 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6fd6:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    6fd8:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    6fdc:	4d16      	ldr	r5, [pc, #88]	; (7038 <opcode_0x1B()+0x6c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6fde:	4c17      	ldr	r4, [pc, #92]	; (703c <opcode_0x1B()+0x70>)
    register_a = register_a | local_data;
    6fe0:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    6fe2:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6fe4:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    6fe6:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    6fea:	bf4c      	ite	mi
    6fec:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    6ff0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    6ff4:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    6ff6:	702a      	strb	r2, [r5, #0]
    6ff8:	d418      	bmi.n	702c <opcode_0x1B()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    6ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6ffe:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7000:	b9b2      	cbnz	r2, 7030 <opcode_0x1B()+0x64>
    7002:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7006:	4d0e      	ldr	r5, [pc, #56]	; (7040 <opcode_0x1B()+0x74>)
    7008:	7023      	strb	r3, [r4, #0]
    700a:	8828      	ldrh	r0, [r5, #0]
    700c:	9101      	str	r1, [sp, #4]
    700e:	f7fb fceb 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7012:	8828      	ldrh	r0, [r5, #0]
    7014:	9901      	ldr	r1, [sp, #4]
    7016:	f7fb fce7 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x1B].length);
    701a:	4a0a      	ldr	r2, [pc, #40]	; (7044 <opcode_0x1B()+0x78>)
    701c:	4b0a      	ldr	r3, [pc, #40]	; (7048 <opcode_0x1B()+0x7c>)
    701e:	f892 05ad 	ldrb.w	r0, [r2, #1453]	; 0x5ad
    7022:	881b      	ldrh	r3, [r3, #0]
    7024:	4418      	add	r0, r3
} // 0x1B - SLO - Absolute , Y
    7026:	b280      	uxth	r0, r0
    7028:	b003      	add	sp, #12
    702a:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    702c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7030:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7034:	e7e7      	b.n	7006 <opcode_0x1B()+0x3a>
    7036:	bf00      	nop
    7038:	200188a3 	.word	0x200188a3
    703c:	20004968 	.word	0x20004968
    7040:	2001888a 	.word	0x2001888a
    7044:	20015418 	.word	0x20015418
    7048:	2001888c 	.word	0x2001888c

0000704c <opcode_0x27()>:
    register_a = register_a & local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x27() {
    704c:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    704e:	4d1a      	ldr	r5, [pc, #104]	; (70b8 <opcode_0x27()+0x6c>)
    7050:	b083      	sub	sp, #12
    7052:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7054:	4c19      	ldr	r4, [pc, #100]	; (70bc <opcode_0x27()+0x70>)
    return read_byte(register_pc+offset, false);
    7056:	8828      	ldrh	r0, [r5, #0]
    7058:	3001      	adds	r0, #1
    705a:	b280      	uxth	r0, r0
    705c:	f7fb fb08 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    7060:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7062:	b280      	uxth	r0, r0
    7064:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    7066:	f7fb fb03 	bl	2670 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    706a:	4915      	ldr	r1, [pc, #84]	; (70c0 <opcode_0x27()+0x74>)
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    706c:	f010 0f80 	tst.w	r0, #128	; 0x80
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7070:	780a      	ldrb	r2, [r1, #0]
    7072:	f002 0301 	and.w	r3, r2, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7076:	bf14      	ite	ne
    7078:	f042 0201 	orrne.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    707c:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    7080:	ea43 0040 	orr.w	r0, r3, r0, lsl #1
    register_a = register_a & local_data;
    7084:	4b0f      	ldr	r3, [pc, #60]	; (70c4 <opcode_0x27()+0x78>)
    7086:	700a      	strb	r2, [r1, #0]
    7088:	781a      	ldrb	r2, [r3, #0]
    local_data = (local_data << 1) | old_carry_flag;
    708a:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    708c:	4010      	ands	r0, r2
    local_data = (local_data << 1) | old_carry_flag;
    708e:	9101      	str	r1, [sp, #4]
    register_a = register_a & local_data;
    7090:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    7092:	f7fb fdb1 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    7096:	9901      	ldr	r1, [sp, #4]
    7098:	8820      	ldrh	r0, [r4, #0]
    709a:	f7fb fca5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    709e:	8820      	ldrh	r0, [r4, #0]
    70a0:	9901      	ldr	r1, [sp, #4]
    70a2:	f7fb fca1 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x27].length);
    70a6:	4a08      	ldr	r2, [pc, #32]	; (70c8 <opcode_0x27()+0x7c>)
    70a8:	882b      	ldrh	r3, [r5, #0]
    70aa:	f892 081d 	ldrb.w	r0, [r2, #2077]	; 0x81d
    70ae:	4418      	add	r0, r3
} // 0x27 - RLA - ZeroPage
    70b0:	b280      	uxth	r0, r0
    70b2:	b003      	add	sp, #12
    70b4:	bd30      	pop	{r4, r5, pc}
    70b6:	bf00      	nop
    70b8:	2001888c 	.word	0x2001888c
    70bc:	2001888a 	.word	0x2001888a
    70c0:	20004968 	.word	0x20004968
    70c4:	200188a3 	.word	0x200188a3
    70c8:	20015418 	.word	0x20015418

000070cc <opcode_0x37()>:
uint16_t opcode_0x37() {
    70cc:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    70ce:	4d19      	ldr	r5, [pc, #100]	; (7134 <opcode_0x37()+0x68>)
uint16_t opcode_0x37() {
    70d0:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage_X()));
    70d2:	f7fb fdc5 	bl	2c60 <Fetch_ZeroPage_X()>
    register_a = register_a & local_data;
    70d6:	4c18      	ldr	r4, [pc, #96]	; (7138 <opcode_0x37()+0x6c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    70d8:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    70da:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    70dc:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    70e0:	bf4c      	ite	mi
    70e2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    70e6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    70ea:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    70ee:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    70f0:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    70f2:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    70f4:	0602      	lsls	r2, r0, #24
    70f6:	7020      	strb	r0, [r4, #0]
    70f8:	d417      	bmi.n	712a <opcode_0x37()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    70fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    70fe:	b9b0      	cbnz	r0, 712e <opcode_0x37()+0x62>
    7100:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7104:	4c0d      	ldr	r4, [pc, #52]	; (713c <opcode_0x37()+0x70>)
    7106:	702b      	strb	r3, [r5, #0]
    7108:	8820      	ldrh	r0, [r4, #0]
    710a:	9101      	str	r1, [sp, #4]
    710c:	f7fb fc6c 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7110:	8820      	ldrh	r0, [r4, #0]
    7112:	9901      	ldr	r1, [sp, #4]
    7114:	f7fb fc68 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x37].length);
    7118:	4a09      	ldr	r2, [pc, #36]	; (7140 <opcode_0x37()+0x74>)
    711a:	4b0a      	ldr	r3, [pc, #40]	; (7144 <opcode_0x37()+0x78>)
    711c:	f892 0b5d 	ldrb.w	r0, [r2, #2909]	; 0xb5d
    7120:	881b      	ldrh	r3, [r3, #0]
    7122:	4418      	add	r0, r3
} // 0x37 - RLA - ZeroPage , X
    7124:	b280      	uxth	r0, r0
    7126:	b003      	add	sp, #12
    7128:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    712a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    712e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7132:	e7e7      	b.n	7104 <opcode_0x37()+0x38>
    7134:	20004968 	.word	0x20004968
    7138:	200188a3 	.word	0x200188a3
    713c:	2001888a 	.word	0x2001888a
    7140:	20015418 	.word	0x20015418
    7144:	2001888c 	.word	0x2001888c

00007148 <opcode_0x23()>:
uint16_t opcode_0x23() {
    7148:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    714a:	4d19      	ldr	r5, [pc, #100]	; (71b0 <opcode_0x23()+0x68>)
uint16_t opcode_0x23() {
    714c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_X()));
    714e:	f7fb fe43 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    register_a = register_a & local_data;
    7152:	4c18      	ldr	r4, [pc, #96]	; (71b4 <opcode_0x23()+0x6c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7154:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7156:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7158:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    715c:	bf4c      	ite	mi
    715e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7162:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    7166:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    716a:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    716c:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    716e:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7170:	0602      	lsls	r2, r0, #24
    7172:	7020      	strb	r0, [r4, #0]
    7174:	d417      	bmi.n	71a6 <opcode_0x23()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    717a:	b9b0      	cbnz	r0, 71aa <opcode_0x23()+0x62>
    717c:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    7180:	4c0d      	ldr	r4, [pc, #52]	; (71b8 <opcode_0x23()+0x70>)
    7182:	702b      	strb	r3, [r5, #0]
    7184:	8820      	ldrh	r0, [r4, #0]
    7186:	9101      	str	r1, [sp, #4]
    7188:	f7fb fc2e 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    718c:	8820      	ldrh	r0, [r4, #0]
    718e:	9901      	ldr	r1, [sp, #4]
    7190:	f7fb fc2a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x23].length);
    7194:	4a09      	ldr	r2, [pc, #36]	; (71bc <opcode_0x23()+0x74>)
    7196:	4b0a      	ldr	r3, [pc, #40]	; (71c0 <opcode_0x23()+0x78>)
    7198:	f892 074d 	ldrb.w	r0, [r2, #1869]	; 0x74d
    719c:	881b      	ldrh	r3, [r3, #0]
    719e:	4418      	add	r0, r3
} // 0x23 - RLA - Indexed Indirect X
    71a0:	b280      	uxth	r0, r0
    71a2:	b003      	add	sp, #12
    71a4:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    71a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    71aa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    71ae:	e7e7      	b.n	7180 <opcode_0x23()+0x38>
    71b0:	20004968 	.word	0x20004968
    71b4:	200188a3 	.word	0x200188a3
    71b8:	2001888a 	.word	0x2001888a
    71bc:	20015418 	.word	0x20015418
    71c0:	2001888c 	.word	0x2001888c

000071c4 <opcode_0x33()>:
uint16_t opcode_0x33() {
    71c4:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    71c6:	4d1a      	ldr	r5, [pc, #104]	; (7230 <opcode_0x33()+0x6c>)
uint16_t opcode_0x33() {
    71c8:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    71ca:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    71cc:	4c19      	ldr	r4, [pc, #100]	; (7234 <opcode_0x33()+0x70>)
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    71ce:	f7fb fe2d 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    71d2:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    71d4:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    71d6:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    71da:	bf4c      	ite	mi
    71dc:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    71e0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    71e4:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    71e8:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    71ea:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    71ec:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    71ee:	0602      	lsls	r2, r0, #24
    71f0:	7020      	strb	r0, [r4, #0]
    71f2:	d417      	bmi.n	7224 <opcode_0x33()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    71f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    71f8:	b9b0      	cbnz	r0, 7228 <opcode_0x33()+0x64>
    71fa:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    71fe:	4c0e      	ldr	r4, [pc, #56]	; (7238 <opcode_0x33()+0x74>)
    7200:	702b      	strb	r3, [r5, #0]
    7202:	8820      	ldrh	r0, [r4, #0]
    7204:	9101      	str	r1, [sp, #4]
    7206:	f7fb fbef 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    720a:	8820      	ldrh	r0, [r4, #0]
    720c:	9901      	ldr	r1, [sp, #4]
    720e:	f7fb fbeb 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x33].length);
    7212:	4a0a      	ldr	r2, [pc, #40]	; (723c <opcode_0x33()+0x78>)
    7214:	4b0a      	ldr	r3, [pc, #40]	; (7240 <opcode_0x33()+0x7c>)
    7216:	f892 0a8d 	ldrb.w	r0, [r2, #2701]	; 0xa8d
    721a:	881b      	ldrh	r3, [r3, #0]
    721c:	4418      	add	r0, r3
} // 0x33 - RLA - Indirect Indexed  Y
    721e:	b280      	uxth	r0, r0
    7220:	b003      	add	sp, #12
    7222:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7228:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    722c:	e7e7      	b.n	71fe <opcode_0x33()+0x3a>
    722e:	bf00      	nop
    7230:	20004968 	.word	0x20004968
    7234:	200188a3 	.word	0x200188a3
    7238:	2001888a 	.word	0x2001888a
    723c:	20015418 	.word	0x20015418
    7240:	2001888c 	.word	0x2001888c

00007244 <opcode_0x2F()>:
uint16_t opcode_0x2F() {
    7244:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7246:	4d19      	ldr	r5, [pc, #100]	; (72ac <opcode_0x2F()+0x68>)
uint16_t opcode_0x2F() {
    7248:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute()));
    724a:	f7fb fd49 	bl	2ce0 <Fetch_Absolute()>
    register_a = register_a & local_data;
    724e:	4c18      	ldr	r4, [pc, #96]	; (72b0 <opcode_0x2F()+0x6c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7250:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7252:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7254:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7258:	bf4c      	ite	mi
    725a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    725e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    7262:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    7266:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    7268:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    726a:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    726c:	0602      	lsls	r2, r0, #24
    726e:	7020      	strb	r0, [r4, #0]
    7270:	d417      	bmi.n	72a2 <opcode_0x2F()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7276:	b9b0      	cbnz	r0, 72a6 <opcode_0x2F()+0x62>
    7278:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    727c:	4c0d      	ldr	r4, [pc, #52]	; (72b4 <opcode_0x2F()+0x70>)
    727e:	702b      	strb	r3, [r5, #0]
    7280:	8820      	ldrh	r0, [r4, #0]
    7282:	9101      	str	r1, [sp, #4]
    7284:	f7fb fbb0 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7288:	8820      	ldrh	r0, [r4, #0]
    728a:	9901      	ldr	r1, [sp, #4]
    728c:	f7fb fbac 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x2F].length);
    7290:	4a09      	ldr	r2, [pc, #36]	; (72b8 <opcode_0x2F()+0x74>)
    7292:	4b0a      	ldr	r3, [pc, #40]	; (72bc <opcode_0x2F()+0x78>)
    7294:	f892 09bd 	ldrb.w	r0, [r2, #2493]	; 0x9bd
    7298:	881b      	ldrh	r3, [r3, #0]
    729a:	4418      	add	r0, r3
} // 0x2F - RLA - Absolute
    729c:	b280      	uxth	r0, r0
    729e:	b003      	add	sp, #12
    72a0:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    72a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    72a6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    72aa:	e7e7      	b.n	727c <opcode_0x2F()+0x38>
    72ac:	20004968 	.word	0x20004968
    72b0:	200188a3 	.word	0x200188a3
    72b4:	2001888a 	.word	0x2001888a
    72b8:	20015418 	.word	0x20015418
    72bc:	2001888c 	.word	0x2001888c

000072c0 <opcode_0x3F()>:
uint16_t opcode_0x3F() {
    72c0:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    72c2:	4d1a      	ldr	r5, [pc, #104]	; (732c <opcode_0x3F()+0x6c>)
uint16_t opcode_0x3F() {
    72c4:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    72c6:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    72c8:	4c19      	ldr	r4, [pc, #100]	; (7330 <opcode_0x3F()+0x70>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    72ca:	f7fb fd25 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    72ce:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    72d0:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    72d2:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    72d6:	bf4c      	ite	mi
    72d8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    72dc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    72e0:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    72e4:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    72e6:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    72e8:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    72ea:	0602      	lsls	r2, r0, #24
    72ec:	7020      	strb	r0, [r4, #0]
    72ee:	d417      	bmi.n	7320 <opcode_0x3F()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    72f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    72f4:	b9b0      	cbnz	r0, 7324 <opcode_0x3F()+0x64>
    72f6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    72fa:	4c0e      	ldr	r4, [pc, #56]	; (7334 <opcode_0x3F()+0x74>)
    72fc:	702b      	strb	r3, [r5, #0]
    72fe:	8820      	ldrh	r0, [r4, #0]
    7300:	9101      	str	r1, [sp, #4]
    7302:	f7fb fb71 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7306:	8820      	ldrh	r0, [r4, #0]
    7308:	9901      	ldr	r1, [sp, #4]
    730a:	f7fb fb6d 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3F].length);
    730e:	4a0a      	ldr	r2, [pc, #40]	; (7338 <opcode_0x3F()+0x78>)
    7310:	4b0a      	ldr	r3, [pc, #40]	; (733c <opcode_0x3F()+0x7c>)
    7312:	f892 0cfd 	ldrb.w	r0, [r2, #3325]	; 0xcfd
    7316:	881b      	ldrh	r3, [r3, #0]
    7318:	4418      	add	r0, r3
} // 0x3F - RLA - Absolute , X
    731a:	b280      	uxth	r0, r0
    731c:	b003      	add	sp, #12
    731e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7324:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7328:	e7e7      	b.n	72fa <opcode_0x3F()+0x3a>
    732a:	bf00      	nop
    732c:	20004968 	.word	0x20004968
    7330:	200188a3 	.word	0x200188a3
    7334:	2001888a 	.word	0x2001888a
    7338:	20015418 	.word	0x20015418
    733c:	2001888c 	.word	0x2001888c

00007340 <opcode_0x3B()>:
uint16_t opcode_0x3B() {
    7340:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7342:	4d1a      	ldr	r5, [pc, #104]	; (73ac <opcode_0x3B()+0x6c>)
uint16_t opcode_0x3B() {
    7344:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    7346:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    7348:	4c19      	ldr	r4, [pc, #100]	; (73b0 <opcode_0x3B()+0x70>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    734a:	f7fb fd15 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    734e:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7350:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    7352:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    7356:	bf4c      	ite	mi
    7358:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    735c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    7360:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    7364:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    7366:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    7368:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    736a:	0602      	lsls	r2, r0, #24
    736c:	7020      	strb	r0, [r4, #0]
    736e:	d417      	bmi.n	73a0 <opcode_0x3B()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7374:	b9b0      	cbnz	r0, 73a4 <opcode_0x3B()+0x64>
    7376:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    737a:	4c0e      	ldr	r4, [pc, #56]	; (73b4 <opcode_0x3B()+0x74>)
    737c:	702b      	strb	r3, [r5, #0]
    737e:	8820      	ldrh	r0, [r4, #0]
    7380:	9101      	str	r1, [sp, #4]
    7382:	f7fb fb31 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7386:	8820      	ldrh	r0, [r4, #0]
    7388:	9901      	ldr	r1, [sp, #4]
    738a:	f7fb fb2d 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x3B].length);
    738e:	4a0a      	ldr	r2, [pc, #40]	; (73b8 <opcode_0x3B()+0x78>)
    7390:	4b0a      	ldr	r3, [pc, #40]	; (73bc <opcode_0x3B()+0x7c>)
    7392:	f892 0c2d 	ldrb.w	r0, [r2, #3117]	; 0xc2d
    7396:	881b      	ldrh	r3, [r3, #0]
    7398:	4418      	add	r0, r3
} // 0x3B - RLA - Absolute , Y
    739a:	b280      	uxth	r0, r0
    739c:	b003      	add	sp, #12
    739e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    73a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    73a4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    73a8:	e7e7      	b.n	737a <opcode_0x3B()+0x3a>
    73aa:	bf00      	nop
    73ac:	20004968 	.word	0x20004968
    73b0:	200188a3 	.word	0x200188a3
    73b4:	2001888a 	.word	0x2001888a
    73b8:	20015418 	.word	0x20015418
    73bc:	2001888c 	.word	0x2001888c

000073c0 <opcode_0x47()>:
    register_a = register_a ^ local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
uint16_t opcode_0x47() {
    73c0:	b530      	push	{r4, r5, lr}
    return read_byte(register_pc+offset, false);
    73c2:	4d18      	ldr	r5, [pc, #96]	; (7424 <opcode_0x47()+0x64>)
    73c4:	b083      	sub	sp, #12
    73c6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    73c8:	4c17      	ldr	r4, [pc, #92]	; (7428 <opcode_0x47()+0x68>)
    return read_byte(register_pc+offset, false);
    73ca:	8828      	ldrh	r0, [r5, #0]
    73cc:	3001      	adds	r0, #1
    73ce:	b280      	uxth	r0, r0
    73d0:	f7fb f94e 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    73d4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    73d6:	b280      	uxth	r0, r0
    73d8:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    73da:	f7fb f949 	bl	2670 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    73de:	4a13      	ldr	r2, [pc, #76]	; (742c <opcode_0x47()+0x6c>)
    73e0:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    73e2:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    73e6:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    73e8:	9101      	str	r1, [sp, #4]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    73ea:	bf4c      	ite	mi
    73ec:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    73f0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    73f4:	7013      	strb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    73f6:	4b0e      	ldr	r3, [pc, #56]	; (7430 <opcode_0x47()+0x70>)
    73f8:	7818      	ldrb	r0, [r3, #0]
    73fa:	4048      	eors	r0, r1
    73fc:	7018      	strb	r0, [r3, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    73fe:	f7fb fbfb 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    7402:	9901      	ldr	r1, [sp, #4]
    7404:	8820      	ldrh	r0, [r4, #0]
    7406:	f7fb faef 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    740a:	8820      	ldrh	r0, [r4, #0]
    740c:	9901      	ldr	r1, [sp, #4]
    740e:	f7fb faeb 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x47].length);
    7412:	4a08      	ldr	r2, [pc, #32]	; (7434 <opcode_0x47()+0x74>)
    7414:	882b      	ldrh	r3, [r5, #0]
    7416:	f892 0e9d 	ldrb.w	r0, [r2, #3741]	; 0xe9d
    741a:	4418      	add	r0, r3
} // 0x47 - SRE - ZeroPage
    741c:	b280      	uxth	r0, r0
    741e:	b003      	add	sp, #12
    7420:	bd30      	pop	{r4, r5, pc}
    7422:	bf00      	nop
    7424:	2001888c 	.word	0x2001888c
    7428:	2001888a 	.word	0x2001888a
    742c:	20004968 	.word	0x20004968
    7430:	200188a3 	.word	0x200188a3
    7434:	20015418 	.word	0x20015418

00007438 <opcode_0x57()>:
uint16_t opcode_0x57() {
    7438:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    743a:	4d17      	ldr	r5, [pc, #92]	; (7498 <opcode_0x57()+0x60>)
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage_X()));
    743c:	f7fb fc10 	bl	2c60 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7440:	4a16      	ldr	r2, [pc, #88]	; (749c <opcode_0x57()+0x64>)
    7442:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    7444:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    7446:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    744a:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    744c:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7450:	bf4c      	ite	mi
    7452:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7456:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    745a:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    745c:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    745e:	4d10      	ldr	r5, [pc, #64]	; (74a0 <opcode_0x57()+0x68>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7460:	bf4c      	ite	mi
    7462:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7466:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    746a:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    746c:	8828      	ldrh	r0, [r5, #0]
    746e:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7470:	bf0c      	ite	eq
    7472:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7476:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    747a:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    747c:	f7fb fab4 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7480:	8828      	ldrh	r0, [r5, #0]
    7482:	4621      	mov	r1, r4
    7484:	f7fb fab0 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x57].length);
    7488:	4a06      	ldr	r2, [pc, #24]	; (74a4 <opcode_0x57()+0x6c>)
    748a:	4b07      	ldr	r3, [pc, #28]	; (74a8 <opcode_0x57()+0x70>)
    748c:	f892 01dd 	ldrb.w	r0, [r2, #477]	; 0x1dd
    7490:	881b      	ldrh	r3, [r3, #0]
    7492:	4418      	add	r0, r3
} // 0x57 - SRE - ZeroPage , X
    7494:	b280      	uxth	r0, r0
    7496:	bd38      	pop	{r3, r4, r5, pc}
    7498:	200188a3 	.word	0x200188a3
    749c:	20004968 	.word	0x20004968
    74a0:	2001888a 	.word	0x2001888a
    74a4:	20016418 	.word	0x20016418
    74a8:	2001888c 	.word	0x2001888c

000074ac <opcode_0x43()>:
uint16_t opcode_0x43() {
    74ac:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    74ae:	4d17      	ldr	r5, [pc, #92]	; (750c <opcode_0x43()+0x60>)
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_X()));
    74b0:	f7fb fc92 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    74b4:	4a16      	ldr	r2, [pc, #88]	; (7510 <opcode_0x43()+0x64>)
    74b6:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    74b8:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    74ba:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    74be:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    74c0:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    74c4:	bf4c      	ite	mi
    74c6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    74ca:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    74ce:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    74d0:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    74d2:	4d10      	ldr	r5, [pc, #64]	; (7514 <opcode_0x43()+0x68>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    74d4:	bf4c      	ite	mi
    74d6:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    74da:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    74de:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    74e0:	8828      	ldrh	r0, [r5, #0]
    74e2:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    74e4:	bf0c      	ite	eq
    74e6:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    74ea:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    74ee:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    74f0:	f7fb fa7a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    74f4:	8828      	ldrh	r0, [r5, #0]
    74f6:	4621      	mov	r1, r4
    74f8:	f7fb fa76 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x43].length);
    74fc:	4a06      	ldr	r2, [pc, #24]	; (7518 <opcode_0x43()+0x6c>)
    74fe:	4b07      	ldr	r3, [pc, #28]	; (751c <opcode_0x43()+0x70>)
    7500:	f892 0dcd 	ldrb.w	r0, [r2, #3533]	; 0xdcd
    7504:	881b      	ldrh	r3, [r3, #0]
    7506:	4418      	add	r0, r3
} // 0x43 - SRE - Indexed Indirect X
    7508:	b280      	uxth	r0, r0
    750a:	bd38      	pop	{r3, r4, r5, pc}
    750c:	200188a3 	.word	0x200188a3
    7510:	20004968 	.word	0x20004968
    7514:	2001888a 	.word	0x2001888a
    7518:	20015418 	.word	0x20015418
    751c:	2001888c 	.word	0x2001888c

00007520 <opcode_0x53()>:
uint16_t opcode_0x53() {
    7520:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    7522:	4d18      	ldr	r5, [pc, #96]	; (7584 <opcode_0x53()+0x64>)
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_Y(1)));
    7524:	2001      	movs	r0, #1
    7526:	f7fb fc81 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    752a:	4a17      	ldr	r2, [pc, #92]	; (7588 <opcode_0x53()+0x68>)
    register_a = register_a ^ local_data;
    752c:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    752e:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7530:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7534:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    7536:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    753a:	bf4c      	ite	mi
    753c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7540:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    7544:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7546:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    7548:	4d10      	ldr	r5, [pc, #64]	; (758c <opcode_0x53()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    754a:	bf4c      	ite	mi
    754c:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7550:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7554:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    7556:	8828      	ldrh	r0, [r5, #0]
    7558:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    755a:	bf0c      	ite	eq
    755c:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7560:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    7564:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    7566:	f7fb fa3f 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    756a:	8828      	ldrh	r0, [r5, #0]
    756c:	4621      	mov	r1, r4
    756e:	f7fb fa3b 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x53].length);
    7572:	4a07      	ldr	r2, [pc, #28]	; (7590 <opcode_0x53()+0x70>)
    7574:	4b07      	ldr	r3, [pc, #28]	; (7594 <opcode_0x53()+0x74>)
    7576:	f892 010d 	ldrb.w	r0, [r2, #269]	; 0x10d
    757a:	881b      	ldrh	r3, [r3, #0]
    757c:	4418      	add	r0, r3
} // 0x53 - SRE - Indirect Indexed  Y
    757e:	b280      	uxth	r0, r0
    7580:	bd38      	pop	{r3, r4, r5, pc}
    7582:	bf00      	nop
    7584:	200188a3 	.word	0x200188a3
    7588:	20004968 	.word	0x20004968
    758c:	2001888a 	.word	0x2001888a
    7590:	20016418 	.word	0x20016418
    7594:	2001888c 	.word	0x2001888c

00007598 <opcode_0x4F()>:
uint16_t opcode_0x4F() {
    7598:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    759a:	4d17      	ldr	r5, [pc, #92]	; (75f8 <opcode_0x4F()+0x60>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute()));
    759c:	f7fb fba0 	bl	2ce0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    75a0:	4a16      	ldr	r2, [pc, #88]	; (75fc <opcode_0x4F()+0x64>)
    75a2:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    75a4:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    75a6:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    75aa:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    75ac:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    75b0:	bf4c      	ite	mi
    75b2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    75b6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    75ba:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    75bc:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    75be:	4d10      	ldr	r5, [pc, #64]	; (7600 <opcode_0x4F()+0x68>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    75c0:	bf4c      	ite	mi
    75c2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    75c6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    75ca:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    75cc:	8828      	ldrh	r0, [r5, #0]
    75ce:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    75d0:	bf0c      	ite	eq
    75d2:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    75d6:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    75da:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    75dc:	f7fb fa04 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    75e0:	8828      	ldrh	r0, [r5, #0]
    75e2:	4621      	mov	r1, r4
    75e4:	f7fb fa00 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x4F].length);
    75e8:	4a06      	ldr	r2, [pc, #24]	; (7604 <opcode_0x4F()+0x6c>)
    75ea:	4b07      	ldr	r3, [pc, #28]	; (7608 <opcode_0x4F()+0x70>)
    75ec:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    75f0:	881b      	ldrh	r3, [r3, #0]
    75f2:	4418      	add	r0, r3
} // 0x4F - SRE - Absolute
    75f4:	b280      	uxth	r0, r0
    75f6:	bd38      	pop	{r3, r4, r5, pc}
    75f8:	200188a3 	.word	0x200188a3
    75fc:	20004968 	.word	0x20004968
    7600:	2001888a 	.word	0x2001888a
    7604:	20016418 	.word	0x20016418
    7608:	2001888c 	.word	0x2001888c

0000760c <opcode_0x5F()>:
uint16_t opcode_0x5F() {
    760c:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    760e:	4d18      	ldr	r5, [pc, #96]	; (7670 <opcode_0x5F()+0x64>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_X(1)));
    7610:	2001      	movs	r0, #1
    7612:	f7fb fb81 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7616:	4a17      	ldr	r2, [pc, #92]	; (7674 <opcode_0x5F()+0x68>)
    register_a = register_a ^ local_data;
    7618:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    761a:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    761c:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7620:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    7622:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7626:	bf4c      	ite	mi
    7628:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    762c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    7630:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7632:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    7634:	4d10      	ldr	r5, [pc, #64]	; (7678 <opcode_0x5F()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7636:	bf4c      	ite	mi
    7638:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    763c:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7640:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    7642:	8828      	ldrh	r0, [r5, #0]
    7644:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7646:	bf0c      	ite	eq
    7648:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    764c:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    7650:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    7652:	f7fb f9c9 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7656:	8828      	ldrh	r0, [r5, #0]
    7658:	4621      	mov	r1, r4
    765a:	f7fb f9c5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5F].length);
    765e:	4a07      	ldr	r2, [pc, #28]	; (767c <opcode_0x5F()+0x70>)
    7660:	4b07      	ldr	r3, [pc, #28]	; (7680 <opcode_0x5F()+0x74>)
    7662:	f892 037d 	ldrb.w	r0, [r2, #893]	; 0x37d
    7666:	881b      	ldrh	r3, [r3, #0]
    7668:	4418      	add	r0, r3
} // 0x5F - SRE - Absolute , X
    766a:	b280      	uxth	r0, r0
    766c:	bd38      	pop	{r3, r4, r5, pc}
    766e:	bf00      	nop
    7670:	200188a3 	.word	0x200188a3
    7674:	20004968 	.word	0x20004968
    7678:	2001888a 	.word	0x2001888a
    767c:	20016418 	.word	0x20016418
    7680:	2001888c 	.word	0x2001888c

00007684 <opcode_0x5B()>:
uint16_t opcode_0x5B() {
    7684:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    7686:	4d18      	ldr	r5, [pc, #96]	; (76e8 <opcode_0x5B()+0x64>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_Y(1)));
    7688:	2001      	movs	r0, #1
    768a:	f7fb fb75 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    768e:	4a17      	ldr	r2, [pc, #92]	; (76ec <opcode_0x5B()+0x68>)
    register_a = register_a ^ local_data;
    7690:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7692:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7694:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7698:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    769a:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    769e:	bf4c      	ite	mi
    76a0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    76a4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    76a8:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    76aa:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    76ac:	4d10      	ldr	r5, [pc, #64]	; (76f0 <opcode_0x5B()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    76ae:	bf4c      	ite	mi
    76b0:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    76b4:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    76b8:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    76ba:	8828      	ldrh	r0, [r5, #0]
    76bc:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    76be:	bf0c      	ite	eq
    76c0:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    76c4:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    76c8:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    76ca:	f7fb f98d 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    76ce:	8828      	ldrh	r0, [r5, #0]
    76d0:	4621      	mov	r1, r4
    76d2:	f7fb f989 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x5B].length);
    76d6:	4a07      	ldr	r2, [pc, #28]	; (76f4 <opcode_0x5B()+0x70>)
    76d8:	4b07      	ldr	r3, [pc, #28]	; (76f8 <opcode_0x5B()+0x74>)
    76da:	f892 02ad 	ldrb.w	r0, [r2, #685]	; 0x2ad
    76de:	881b      	ldrh	r3, [r3, #0]
    76e0:	4418      	add	r0, r3
} // 0x5B - SRE - Absolute , Y
    76e2:	b280      	uxth	r0, r0
    76e4:	bd38      	pop	{r3, r4, r5, pc}
    76e6:	bf00      	nop
    76e8:	200188a3 	.word	0x200188a3
    76ec:	20004968 	.word	0x20004968
    76f0:	2001888a 	.word	0x2001888a
    76f4:	20016418 	.word	0x20016418
    76f8:	2001888c 	.word	0x2001888c

000076fc <opcode_0x67()>:

    global_temp = local_data;

    return local_data;
}
uint16_t opcode_0x67() {
    76fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    76fe:	4e16      	ldr	r6, [pc, #88]	; (7758 <opcode_0x67()+0x5c>)
    7700:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7702:	4d16      	ldr	r5, [pc, #88]	; (775c <opcode_0x67()+0x60>)
    return read_byte(register_pc+offset, false);
    7704:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    7706:	4f16      	ldr	r7, [pc, #88]	; (7760 <opcode_0x67()+0x64>)
    7708:	3001      	adds	r0, #1
    770a:	b280      	uxth	r0, r0
    770c:	f7fa ffb0 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    7710:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7712:	b280      	uxth	r0, r0
    7714:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    7716:	f7fa ffab 	bl	2670 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    771a:	4a12      	ldr	r2, [pc, #72]	; (7764 <opcode_0x67()+0x68>)
    771c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    771e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    write_byte(effective_address, local_data);
    7722:	8828      	ldrh	r0, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7724:	7813      	ldrb	r3, [r2, #0]
    7726:	4621      	mov	r1, r4
    global_temp = local_data;
    7728:	703c      	strb	r4, [r7, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    772a:	bf4c      	ite	mi
    772c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7730:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    7734:	7013      	strb	r3, [r2, #0]
    7736:	f7fb f957 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    773a:	4621      	mov	r1, r4
    773c:	8828      	ldrh	r0, [r5, #0]
    773e:	f7fb f953 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage()));
    Calculate_ADC(global_temp);
    7742:	7838      	ldrb	r0, [r7, #0]
    7744:	f7fc f84c 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x67].length);
    7748:	4a07      	ldr	r2, [pc, #28]	; (7768 <opcode_0x67()+0x6c>)
    774a:	8833      	ldrh	r3, [r6, #0]
    774c:	f892 051d 	ldrb.w	r0, [r2, #1309]	; 0x51d
    7750:	4418      	add	r0, r3
} // 0x67 - RRA - ZeroPage
    7752:	b280      	uxth	r0, r0
    7754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7756:	bf00      	nop
    7758:	2001888c 	.word	0x2001888c
    775c:	2001888a 	.word	0x2001888a
    7760:	200188a0 	.word	0x200188a0
    7764:	20004968 	.word	0x20004968
    7768:	20016418 	.word	0x20016418

0000776c <opcode_0x77()>:
uint16_t opcode_0x77() {
    776c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage_X()));
    776e:	f7fb fa77 	bl	2c60 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7772:	4a10      	ldr	r2, [pc, #64]	; (77b4 <opcode_0x77()+0x48>)
    7774:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7776:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    777a:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    777c:	4e0e      	ldr	r6, [pc, #56]	; (77b8 <opcode_0x77()+0x4c>)
    777e:	4621      	mov	r1, r4
    7780:	bf4c      	ite	mi
    7782:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7786:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    778a:	4d0c      	ldr	r5, [pc, #48]	; (77bc <opcode_0x77()+0x50>)
    778c:	8830      	ldrh	r0, [r6, #0]
    778e:	7013      	strb	r3, [r2, #0]
    7790:	702c      	strb	r4, [r5, #0]
    7792:	f7fb f929 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7796:	4621      	mov	r1, r4
    7798:	8830      	ldrh	r0, [r6, #0]
    779a:	f7fb f925 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    779e:	7828      	ldrb	r0, [r5, #0]
    77a0:	f7fc f81e 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x77].length);
    77a4:	4a06      	ldr	r2, [pc, #24]	; (77c0 <opcode_0x77()+0x54>)
    77a6:	4b07      	ldr	r3, [pc, #28]	; (77c4 <opcode_0x77()+0x58>)
    77a8:	f892 085d 	ldrb.w	r0, [r2, #2141]	; 0x85d
    77ac:	881b      	ldrh	r3, [r3, #0]
    77ae:	4418      	add	r0, r3
} // 0x77 - RRA - ZeroPage , X
    77b0:	b280      	uxth	r0, r0
    77b2:	bd70      	pop	{r4, r5, r6, pc}
    77b4:	20004968 	.word	0x20004968
    77b8:	2001888a 	.word	0x2001888a
    77bc:	200188a0 	.word	0x200188a0
    77c0:	20016418 	.word	0x20016418
    77c4:	2001888c 	.word	0x2001888c

000077c8 <opcode_0x63()>:
uint16_t opcode_0x63() {
    77c8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_X()));
    77ca:	f7fb fb05 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    77ce:	4a10      	ldr	r2, [pc, #64]	; (7810 <opcode_0x63()+0x48>)
    77d0:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    77d2:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    77d6:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    77d8:	4e0e      	ldr	r6, [pc, #56]	; (7814 <opcode_0x63()+0x4c>)
    77da:	4621      	mov	r1, r4
    77dc:	bf4c      	ite	mi
    77de:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    77e2:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    77e6:	4d0c      	ldr	r5, [pc, #48]	; (7818 <opcode_0x63()+0x50>)
    77e8:	8830      	ldrh	r0, [r6, #0]
    77ea:	7013      	strb	r3, [r2, #0]
    77ec:	702c      	strb	r4, [r5, #0]
    77ee:	f7fb f8fb 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    77f2:	4621      	mov	r1, r4
    77f4:	8830      	ldrh	r0, [r6, #0]
    77f6:	f7fb f8f7 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    77fa:	7828      	ldrb	r0, [r5, #0]
    77fc:	f7fb fff0 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x63].length);
    7800:	4a06      	ldr	r2, [pc, #24]	; (781c <opcode_0x63()+0x54>)
    7802:	4b07      	ldr	r3, [pc, #28]	; (7820 <opcode_0x63()+0x58>)
    7804:	f892 044d 	ldrb.w	r0, [r2, #1101]	; 0x44d
    7808:	881b      	ldrh	r3, [r3, #0]
    780a:	4418      	add	r0, r3
} // 0x63 - RRA - Indexed Indirect X
    780c:	b280      	uxth	r0, r0
    780e:	bd70      	pop	{r4, r5, r6, pc}
    7810:	20004968 	.word	0x20004968
    7814:	2001888a 	.word	0x2001888a
    7818:	200188a0 	.word	0x200188a0
    781c:	20016418 	.word	0x20016418
    7820:	2001888c 	.word	0x2001888c

00007824 <opcode_0x73()>:
uint16_t opcode_0x73() {
    7824:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_Y(1)));
    7826:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    7828:	4e11      	ldr	r6, [pc, #68]	; (7870 <opcode_0x73()+0x4c>)
    782a:	f7fb faff 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    782e:	4a11      	ldr	r2, [pc, #68]	; (7874 <opcode_0x73()+0x50>)
    7830:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    7832:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7836:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    7838:	4d0f      	ldr	r5, [pc, #60]	; (7878 <opcode_0x73()+0x54>)
    783a:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    783c:	bf4c      	ite	mi
    783e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    7842:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    7846:	8830      	ldrh	r0, [r6, #0]
    7848:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    784a:	702c      	strb	r4, [r5, #0]
    784c:	f7fb f8cc 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7850:	4621      	mov	r1, r4
    7852:	8830      	ldrh	r0, [r6, #0]
    7854:	f7fb f8c8 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    7858:	7828      	ldrb	r0, [r5, #0]
    785a:	f7fb ffc1 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x73].length);
    785e:	4a07      	ldr	r2, [pc, #28]	; (787c <opcode_0x73()+0x58>)
    7860:	4b07      	ldr	r3, [pc, #28]	; (7880 <opcode_0x73()+0x5c>)
    7862:	f892 078d 	ldrb.w	r0, [r2, #1933]	; 0x78d
    7866:	881b      	ldrh	r3, [r3, #0]
    7868:	4418      	add	r0, r3
} // 0x73 - RRA - Indirect Indexed  Y
    786a:	b280      	uxth	r0, r0
    786c:	bd70      	pop	{r4, r5, r6, pc}
    786e:	bf00      	nop
    7870:	2001888a 	.word	0x2001888a
    7874:	20004968 	.word	0x20004968
    7878:	200188a0 	.word	0x200188a0
    787c:	20016418 	.word	0x20016418
    7880:	2001888c 	.word	0x2001888c

00007884 <opcode_0x6F()>:
uint16_t opcode_0x6F() {
    7884:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute()));
    7886:	f7fb fa2b 	bl	2ce0 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    788a:	4a10      	ldr	r2, [pc, #64]	; (78cc <opcode_0x6F()+0x48>)
    788c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    788e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7892:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    7894:	4e0e      	ldr	r6, [pc, #56]	; (78d0 <opcode_0x6F()+0x4c>)
    7896:	4621      	mov	r1, r4
    7898:	bf4c      	ite	mi
    789a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    789e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    78a2:	4d0c      	ldr	r5, [pc, #48]	; (78d4 <opcode_0x6F()+0x50>)
    78a4:	8830      	ldrh	r0, [r6, #0]
    78a6:	7013      	strb	r3, [r2, #0]
    78a8:	702c      	strb	r4, [r5, #0]
    78aa:	f7fb f89d 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    78ae:	4621      	mov	r1, r4
    78b0:	8830      	ldrh	r0, [r6, #0]
    78b2:	f7fb f899 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    78b6:	7828      	ldrb	r0, [r5, #0]
    78b8:	f7fb ff92 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x6F].length);
    78bc:	4a06      	ldr	r2, [pc, #24]	; (78d8 <opcode_0x6F()+0x54>)
    78be:	4b07      	ldr	r3, [pc, #28]	; (78dc <opcode_0x6F()+0x58>)
    78c0:	f892 06bd 	ldrb.w	r0, [r2, #1725]	; 0x6bd
    78c4:	881b      	ldrh	r3, [r3, #0]
    78c6:	4418      	add	r0, r3
} // 0x6F - RRA - Absolute
    78c8:	b280      	uxth	r0, r0
    78ca:	bd70      	pop	{r4, r5, r6, pc}
    78cc:	20004968 	.word	0x20004968
    78d0:	2001888a 	.word	0x2001888a
    78d4:	200188a0 	.word	0x200188a0
    78d8:	20016418 	.word	0x20016418
    78dc:	2001888c 	.word	0x2001888c

000078e0 <opcode_0x7F()>:
uint16_t opcode_0x7F() {
    78e0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_X(1)));
    78e2:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    78e4:	4e11      	ldr	r6, [pc, #68]	; (792c <opcode_0x7F()+0x4c>)
    78e6:	f7fb fa17 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    78ea:	4a11      	ldr	r2, [pc, #68]	; (7930 <opcode_0x7F()+0x50>)
    78ec:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    78ee:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    78f2:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    78f4:	4d0f      	ldr	r5, [pc, #60]	; (7934 <opcode_0x7F()+0x54>)
    78f6:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    78f8:	bf4c      	ite	mi
    78fa:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    78fe:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    7902:	8830      	ldrh	r0, [r6, #0]
    7904:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    7906:	702c      	strb	r4, [r5, #0]
    7908:	f7fb f86e 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    790c:	4621      	mov	r1, r4
    790e:	8830      	ldrh	r0, [r6, #0]
    7910:	f7fb f86a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    7914:	7828      	ldrb	r0, [r5, #0]
    7916:	f7fb ff63 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7F].length);
    791a:	4a07      	ldr	r2, [pc, #28]	; (7938 <opcode_0x7F()+0x58>)
    791c:	4b07      	ldr	r3, [pc, #28]	; (793c <opcode_0x7F()+0x5c>)
    791e:	f892 09fd 	ldrb.w	r0, [r2, #2557]	; 0x9fd
    7922:	881b      	ldrh	r3, [r3, #0]
    7924:	4418      	add	r0, r3
} // 0x7F - RRA - Absolute , X
    7926:	b280      	uxth	r0, r0
    7928:	bd70      	pop	{r4, r5, r6, pc}
    792a:	bf00      	nop
    792c:	2001888a 	.word	0x2001888a
    7930:	20004968 	.word	0x20004968
    7934:	200188a0 	.word	0x200188a0
    7938:	20016418 	.word	0x20016418
    793c:	2001888c 	.word	0x2001888c

00007940 <opcode_0x7B()>:
uint16_t opcode_0x7B() {
    7940:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_Y(1)));
    7942:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    7944:	4e11      	ldr	r6, [pc, #68]	; (798c <opcode_0x7B()+0x4c>)
    7946:	f7fb fa17 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    794a:	4a11      	ldr	r2, [pc, #68]	; (7990 <opcode_0x7B()+0x50>)
    794c:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    794e:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7952:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    7954:	4d0f      	ldr	r5, [pc, #60]	; (7994 <opcode_0x7B()+0x54>)
    7956:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    7958:	bf4c      	ite	mi
    795a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    795e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    7962:	8830      	ldrh	r0, [r6, #0]
    7964:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    7966:	702c      	strb	r4, [r5, #0]
    7968:	f7fb f83e 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    796c:	4621      	mov	r1, r4
    796e:	8830      	ldrh	r0, [r6, #0]
    7970:	f7fb f83a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    7974:	7828      	ldrb	r0, [r5, #0]
    7976:	f7fb ff33 	bl	37e0 <Calculate_ADC(unsigned short)>
    return(register_pc + opcode_info[0x7B].length);
    797a:	4a07      	ldr	r2, [pc, #28]	; (7998 <opcode_0x7B()+0x58>)
    797c:	4b07      	ldr	r3, [pc, #28]	; (799c <opcode_0x7B()+0x5c>)
    797e:	f892 092d 	ldrb.w	r0, [r2, #2349]	; 0x92d
    7982:	881b      	ldrh	r3, [r3, #0]
    7984:	4418      	add	r0, r3
} // 0x7B - RRA - Absolute , Y
    7986:	b280      	uxth	r0, r0
    7988:	bd70      	pop	{r4, r5, r6, pc}
    798a:	bf00      	nop
    798c:	2001888a 	.word	0x2001888a
    7990:	20004968 	.word	0x20004968
    7994:	200188a0 	.word	0x200188a0
    7998:	20016418 	.word	0x20016418
    799c:	2001888c 	.word	0x2001888c

000079a0 <opcode_0x87()>:

// --------------------------------------------------------------------------------------------------
// AND the contents of the A and X registers (without changing the contents of either register) and 
// stores the result in memory.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x87() {
    79a0:	b538      	push	{r3, r4, r5, lr}
    return read_byte(register_pc+offset, false);
    79a2:	4d0c      	ldr	r5, [pc, #48]	; (79d4 <opcode_0x87()+0x34>)
    79a4:	2100      	movs	r1, #0
    Write_ZeroPage(register_a & register_x);
    79a6:	4a0c      	ldr	r2, [pc, #48]	; (79d8 <opcode_0x87()+0x38>)
    79a8:	8828      	ldrh	r0, [r5, #0]
    79aa:	4b0c      	ldr	r3, [pc, #48]	; (79dc <opcode_0x87()+0x3c>)
    79ac:	7814      	ldrb	r4, [r2, #0]
    79ae:	3001      	adds	r0, #1
    79b0:	781b      	ldrb	r3, [r3, #0]
    79b2:	b280      	uxth	r0, r0
    79b4:	401c      	ands	r4, r3
    79b6:	f7fa fe5b 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    79ba:	4b09      	ldr	r3, [pc, #36]	; (79e0 <opcode_0x87()+0x40>)
    79bc:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    79be:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate(1);
    79c0:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    79c2:	f7fb f811 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x87].length);
    79c6:	4a07      	ldr	r2, [pc, #28]	; (79e4 <opcode_0x87()+0x44>)
    79c8:	882b      	ldrh	r3, [r5, #0]
    79ca:	f892 0b9d 	ldrb.w	r0, [r2, #2973]	; 0xb9d
    79ce:	4418      	add	r0, r3
} // 0x87 - SAX - ZeroPage
    79d0:	b280      	uxth	r0, r0
    79d2:	bd38      	pop	{r3, r4, r5, pc}
    79d4:	2001888c 	.word	0x2001888c
    79d8:	200188a3 	.word	0x200188a3
    79dc:	200188a4 	.word	0x200188a4
    79e0:	2001888a 	.word	0x2001888a
    79e4:	20016418 	.word	0x20016418

000079e8 <opcode_0x97()>:
uint16_t opcode_0x97() {
    79e8:	b508      	push	{r3, lr}
    Write_ZeroPage_Y(register_a & register_x);
    79ea:	4a07      	ldr	r2, [pc, #28]	; (7a08 <opcode_0x97()+0x20>)
    79ec:	4b07      	ldr	r3, [pc, #28]	; (7a0c <opcode_0x97()+0x24>)
    79ee:	7810      	ldrb	r0, [r2, #0]
    79f0:	781b      	ldrb	r3, [r3, #0]
    79f2:	4018      	ands	r0, r3
    79f4:	f7fb fa8a 	bl	2f0c <Write_ZeroPage_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x97].length);
    79f8:	4a05      	ldr	r2, [pc, #20]	; (7a10 <opcode_0x97()+0x28>)
    79fa:	4b06      	ldr	r3, [pc, #24]	; (7a14 <opcode_0x97()+0x2c>)
    79fc:	f892 0edd 	ldrb.w	r0, [r2, #3805]	; 0xedd
    7a00:	881b      	ldrh	r3, [r3, #0]
    7a02:	4418      	add	r0, r3
} // 0x97 - SAX - ZeroPage , Y
    7a04:	b280      	uxth	r0, r0
    7a06:	bd08      	pop	{r3, pc}
    7a08:	200188a3 	.word	0x200188a3
    7a0c:	200188a4 	.word	0x200188a4
    7a10:	20016418 	.word	0x20016418
    7a14:	2001888c 	.word	0x2001888c

00007a18 <opcode_0x83()>:
uint16_t opcode_0x83() {
    7a18:	b508      	push	{r3, lr}
    Write_Indexed_Indirect_X(register_a & register_x);
    7a1a:	4a07      	ldr	r2, [pc, #28]	; (7a38 <opcode_0x83()+0x20>)
    7a1c:	4b07      	ldr	r3, [pc, #28]	; (7a3c <opcode_0x83()+0x24>)
    7a1e:	7810      	ldrb	r0, [r2, #0]
    7a20:	781b      	ldrb	r3, [r3, #0]
    7a22:	4018      	ands	r0, r3
    7a24:	f7fb faea 	bl	2ffc <Write_Indexed_Indirect_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x83].length);
    7a28:	4a05      	ldr	r2, [pc, #20]	; (7a40 <opcode_0x83()+0x28>)
    7a2a:	4b06      	ldr	r3, [pc, #24]	; (7a44 <opcode_0x83()+0x2c>)
    7a2c:	f892 0acd 	ldrb.w	r0, [r2, #2765]	; 0xacd
    7a30:	881b      	ldrh	r3, [r3, #0]
    7a32:	4418      	add	r0, r3
} // 0x83 - SAX - Indexed Indirect X
    7a34:	b280      	uxth	r0, r0
    7a36:	bd08      	pop	{r3, pc}
    7a38:	200188a3 	.word	0x200188a3
    7a3c:	200188a4 	.word	0x200188a4
    7a40:	20016418 	.word	0x20016418
    7a44:	2001888c 	.word	0x2001888c

00007a48 <opcode_0x8F()>:
uint16_t opcode_0x8F() {
    7a48:	b508      	push	{r3, lr}
    Write_Absolute(register_a & register_x);
    7a4a:	4a07      	ldr	r2, [pc, #28]	; (7a68 <opcode_0x8F()+0x20>)
    7a4c:	4b07      	ldr	r3, [pc, #28]	; (7a6c <opcode_0x8F()+0x24>)
    7a4e:	7810      	ldrb	r0, [r2, #0]
    7a50:	781b      	ldrb	r3, [r3, #0]
    7a52:	4018      	ands	r0, r3
    7a54:	f7fb fa1e 	bl	2e94 <Write_Absolute(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8F].length);
    7a58:	4a05      	ldr	r2, [pc, #20]	; (7a70 <opcode_0x8F()+0x28>)
    7a5a:	4b06      	ldr	r3, [pc, #24]	; (7a74 <opcode_0x8F()+0x2c>)
    7a5c:	f892 0d3d 	ldrb.w	r0, [r2, #3389]	; 0xd3d
    7a60:	881b      	ldrh	r3, [r3, #0]
    7a62:	4418      	add	r0, r3
} // 0x8F - SAX - Absolute
    7a64:	b280      	uxth	r0, r0
    7a66:	bd08      	pop	{r3, pc}
    7a68:	200188a3 	.word	0x200188a3
    7a6c:	200188a4 	.word	0x200188a4
    7a70:	20016418 	.word	0x20016418
    7a74:	2001888c 	.word	0x2001888c

00007a78 <opcode_0xA7()>:

// --------------------------------------------------------------------------------------------------
// Load both the accumulator and the X register with the contents of a memory location.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xA7() {
    7a78:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    7a7a:	4c14      	ldr	r4, [pc, #80]	; (7acc <opcode_0xA7()+0x54>)
    7a7c:	2100      	movs	r1, #0
    7a7e:	8820      	ldrh	r0, [r4, #0]
    7a80:	3001      	adds	r0, #1
    7a82:	b280      	uxth	r0, r0
    7a84:	f7fa fdf4 	bl	2670 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate(1);
    7a88:	4b11      	ldr	r3, [pc, #68]	; (7ad0 <opcode_0xA7()+0x58>)
    7a8a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    7a8c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7a8e:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    7a90:	f7fa fdee 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = Fetch_ZeroPage();
    7a94:	4a0f      	ldr	r2, [pc, #60]	; (7ad4 <opcode_0xA7()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7a96:	0601      	lsls	r1, r0, #24
    register_x = register_a;
    7a98:	4b0f      	ldr	r3, [pc, #60]	; (7ad8 <opcode_0xA7()+0x60>)
    register_a = Fetch_ZeroPage();
    7a9a:	7010      	strb	r0, [r2, #0]
    7a9c:	4a0f      	ldr	r2, [pc, #60]	; (7adc <opcode_0xA7()+0x64>)
    register_x = register_a;
    7a9e:	7018      	strb	r0, [r3, #0]
    7aa0:	7813      	ldrb	r3, [r2, #0]
    7aa2:	d40d      	bmi.n	7ac0 <opcode_0xA7()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7aa8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7aaa:	b958      	cbnz	r0, 7ac4 <opcode_0xA7()+0x4c>
    7aac:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA7].length);
    7ab0:	480b      	ldr	r0, [pc, #44]	; (7ae0 <opcode_0xA7()+0x68>)
    7ab2:	8821      	ldrh	r1, [r4, #0]
    7ab4:	f890 021d 	ldrb.w	r0, [r0, #541]	; 0x21d
    7ab8:	7013      	strb	r3, [r2, #0]
    7aba:	4408      	add	r0, r1
} // 0xA7 - LAX - ZeroPage
    7abc:	b280      	uxth	r0, r0
    7abe:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7ac4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7ac8:	e7f2      	b.n	7ab0 <opcode_0xA7()+0x38>
    7aca:	bf00      	nop
    7acc:	2001888c 	.word	0x2001888c
    7ad0:	2001888a 	.word	0x2001888a
    7ad4:	200188a3 	.word	0x200188a3
    7ad8:	200188a4 	.word	0x200188a4
    7adc:	20004968 	.word	0x20004968
    7ae0:	20017418 	.word	0x20017418

00007ae4 <opcode_0xB7()>:
uint16_t opcode_0xB7() {
    7ae4:	b508      	push	{r3, lr}
    register_a = Fetch_ZeroPage_Y();
    7ae6:	f7fb f8db 	bl	2ca0 <Fetch_ZeroPage_Y()>
    7aea:	4a0e      	ldr	r2, [pc, #56]	; (7b24 <opcode_0xB7()+0x40>)
    register_x = register_a;
    7aec:	4b0e      	ldr	r3, [pc, #56]	; (7b28 <opcode_0xB7()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7aee:	0601      	lsls	r1, r0, #24
    register_a = Fetch_ZeroPage_Y();
    7af0:	7010      	strb	r0, [r2, #0]
    7af2:	4a0e      	ldr	r2, [pc, #56]	; (7b2c <opcode_0xB7()+0x48>)
    register_x = register_a;
    7af4:	7018      	strb	r0, [r3, #0]
    7af6:	7813      	ldrb	r3, [r2, #0]
    7af8:	d40e      	bmi.n	7b18 <opcode_0xB7()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7afe:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7b00:	b960      	cbnz	r0, 7b1c <opcode_0xB7()+0x38>
    7b02:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB7].length);
    7b06:	490a      	ldr	r1, [pc, #40]	; (7b30 <opcode_0xB7()+0x4c>)
    7b08:	480a      	ldr	r0, [pc, #40]	; (7b34 <opcode_0xB7()+0x50>)
    7b0a:	7013      	strb	r3, [r2, #0]
    7b0c:	f890 055d 	ldrb.w	r0, [r0, #1373]	; 0x55d
    7b10:	880b      	ldrh	r3, [r1, #0]
    7b12:	4418      	add	r0, r3
} // 0xB7 - LAX - ZeroPage , Y
    7b14:	b280      	uxth	r0, r0
    7b16:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7b1c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7b20:	e7f1      	b.n	7b06 <opcode_0xB7()+0x22>
    7b22:	bf00      	nop
    7b24:	200188a3 	.word	0x200188a3
    7b28:	200188a4 	.word	0x200188a4
    7b2c:	20004968 	.word	0x20004968
    7b30:	2001888c 	.word	0x2001888c
    7b34:	20017418 	.word	0x20017418

00007b38 <opcode_0xA3()>:
uint16_t opcode_0xA3() {
    7b38:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_X();
    7b3a:	f7fb f94d 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    7b3e:	4a0e      	ldr	r2, [pc, #56]	; (7b78 <opcode_0xA3()+0x40>)
    register_x = register_a;
    7b40:	4b0e      	ldr	r3, [pc, #56]	; (7b7c <opcode_0xA3()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7b42:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Indexed_Indirect_X();
    7b44:	7010      	strb	r0, [r2, #0]
    7b46:	4a0e      	ldr	r2, [pc, #56]	; (7b80 <opcode_0xA3()+0x48>)
    register_x = register_a;
    7b48:	7018      	strb	r0, [r3, #0]
    7b4a:	7813      	ldrb	r3, [r2, #0]
    7b4c:	d40e      	bmi.n	7b6c <opcode_0xA3()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7b52:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7b54:	b960      	cbnz	r0, 7b70 <opcode_0xA3()+0x38>
    7b56:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xA3].length);
    7b5a:	490a      	ldr	r1, [pc, #40]	; (7b84 <opcode_0xA3()+0x4c>)
    7b5c:	480a      	ldr	r0, [pc, #40]	; (7b88 <opcode_0xA3()+0x50>)
    7b5e:	7013      	strb	r3, [r2, #0]
    7b60:	f890 014d 	ldrb.w	r0, [r0, #333]	; 0x14d
    7b64:	880b      	ldrh	r3, [r1, #0]
    7b66:	4418      	add	r0, r3
} // 0xA3 - LAX - Indexed Indirect X
    7b68:	b280      	uxth	r0, r0
    7b6a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7b70:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7b74:	e7f1      	b.n	7b5a <opcode_0xA3()+0x22>
    7b76:	bf00      	nop
    7b78:	200188a3 	.word	0x200188a3
    7b7c:	200188a4 	.word	0x200188a4
    7b80:	20004968 	.word	0x20004968
    7b84:	2001888c 	.word	0x2001888c
    7b88:	20017418 	.word	0x20017418

00007b8c <opcode_0xB3()>:
uint16_t opcode_0xB3() {
    7b8c:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_Y(1);
    7b8e:	2001      	movs	r0, #1
    7b90:	f7fb f94c 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    7b94:	4a0d      	ldr	r2, [pc, #52]	; (7bcc <opcode_0xB3()+0x40>)
    register_x = register_a;
    7b96:	4b0e      	ldr	r3, [pc, #56]	; (7bd0 <opcode_0xB3()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7b98:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Indexed_Indirect_Y(1);
    7b9a:	7010      	strb	r0, [r2, #0]
    7b9c:	4a0d      	ldr	r2, [pc, #52]	; (7bd4 <opcode_0xB3()+0x48>)
    register_x = register_a;
    7b9e:	7018      	strb	r0, [r3, #0]
    7ba0:	7813      	ldrb	r3, [r2, #0]
    7ba2:	d40e      	bmi.n	7bc2 <opcode_0xB3()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7ba8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7baa:	b960      	cbnz	r0, 7bc6 <opcode_0xB3()+0x3a>
    7bac:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xB3].length);
    7bb0:	4909      	ldr	r1, [pc, #36]	; (7bd8 <opcode_0xB3()+0x4c>)
    7bb2:	480a      	ldr	r0, [pc, #40]	; (7bdc <opcode_0xB3()+0x50>)
    7bb4:	7013      	strb	r3, [r2, #0]
    7bb6:	f890 048d 	ldrb.w	r0, [r0, #1165]	; 0x48d
    7bba:	880b      	ldrh	r3, [r1, #0]
    7bbc:	4418      	add	r0, r3
} // 0xB3 - LAX - Indirect Indexed  Y
    7bbe:	b280      	uxth	r0, r0
    7bc0:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7bc6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7bca:	e7f1      	b.n	7bb0 <opcode_0xB3()+0x24>
    7bcc:	200188a3 	.word	0x200188a3
    7bd0:	200188a4 	.word	0x200188a4
    7bd4:	20004968 	.word	0x20004968
    7bd8:	2001888c 	.word	0x2001888c
    7bdc:	20017418 	.word	0x20017418

00007be0 <opcode_0xAF()>:
uint16_t opcode_0xAF() {
    7be0:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute();
    7be2:	f7fb f87d 	bl	2ce0 <Fetch_Absolute()>
    7be6:	4a0e      	ldr	r2, [pc, #56]	; (7c20 <opcode_0xAF()+0x40>)
    register_x = register_a;
    7be8:	4b0e      	ldr	r3, [pc, #56]	; (7c24 <opcode_0xAF()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7bea:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Absolute();
    7bec:	7010      	strb	r0, [r2, #0]
    7bee:	4a0e      	ldr	r2, [pc, #56]	; (7c28 <opcode_0xAF()+0x48>)
    register_x = register_a;
    7bf0:	7018      	strb	r0, [r3, #0]
    7bf2:	7813      	ldrb	r3, [r2, #0]
    7bf4:	d40e      	bmi.n	7c14 <opcode_0xAF()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7bfa:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7bfc:	b960      	cbnz	r0, 7c18 <opcode_0xAF()+0x38>
    7bfe:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xAF].length);
    7c02:	490a      	ldr	r1, [pc, #40]	; (7c2c <opcode_0xAF()+0x4c>)
    7c04:	480a      	ldr	r0, [pc, #40]	; (7c30 <opcode_0xAF()+0x50>)
    7c06:	7013      	strb	r3, [r2, #0]
    7c08:	f890 03bd 	ldrb.w	r0, [r0, #957]	; 0x3bd
    7c0c:	880b      	ldrh	r3, [r1, #0]
    7c0e:	4418      	add	r0, r3
} // 0xAF - LAX - Absolute
    7c10:	b280      	uxth	r0, r0
    7c12:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7c18:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7c1c:	e7f1      	b.n	7c02 <opcode_0xAF()+0x22>
    7c1e:	bf00      	nop
    7c20:	200188a3 	.word	0x200188a3
    7c24:	200188a4 	.word	0x200188a4
    7c28:	20004968 	.word	0x20004968
    7c2c:	2001888c 	.word	0x2001888c
    7c30:	20017418 	.word	0x20017418

00007c34 <opcode_0xBF()>:
uint16_t opcode_0xBF() {
    7c34:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_Y(1);
    7c36:	2001      	movs	r0, #1
    7c38:	f7fb f89e 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    7c3c:	4a0d      	ldr	r2, [pc, #52]	; (7c74 <opcode_0xBF()+0x40>)
    register_x = register_a;
    7c3e:	4b0e      	ldr	r3, [pc, #56]	; (7c78 <opcode_0xBF()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7c40:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Absolute_Y(1);
    7c42:	7010      	strb	r0, [r2, #0]
    7c44:	4a0d      	ldr	r2, [pc, #52]	; (7c7c <opcode_0xBF()+0x48>)
    register_x = register_a;
    7c46:	7018      	strb	r0, [r3, #0]
    7c48:	7813      	ldrb	r3, [r2, #0]
    7c4a:	d40e      	bmi.n	7c6a <opcode_0xBF()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7c50:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7c52:	b960      	cbnz	r0, 7c6e <opcode_0xBF()+0x3a>
    7c54:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xBF].length);
    7c58:	4909      	ldr	r1, [pc, #36]	; (7c80 <opcode_0xBF()+0x4c>)
    7c5a:	480a      	ldr	r0, [pc, #40]	; (7c84 <opcode_0xBF()+0x50>)
    7c5c:	7013      	strb	r3, [r2, #0]
    7c5e:	f890 06fd 	ldrb.w	r0, [r0, #1789]	; 0x6fd
    7c62:	880b      	ldrh	r3, [r1, #0]
    7c64:	4418      	add	r0, r3
} // 0xBF - LAX - Absolute , Y
    7c66:	b280      	uxth	r0, r0
    7c68:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7c6e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7c72:	e7f1      	b.n	7c58 <opcode_0xBF()+0x24>
    7c74:	200188a3 	.word	0x200188a3
    7c78:	200188a4 	.word	0x200188a4
    7c7c:	20004968 	.word	0x20004968
    7c80:	2001888c 	.word	0x2001888c
    7c84:	20017418 	.word	0x20017418

00007c88 <opcode_0xC7()>:

// --------------------------------------------------------------------------------------------------
// Decrement the contents of a memory location and then compare the result with the A register.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xC7() {
    7c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    7c8a:	4d1a      	ldr	r5, [pc, #104]	; (7cf4 <opcode_0xC7()+0x6c>)
    7c8c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7c8e:	4e1a      	ldr	r6, [pc, #104]	; (7cf8 <opcode_0xC7()+0x70>)
    return read_byte(register_pc+offset, false);
    7c90:	8828      	ldrh	r0, [r5, #0]
    global_temp = local_data;
    7c92:	4f1a      	ldr	r7, [pc, #104]	; (7cfc <opcode_0xC7()+0x74>)
    7c94:	3001      	adds	r0, #1
    7c96:	b280      	uxth	r0, r0
    7c98:	f7fa fcea 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    7c9c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    7c9e:	b280      	uxth	r0, r0
    7ca0:	8030      	strh	r0, [r6, #0]
    return read_byte(effective_address, false);
    7ca2:	f7fa fce5 	bl	2670 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    7ca6:	3801      	subs	r0, #1
    7ca8:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7caa:	4620      	mov	r0, r4
    global_temp = local_data;
    7cac:	703c      	strb	r4, [r7, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7cae:	f7fa ffa3 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    write_byte(effective_address, local_data);
    7cb2:	4621      	mov	r1, r4
    7cb4:	8830      	ldrh	r0, [r6, #0]
    7cb6:	f7fa fe97 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7cba:	4621      	mov	r1, r4
    7cbc:	8830      	ldrh	r0, [r6, #0]
    7cbe:	f7fa fe93 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7cc2:	4b0f      	ldr	r3, [pc, #60]	; (7d00 <opcode_0xC7()+0x78>)
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Calculate_CMP(global_temp);
    7cc4:	7839      	ldrb	r1, [r7, #0]
    temp = register_a - local_data;
    7cc6:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7cc8:	4a0e      	ldr	r2, [pc, #56]	; (7d04 <opcode_0xC7()+0x7c>)
    7cca:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    7ccc:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7cd0:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7cd2:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7cd4:	bf94      	ite	ls
    7cd6:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7cda:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    7cde:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7ce0:	f7fa ff8a 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xC7].length);
    7ce4:	4a08      	ldr	r2, [pc, #32]	; (7d08 <opcode_0xC7()+0x80>)
    7ce6:	882b      	ldrh	r3, [r5, #0]
    7ce8:	f892 089d 	ldrb.w	r0, [r2, #2205]	; 0x89d
    7cec:	4418      	add	r0, r3
} // 0xC7 - DCP - ZeroPage
    7cee:	b280      	uxth	r0, r0
    7cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cf2:	bf00      	nop
    7cf4:	2001888c 	.word	0x2001888c
    7cf8:	2001888a 	.word	0x2001888a
    7cfc:	200188a0 	.word	0x200188a0
    7d00:	200188a3 	.word	0x200188a3
    7d04:	20004968 	.word	0x20004968
    7d08:	20017418 	.word	0x20017418

00007d0c <opcode_0xD7()>:
uint16_t opcode_0xD7() {
    7d0c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    7d0e:	f7fa ffa7 	bl	2c60 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    7d12:	3801      	subs	r0, #1
    global_temp = local_data;
    7d14:	4d19      	ldr	r5, [pc, #100]	; (7d7c <opcode_0xD7()+0x70>)
    local_data = local_data - 1;
    7d16:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    7d18:	4e19      	ldr	r6, [pc, #100]	; (7d80 <opcode_0xD7()+0x74>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7d1a:	4620      	mov	r0, r4
    global_temp = local_data;
    7d1c:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7d1e:	f7fa ff6b 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7d22:	8830      	ldrh	r0, [r6, #0]
    7d24:	4621      	mov	r1, r4
    7d26:	f7fa fe5f 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7d2a:	4621      	mov	r1, r4
    7d2c:	8830      	ldrh	r0, [r6, #0]
    7d2e:	f7fa fe5b 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7d32:	4b14      	ldr	r3, [pc, #80]	; (7d84 <opcode_0xD7()+0x78>)
    Calculate_CMP(global_temp);
    7d34:	7828      	ldrb	r0, [r5, #0]
    temp = register_a - local_data;
    7d36:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7d38:	4913      	ldr	r1, [pc, #76]	; (7d88 <opcode_0xD7()+0x7c>)
    7d3a:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    7d3c:	eba2 0200 	sub.w	r2, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7d40:	780b      	ldrb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7d42:	b2d0      	uxtb	r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7d44:	bf94      	ite	ls
    7d46:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7d4a:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7d4e:	0612      	lsls	r2, r2, #24
    7d50:	d40e      	bmi.n	7d70 <opcode_0xD7()+0x64>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7d56:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7d58:	b960      	cbnz	r0, 7d74 <opcode_0xD7()+0x68>
    7d5a:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD7].length);
    7d5e:	4a0b      	ldr	r2, [pc, #44]	; (7d8c <opcode_0xD7()+0x80>)
    7d60:	480b      	ldr	r0, [pc, #44]	; (7d90 <opcode_0xD7()+0x84>)
    7d62:	700b      	strb	r3, [r1, #0]
    7d64:	f890 0bdd 	ldrb.w	r0, [r0, #3037]	; 0xbdd
    7d68:	8813      	ldrh	r3, [r2, #0]
    7d6a:	4418      	add	r0, r3
} // 0xD7 - DCP - ZeroPage , X
    7d6c:	b280      	uxth	r0, r0
    7d6e:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7d74:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7d78:	e7f1      	b.n	7d5e <opcode_0xD7()+0x52>
    7d7a:	bf00      	nop
    7d7c:	200188a0 	.word	0x200188a0
    7d80:	2001888a 	.word	0x2001888a
    7d84:	200188a3 	.word	0x200188a3
    7d88:	20004968 	.word	0x20004968
    7d8c:	2001888c 	.word	0x2001888c
    7d90:	20017418 	.word	0x20017418

00007d94 <opcode_0xC3()>:
uint16_t opcode_0xC3() {
    7d94:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_X()));
    7d96:	f7fb f81f 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    local_data = local_data - 1;
    7d9a:	3801      	subs	r0, #1
    global_temp = local_data;
    7d9c:	4d19      	ldr	r5, [pc, #100]	; (7e04 <opcode_0xC3()+0x70>)
    local_data = local_data - 1;
    7d9e:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    7da0:	4e19      	ldr	r6, [pc, #100]	; (7e08 <opcode_0xC3()+0x74>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7da2:	4620      	mov	r0, r4
    global_temp = local_data;
    7da4:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7da6:	f7fa ff27 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7daa:	8830      	ldrh	r0, [r6, #0]
    7dac:	4621      	mov	r1, r4
    7dae:	f7fa fe1b 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7db2:	4621      	mov	r1, r4
    7db4:	8830      	ldrh	r0, [r6, #0]
    7db6:	f7fa fe17 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7dba:	4b14      	ldr	r3, [pc, #80]	; (7e0c <opcode_0xC3()+0x78>)
    Calculate_CMP(global_temp);
    7dbc:	7828      	ldrb	r0, [r5, #0]
    temp = register_a - local_data;
    7dbe:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7dc0:	4913      	ldr	r1, [pc, #76]	; (7e10 <opcode_0xC3()+0x7c>)
    7dc2:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    7dc4:	eba2 0200 	sub.w	r2, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7dc8:	780b      	ldrb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7dca:	b2d0      	uxtb	r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7dcc:	bf94      	ite	ls
    7dce:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7dd2:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7dd6:	0612      	lsls	r2, r2, #24
    7dd8:	d40e      	bmi.n	7df8 <opcode_0xC3()+0x64>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7dde:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7de0:	b960      	cbnz	r0, 7dfc <opcode_0xC3()+0x68>
    7de2:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xC3].length);
    7de6:	4a0b      	ldr	r2, [pc, #44]	; (7e14 <opcode_0xC3()+0x80>)
    7de8:	480b      	ldr	r0, [pc, #44]	; (7e18 <opcode_0xC3()+0x84>)
    7dea:	700b      	strb	r3, [r1, #0]
    7dec:	f890 07cd 	ldrb.w	r0, [r0, #1997]	; 0x7cd
    7df0:	8813      	ldrh	r3, [r2, #0]
    7df2:	4418      	add	r0, r3
} // 0xC3 - DCP - Indexed Indirect X
    7df4:	b280      	uxth	r0, r0
    7df6:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7dfc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7e00:	e7f1      	b.n	7de6 <opcode_0xC3()+0x52>
    7e02:	bf00      	nop
    7e04:	200188a0 	.word	0x200188a0
    7e08:	2001888a 	.word	0x2001888a
    7e0c:	200188a3 	.word	0x200188a3
    7e10:	20004968 	.word	0x20004968
    7e14:	2001888c 	.word	0x2001888c
    7e18:	20017418 	.word	0x20017418

00007e1c <opcode_0xD3()>:
uint16_t opcode_0xD3() {
    7e1c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    7e1e:	2000      	movs	r0, #0
    global_temp = local_data;
    7e20:	4d1a      	ldr	r5, [pc, #104]	; (7e8c <opcode_0xD3()+0x70>)
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    7e22:	f7fb f803 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data - 1;
    7e26:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    7e28:	4e19      	ldr	r6, [pc, #100]	; (7e90 <opcode_0xD3()+0x74>)
    7e2a:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7e2c:	4620      	mov	r0, r4
    global_temp = local_data;
    7e2e:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7e30:	f7fa fee2 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7e34:	8830      	ldrh	r0, [r6, #0]
    7e36:	4621      	mov	r1, r4
    7e38:	f7fa fdd6 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7e3c:	4621      	mov	r1, r4
    7e3e:	8830      	ldrh	r0, [r6, #0]
    7e40:	f7fa fdd2 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7e44:	4b13      	ldr	r3, [pc, #76]	; (7e94 <opcode_0xD3()+0x78>)
    Calculate_CMP(global_temp);
    7e46:	7828      	ldrb	r0, [r5, #0]
    temp = register_a - local_data;
    7e48:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7e4a:	4913      	ldr	r1, [pc, #76]	; (7e98 <opcode_0xD3()+0x7c>)
    7e4c:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    7e4e:	eba2 0200 	sub.w	r2, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7e52:	780b      	ldrb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7e54:	b2d0      	uxtb	r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7e56:	bf94      	ite	ls
    7e58:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7e5c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7e60:	0612      	lsls	r2, r2, #24
    7e62:	d40e      	bmi.n	7e82 <opcode_0xD3()+0x66>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7e68:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7e6a:	b960      	cbnz	r0, 7e86 <opcode_0xD3()+0x6a>
    7e6c:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xD3].length);
    7e70:	4a0a      	ldr	r2, [pc, #40]	; (7e9c <opcode_0xD3()+0x80>)
    7e72:	480b      	ldr	r0, [pc, #44]	; (7ea0 <opcode_0xD3()+0x84>)
    7e74:	700b      	strb	r3, [r1, #0]
    7e76:	f890 0b0d 	ldrb.w	r0, [r0, #2829]	; 0xb0d
    7e7a:	8813      	ldrh	r3, [r2, #0]
    7e7c:	4418      	add	r0, r3
} // 0xD3 - DCP - Indirect Indexed  Y
    7e7e:	b280      	uxth	r0, r0
    7e80:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7e86:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7e8a:	e7f1      	b.n	7e70 <opcode_0xD3()+0x54>
    7e8c:	200188a0 	.word	0x200188a0
    7e90:	2001888a 	.word	0x2001888a
    7e94:	200188a3 	.word	0x200188a3
    7e98:	20004968 	.word	0x20004968
    7e9c:	2001888c 	.word	0x2001888c
    7ea0:	20017418 	.word	0x20017418

00007ea4 <opcode_0xCF()>:
uint16_t opcode_0xCF() {
    7ea4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    7ea6:	f7fa ff1b 	bl	2ce0 <Fetch_Absolute()>
    local_data = local_data - 1;
    7eaa:	3801      	subs	r0, #1
    global_temp = local_data;
    7eac:	4d19      	ldr	r5, [pc, #100]	; (7f14 <opcode_0xCF()+0x70>)
    local_data = local_data - 1;
    7eae:	b2c4      	uxtb	r4, r0
    write_byte(effective_address, local_data);
    7eb0:	4e19      	ldr	r6, [pc, #100]	; (7f18 <opcode_0xCF()+0x74>)
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7eb2:	4620      	mov	r0, r4
    global_temp = local_data;
    7eb4:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7eb6:	f7fa fe9f 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7eba:	8830      	ldrh	r0, [r6, #0]
    7ebc:	4621      	mov	r1, r4
    7ebe:	f7fa fd93 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7ec2:	4621      	mov	r1, r4
    7ec4:	8830      	ldrh	r0, [r6, #0]
    7ec6:	f7fa fd8f 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7eca:	4b14      	ldr	r3, [pc, #80]	; (7f1c <opcode_0xCF()+0x78>)
    Calculate_CMP(global_temp);
    7ecc:	7828      	ldrb	r0, [r5, #0]
    temp = register_a - local_data;
    7ece:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7ed0:	4913      	ldr	r1, [pc, #76]	; (7f20 <opcode_0xCF()+0x7c>)
    7ed2:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    7ed4:	eba2 0200 	sub.w	r2, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7ed8:	780b      	ldrb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7eda:	b2d0      	uxtb	r0, r2
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7edc:	bf94      	ite	ls
    7ede:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7ee2:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7ee6:	0612      	lsls	r2, r2, #24
    7ee8:	d40e      	bmi.n	7f08 <opcode_0xCF()+0x64>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    7eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7eee:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    7ef0:	b960      	cbnz	r0, 7f0c <opcode_0xCF()+0x68>
    7ef2:	f043 0302 	orr.w	r3, r3, #2
    return(register_pc + opcode_info[0xCF].length);
    7ef6:	4a0b      	ldr	r2, [pc, #44]	; (7f24 <opcode_0xCF()+0x80>)
    7ef8:	480b      	ldr	r0, [pc, #44]	; (7f28 <opcode_0xCF()+0x84>)
    7efa:	700b      	strb	r3, [r1, #0]
    7efc:	f890 0a3d 	ldrb.w	r0, [r0, #2621]	; 0xa3d
    7f00:	8813      	ldrh	r3, [r2, #0]
    7f02:	4418      	add	r0, r3
} // 0xCF - DCP - Absolute
    7f04:	b280      	uxth	r0, r0
    7f06:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    7f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    7f0c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    7f10:	e7f1      	b.n	7ef6 <opcode_0xCF()+0x52>
    7f12:	bf00      	nop
    7f14:	200188a0 	.word	0x200188a0
    7f18:	2001888a 	.word	0x2001888a
    7f1c:	200188a3 	.word	0x200188a3
    7f20:	20004968 	.word	0x20004968
    7f24:	2001888c 	.word	0x2001888c
    7f28:	20017418 	.word	0x20017418

00007f2c <opcode_0xDF()>:
uint16_t opcode_0xDF() {
    7f2c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    7f2e:	2000      	movs	r0, #0
    global_temp = local_data;
    7f30:	4d15      	ldr	r5, [pc, #84]	; (7f88 <opcode_0xDF()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    7f32:	f7fa fef1 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    7f36:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    7f38:	4e14      	ldr	r6, [pc, #80]	; (7f8c <opcode_0xDF()+0x60>)
    7f3a:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7f3c:	4620      	mov	r0, r4
    global_temp = local_data;
    7f3e:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7f40:	f7fa fe5a 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7f44:	8830      	ldrh	r0, [r6, #0]
    7f46:	4621      	mov	r1, r4
    7f48:	f7fa fd4e 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7f4c:	4621      	mov	r1, r4
    7f4e:	8830      	ldrh	r0, [r6, #0]
    7f50:	f7fa fd4a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7f54:	4b0e      	ldr	r3, [pc, #56]	; (7f90 <opcode_0xDF()+0x64>)
    Calculate_CMP(global_temp);
    7f56:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    7f58:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7f5a:	4a0e      	ldr	r2, [pc, #56]	; (7f94 <opcode_0xDF()+0x68>)
    7f5c:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    7f5e:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7f62:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7f64:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7f66:	bf94      	ite	ls
    7f68:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7f6c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    7f70:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7f72:	f7fa fe41 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDF].length);
    7f76:	4a08      	ldr	r2, [pc, #32]	; (7f98 <opcode_0xDF()+0x6c>)
    7f78:	4b08      	ldr	r3, [pc, #32]	; (7f9c <opcode_0xDF()+0x70>)
    7f7a:	f892 0d7d 	ldrb.w	r0, [r2, #3453]	; 0xd7d
    7f7e:	881b      	ldrh	r3, [r3, #0]
    7f80:	4418      	add	r0, r3
} // 0xDF - DCP - Absolute , X
    7f82:	b280      	uxth	r0, r0
    7f84:	bd70      	pop	{r4, r5, r6, pc}
    7f86:	bf00      	nop
    7f88:	200188a0 	.word	0x200188a0
    7f8c:	2001888a 	.word	0x2001888a
    7f90:	200188a3 	.word	0x200188a3
    7f94:	20004968 	.word	0x20004968
    7f98:	20017418 	.word	0x20017418
    7f9c:	2001888c 	.word	0x2001888c

00007fa0 <opcode_0xDB()>:
uint16_t opcode_0xDB() {
    7fa0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    7fa2:	2000      	movs	r0, #0
    global_temp = local_data;
    7fa4:	4d15      	ldr	r5, [pc, #84]	; (7ffc <opcode_0xDB()+0x5c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    7fa6:	f7fa fee7 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data - 1;
    7faa:	3801      	subs	r0, #1
    write_byte(effective_address, local_data);
    7fac:	4e14      	ldr	r6, [pc, #80]	; (8000 <opcode_0xDB()+0x60>)
    7fae:	b2c4      	uxtb	r4, r0
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7fb0:	4620      	mov	r0, r4
    global_temp = local_data;
    7fb2:	702c      	strb	r4, [r5, #0]
    Calc_Flags_NEGATIVE_ZERO(local_data);
    7fb4:	f7fa fe20 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    7fb8:	8830      	ldrh	r0, [r6, #0]
    7fba:	4621      	mov	r1, r4
    7fbc:	f7fa fd14 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    7fc0:	4621      	mov	r1, r4
    7fc2:	8830      	ldrh	r0, [r6, #0]
    7fc4:	f7fa fd10 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    7fc8:	4b0e      	ldr	r3, [pc, #56]	; (8004 <opcode_0xDB()+0x64>)
    Calculate_CMP(global_temp);
    7fca:	7829      	ldrb	r1, [r5, #0]
    temp = register_a - local_data;
    7fcc:	7818      	ldrb	r0, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7fce:	4a0e      	ldr	r2, [pc, #56]	; (8008 <opcode_0xDB()+0x68>)
    7fd0:	4281      	cmp	r1, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    7fd2:	eba0 0001 	sub.w	r0, r0, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7fd6:	7813      	ldrb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7fd8:	b2c0      	uxtb	r0, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    7fda:	bf94      	ite	ls
    7fdc:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    7fe0:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    7fe4:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(temp);
    7fe6:	f7fa fe07 	bl	2bf8 <Calc_Flags_NEGATIVE_ZERO(unsigned char)>
    return(register_pc + opcode_info[0xDB].length);
    7fea:	4a08      	ldr	r2, [pc, #32]	; (800c <opcode_0xDB()+0x6c>)
    7fec:	4b08      	ldr	r3, [pc, #32]	; (8010 <opcode_0xDB()+0x70>)
    7fee:	f892 0cad 	ldrb.w	r0, [r2, #3245]	; 0xcad
    7ff2:	881b      	ldrh	r3, [r3, #0]
    7ff4:	4418      	add	r0, r3
} // 0xDB - DCP - Absolute , Y
    7ff6:	b280      	uxth	r0, r0
    7ff8:	bd70      	pop	{r4, r5, r6, pc}
    7ffa:	bf00      	nop
    7ffc:	200188a0 	.word	0x200188a0
    8000:	2001888a 	.word	0x2001888a
    8004:	200188a3 	.word	0x200188a3
    8008:	20004968 	.word	0x20004968
    800c:	20017418 	.word	0x20017418
    8010:	2001888c 	.word	0x2001888c

00008014 <opcode_0xE7()>:

// --------------------------------------------------------------------------------------------------
// ISC - Increase memory by one, then subtract memory from accumulator (with borrow).
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xE7() {
    8014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return read_byte(register_pc+offset, false);
    8016:	4e19      	ldr	r6, [pc, #100]	; (807c <opcode_0xE7()+0x68>)
    8018:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    801a:	4d19      	ldr	r5, [pc, #100]	; (8080 <opcode_0xE7()+0x6c>)
    return read_byte(register_pc+offset, false);
    801c:	8830      	ldrh	r0, [r6, #0]
    global_temp = local_data;
    801e:	4f19      	ldr	r7, [pc, #100]	; (8084 <opcode_0xE7()+0x70>)
    8020:	3001      	adds	r0, #1
    8022:	b280      	uxth	r0, r0
    8024:	f7fa fb24 	bl	2670 <read_byte(unsigned short, bool)>
    return read_byte(effective_address, false);
    8028:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate(1);
    802a:	b280      	uxth	r0, r0
    802c:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    802e:	f7fa fb1f 	bl	2670 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    8032:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8034:	4a14      	ldr	r2, [pc, #80]	; (8088 <opcode_0xE7()+0x74>)
    8036:	b2c4      	uxtb	r4, r0
    8038:	7813      	ldrb	r3, [r2, #0]
    803a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    803c:	703c      	strb	r4, [r7, #0]
    803e:	d418      	bmi.n	8072 <opcode_0xE7()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8044:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    8046:	b9b4      	cbnz	r4, 8076 <opcode_0xE7()+0x62>
    8048:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    804c:	4621      	mov	r1, r4
    804e:	8828      	ldrh	r0, [r5, #0]
    8050:	7013      	strb	r3, [r2, #0]
    8052:	f7fa fcc9 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    8056:	4621      	mov	r1, r4
    8058:	8828      	ldrh	r0, [r5, #0]
    805a:	f7fa fcc5 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Calculate_SBC(global_temp);
    805e:	7838      	ldrb	r0, [r7, #0]
    8060:	f7fb fcc8 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE7].length);
    8064:	4a09      	ldr	r2, [pc, #36]	; (808c <opcode_0xE7()+0x78>)
    8066:	8833      	ldrh	r3, [r6, #0]
    8068:	f892 0f1d 	ldrb.w	r0, [r2, #3869]	; 0xf1d
    806c:	4418      	add	r0, r3
} // 0xE7 - ISC - ZeroPage
    806e:	b280      	uxth	r0, r0
    8070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8076:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    807a:	e7e7      	b.n	804c <opcode_0xE7()+0x38>
    807c:	2001888c 	.word	0x2001888c
    8080:	2001888a 	.word	0x2001888a
    8084:	200188a0 	.word	0x200188a0
    8088:	20004968 	.word	0x20004968
    808c:	20017418 	.word	0x20017418

00008090 <opcode_0xF7()>:
uint16_t opcode_0xF7() {
    8090:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    8092:	f7fa fde5 	bl	2c60 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    8096:	3001      	adds	r0, #1
    global_temp = local_data;
    8098:	4d13      	ldr	r5, [pc, #76]	; (80e8 <opcode_0xF7()+0x58>)
    local_data = local_data + 1;
    809a:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    809c:	4a13      	ldr	r2, [pc, #76]	; (80ec <opcode_0xF7()+0x5c>)
    809e:	0621      	lsls	r1, r4, #24
    80a0:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    80a2:	702c      	strb	r4, [r5, #0]
    80a4:	d41a      	bmi.n	80dc <opcode_0xF7()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    80a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    80aa:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    80ac:	b9c4      	cbnz	r4, 80e0 <opcode_0xF7()+0x50>
    80ae:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    80b2:	4e0f      	ldr	r6, [pc, #60]	; (80f0 <opcode_0xF7()+0x60>)
    80b4:	4621      	mov	r1, r4
    80b6:	7013      	strb	r3, [r2, #0]
    80b8:	8830      	ldrh	r0, [r6, #0]
    80ba:	f7fa fc95 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    80be:	4621      	mov	r1, r4
    80c0:	8830      	ldrh	r0, [r6, #0]
    80c2:	f7fa fc91 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    80c6:	7828      	ldrb	r0, [r5, #0]
    80c8:	f7fb fc94 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF7].length);
    80cc:	4a09      	ldr	r2, [pc, #36]	; (80f4 <opcode_0xF7()+0x64>)
    80ce:	4b0a      	ldr	r3, [pc, #40]	; (80f8 <opcode_0xF7()+0x68>)
    80d0:	f892 025d 	ldrb.w	r0, [r2, #605]	; 0x25d
    80d4:	881b      	ldrh	r3, [r3, #0]
    80d6:	4418      	add	r0, r3
} // 0xF7 - ISC - ZeroPage , X
    80d8:	b280      	uxth	r0, r0
    80da:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    80dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    80e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    80e4:	e7e5      	b.n	80b2 <opcode_0xF7()+0x22>
    80e6:	bf00      	nop
    80e8:	200188a0 	.word	0x200188a0
    80ec:	20004968 	.word	0x20004968
    80f0:	2001888a 	.word	0x2001888a
    80f4:	20018418 	.word	0x20018418
    80f8:	2001888c 	.word	0x2001888c

000080fc <opcode_0xE3()>:
uint16_t opcode_0xE3() {
    80fc:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_X()));
    80fe:	f7fa fe6b 	bl	2dd8 <Fetch_Indexed_Indirect_X()>
    local_data = local_data + 1;
    8102:	3001      	adds	r0, #1
    global_temp = local_data;
    8104:	4d13      	ldr	r5, [pc, #76]	; (8154 <opcode_0xE3()+0x58>)
    local_data = local_data + 1;
    8106:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8108:	4a13      	ldr	r2, [pc, #76]	; (8158 <opcode_0xE3()+0x5c>)
    810a:	0621      	lsls	r1, r4, #24
    810c:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    810e:	702c      	strb	r4, [r5, #0]
    8110:	d41a      	bmi.n	8148 <opcode_0xE3()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8116:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    8118:	b9c4      	cbnz	r4, 814c <opcode_0xE3()+0x50>
    811a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    811e:	4e0f      	ldr	r6, [pc, #60]	; (815c <opcode_0xE3()+0x60>)
    8120:	4621      	mov	r1, r4
    8122:	7013      	strb	r3, [r2, #0]
    8124:	8830      	ldrh	r0, [r6, #0]
    8126:	f7fa fc5f 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    812a:	4621      	mov	r1, r4
    812c:	8830      	ldrh	r0, [r6, #0]
    812e:	f7fa fc5b 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    8132:	7828      	ldrb	r0, [r5, #0]
    8134:	f7fb fc5e 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xE3].length);
    8138:	4a09      	ldr	r2, [pc, #36]	; (8160 <opcode_0xE3()+0x64>)
    813a:	4b0a      	ldr	r3, [pc, #40]	; (8164 <opcode_0xE3()+0x68>)
    813c:	f892 0e4d 	ldrb.w	r0, [r2, #3661]	; 0xe4d
    8140:	881b      	ldrh	r3, [r3, #0]
    8142:	4418      	add	r0, r3
} // 0xE3 - ISC - Indexed Indirect X
    8144:	b280      	uxth	r0, r0
    8146:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    814c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8150:	e7e5      	b.n	811e <opcode_0xE3()+0x22>
    8152:	bf00      	nop
    8154:	200188a0 	.word	0x200188a0
    8158:	20004968 	.word	0x20004968
    815c:	2001888a 	.word	0x2001888a
    8160:	20017418 	.word	0x20017418
    8164:	2001888c 	.word	0x2001888c

00008168 <opcode_0xF3()>:
uint16_t opcode_0xF3() {
    8168:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    816a:	2000      	movs	r0, #0
    global_temp = local_data;
    816c:	4d14      	ldr	r5, [pc, #80]	; (81c0 <opcode_0xF3()+0x58>)
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    816e:	f7fa fe5d 	bl	2e2c <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data + 1;
    8172:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8174:	4a13      	ldr	r2, [pc, #76]	; (81c4 <opcode_0xF3()+0x5c>)
    8176:	b2c4      	uxtb	r4, r0
    8178:	7813      	ldrb	r3, [r2, #0]
    817a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    817c:	702c      	strb	r4, [r5, #0]
    817e:	d41a      	bmi.n	81b6 <opcode_0xF3()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8184:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    8186:	b9c4      	cbnz	r4, 81ba <opcode_0xF3()+0x52>
    8188:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    818c:	4e0e      	ldr	r6, [pc, #56]	; (81c8 <opcode_0xF3()+0x60>)
    818e:	4621      	mov	r1, r4
    8190:	7013      	strb	r3, [r2, #0]
    8192:	8830      	ldrh	r0, [r6, #0]
    8194:	f7fa fc28 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    8198:	4621      	mov	r1, r4
    819a:	8830      	ldrh	r0, [r6, #0]
    819c:	f7fa fc24 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    81a0:	7828      	ldrb	r0, [r5, #0]
    81a2:	f7fb fc27 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xF3].length);
    81a6:	4a09      	ldr	r2, [pc, #36]	; (81cc <opcode_0xF3()+0x64>)
    81a8:	4b09      	ldr	r3, [pc, #36]	; (81d0 <opcode_0xF3()+0x68>)
    81aa:	f892 018d 	ldrb.w	r0, [r2, #397]	; 0x18d
    81ae:	881b      	ldrh	r3, [r3, #0]
    81b0:	4418      	add	r0, r3
} // 0xF3 - ISC - Indirect Indexed  Y
    81b2:	b280      	uxth	r0, r0
    81b4:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    81b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    81ba:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    81be:	e7e5      	b.n	818c <opcode_0xF3()+0x24>
    81c0:	200188a0 	.word	0x200188a0
    81c4:	20004968 	.word	0x20004968
    81c8:	2001888a 	.word	0x2001888a
    81cc:	20018418 	.word	0x20018418
    81d0:	2001888c 	.word	0x2001888c

000081d4 <opcode_0xEF()>:
uint16_t opcode_0xEF() {
    81d4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    81d6:	f7fa fd83 	bl	2ce0 <Fetch_Absolute()>
    local_data = local_data + 1;
    81da:	3001      	adds	r0, #1
    global_temp = local_data;
    81dc:	4d13      	ldr	r5, [pc, #76]	; (822c <opcode_0xEF()+0x58>)
    local_data = local_data + 1;
    81de:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    81e0:	4a13      	ldr	r2, [pc, #76]	; (8230 <opcode_0xEF()+0x5c>)
    81e2:	0621      	lsls	r1, r4, #24
    81e4:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    81e6:	702c      	strb	r4, [r5, #0]
    81e8:	d41a      	bmi.n	8220 <opcode_0xEF()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    81ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    81ee:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    81f0:	b9c4      	cbnz	r4, 8224 <opcode_0xEF()+0x50>
    81f2:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    81f6:	4e0f      	ldr	r6, [pc, #60]	; (8234 <opcode_0xEF()+0x60>)
    81f8:	4621      	mov	r1, r4
    81fa:	7013      	strb	r3, [r2, #0]
    81fc:	8830      	ldrh	r0, [r6, #0]
    81fe:	f7fa fbf3 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    8202:	4621      	mov	r1, r4
    8204:	8830      	ldrh	r0, [r6, #0]
    8206:	f7fa fbef 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    820a:	7828      	ldrb	r0, [r5, #0]
    820c:	f7fb fbf2 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xEF].length);
    8210:	4a09      	ldr	r2, [pc, #36]	; (8238 <opcode_0xEF()+0x64>)
    8212:	4b0a      	ldr	r3, [pc, #40]	; (823c <opcode_0xEF()+0x68>)
    8214:	f892 00bd 	ldrb.w	r0, [r2, #189]	; 0xbd
    8218:	881b      	ldrh	r3, [r3, #0]
    821a:	4418      	add	r0, r3
} // 0xEF - ISC - Absolute
    821c:	b280      	uxth	r0, r0
    821e:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8224:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8228:	e7e5      	b.n	81f6 <opcode_0xEF()+0x22>
    822a:	bf00      	nop
    822c:	200188a0 	.word	0x200188a0
    8230:	20004968 	.word	0x20004968
    8234:	2001888a 	.word	0x2001888a
    8238:	20018418 	.word	0x20018418
    823c:	2001888c 	.word	0x2001888c

00008240 <opcode_0xFF()>:
uint16_t opcode_0xFF() {
    8240:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    8242:	2000      	movs	r0, #0
    global_temp = local_data;
    8244:	4d14      	ldr	r5, [pc, #80]	; (8298 <opcode_0xFF()+0x58>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    8246:	f7fa fd67 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    local_data = local_data + 1;
    824a:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    824c:	4a13      	ldr	r2, [pc, #76]	; (829c <opcode_0xFF()+0x5c>)
    824e:	b2c4      	uxtb	r4, r0
    8250:	7813      	ldrb	r3, [r2, #0]
    8252:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    8254:	702c      	strb	r4, [r5, #0]
    8256:	d41a      	bmi.n	828e <opcode_0xFF()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    825c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    825e:	b9c4      	cbnz	r4, 8292 <opcode_0xFF()+0x52>
    8260:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    8264:	4e0e      	ldr	r6, [pc, #56]	; (82a0 <opcode_0xFF()+0x60>)
    8266:	4621      	mov	r1, r4
    8268:	7013      	strb	r3, [r2, #0]
    826a:	8830      	ldrh	r0, [r6, #0]
    826c:	f7fa fbbc 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    8270:	4621      	mov	r1, r4
    8272:	8830      	ldrh	r0, [r6, #0]
    8274:	f7fa fbb8 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    8278:	7828      	ldrb	r0, [r5, #0]
    827a:	f7fb fbbb 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFF].length);
    827e:	4a09      	ldr	r2, [pc, #36]	; (82a4 <opcode_0xFF()+0x64>)
    8280:	4b09      	ldr	r3, [pc, #36]	; (82a8 <opcode_0xFF()+0x68>)
    8282:	f892 03fd 	ldrb.w	r0, [r2, #1021]	; 0x3fd
    8286:	881b      	ldrh	r3, [r3, #0]
    8288:	4418      	add	r0, r3
} // 0xFF - ISC - Absolute , X
    828a:	b280      	uxth	r0, r0
    828c:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    828e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8292:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8296:	e7e5      	b.n	8264 <opcode_0xFF()+0x24>
    8298:	200188a0 	.word	0x200188a0
    829c:	20004968 	.word	0x20004968
    82a0:	2001888a 	.word	0x2001888a
    82a4:	20018418 	.word	0x20018418
    82a8:	2001888c 	.word	0x2001888c

000082ac <opcode_0xFB()>:
uint16_t opcode_0xFB() {
    82ac:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    82ae:	2000      	movs	r0, #0
    global_temp = local_data;
    82b0:	4d14      	ldr	r5, [pc, #80]	; (8304 <opcode_0xFB()+0x58>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    82b2:	f7fa fd61 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data + 1;
    82b6:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    82b8:	4a13      	ldr	r2, [pc, #76]	; (8308 <opcode_0xFB()+0x5c>)
    82ba:	b2c4      	uxtb	r4, r0
    82bc:	7813      	ldrb	r3, [r2, #0]
    82be:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    82c0:	702c      	strb	r4, [r5, #0]
    82c2:	d41a      	bmi.n	82fa <opcode_0xFB()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    82c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    82c8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    82ca:	b9c4      	cbnz	r4, 82fe <opcode_0xFB()+0x52>
    82cc:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    82d0:	4e0e      	ldr	r6, [pc, #56]	; (830c <opcode_0xFB()+0x60>)
    82d2:	4621      	mov	r1, r4
    82d4:	7013      	strb	r3, [r2, #0]
    82d6:	8830      	ldrh	r0, [r6, #0]
    82d8:	f7fa fb86 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    82dc:	4621      	mov	r1, r4
    82de:	8830      	ldrh	r0, [r6, #0]
    82e0:	f7fa fb82 	bl	29e8 <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    82e4:	7828      	ldrb	r0, [r5, #0]
    82e6:	f7fb fb85 	bl	39f4 <Calculate_SBC(unsigned short)>
    return(register_pc + opcode_info[0xFB].length);
    82ea:	4a09      	ldr	r2, [pc, #36]	; (8310 <opcode_0xFB()+0x64>)
    82ec:	4b09      	ldr	r3, [pc, #36]	; (8314 <opcode_0xFB()+0x68>)
    82ee:	f892 032d 	ldrb.w	r0, [r2, #813]	; 0x32d
    82f2:	881b      	ldrh	r3, [r3, #0]
    82f4:	4418      	add	r0, r3
} // 0xFB - ISC - Absolute , Y
    82f6:	b280      	uxth	r0, r0
    82f8:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    82fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    82fe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8302:	e7e5      	b.n	82d0 <opcode_0xFB()+0x24>
    8304:	200188a0 	.word	0x200188a0
    8308:	20004968 	.word	0x20004968
    830c:	2001888a 	.word	0x2001888a
    8310:	20018418 	.word	0x20018418
    8314:	2001888c 	.word	0x2001888c

00008318 <opcode_0x0B()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x0B() {
    8318:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    831a:	4c11      	ldr	r4, [pc, #68]	; (8360 <opcode_0x0B()+0x48>)
    831c:	2100      	movs	r1, #0
    831e:	8820      	ldrh	r0, [r4, #0]
    8320:	3001      	adds	r0, #1
    8322:	b280      	uxth	r0, r0
    8324:	f7fa f9a4 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    8328:	4b0e      	ldr	r3, [pc, #56]	; (8364 <opcode_0x0B()+0x4c>)
    832a:	781a      	ldrb	r2, [r3, #0]
    832c:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    832e:	4a0e      	ldr	r2, [pc, #56]	; (8368 <opcode_0x0B()+0x50>)
    8330:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    8332:	7018      	strb	r0, [r3, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8334:	7813      	ldrb	r3, [r2, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    8336:	d40d      	bmi.n	8354 <opcode_0x0B()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8338:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    833c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    833e:	b958      	cbnz	r0, 8358 <opcode_0x0B()+0x40>
    8340:	f043 0302 	orr.w	r3, r3, #2
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x0B].length);
    8344:	4809      	ldr	r0, [pc, #36]	; (836c <opcode_0x0B()+0x54>)
    8346:	8821      	ldrh	r1, [r4, #0]
    8348:	f890 026d 	ldrb.w	r0, [r0, #621]	; 0x26d
    834c:	7013      	strb	r3, [r2, #0]
    834e:	4408      	add	r0, r1
} // 0x0B - ANC - Immediate
    8350:	b280      	uxth	r0, r0
    8352:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8354:	f043 0381 	orr.w	r3, r3, #129	; 0x81
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8358:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    835c:	e7f2      	b.n	8344 <opcode_0x0B()+0x2c>
    835e:	bf00      	nop
    8360:	2001888c 	.word	0x2001888c
    8364:	200188a3 	.word	0x200188a3
    8368:	20004968 	.word	0x20004968
    836c:	20015418 	.word	0x20015418

00008370 <opcode_0x2B()>:
uint16_t opcode_0x2B() {
    8370:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    8372:	4c11      	ldr	r4, [pc, #68]	; (83b8 <opcode_0x2B()+0x48>)
    8374:	2100      	movs	r1, #0
    8376:	8820      	ldrh	r0, [r4, #0]
    8378:	3001      	adds	r0, #1
    837a:	b280      	uxth	r0, r0
    837c:	f7fa f978 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    8380:	4b0e      	ldr	r3, [pc, #56]	; (83bc <opcode_0x2B()+0x4c>)
    8382:	781a      	ldrb	r2, [r3, #0]
    8384:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    8386:	4a0e      	ldr	r2, [pc, #56]	; (83c0 <opcode_0x2B()+0x50>)
    8388:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    838a:	7018      	strb	r0, [r3, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    838c:	7813      	ldrb	r3, [r2, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    838e:	d40d      	bmi.n	83ac <opcode_0x2B()+0x3c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8390:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    8394:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    8396:	b958      	cbnz	r0, 83b0 <opcode_0x2B()+0x40>
    8398:	f043 0302 	orr.w	r3, r3, #2
    Calculate_ANC(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x2B].length);
    839c:	4809      	ldr	r0, [pc, #36]	; (83c4 <opcode_0x2B()+0x54>)
    839e:	8821      	ldrh	r1, [r4, #0]
    83a0:	f890 08ed 	ldrb.w	r0, [r0, #2285]	; 0x8ed
    83a4:	7013      	strb	r3, [r2, #0]
    83a6:	4408      	add	r0, r1
} // 0x2B - ANC - Immediate
    83a8:	b280      	uxth	r0, r0
    83aa:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    83ac:	f043 0381 	orr.w	r3, r3, #129	; 0x81
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    83b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    83b4:	e7f2      	b.n	839c <opcode_0x2B()+0x2c>
    83b6:	bf00      	nop
    83b8:	2001888c 	.word	0x2001888c
    83bc:	200188a3 	.word	0x200188a3
    83c0:	20004968 	.word	0x20004968
    83c4:	20015418 	.word	0x20015418

000083c8 <opcode_0x4B()>:
    register_a = (0x7F & (register_a >> 1));

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x4B() {
    83c8:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    83ca:	4c13      	ldr	r4, [pc, #76]	; (8418 <opcode_0x4B()+0x50>)
    83cc:	2100      	movs	r1, #0
    83ce:	8820      	ldrh	r0, [r4, #0]
    83d0:	3001      	adds	r0, #1
    83d2:	b280      	uxth	r0, r0
    83d4:	f7fa f94c 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    83d8:	4910      	ldr	r1, [pc, #64]	; (841c <opcode_0x4B()+0x54>)
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    83da:	4a11      	ldr	r2, [pc, #68]	; (8420 <opcode_0x4B()+0x58>)
    register_a = register_a & local_data;
    83dc:	780b      	ldrb	r3, [r1, #0]
    83de:	4018      	ands	r0, r3
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    83e0:	7813      	ldrb	r3, [r2, #0]
    83e2:	f010 0f01 	tst.w	r0, #1
    register_a = (0x7F & (register_a >> 1));
    83e6:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    83ea:	bf14      	ite	ne
    83ec:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    83f0:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = (0x7F & (register_a >> 1));
    83f4:	7008      	strb	r0, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    83f6:	b958      	cbnz	r0, 8410 <opcode_0x4B()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    83f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    83fc:	f043 0302 	orr.w	r3, r3, #2
    Calculate_ALR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x4B].length);
    8400:	4808      	ldr	r0, [pc, #32]	; (8424 <opcode_0x4B()+0x5c>)
    8402:	8821      	ldrh	r1, [r4, #0]
    8404:	f890 0f6d 	ldrb.w	r0, [r0, #3949]	; 0xf6d
    8408:	7013      	strb	r3, [r2, #0]
    840a:	4408      	add	r0, r1
    840c:	b280      	uxth	r0, r0
} // 0x4B - ALR - Immediate
    840e:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8410:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    8414:	e7f4      	b.n	8400 <opcode_0x4B()+0x38>
    8416:	bf00      	nop
    8418:	2001888c 	.word	0x2001888c
    841c:	200188a3 	.word	0x200188a3
    8420:	20004968 	.word	0x20004968
    8424:	20015418 	.word	0x20015418

00008428 <opcode_0x6B()>:
    } // Set the C flag 

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
uint16_t opcode_0x6B() {
    8428:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    842a:	4c11      	ldr	r4, [pc, #68]	; (8470 <opcode_0x6B()+0x48>)
    842c:	2100      	movs	r1, #0
    842e:	8820      	ldrh	r0, [r4, #0]
    8430:	3001      	adds	r0, #1
    8432:	b280      	uxth	r0, r0
    8434:	f7fa f91c 	bl	2670 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    8438:	490e      	ldr	r1, [pc, #56]	; (8474 <opcode_0x6B()+0x4c>)
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    843a:	4a0f      	ldr	r2, [pc, #60]	; (8478 <opcode_0x6B()+0x50>)
    register_a = register_a & local_data;
    843c:	780b      	ldrb	r3, [r1, #0]
    register_a = (0x7F & (register_a >> 1));
    843e:	4018      	ands	r0, r3
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    8440:	7813      	ldrb	r3, [r2, #0]
    register_a = (0x7F & (register_a >> 1));
    8442:	0840      	lsrs	r0, r0, #1
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8444:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    8448:	7008      	strb	r0, [r1, #0]
    if ((0xC0 & register_a) == 0x40) {
    844a:	f000 0140 	and.w	r1, r0, #64	; 0x40
    844e:	b951      	cbnz	r1, 8466 <opcode_0x6B()+0x3e>
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    8450:	b958      	cbnz	r0, 846a <opcode_0x6B()+0x42>
    8452:	f043 0302 	orr.w	r3, r3, #2
    Calculate_ARR(Fetch_Immediate(1));
    return(register_pc + opcode_info[0x6B].length);
    8456:	4809      	ldr	r0, [pc, #36]	; (847c <opcode_0x6B()+0x54>)
    8458:	8821      	ldrh	r1, [r4, #0]
    845a:	f890 05ed 	ldrb.w	r0, [r0, #1517]	; 0x5ed
    845e:	7013      	strb	r3, [r2, #0]
    8460:	4408      	add	r0, r1
    8462:	b280      	uxth	r0, r0
} // 0x6B - ARR - Immediate
    8464:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    846a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    846e:	e7f2      	b.n	8456 <opcode_0x6B()+0x2e>
    8470:	2001888c 	.word	0x2001888c
    8474:	200188a3 	.word	0x200188a3
    8478:	20004968 	.word	0x20004968
    847c:	20016418 	.word	0x20016418

00008480 <opcode_0xCB()>:
    register_x = (0xFF & register_x);
    Calc_Flags_NEGATIVE_ZERO(register_x);

    return;
}
uint16_t opcode_0xCB() {
    8480:	b510      	push	{r4, lr}
    return read_byte(register_pc+offset, false);
    8482:	4c16      	ldr	r4, [pc, #88]	; (84dc <opcode_0xCB()+0x5c>)
    8484:	2100      	movs	r1, #0
    8486:	8820      	ldrh	r0, [r4, #0]
    8488:	3001      	adds	r0, #1
    848a:	b280      	uxth	r0, r0
    848c:	f7fa f8f0 	bl	2670 <read_byte(unsigned short, bool)>
    register_x = register_a & register_x;
    8490:	4a13      	ldr	r2, [pc, #76]	; (84e0 <opcode_0xCB()+0x60>)
    8492:	4b14      	ldr	r3, [pc, #80]	; (84e4 <opcode_0xCB()+0x64>)
    8494:	7811      	ldrb	r1, [r2, #0]
    8496:	781b      	ldrb	r3, [r3, #0]
    8498:	400b      	ands	r3, r1
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    849a:	4913      	ldr	r1, [pc, #76]	; (84e8 <opcode_0xCB()+0x68>)
    register_x = register_x - local_data;
    849c:	1a1b      	subs	r3, r3, r0
    849e:	b2db      	uxtb	r3, r3
    signed_total = (int16_t) register_x - (int16_t)(local_data);
    84a0:	1a18      	subs	r0, r3, r0
    register_x = register_x - local_data;
    84a2:	7013      	strb	r3, [r2, #0]
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    84a4:	780a      	ldrb	r2, [r1, #0]
    84a6:	0400      	lsls	r0, r0, #16
    84a8:	bf54      	ite	pl
    84aa:	f042 0201 	orrpl.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    84ae:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    84b2:	0618      	lsls	r0, r3, #24
    84b4:	d40d      	bmi.n	84d2 <opcode_0xCB()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    84b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    84ba:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    84bc:	b95b      	cbnz	r3, 84d6 <opcode_0xCB()+0x56>
    84be:	f042 0202 	orr.w	r2, r2, #2
    Calculate_SBX(Fetch_Immediate(1));
    return(register_pc + opcode_info[0xCB].length);
    84c2:	480a      	ldr	r0, [pc, #40]	; (84ec <opcode_0xCB()+0x6c>)
    84c4:	8823      	ldrh	r3, [r4, #0]
    84c6:	f890 096d 	ldrb.w	r0, [r0, #2413]	; 0x96d
    84ca:	700a      	strb	r2, [r1, #0]
    84cc:	4418      	add	r0, r3
} // 0xCB - SBX - Immediate
    84ce:	b280      	uxth	r0, r0
    84d0:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    84d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    84d6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    84da:	e7f2      	b.n	84c2 <opcode_0xCB()+0x42>
    84dc:	2001888c 	.word	0x2001888c
    84e0:	200188a4 	.word	0x200188a4
    84e4:	200188a3 	.word	0x200188a3
    84e8:	20004968 	.word	0x20004968
    84ec:	20017418 	.word	0x20017418

000084f0 <opcode_0xBB()>:

// --------------------------------------------------------------------------------------------------
// LAS - AND memory with stack pointer, transfer result to accumulator, X register and stack pointer.
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0xBB() {
    84f0:	b508      	push	{r3, lr}
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    84f2:	2001      	movs	r0, #1
    84f4:	f7fa fc40 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    84f8:	4b10      	ldr	r3, [pc, #64]	; (853c <opcode_0xBB()+0x4c>)
    register_a = register_sp;
    84fa:	4911      	ldr	r1, [pc, #68]	; (8540 <opcode_0xBB()+0x50>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    84fc:	f893 c000 	ldrb.w	ip, [r3]
    register_x = register_sp;
    8500:	4a10      	ldr	r2, [pc, #64]	; (8544 <opcode_0xBB()+0x54>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    8502:	ea00 000c 	and.w	r0, r0, ip
    register_x = register_sp;
    8506:	7010      	strb	r0, [r2, #0]
    register_a = register_sp;
    8508:	7008      	strb	r0, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    850a:	0601      	lsls	r1, r0, #24
    850c:	4a0e      	ldr	r2, [pc, #56]	; (8548 <opcode_0xBB()+0x58>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    850e:	7018      	strb	r0, [r3, #0]
    8510:	7813      	ldrb	r3, [r2, #0]
    8512:	d40e      	bmi.n	8532 <opcode_0xBB()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    8514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8518:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    851a:	b960      	cbnz	r0, 8536 <opcode_0xBB()+0x46>
    851c:	f043 0302 	orr.w	r3, r3, #2
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return(register_pc + opcode_info[0xBB].length);
    8520:	490a      	ldr	r1, [pc, #40]	; (854c <opcode_0xBB()+0x5c>)
    8522:	480b      	ldr	r0, [pc, #44]	; (8550 <opcode_0xBB()+0x60>)
    8524:	7013      	strb	r3, [r2, #0]
    8526:	f890 062d 	ldrb.w	r0, [r0, #1581]	; 0x62d
    852a:	880b      	ldrh	r3, [r1, #0]
    852c:	4418      	add	r0, r3
} // 0xBB - LAS - Absolute , Y
    852e:	b280      	uxth	r0, r0
    8530:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    8532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    8536:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    853a:	e7f1      	b.n	8520 <opcode_0xBB()+0x30>
    853c:	20004969 	.word	0x20004969
    8540:	200188a3 	.word	0x200188a3
    8544:	200188a4 	.word	0x200188a4
    8548:	20004968 	.word	0x20004968
    854c:	2001888c 	.word	0x2001888c
    8550:	20017418 	.word	0x20017418

00008554 <opcode_0x02()>:

// --------------------------------------------------------------------------------------------------
// JAM - Lock up the processor
// --------------------------------------------------------------------------------------------------
uint16_t opcode_0x02() {
    Fetch_Immediate(1);
    8554:	2001      	movs	r0, #1
uint16_t opcode_0x02() {
    8556:	b508      	push	{r3, lr}
    Fetch_Immediate(1);
    8558:	f7fa fb62 	bl	2c20 <Fetch_Immediate(unsigned char)>
    while (1) {}
    855c:	e7fe      	b.n	855c <opcode_0x02()+0x8>
    855e:	bf00      	nop

00008560 <display_next_instruction(unsigned short, unsigned char)>:
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    8560:	b570      	push	{r4, r5, r6, lr}
    String op      = opcode_info[opcode].opcode;
    8562:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    uint8_t length = opcode_info[opcode].length;
    8566:	4e32      	ldr	r6, [pc, #200]	; (8630 <display_next_instruction(unsigned short, unsigned char)+0xd0>)
    8568:	2334      	movs	r3, #52	; 0x34
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    856a:	b092      	sub	sp, #72	; 0x48
    String op      = opcode_info[opcode].opcode;
    856c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    8570:	460c      	mov	r4, r1
    uint8_t length = opcode_info[opcode].length;
    8572:	fb03 6301 	mla	r3, r3, r1, r6
void display_next_instruction(uint16_t pc, uint8_t opcode) {
    8576:	4605      	mov	r5, r0
    String op      = opcode_info[opcode].opcode;
    8578:	eb06 0182 	add.w	r1, r6, r2, lsl #2
    857c:	a806      	add	r0, sp, #24
    uint8_t length = opcode_info[opcode].length;
    857e:	f893 6031 	ldrb.w	r6, [r3, #49]	; 0x31
    String op      = opcode_info[opcode].opcode;
    8582:	f001 faeb 	bl	9b5c <String::String(String const&)>
    switch (length) {
    8586:	2e02      	cmp	r6, #2
    8588:	d013      	beq.n	85b2 <display_next_instruction(unsigned short, unsigned char)+0x52>
    858a:	2e03      	cmp	r6, #3
    858c:	d02f      	beq.n	85ee <display_next_instruction(unsigned short, unsigned char)+0x8e>
    858e:	2e01      	cmp	r6, #1
    8590:	d022      	beq.n	85d8 <display_next_instruction(unsigned short, unsigned char)+0x78>
    8592:	ae0a      	add	r6, sp, #40	; 0x28
							  return write((const uint8_t *)str, strlen(str)); }
    8594:	4630      	mov	r0, r6
    8596:	f004 fe93 	bl	d2c0 <strlen>
    859a:	4601      	mov	r1, r0
    859c:	4630      	mov	r0, r6
    859e:	f002 ff3f 	bl	b420 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    85a2:	4824      	ldr	r0, [pc, #144]	; (8634 <display_next_instruction(unsigned short, unsigned char)+0xd4>)
    85a4:	f001 fab8 	bl	9b18 <Print::println()>
}
    85a8:	a806      	add	r0, sp, #24
    85aa:	f001 faf5 	bl	9b98 <String::~String()>
    85ae:	b012      	add	sp, #72	; 0x48
    85b0:	bd70      	pop	{r4, r5, r6, pc}
            uint8_t op1 = read_byte(pc+1, false);
    85b2:	1c68      	adds	r0, r5, #1
    85b4:	2100      	movs	r1, #0
    85b6:	b280      	uxth	r0, r0
    85b8:	f7fa f85a 	bl	2670 <read_byte(unsigned short, bool)>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    85bc:	9b06      	ldr	r3, [sp, #24]
    85be:	2b00      	cmp	r3, #0
    85c0:	d02f      	beq.n	8622 <display_next_instruction(unsigned short, unsigned char)+0xc2>
            sprintf(buffer, "[%04X] %02X %02X     %s %02X", pc, opcode, op1, op.c_str(), op1);
    85c2:	ae0a      	add	r6, sp, #40	; 0x28
    85c4:	9301      	str	r3, [sp, #4]
    85c6:	9002      	str	r0, [sp, #8]
    85c8:	4623      	mov	r3, r4
    85ca:	9000      	str	r0, [sp, #0]
    85cc:	462a      	mov	r2, r5
    85ce:	491a      	ldr	r1, [pc, #104]	; (8638 <display_next_instruction(unsigned short, unsigned char)+0xd8>)
    85d0:	4630      	mov	r0, r6
    85d2:	f004 fa2b 	bl	ca2c <sprintf>
            break;
    85d6:	e7dd      	b.n	8594 <display_next_instruction(unsigned short, unsigned char)+0x34>
    85d8:	9906      	ldr	r1, [sp, #24]
    85da:	b321      	cbz	r1, 8626 <display_next_instruction(unsigned short, unsigned char)+0xc6>
            sprintf(buffer, "[%04X] %02X        %s", pc, opcode, op.c_str());
    85dc:	ae0a      	add	r6, sp, #40	; 0x28
    85de:	9100      	str	r1, [sp, #0]
    85e0:	4623      	mov	r3, r4
    85e2:	462a      	mov	r2, r5
    85e4:	4915      	ldr	r1, [pc, #84]	; (863c <display_next_instruction(unsigned short, unsigned char)+0xdc>)
    85e6:	4630      	mov	r0, r6
    85e8:	f004 fa20 	bl	ca2c <sprintf>
            break;
    85ec:	e7d2      	b.n	8594 <display_next_instruction(unsigned short, unsigned char)+0x34>
            uint8_t op1 = read_byte(pc+1, false);
    85ee:	1c68      	adds	r0, r5, #1
    85f0:	2100      	movs	r1, #0
    85f2:	b280      	uxth	r0, r0
    85f4:	f7fa f83c 	bl	2670 <read_byte(unsigned short, bool)>
            uint8_t op2 = read_byte(pc+2, false);
    85f8:	1cab      	adds	r3, r5, #2
            uint8_t op1 = read_byte(pc+1, false);
    85fa:	4606      	mov	r6, r0
            uint8_t op2 = read_byte(pc+2, false);
    85fc:	2100      	movs	r1, #0
    85fe:	b298      	uxth	r0, r3
    8600:	f7fa f836 	bl	2670 <read_byte(unsigned short, bool)>
    8604:	9b06      	ldr	r3, [sp, #24]
    8606:	b183      	cbz	r3, 862a <display_next_instruction(unsigned short, unsigned char)+0xca>
            sprintf(buffer, "[%04X] %02X %02X %02X  %s %02X%02X", 
    8608:	9600      	str	r6, [sp, #0]
    860a:	462a      	mov	r2, r5
    860c:	9302      	str	r3, [sp, #8]
    860e:	4623      	mov	r3, r4
    8610:	9001      	str	r0, [sp, #4]
    8612:	490b      	ldr	r1, [pc, #44]	; (8640 <display_next_instruction(unsigned short, unsigned char)+0xe0>)
    8614:	e9cd 0603 	strd	r0, r6, [sp, #12]
    8618:	ae0a      	add	r6, sp, #40	; 0x28
    861a:	4630      	mov	r0, r6
    861c:	f004 fa06 	bl	ca2c <sprintf>
            break;
    8620:	e7b8      	b.n	8594 <display_next_instruction(unsigned short, unsigned char)+0x34>
    8622:	4b08      	ldr	r3, [pc, #32]	; (8644 <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    8624:	e7cd      	b.n	85c2 <display_next_instruction(unsigned short, unsigned char)+0x62>
    8626:	4907      	ldr	r1, [pc, #28]	; (8644 <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    8628:	e7d8      	b.n	85dc <display_next_instruction(unsigned short, unsigned char)+0x7c>
    862a:	4b06      	ldr	r3, [pc, #24]	; (8644 <display_next_instruction(unsigned short, unsigned char)+0xe4>)
    862c:	e7ec      	b.n	8608 <display_next_instruction(unsigned short, unsigned char)+0xa8>
    862e:	bf00      	nop
    8630:	20015418 	.word	0x20015418
    8634:	20004358 	.word	0x20004358
    8638:	200009f0 	.word	0x200009f0
    863c:	200009d8 	.word	0x200009d8
    8640:	20000a10 	.word	0x20000a10
    8644:	2000122c 	.word	0x2000122c

00008648 <display_registers()>:
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    8648:	4916      	ldr	r1, [pc, #88]	; (86a4 <display_registers()+0x5c>)
    864a:	4b17      	ldr	r3, [pc, #92]	; (86a8 <display_registers()+0x60>)
    864c:	4a17      	ldr	r2, [pc, #92]	; (86ac <display_registers()+0x64>)
void display_registers() {
    864e:	b510      	push	{r4, lr}
    8650:	b08a      	sub	sp, #40	; 0x28
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    8652:	7808      	ldrb	r0, [r1, #0]
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	7812      	ldrb	r2, [r2, #0]
    8658:	4915      	ldr	r1, [pc, #84]	; (86b0 <display_registers()+0x68>)
    865a:	9000      	str	r0, [sp, #0]
    865c:	a802      	add	r0, sp, #8
    865e:	f004 f9e5 	bl	ca2c <sprintf>
    8662:	4c14      	ldr	r4, [pc, #80]	; (86b4 <display_registers()+0x6c>)
							  return write((const uint8_t *)str, strlen(str)); }
    8664:	a802      	add	r0, sp, #8
    8666:	f004 fe2b 	bl	d2c0 <strlen>
    866a:	4601      	mov	r1, r0
    866c:	a802      	add	r0, sp, #8
    866e:	f002 fed7 	bl	b420 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    8672:	4620      	mov	r0, r4
    8674:	f001 fa50 	bl	9b18 <Print::println()>
    sprintf(buf, "            PC=%04X, SP=%04X", register_pc, register_sp_fixed);
    8678:	4b0f      	ldr	r3, [pc, #60]	; (86b8 <display_registers()+0x70>)
    867a:	4a10      	ldr	r2, [pc, #64]	; (86bc <display_registers()+0x74>)
    867c:	a802      	add	r0, sp, #8
    867e:	781b      	ldrb	r3, [r3, #0]
    8680:	8812      	ldrh	r2, [r2, #0]
    8682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8686:	490e      	ldr	r1, [pc, #56]	; (86c0 <display_registers()+0x78>)
    8688:	f004 f9d0 	bl	ca2c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    868c:	a802      	add	r0, sp, #8
    868e:	f004 fe17 	bl	d2c0 <strlen>
    8692:	4601      	mov	r1, r0
    8694:	a802      	add	r0, sp, #8
    8696:	f002 fec3 	bl	b420 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    869a:	4620      	mov	r0, r4
    869c:	f001 fa3c 	bl	9b18 <Print::println()>
}
    86a0:	b00a      	add	sp, #40	; 0x28
    86a2:	bd10      	pop	{r4, pc}
    86a4:	200188a5 	.word	0x200188a5
    86a8:	200188a4 	.word	0x200188a4
    86ac:	200188a3 	.word	0x200188a3
    86b0:	20000838 	.word	0x20000838
    86b4:	20004358 	.word	0x20004358
    86b8:	20004969 	.word	0x20004969
    86bc:	2001888c 	.word	0x2001888c
    86c0:	2000085c 	.word	0x2000085c

000086c4 <display_info()>:
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    86c4:	490c      	ldr	r1, [pc, #48]	; (86f8 <display_info()+0x34>)
    86c6:	4b0d      	ldr	r3, [pc, #52]	; (86fc <display_info()+0x38>)
    86c8:	6808      	ldr	r0, [r1, #0]
    86ca:	4a0d      	ldr	r2, [pc, #52]	; (8700 <display_info()+0x3c>)
    86cc:	781b      	ldrb	r3, [r3, #0]
    86ce:	7812      	ldrb	r2, [r2, #0]
    86d0:	490c      	ldr	r1, [pc, #48]	; (8704 <display_info()+0x40>)
void display_info() {
    86d2:	b500      	push	{lr}
    86d4:	b093      	sub	sp, #76	; 0x4c
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    86d6:	9000      	str	r0, [sp, #0]
    86d8:	a802      	add	r0, sp, #8
    86da:	f004 f9a7 	bl	ca2c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    86de:	a802      	add	r0, sp, #8
    86e0:	f004 fdee 	bl	d2c0 <strlen>
    86e4:	4601      	mov	r1, r0
    86e6:	a802      	add	r0, sp, #8
    86e8:	f002 fe9a 	bl	b420 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    86ec:	4806      	ldr	r0, [pc, #24]	; (8708 <display_info()+0x44>)
    86ee:	f001 fa13 	bl	9b18 <Print::println()>
}
    86f2:	b013      	add	sp, #76	; 0x4c
    86f4:	f85d fb04 	ldr.w	pc, [sp], #4
    86f8:	200053c8 	.word	0x200053c8
    86fc:	20018898 	.word	0x20018898
    8700:	200188a6 	.word	0x200188a6
    8704:	20000398 	.word	0x20000398
    8708:	20004358 	.word	0x20004358

0000870c <get_command()>:
String get_command() {
    870c:	b570      	push	{r4, r5, r6, lr}
    870e:	b084      	sub	sp, #16
    String s = "";
    8710:	491c      	ldr	r1, [pc, #112]	; (8784 <get_command()+0x78>)
String get_command() {
    8712:	4605      	mov	r5, r0
    8714:	4e1c      	ldr	r6, [pc, #112]	; (8788 <get_command()+0x7c>)
    String s = "";
    8716:	4668      	mov	r0, sp
    8718:	f001 fa7a 	bl	9c10 <String::String(char const*)>
    871c:	2103      	movs	r1, #3
    871e:	481b      	ldr	r0, [pc, #108]	; (878c <get_command()+0x80>)
    8720:	f002 fe7e 	bl	b420 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
    8724:	f002 fe12 	bl	b34c <usb_serial_available>
        if (Serial.available()) {
    8728:	2800      	cmp	r0, #0
    872a:	d0fb      	beq.n	8724 <get_command()+0x18>
        virtual int read() { return usb_serial_getchar(); }
    872c:	f002 fe52 	bl	b3d4 <usb_serial_getchar>
            switch(c) {
    8730:	b2c4      	uxtb	r4, r0
    8732:	2c08      	cmp	r4, #8
    8734:	d00e      	beq.n	8754 <get_command()+0x48>
    8736:	2c0d      	cmp	r4, #13
                    if (isprint(c)) {
    8738:	4620      	mov	r0, r4
            switch(c) {
    873a:	d016      	beq.n	876a <get_command()+0x5e>
                    if (isprint(c)) {
    873c:	f004 f878 	bl	c830 <isprint>
    8740:	2800      	cmp	r0, #0
    8742:	d0ef      	beq.n	8724 <get_command()+0x18>
	String & concat(char c)				{return append(c);}
    8744:	4621      	mov	r1, r4
    8746:	4668      	mov	r0, sp
    8748:	f001 fae6 	bl	9d18 <String::append(char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    874c:	4620      	mov	r0, r4
    874e:	f002 fe51 	bl	b3f4 <usb_serial_putchar>
    8752:	e7e7      	b.n	8724 <get_command()+0x18>
                    s.remove(s.length()-1,1);
    8754:	9902      	ldr	r1, [sp, #8]
    8756:	2201      	movs	r2, #1
    8758:	4668      	mov	r0, sp
    875a:	3901      	subs	r1, #1
    875c:	f001 fbaa 	bl	9eb4 <String::remove(unsigned int, unsigned int)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8760:	2103      	movs	r1, #3
    8762:	4630      	mov	r0, r6
    8764:	f002 fe5c 	bl	b420 <usb_serial_write>
    8768:	e7dc      	b.n	8724 <get_command()+0x18>
                    return(s.toLowerCase());
    876a:	4668      	mov	r0, sp
    876c:	f001 fbc2 	bl	9ef4 <String::toLowerCase()>
    8770:	4601      	mov	r1, r0
    8772:	4628      	mov	r0, r5
    8774:	f001 f9f2 	bl	9b5c <String::String(String const&)>
}
    8778:	4668      	mov	r0, sp
    877a:	f001 fa0d 	bl	9b98 <String::~String()>
    877e:	4628      	mov	r0, r5
    8780:	b004      	add	sp, #16
    8782:	bd70      	pop	{r4, r5, r6, pc}
    8784:	2000047c 	.word	0x2000047c
    8788:	20000374 	.word	0x20000374
    878c:	20000370 	.word	0x20000370

00008790 <parse_next_arg(String&, String&)>:

String parse_next_arg(String &_src, String &remainder) {
    8790:	b570      	push	{r4, r5, r6, lr}
    8792:	460d      	mov	r5, r1
    8794:	b088      	sub	sp, #32
    String arg = "";
    8796:	4923      	ldr	r1, [pc, #140]	; (8824 <parse_next_arg(String&, String&)+0x94>)
String parse_next_arg(String &_src, String &remainder) {
    8798:	4616      	mov	r6, r2
    879a:	4604      	mov	r4, r0
    String arg = "";
    879c:	f001 fa38 	bl	9c10 <String::String(char const*)>

    String src = _src.trim();
    87a0:	4628      	mov	r0, r5
    87a2:	f001 fbb7 	bl	9f14 <String::trim()>
    87a6:	4601      	mov	r1, r0
    87a8:	4668      	mov	r0, sp
    87aa:	f001 f9d7 	bl	9b5c <String::String(String const&)>

    // zero-length means nothing to parse
    if (src.length()) {
    87ae:	9b02      	ldr	r3, [sp, #8]
    87b0:	b92b      	cbnz	r3, 87be <parse_next_arg(String&, String&)+0x2e>
    }

    // Serial.println("Result = "+arg+ ", remainder = "+remainder);

    return arg;
}
    87b2:	4668      	mov	r0, sp
    87b4:	f001 f9f0 	bl	9b98 <String::~String()>
    87b8:	4620      	mov	r0, r4
    87ba:	b008      	add	sp, #32
    87bc:	bd70      	pop	{r4, r5, r6, pc}
        int idx = src.indexOf(' ');
    87be:	2120      	movs	r1, #32
    87c0:	4668      	mov	r0, sp
    87c2:	f001 fb0f 	bl	9de4 <String::indexOf(char) const>
        if (idx>0) {
    87c6:	1e05      	subs	r5, r0, #0
    87c8:	dd1e      	ble.n	8808 <parse_next_arg(String&, String&)+0x78>
            arg = src.substring(0, idx);
    87ca:	462b      	mov	r3, r5
    87cc:	2200      	movs	r2, #0
    87ce:	4669      	mov	r1, sp
    87d0:	a804      	add	r0, sp, #16
    87d2:	f001 fb43 	bl	9e5c <String::substring(unsigned int, unsigned int) const>
    87d6:	a904      	add	r1, sp, #16
    87d8:	4620      	mov	r0, r4
    87da:	f001 fa35 	bl	9c48 <String::operator=(String&&)>
    87de:	a804      	add	r0, sp, #16
    87e0:	f001 f9da 	bl	9b98 <String::~String()>
            remainder = src.substring(idx+1);
    87e4:	1c6a      	adds	r2, r5, #1
    87e6:	4669      	mov	r1, sp
    87e8:	a804      	add	r0, sp, #16
    87ea:	f001 fb0b 	bl	9e04 <String::substring(unsigned int) const>
    87ee:	a904      	add	r1, sp, #16
    87f0:	4630      	mov	r0, r6
    87f2:	f001 fa29 	bl	9c48 <String::operator=(String&&)>
    87f6:	a804      	add	r0, sp, #16
    87f8:	f001 f9ce 	bl	9b98 <String::~String()>
}
    87fc:	4668      	mov	r0, sp
    87fe:	f001 f9cb 	bl	9b98 <String::~String()>
    8802:	4620      	mov	r0, r4
    8804:	b008      	add	sp, #32
    8806:	bd70      	pop	{r4, r5, r6, pc}
            arg = src;
    8808:	4669      	mov	r1, sp
    880a:	4620      	mov	r0, r4
    880c:	f001 fa14 	bl	9c38 <String::operator=(String const&)>
            remainder = "";
    8810:	4904      	ldr	r1, [pc, #16]	; (8824 <parse_next_arg(String&, String&)+0x94>)
    8812:	4630      	mov	r0, r6
    8814:	f001 fa2e 	bl	9c74 <String::operator=(char const*)>
}
    8818:	4668      	mov	r0, sp
    881a:	f001 f9bd 	bl	9b98 <String::~String()>
    881e:	4620      	mov	r0, r4
    8820:	b008      	add	sp, #32
    8822:	bd70      	pop	{r4, r5, r6, pc}
    8824:	2000047c 	.word	0x2000047c

00008828 <process_command(String)>:


void(* resetFunc) (void) = 0;//declare reset function at address 0

ENUM_RUN_MODE process_command(String input) {
    8828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    882c:	b09d      	sub	sp, #116	; 0x74
    882e:	4604      	mov	r4, r0

	//
	//  All commands are of the form: <2-char command>( <arg> (<arg> ...))
	//

    String remainder = "";
    8830:	49a4      	ldr	r1, [pc, #656]	; (8ac4 <process_command(String)+0x29c>)
    8832:	4668      	mov	r0, sp
    8834:	f001 f9ec 	bl	9c10 <String::String(char const*)>
    String cmd  = parse_next_arg(input, remainder);
    8838:	466a      	mov	r2, sp
    883a:	4621      	mov	r1, r4
    883c:	a804      	add	r0, sp, #16
    883e:	f7ff ffa7 	bl	8790 <parse_next_arg(String&, String&)>
    String arg1 = parse_next_arg(remainder, remainder);
    8842:	466a      	mov	r2, sp
    8844:	4669      	mov	r1, sp
    8846:	a808      	add	r0, sp, #32
    8848:	f7ff ffa2 	bl	8790 <parse_next_arg(String&, String&)>
    String arg2 = parse_next_arg(remainder, remainder);
    884c:	466a      	mov	r2, sp
    884e:	4669      	mov	r1, sp
    8850:	a80c      	add	r0, sp, #48	; 0x30
    8852:	f7ff ff9d 	bl	8790 <parse_next_arg(String&, String&)>

    word cmd_int = command_int(cmd);
    8856:	2100      	movs	r1, #0
    8858:	a804      	add	r0, sp, #16
    885a:	f001 fa99 	bl	9d90 <String::operator[](unsigned int)>
    885e:	7805      	ldrb	r5, [r0, #0]
    8860:	2101      	movs	r1, #1
    8862:	a804      	add	r0, sp, #16
    8864:	f001 fa94 	bl	9d90 <String::operator[](unsigned int)>
    8868:	7803      	ldrb	r3, [r0, #0]
    886a:	022d      	lsls	r5, r5, #8
        char buf[32];
        sprintf(buf, "Command-int = %04X", cmd_int);
        Serial.println(buf);
    }

    switch (cmd_int) {
    886c:	f646 5264 	movw	r2, #28004	; 0x6d64
    word cmd_int = command_int(cmd);
    8870:	442b      	add	r3, r5
    switch (cmd_int) {
    8872:	4293      	cmp	r3, r2
    8874:	f000 81b4 	beq.w	8be0 <process_command(String)+0x3b8>
    8878:	d858      	bhi.n	892c <process_command(String)+0x104>
    887a:	f246 4272 	movw	r2, #25714	; 0x6472
    887e:	4293      	cmp	r3, r2
    8880:	f000 80bf 	beq.w	8a02 <process_command(String)+0x1da>
    8884:	d935      	bls.n	88f2 <process_command(String)+0xca>
    8886:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
    888a:	f000 8133 	beq.w	8af4 <process_command(String)+0x2cc>
    888e:	f646 126e 	movw	r2, #26990	; 0x696e
    8892:	4293      	cmp	r3, r2
    8894:	d116      	bne.n	88c4 <process_command(String)+0x9c>
            display_registers();
            run_mode = WAITING;          
            break;

        case CMD_IN:
            display_registers();
    8896:	f7ff fed7 	bl	8648 <display_registers()>
            display_info();
            run_mode = WAITING;
    889a:	2400      	movs	r4, #0
            display_info();
    889c:	f7ff ff12 	bl	86c4 <display_info()>
            run_mode = WAITING;
    88a0:	4b89      	ldr	r3, [pc, #548]	; (8ac8 <process_command(String)+0x2a0>)
    88a2:	701c      	strb	r4, [r3, #0]
            run_mode = WAITING;
            break;
    }

    return(run_mode);
}
    88a4:	a80c      	add	r0, sp, #48	; 0x30
    88a6:	f001 f977 	bl	9b98 <String::~String()>
    88aa:	a808      	add	r0, sp, #32
    88ac:	f001 f974 	bl	9b98 <String::~String()>
    88b0:	a804      	add	r0, sp, #16
    88b2:	f001 f971 	bl	9b98 <String::~String()>
    88b6:	4668      	mov	r0, sp
    88b8:	f001 f96e 	bl	9b98 <String::~String()>
    88bc:	4620      	mov	r0, r4
    88be:	b01d      	add	sp, #116	; 0x74
    88c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cmd_int) {
    88c4:	f246 726f 	movw	r2, #26479	; 0x676f
    88c8:	4293      	cmp	r3, r2
    88ca:	f040 815a 	bne.w	8b82 <process_command(String)+0x35a>
            run_mode = RUNNING;
    88ce:	4d7e      	ldr	r5, [pc, #504]	; (8ac8 <process_command(String)+0x2a0>)
    88d0:	2402      	movs	r4, #2
            if (arg1.length()) {
    88d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            run_mode = RUNNING;
    88d4:	702c      	strb	r4, [r5, #0]
            if (arg1.length()) {
    88d6:	2b00      	cmp	r3, #0
    88d8:	d0e4      	beq.n	88a4 <process_command(String)+0x7c>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    88da:	9808      	ldr	r0, [sp, #32]
    88dc:	2800      	cmp	r0, #0
    88de:	f000 81df 	beq.w	8ca0 <process_command(String)+0x478>
                register_pc = strtoul(arg1.c_str(), 0, 16);
    88e2:	2210      	movs	r2, #16
    88e4:	2100      	movs	r1, #0
    88e6:	f003 ff8f 	bl	c808 <strtoul>
    88ea:	4b78      	ldr	r3, [pc, #480]	; (8acc <process_command(String)+0x2a4>)
    return(run_mode);
    88ec:	782c      	ldrb	r4, [r5, #0]
                register_pc = strtoul(arg1.c_str(), 0, 16);
    88ee:	8018      	strh	r0, [r3, #0]
    88f0:	e7d8      	b.n	88a4 <process_command(String)+0x7c>
    switch (cmd_int) {
    88f2:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    88f6:	f000 80fd 	beq.w	8af4 <process_command(String)+0x2cc>
    88fa:	f246 226b 	movw	r2, #25195	; 0x626b
    88fe:	4293      	cmp	r3, r2
    8900:	d15f      	bne.n	89c2 <process_command(String)+0x19a>
    8902:	9808      	ldr	r0, [sp, #32]
    8904:	2800      	cmp	r0, #0
    8906:	f000 81ac 	beq.w	8c62 <process_command(String)+0x43a>
                word addr = strtoul(arg1.c_str(), 0, 16);
    890a:	2210      	movs	r2, #16
    890c:	2100      	movs	r1, #0
    890e:	f003 ff7b 	bl	c808 <strtoul>
                breakpoint = addr;
    8912:	4b6f      	ldr	r3, [pc, #444]	; (8ad0 <process_command(String)+0x2a8>)
    8914:	6018      	str	r0, [r3, #0]
    8916:	2102      	movs	r1, #2
    8918:	486e      	ldr	r0, [pc, #440]	; (8ad4 <process_command(String)+0x2ac>)
    891a:	f002 fd81 	bl	b420 <usb_serial_write>
    891e:	486e      	ldr	r0, [pc, #440]	; (8ad8 <process_command(String)+0x2b0>)
    8920:	f001 f8fa 	bl	9b18 <Print::println()>
            run_mode = WAITING;
    8924:	4b68      	ldr	r3, [pc, #416]	; (8ac8 <process_command(String)+0x2a0>)
    8926:	2400      	movs	r4, #0
    8928:	701c      	strb	r4, [r3, #0]
            break;
    892a:	e7bb      	b.n	88a4 <process_command(String)+0x7c>
    switch (cmd_int) {
    892c:	f247 3273 	movw	r2, #29555	; 0x7373
    8930:	4293      	cmp	r3, r2
    8932:	f000 8151 	beq.w	8bd8 <process_command(String)+0x3b0>
    8936:	d94a      	bls.n	89ce <process_command(String)+0x1a6>
    8938:	f247 4274 	movw	r2, #29812	; 0x7474
    893c:	4293      	cmp	r3, r2
    893e:	f000 80b4 	beq.w	8aaa <process_command(String)+0x282>
    8942:	f247 7272 	movw	r2, #30578	; 0x7772
    8946:	4293      	cmp	r3, r2
    8948:	f040 811b 	bne.w	8b82 <process_command(String)+0x35a>
    894c:	9808      	ldr	r0, [sp, #32]
    894e:	2800      	cmp	r0, #0
    8950:	f000 8185 	beq.w	8c5e <process_command(String)+0x436>
                word addr = strtoul(arg1.c_str(), 0, 16);
    8954:	2210      	movs	r2, #16
    8956:	2100      	movs	r1, #0
    8958:	f003 ff56 	bl	c808 <strtoul>
    895c:	4605      	mov	r5, r0
    895e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8960:	2800      	cmp	r0, #0
    8962:	f000 8193 	beq.w	8c8c <process_command(String)+0x464>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    8966:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    896a:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
                byte data = strtoul(arg2.c_str(), 0, 16);
    896e:	2210      	movs	r2, #16
    8970:	2100      	movs	r1, #0
    8972:	f003 ff49 	bl	c808 <strtoul>
    8976:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
                write_byte(addr, data);
    897a:	b2c1      	uxtb	r1, r0
    897c:	b2a8      	uxth	r0, r5
    897e:	f7fa f833 	bl	29e8 <write_byte(unsigned short, unsigned char)>
                while (remainder.length()) {
    8982:	9b02      	ldr	r3, [sp, #8]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    8984:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    8988:	2b00      	cmp	r3, #0
    898a:	d0c4      	beq.n	8916 <process_command(String)+0xee>
    898c:	ac14      	add	r4, sp, #80	; 0x50
    898e:	4e53      	ldr	r6, [pc, #332]	; (8adc <process_command(String)+0x2b4>)
                    String d = parse_next_arg(remainder, remainder);
    8990:	466a      	mov	r2, sp
    8992:	4669      	mov	r1, sp
    8994:	4620      	mov	r0, r4
                    write_byte(++addr, data);
    8996:	3501      	adds	r5, #1
                    String d = parse_next_arg(remainder, remainder);
    8998:	f7ff fefa 	bl	8790 <parse_next_arg(String&, String&)>
    899c:	9814      	ldr	r0, [sp, #80]	; 0x50
                    data = strtoul(d.c_str(), 0, 16);
    899e:	2210      	movs	r2, #16
    89a0:	2100      	movs	r1, #0
    89a2:	2800      	cmp	r0, #0
    89a4:	bf08      	it	eq
    89a6:	4630      	moveq	r0, r6
    89a8:	f003 ff2e 	bl	c808 <strtoul>
                    write_byte(++addr, data);
    89ac:	b2c1      	uxtb	r1, r0
    89ae:	b2a8      	uxth	r0, r5
    89b0:	f7fa f81a 	bl	29e8 <write_byte(unsigned short, unsigned char)>
                }
    89b4:	4620      	mov	r0, r4
    89b6:	f001 f8ef 	bl	9b98 <String::~String()>
                while (remainder.length()) {
    89ba:	9b02      	ldr	r3, [sp, #8]
    89bc:	2b00      	cmp	r3, #0
    89be:	d1e7      	bne.n	8990 <process_command(String)+0x168>
    89c0:	e7a9      	b.n	8916 <process_command(String)+0xee>
    switch (cmd_int) {
    89c2:	2b00      	cmp	r3, #0
    89c4:	f040 80dd 	bne.w	8b82 <process_command(String)+0x35a>
    return(run_mode);
    89c8:	4b3f      	ldr	r3, [pc, #252]	; (8ac8 <process_command(String)+0x2a0>)
    89ca:	781c      	ldrb	r4, [r3, #0]
}
    89cc:	e76a      	b.n	88a4 <process_command(String)+0x7c>
    switch (cmd_int) {
    89ce:	f247 2273 	movw	r2, #29299	; 0x7273
    89d2:	4293      	cmp	r3, r2
    89d4:	d066      	beq.n	8aa4 <process_command(String)+0x27c>
    89d6:	f247 3272 	movw	r2, #29554	; 0x7372
    89da:	4293      	cmp	r3, r2
    89dc:	d117      	bne.n	8a0e <process_command(String)+0x1e6>
    89de:	980c      	ldr	r0, [sp, #48]	; 0x30
    89e0:	2800      	cmp	r0, #0
    89e2:	f000 8142 	beq.w	8c6a <process_command(String)+0x442>
                word value = strtoul(arg2.c_str(), 0, 16);
    89e6:	2100      	movs	r1, #0
    89e8:	2210      	movs	r2, #16
    89ea:	f003 ff0d 	bl	c808 <strtoul>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    89ee:	493c      	ldr	r1, [pc, #240]	; (8ae0 <process_command(String)+0x2b8>)
    89f0:	4604      	mov	r4, r0
    89f2:	a808      	add	r0, sp, #32
    89f4:	f001 f9b6 	bl	9d64 <String::equals(char const*) const>
                if (arg1=="pc") {
    89f8:	2800      	cmp	r0, #0
    89fa:	f000 80fe 	beq.w	8bfa <process_command(String)+0x3d2>
                    register_pc = value & 0xFFFF;
    89fe:	4b33      	ldr	r3, [pc, #204]	; (8acc <process_command(String)+0x2a4>)
    8a00:	801c      	strh	r4, [r3, #0]
            display_registers();
    8a02:	f7ff fe21 	bl	8648 <display_registers()>
            run_mode = WAITING;          
    8a06:	2400      	movs	r4, #0
    8a08:	4b2f      	ldr	r3, [pc, #188]	; (8ac8 <process_command(String)+0x2a0>)
    8a0a:	701c      	strb	r4, [r3, #0]
            break;
    8a0c:	e74a      	b.n	88a4 <process_command(String)+0x7c>
    switch (cmd_int) {
    8a0e:	f247 2264 	movw	r2, #29284	; 0x7264
    8a12:	4293      	cmp	r3, r2
    8a14:	f040 80b5 	bne.w	8b82 <process_command(String)+0x35a>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    8a18:	9808      	ldr	r0, [sp, #32]
    8a1a:	2800      	cmp	r0, #0
    8a1c:	f000 8123 	beq.w	8c66 <process_command(String)+0x43e>
                word addr = strtoul(arg1.c_str(), 0, 16);
    8a20:	2210      	movs	r2, #16
    8a22:	2100      	movs	r1, #0
    8a24:	f003 fef0 	bl	c808 <strtoul>
                if (arg2.length()) {
    8a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                word addr = strtoul(arg1.c_str(), 0, 16);
    8a2a:	4606      	mov	r6, r0
                sprintf(s,"[%04X] = ", addr);
    8a2c:	ac14      	add	r4, sp, #80	; 0x50
                if (arg2.length()) {
    8a2e:	2b00      	cmp	r3, #0
    8a30:	f040 80ec 	bne.w	8c0c <process_command(String)+0x3e4>
                sprintf(s,"[%04X] = ", addr);
    8a34:	4602      	mov	r2, r0
    8a36:	492b      	ldr	r1, [pc, #172]	; (8ae4 <process_command(String)+0x2bc>)
    8a38:	4620      	mov	r0, r4
                byte count = 1;
    8a3a:	f04f 0901 	mov.w	r9, #1
                sprintf(s,"[%04X] = ", addr);
    8a3e:	f003 fff5 	bl	ca2c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    8a42:	4620      	mov	r0, r4
    8a44:	f004 fc3c 	bl	d2c0 <strlen>
    8a48:	4601      	mov	r1, r0
    8a4a:	4620      	mov	r0, r4
    8a4c:	f002 fce8 	bl	b420 <usb_serial_write>
                byte count = 1;
    8a50:	2500      	movs	r5, #0
                        sprintf(s,"\n\r[%04X] = ", addr);
    8a52:	f8df b098 	ldr.w	fp, [pc, #152]	; 8aec <process_command(String)+0x2c4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    8a56:	f04f 4884 	mov.w	r8, #1107296256	; 0x42000000
                    sprintf(s, "%02X ", data);
    8a5a:	f8df a094 	ldr.w	sl, [pc, #148]	; 8af0 <process_command(String)+0x2c8>
    8a5e:	462b      	mov	r3, r5
                    if ((i != 0) && (i % 8 == 0)) {
    8a60:	b115      	cbz	r5, 8a68 <process_command(String)+0x240>
    8a62:	075b      	lsls	r3, r3, #29
    8a64:	f000 8103 	beq.w	8c6e <process_command(String)+0x446>
    8a68:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
                    byte data = read_byte(addr++, false);
    8a6c:	2100      	movs	r1, #0
    8a6e:	b2b0      	uxth	r0, r6
                for (byte i=0; i<count; i++) {
    8a70:	3501      	adds	r5, #1
    8a72:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
    8a76:	3601      	adds	r6, #1
                    byte data = read_byte(addr++, false);
    8a78:	f7f9 fdfa 	bl	2670 <read_byte(unsigned short, bool)>
                    sprintf(s, "%02X ", data);
    8a7c:	4651      	mov	r1, sl
                    byte data = read_byte(addr++, false);
    8a7e:	4602      	mov	r2, r0
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    8a80:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
                    sprintf(s, "%02X ", data);
    8a84:	4620      	mov	r0, r4
    8a86:	f003 ffd1 	bl	ca2c <sprintf>
    8a8a:	4620      	mov	r0, r4
    8a8c:	f004 fc18 	bl	d2c0 <strlen>
    8a90:	4601      	mov	r1, r0
    8a92:	4620      	mov	r0, r4
    8a94:	f002 fcc4 	bl	b420 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    8a98:	b2eb      	uxtb	r3, r5
    8a9a:	454b      	cmp	r3, r9
    8a9c:	d3e0      	bcc.n	8a60 <process_command(String)+0x238>
    8a9e:	2100      	movs	r1, #0
    8aa0:	4808      	ldr	r0, [pc, #32]	; (8ac4 <process_command(String)+0x29c>)
    8aa2:	e73a      	b.n	891a <process_command(String)+0xf2>
            resetFunc(); // Reset the ICE
    8aa4:	4b10      	ldr	r3, [pc, #64]	; (8ae8 <process_command(String)+0x2c0>)
    8aa6:	681b      	ldr	r3, [r3, #0]
    8aa8:	4798      	blx	r3
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    8aaa:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    8aae:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
            sample_at_CLK_rising_edge();
    8ab2:	f7f9 fd8d 	bl	25d0 <sample_at_CLK_rising_edge()>
    8ab6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
            sample_at_CLK_rising_edge();
    8aba:	f7f9 fd89 	bl	25d0 <sample_at_CLK_rising_edge()>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    8abe:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    8ac2:	e781      	b.n	89c8 <process_command(String)+0x1a0>
    8ac4:	2000047c 	.word	0x2000047c
    8ac8:	200188a6 	.word	0x200188a6
    8acc:	2001888c 	.word	0x2001888c
    8ad0:	200053c8 	.word	0x200053c8
    8ad4:	200007ec 	.word	0x200007ec
    8ad8:	20004358 	.word	0x20004358
    8adc:	2000122c 	.word	0x2000122c
    8ae0:	200007a0 	.word	0x200007a0
    8ae4:	200007f0 	.word	0x200007f0
    8ae8:	20018820 	.word	0x20018820
    8aec:	200007fc 	.word	0x200007fc
    8af0:	20000808 	.word	0x20000808
            Serial.println(String("Available Commands:\n\r")+
    8af4:	4972      	ldr	r1, [pc, #456]	; (8cc0 <process_command(String)+0x498>)
    8af6:	a810      	add	r0, sp, #64	; 0x40
    8af8:	f001 f88a 	bl	9c10 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    8afc:	a910      	add	r1, sp, #64	; 0x40
    8afe:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    8b00:	2400      	movs	r4, #0
    8b02:	f001 f82b 	bl	9b5c <String::String(String const&)>
                           "    IN                      Information about ICE state\n\r"+
    8b06:	496f      	ldr	r1, [pc, #444]	; (8cc4 <process_command(String)+0x49c>)
    8b08:	a814      	add	r0, sp, #80	; 0x50
    8b0a:	f001 f91d 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    MD <mode>               Set memory addressing mode (0-3 see below)\n\r"+
    8b0e:	496e      	ldr	r1, [pc, #440]	; (8cc8 <process_command(String)+0x4a0>)
    8b10:	f001 f91a 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    DR                      Dump registers\n\r"+
    8b14:	496d      	ldr	r1, [pc, #436]	; (8ccc <process_command(String)+0x4a4>)
    8b16:	f001 f917 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    SS                      Single-step execution\n\r"+
    8b1a:	496d      	ldr	r1, [pc, #436]	; (8cd0 <process_command(String)+0x4a8>)
    8b1c:	f001 f914 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    GO (<address>)          Begin execution (at optional address)\n\r"+
    8b20:	496c      	ldr	r1, [pc, #432]	; (8cd4 <process_command(String)+0x4ac>)
    8b22:	f001 f911 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    BK <address>            Set execution breakpoint\n\r"+
    8b26:	496c      	ldr	r1, [pc, #432]	; (8cd8 <process_command(String)+0x4b0>)
    8b28:	f001 f90e 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    SR <reg> <value>        Set register (PC, A, X, Y) to value\n\r"+
    8b2c:	496b      	ldr	r1, [pc, #428]	; (8cdc <process_command(String)+0x4b4>)
    8b2e:	f001 f90b 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    RD <address> (<count>)  Read from memory address, displays <count> values\n\r"+
    8b32:	496b      	ldr	r1, [pc, #428]	; (8ce0 <process_command(String)+0x4b8>)
    8b34:	f001 f908 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    WR <address> <value>    Write value to memory address\n\r"+
    8b38:	496a      	ldr	r1, [pc, #424]	; (8ce4 <process_command(String)+0x4bc>)
    8b3a:	f001 f905 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "\n"+
    8b3e:	496a      	ldr	r1, [pc, #424]	; (8ce8 <process_command(String)+0x4c0>)
    8b40:	f001 f902 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "    Addressing Modes:\n\r"+
    8b44:	4969      	ldr	r1, [pc, #420]	; (8cec <process_command(String)+0x4c4>)
    8b46:	f001 f8ff 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "       0 - All exernal memory accesses\n\r"+
    8b4a:	4969      	ldr	r1, [pc, #420]	; (8cf0 <process_command(String)+0x4c8>)
    8b4c:	f001 f8fc 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "       1 - Reads use cycle accurate internal memory and writes pass through to motherboard\n\r"+
    8b50:	4968      	ldr	r1, [pc, #416]	; (8cf4 <process_command(String)+0x4cc>)
    8b52:	f001 f8f9 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "       2 - Reads accelerated using internal memory and writes pass through to motherboard\n\r"+
    8b56:	4968      	ldr	r1, [pc, #416]	; (8cf8 <process_command(String)+0x4d0>)
    8b58:	f001 f8f6 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
                           "       3 - All read and write accesses use accelerated internal memory\n\r");
    8b5c:	4967      	ldr	r1, [pc, #412]	; (8cfc <process_command(String)+0x4d4>)
    8b5e:	f001 f8f3 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
    8b62:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    8b64:	4866      	ldr	r0, [pc, #408]	; (8d00 <process_command(String)+0x4d8>)
    8b66:	f000 ffb1 	bl	9acc <Print::print(String const&)>
    8b6a:	4865      	ldr	r0, [pc, #404]	; (8d00 <process_command(String)+0x4d8>)
    8b6c:	f000 ffd4 	bl	9b18 <Print::println()>
class StringSumHelper : public String
    8b70:	a814      	add	r0, sp, #80	; 0x50
    8b72:	f001 f811 	bl	9b98 <String::~String()>
            Serial.println(String("Available Commands:\n\r")+
    8b76:	a810      	add	r0, sp, #64	; 0x40
    8b78:	f001 f80e 	bl	9b98 <String::~String()>
            run_mode = WAITING;
    8b7c:	4b61      	ldr	r3, [pc, #388]	; (8d04 <process_command(String)+0x4dc>)
    8b7e:	701c      	strb	r4, [r3, #0]
            break;
    8b80:	e690      	b.n	88a4 <process_command(String)+0x7c>
	StringSumHelper(const char *p) : String(p) {}
    8b82:	4961      	ldr	r1, [pc, #388]	; (8d08 <process_command(String)+0x4e0>)
    8b84:	a814      	add	r0, sp, #80	; 0x50
    8b86:	f001 f843 	bl	9c10 <String::String(char const*)>
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    8b8a:	4621      	mov	r1, r4
    8b8c:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    8b8e:	2400      	movs	r4, #0
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    8b90:	f001 f8d2 	bl	9d38 <operator+(StringSumHelper const&, String const&)>
    8b94:	495d      	ldr	r1, [pc, #372]	; (8d0c <process_command(String)+0x4e4>)
    8b96:	f001 f8d7 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
    8b9a:	a904      	add	r1, sp, #16
    8b9c:	f001 f8cc 	bl	9d38 <operator+(StringSumHelper const&, String const&)>
    8ba0:	495b      	ldr	r1, [pc, #364]	; (8d10 <process_command(String)+0x4e8>)
    8ba2:	f001 f8d1 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
    8ba6:	a908      	add	r1, sp, #32
    8ba8:	f001 f8c6 	bl	9d38 <operator+(StringSumHelper const&, String const&)>
    8bac:	4958      	ldr	r1, [pc, #352]	; (8d10 <process_command(String)+0x4e8>)
    8bae:	f001 f8cb 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
    8bb2:	a90c      	add	r1, sp, #48	; 0x30
    8bb4:	f001 f8c0 	bl	9d38 <operator+(StringSumHelper const&, String const&)>
    8bb8:	4956      	ldr	r1, [pc, #344]	; (8d14 <process_command(String)+0x4ec>)
    8bba:	f001 f8c5 	bl	9d48 <operator+(StringSumHelper const&, char const*)>
    8bbe:	4601      	mov	r1, r0
    8bc0:	484f      	ldr	r0, [pc, #316]	; (8d00 <process_command(String)+0x4d8>)
    8bc2:	f000 ff83 	bl	9acc <Print::print(String const&)>
    8bc6:	484e      	ldr	r0, [pc, #312]	; (8d00 <process_command(String)+0x4d8>)
    8bc8:	f000 ffa6 	bl	9b18 <Print::println()>
class StringSumHelper : public String
    8bcc:	a814      	add	r0, sp, #80	; 0x50
    8bce:	f000 ffe3 	bl	9b98 <String::~String()>
            run_mode = WAITING;
    8bd2:	4b4c      	ldr	r3, [pc, #304]	; (8d04 <process_command(String)+0x4dc>)
    8bd4:	701c      	strb	r4, [r3, #0]
            break;
    8bd6:	e665      	b.n	88a4 <process_command(String)+0x7c>
            run_mode = SINGLE_STEP;
    8bd8:	4b4a      	ldr	r3, [pc, #296]	; (8d04 <process_command(String)+0x4dc>)
    8bda:	2401      	movs	r4, #1
    8bdc:	701c      	strb	r4, [r3, #0]
            break;
    8bde:	e661      	b.n	88a4 <process_command(String)+0x7c>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    8be0:	9808      	ldr	r0, [sp, #32]
    8be2:	2800      	cmp	r0, #0
    8be4:	d050      	beq.n	8c88 <process_command(String)+0x460>
                byte a_mode = strtoul(arg1.c_str(), 0, 10);
    8be6:	220a      	movs	r2, #10
    8be8:	2100      	movs	r1, #0
    8bea:	f003 fe0d 	bl	c808 <strtoul>
    8bee:	b2c0      	uxtb	r0, r0
                if (a_mode < 4)
    8bf0:	2803      	cmp	r0, #3
    8bf2:	d821      	bhi.n	8c38 <process_command(String)+0x410>
                    addr_mode = (ADDR_MODE)a_mode;
    8bf4:	4b48      	ldr	r3, [pc, #288]	; (8d18 <process_command(String)+0x4f0>)
    8bf6:	7018      	strb	r0, [r3, #0]
    8bf8:	e694      	b.n	8924 <process_command(String)+0xfc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    8bfa:	4948      	ldr	r1, [pc, #288]	; (8d1c <process_command(String)+0x4f4>)
    8bfc:	a808      	add	r0, sp, #32
    8bfe:	f001 f8b1 	bl	9d64 <String::equals(char const*) const>
                else if (arg1=="a") {
    8c02:	2800      	cmp	r0, #0
    8c04:	d044      	beq.n	8c90 <process_command(String)+0x468>
                    register_a = value & 0xFF;
    8c06:	4b46      	ldr	r3, [pc, #280]	; (8d20 <process_command(String)+0x4f8>)
    8c08:	701c      	strb	r4, [r3, #0]
    8c0a:	e6fa      	b.n	8a02 <process_command(String)+0x1da>
                    count = arg2.toInt() & 0xFF;
    8c0c:	a80c      	add	r0, sp, #48	; 0x30
    8c0e:	f001 f9ad 	bl	9f6c <String::toInt() const>
                sprintf(s,"[%04X] = ", addr);
    8c12:	4944      	ldr	r1, [pc, #272]	; (8d24 <process_command(String)+0x4fc>)
                    count = arg2.toInt() & 0xFF;
    8c14:	fa5f f980 	uxtb.w	r9, r0
                sprintf(s,"[%04X] = ", addr);
    8c18:	4632      	mov	r2, r6
    8c1a:	4620      	mov	r0, r4
    8c1c:	f003 ff06 	bl	ca2c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    8c20:	4620      	mov	r0, r4
    8c22:	f004 fb4d 	bl	d2c0 <strlen>
    8c26:	4601      	mov	r1, r0
    8c28:	4620      	mov	r0, r4
    8c2a:	f002 fbf9 	bl	b420 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    8c2e:	f1b9 0f00 	cmp.w	r9, #0
    8c32:	f47f af0d 	bne.w	8a50 <process_command(String)+0x228>
    8c36:	e732      	b.n	8a9e <process_command(String)+0x276>
	StringSumHelper(const char *p) : String(p) {}
    8c38:	493b      	ldr	r1, [pc, #236]	; (8d28 <process_command(String)+0x500>)
    8c3a:	a814      	add	r0, sp, #80	; 0x50
    8c3c:	f000 ffe8 	bl	9c10 <String::String(char const*)>
                    Serial.println("MD error. Illegal argument: "+arg1);
    8c40:	a908      	add	r1, sp, #32
    8c42:	a814      	add	r0, sp, #80	; 0x50
    8c44:	f001 f878 	bl	9d38 <operator+(StringSumHelper const&, String const&)>
    8c48:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    8c4a:	482d      	ldr	r0, [pc, #180]	; (8d00 <process_command(String)+0x4d8>)
    8c4c:	f000 ff3e 	bl	9acc <Print::print(String const&)>
    8c50:	482b      	ldr	r0, [pc, #172]	; (8d00 <process_command(String)+0x4d8>)
    8c52:	f000 ff61 	bl	9b18 <Print::println()>
class StringSumHelper : public String
    8c56:	a814      	add	r0, sp, #80	; 0x50
    8c58:	f000 ff9e 	bl	9b98 <String::~String()>
            run_mode = WAITING;
    8c5c:	e662      	b.n	8924 <process_command(String)+0xfc>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    8c5e:	4833      	ldr	r0, [pc, #204]	; (8d2c <process_command(String)+0x504>)
    8c60:	e678      	b.n	8954 <process_command(String)+0x12c>
    8c62:	4832      	ldr	r0, [pc, #200]	; (8d2c <process_command(String)+0x504>)
    8c64:	e651      	b.n	890a <process_command(String)+0xe2>
    8c66:	4831      	ldr	r0, [pc, #196]	; (8d2c <process_command(String)+0x504>)
    8c68:	e6da      	b.n	8a20 <process_command(String)+0x1f8>
    8c6a:	4830      	ldr	r0, [pc, #192]	; (8d2c <process_command(String)+0x504>)
    8c6c:	e6bb      	b.n	89e6 <process_command(String)+0x1be>
                        sprintf(s,"\n\r[%04X] = ", addr);
    8c6e:	4659      	mov	r1, fp
    8c70:	4632      	mov	r2, r6
    8c72:	4620      	mov	r0, r4
    8c74:	f003 feda 	bl	ca2c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    8c78:	4620      	mov	r0, r4
    8c7a:	f004 fb21 	bl	d2c0 <strlen>
    8c7e:	4601      	mov	r1, r0
    8c80:	4620      	mov	r0, r4
    8c82:	f002 fbcd 	bl	b420 <usb_serial_write>
    8c86:	e6ef      	b.n	8a68 <process_command(String)+0x240>
    8c88:	4828      	ldr	r0, [pc, #160]	; (8d2c <process_command(String)+0x504>)
    8c8a:	e7ac      	b.n	8be6 <process_command(String)+0x3be>
    8c8c:	4827      	ldr	r0, [pc, #156]	; (8d2c <process_command(String)+0x504>)
    8c8e:	e66a      	b.n	8966 <process_command(String)+0x13e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    8c90:	4927      	ldr	r1, [pc, #156]	; (8d30 <process_command(String)+0x508>)
    8c92:	a808      	add	r0, sp, #32
    8c94:	f001 f866 	bl	9d64 <String::equals(char const*) const>
                else if (arg1=="x") {
    8c98:	b120      	cbz	r0, 8ca4 <process_command(String)+0x47c>
                    register_x = value & 0xFF;
    8c9a:	4b26      	ldr	r3, [pc, #152]	; (8d34 <process_command(String)+0x50c>)
    8c9c:	701c      	strb	r4, [r3, #0]
    8c9e:	e6b0      	b.n	8a02 <process_command(String)+0x1da>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    8ca0:	4822      	ldr	r0, [pc, #136]	; (8d2c <process_command(String)+0x504>)
    8ca2:	e61e      	b.n	88e2 <process_command(String)+0xba>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    8ca4:	4924      	ldr	r1, [pc, #144]	; (8d38 <process_command(String)+0x510>)
    8ca6:	a808      	add	r0, sp, #32
    8ca8:	f001 f85c 	bl	9d64 <String::equals(char const*) const>
                else if (arg1=="y") {
    8cac:	b110      	cbz	r0, 8cb4 <process_command(String)+0x48c>
                    register_y = value & 0xFF;
    8cae:	4b23      	ldr	r3, [pc, #140]	; (8d3c <process_command(String)+0x514>)
    8cb0:	701c      	strb	r4, [r3, #0]
    8cb2:	e6a6      	b.n	8a02 <process_command(String)+0x1da>
                    Serial.println("ERROR: unknown register identifier (options: pc, a, x, y)");
    8cb4:	4922      	ldr	r1, [pc, #136]	; (8d40 <process_command(String)+0x518>)
    8cb6:	4812      	ldr	r0, [pc, #72]	; (8d00 <process_command(String)+0x4d8>)
    8cb8:	f7f7 fa08 	bl	cc <Print::println(char const*) [clone .isra.0]>
    8cbc:	e6a1      	b.n	8a02 <process_command(String)+0x1da>
    8cbe:	bf00      	nop
    8cc0:	200003e0 	.word	0x200003e0
    8cc4:	200003f8 	.word	0x200003f8
    8cc8:	20000434 	.word	0x20000434
    8ccc:	20000480 	.word	0x20000480
    8cd0:	200004b0 	.word	0x200004b0
    8cd4:	200004e4 	.word	0x200004e4
    8cd8:	20000528 	.word	0x20000528
    8cdc:	20000560 	.word	0x20000560
    8ce0:	200005a4 	.word	0x200005a4
    8ce4:	200005f4 	.word	0x200005f4
    8ce8:	20000630 	.word	0x20000630
    8cec:	20000634 	.word	0x20000634
    8cf0:	2000064c 	.word	0x2000064c
    8cf4:	20000678 	.word	0x20000678
    8cf8:	200006d8 	.word	0x200006d8
    8cfc:	20000734 	.word	0x20000734
    8d00:	20004358 	.word	0x20004358
    8d04:	200188a6 	.word	0x200188a6
    8d08:	20000810 	.word	0x20000810
    8d0c:	20000830 	.word	0x20000830
    8d10:	20000834 	.word	0x20000834
    8d14:	20000944 	.word	0x20000944
    8d18:	20018898 	.word	0x20018898
    8d1c:	200007a4 	.word	0x200007a4
    8d20:	200188a3 	.word	0x200188a3
    8d24:	200007f0 	.word	0x200007f0
    8d28:	20000780 	.word	0x20000780
    8d2c:	2000122c 	.word	0x2000122c
    8d30:	200007a8 	.word	0x200007a8
    8d34:	200188a4 	.word	0x200188a4
    8d38:	200007ac 	.word	0x200007ac
    8d3c:	200188a5 	.word	0x200188a5
    8d40:	200007b0 	.word	0x200007b0

00008d44 <loop>:
// -------------------------------------------------
//
// Main loop 
//
// -------------------------------------------------
void loop() {
    8d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Give Teensy 4.1 a moment
    delay(50);
    8d48:	2032      	movs	r0, #50	; 0x32
void loop() {
    8d4a:	b08d      	sub	sp, #52	; 0x34
    delay(50);
    8d4c:	f001 f914 	bl	9f78 <delay>
    sample_at_CLK_rising_edge();
    8d50:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8eb0 <loop+0x16c>
    8d54:	f7f9 fc3c 	bl	25d0 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    8d58:	4e4c      	ldr	r6, [pc, #304]	; (8e8c <loop+0x148>)
    8d5a:	f7f9 fc39 	bl	25d0 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    8d5e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8eb4 <loop+0x170>
    8d62:	f7f9 fc35 	bl	25d0 <sample_at_CLK_rising_edge()>

    reset_sequence();
    8d66:	4d4a      	ldr	r5, [pc, #296]	; (8e90 <loop+0x14c>)
    8d68:	f7fa f9a0 	bl	30ac <reset_sequence()>

    while (1) {

        if (direct_reset == 1) reset_sequence();
    8d6c:	4b49      	ldr	r3, [pc, #292]	; (8e94 <loop+0x150>)
    8d6e:	781b      	ldrb	r3, [r3, #0]
    8d70:	2b01      	cmp	r3, #1
    8d72:	f000 81d0 	beq.w	9116 <loop+0x3d2>

        // Poll for NMI and IRQ
        //
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    8d76:	f89b 3000 	ldrb.w	r3, [fp]
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	d175      	bne.n	8e6a <loop+0x126>
    8d7e:	4b46      	ldr	r3, [pc, #280]	; (8e98 <loop+0x154>)
    8d80:	781b      	ldrb	r3, [r3, #0]
    8d82:	2b01      	cmp	r3, #1
    8d84:	d06f      	beq.n	8e66 <loop+0x122>
        nmi_n_old = direct_nmi;
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8d86:	4a45      	ldr	r2, [pc, #276]	; (8e9c <loop+0x158>)
        nmi_n_old = direct_nmi;
    8d88:	f88b 3000 	strb.w	r3, [fp]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8d8c:	7812      	ldrb	r2, [r2, #0]
    8d8e:	2a01      	cmp	r2, #1
    8d90:	d073      	beq.n	8e7a <loop+0x136>

//        next_instruction = finish_read_byte();
        next_instruction = read_byte(register_pc, false);
    8d92:	2100      	movs	r1, #0
    8d94:	8830      	ldrh	r0, [r6, #0]
    8d96:	f7f9 fc6b 	bl	2670 <read_byte(unsigned short, bool)>

        //============================================================================
        //  ICE interface code
        //
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    8d9a:	4b41      	ldr	r3, [pc, #260]	; (8ea0 <loop+0x15c>)
        next_instruction = read_byte(register_pc, false);
    8d9c:	4601      	mov	r1, r0
    8d9e:	f889 0000 	strb.w	r0, [r9]
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    8da2:	681b      	ldr	r3, [r3, #0]
    8da4:	2b00      	cmp	r3, #0
    8da6:	f000 8089 	beq.w	8ebc <loop+0x178>
    8daa:	782a      	ldrb	r2, [r5, #0]
    8dac:	f8b6 a000 	ldrh.w	sl, [r6]
    8db0:	2a02      	cmp	r2, #2
    8db2:	f000 81be 	beq.w	9132 <loop+0x3ee>
void loop() {
    8db6:	4650      	mov	r0, sl
    8db8:	ac04      	add	r4, sp, #16
    8dba:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8eb8 <loop+0x174>
	size_t println(const char s[])			{ return print(s) + println(); }
    8dbe:	4f39      	ldr	r7, [pc, #228]	; (8ea4 <loop+0x160>)
    8dc0:	e033      	b.n	8e2a <loop+0xe6>
    8dc2:	2101      	movs	r1, #1
    8dc4:	4640      	mov	r0, r8
    8dc6:	f002 fb2b 	bl	b420 <usb_serial_write>
    8dca:	4638      	mov	r0, r7
    8dcc:	f000 fea4 	bl	9b18 <Print::println()>
                    Serial.println(last_command);
                    run_mode = process_command(last_command);
                }
                else {
                    Serial.println(" ");
                    run_mode = process_command(c);
    8dd0:	4669      	mov	r1, sp
    8dd2:	4620      	mov	r0, r4
    8dd4:	f000 fec2 	bl	9b5c <String::String(String const&)>
    8dd8:	4620      	mov	r0, r4
    8dda:	f7ff fd25 	bl	8828 <process_command(String)>
    8dde:	7028      	strb	r0, [r5, #0]
    8de0:	4620      	mov	r0, r4
    8de2:	f000 fed9 	bl	9b98 <String::~String()>
                    last_command = c;
    8de6:	4669      	mov	r1, sp
    8de8:	482f      	ldr	r0, [pc, #188]	; (8ea8 <loop+0x164>)
    8dea:	f000 ff25 	bl	9c38 <String::operator=(String const&)>
    8dee:	2101      	movs	r1, #1
    8df0:	4640      	mov	r0, r8
    8df2:	f002 fb15 	bl	b420 <usb_serial_write>
    8df6:	4638      	mov	r0, r7
    8df8:	f000 fe8e 	bl	9b18 <Print::println()>
                }

                Serial.println(" ");

                //  Update the next_instruction, as PC or memory may have changed
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    8dfc:	782b      	ldrb	r3, [r5, #0]
    8dfe:	2b02      	cmp	r3, #2
    8e00:	d009      	beq.n	8e16 <loop+0xd2>
    8e02:	8830      	ldrh	r0, [r6, #0]
    8e04:	4550      	cmp	r0, sl
    8e06:	d006      	beq.n	8e16 <loop+0xd2>
                    next_instruction = read_byte(register_pc, false);
    8e08:	2100      	movs	r1, #0
    8e0a:	f7f9 fc31 	bl	2670 <read_byte(unsigned short, bool)>
                    temp_pc = register_pc;
    8e0e:	f8b6 a000 	ldrh.w	sl, [r6]
                    next_instruction = read_byte(register_pc, false);
    8e12:	f889 0000 	strb.w	r0, [r9]
                }
            } while (run_mode == WAITING);
    8e16:	4668      	mov	r0, sp
    8e18:	f000 febe 	bl	9b98 <String::~String()>
    8e1c:	782b      	ldrb	r3, [r5, #0]
    8e1e:	2b00      	cmp	r3, #0
    8e20:	f040 817c 	bne.w	911c <loop+0x3d8>
                display_next_instruction(register_pc, next_instruction);
    8e24:	8830      	ldrh	r0, [r6, #0]
        // For SS mode, turn on the SYNC signal for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
            digitalWriteFast(PIN_SYNC, 0x1);

		uint16_t next_pc = 0;
        switch (next_instruction) {
    8e26:	f899 1000 	ldrb.w	r1, [r9]
                display_next_instruction(register_pc, next_instruction);
    8e2a:	f7ff fb99 	bl	8560 <display_next_instruction(unsigned short, unsigned char)>
                String c = get_command();
    8e2e:	4668      	mov	r0, sp
    8e30:	f7ff fc6c 	bl	870c <get_command()>
                if (c.length() == 0 && last_command.length() != 0) {
    8e34:	9b02      	ldr	r3, [sp, #8]
    8e36:	2b00      	cmp	r3, #0
    8e38:	d1c3      	bne.n	8dc2 <loop+0x7e>
	inline unsigned int length(void) const {return len;}
    8e3a:	491b      	ldr	r1, [pc, #108]	; (8ea8 <loop+0x164>)
    8e3c:	688b      	ldr	r3, [r1, #8]
    8e3e:	2b00      	cmp	r3, #0
    8e40:	d0bf      	beq.n	8dc2 <loop+0x7e>
	size_t println(const String &s)			{ return print(s) + println(); }
    8e42:	4638      	mov	r0, r7
    8e44:	f000 fe42 	bl	9acc <Print::print(String const&)>
    8e48:	4638      	mov	r0, r7
    8e4a:	f000 fe65 	bl	9b18 <Print::println()>
                    run_mode = process_command(last_command);
    8e4e:	4916      	ldr	r1, [pc, #88]	; (8ea8 <loop+0x164>)
    8e50:	4620      	mov	r0, r4
    8e52:	f000 fe83 	bl	9b5c <String::String(String const&)>
    8e56:	4620      	mov	r0, r4
    8e58:	f7ff fce6 	bl	8828 <process_command(String)>
    8e5c:	7028      	strb	r0, [r5, #0]
    8e5e:	4620      	mov	r0, r4
    8e60:	f000 fe9a 	bl	9b98 <String::~String()>
    8e64:	e7c3      	b.n	8dee <loop+0xaa>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    8e66:	f7fa fa0d 	bl	3284 <nmi_handler()>
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8e6a:	4a0c      	ldr	r2, [pc, #48]	; (8e9c <loop+0x158>)
        nmi_n_old = direct_nmi;
    8e6c:	4b0a      	ldr	r3, [pc, #40]	; (8e98 <loop+0x154>)
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8e6e:	7812      	ldrb	r2, [r2, #0]
        nmi_n_old = direct_nmi;
    8e70:	781b      	ldrb	r3, [r3, #0]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8e72:	2a01      	cmp	r2, #1
        nmi_n_old = direct_nmi;
    8e74:	f88b 3000 	strb.w	r3, [fp]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    8e78:	d18b      	bne.n	8d92 <loop+0x4e>
    8e7a:	4b0c      	ldr	r3, [pc, #48]	; (8eac <loop+0x168>)
    8e7c:	7818      	ldrb	r0, [r3, #0]
    8e7e:	f010 0004 	ands.w	r0, r0, #4
    8e82:	d186      	bne.n	8d92 <loop+0x4e>
    8e84:	f7fa faee 	bl	3464 <irq_handler(unsigned char)>
    8e88:	e783      	b.n	8d92 <loop+0x4e>
    8e8a:	bf00      	nop
    8e8c:	2001888c 	.word	0x2001888c
    8e90:	200188a6 	.word	0x200188a6
    8e94:	2001889e 	.word	0x2001889e
    8e98:	2001889c 	.word	0x2001889c
    8e9c:	2001889b 	.word	0x2001889b
    8ea0:	200053c8 	.word	0x200053c8
    8ea4:	20004358 	.word	0x20004358
    8ea8:	200153f0 	.word	0x200153f0
    8eac:	20004968 	.word	0x20004968
    8eb0:	20004967 	.word	0x20004967
    8eb4:	200188a2 	.word	0x200188a2
    8eb8:	200007f8 	.word	0x200007f8
        if (run_mode != RUNNING) {
    8ebc:	782b      	ldrb	r3, [r5, #0]
    8ebe:	2b02      	cmp	r3, #2
    8ec0:	f040 813e 	bne.w	9140 <loop+0x3fc>
        switch (next_instruction) {
    8ec4:	29ff      	cmp	r1, #255	; 0xff
    8ec6:	f200 85b9 	bhi.w	9a3c <loop+0xcf8>
    8eca:	e8df f011 	tbh	[pc, r1, lsl #1]
    8ece:	018f      	.short	0x018f
    8ed0:	01000194 	.word	0x01000194
    8ed4:	019c0198 	.word	0x019c0198
    8ed8:	01a901a5 	.word	0x01a901a5
    8edc:	01b101ad 	.word	0x01b101ad
    8ee0:	01b901b5 	.word	0x01b901b5
    8ee4:	01c101bd 	.word	0x01c101bd
    8ee8:	01ce01ca 	.word	0x01ce01ca
    8eec:	01d601d2 	.word	0x01d601d2
    8ef0:	010001da 	.word	0x010001da
    8ef4:	01e201de 	.word	0x01e201de
    8ef8:	01ef01eb 	.word	0x01ef01eb
    8efc:	01f701f3 	.word	0x01f701f3
    8f00:	010201fb 	.word	0x010201fb
    8f04:	020301ff 	.word	0x020301ff
    8f08:	0211020d 	.word	0x0211020d
    8f0c:	02190215 	.word	0x02190215
    8f10:	0100021d 	.word	0x0100021d
    8f14:	02250221 	.word	0x02250221
    8f18:	022d0229 	.word	0x022d0229
    8f1c:	02350231 	.word	0x02350231
    8f20:	023d0239 	.word	0x023d0239
    8f24:	02450241 	.word	0x02450241
    8f28:	024d0249 	.word	0x024d0249
    8f2c:	02550251 	.word	0x02550251
    8f30:	01000259 	.word	0x01000259
    8f34:	0261025d 	.word	0x0261025d
    8f38:	026e026a 	.word	0x026e026a
    8f3c:	02760272 	.word	0x02760272
    8f40:	0102027a 	.word	0x0102027a
    8f44:	0282027e 	.word	0x0282027e
    8f48:	0290028c 	.word	0x0290028c
    8f4c:	02a30294 	.word	0x02a30294
    8f50:	010002a7 	.word	0x010002a7
    8f54:	02af02ab 	.word	0x02af02ab
    8f58:	02bc02b8 	.word	0x02bc02b8
    8f5c:	02c402c0 	.word	0x02c402c0
    8f60:	02cc02c8 	.word	0x02cc02c8
    8f64:	02d402d0 	.word	0x02d402d0
    8f68:	02dc02d8 	.word	0x02dc02d8
    8f6c:	02e402e0 	.word	0x02e402e0
    8f70:	010002e8 	.word	0x010002e8
    8f74:	02f002ec 	.word	0x02f002ec
    8f78:	02fd02f9 	.word	0x02fd02f9
    8f7c:	03050301 	.word	0x03050301
    8f80:	01020309 	.word	0x01020309
    8f84:	0311030d 	.word	0x0311030d
    8f88:	031f031b 	.word	0x031f031b
    8f8c:	03270323 	.word	0x03270323
    8f90:	0100032b 	.word	0x0100032b
    8f94:	0333032f 	.word	0x0333032f
    8f98:	0340033c 	.word	0x0340033c
    8f9c:	03480344 	.word	0x03480344
    8fa0:	0350034c 	.word	0x0350034c
    8fa4:	03580354 	.word	0x03580354
    8fa8:	0360035c 	.word	0x0360035c
    8fac:	03680364 	.word	0x03680364
    8fb0:	0100036c 	.word	0x0100036c
    8fb4:	03740370 	.word	0x03740370
    8fb8:	0381037d 	.word	0x0381037d
    8fbc:	03890385 	.word	0x03890385
    8fc0:	0102038d 	.word	0x0102038d
    8fc4:	03950391 	.word	0x03950391
    8fc8:	03a3039f 	.word	0x03a3039f
    8fcc:	03ab03a7 	.word	0x03ab03a7
    8fd0:	03b903b5 	.word	0x03b903b5
    8fd4:	03c703c3 	.word	0x03c703c3
    8fd8:	03cf03cb 	.word	0x03cf03cb
    8fdc:	03d703d3 	.word	0x03d703d3
    8fe0:	03e503db 	.word	0x03e503db
    8fe4:	03f303e9 	.word	0x03f303e9
    8fe8:	03fb03f7 	.word	0x03fb03f7
    8fec:	040303ff 	.word	0x040303ff
    8ff0:	01000407 	.word	0x01000407
    8ff4:	0414040b 	.word	0x0414040b
    8ff8:	041c0418 	.word	0x041c0418
    8ffc:	04240420 	.word	0x04240420
    9000:	042c0428 	.word	0x042c0428
    9004:	043f0435 	.word	0x043f0435
    9008:	044d0449 	.word	0x044d0449
    900c:	04610457 	.word	0x04610457
    9010:	04690465 	.word	0x04690465
    9014:	0471046d 	.word	0x0471046d
    9018:	04790475 	.word	0x04790475
    901c:	0481047d 	.word	0x0481047d
    9020:	04890485 	.word	0x04890485
    9024:	0497048d 	.word	0x0497048d
    9028:	049f049b 	.word	0x049f049b
    902c:	04a704a3 	.word	0x04a704a3
    9030:	010004ab 	.word	0x010004ab
    9034:	04b304af 	.word	0x04b304af
    9038:	04bb04b7 	.word	0x04bb04b7
    903c:	04c304bf 	.word	0x04c304bf
    9040:	04cb04c7 	.word	0x04cb04c7
    9044:	04d304cf 	.word	0x04d304cf
    9048:	04db04d7 	.word	0x04db04d7
    904c:	04e304df 	.word	0x04e304df
    9050:	04eb04e7 	.word	0x04eb04e7
    9054:	04f904f5 	.word	0x04f904f5
    9058:	050104fd 	.word	0x050104fd
    905c:	050b0506 	.word	0x050b0506
    9060:	05150510 	.word	0x05150510
    9064:	051f051a 	.word	0x051f051a
    9068:	05290524 	.word	0x05290524
    906c:	0533052e 	.word	0x0533052e
    9070:	01000538 	.word	0x01000538
    9074:	0542053d 	.word	0x0542053d
    9078:	0551054c 	.word	0x0551054c
    907c:	055b0556 	.word	0x055b0556
    9080:	01020560 	.word	0x01020560
    9084:	056a0565 	.word	0x056a0565
    9088:	057a0575 	.word	0x057a0575
    908c:	0584057f 	.word	0x0584057f
    9090:	058e0589 	.word	0x058e0589
    9094:	059e0599 	.word	0x059e0599
    9098:	05a805a3 	.word	0x05a805a3
    909c:	05b205ad 	.word	0x05b205ad
    90a0:	0102013c 	.word	0x0102013c
    90a4:	0140013c 	.word	0x0140013c
    90a8:	01480144 	.word	0x01480144
    90ac:	0150014c 	.word	0x0150014c
    90b0:	01000154 	.word	0x01000154
    90b4:	015c0158 	.word	0x015c0158
    90b8:	01690165 	.word	0x01690165
    90bc:	0171016d 	.word	0x0171016d
    90c0:	01020175 	.word	0x01020175
    90c4:	017d0179 	.word	0x017d0179
    90c8:	05b70187 	.word	0x05b70187
    90cc:	018b      	.short	0x018b
				break; // BRK - Break
			case 0x01:
				next_pc = opcode_0x01();
				break; // OR - Indexed Indirect X
			case 0x02:
				next_pc = opcode_0x02();
    90ce:	f7ff fa41 	bl	8554 <opcode_0x02()>
				break; // CLC
			case 0x19:
				next_pc = opcode_0x19();
				break; // OR - Absolute,Y
			case 0x1A:
				next_pc = opcode_0xEA();
    90d2:	f7fa fd9f 	bl	3c14 <opcode_0xEA()>
    90d6:	4607      	mov	r7, r0
				run_mode = WAITING;
				break;
        }

        // For SS mode, turn off the SYNC signal after for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    90d8:	782b      	ldrb	r3, [r5, #0]
    90da:	2b01      	cmp	r3, #1
    90dc:	d105      	bne.n	90ea <loop+0x3a6>
    90de:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    90e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    90e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            digitalWriteFast(PIN_SYNC, 0);

        char buf[32];
        sprintf(buf, "%04X", next_pc);
    90ea:	ac04      	add	r4, sp, #16
    90ec:	463a      	mov	r2, r7
    90ee:	49c4      	ldr	r1, [pc, #784]	; (9400 <loop+0x6bc>)
    90f0:	4620      	mov	r0, r4
    90f2:	f003 fc9b 	bl	ca2c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    90f6:	4620      	mov	r0, r4
    90f8:	f004 f8e2 	bl	d2c0 <strlen>
    90fc:	4601      	mov	r1, r0
    90fe:	4620      	mov	r0, r4
    9100:	f002 f98e 	bl	b420 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    9104:	48bf      	ldr	r0, [pc, #764]	; (9404 <loop+0x6c0>)
    9106:	f000 fd07 	bl	9b18 <Print::println()>
        if (direct_reset == 1) reset_sequence();
    910a:	4bbf      	ldr	r3, [pc, #764]	; (9408 <loop+0x6c4>)
        Serial.println(buf);
        register_pc = next_pc;
    910c:	8037      	strh	r7, [r6, #0]
        if (direct_reset == 1) reset_sequence();
    910e:	781b      	ldrb	r3, [r3, #0]
    9110:	2b01      	cmp	r3, #1
    9112:	f47f ae30 	bne.w	8d76 <loop+0x32>
    9116:	f7f9 ffc9 	bl	30ac <reset_sequence()>
    911a:	e62c      	b.n	8d76 <loop+0x32>
        if (run_mode == SINGLE_STEP)
    911c:	2b01      	cmp	r3, #1
    911e:	d105      	bne.n	912c <loop+0x3e8>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    9120:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    9124:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    9128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        switch (next_instruction) {
    912c:	f899 1000 	ldrb.w	r1, [r9]
}
    9130:	e6c8      	b.n	8ec4 <loop+0x180>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    9132:	4553      	cmp	r3, sl
    9134:	f47f aec6 	bne.w	8ec4 <loop+0x180>
            run_mode = WAITING;
    9138:	f04f 0300 	mov.w	r3, #0
    913c:	702b      	strb	r3, [r5, #0]
    913e:	e63a      	b.n	8db6 <loop+0x72>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    9140:	f8b6 a000 	ldrh.w	sl, [r6]
    9144:	e637      	b.n	8db6 <loop+0x72>
				next_pc = opcode_0xE9();
    9146:	f7fa fcbf 	bl	3ac8 <opcode_0xE9()>
    914a:	4607      	mov	r7, r0
				break; // SBC - Immediate
    914c:	e7c4      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xEC();
    914e:	f7fc f9b5 	bl	54bc <opcode_0xEC()>
    9152:	4607      	mov	r7, r0
				break; // CPX - Absolute
    9154:	e7c0      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xED();
    9156:	f7fa fcfd 	bl	3b54 <opcode_0xED()>
    915a:	4607      	mov	r7, r0
				break; // SBC - Absolute
    915c:	e7bc      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xEE();
    915e:	f7fc fce5 	bl	5b2c <opcode_0xEE()>
    9162:	4607      	mov	r7, r0
				break; // INC - Absolute
    9164:	e7b8      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xEF();
    9166:	f7ff f835 	bl	81d4 <opcode_0xEF()>
    916a:	4607      	mov	r7, r0
				break; // ISC - Absolute
    916c:	e7b4      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xF0();
    916e:	f7fd f967 	bl	6440 <opcode_0xF0()>
    9172:	4607      	mov	r7, r0
				break; // BEQ - Branch on Zero Set
    9174:	e7b0      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xF1();
    9176:	f7fa fd39 	bl	3bec <opcode_0xF1()>
    917a:	4607      	mov	r7, r0
				break; // SBC - Indirect Indexed  Y
    917c:	e7ac      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xF3();
    917e:	f7fe fff3 	bl	8168 <opcode_0xF3()>
    9182:	4607      	mov	r7, r0
				break; // ISC - Indirect Indexed  Y
    9184:	e7a8      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage_X();
    9186:	f7f9 fd6b 	bl	2c60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xF4].length);
    918a:	4ba0      	ldr	r3, [pc, #640]	; (940c <loop+0x6c8>)
    918c:	f893 71c1 	ldrb.w	r7, [r3, #449]	; 0x1c1
    9190:	8833      	ldrh	r3, [r6, #0]
    9192:	441f      	add	r7, r3
    9194:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    9196:	e79f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xF5();
    9198:	f7fa fcca 	bl	3b30 <opcode_0xF5()>
    919c:	4607      	mov	r7, r0
				break; // SBC - ZeroPage , X
    919e:	e79b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xF6();
    91a0:	f7fc fc92 	bl	5ac8 <opcode_0xF6()>
    91a4:	4607      	mov	r7, r0
				break; // INC - ZeroPage , X
    91a6:	e797      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xF7();
    91a8:	f7fe ff72 	bl	8090 <opcode_0xF7()>
    91ac:	4607      	mov	r7, r0
				break; // ISC - ZeroPage , X
    91ae:	e793      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xF8();
    91b0:	f7fa fde0 	bl	3d74 <opcode_0xF8()>
    91b4:	4607      	mov	r7, r0
				break; // SED
    91b6:	e78f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xF9();
    91b8:	f7fa fcf2 	bl	3ba0 <opcode_0xF9()>
    91bc:	4607      	mov	r7, r0
				break; // SBC - Absolute , Y
    91be:	e78b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xFB();
    91c0:	f7ff f874 	bl	82ac <opcode_0xFB()>
    91c4:	4607      	mov	r7, r0
				break; // ISC - Absolute , Y
    91c6:	e787      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_X(1);
    91c8:	2001      	movs	r0, #1
    91ca:	f7f9 fda5 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xFC].length);
    91ce:	4b8f      	ldr	r3, [pc, #572]	; (940c <loop+0x6c8>)
    91d0:	f893 7361 	ldrb.w	r7, [r3, #865]	; 0x361
    91d4:	8833      	ldrh	r3, [r6, #0]
    91d6:	441f      	add	r7, r3
    91d8:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    91da:	e77d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xFD();
    91dc:	f7fa fccc 	bl	3b78 <opcode_0xFD()>
    91e0:	4607      	mov	r7, r0
				break; // SBC - Absolute , X
    91e2:	e779      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xFF();
    91e4:	f7ff f82c 	bl	8240 <opcode_0xFF()>
    91e8:	4607      	mov	r7, r0
				break; // 
    91ea:	e775      	b.n	90d8 <loop+0x394>
				irq_handler(0x1);
    91ec:	2001      	movs	r0, #1
		uint16_t next_pc = 0;
    91ee:	2700      	movs	r7, #0
				irq_handler(0x1);
    91f0:	f7fa f938 	bl	3464 <irq_handler(unsigned char)>
				break; // BRK - Break
    91f4:	e770      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x01();
    91f6:	f7fb fa8b 	bl	4710 <opcode_0x01()>
    91fa:	4607      	mov	r7, r0
				break; // OR - Indexed Indirect X
    91fc:	e76c      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x03();
    91fe:	f7fd fde9 	bl	6dd4 <opcode_0x03()>
    9202:	4607      	mov	r7, r0
				break; // SLO - Indexed Indirect X
    9204:	e768      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage();
    9206:	f7f9 fd17 	bl	2c38 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x04].length);
    920a:	4b81      	ldr	r3, [pc, #516]	; (9410 <loop+0x6cc>)
    920c:	f893 7101 	ldrb.w	r7, [r3, #257]	; 0x101
    9210:	8833      	ldrh	r3, [r6, #0]
    9212:	441f      	add	r7, r3
    9214:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage
    9216:	e75f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x05();
    9218:	f7fb f9a2 	bl	4560 <opcode_0x05()>
    921c:	4607      	mov	r7, r0
				break; // OR ZeroPage
    921e:	e75b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x06();
    9220:	f7fc fb3a 	bl	5898 <opcode_0x06()>
    9224:	4607      	mov	r7, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage
    9226:	e757      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x07();
    9228:	f7fd fd5a 	bl	6ce0 <opcode_0x07()>
    922c:	4607      	mov	r7, r0
				break; // SLO - ZeroPage
    922e:	e753      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x08();
    9230:	f7fa ff6c 	bl	410c <opcode_0x08()>
    9234:	4607      	mov	r7, r0
				break; // PHP - Push processor status to the stack
    9236:	e74f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x09();
    9238:	f7fb f966 	bl	4508 <opcode_0x09()>
    923c:	4607      	mov	r7, r0
				break; // OR - Immediate
    923e:	e74b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x0A();
    9240:	f7fa fa06 	bl	3650 <opcode_0x0A()>
    9244:	4607      	mov	r7, r0
				break; // ASL A
    9246:	e747      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x0B();
    9248:	f7ff f866 	bl	8318 <opcode_0x0B()>
    924c:	4607      	mov	r7, r0
				break; // ANC - Immediate
    924e:	e743      	b.n	90d8 <loop+0x394>
    Fetch_Absolute();
    9250:	f7f9 fd46 	bl	2ce0 <Fetch_Absolute()>
    return(register_pc + opcode_info[0x0C].length);
    9254:	4b6e      	ldr	r3, [pc, #440]	; (9410 <loop+0x6cc>)
    9256:	f893 72a1 	ldrb.w	r7, [r3, #673]	; 0x2a1
    925a:	8833      	ldrh	r3, [r6, #0]
    925c:	441f      	add	r7, r3
    925e:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute
    9260:	e73a      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x0D();
    9262:	f7fb f9d9 	bl	4618 <opcode_0x0D()>
    9266:	4607      	mov	r7, r0
				break; // OR - Absolute
    9268:	e736      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x0E();
    926a:	f7fc fb83 	bl	5974 <opcode_0x0E()>
    926e:	4607      	mov	r7, r0
				break; // ASL A - Arithmetic Shift Left - Absolute
    9270:	e732      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x0F();
    9272:	f7fd fe2d 	bl	6ed0 <opcode_0x0F()>
    9276:	4607      	mov	r7, r0
				break; // SLO - Absolute
    9278:	e72e      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x10();
    927a:	f7fd f953 	bl	6524 <opcode_0x10()>
    927e:	4607      	mov	r7, r0
				break; // BNE - Branch on Zero Clear
    9280:	e72a      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x11();
    9282:	f7fb fa6d 	bl	4760 <opcode_0x11()>
    9286:	4607      	mov	r7, r0
				break; // OR Indirect Indexed  Y
    9288:	e726      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x13();
    928a:	f7fd fde1 	bl	6e50 <opcode_0x13()>
    928e:	4607      	mov	r7, r0
				break; // Indirect Indexed  Y
    9290:	e722      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage_X();
    9292:	f7f9 fce5 	bl	2c60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x14].length);
    9296:	4b5e      	ldr	r3, [pc, #376]	; (9410 <loop+0x6cc>)
    9298:	f893 7441 	ldrb.w	r7, [r3, #1089]	; 0x441
    929c:	8833      	ldrh	r3, [r6, #0]
    929e:	441f      	add	r7, r3
    92a0:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    92a2:	e719      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x15();
    92a4:	f7fb f990 	bl	45c8 <opcode_0x15()>
    92a8:	4607      	mov	r7, r0
				break; // OR - ZeroPage,X
    92aa:	e715      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x16();
    92ac:	f7fc fb2c 	bl	5908 <opcode_0x16()>
    92b0:	4607      	mov	r7, r0
				break; // ASL A - Arithmetic Shift Left - ZeroPage , X
    92b2:	e711      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x17();
    92b4:	f7fd fd50 	bl	6d58 <opcode_0x17()>
    92b8:	4607      	mov	r7, r0
				break; // SLO - ZeroPage , X
    92ba:	e70d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x18();
    92bc:	f7fa fcbe 	bl	3c3c <opcode_0x18()>
    92c0:	4607      	mov	r7, r0
				break; // CLC
    92c2:	e709      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x19();
    92c4:	f7fb f9fa 	bl	46bc <opcode_0x19()>
    92c8:	4607      	mov	r7, r0
				break; // OR - Absolute,Y
    92ca:	e705      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x1B();
    92cc:	f7fd fe7e 	bl	6fcc <opcode_0x1B()>
    92d0:	4607      	mov	r7, r0
				break; // SLO - Absolute , Y
    92d2:	e701      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_X(1);
    92d4:	2001      	movs	r0, #1
    92d6:	f7f9 fd1f 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x1C].length);
    92da:	4b4d      	ldr	r3, [pc, #308]	; (9410 <loop+0x6cc>)
    92dc:	f893 75e1 	ldrb.w	r7, [r3, #1505]	; 0x5e1
    92e0:	8833      	ldrh	r3, [r6, #0]
    92e2:	441f      	add	r7, r3
    92e4:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    92e6:	e6f7      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x1D();
    92e8:	f7fb f9be 	bl	4668 <opcode_0x1D()>
    92ec:	4607      	mov	r7, r0
				break; // OR - Absolute,X
    92ee:	e6f3      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x1E();
    92f0:	f7fc fb76 	bl	59e0 <opcode_0x1E()>
    92f4:	4607      	mov	r7, r0
				break; // ASL A - Arithmetic Shift Left - Absolute , X
    92f6:	e6ef      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x1F();
    92f8:	f7fd fe28 	bl	6f4c <opcode_0x1F()>
    92fc:	4607      	mov	r7, r0
				break; // SLO - Absolute , X
    92fe:	e6eb      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x20();
    9300:	f7fd fa96 	bl	6830 <opcode_0x20()>
    9304:	4607      	mov	r7, r0
				break; // JSR - Jump to Subroutine
    9306:	e6e7      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x21();
    9308:	f7fb f8ae 	bl	4468 <opcode_0x21()>
    930c:	4607      	mov	r7, r0
				break; // AND - Indexed Indirect
    930e:	e6e3      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x23();
    9310:	f7fd ff1a 	bl	7148 <opcode_0x23()>
    9314:	4607      	mov	r7, r0
				break; // RLA - Indexed Indirect X
    9316:	e6df      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x24();
    9318:	f7fb fe88 	bl	502c <opcode_0x24()>
    931c:	4607      	mov	r7, r0
				break; // BIT - ZeroPage
    931e:	e6db      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x25();
    9320:	f7fa ffce 	bl	42c0 <opcode_0x25()>
    9324:	4607      	mov	r7, r0
				break; // AND - ZeroPage
    9326:	e6d7      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x26();
    9328:	f7fc feba 	bl	60a0 <opcode_0x26()>
    932c:	4607      	mov	r7, r0
				break; // ROL - Rotate Left - ZeroPage
    932e:	e6d3      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x27();
    9330:	f7fd fe8c 	bl	704c <opcode_0x27()>
    9334:	4607      	mov	r7, r0
				break; // RLA - ZeroPage
    9336:	e6cf      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x28();
    9338:	f7fa ff2e 	bl	4198 <opcode_0x28()>
    933c:	4607      	mov	r7, r0
				break; // PLP - Pop processor status from the stack
    933e:	e6cb      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x29();
    9340:	f7fa ff92 	bl	4268 <opcode_0x29()>
    9344:	4607      	mov	r7, r0
				break; // AND - Immediate
    9346:	e6c7      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x2A();
    9348:	f7fa fa14 	bl	3774 <opcode_0x2A()>
    934c:	4607      	mov	r7, r0
				break; // ROL A
    934e:	e6c3      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x2B();
    9350:	f7ff f80e 	bl	8370 <opcode_0x2B()>
    9354:	4607      	mov	r7, r0
				break; // ANC - Immediate
    9356:	e6bf      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x2C();
    9358:	f7fb fe98 	bl	508c <opcode_0x2C()>
    935c:	4607      	mov	r7, r0
				break; // BIT - Absolute
    935e:	e6bb      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x2D();
    9360:	f7fb f80a 	bl	4378 <opcode_0x2D()>
    9364:	4607      	mov	r7, r0
				break; // AND - Absolute
    9366:	e6b7      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x2E();
    9368:	f7fc ff0c 	bl	6184 <opcode_0x2E()>
    936c:	4607      	mov	r7, r0
				break; // ROL - Rotate Left - Absolute
    936e:	e6b3      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x2F();
    9370:	f7fd ff68 	bl	7244 <opcode_0x2F()>
    9374:	4607      	mov	r7, r0
				break; // RLA - Absolute
    9376:	e6af      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x30();
    9378:	f7fd f8be 	bl	64f8 <opcode_0x30()>
    937c:	4607      	mov	r7, r0
				break; // BMI - Branch on Minus (N Flag Set)
    937e:	e6ab      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x31();
    9380:	f7fb f89a 	bl	44b8 <opcode_0x31()>
    9384:	4607      	mov	r7, r0
				break; // AND - Indirect Indexed
    9386:	e6a7      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x33();
    9388:	f7fd ff1c 	bl	71c4 <opcode_0x33()>
    938c:	4607      	mov	r7, r0
				break; // RLA - Indirect Indexed  Y
    938e:	e6a3      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage_X();
    9390:	f7f9 fc66 	bl	2c60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x34].length);
    9394:	4b1e      	ldr	r3, [pc, #120]	; (9410 <loop+0x6cc>)
    9396:	f893 7ac1 	ldrb.w	r7, [r3, #2753]	; 0xac1
    939a:	8833      	ldrh	r3, [r6, #0]
    939c:	441f      	add	r7, r3
    939e:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    93a0:	e69a      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x35();
    93a2:	f7fa ffc1 	bl	4328 <opcode_0x35()>
    93a6:	4607      	mov	r7, r0
				break; // AND - ZeroPage,X
    93a8:	e696      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x36();
    93aa:	f7fc feb3 	bl	6114 <opcode_0x36()>
    93ae:	4607      	mov	r7, r0
				break; // ROL - Rotate Left - ZeroPage , X
    93b0:	e692      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x37();
    93b2:	f7fd fe8b 	bl	70cc <opcode_0x37()>
    93b6:	4607      	mov	r7, r0
				break; // RLA - ZeroPage , X
    93b8:	e68e      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x38();
    93ba:	f7fa fca7 	bl	3d0c <opcode_0x38()>
    93be:	4607      	mov	r7, r0
				break; // SEC
    93c0:	e68a      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x39();
    93c2:	f7fb f829 	bl	4418 <opcode_0x39()>
    93c6:	4607      	mov	r7, r0
				break; // AND - Absolute,Y
    93c8:	e686      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x3B();
    93ca:	f7fd ffb9 	bl	7340 <opcode_0x3B()>
    93ce:	4607      	mov	r7, r0
				break; // RLA - Absolute , Y
    93d0:	e682      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_X(1);
    93d2:	2001      	movs	r0, #1
    93d4:	f7f9 fca0 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x3C].length);
    93d8:	4b0d      	ldr	r3, [pc, #52]	; (9410 <loop+0x6cc>)
    93da:	f893 7c61 	ldrb.w	r7, [r3, #3169]	; 0xc61
    93de:	8833      	ldrh	r3, [r6, #0]
    93e0:	441f      	add	r7, r3
    93e2:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    93e4:	e678      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x3D();
    93e6:	f7fa ffef 	bl	43c8 <opcode_0x3D()>
    93ea:	4607      	mov	r7, r0
				break; // AND - Absolute,X
    93ec:	e674      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x3E();
    93ee:	f7fc ff01 	bl	61f4 <opcode_0x3E()>
    93f2:	4607      	mov	r7, r0
				break; // ROL - Rotate Left - Absolute , X
    93f4:	e670      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x3F();
    93f6:	f7fd ff63 	bl	72c0 <opcode_0x3F()>
    93fa:	4607      	mov	r7, r0
				break; // RLA - Absolute , X
    93fc:	e66c      	b.n	90d8 <loop+0x394>
    93fe:	bf00      	nop
    9400:	20000874 	.word	0x20000874
    9404:	20004358 	.word	0x20004358
    9408:	2001889e 	.word	0x2001889e
    940c:	20018418 	.word	0x20018418
    9410:	20015418 	.word	0x20015418
				next_pc = opcode_0x40();
    9414:	f7fd fad4 	bl	69c0 <opcode_0x40()>
    9418:	4607      	mov	r7, r0
				break; // RTI - Return from Interrupt
    941a:	e65d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x41();
    941c:	f7fb fad6 	bl	49cc <opcode_0x41()>
    9420:	4607      	mov	r7, r0
				break; // EOR - Indexed Indirect X
    9422:	e659      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x43();
    9424:	f7fe f842 	bl	74ac <opcode_0x43()>
    9428:	4607      	mov	r7, r0
				break; // SRE - Indexed Indirect X
    942a:	e655      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage();
    942c:	f7f9 fc04 	bl	2c38 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x44].length);
    9430:	4bbf      	ldr	r3, [pc, #764]	; (9730 <loop+0x9ec>)
    9432:	f893 7e01 	ldrb.w	r7, [r3, #3585]	; 0xe01
    9436:	8833      	ldrh	r3, [r6, #0]
    9438:	441f      	add	r7, r3
    943a:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage
    943c:	e64c      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x45();
    943e:	f7fb f9e7 	bl	4810 <opcode_0x45()>
    9442:	4607      	mov	r7, r0
				break; // EOR - ZeroPage
    9444:	e648      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x46();
    9446:	f7fc fc77 	bl	5d38 <opcode_0x46()>
    944a:	4607      	mov	r7, r0
				break; // LSR - Logical Shift Right - ZeroPage
    944c:	e644      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x47();
    944e:	f7fd ffb7 	bl	73c0 <opcode_0x47()>
    9452:	4607      	mov	r7, r0
				break; // SRE - ZeroPage
    9454:	e640      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x48();
    9456:	f7fa fe7d 	bl	4154 <opcode_0x48()>
    945a:	4607      	mov	r7, r0
				break; // PHA - Push Accumulator to the stack
    945c:	e63c      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x49();
    945e:	f7fb f9a9 	bl	47b4 <opcode_0x49()>
    9462:	4607      	mov	r7, r0
				break; // EOR - Immediate
    9464:	e638      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x4A();
    9466:	f7fa f925 	bl	36b4 <opcode_0x4A()>
    946a:	4607      	mov	r7, r0
				break; // LSR A
    946c:	e634      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x4B();
    946e:	f7fe ffab 	bl	83c8 <opcode_0x4B()>
    9472:	4607      	mov	r7, r0
				break; // ALR - Immediate
    9474:	e630      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x4C();
    9476:	f7fd f86d 	bl	6554 <opcode_0x4C()>
    947a:	4607      	mov	r7, r0
				break; // JMP - Jump Absolute
    947c:	e62c      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x4D();
    947e:	f7fb fa27 	bl	48d0 <opcode_0x4D()>
    9482:	4607      	mov	r7, r0
				break; // EOR - Absolute
    9484:	e628      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x4E();
    9486:	f7fc fcbf 	bl	5e08 <opcode_0x4E()>
    948a:	4607      	mov	r7, r0
				break; // LSR - Logical Shift Right - Absolute
    948c:	e624      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x4F();
    948e:	f7fe f883 	bl	7598 <opcode_0x4F()>
    9492:	4607      	mov	r7, r0
				break; // SRE - Absolute
    9494:	e620      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x50();
    9496:	f7fd f819 	bl	64cc <opcode_0x50()>
    949a:	4607      	mov	r7, r0
				break; // BVC - Branch on Overflow Clear
    949c:	e61c      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x51();
    949e:	f7fb fabf 	bl	4a20 <opcode_0x51()>
    94a2:	4607      	mov	r7, r0
				break; // EOR - Indirect Indexed  Y
    94a4:	e618      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x53();
    94a6:	f7fe f83b 	bl	7520 <opcode_0x53()>
    94aa:	4607      	mov	r7, r0
				break; // SRE - Indirect Indexed  Y
    94ac:	e614      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage_X();
    94ae:	f7f9 fbd7 	bl	2c60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x54].length);
    94b2:	4ba0      	ldr	r3, [pc, #640]	; (9734 <loop+0x9f0>)
    94b4:	f893 7141 	ldrb.w	r7, [r3, #321]	; 0x141
    94b8:	8833      	ldrh	r3, [r6, #0]
    94ba:	441f      	add	r7, r3
    94bc:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    94be:	e60b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x55();
    94c0:	f7fb f9dc 	bl	487c <opcode_0x55()>
    94c4:	4607      	mov	r7, r0
				break; // EOR - ZeroPage,X
    94c6:	e607      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x56();
    94c8:	f7fc fc6c 	bl	5da4 <opcode_0x56()>
    94cc:	4607      	mov	r7, r0
				break; // LSR - Logical Shift Right - ZeroPage , X
    94ce:	e603      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x57();
    94d0:	f7fd ffb2 	bl	7438 <opcode_0x57()>
    94d4:	4607      	mov	r7, r0
				break; // SRE - ZeroPage , X
    94d6:	e5ff      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x58();
    94d8:	f7fa fbe4 	bl	3ca4 <opcode_0x58()>
    94dc:	4607      	mov	r7, r0
				break; // CLI
    94de:	e5fb      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x59();
    94e0:	f7fb fa4a 	bl	4978 <opcode_0x59()>
    94e4:	4607      	mov	r7, r0
				break; // EOR - Absolute,Y
    94e6:	e5f7      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x5B();
    94e8:	f7fe f8cc 	bl	7684 <opcode_0x5B()>
    94ec:	4607      	mov	r7, r0
				break; // RE - Absolute , Y
    94ee:	e5f3      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_X(1);
    94f0:	2001      	movs	r0, #1
    94f2:	f7f9 fc11 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x5C].length);
    94f6:	4b8f      	ldr	r3, [pc, #572]	; (9734 <loop+0x9f0>)
    94f8:	f893 72e1 	ldrb.w	r7, [r3, #737]	; 0x2e1
    94fc:	8833      	ldrh	r3, [r6, #0]
    94fe:	441f      	add	r7, r3
    9500:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    9502:	e5e9      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x5D();
    9504:	f7fb fa0e 	bl	4924 <opcode_0x5D()>
    9508:	4607      	mov	r7, r0
				break; // EOR - Absolute,X
    950a:	e5e5      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x5E();
    950c:	f7fc fcac 	bl	5e68 <opcode_0x5E()>
    9510:	4607      	mov	r7, r0
				break; // LSR - Logical Shift Right - Absolute , X
    9512:	e5e1      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x5F();
    9514:	f7fe f87a 	bl	760c <opcode_0x5F()>
    9518:	4607      	mov	r7, r0
				break; // SRE - Absolute , X
    951a:	e5dd      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x60();
    951c:	f7fd fb1c 	bl	6b58 <opcode_0x60()>
    9520:	4607      	mov	r7, r0
				break; // RTS - Return from Subroutine
    9522:	e5d9      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x61();
    9524:	f7fa fa40 	bl	39a8 <opcode_0x61()>
    9528:	4607      	mov	r7, r0
				break; // ADC - Indexed Indirect X
    952a:	e5d5      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x63();
    952c:	f7fe f94c 	bl	77c8 <opcode_0x63()>
    9530:	4607      	mov	r7, r0
				break; // RRA - Indexed Indirect X
    9532:	e5d1      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage();
    9534:	f7f9 fb80 	bl	2c38 <Fetch_ZeroPage()>
    return(register_pc + opcode_info[0x64].length);
    9538:	4b7e      	ldr	r3, [pc, #504]	; (9734 <loop+0x9f0>)
    953a:	f893 7481 	ldrb.w	r7, [r3, #1153]	; 0x481
    953e:	8833      	ldrh	r3, [r6, #0]
    9540:	441f      	add	r7, r3
    9542:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage
    9544:	e5c8      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x65();
    9546:	f7fa f9c5 	bl	38d4 <opcode_0x65()>
    954a:	4607      	mov	r7, r0
				break; // ADC - ZeroPage
    954c:	e5c4      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x66();
    954e:	f7fc fcbd 	bl	5ecc <opcode_0x66()>
    9552:	4607      	mov	r7, r0
				break; // ROR - Rotate Right - ZeroPage
    9554:	e5c0      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x67();
    9556:	f7fe f8d1 	bl	76fc <opcode_0x67()>
    955a:	4607      	mov	r7, r0
				break; // RRA - ZeroPage
    955c:	e5bc      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x68();
    955e:	f7fa fe47 	bl	41f0 <opcode_0x68()>
    9562:	4607      	mov	r7, r0
				break; // PLA - Pop Accumulator from the stack
    9564:	e5b8      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x69();
    9566:	f7fa f99f 	bl	38a8 <opcode_0x69()>
    956a:	4607      	mov	r7, r0
				break; // ADC - Immediate
    956c:	e5b4      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x6A();
    956e:	f7fa f8cd 	bl	370c <opcode_0x6A()>
    9572:	4607      	mov	r7, r0
				break; // ROR A
    9574:	e5b0      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x6B();
    9576:	f7fe ff57 	bl	8428 <opcode_0x6B()>
    957a:	4607      	mov	r7, r0
				break; // ARR - Immediate
    957c:	e5ac      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x6C();
    957e:	f7fd f899 	bl	66b4 <opcode_0x6C()>
    9582:	4607      	mov	r7, r0
				break; // JMP - Jump Indirect
    9584:	e5a8      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x6D();
    9586:	f7fa f9d5 	bl	3934 <opcode_0x6D()>
    958a:	4607      	mov	r7, r0
				break; // ADC - Absolute
    958c:	e5a4      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x6E();
    958e:	f7fc fd13 	bl	5fb8 <opcode_0x6E()>
    9592:	4607      	mov	r7, r0
				break; // ROR - Rotate Right - Absolute
    9594:	e5a0      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x6F();
    9596:	f7fe f975 	bl	7884 <opcode_0x6F()>
    959a:	4607      	mov	r7, r0
				break; // RRA - Absolute
    959c:	e59c      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x70();
    959e:	f7fc ff7d 	bl	649c <opcode_0x70()>
    95a2:	4607      	mov	r7, r0
				break; // BVS - Branch on Overflow Set
    95a4:	e598      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x71();
    95a6:	f7fa fa11 	bl	39cc <opcode_0x71()>
    95aa:	4607      	mov	r7, r0
				break; // ADC - Indirect Indexed  Y
    95ac:	e594      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x73();
    95ae:	f7fe f939 	bl	7824 <opcode_0x73()>
    95b2:	4607      	mov	r7, r0
				break; // RRA - Indirect Indexed  Y
    95b4:	e590      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage_X();
    95b6:	f7f9 fb53 	bl	2c60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0x74].length);
    95ba:	4b5e      	ldr	r3, [pc, #376]	; (9734 <loop+0x9f0>)
    95bc:	f893 77c1 	ldrb.w	r7, [r3, #1985]	; 0x7c1
    95c0:	8833      	ldrh	r3, [r6, #0]
    95c2:	441f      	add	r7, r3
    95c4:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    95c6:	e587      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x75();
    95c8:	f7fa f9a2 	bl	3910 <opcode_0x75()>
    95cc:	4607      	mov	r7, r0
				break; // ADC - ZeroPage , X
    95ce:	e583      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x76();
    95d0:	f7fc fcb8 	bl	5f44 <opcode_0x76()>
    95d4:	4607      	mov	r7, r0
				break; // ROR - Rotate Right - ZeroPage , X
    95d6:	e57f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x77();
    95d8:	f7fe f8c8 	bl	776c <opcode_0x77()>
    95dc:	4607      	mov	r7, r0
				break; // RRA - ZeroPage , X
    95de:	e57b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x78();
    95e0:	f7fa fbae 	bl	3d40 <opcode_0x78()>
    95e4:	4607      	mov	r7, r0
				break; // SEI
    95e6:	e577      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x79();
    95e8:	f7fa f9ca 	bl	3980 <opcode_0x79()>
    95ec:	4607      	mov	r7, r0
				break; // ADC - Absolute , Y
    95ee:	e573      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x7B();
    95f0:	f7fe f9a6 	bl	7940 <opcode_0x7B()>
    95f4:	4607      	mov	r7, r0
				break; // RRA - Absolute , Y
    95f6:	e56f      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_X(1);
    95f8:	2001      	movs	r0, #1
    95fa:	f7f9 fb8d 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x7C].length);
    95fe:	4b4d      	ldr	r3, [pc, #308]	; (9734 <loop+0x9f0>)
    9600:	f893 7961 	ldrb.w	r7, [r3, #2401]	; 0x961
    9604:	8833      	ldrh	r3, [r6, #0]
    9606:	441f      	add	r7, r3
    9608:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    960a:	e565      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x7D();
    960c:	f7fa f9a4 	bl	3958 <opcode_0x7D()>
    9610:	4607      	mov	r7, r0
				break; // ADC - Absolute , X
    9612:	e561      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x7E();
    9614:	f7fc fd0a 	bl	602c <opcode_0x7E()>
    9618:	4607      	mov	r7, r0
				break; // ROR - Rotate Right - Absolute , X
    961a:	e55d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x7F();
    961c:	f7fe f960 	bl	78e0 <opcode_0x7F()>
    9620:	4607      	mov	r7, r0
				break; // RRA - Absolute , X
    9622:	e559      	b.n	90d8 <loop+0x394>
    Fetch_Immediate(1);
    9624:	2001      	movs	r0, #1
    9626:	f7f9 fafb 	bl	2c20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x80].length);
    962a:	4b42      	ldr	r3, [pc, #264]	; (9734 <loop+0x9f0>)
    962c:	f893 7a31 	ldrb.w	r7, [r3, #2609]	; 0xa31
    9630:	8833      	ldrh	r3, [r6, #0]
    9632:	441f      	add	r7, r3
    9634:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    9636:	e54f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x81();
    9638:	f7fc f876 	bl	5728 <opcode_0x81()>
    963c:	4607      	mov	r7, r0
				break; // STA - Indexed Indirect X
    963e:	e54b      	b.n	90d8 <loop+0x394>
    Fetch_Immediate(1);
    9640:	2001      	movs	r0, #1
    9642:	f7f9 faed 	bl	2c20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x82].length);
    9646:	4b3b      	ldr	r3, [pc, #236]	; (9734 <loop+0x9f0>)
    9648:	f893 7a99 	ldrb.w	r7, [r3, #2713]	; 0xa99
    964c:	8833      	ldrh	r3, [r6, #0]
    964e:	441f      	add	r7, r3
    9650:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    9652:	e541      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x83();
    9654:	f7fe f9e0 	bl	7a18 <opcode_0x83()>
    9658:	4607      	mov	r7, r0
				break; // SAX - Indexed Indirect X
    965a:	e53d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x84();
    965c:	f7fc f8d4 	bl	5808 <opcode_0x84()>
    9660:	4607      	mov	r7, r0
				break; // STY - ZeroPage
    9662:	e539      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x85();
    9664:	f7fb fff2 	bl	564c <opcode_0x85()>
    9668:	4607      	mov	r7, r0
				break; // STA - ZeroPage
    966a:	e535      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x86();
    966c:	f7fc f884 	bl	5778 <opcode_0x86()>
    9670:	4607      	mov	r7, r0
				break; // STX - ZeroPage
    9672:	e531      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x87();
    9674:	f7fe f994 	bl	79a0 <opcode_0x87()>
    9678:	4607      	mov	r7, r0
				break; // SAX - ZeroPage
    967a:	e52d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x88();
    967c:	f7fa fbc0 	bl	3e00 <opcode_0x88()>
    9680:	4607      	mov	r7, r0
				break; // DEY
    9682:	e529      	b.n	90d8 <loop+0x394>
    Fetch_Immediate(1);
    9684:	2001      	movs	r0, #1
    9686:	f7f9 facb 	bl	2c20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0x89].length);
    968a:	4b2a      	ldr	r3, [pc, #168]	; (9734 <loop+0x9f0>)
    968c:	f893 7c05 	ldrb.w	r7, [r3, #3077]	; 0xc05
    9690:	8833      	ldrh	r3, [r6, #0]
    9692:	441f      	add	r7, r3
    9694:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    9696:	e51f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x8A();
    9698:	f7fa fcc0 	bl	401c <opcode_0x8A()>
    969c:	4607      	mov	r7, r0
				break; // TXA
    969e:	e51b      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_Y(0);
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x9B].length);
} // 0x9B - TAS - Absolute , Y - Implelented here as a size 3 NOP
uint16_t opcode_0x8B() {
    Fetch_Immediate(1);
    96a0:	2001      	movs	r0, #1
    96a2:	f7f9 fabd 	bl	2c20 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0x8B].length);
    96a6:	4b23      	ldr	r3, [pc, #140]	; (9734 <loop+0x9f0>)
    96a8:	f893 7c6d 	ldrb.w	r7, [r3, #3181]	; 0xc6d
    96ac:	8833      	ldrh	r3, [r6, #0]
    96ae:	441f      	add	r7, r3
    96b0:	b2bf      	uxth	r7, r7
				break; // ANE - Immediate
    96b2:	e511      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x8C();
    96b4:	f7fc f8dc 	bl	5870 <opcode_0x8C()>
    96b8:	4607      	mov	r7, r0
				break; // STY - Absolute
    96ba:	e50d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x8D();
    96bc:	f7fb ffe6 	bl	568c <opcode_0x8D()>
    96c0:	4607      	mov	r7, r0
				break; // STA - Absolute
    96c2:	e509      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x8E();
    96c4:	f7fc f88c 	bl	57e0 <opcode_0x8E()>
    96c8:	4607      	mov	r7, r0
				break; // STX - Absolute
    96ca:	e505      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x8F();
    96cc:	f7fe f9bc 	bl	7a48 <opcode_0x8F()>
    96d0:	4607      	mov	r7, r0
				break; // SAX - Absolute
    96d2:	e501      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x90();
    96d4:	f7fc fe9e 	bl	6414 <opcode_0x90()>
    96d8:	4607      	mov	r7, r0
				break; // BCC - Branch on Carry Clear
    96da:	e4fd      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x91();
    96dc:	f7fc f838 	bl	5750 <opcode_0x91()>
    96e0:	4607      	mov	r7, r0
				break; // STA - Indirect Indexed  Y
    96e2:	e4f9      	b.n	90d8 <loop+0x394>
    Fetch_ZeroPage_Y();
    96e4:	f7f9 fadc 	bl	2ca0 <Fetch_ZeroPage_Y()>
    return(register_pc + opcode_info[0x93].length);
    96e8:	4b12      	ldr	r3, [pc, #72]	; (9734 <loop+0x9f0>)
    96ea:	f893 7e0d 	ldrb.w	r7, [r3, #3597]	; 0xe0d
    96ee:	8833      	ldrh	r3, [r6, #0]
    96f0:	441f      	add	r7, r3
    96f2:	b2bf      	uxth	r7, r7
				break; // SHA - ZeroPage , Y
    96f4:	e4f0      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x94();
    96f6:	f7fc f8a7 	bl	5848 <opcode_0x94()>
    96fa:	4607      	mov	r7, r0
				break; // STY - ZeroPage , X
    96fc:	e4ec      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x95();
    96fe:	f7fb ffd9 	bl	56b4 <opcode_0x95()>
    9702:	4607      	mov	r7, r0
				break; // STA - ZeroPage , X
    9704:	e4e8      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x96();
    9706:	f7fc f857 	bl	57b8 <opcode_0x96()>
    970a:	4607      	mov	r7, r0
				break; // STX - ZeroPage , Y
    970c:	e4e4      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x97();
    970e:	f7fe f96b 	bl	79e8 <opcode_0x97()>
    9712:	4607      	mov	r7, r0
				break; // SAX - ZeroPage , Y
    9714:	e4e0      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x98();
    9716:	f7fa fccb 	bl	40b0 <opcode_0x98()>
    971a:	4607      	mov	r7, r0
				break; // TYA
    971c:	e4dc      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x99();
    971e:	f7fb ffef 	bl	5700 <opcode_0x99()>
    9722:	4607      	mov	r7, r0
				break; // STA - Absolute , Y
    9724:	e4d8      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x9A();
    9726:	f7fa fca7 	bl	4078 <opcode_0x9A()>
    972a:	4607      	mov	r7, r0
				break; // TXS
    972c:	e4d4      	b.n	90d8 <loop+0x394>
    972e:	bf00      	nop
    9730:	20015418 	.word	0x20015418
    9734:	20016418 	.word	0x20016418
    Fetch_Absolute_Y(0);
    9738:	2000      	movs	r0, #0
    973a:	f7f9 fb1d 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9B].length);
    973e:	4bc4      	ldr	r3, [pc, #784]	; (9a50 <loop+0xd0c>)
    9740:	f893 7fad 	ldrb.w	r7, [r3, #4013]	; 0xfad
    9744:	8833      	ldrh	r3, [r6, #0]
    9746:	441f      	add	r7, r3
    9748:	b2bf      	uxth	r7, r7
				break; // TAS - Absolute , Y 
    974a:	e4c5      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_X(0);
    974c:	2000      	movs	r0, #0
    974e:	f7f9 fae3 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0x9C].length);
    9752:	4bbf      	ldr	r3, [pc, #764]	; (9a50 <loop+0xd0c>)
    9754:	f893 7fe1 	ldrb.w	r7, [r3, #4065]	; 0xfe1
    9758:	8833      	ldrh	r3, [r6, #0]
    975a:	441f      	add	r7, r3
    975c:	b2bf      	uxth	r7, r7
				break; // SHY - Absolute , X
    975e:	e4bb      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0x9D();
    9760:	f7fb ffbc 	bl	56dc <opcode_0x9D()>
    9764:	4607      	mov	r7, r0
				break; // STA - Absolute , X
    9766:	e4b7      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_Y(0);
    9768:	2000      	movs	r0, #0
    976a:	f7f9 fb05 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9E].length);
    976e:	4bb9      	ldr	r3, [pc, #740]	; (9a54 <loop+0xd10>)
    9770:	f893 7049 	ldrb.w	r7, [r3, #73]	; 0x49
    9774:	8833      	ldrh	r3, [r6, #0]
    9776:	441f      	add	r7, r3
    9778:	b2bf      	uxth	r7, r7
				break; // SHX - Absolute , Y
    977a:	e4ad      	b.n	90d8 <loop+0x394>
    Fetch_Absolute_Y(0);
    977c:	2000      	movs	r0, #0
    977e:	f7f9 fafb 	bl	2d78 <Fetch_Absolute_Y(unsigned char)>
    return(register_pc + opcode_info[0x9F].length);
    9782:	4bb4      	ldr	r3, [pc, #720]	; (9a54 <loop+0xd10>)
    9784:	f893 707d 	ldrb.w	r7, [r3, #125]	; 0x7d
    9788:	8833      	ldrh	r3, [r6, #0]
    978a:	441f      	add	r7, r3
    978c:	b2bf      	uxth	r7, r7
				break; // SHA - Absolute , Y
    978e:	e4a3      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA0();
    9790:	f7fb fb7e 	bl	4e90 <opcode_0xA0()>
    9794:	4607      	mov	r7, r0
				break; // LDY - Immediate
    9796:	e49f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA1();
    9798:	f7fb fa60 	bl	4c5c <opcode_0xA1()>
    979c:	4607      	mov	r7, r0
				break; // LDA - Indexed Indirect X
    979e:	e49b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA2();
    97a0:	f7fb faa8 	bl	4cf4 <opcode_0xA2()>
    97a4:	4607      	mov	r7, r0
				break; // LDX - Immediate
    97a6:	e497      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA3();
    97a8:	f7fe f9c6 	bl	7b38 <opcode_0xA3()>
    97ac:	4607      	mov	r7, r0
				break; // LAX - Indexed Indirect X
    97ae:	e493      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA4();
    97b0:	f7fb fb98 	bl	4ee4 <opcode_0xA4()>
    97b4:	4607      	mov	r7, r0
				break; // LDY - ZeroPage
    97b6:	e48f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA5();
    97b8:	f7fb f986 	bl	4ac8 <opcode_0xA5()>
    97bc:	4607      	mov	r7, r0
				break; // LDA - ZeroPage
    97be:	e48b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA6();
    97c0:	f7fb fac2 	bl	4d48 <opcode_0xA6()>
    97c4:	4607      	mov	r7, r0
				break; // LDX - ZeroPage
    97c6:	e487      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA7();
    97c8:	f7fe f956 	bl	7a78 <opcode_0xA7()>
    97cc:	4607      	mov	r7, r0
				break; // LAX - ZeroPage
    97ce:	e483      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA8();
    97d0:	f7fa fbc8 	bl	3f64 <opcode_0xA8()>
    97d4:	4607      	mov	r7, r0
				break; // TAY
    97d6:	e47f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xA9();
    97d8:	f7fb f94c 	bl	4a74 <opcode_0xA9()>
    97dc:	4607      	mov	r7, r0
				break; // LDA - Immediate
    97de:	e47b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xAA();
    97e0:	f7fa fb92 	bl	3f08 <opcode_0xAA()>
    97e4:	4607      	mov	r7, r0
				break; // TAX
    97e6:	e477      	b.n	90d8 <loop+0x394>
} // 0x8B - ANE - Immediate    - Implelented here as a size 2 NOP
uint16_t opcode_0xAB() {
    Fetch_Immediate(1);
    97e8:	2001      	movs	r0, #1
    97ea:	f7f9 fa19 	bl	2c20 <Fetch_Immediate(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return(register_pc + opcode_info[0xAB].length);
    97ee:	4b99      	ldr	r3, [pc, #612]	; (9a54 <loop+0xd10>)
    97f0:	f893 72ed 	ldrb.w	r7, [r3, #749]	; 0x2ed
    97f4:	8833      	ldrh	r3, [r6, #0]
    97f6:	441f      	add	r7, r3
    97f8:	b2bf      	uxth	r7, r7
				break; // LAX - Immediate
    97fa:	e46d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xAC();
    97fc:	f7fb fbca 	bl	4f94 <opcode_0xAC()>
    9800:	4607      	mov	r7, r0
				break; // LDY - Absolute
    9802:	e469      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xAD();
    9804:	f7fb f9b8 	bl	4b78 <opcode_0xAD()>
    9808:	4607      	mov	r7, r0
				break; // LDA - Absolute
    980a:	e465      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xAE();
    980c:	f7fb faf4 	bl	4df8 <opcode_0xAE()>
    9810:	4607      	mov	r7, r0
				break; // LDX - Absolute
    9812:	e461      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xAF();
    9814:	f7fe f9e4 	bl	7be0 <opcode_0xAF()>
    9818:	4607      	mov	r7, r0
				break; // LAX - Absolute
    981a:	e45d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB0();
    981c:	f7fc fde4 	bl	63e8 <opcode_0xB0()>
    9820:	4607      	mov	r7, r0
				break; // BCS - Branch on Carry Set
    9822:	e459      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB1();
    9824:	f7fb fa40 	bl	4ca8 <opcode_0xB1()>
    9828:	4607      	mov	r7, r0
				break; // LDA - Indirect Indexed  Y
    982a:	e455      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB3();
    982c:	f7fe f9ae 	bl	7b8c <opcode_0xB3()>
    9830:	4607      	mov	r7, r0
				break; // LAX - Indirect Indexed  Y
    9832:	e451      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB4();
    9834:	f7fb fb88 	bl	4f48 <opcode_0xB4()>
    9838:	4607      	mov	r7, r0
				break; // LDY - ZeroPage , X
    983a:	e44d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB5();
    983c:	f7fb f976 	bl	4b2c <opcode_0xB5()>
    9840:	4607      	mov	r7, r0
				break; // LDA - ZeroPage , X
    9842:	e449      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB6();
    9844:	f7fb fab2 	bl	4dac <opcode_0xB6()>
    9848:	4607      	mov	r7, r0
				break; // LDX - ZeroPage , Y
    984a:	e445      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB7();
    984c:	f7fe f94a 	bl	7ae4 <opcode_0xB7()>
    9850:	4607      	mov	r7, r0
				break; // LAX - ZeroPage , Y
    9852:	e441      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB8();
    9854:	f7fa fa40 	bl	3cd8 <opcode_0xB8()>
    9858:	4607      	mov	r7, r0
				break; // CLV
    985a:	e43d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xB9();
    985c:	f7fb f9d8 	bl	4c10 <opcode_0xB9()>
    9860:	4607      	mov	r7, r0
				break; // LDA - Absolute , Y
    9862:	e439      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xBA();
    9864:	f7fa fbac 	bl	3fc0 <opcode_0xBA()>
    9868:	4607      	mov	r7, r0
				break; // TSX
    986a:	e435      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xBB();
    986c:	f7fe fe40 	bl	84f0 <opcode_0xBB()>
    9870:	4607      	mov	r7, r0
				break; // LAS - Absolute , Y
    9872:	e431      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xBC();
    9874:	f7fb fbb4 	bl	4fe0 <opcode_0xBC()>
    9878:	4607      	mov	r7, r0
				break; // LDY - Absolute , X
    987a:	e42d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xBD();
    987c:	f7fb f9a2 	bl	4bc4 <opcode_0xBD()>
    9880:	4607      	mov	r7, r0
				break; // LDA - Absolute , X
    9882:	e429      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xBE();
    9884:	f7fb fade 	bl	4e44 <opcode_0xBE()>
    9888:	4607      	mov	r7, r0
				break; // LDX - Absolute , Y
    988a:	e425      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xBF();
    988c:	f7fe f9d2 	bl	7c34 <opcode_0xBF()>
    9890:	4607      	mov	r7, r0
				break; // LAX - Absolute , Y
    9892:	e421      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xC0();
    9894:	f7fb fe40 	bl	5518 <opcode_0xC0()>
    9898:	4607      	mov	r7, r0
				break; // CPY - Immediate
    989a:	e41d      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xC1();
    989c:	f7fb fd44 	bl	5328 <opcode_0xC1()>
    98a0:	4607      	mov	r7, r0
				break; // CMP - Indexed Indirect X
    98a2:	e419      	b.n	90d8 <loop+0x394>
    Fetch_Immediate(1);
    98a4:	2001      	movs	r0, #1
    98a6:	f7f9 f9bb 	bl	2c20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xC2].length);
    98aa:	4b6a      	ldr	r3, [pc, #424]	; (9a54 <loop+0xd10>)
    98ac:	f893 7799 	ldrb.w	r7, [r3, #1945]	; 0x799
    98b0:	8833      	ldrh	r3, [r6, #0]
    98b2:	441f      	add	r7, r3
    98b4:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    98b6:	e40f      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xC3();
    98b8:	f7fe fa6c 	bl	7d94 <opcode_0xC3()>
    98bc:	4607      	mov	r7, r0
				break; // DCP - Indexed Indirect X
    98be:	e40b      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xC4();
    98c0:	f7fb fe5c 	bl	557c <opcode_0xC4()>
    98c4:	4607      	mov	r7, r0
				break; // CPY - ZeroPage
    98c6:	e407      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xC5();
    98c8:	f7fb fc38 	bl	513c <opcode_0xC5()>
    98cc:	4607      	mov	r7, r0
				break; // CMP - ZeroPage
    98ce:	e403      	b.n	90d8 <loop+0x394>
				next_pc = opcode_0xC6();
    98d0:	f7fc f95e 	bl	5b90 <opcode_0xC6()>
    98d4:	4607      	mov	r7, r0
				break; // DEC - ZeroPage
    98d6:	f7ff bbff 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xC7();
    98da:	f7fe f9d5 	bl	7c88 <opcode_0xC7()>
    98de:	4607      	mov	r7, r0
				break; // DCP - ZeroPage
    98e0:	f7ff bbfa 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xC8();
    98e4:	f7fa fae4 	bl	3eb0 <opcode_0xC8()>
    98e8:	4607      	mov	r7, r0
				break; // INY
    98ea:	f7ff bbf5 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xC9();
    98ee:	f7fb fbf3 	bl	50d8 <opcode_0xC9()>
    98f2:	4607      	mov	r7, r0
				break; // CMP - Immediate
    98f4:	f7ff bbf0 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xCA();
    98f8:	f7fa fa56 	bl	3da8 <opcode_0xCA()>
    98fc:	4607      	mov	r7, r0
				break; // DEX
    98fe:	f7ff bbeb 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xCB();
    9902:	f7fe fdbd 	bl	8480 <opcode_0xCB()>
    9906:	4607      	mov	r7, r0
				break; // SBX - Immediate
    9908:	f7ff bbe6 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xCC();
    990c:	f7fb fe70 	bl	55f0 <opcode_0xCC()>
    9910:	4607      	mov	r7, r0
				break; // CPY - Absolute
    9912:	f7ff bbe1 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xCD();
    9916:	f7fb fc79 	bl	520c <opcode_0xCD()>
    991a:	4607      	mov	r7, r0
				break; // CMP - Absolute
    991c:	f7ff bbdc 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xCE();
    9920:	f7fc f9a4 	bl	5c6c <opcode_0xCE()>
    9924:	4607      	mov	r7, r0
				break; // DEC - Absolute
    9926:	f7ff bbd7 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xCF();
    992a:	f7fe fabb 	bl	7ea4 <opcode_0xCF()>
    992e:	4607      	mov	r7, r0
				break; // DCP - Absolute
    9930:	f7ff bbd2 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xD0();
    9934:	f7fc fd9c 	bl	6470 <opcode_0xD0()>
    9938:	4607      	mov	r7, r0
				break; // BNE - Branch on Zero Clear
    993a:	f7ff bbcd 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xD1();
    993e:	f7fb fd21 	bl	5384 <opcode_0xD1()>
    9942:	4607      	mov	r7, r0
				break; // CMP - Indirect Indexed  Y
    9944:	f7ff bbc8 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xD3();
    9948:	f7fe fa68 	bl	7e1c <opcode_0xD3()>
    994c:	4607      	mov	r7, r0
				break; // DCP - Indirect Indexed  Y
    994e:	f7ff bbc3 	b.w	90d8 <loop+0x394>
    Fetch_ZeroPage_X();
    9952:	f7f9 f985 	bl	2c60 <Fetch_ZeroPage_X()>
    return(register_pc + opcode_info[0xD4].length);
    9956:	4b3f      	ldr	r3, [pc, #252]	; (9a54 <loop+0xd10>)
    9958:	f893 7b41 	ldrb.w	r7, [r3, #2881]	; 0xb41
    995c:	8833      	ldrh	r3, [r6, #0]
    995e:	441f      	add	r7, r3
    9960:	b2bf      	uxth	r7, r7
				break; // NOP - ZeroPage , X
    9962:	f7ff bbb9 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xD5();
    9966:	f7fb fc23 	bl	51b0 <opcode_0xD5()>
    996a:	4607      	mov	r7, r0
				break; // CMP - ZeroPage , X
    996c:	f7ff bbb4 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xD6();
    9970:	f7fc f94a 	bl	5c08 <opcode_0xD6()>
    9974:	4607      	mov	r7, r0
				break; // DEC - ZeroPage , X
    9976:	f7ff bbaf 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xD7();
    997a:	f7fe f9c7 	bl	7d0c <opcode_0xD7()>
    997e:	4607      	mov	r7, r0
				break; // DCP - ZeroPage , X
    9980:	f7ff bbaa 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xD8();
    9984:	f7fa f974 	bl	3c70 <opcode_0xD8()>
    9988:	4607      	mov	r7, r0
				break; // CLD
    998a:	f7ff bba5 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xD9();
    998e:	f7fb fc9b 	bl	52c8 <opcode_0xD9()>
    9992:	4607      	mov	r7, r0
				break; // CMP - Absolute , Y
    9994:	f7ff bba0 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xDB();
    9998:	f7fe fb02 	bl	7fa0 <opcode_0xDB()>
    999c:	4607      	mov	r7, r0
				break; // DCP - Absolute , Y
    999e:	f7ff bb9b 	b.w	90d8 <loop+0x394>
    Fetch_Absolute_X(1);
    99a2:	2001      	movs	r0, #1
    99a4:	f7f9 f9b8 	bl	2d18 <Fetch_Absolute_X(unsigned char)>
    return(register_pc + opcode_info[0xDC].length);
    99a8:	4b2a      	ldr	r3, [pc, #168]	; (9a54 <loop+0xd10>)
    99aa:	f893 7ce1 	ldrb.w	r7, [r3, #3297]	; 0xce1
    99ae:	8833      	ldrh	r3, [r6, #0]
    99b0:	441f      	add	r7, r3
    99b2:	b2bf      	uxth	r7, r7
				break; // NOP - Absolute , X
    99b4:	f7ff bb90 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xDD();
    99b8:	f7fb fc56 	bl	5268 <opcode_0xDD()>
    99bc:	4607      	mov	r7, r0
				break; // CMP - Absolute , X
    99be:	f7ff bb8b 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xDE();
    99c2:	f7fc f985 	bl	5cd0 <opcode_0xDE()>
    99c6:	4607      	mov	r7, r0
				break; // DEC - Absolute , X
    99c8:	f7ff bb86 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xDF();
    99cc:	f7fe faae 	bl	7f2c <opcode_0xDF()>
    99d0:	4607      	mov	r7, r0
				break; // DCP - Absolute , X
    99d2:	f7ff bb81 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xE0();
    99d6:	f7fb fd05 	bl	53e4 <opcode_0xE0()>
    99da:	4607      	mov	r7, r0
				break; // CPX - Immediate
    99dc:	f7ff bb7c 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xE1();
    99e0:	f7fa f8f2 	bl	3bc8 <opcode_0xE1()>
    99e4:	4607      	mov	r7, r0
				break; // SBC - Indexed Indirect X
    99e6:	f7ff bb77 	b.w	90d8 <loop+0x394>
    Fetch_Immediate(1);
    99ea:	2001      	movs	r0, #1
    99ec:	f7f9 f918 	bl	2c20 <Fetch_Immediate(unsigned char)>
    return(register_pc + opcode_info[0xE2].length);
    99f0:	4b18      	ldr	r3, [pc, #96]	; (9a54 <loop+0xd10>)
    99f2:	f893 7e19 	ldrb.w	r7, [r3, #3609]	; 0xe19
    99f6:	8833      	ldrh	r3, [r6, #0]
    99f8:	441f      	add	r7, r3
    99fa:	b2bf      	uxth	r7, r7
				break; // NOP - Immediate
    99fc:	f7ff bb6c 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xE3();
    9a00:	f7fe fb7c 	bl	80fc <opcode_0xE3()>
    9a04:	4607      	mov	r7, r0
				break; // ISC - Indexed Indirect X
    9a06:	f7ff bb67 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xE4();
    9a0a:	f7fb fd1d 	bl	5448 <opcode_0xE4()>
    9a0e:	4607      	mov	r7, r0
				break; // CPX - ZeroPage
    9a10:	f7ff bb62 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xE5();
    9a14:	f7fa f86e 	bl	3af4 <opcode_0xE5()>
    9a18:	4607      	mov	r7, r0
				break; // SBC - ZeroPage
    9a1a:	f7ff bb5d 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xE6();
    9a1e:	f7fc f817 	bl	5a50 <opcode_0xE6()>
    9a22:	4607      	mov	r7, r0
				break; // INC - ZeroPage
    9a24:	f7ff bb58 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xE7();
    9a28:	f7fe faf4 	bl	8014 <opcode_0xE7()>
    9a2c:	4607      	mov	r7, r0
				break; // ISC - ZeroPage
    9a2e:	f7ff bb53 	b.w	90d8 <loop+0x394>
				next_pc = opcode_0xE8();
    9a32:	f7fa fa11 	bl	3e58 <opcode_0xE8()>
    9a36:	4607      	mov	r7, r0
				break; // INX
    9a38:	f7ff bb4e 	b.w	90d8 <loop+0x394>
				Serial.println("ERROR: Illegal instruction");
    9a3c:	4906      	ldr	r1, [pc, #24]	; (9a58 <loop+0xd14>)
		uint16_t next_pc = 0;
    9a3e:	2700      	movs	r7, #0
				Serial.println("ERROR: Illegal instruction");
    9a40:	4806      	ldr	r0, [pc, #24]	; (9a5c <loop+0xd18>)
    9a42:	f7f6 fb43 	bl	cc <Print::println(char const*) [clone .isra.0]>
				run_mode = WAITING;
    9a46:	f04f 0300 	mov.w	r3, #0
    9a4a:	702b      	strb	r3, [r5, #0]
        if (run_mode == SINGLE_STEP)
    9a4c:	f7ff bb4d 	b.w	90ea <loop+0x3a6>
    9a50:	20016418 	.word	0x20016418
    9a54:	20017418 	.word	0x20017418
    9a58:	20001058 	.word	0x20001058
    9a5c:	20004358 	.word	0x20004358

00009a60 <_GLOBAL__sub_I_opcode_info>:
    }
}
    9a60:	b538      	push	{r3, r4, r5, lr}
    9a62:	4c12      	ldr	r4, [pc, #72]	; (9aac <_GLOBAL__sub_I_opcode_info+0x4c>)
    9a64:	f504 5550 	add.w	r5, r4, #13312	; 0x3400
struct OpDecoder {
    9a68:	2100      	movs	r1, #0
    9a6a:	4620      	mov	r0, r4
    9a6c:	f000 f8d0 	bl	9c10 <String::String(char const*)>
    9a70:	2100      	movs	r1, #0
    9a72:	f104 0010 	add.w	r0, r4, #16
    9a76:	f000 f8cb 	bl	9c10 <String::String(char const*)>
    9a7a:	f104 0020 	add.w	r0, r4, #32
OpDecoder opcode_info[256];
    9a7e:	3434      	adds	r4, #52	; 0x34
struct OpDecoder {
    9a80:	2100      	movs	r1, #0
    9a82:	f000 f8c5 	bl	9c10 <String::String(char const*)>
OpDecoder opcode_info[256];
    9a86:	42ac      	cmp	r4, r5
    9a88:	d1ee      	bne.n	9a68 <_GLOBAL__sub_I_opcode_info+0x8>
    9a8a:	4a09      	ldr	r2, [pc, #36]	; (9ab0 <_GLOBAL__sub_I_opcode_info+0x50>)
    9a8c:	2000      	movs	r0, #0
    9a8e:	4909      	ldr	r1, [pc, #36]	; (9ab4 <_GLOBAL__sub_I_opcode_info+0x54>)
    9a90:	f002 f89c 	bl	bbcc <__aeabi_atexit>
String last_command = "";
    9a94:	4908      	ldr	r1, [pc, #32]	; (9ab8 <_GLOBAL__sub_I_opcode_info+0x58>)
    9a96:	4809      	ldr	r0, [pc, #36]	; (9abc <_GLOBAL__sub_I_opcode_info+0x5c>)
    9a98:	f000 f8ba 	bl	9c10 <String::String(char const*)>
    9a9c:	4a04      	ldr	r2, [pc, #16]	; (9ab0 <_GLOBAL__sub_I_opcode_info+0x50>)
    9a9e:	4908      	ldr	r1, [pc, #32]	; (9ac0 <_GLOBAL__sub_I_opcode_info+0x60>)
    9aa0:	4806      	ldr	r0, [pc, #24]	; (9abc <_GLOBAL__sub_I_opcode_info+0x5c>)
}
    9aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String last_command = "";
    9aa6:	f002 b891 	b.w	bbcc <__aeabi_atexit>
    9aaa:	bf00      	nop
    9aac:	20015418 	.word	0x20015418
    9ab0:	20004370 	.word	0x20004370
    9ab4:	0000009d 	.word	0x0000009d
    9ab8:	2000047c 	.word	0x2000047c
    9abc:	200153f0 	.word	0x200153f0
    9ac0:	00009b99 	.word	0x00009b99

00009ac4 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9ac4:	4608      	mov	r0, r1
    9ac6:	f001 bc95 	b.w	b3f4 <usb_serial_putchar>
    9aca:	bf00      	nop

00009acc <Print::print(String const&)>:
{
    9acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ad0:	688c      	ldr	r4, [r1, #8]
    9ad2:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    9ad4:	b1dc      	cbz	r4, 9b0e <Print::print(String const&)+0x42>
	unsigned int index = 0;
    9ad6:	2500      	movs	r5, #0
    9ad8:	4688      	mov	r8, r1
    9ada:	4606      	mov	r6, r0
	size_t count = 0;
    9adc:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    9ade:	462b      	mov	r3, r5
    9ae0:	2221      	movs	r2, #33	; 0x21
    9ae2:	a901      	add	r1, sp, #4
    9ae4:	4640      	mov	r0, r8
    9ae6:	f000 f961 	bl	9dac <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    9aea:	2c20      	cmp	r4, #32
    9aec:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    9aee:	6833      	ldr	r3, [r6, #0]
    9af0:	bf28      	it	cs
    9af2:	2220      	movcs	r2, #32
    9af4:	a901      	add	r1, sp, #4
    9af6:	4630      	mov	r0, r6
    9af8:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    9afa:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    9afc:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    9afe:	4798      	blx	r3
    9b00:	4407      	add	r7, r0
	while (len > 0) {
    9b02:	2c00      	cmp	r4, #0
    9b04:	d1eb      	bne.n	9ade <Print::print(String const&)+0x12>
}
    9b06:	4638      	mov	r0, r7
    9b08:	b00a      	add	sp, #40	; 0x28
    9b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    9b0e:	4627      	mov	r7, r4
}
    9b10:	4638      	mov	r0, r7
    9b12:	b00a      	add	sp, #40	; 0x28
    9b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009b18 <Print::println()>:
{
    9b18:	b500      	push	{lr}
	return write(buf, 2);
    9b1a:	6803      	ldr	r3, [r0, #0]
{
    9b1c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    9b1e:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    9b22:	2202      	movs	r2, #2
    9b24:	a901      	add	r1, sp, #4
    9b26:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    9b28:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    9b2c:	4798      	blx	r3
}
    9b2e:	b003      	add	sp, #12
    9b30:	f85d fb04 	ldr.w	pc, [sp], #4

00009b34 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9b34:	4b05      	ldr	r3, [pc, #20]	; (9b4c <_write+0x18>)
    9b36:	2802      	cmp	r0, #2
    9b38:	bf88      	it	hi
    9b3a:	4603      	movhi	r3, r0
{
    9b3c:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9b3e:	681c      	ldr	r4, [r3, #0]
    9b40:	4618      	mov	r0, r3
    9b42:	6863      	ldr	r3, [r4, #4]
}
    9b44:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9b48:	4718      	bx	r3
    9b4a:	bf00      	nop
    9b4c:	20004358 	.word	0x20004358

00009b50 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    9b50:	f001 bc40 	b.w	b3d4 <usb_serial_getchar>

00009b54 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    9b54:	f001 bbd8 	b.w	b308 <usb_serial_peekchar>

00009b58 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    9b58:	6081      	str	r1, [r0, #8]
}
    9b5a:	4770      	bx	lr

00009b5c <String::String(String const&)>:
String::String(const String &value)
    9b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    9b5e:	4288      	cmp	r0, r1
	buffer = NULL;
    9b60:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    9b64:	4604      	mov	r4, r0
	len = 0;
    9b66:	6085      	str	r5, [r0, #8]
	flags = 0;
    9b68:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    9b6a:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    9b6e:	d002      	beq.n	9b76 <String::String(String const&)+0x1a>
    9b70:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    9b72:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    9b74:	b90e      	cbnz	r6, 9b7a <String::String(String const&)+0x1e>
}
    9b76:	4620      	mov	r0, r4
    9b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    9b7a:	1c70      	adds	r0, r6, #1
    9b7c:	f002 f830 	bl	bbe0 <malloc>
	if (newbuffer) {
    9b80:	2800      	cmp	r0, #0
    9b82:	d0f8      	beq.n	9b76 <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    9b84:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    9b86:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    9b88:	6020      	str	r0, [r4, #0]
	len = length;
    9b8a:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    9b8e:	f003 fb25 	bl	d1dc <strcpy>
}
    9b92:	4620      	mov	r0, r4
    9b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b96:	bf00      	nop

00009b98 <String::~String()>:
String::~String()
    9b98:	b510      	push	{r4, lr}
    9b9a:	4604      	mov	r4, r0
	free(buffer);
    9b9c:	6800      	ldr	r0, [r0, #0]
    9b9e:	f002 f827 	bl	bbf0 <free>
}
    9ba2:	4620      	mov	r0, r4
    9ba4:	bd10      	pop	{r4, pc}
    9ba6:	bf00      	nop

00009ba8 <String::copy(char const*, unsigned int)>:
{
    9ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9baa:	4604      	mov	r4, r0
	if (length == 0) {
    9bac:	4615      	mov	r5, r2
    9bae:	b932      	cbnz	r2, 9bbe <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    9bb0:	6803      	ldr	r3, [r0, #0]
    9bb2:	b103      	cbz	r3, 9bb6 <String::copy(char const*, unsigned int)+0xe>
    9bb4:	701a      	strb	r2, [r3, #0]
		len = 0;
    9bb6:	2300      	movs	r3, #0
}
    9bb8:	4620      	mov	r0, r4
		len = 0;
    9bba:	60a3      	str	r3, [r4, #8]
}
    9bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    9bbe:	6843      	ldr	r3, [r0, #4]
    9bc0:	460e      	mov	r6, r1
    9bc2:	429a      	cmp	r2, r3
    9bc4:	d91c      	bls.n	9c00 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    9bc6:	1c51      	adds	r1, r2, #1
    9bc8:	6800      	ldr	r0, [r0, #0]
    9bca:	f002 fad5 	bl	c178 <realloc>
	if (newbuffer) {
    9bce:	4607      	mov	r7, r0
    9bd0:	b160      	cbz	r0, 9bec <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    9bd2:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    9bd4:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    9bd8:	b90b      	cbnz	r3, 9bde <String::copy(char const*, unsigned int)+0x36>
    9bda:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    9bdc:	6827      	ldr	r7, [r4, #0]
    9bde:	4631      	mov	r1, r6
    9be0:	4638      	mov	r0, r7
	len = length;
    9be2:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    9be4:	f003 fafa 	bl	d1dc <strcpy>
}
    9be8:	4620      	mov	r0, r4
    9bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    9bec:	6820      	ldr	r0, [r4, #0]
    9bee:	b110      	cbz	r0, 9bf6 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    9bf0:	f001 fffe 	bl	bbf0 <free>
			buffer = NULL;
    9bf4:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    9bf6:	2300      	movs	r3, #0
}
    9bf8:	4620      	mov	r0, r4
		len = capacity = 0;
    9bfa:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    9bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    9c00:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    9c02:	4631      	mov	r1, r6
	len = length;
    9c04:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    9c06:	4638      	mov	r0, r7
    9c08:	f003 fae8 	bl	d1dc <strcpy>
	return *this;
    9c0c:	e7ec      	b.n	9be8 <String::copy(char const*, unsigned int)+0x40>
    9c0e:	bf00      	nop

00009c10 <String::String(char const*)>:
String::String(const char *cstr)
    9c10:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    9c12:	2300      	movs	r3, #0
String::String(const char *cstr)
    9c14:	4604      	mov	r4, r0
	capacity = 0;
    9c16:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    9c1a:	6083      	str	r3, [r0, #8]
	flags = 0;
    9c1c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    9c1e:	b141      	cbz	r1, 9c32 <String::String(char const*)+0x22>
    9c20:	460d      	mov	r5, r1
    9c22:	4608      	mov	r0, r1
    9c24:	f003 fb4c 	bl	d2c0 <strlen>
    9c28:	4602      	mov	r2, r0
    9c2a:	4629      	mov	r1, r5
    9c2c:	4620      	mov	r0, r4
    9c2e:	f7ff ffbb 	bl	9ba8 <String::copy(char const*, unsigned int)>
}
    9c32:	4620      	mov	r0, r4
    9c34:	bd38      	pop	{r3, r4, r5, pc}
    9c36:	bf00      	nop

00009c38 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    9c38:	4281      	cmp	r1, r0
    9c3a:	d003      	beq.n	9c44 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    9c3c:	688a      	ldr	r2, [r1, #8]
    9c3e:	6809      	ldr	r1, [r1, #0]
    9c40:	f7ff bfb2 	b.w	9ba8 <String::copy(char const*, unsigned int)>
}
    9c44:	4770      	bx	lr
    9c46:	bf00      	nop

00009c48 <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    9c48:	4288      	cmp	r0, r1
{
    9c4a:	b538      	push	{r3, r4, r5, lr}
    9c4c:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    9c4e:	d00e      	beq.n	9c6e <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    9c50:	6800      	ldr	r0, [r0, #0]
    9c52:	460c      	mov	r4, r1
    9c54:	b108      	cbz	r0, 9c5a <String::operator=(String&&)+0x12>
    9c56:	f001 ffcb 	bl	bbf0 <free>
	len = rhs.len;
    9c5a:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    9c5c:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    9c5e:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    9c62:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    9c64:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    9c68:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    9c6c:	60a3      	str	r3, [r4, #8]
}
    9c6e:	4628      	mov	r0, r5
    9c70:	bd38      	pop	{r3, r4, r5, pc}
    9c72:	bf00      	nop

00009c74 <String::operator=(char const*)>:
{
    9c74:	b538      	push	{r3, r4, r5, lr}
    9c76:	4605      	mov	r5, r0
	if (cstr) {
    9c78:	460c      	mov	r4, r1
    9c7a:	b149      	cbz	r1, 9c90 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    9c7c:	4608      	mov	r0, r1
    9c7e:	f003 fb1f 	bl	d2c0 <strlen>
    9c82:	4621      	mov	r1, r4
    9c84:	4602      	mov	r2, r0
    9c86:	4628      	mov	r0, r5
    9c88:	f7ff ff8e 	bl	9ba8 <String::copy(char const*, unsigned int)>
}
    9c8c:	4628      	mov	r0, r5
    9c8e:	bd38      	pop	{r3, r4, r5, pc}
    9c90:	4628      	mov	r0, r5
		len = 0;
    9c92:	60a9      	str	r1, [r5, #8]
}
    9c94:	bd38      	pop	{r3, r4, r5, pc}
    9c96:	bf00      	nop

00009c98 <String::append(char const*, unsigned int)>:
{
    9c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9c9c:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9c9e:	6800      	ldr	r0, [r0, #0]
{
    9ca0:	460d      	mov	r5, r1
    9ca2:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9ca4:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    9ca6:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    9ca8:	d809      	bhi.n	9cbe <String::append(char const*, unsigned int)+0x26>
    9caa:	18c2      	adds	r2, r0, r3
    9cac:	4291      	cmp	r1, r2
    9cae:	d206      	bcs.n	9cbe <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    9cb0:	1a0f      	subs	r7, r1, r0
		self = true;
    9cb2:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    9cb6:	b936      	cbnz	r6, 9cc6 <String::append(char const*, unsigned int)+0x2e>
}
    9cb8:	4620      	mov	r0, r4
    9cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    9cbe:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    9cc2:	2e00      	cmp	r6, #0
    9cc4:	d0f8      	beq.n	9cb8 <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    9cc6:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    9cca:	6862      	ldr	r2, [r4, #4]
    9ccc:	4590      	cmp	r8, r2
    9cce:	d90c      	bls.n	9cea <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    9cd0:	f108 0101 	add.w	r1, r8, #1
    9cd4:	f002 fa50 	bl	c178 <realloc>
	if (newbuffer) {
    9cd8:	2800      	cmp	r0, #0
    9cda:	d0ed      	beq.n	9cb8 <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    9cdc:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    9cde:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    9ce2:	b913      	cbnz	r3, 9cea <String::append(char const*, unsigned int)+0x52>
    9ce4:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    9ce6:	6820      	ldr	r0, [r4, #0]
    9ce8:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    9cea:	f1b9 0f00 	cmp.w	r9, #0
    9cee:	d108      	bne.n	9d02 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    9cf0:	4629      	mov	r1, r5
    9cf2:	4418      	add	r0, r3
    9cf4:	f003 fa72 	bl	d1dc <strcpy>
}
    9cf8:	4620      	mov	r0, r4
	len = newlen;
    9cfa:	f8c4 8008 	str.w	r8, [r4, #8]
}
    9cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    9d02:	4632      	mov	r2, r6
    9d04:	19c1      	adds	r1, r0, r7
    9d06:	4418      	add	r0, r3
    9d08:	f000 f9ca 	bl	a0a0 <memcpy>
		buffer[newlen] = 0;
    9d0c:	6823      	ldr	r3, [r4, #0]
    9d0e:	2200      	movs	r2, #0
    9d10:	f803 2008 	strb.w	r2, [r3, r8]
    9d14:	e7f0      	b.n	9cf8 <String::append(char const*, unsigned int)+0x60>
    9d16:	bf00      	nop

00009d18 <String::append(char)>:
{
    9d18:	b510      	push	{r4, lr}
    9d1a:	b082      	sub	sp, #8
	buf[1] = 0;
    9d1c:	2300      	movs	r3, #0
{
    9d1e:	4604      	mov	r4, r0
	append(buf, 1);
    9d20:	2201      	movs	r2, #1
	buf[0] = c;
    9d22:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    9d26:	a901      	add	r1, sp, #4
	buf[1] = 0;
    9d28:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    9d2c:	f7ff ffb4 	bl	9c98 <String::append(char const*, unsigned int)>
}
    9d30:	4620      	mov	r0, r4
    9d32:	b002      	add	sp, #8
    9d34:	bd10      	pop	{r4, pc}
    9d36:	bf00      	nop

00009d38 <operator+(StringSumHelper const&, String const&)>:
{
    9d38:	b510      	push	{r4, lr}
    9d3a:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    9d3c:	688a      	ldr	r2, [r1, #8]
    9d3e:	6809      	ldr	r1, [r1, #0]
    9d40:	f7ff ffaa 	bl	9c98 <String::append(char const*, unsigned int)>
}
    9d44:	4620      	mov	r0, r4
    9d46:	bd10      	pop	{r4, pc}

00009d48 <operator+(StringSumHelper const&, char const*)>:
{
    9d48:	b538      	push	{r3, r4, r5, lr}
    9d4a:	4605      	mov	r5, r0
	if (cstr) a.append(cstr, strlen(cstr));
    9d4c:	b141      	cbz	r1, 9d60 <operator+(StringSumHelper const&, char const*)+0x18>
    9d4e:	460c      	mov	r4, r1
    9d50:	4608      	mov	r0, r1
    9d52:	f003 fab5 	bl	d2c0 <strlen>
    9d56:	4602      	mov	r2, r0
    9d58:	4621      	mov	r1, r4
    9d5a:	4628      	mov	r0, r5
    9d5c:	f7ff ff9c 	bl	9c98 <String::append(char const*, unsigned int)>
}
    9d60:	4628      	mov	r0, r5
    9d62:	bd38      	pop	{r3, r4, r5, pc}

00009d64 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    9d64:	6882      	ldr	r2, [r0, #8]
{
    9d66:	b508      	push	{r3, lr}
    9d68:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    9d6a:	b13a      	cbz	r2, 9d7c <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    9d6c:	b161      	cbz	r1, 9d88 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    9d6e:	6800      	ldr	r0, [r0, #0]
    9d70:	f003 f8ca 	bl	cf08 <strcmp>
    9d74:	fab0 f080 	clz	r0, r0
    9d78:	0940      	lsrs	r0, r0, #5
}
    9d7a:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    9d7c:	b131      	cbz	r1, 9d8c <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    9d7e:	7818      	ldrb	r0, [r3, #0]
    9d80:	fab0 f080 	clz	r0, r0
    9d84:	0940      	lsrs	r0, r0, #5
}
    9d86:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    9d88:	6803      	ldr	r3, [r0, #0]
    9d8a:	e7f8      	b.n	9d7e <String::equals(char const*) const+0x1a>
    9d8c:	2001      	movs	r0, #1
}
    9d8e:	bd08      	pop	{r3, pc}

00009d90 <String::operator[](unsigned int)>:
	if (index >= len || !buffer) {
    9d90:	6883      	ldr	r3, [r0, #8]
    9d92:	428b      	cmp	r3, r1
    9d94:	d903      	bls.n	9d9e <String::operator[](unsigned int)+0xe>
    9d96:	6800      	ldr	r0, [r0, #0]
    9d98:	b108      	cbz	r0, 9d9e <String::operator[](unsigned int)+0xe>
	return buffer[index];
    9d9a:	4408      	add	r0, r1
}
    9d9c:	4770      	bx	lr
		dummy_writable_char = 0;
    9d9e:	4b02      	ldr	r3, [pc, #8]	; (9da8 <String::operator[](unsigned int)+0x18>)
    9da0:	2200      	movs	r2, #0
		return dummy_writable_char;
    9da2:	4618      	mov	r0, r3
		dummy_writable_char = 0;
    9da4:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    9da6:	4770      	bx	lr
    9da8:	20018897 	.word	0x20018897

00009dac <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    9dac:	b1c2      	cbz	r2, 9de0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    9dae:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    9db0:	fab1 f681 	clz	r6, r1
    9db4:	460c      	mov	r4, r1
    9db6:	0976      	lsrs	r6, r6, #5
    9db8:	b119      	cbz	r1, 9dc2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    9dba:	6885      	ldr	r5, [r0, #8]
    9dbc:	429d      	cmp	r5, r3
    9dbe:	d801      	bhi.n	9dc4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    9dc0:	700e      	strb	r6, [r1, #0]
}
    9dc2:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    9dc4:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    9dc6:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    9dca:	6801      	ldr	r1, [r0, #0]
    9dcc:	4620      	mov	r0, r4
    9dce:	4565      	cmp	r5, ip
    9dd0:	4419      	add	r1, r3
    9dd2:	bf28      	it	cs
    9dd4:	4665      	movcs	r5, ip
    9dd6:	462a      	mov	r2, r5
    9dd8:	f002 ffc2 	bl	cd60 <strncpy>
	buf[n] = 0;
    9ddc:	5566      	strb	r6, [r4, r5]
}
    9dde:	bd70      	pop	{r4, r5, r6, pc}
    9de0:	4770      	bx	lr
    9de2:	bf00      	nop

00009de4 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    9de4:	6883      	ldr	r3, [r0, #8]
    9de6:	b13b      	cbz	r3, 9df8 <String::indexOf(char) const+0x14>
{
    9de8:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    9dea:	6804      	ldr	r4, [r0, #0]
    9dec:	4620      	mov	r0, r4
    9dee:	f002 ff51 	bl	cc94 <strchr>
	if (temp == NULL) return -1;
    9df2:	b120      	cbz	r0, 9dfe <String::indexOf(char) const+0x1a>
	return temp - buffer;
    9df4:	1b00      	subs	r0, r0, r4
}
    9df6:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    9df8:	f04f 30ff 	mov.w	r0, #4294967295
}
    9dfc:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    9dfe:	f04f 30ff 	mov.w	r0, #4294967295
}
    9e02:	bd10      	pop	{r4, pc}

00009e04 <String::substring(unsigned int) const>:
{
    9e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    9e08:	688f      	ldr	r7, [r1, #8]
{
    9e0a:	460e      	mov	r6, r1
    9e0c:	4604      	mov	r4, r0
	if (left > right) {
    9e0e:	4297      	cmp	r7, r2
    9e10:	d202      	bcs.n	9e18 <String::substring(unsigned int) const+0x14>
    9e12:	4613      	mov	r3, r2
    9e14:	463a      	mov	r2, r7
    9e16:	461f      	mov	r7, r3
	buffer = NULL;
    9e18:	2300      	movs	r3, #0
	len = 0;
    9e1a:	60a3      	str	r3, [r4, #8]
	flags = 0;
    9e1c:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    9e1e:	68b0      	ldr	r0, [r6, #8]
    9e20:	4290      	cmp	r0, r2
	capacity = 0;
    9e22:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    9e26:	d314      	bcc.n	9e52 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    9e28:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    9e2a:	6831      	ldr	r1, [r6, #0]
    9e2c:	bf28      	it	cs
    9e2e:	4607      	movcs	r7, r0
    9e30:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    9e34:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    9e36:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    9e38:	189d      	adds	r5, r3, r2
    9e3a:	d00d      	beq.n	9e58 <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    9e3c:	4628      	mov	r0, r5
    9e3e:	f003 fa3f 	bl	d2c0 <strlen>
    9e42:	4629      	mov	r1, r5
    9e44:	4602      	mov	r2, r0
    9e46:	4620      	mov	r0, r4
    9e48:	f7ff feae 	bl	9ba8 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    9e4c:	6833      	ldr	r3, [r6, #0]
    9e4e:	f803 8007 	strb.w	r8, [r3, r7]
}
    9e52:	4620      	mov	r0, r4
    9e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    9e58:	60a5      	str	r5, [r4, #8]
    9e5a:	e7f8      	b.n	9e4e <String::substring(unsigned int) const+0x4a>

00009e5c <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    9e5c:	429a      	cmp	r2, r3
{
    9e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e62:	4604      	mov	r4, r0
    9e64:	460e      	mov	r6, r1
	if (left > right) {
    9e66:	d902      	bls.n	9e6e <String::substring(unsigned int, unsigned int) const+0x12>
    9e68:	4611      	mov	r1, r2
    9e6a:	461a      	mov	r2, r3
    9e6c:	460b      	mov	r3, r1
	buffer = NULL;
    9e6e:	2000      	movs	r0, #0
	len = 0;
    9e70:	60a0      	str	r0, [r4, #8]
	flags = 0;
    9e72:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    9e74:	68b7      	ldr	r7, [r6, #8]
    9e76:	4297      	cmp	r7, r2
	capacity = 0;
    9e78:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    9e7c:	d314      	bcc.n	9ea8 <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    9e7e:	429f      	cmp	r7, r3
    9e80:	bf28      	it	cs
    9e82:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    9e84:	6833      	ldr	r3, [r6, #0]
    9e86:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    9e8a:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    9e8c:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    9e8e:	189d      	adds	r5, r3, r2
    9e90:	d00d      	beq.n	9eae <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    9e92:	4628      	mov	r0, r5
    9e94:	f003 fa14 	bl	d2c0 <strlen>
    9e98:	4629      	mov	r1, r5
    9e9a:	4602      	mov	r2, r0
    9e9c:	4620      	mov	r0, r4
    9e9e:	f7ff fe83 	bl	9ba8 <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    9ea2:	6833      	ldr	r3, [r6, #0]
    9ea4:	f803 8007 	strb.w	r8, [r3, r7]
}
    9ea8:	4620      	mov	r0, r4
    9eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    9eae:	60a5      	str	r5, [r4, #8]
    9eb0:	e7f8      	b.n	9ea4 <String::substring(unsigned int, unsigned int) const+0x48>
    9eb2:	bf00      	nop

00009eb4 <String::remove(unsigned int, unsigned int)>:
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    9eb4:	b510      	push	{r4, lr}
    9eb6:	4604      	mov	r4, r0
    9eb8:	4608      	mov	r0, r1
	if (index < len && count > 0) {
    9eba:	68a1      	ldr	r1, [r4, #8]
    9ebc:	b10a      	cbz	r2, 9ec2 <String::remove(unsigned int, unsigned int)+0xe>
    9ebe:	4281      	cmp	r1, r0
    9ec0:	d801      	bhi.n	9ec6 <String::remove(unsigned int, unsigned int)+0x12>
		len = len - count;
		memmove(buffer + index, buffer + index + count, len - index);
		buffer[len] = 0;
	}
	return *this;
}
    9ec2:	4620      	mov	r0, r4
    9ec4:	bd10      	pop	{r4, pc}
  		if (index + count > len) count = len - index;
    9ec6:	eb00 0c02 	add.w	ip, r0, r2
    9eca:	4561      	cmp	r1, ip
    9ecc:	d30e      	bcc.n	9eec <String::remove(unsigned int, unsigned int)+0x38>
		len = len - count;
    9ece:	1a8b      	subs	r3, r1, r2
		memmove(buffer + index, buffer + index + count, len - index);
    9ed0:	4661      	mov	r1, ip
    9ed2:	1a1a      	subs	r2, r3, r0
		len = len - count;
    9ed4:	60a3      	str	r3, [r4, #8]
		memmove(buffer + index, buffer + index + count, len - index);
    9ed6:	6823      	ldr	r3, [r4, #0]
    9ed8:	4419      	add	r1, r3
    9eda:	4418      	add	r0, r3
    9edc:	f002 fe0c 	bl	caf8 <memmove>
		buffer[len] = 0;
    9ee0:	6822      	ldr	r2, [r4, #0]
    9ee2:	68a3      	ldr	r3, [r4, #8]
    9ee4:	2100      	movs	r1, #0
}
    9ee6:	4620      	mov	r0, r4
		buffer[len] = 0;
    9ee8:	54d1      	strb	r1, [r2, r3]
}
    9eea:	bd10      	pop	{r4, pc}
    9eec:	4603      	mov	r3, r0
    9eee:	2200      	movs	r2, #0
    9ef0:	e7f0      	b.n	9ed4 <String::remove(unsigned int, unsigned int)+0x20>
    9ef2:	bf00      	nop

00009ef4 <String::toLowerCase()>:

String & String::toLowerCase(void)
{
    9ef4:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    9ef6:	6804      	ldr	r4, [r0, #0]
{
    9ef8:	4605      	mov	r5, r0
	if (!buffer) return *this;
    9efa:	b144      	cbz	r4, 9f0e <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    9efc:	7820      	ldrb	r0, [r4, #0]
    9efe:	b130      	cbz	r0, 9f0e <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    9f00:	f002 fca6 	bl	c850 <tolower>
    9f04:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    9f06:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    9f0a:	2800      	cmp	r0, #0
    9f0c:	d1f8      	bne.n	9f00 <String::toLowerCase()+0xc>
	}
	return *this;
}
    9f0e:	4628      	mov	r0, r5
    9f10:	bd38      	pop	{r3, r4, r5, pc}
    9f12:	bf00      	nop

00009f14 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    9f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    9f18:	6807      	ldr	r7, [r0, #0]
{
    9f1a:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    9f1c:	b1e7      	cbz	r7, 9f58 <String::trim()+0x44>
    9f1e:	6884      	ldr	r4, [r0, #8]
    9f20:	b1d4      	cbz	r4, 9f58 <String::trim()+0x44>
    9f22:	46b8      	mov	r8, r7
    9f24:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    9f26:	f818 0b01 	ldrb.w	r0, [r8], #1
    9f2a:	f002 fc89 	bl	c840 <isspace>
    9f2e:	2800      	cmp	r0, #0
    9f30:	d1f8      	bne.n	9f24 <String::trim()+0x10>
	char *end = buffer + len - 1;
    9f32:	3c01      	subs	r4, #1
    9f34:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    9f36:	e002      	b.n	9f3e <String::trim()+0x2a>
    9f38:	42a5      	cmp	r5, r4
    9f3a:	d805      	bhi.n	9f48 <String::trim()+0x34>
    9f3c:	3c01      	subs	r4, #1
    9f3e:	7820      	ldrb	r0, [r4, #0]
    9f40:	f002 fc7e 	bl	c840 <isspace>
    9f44:	2800      	cmp	r0, #0
    9f46:	d1f7      	bne.n	9f38 <String::trim()+0x24>
	len = end + 1 - begin;
    9f48:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    9f4a:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    9f4c:	eba2 0205 	sub.w	r2, r2, r5
    9f50:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    9f52:	d304      	bcc.n	9f5e <String::trim()+0x4a>
	buffer[len] = 0;
    9f54:	2300      	movs	r3, #0
    9f56:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    9f58:	4630      	mov	r0, r6
    9f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    9f5e:	4638      	mov	r0, r7
    9f60:	4629      	mov	r1, r5
    9f62:	f000 f89d 	bl	a0a0 <memcpy>
	buffer[len] = 0;
    9f66:	6837      	ldr	r7, [r6, #0]
    9f68:	68b2      	ldr	r2, [r6, #8]
    9f6a:	e7f3      	b.n	9f54 <String::trim()+0x40>

00009f6c <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    9f6c:	6800      	ldr	r0, [r0, #0]
    9f6e:	b108      	cbz	r0, 9f74 <String::toInt() const+0x8>
    9f70:	f001 be32 	b.w	bbd8 <atol>
	return 0;
}
    9f74:	4770      	bx	lr
    9f76:	bf00      	nop

00009f78 <delay>:
	if (msec == 0) return;
    9f78:	b900      	cbnz	r0, 9f7c <delay+0x4>
    9f7a:	4770      	bx	lr
{
    9f7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9f80:	2101      	movs	r1, #1
    9f82:	4681      	mov	r9, r0
    9f84:	4c21      	ldr	r4, [pc, #132]	; (a00c <delay+0x94>)
    9f86:	4d22      	ldr	r5, [pc, #136]	; (a010 <delay+0x98>)
    9f88:	4e22      	ldr	r6, [pc, #136]	; (a014 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9f8a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    9f8e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9f90:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9f92:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9f96:	2b00      	cmp	r3, #0
    9f98:	d1f7      	bne.n	9f8a <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9f9a:	491f      	ldr	r1, [pc, #124]	; (a018 <delay+0xa0>)
    9f9c:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    9f9e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9fa2:	f8df a078 	ldr.w	sl, [pc, #120]	; a01c <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    9fa6:	1a1b      	subs	r3, r3, r0
    9fa8:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    9faa:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9fae:	f8da 2000 	ldr.w	r2, [sl]
    9fb2:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    9fb6:	455a      	cmp	r2, fp
    9fb8:	bf94      	ite	ls
    9fba:	4490      	addls	r8, r2
    9fbc:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    9fbe:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    9fc2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9fc4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9fc6:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9fca:	2b00      	cmp	r3, #0
    9fcc:	d1f7      	bne.n	9fbe <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    9fce:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9fd0:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    9fd4:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    9fd6:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9fda:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    9fde:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    9fe2:	bf94      	ite	ls
    9fe4:	4462      	addls	r2, ip
    9fe6:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    9fea:	eba2 0208 	sub.w	r2, r2, r8
    9fee:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    9ff2:	d306      	bcc.n	a002 <delay+0x8a>
			if (--msec == 0) return;
    9ff4:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    9ff8:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    9ffc:	d1df      	bne.n	9fbe <delay+0x46>
}
    9ffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    a002:	f001 fa8b 	bl	b51c <yield>
		while ((micros() - start) >= 1000) {
    a006:	4904      	ldr	r1, [pc, #16]	; (a018 <delay+0xa0>)
    a008:	e7d9      	b.n	9fbe <delay+0x46>
    a00a:	bf00      	nop
    a00c:	20018870 	.word	0x20018870
    a010:	2001886c 	.word	0x2001886c
    a014:	20018868 	.word	0x20018868
    a018:	e0001000 	.word	0xe0001000
    a01c:	20018864 	.word	0x20018864

0000a020 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    a020:	2836      	cmp	r0, #54	; 0x36
    a022:	d829      	bhi.n	a078 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    a024:	4b16      	ldr	r3, [pc, #88]	; (a080 <pinMode+0x60>)
    a026:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a028:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    a02a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a02e:	589a      	ldr	r2, [r3, r2]
{
    a030:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a032:	6853      	ldr	r3, [r2, #4]
    a034:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a036:	d00e      	beq.n	a056 <pinMode+0x36>
    a038:	2904      	cmp	r1, #4
    a03a:	d00c      	beq.n	a056 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    a03c:	ea23 0304 	bic.w	r3, r3, r4
    a040:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a042:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    a044:	b1a9      	cbz	r1, a072 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    a046:	2902      	cmp	r1, #2
    a048:	d017      	beq.n	a07a <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    a04a:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    a04c:	bf0c      	ite	eq
    a04e:	4a0d      	ldreq	r2, [pc, #52]	; (a084 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    a050:	4a0d      	ldrne	r2, [pc, #52]	; (a088 <pinMode+0x68>)
    a052:	601a      	str	r2, [r3, #0]
    a054:	e007      	b.n	a066 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    a056:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    a058:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    a05a:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a05c:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    a05e:	d008      	beq.n	a072 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    a060:	f640 0238 	movw	r2, #2104	; 0x838
    a064:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    a066:	6843      	ldr	r3, [r0, #4]
    a068:	2215      	movs	r2, #21
}
    a06a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    a06e:	601a      	str	r2, [r3, #0]
}
    a070:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    a072:	2238      	movs	r2, #56	; 0x38
    a074:	601a      	str	r2, [r3, #0]
    a076:	e7f6      	b.n	a066 <pinMode+0x46>
    a078:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    a07a:	4a04      	ldr	r2, [pc, #16]	; (a08c <pinMode+0x6c>)
    a07c:	601a      	str	r2, [r3, #0]
    a07e:	e7f2      	b.n	a066 <pinMode+0x46>
    a080:	20000ce8 	.word	0x20000ce8
    a084:	00013038 	.word	0x00013038
    a088:	00010038 	.word	0x00010038
    a08c:	0001f038 	.word	0x0001f038

0000a090 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a090:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a092:	f7f8 f93f 	bl	2314 <setup>
	while (1) {
		loop();
    a096:	f7fe fe55 	bl	8d44 <loop>
		yield();
    a09a:	f001 fa3f 	bl	b51c <yield>
	while (1) {
    a09e:	e7fa      	b.n	a096 <main+0x6>

0000a0a0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a0a0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a0a2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a0a6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a0aa:	d16d      	bne.n	a188 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a0ac:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a0ae:	d341      	bcc.n	a134 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a0b0:	f851 3b04 	ldr.w	r3, [r1], #4
    a0b4:	f840 3b04 	str.w	r3, [r0], #4
    a0b8:	f851 3b04 	ldr.w	r3, [r1], #4
    a0bc:	f840 3b04 	str.w	r3, [r0], #4
    a0c0:	f851 3b04 	ldr.w	r3, [r1], #4
    a0c4:	f840 3b04 	str.w	r3, [r0], #4
    a0c8:	f851 3b04 	ldr.w	r3, [r1], #4
    a0cc:	f840 3b04 	str.w	r3, [r0], #4
    a0d0:	f851 3b04 	ldr.w	r3, [r1], #4
    a0d4:	f840 3b04 	str.w	r3, [r0], #4
    a0d8:	f851 3b04 	ldr.w	r3, [r1], #4
    a0dc:	f840 3b04 	str.w	r3, [r0], #4
    a0e0:	f851 3b04 	ldr.w	r3, [r1], #4
    a0e4:	f840 3b04 	str.w	r3, [r0], #4
    a0e8:	f851 3b04 	ldr.w	r3, [r1], #4
    a0ec:	f840 3b04 	str.w	r3, [r0], #4
    a0f0:	f851 3b04 	ldr.w	r3, [r1], #4
    a0f4:	f840 3b04 	str.w	r3, [r0], #4
    a0f8:	f851 3b04 	ldr.w	r3, [r1], #4
    a0fc:	f840 3b04 	str.w	r3, [r0], #4
    a100:	f851 3b04 	ldr.w	r3, [r1], #4
    a104:	f840 3b04 	str.w	r3, [r0], #4
    a108:	f851 3b04 	ldr.w	r3, [r1], #4
    a10c:	f840 3b04 	str.w	r3, [r0], #4
    a110:	f851 3b04 	ldr.w	r3, [r1], #4
    a114:	f840 3b04 	str.w	r3, [r0], #4
    a118:	f851 3b04 	ldr.w	r3, [r1], #4
    a11c:	f840 3b04 	str.w	r3, [r0], #4
    a120:	f851 3b04 	ldr.w	r3, [r1], #4
    a124:	f840 3b04 	str.w	r3, [r0], #4
    a128:	f851 3b04 	ldr.w	r3, [r1], #4
    a12c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a130:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a132:	d2bd      	bcs.n	a0b0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a134:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a136:	d311      	bcc.n	a15c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a138:	f851 3b04 	ldr.w	r3, [r1], #4
    a13c:	f840 3b04 	str.w	r3, [r0], #4
    a140:	f851 3b04 	ldr.w	r3, [r1], #4
    a144:	f840 3b04 	str.w	r3, [r0], #4
    a148:	f851 3b04 	ldr.w	r3, [r1], #4
    a14c:	f840 3b04 	str.w	r3, [r0], #4
    a150:	f851 3b04 	ldr.w	r3, [r1], #4
    a154:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a158:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    a15a:	d2ed      	bcs.n	a138 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a15c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    a15e:	d305      	bcc.n	a16c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a160:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a164:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    a168:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a16a:	d2f9      	bcs.n	a160 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a16c:	3204      	adds	r2, #4
	beq	.Ldone
    a16e:	d008      	beq.n	a182 <memcpy+0xe2>

	lsls	r2, r2, #31
    a170:	07d2      	lsls	r2, r2, #31
	itt ne
    a172:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a174:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a178:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a17c:	d301      	bcc.n	a182 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a17e:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a180:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a182:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a184:	4770      	bx	lr
    a186:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a188:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    a18a:	d313      	bcc.n	a1b4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a18c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a18e:	d08d      	beq.n	a0ac <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a190:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a194:	d08a      	beq.n	a0ac <memcpy+0xc>

	rsb	r3, #4
    a196:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    a19a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    a19c:	07db      	lsls	r3, r3, #31
	itt ne
    a19e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    a1a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a1a4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a1a8:	d380      	bcc.n	a0ac <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a1aa:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a1ae:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a1b2:	e77b      	b.n	a0ac <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a1b4:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    a1b6:	d3d9      	bcc.n	a16c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a1b8:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    a1ba:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a1be:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a1c2:	d2f9      	bcs.n	a1b8 <memcpy+0x118>

	ldrb	r3, [r1]
    a1c4:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a1c6:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a1c8:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a1ca:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a1cc:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a1ce:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a1d0:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a1d2:	4770      	bx	lr

0000a1d4 <ultoa>:
	int i=0, j;
    a1d4:	f101 3cff 	add.w	ip, r1, #4294967295
{
    a1d8:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    a1da:	4666      	mov	r6, ip
	int i=0, j;
    a1dc:	2400      	movs	r4, #0
    a1de:	e000      	b.n	a1e2 <ultoa+0xe>
		i++;
    a1e0:	3401      	adds	r4, #1
		digit = val % radix;
    a1e2:	fbb0 f5f2 	udiv	r5, r0, r2
    a1e6:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a1ea:	2b09      	cmp	r3, #9
    a1ec:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    a1f0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    a1f4:	fa5f fe8e 	uxtb.w	lr, lr
    a1f8:	bf98      	it	ls
    a1fa:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    a1fe:	4290      	cmp	r0, r2
		val /= radix;
    a200:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a202:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    a206:	d2eb      	bcs.n	a1e0 <ultoa+0xc>
	buf[i + 1] = 0;
    a208:	1c63      	adds	r3, r4, #1
    a20a:	2200      	movs	r2, #0
    a20c:	18c8      	adds	r0, r1, r3
    a20e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    a210:	b17c      	cbz	r4, a232 <ultoa+0x5e>
		t = buf[j];
    a212:	4662      	mov	r2, ip
    a214:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    a218:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    a21c:	eba1 030c 	sub.w	r3, r1, ip
    a220:	3202      	adds	r2, #2
		buf[j] = buf[i];
    a222:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    a226:	3b01      	subs	r3, #1
    a228:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    a22a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    a22c:	4423      	add	r3, r4
    a22e:	429a      	cmp	r2, r3
    a230:	dbef      	blt.n	a212 <ultoa+0x3e>
}
    a232:	4608      	mov	r0, r1
    a234:	bd70      	pop	{r4, r5, r6, pc}
    a236:	bf00      	nop

0000a238 <unused_interrupt_vector>:
	__disable_irq();
    a238:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    a23a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    a23e:	4c4f      	ldr	r4, [pc, #316]	; (a37c <unused_interrupt_vector+0x144>)
    a240:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    a244:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    a248:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    a24c:	4e4c      	ldr	r6, [pc, #304]	; (a380 <unused_interrupt_vector+0x148>)
	while (p < end) {
    a24e:	4d4d      	ldr	r5, [pc, #308]	; (a384 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    a250:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    a254:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    a258:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    a25c:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    a260:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    a264:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    a268:	6993      	ldr	r3, [r2, #24]
    a26a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    a26e:	69d3      	ldr	r3, [r2, #28]
    a270:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    a274:	f000 f8d0 	bl	a418 <tempmonGetTemp>
    a278:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    a27c:	f001 fc2a 	bl	bad4 <rtc_get>
	info->len = sizeof(*info) / 4;
    a280:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    a282:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    a286:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    a28a:	460b      	mov	r3, r1
    a28c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    a290:	493d      	ldr	r1, [pc, #244]	; (a388 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    a292:	1d30      	adds	r0, r6, #4
    a294:	405a      	eors	r2, r3
    a296:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    a298:	f002 0301 	and.w	r3, r2, #1
    a29c:	3c01      	subs	r4, #1
    a29e:	fb01 f303 	mul.w	r3, r1, r3
    a2a2:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    a2a6:	d1f7      	bne.n	a298 <unused_interrupt_vector+0x60>
	while (p < end) {
    a2a8:	42a8      	cmp	r0, r5
    a2aa:	d002      	beq.n	a2b2 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    a2ac:	6873      	ldr	r3, [r6, #4]
    a2ae:	4606      	mov	r6, r0
    a2b0:	e7ef      	b.n	a292 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    a2b2:	4b32      	ldr	r3, [pc, #200]	; (a37c <unused_interrupt_vector+0x144>)
    a2b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    a2b8:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a2bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a2c0:	492f      	ldr	r1, [pc, #188]	; (a380 <unused_interrupt_vector+0x148>)
    a2c2:	4a32      	ldr	r2, [pc, #200]	; (a38c <unused_interrupt_vector+0x154>)
    a2c4:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    a2c8:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    a2cc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a2d0:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    a2d4:	4a2e      	ldr	r2, [pc, #184]	; (a390 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    a2d6:	2502      	movs	r5, #2
    a2d8:	482e      	ldr	r0, [pc, #184]	; (a394 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    a2da:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    a2dc:	492e      	ldr	r1, [pc, #184]	; (a398 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    a2de:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    a2e2:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    a2e4:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    a2e6:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    a2e8:	482c      	ldr	r0, [pc, #176]	; (a39c <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    a2ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    a2ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a2f2:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    a2f4:	680b      	ldr	r3, [r1, #0]
    a2f6:	4283      	cmp	r3, r0
    a2f8:	d83d      	bhi.n	a376 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    a2fa:	4d26      	ldr	r5, [pc, #152]	; (a394 <unused_interrupt_vector+0x15c>)
    a2fc:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    a2fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a302:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    a306:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    a308:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    a30a:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    a30e:	4924      	ldr	r1, [pc, #144]	; (a3a0 <unused_interrupt_vector+0x168>)
    a310:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    a314:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    a318:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    a31c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    a320:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    a324:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    a328:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    a32c:	e001      	b.n	a332 <unused_interrupt_vector+0xfa>
		usb_isr();
    a32e:	f000 f965 	bl	a5fc <usb_isr>
		if (PIT_TFLG0) {
    a332:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    a336:	2b00      	cmp	r3, #0
    a338:	d0f9      	beq.n	a32e <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    a33a:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    a33c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    a340:	2c4f      	cmp	r4, #79	; 0x4f
    a342:	d9f4      	bls.n	a32e <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    a344:	4b17      	ldr	r3, [pc, #92]	; (a3a4 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    a346:	2002      	movs	r0, #2
    a348:	4917      	ldr	r1, [pc, #92]	; (a3a8 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    a34a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    a34e:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    a352:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    a354:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    a358:	b93b      	cbnz	r3, a36a <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    a35a:	4814      	ldr	r0, [pc, #80]	; (a3ac <unused_interrupt_vector+0x174>)
    a35c:	4914      	ldr	r1, [pc, #80]	; (a3b0 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    a35e:	4a0d      	ldr	r2, [pc, #52]	; (a394 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    a360:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    a362:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    a366:	2b00      	cmp	r3, #0
    a368:	d0fa      	beq.n	a360 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    a36a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    a36e:	4a11      	ldr	r2, [pc, #68]	; (a3b4 <unused_interrupt_vector+0x17c>)
    a370:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    a374:	e7fe      	b.n	a374 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    a376:	f001 f97d 	bl	b674 <set_arm_clock>
    a37a:	e7be      	b.n	a2fa <unused_interrupt_vector+0xc2>
    a37c:	2027ff00 	.word	0x2027ff00
    a380:	2027ff80 	.word	0x2027ff80
    a384:	2027ffa8 	.word	0x2027ffa8
    a388:	edb88320 	.word	0xedb88320
    a38c:	2027ffa0 	.word	0x2027ffa0
    a390:	400fc000 	.word	0x400fc000
    a394:	40084000 	.word	0x40084000
    a398:	20004354 	.word	0x20004354
    a39c:	0bcd3d80 	.word	0x0bcd3d80
    a3a0:	00249f00 	.word	0x00249f00
    a3a4:	400d9000 	.word	0x400d9000
    a3a8:	402e0000 	.word	0x402e0000
    a3ac:	400f8000 	.word	0x400f8000
    a3b0:	0bad00f1 	.word	0x0bad00f1
    a3b4:	05fa0004 	.word	0x05fa0004

0000a3b8 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    a3b8:	490a      	ldr	r1, [pc, #40]	; (a3e4 <_sbrk+0x2c>)
    a3ba:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    a3bc:	b138      	cbz	r0, a3ce <_sbrk+0x16>
{
    a3be:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    a3c0:	1813      	adds	r3, r2, r0
    a3c2:	4809      	ldr	r0, [pc, #36]	; (a3e8 <_sbrk+0x30>)
    a3c4:	4283      	cmp	r3, r0
    a3c6:	d804      	bhi.n	a3d2 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    a3c8:	4610      	mov	r0, r2
                __brkval = prev + incr;
    a3ca:	600b      	str	r3, [r1, #0]
}
    a3cc:	bd08      	pop	{r3, pc}
    a3ce:	4610      	mov	r0, r2
    a3d0:	4770      	bx	lr
                        errno = ENOMEM;
    a3d2:	f002 fd63 	bl	ce9c <__errno>
    a3d6:	230c      	movs	r3, #12
                        return (void *)-1;
    a3d8:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    a3dc:	6003      	str	r3, [r0, #0]
}
    a3de:	4610      	mov	r0, r2
    a3e0:	bd08      	pop	{r3, pc}
    a3e2:	bf00      	nop
    a3e4:	2000436c 	.word	0x2000436c
    a3e8:	20280000 	.word	0x20280000

0000a3ec <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    a3ec:	2000      	movs	r0, #0
    a3ee:	4770      	bx	lr

0000a3f0 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    a3f0:	f04f 30ff 	mov.w	r0, #4294967295
    a3f4:	4770      	bx	lr
    a3f6:	bf00      	nop

0000a3f8 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    a3f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    a3fc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    a3fe:	604b      	str	r3, [r1, #4]
}
    a400:	4770      	bx	lr
    a402:	bf00      	nop

0000a404 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    a404:	2001      	movs	r0, #1
    a406:	4770      	bx	lr

0000a408 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    a408:	f04f 30ff 	mov.w	r0, #4294967295
    a40c:	4770      	bx	lr
    a40e:	bf00      	nop

0000a410 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    a410:	bf30      	wfi
    a412:	e7fd      	b.n	a410 <abort>

0000a414 <Panic_Temp_isr>:
  unused_interrupt_vector();
    a414:	f7ff bf10 	b.w	a238 <unused_interrupt_vector>

0000a418 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    a418:	4a12      	ldr	r2, [pc, #72]	; (a464 <tempmonGetTemp+0x4c>)
    a41a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    a41e:	075b      	lsls	r3, r3, #29
    a420:	d5fb      	bpl.n	a41a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    a422:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    a426:	4810      	ldr	r0, [pc, #64]	; (a468 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    a428:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    a42c:	490f      	ldr	r1, [pc, #60]	; (a46c <tempmonGetTemp+0x54>)
    a42e:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    a432:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    a436:	ed91 6a00 	vldr	s12, [r1]
    a43a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    a43e:	4a0c      	ldr	r2, [pc, #48]	; (a470 <tempmonGetTemp+0x58>)
    a440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a444:	4b0b      	ldr	r3, [pc, #44]	; (a474 <tempmonGetTemp+0x5c>)
    a446:	edd2 6a00 	vldr	s13, [r2]
    a44a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    a44e:	ed93 7a00 	vldr	s14, [r3]
    a452:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    a456:	ee67 7a86 	vmul.f32	s15, s15, s12
    a45a:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    a45e:	ee37 0a40 	vsub.f32	s0, s14, s0
    a462:	4770      	bx	lr
    a464:	400d8100 	.word	0x400d8100
    a468:	20018854 	.word	0x20018854
    a46c:	2001885c 	.word	0x2001885c
    a470:	20018860 	.word	0x20018860
    a474:	20018858 	.word	0x20018858

0000a478 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a478:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    a47a:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    a47c:	b11b      	cbz	r3, a486 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a47e:	6853      	ldr	r3, [r2, #4]
    a480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a484:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    a486:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a488:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a48a:	b33c      	cbz	r4, a4dc <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    a48c:	4b1a      	ldr	r3, [pc, #104]	; (a4f8 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    a48e:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a490:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    a494:	420c      	tst	r4, r1
    a496:	d11d      	bne.n	a4d4 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    a498:	4e18      	ldr	r6, [pc, #96]	; (a4fc <schedule_transfer+0x84>)
    a49a:	6877      	ldr	r7, [r6, #4]
    a49c:	e004      	b.n	a4a8 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a49e:	6874      	ldr	r4, [r6, #4]
    a4a0:	1be4      	subs	r4, r4, r7
    a4a2:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    a4a6:	d20b      	bcs.n	a4c0 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a4a8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    a4ac:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    a4b0:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a4b4:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a4b8:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    a4bc:	0464      	lsls	r4, r4, #17
    a4be:	d5ee      	bpl.n	a49e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a4c0:	400d      	ands	r5, r1
    a4c2:	d107      	bne.n	a4d4 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    a4c4:	4c0c      	ldr	r4, [pc, #48]	; (a4f8 <schedule_transfer+0x80>)
		endpoint->status = 0;
    a4c6:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    a4ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a4ce:	430b      	orrs	r3, r1
    a4d0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    a4d4:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a4d6:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a4d8:	bcf0      	pop	{r4, r5, r6, r7}
    a4da:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    a4dc:	4d06      	ldr	r5, [pc, #24]	; (a4f8 <schedule_transfer+0x80>)
	endpoint->status = 0;
    a4de:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    a4e2:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    a4e6:	430b      	orrs	r3, r1
    a4e8:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a4ec:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    a4ee:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a4f0:	b662      	cpsie	i
}
    a4f2:	bcf0      	pop	{r4, r5, r6, r7}
    a4f4:	4770      	bx	lr
    a4f6:	bf00      	nop
    a4f8:	402e0000 	.word	0x402e0000
    a4fc:	e0001000 	.word	0xe0001000

0000a500 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a500:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    a502:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    a504:	b19d      	cbz	r5, a52e <run_callbacks+0x2e>
    a506:	4606      	mov	r6, r0
    a508:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    a50a:	2400      	movs	r4, #0
    a50c:	e003      	b.n	a516 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    a50e:	6812      	ldr	r2, [r2, #0]
		count++;
    a510:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    a512:	2a01      	cmp	r2, #1
    a514:	d00c      	beq.n	a530 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    a516:	6853      	ldr	r3, [r2, #4]
    a518:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    a51c:	d0f7      	beq.n	a50e <run_callbacks+0xe>
			ep->first_transfer = t;
    a51e:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a520:	b12c      	cbz	r4, a52e <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    a522:	4628      	mov	r0, r5
		ep->callback_function(first);
    a524:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    a526:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    a528:	4798      	blx	r3
	while (count) {
    a52a:	3c01      	subs	r4, #1
    a52c:	d1f9      	bne.n	a522 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    a52e:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    a530:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    a534:	e7f4      	b.n	a520 <run_callbacks+0x20>
    a536:	bf00      	nop

0000a538 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a538:	b430      	push	{r4, r5}
	if (len > 0) {
    a53a:	b9d9      	cbnz	r1, a574 <endpoint0_transmit.constprop.0+0x3c>
    a53c:	4c1f      	ldr	r4, [pc, #124]	; (a5bc <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    a53e:	4b20      	ldr	r3, [pc, #128]	; (a5c0 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    a540:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a542:	4a20      	ldr	r2, [pc, #128]	; (a5c4 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    a544:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a546:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    a54a:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a54c:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    a54e:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a552:	2480      	movs	r4, #128	; 0x80
    a554:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a556:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a55a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a55e:	481a      	ldr	r0, [pc, #104]	; (a5c8 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    a560:	432b      	orrs	r3, r5
    a562:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a566:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    a568:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    a56c:	2b00      	cmp	r3, #0
    a56e:	d1fb      	bne.n	a568 <endpoint0_transmit.constprop.0+0x30>
}
    a570:	bc30      	pop	{r4, r5}
    a572:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a574:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a576:	4b15      	ldr	r3, [pc, #84]	; (a5cc <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a578:	4c10      	ldr	r4, [pc, #64]	; (a5bc <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    a57a:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a57c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a580:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    a582:	4a10      	ldr	r2, [pc, #64]	; (a5c4 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a584:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a586:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a58a:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a58c:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a58e:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a592:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a594:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a596:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a59a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a59e:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    a5a0:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a5a2:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    a5a4:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    a5a6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    a5aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a5ae:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a5b2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	d1fb      	bne.n	a5b2 <endpoint0_transmit.constprop.0+0x7a>
    a5ba:	e7c0      	b.n	a53e <endpoint0_transmit.constprop.0+0x6>
    a5bc:	20000000 	.word	0x20000000
    a5c0:	20004ec0 	.word	0x20004ec0
    a5c4:	402e0000 	.word	0x402e0000
    a5c8:	200053d4 	.word	0x200053d4
    a5cc:	20004ee0 	.word	0x20004ee0

0000a5d0 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    a5d0:	4908      	ldr	r1, [pc, #32]	; (a5f4 <usb_stop_sof_interrupts+0x24>)
    a5d2:	2201      	movs	r2, #1
    a5d4:	780b      	ldrb	r3, [r1, #0]
    a5d6:	fa02 f000 	lsl.w	r0, r2, r0
    a5da:	ea23 0000 	bic.w	r0, r3, r0
    a5de:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    a5e0:	b930      	cbnz	r0, a5f0 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    a5e2:	4a05      	ldr	r2, [pc, #20]	; (a5f8 <usb_stop_sof_interrupts+0x28>)
    a5e4:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    a5e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    a5ec:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    a5f0:	4770      	bx	lr
    a5f2:	bf00      	nop
    a5f4:	200188aa 	.word	0x200188aa
    a5f8:	402e0000 	.word	0x402e0000

0000a5fc <usb_isr>:
{
    a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    a600:	4c97      	ldr	r4, [pc, #604]	; (a860 <usb_isr+0x264>)
{
    a602:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    a604:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a608:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    a60a:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a60e:	d553      	bpl.n	a6b8 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a610:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    a614:	2a00      	cmp	r2, #0
    a616:	d04a      	beq.n	a6ae <usb_isr+0xb2>
    a618:	4e92      	ldr	r6, [pc, #584]	; (a864 <usb_isr+0x268>)
    a61a:	f8df a260 	ldr.w	sl, [pc, #608]	; a87c <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    a61e:	f8df 9274 	ldr.w	r9, [pc, #628]	; a894 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    a622:	f8df b274 	ldr.w	fp, [pc, #628]	; a898 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a626:	f8df 8274 	ldr.w	r8, [pc, #628]	; a89c <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    a62a:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    a62e:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a632:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    a63a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a63e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a642:	049d      	lsls	r5, r3, #18
    a644:	d5f5      	bpl.n	a632 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a646:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    a64a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    a64e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a652:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a656:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a65a:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    a65e:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    a662:	d1fa      	bne.n	a65a <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    a664:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    a666:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    a668:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    a66c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    a670:	f000 81cf 	beq.w	aa12 <usb_isr+0x416>
    a674:	f200 80db 	bhi.w	a82e <usb_isr+0x232>
    a678:	f240 3102 	movw	r1, #770	; 0x302
    a67c:	428b      	cmp	r3, r1
    a67e:	f000 81e7 	beq.w	aa50 <usb_isr+0x454>
    a682:	f200 809a 	bhi.w	a7ba <usb_isr+0x1be>
    a686:	2b82      	cmp	r3, #130	; 0x82
    a688:	f000 81cb 	beq.w	aa22 <usb_isr+0x426>
    a68c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    a690:	f040 808a 	bne.w	a7a8 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    a694:	f010 0f78 	tst.w	r0, #120	; 0x78
    a698:	b283      	uxth	r3, r0
    a69a:	f000 8203 	beq.w	aaa4 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a69e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a6a2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a6a6:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    a6aa:	2a00      	cmp	r2, #0
    a6ac:	d1bd      	bne.n	a62a <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a6ae:	4a6c      	ldr	r2, [pc, #432]	; (a860 <usb_isr+0x264>)
    a6b0:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    a6b4:	2b00      	cmp	r3, #0
    a6b6:	d142      	bne.n	a73e <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    a6b8:	067e      	lsls	r6, r7, #25
    a6ba:	d516      	bpl.n	a6ea <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a6bc:	4b68      	ldr	r3, [pc, #416]	; (a860 <usb_isr+0x264>)
    a6be:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    a6c2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a6c6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    a6ca:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a6ce:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    a6d2:	2c00      	cmp	r4, #0
    a6d4:	d1fb      	bne.n	a6ce <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a6d6:	f04f 32ff 	mov.w	r2, #4294967295
    a6da:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a6de:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    a6e2:	f000 fd29 	bl	b138 <usb_serial_reset>
		endpointN_notify_mask = 0;
    a6e6:	4b60      	ldr	r3, [pc, #384]	; (a868 <usb_isr+0x26c>)
    a6e8:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    a6ea:	01fc      	lsls	r4, r7, #7
    a6ec:	d503      	bpl.n	a6f6 <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a6ee:	4b5f      	ldr	r3, [pc, #380]	; (a86c <usb_isr+0x270>)
    a6f0:	681b      	ldr	r3, [r3, #0]
    a6f2:	b103      	cbz	r3, a6f6 <usb_isr+0xfa>
    a6f4:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    a6f6:	01b8      	lsls	r0, r7, #6
    a6f8:	d503      	bpl.n	a702 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a6fa:	4b5d      	ldr	r3, [pc, #372]	; (a870 <usb_isr+0x274>)
    a6fc:	681b      	ldr	r3, [r3, #0]
    a6fe:	b103      	cbz	r3, a702 <usb_isr+0x106>
    a700:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    a702:	0779      	lsls	r1, r7, #29
    a704:	d508      	bpl.n	a718 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a706:	4b56      	ldr	r3, [pc, #344]	; (a860 <usb_isr+0x264>)
    a708:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    a70c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    a710:	d047      	beq.n	a7a2 <usb_isr+0x1a6>
			usb_high_speed = 1;
    a712:	4b58      	ldr	r3, [pc, #352]	; (a874 <usb_isr+0x278>)
    a714:	2201      	movs	r2, #1
    a716:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a718:	4b51      	ldr	r3, [pc, #324]	; (a860 <usb_isr+0x264>)
    a71a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    a71e:	061a      	lsls	r2, r3, #24
    a720:	d50a      	bpl.n	a738 <usb_isr+0x13c>
    a722:	063b      	lsls	r3, r7, #24
    a724:	d508      	bpl.n	a738 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    a726:	4a54      	ldr	r2, [pc, #336]	; (a878 <usb_isr+0x27c>)
    a728:	7813      	ldrb	r3, [r2, #0]
    a72a:	b12b      	cbz	r3, a738 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    a72c:	3b01      	subs	r3, #1
    a72e:	b2db      	uxtb	r3, r3
    a730:	7013      	strb	r3, [r2, #0]
    a732:	2b00      	cmp	r3, #0
    a734:	f000 8272 	beq.w	ac1c <usb_isr+0x620>
}
    a738:	b003      	add	sp, #12
    a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    a73e:	494f      	ldr	r1, [pc, #316]	; (a87c <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    a740:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    a744:	6808      	ldr	r0, [r1, #0]
    a746:	4203      	tst	r3, r0
    a748:	f040 81d1 	bne.w	aaee <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    a74c:	4a46      	ldr	r2, [pc, #280]	; (a868 <usb_isr+0x26c>)
    a74e:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    a750:	401c      	ands	r4, r3
    a752:	d0b1      	beq.n	a6b8 <usb_isr+0xbc>
				while (tx) {
    a754:	ea5f 4814 	movs.w	r8, r4, lsr #16
    a758:	d010      	beq.n	a77c <usb_isr+0x180>
    a75a:	4e42      	ldr	r6, [pc, #264]	; (a864 <usb_isr+0x268>)
					tx &= ~(1<<p);
    a75c:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    a760:	fa98 f5a8 	rbit	r5, r8
    a764:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a768:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    a76c:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a770:	3040      	adds	r0, #64	; 0x40
    a772:	f7ff fec5 	bl	a500 <run_callbacks>
				while (tx) {
    a776:	ea38 0805 	bics.w	r8, r8, r5
    a77a:	d1f1      	bne.n	a760 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    a77c:	b2a4      	uxth	r4, r4
				while(rx) {
    a77e:	2c00      	cmp	r4, #0
    a780:	d09a      	beq.n	a6b8 <usb_isr+0xbc>
    a782:	4e38      	ldr	r6, [pc, #224]	; (a864 <usb_isr+0x268>)
					rx &= ~(1<<p);
    a784:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    a788:	fa94 f5a4 	rbit	r5, r4
    a78c:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a790:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    a794:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a798:	f7ff feb2 	bl	a500 <run_callbacks>
				while(rx) {
    a79c:	43ac      	bics	r4, r5
    a79e:	d1f3      	bne.n	a788 <usb_isr+0x18c>
    a7a0:	e78a      	b.n	a6b8 <usb_isr+0xbc>
			usb_high_speed = 0;
    a7a2:	4a34      	ldr	r2, [pc, #208]	; (a874 <usb_isr+0x278>)
    a7a4:	7013      	strb	r3, [r2, #0]
    a7a6:	e7b7      	b.n	a718 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    a7a8:	2b80      	cmp	r3, #128	; 0x80
    a7aa:	f47f af78 	bne.w	a69e <usb_isr+0xa2>
		reply_buffer[0] = 0;
    a7ae:	4834      	ldr	r0, [pc, #208]	; (a880 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    a7b0:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    a7b2:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    a7b4:	f7ff fec0 	bl	a538 <endpoint0_transmit.constprop.0>
		return;
    a7b8:	e775      	b.n	a6a6 <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    a7ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    a7be:	f000 810b 	beq.w	a9d8 <usb_isr+0x3dc>
    a7c2:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    a7c6:	2b01      	cmp	r3, #1
    a7c8:	f63f af69 	bhi.w	a69e <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a7cc:	4b2d      	ldr	r3, [pc, #180]	; (a884 <usb_isr+0x288>)
    a7ce:	685d      	ldr	r5, [r3, #4]
    a7d0:	2d00      	cmp	r5, #0
    a7d2:	f43f af64 	beq.w	a69e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a7d6:	fa1f fc8c 	uxth.w	ip, ip
    a7da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    a7de:	e004      	b.n	a7ea <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a7e0:	691d      	ldr	r5, [r3, #16]
    a7e2:	330c      	adds	r3, #12
    a7e4:	2d00      	cmp	r5, #0
    a7e6:	f43f af5a 	beq.w	a69e <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a7ea:	881a      	ldrh	r2, [r3, #0]
    a7ec:	4572      	cmp	r2, lr
    a7ee:	d1f7      	bne.n	a7e0 <usb_isr+0x1e4>
    a7f0:	885a      	ldrh	r2, [r3, #2]
    a7f2:	4562      	cmp	r2, ip
    a7f4:	d1f4      	bne.n	a7e0 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    a7f6:	ea4f 221e 	mov.w	r2, lr, lsr #8
    a7fa:	2a03      	cmp	r2, #3
    a7fc:	f000 81a5 	beq.w	ab4a <usb_isr+0x54e>
					datalen = list->length;
    a800:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    a802:	0c00      	lsrs	r0, r0, #16
    a804:	4282      	cmp	r2, r0
    a806:	bf28      	it	cs
    a808:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    a80a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    a80e:	f040 81a1 	bne.w	ab54 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    a812:	4b18      	ldr	r3, [pc, #96]	; (a874 <usb_isr+0x278>)
    a814:	491c      	ldr	r1, [pc, #112]	; (a888 <usb_isr+0x28c>)
    a816:	7818      	ldrb	r0, [r3, #0]
    a818:	4b1c      	ldr	r3, [pc, #112]	; (a88c <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a81a:	9201      	str	r2, [sp, #4]
    a81c:	2800      	cmp	r0, #0
    a81e:	bf18      	it	ne
    a820:	4619      	movne	r1, r3
    a822:	481b      	ldr	r0, [pc, #108]	; (a890 <usb_isr+0x294>)
    a824:	f7ff fc3c 	bl	a0a0 <memcpy>
    a828:	4d19      	ldr	r5, [pc, #100]	; (a890 <usb_isr+0x294>)
    a82a:	9a01      	ldr	r2, [sp, #4]
    a82c:	e1e1      	b.n	abf2 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    a82e:	f242 2121 	movw	r1, #8737	; 0x2221
    a832:	428b      	cmp	r3, r1
    a834:	d07c      	beq.n	a930 <usb_isr+0x334>
    a836:	d933      	bls.n	a8a0 <usb_isr+0x2a4>
    a838:	f242 3121 	movw	r1, #8993	; 0x2321
    a83c:	428b      	cmp	r3, r1
    a83e:	f000 8081 	beq.w	a944 <usb_isr+0x348>
    a842:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    a846:	428b      	cmp	r3, r1
    a848:	f47f af29 	bne.w	a69e <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    a84c:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    a850:	b283      	uxth	r3, r0
    a852:	f47f af24 	bne.w	a69e <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    a856:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    a85a:	f363 0c0f 	bfi	ip, r3, #0, #16
    a85e:	e7b5      	b.n	a7cc <usb_isr+0x1d0>
    a860:	402e0000 	.word	0x402e0000
    a864:	20000000 	.word	0x20000000
    a868:	200053d8 	.word	0x200053d8
    a86c:	20018880 	.word	0x20018880
    a870:	20018884 	.word	0x20018884
    a874:	200188b0 	.word	0x200188b0
    a878:	200188b1 	.word	0x200188b1
    a87c:	200053d4 	.word	0x200053d4
    a880:	20018818 	.word	0x20018818
    a884:	20001188 	.word	0x20001188
    a888:	60001e84 	.word	0x60001e84
    a88c:	60001ee8 	.word	0x60001ee8
    a890:	20200000 	.word	0x20200000
    a894:	200053cc 	.word	0x200053cc
    a898:	b8c6cf5d 	.word	0xb8c6cf5d
    a89c:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    a8a0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a8a4:	d066      	beq.n	a974 <usb_isr+0x378>
    a8a6:	f242 0121 	movw	r1, #8225	; 0x2021
    a8aa:	428b      	cmp	r3, r1
    a8ac:	f47f aef7 	bne.w	a69e <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    a8b0:	0c03      	lsrs	r3, r0, #16
    a8b2:	2b07      	cmp	r3, #7
    a8b4:	f47f aef3 	bne.w	a69e <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    a8b8:	4bb2      	ldr	r3, [pc, #712]	; (ab84 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a8ba:	49b3      	ldr	r1, [pc, #716]	; (ab88 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    a8bc:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a8be:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    a8c0:	49b2      	ldr	r1, [pc, #712]	; (ab8c <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a8c2:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a8c4:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    a8c8:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    a8cc:	2201      	movs	r2, #1
    a8ce:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a8d0:	4aaf      	ldr	r2, [pc, #700]	; (ab90 <usb_isr+0x594>)
    a8d2:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a8d4:	4aaf      	ldr	r2, [pc, #700]	; (ab94 <usb_isr+0x598>)
    a8d6:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    a8d8:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    a8dc:	f041 0101 	orr.w	r1, r1, #1
    a8e0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a8e4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a8e8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a8ec:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a8ee:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    a8f0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d1fb      	bne.n	a8f0 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    a8f8:	4aa7      	ldr	r2, [pc, #668]	; (ab98 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a8fa:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    a8fc:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    a8fe:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a900:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a902:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a904:	f248 0380 	movw	r3, #32896	; 0x8080
    a908:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a90a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a90e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a912:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a91a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a91e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    a922:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    a926:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a92a:	2b00      	cmp	r3, #0
    a92c:	d1fb      	bne.n	a926 <usb_isr+0x32a>
    a92e:	e6ba      	b.n	a6a6 <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    a930:	b280      	uxth	r0, r0
    a932:	b938      	cbnz	r0, a944 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a934:	4b99      	ldr	r3, [pc, #612]	; (ab9c <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a936:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a93a:	6819      	ldr	r1, [r3, #0]
    a93c:	4b98      	ldr	r3, [pc, #608]	; (aba0 <usb_isr+0x5a4>)
    a93e:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a940:	4b98      	ldr	r3, [pc, #608]	; (aba4 <usb_isr+0x5a8>)
    a942:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    a944:	4b94      	ldr	r3, [pc, #592]	; (ab98 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    a946:	2200      	movs	r2, #0
    a948:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    a94a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    a94c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a94e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    a950:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a952:	2280      	movs	r2, #128	; 0x80
    a954:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a956:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a95a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a95e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a966:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a96a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a96e:	2b00      	cmp	r3, #0
    a970:	d1fb      	bne.n	a96a <usb_isr+0x36e>
    a972:	e698      	b.n	a6a6 <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    a974:	f3c2 4207 	ubfx	r2, r2, #16, #8
    a978:	4b8b      	ldr	r3, [pc, #556]	; (aba8 <usb_isr+0x5ac>)
    a97a:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a97c:	4b8b      	ldr	r3, [pc, #556]	; (abac <usb_isr+0x5b0>)
    a97e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a982:	4b8b      	ldr	r3, [pc, #556]	; (abb0 <usb_isr+0x5b4>)
    a984:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a988:	4b8a      	ldr	r3, [pc, #552]	; (abb4 <usb_isr+0x5b8>)
    a98a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    a98e:	f000 fbd5 	bl	b13c <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    a992:	2280      	movs	r2, #128	; 0x80
    a994:	4629      	mov	r1, r5
    a996:	4888      	ldr	r0, [pc, #544]	; (abb8 <usb_isr+0x5bc>)
    a998:	f002 f92a 	bl	cbf0 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a99c:	4b87      	ldr	r3, [pc, #540]	; (abbc <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a99e:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    a9a0:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    a9a4:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    a9a8:	4b7b      	ldr	r3, [pc, #492]	; (ab98 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    a9aa:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a9ac:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    a9ae:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a9b0:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    a9b2:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    a9b4:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a9b6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a9ba:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a9be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a9c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a9c6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a9ca:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    a9ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	d1fb      	bne.n	a9ce <usb_isr+0x3d2>
    a9d6:	e666      	b.n	a6a6 <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    a9d8:	4b6f      	ldr	r3, [pc, #444]	; (ab98 <usb_isr+0x59c>)
    a9da:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    a9dc:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    a9de:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a9e0:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    a9e2:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    a9e4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a9e6:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a9e8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    a9ec:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a9f0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    a9f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    a9f8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    a9fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    aa00:	2b00      	cmp	r3, #0
    aa02:	d1fb      	bne.n	a9fc <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    aa04:	0c13      	lsrs	r3, r2, #16
    aa06:	065b      	lsls	r3, r3, #25
    aa08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    aa0c:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    aa10:	e649      	b.n	a6a6 <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    aa12:	4b65      	ldr	r3, [pc, #404]	; (aba8 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    aa14:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    aa16:	486a      	ldr	r0, [pc, #424]	; (abc0 <usb_isr+0x5c4>)
    aa18:	781b      	ldrb	r3, [r3, #0]
    aa1a:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    aa1c:	f7ff fd8c 	bl	a538 <endpoint0_transmit.constprop.0>
		return;
    aa20:	e641      	b.n	a6a6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    aa22:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    aa24:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    aa28:	f47f ae39 	bne.w	a69e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    aa2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    aa30:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    aa34:	4a62      	ldr	r2, [pc, #392]	; (abc0 <usb_isr+0x5c4>)
    aa36:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    aa38:	0618      	lsls	r0, r3, #24
    aa3a:	f100 809e 	bmi.w	ab7a <usb_isr+0x57e>
    aa3e:	07cb      	lsls	r3, r1, #31
    aa40:	d501      	bpl.n	aa46 <usb_isr+0x44a>
			reply_buffer[0] = 1;
    aa42:	2301      	movs	r3, #1
    aa44:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    aa46:	2102      	movs	r1, #2
    aa48:	485d      	ldr	r0, [pc, #372]	; (abc0 <usb_isr+0x5c4>)
    aa4a:	f7ff fd75 	bl	a538 <endpoint0_transmit.constprop.0>
		return;
    aa4e:	e62a      	b.n	a6a6 <usb_isr+0xaa>
		if (endpoint > 7) break;
    aa50:	f010 0f78 	tst.w	r0, #120	; 0x78
    aa54:	b283      	uxth	r3, r0
    aa56:	f47f ae22 	bne.w	a69e <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    aa5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    aa5e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    aa62:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    aa66:	bf14      	ite	ne
    aa68:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    aa6c:	f043 0301 	orreq.w	r3, r3, #1
    aa70:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    aa74:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    aa76:	4b48      	ldr	r3, [pc, #288]	; (ab98 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    aa78:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    aa7a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    aa7c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aa7e:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    aa80:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aa82:	2280      	movs	r2, #128	; 0x80
    aa84:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aa86:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    aa8a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aa8e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    aa92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    aa96:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    aa9a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    aa9e:	2b00      	cmp	r3, #0
    aaa0:	d1fb      	bne.n	aa9a <usb_isr+0x49e>
    aaa2:	e600      	b.n	a6a6 <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    aaa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    aaa8:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    aaac:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    aab0:	bf14      	ite	ne
    aab2:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    aab6:	f023 0301 	biceq.w	r3, r3, #1
    aaba:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    aabe:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    aac0:	4b35      	ldr	r3, [pc, #212]	; (ab98 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    aac2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    aac4:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    aac6:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    aac8:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    aaca:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    aacc:	2280      	movs	r2, #128	; 0x80
    aace:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    aad0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    aad4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    aad8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    aadc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    aae0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    aae4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    aae8:	2b00      	cmp	r3, #0
    aaea:	d1fb      	bne.n	aae4 <usb_isr+0x4e8>
    aaec:	e5db      	b.n	a6a6 <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    aaee:	2000      	movs	r0, #0
    aaf0:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    aaf2:	4926      	ldr	r1, [pc, #152]	; (ab8c <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    aaf4:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    aaf6:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    aaf8:	f242 0121 	movw	r1, #8225	; 0x2021
    aafc:	428c      	cmp	r4, r1
    aafe:	f47f ae25 	bne.w	a74c <usb_isr+0x150>
    ab02:	b280      	uxth	r0, r0
    ab04:	2800      	cmp	r0, #0
    ab06:	f47f ae21 	bne.w	a74c <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ab0a:	492e      	ldr	r1, [pc, #184]	; (abc4 <usb_isr+0x5c8>)
    ab0c:	4c2e      	ldr	r4, [pc, #184]	; (abc8 <usb_isr+0x5cc>)
    ab0e:	c903      	ldmia	r1, {r0, r1}
    ab10:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    ab12:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ab14:	ea4f 4111 	mov.w	r1, r1, lsr #16
    ab18:	6020      	str	r0, [r4, #0]
    ab1a:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    ab1c:	f47f ae16 	bne.w	a74c <usb_isr+0x150>
	__disable_irq();
    ab20:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    ab22:	482a      	ldr	r0, [pc, #168]	; (abcc <usb_isr+0x5d0>)
    ab24:	7801      	ldrb	r1, [r0, #0]
    ab26:	f041 0108 	orr.w	r1, r1, #8
    ab2a:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    ab2c:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    ab30:	060d      	lsls	r5, r1, #24
    ab32:	d405      	bmi.n	ab40 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ab34:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ab36:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    ab38:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    ab3c:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    ab40:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ab42:	4a23      	ldr	r2, [pc, #140]	; (abd0 <usb_isr+0x5d4>)
    ab44:	2150      	movs	r1, #80	; 0x50
    ab46:	7011      	strb	r1, [r2, #0]
    ab48:	e600      	b.n	a74c <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    ab4a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    ab4c:	782a      	ldrb	r2, [r5, #0]
    ab4e:	4282      	cmp	r2, r0
    ab50:	bf28      	it	cs
    ab52:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    ab54:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    ab58:	d144      	bne.n	abe4 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    ab5a:	4b1e      	ldr	r3, [pc, #120]	; (abd4 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ab5c:	4d1e      	ldr	r5, [pc, #120]	; (abd8 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    ab5e:	7818      	ldrb	r0, [r3, #0]
    ab60:	491e      	ldr	r1, [pc, #120]	; (abdc <usb_isr+0x5e0>)
    ab62:	4b1f      	ldr	r3, [pc, #124]	; (abe0 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ab64:	9201      	str	r2, [sp, #4]
    ab66:	2800      	cmp	r0, #0
    ab68:	bf18      	it	ne
    ab6a:	4619      	movne	r1, r3
    ab6c:	4628      	mov	r0, r5
    ab6e:	f7ff fa97 	bl	a0a0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    ab72:	2307      	movs	r3, #7
    ab74:	706b      	strb	r3, [r5, #1]
    ab76:	9a01      	ldr	r2, [sp, #4]
    ab78:	e03b      	b.n	abf2 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ab7a:	03c9      	lsls	r1, r1, #15
    ab7c:	f53f af61 	bmi.w	aa42 <usb_isr+0x446>
    ab80:	e761      	b.n	aa46 <usb_isr+0x44a>
    ab82:	bf00      	nop
    ab84:	20004ee0 	.word	0x20004ee0
    ab88:	200063cc 	.word	0x200063cc
    ab8c:	20005080 	.word	0x20005080
    ab90:	00070080 	.word	0x00070080
    ab94:	200073cc 	.word	0x200073cc
    ab98:	20004ec0 	.word	0x20004ec0
    ab9c:	2001886c 	.word	0x2001886c
    aba0:	2001887c 	.word	0x2001887c
    aba4:	200188ae 	.word	0x200188ae
    aba8:	200188af 	.word	0x200188af
    abac:	00cc0002 	.word	0x00cc0002
    abb0:	000200c8 	.word	0x000200c8
    abb4:	00c80002 	.word	0x00c80002
    abb8:	20000080 	.word	0x20000080
    abbc:	74d59319 	.word	0x74d59319
    abc0:	20018818 	.word	0x20018818
    abc4:	200053cc 	.word	0x200053cc
    abc8:	20018874 	.word	0x20018874
    abcc:	200188aa 	.word	0x200188aa
    abd0:	200188b1 	.word	0x200188b1
    abd4:	200188b0 	.word	0x200188b0
    abd8:	20200000 	.word	0x20200000
    abdc:	60001ee8 	.word	0x60001ee8
    abe0:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    abe4:	4629      	mov	r1, r5
    abe6:	4d10      	ldr	r5, [pc, #64]	; (ac28 <usb_isr+0x62c>)
    abe8:	9201      	str	r2, [sp, #4]
    abea:	4628      	mov	r0, r5
    abec:	f7ff fa58 	bl	a0a0 <memcpy>
    abf0:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    abf2:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    abf6:	4415      	add	r5, r2
	asm("dsb");
    abf8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    abfc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ac00:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    ac04:	3320      	adds	r3, #32
	} while (location < end_addr);
    ac06:	429d      	cmp	r5, r3
    ac08:	d8fa      	bhi.n	ac00 <usb_isr+0x604>
	asm("dsb");
    ac0a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ac0e:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    ac12:	4805      	ldr	r0, [pc, #20]	; (ac28 <usb_isr+0x62c>)
    ac14:	4611      	mov	r1, r2
    ac16:	f7ff fc8f 	bl	a538 <endpoint0_transmit.constprop.0>
				return;
    ac1a:	e544      	b.n	a6a6 <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    ac1c:	2003      	movs	r0, #3
    ac1e:	f7ff fcd7 	bl	a5d0 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    ac22:	f007 fced 	bl	12600 <___reboot_Teensyduino__veneer>
    ac26:	bf00      	nop
    ac28:	20200000 	.word	0x20200000

0000ac2c <usb_config_rx>:
{
    ac2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac30:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ac32:	1e83      	subs	r3, r0, #2
    ac34:	2b02      	cmp	r3, #2
    ac36:	d901      	bls.n	ac3c <usb_config_rx+0x10>
}
    ac38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ac3c:	f8df 904c 	ldr.w	r9, [pc, #76]	; ac8c <usb_config_rx+0x60>
    ac40:	4615      	mov	r5, r2
    ac42:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    ac44:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ac46:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    ac4a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ac4c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    ac50:	2100      	movs	r1, #0
    ac52:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ac56:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    ac58:	f001 ffca 	bl	cbf0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ac5c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    ac60:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ac62:	0952      	lsrs	r2, r2, #5
    ac64:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    ac68:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    ac6c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    ac70:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    ac74:	2f00      	cmp	r7, #0
    ac76:	d0df      	beq.n	ac38 <usb_config_rx+0xc>
    ac78:	4a03      	ldr	r2, [pc, #12]	; (ac88 <usb_config_rx+0x5c>)
    ac7a:	40b3      	lsls	r3, r6
    ac7c:	6811      	ldr	r1, [r2, #0]
    ac7e:	430b      	orrs	r3, r1
    ac80:	6013      	str	r3, [r2, #0]
}
    ac82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac86:	bf00      	nop
    ac88:	200053d8 	.word	0x200053d8
    ac8c:	20000000 	.word	0x20000000

0000ac90 <usb_config_tx>:
{
    ac90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ac94:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ac96:	1e81      	subs	r1, r0, #2
    ac98:	2902      	cmp	r1, #2
    ac9a:	d901      	bls.n	aca0 <usb_config_tx+0x10>
}
    ac9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    aca0:	01c7      	lsls	r7, r0, #7
    aca2:	f8df 904c 	ldr.w	r9, [pc, #76]	; acf0 <usb_config_tx+0x60>
    aca6:	4692      	mov	sl, r2
    aca8:	4604      	mov	r4, r0
    acaa:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    acac:	223c      	movs	r2, #60	; 0x3c
    acae:	2100      	movs	r1, #0
    acb0:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    acb2:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acb6:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    acb8:	f108 0004 	add.w	r0, r8, #4
    acbc:	f001 ff98 	bl	cbf0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    acc0:	faba f28a 	clz	r2, sl
    acc4:	0952      	lsrs	r2, r2, #5
    acc6:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    acca:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    acce:	2201      	movs	r2, #1
	qh->callback_function = callback;
    acd0:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    acd4:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    acd8:	2e00      	cmp	r6, #0
    acda:	d0df      	beq.n	ac9c <usb_config_tx+0xc>
    acdc:	4b03      	ldr	r3, [pc, #12]	; (acec <usb_config_tx+0x5c>)
    acde:	3410      	adds	r4, #16
    ace0:	6819      	ldr	r1, [r3, #0]
    ace2:	40a2      	lsls	r2, r4
    ace4:	430a      	orrs	r2, r1
    ace6:	601a      	str	r2, [r3, #0]
}
    ace8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    acec:	200053d8 	.word	0x200053d8
    acf0:	20000000 	.word	0x20000000

0000acf4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    acf4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    acf6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    acf8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    acfa:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    acfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    ad02:	b410      	push	{r4}
	transfer->next = 1;
    ad04:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    ad06:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    ad08:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    ad0c:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    ad0e:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    ad12:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    ad16:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    ad18:	6181      	str	r1, [r0, #24]
}
    ad1a:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    ad1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    ad22:	4770      	bx	lr

0000ad24 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ad24:	1e83      	subs	r3, r0, #2
{
    ad26:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ad28:	2b02      	cmp	r3, #2
    ad2a:	d900      	bls.n	ad2e <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    ad2c:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ad2e:	4b06      	ldr	r3, [pc, #24]	; (ad48 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    ad30:	f100 0110 	add.w	r1, r0, #16
    ad34:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    ad38:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    ad3c:	fa0c f101 	lsl.w	r1, ip, r1
    ad40:	3040      	adds	r0, #64	; 0x40
    ad42:	f7ff bb99 	b.w	a478 <schedule_transfer>
    ad46:	bf00      	nop
    ad48:	20000000 	.word	0x20000000

0000ad4c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ad4c:	1e83      	subs	r3, r0, #2
{
    ad4e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    ad50:	2b02      	cmp	r3, #2
    ad52:	d900      	bls.n	ad56 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    ad54:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    ad56:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    ad58:	4b02      	ldr	r3, [pc, #8]	; (ad64 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    ad5a:	4081      	lsls	r1, r0
    ad5c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    ad60:	f7ff bb8a 	b.w	a478 <schedule_transfer>
    ad64:	20000000 	.word	0x20000000

0000ad68 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    ad68:	6840      	ldr	r0, [r0, #4]
#endif
}
    ad6a:	4770      	bx	lr

0000ad6c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    ad6c:	4a12      	ldr	r2, [pc, #72]	; (adb8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    ad6e:	4b13      	ldr	r3, [pc, #76]	; (adbc <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    ad70:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    ad74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    ad78:	4298      	cmp	r0, r3
{
    ad7a:	b510      	push	{r4, lr}
    ad7c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    ad7e:	d202      	bcs.n	ad86 <usb_init_serialnumber+0x1a>
    ad80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ad84:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    ad86:	4c0e      	ldr	r4, [pc, #56]	; (adc0 <usb_init_serialnumber+0x54>)
    ad88:	a901      	add	r1, sp, #4
    ad8a:	220a      	movs	r2, #10
    ad8c:	f7ff fa22 	bl	a1d4 <ultoa>
	for (i=0; i<10; i++) {
    ad90:	a901      	add	r1, sp, #4
    ad92:	2300      	movs	r3, #0
    ad94:	4620      	mov	r0, r4
		char c = buf[i];
    ad96:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    ad9a:	3301      	adds	r3, #1
		if (!c) break;
    ad9c:	b13a      	cbz	r2, adae <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    ad9e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    ada0:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    ada4:	d1f7      	bne.n	ad96 <usb_init_serialnumber+0x2a>
    ada6:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ada8:	7023      	strb	r3, [r4, #0]
}
    adaa:	b004      	add	sp, #16
    adac:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    adae:	005b      	lsls	r3, r3, #1
    adb0:	b2db      	uxtb	r3, r3
    adb2:	7023      	strb	r3, [r4, #0]
}
    adb4:	b004      	add	sp, #16
    adb6:	bd10      	pop	{r4, pc}
    adb8:	401f4400 	.word	0x401f4400
    adbc:	00989680 	.word	0x00989680
    adc0:	20004950 	.word	0x20004950

0000adc4 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    adc4:	f000 bace 	b.w	b364 <usb_serial_flush_input>

0000adc8 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    adc8:	f000 bac0 	b.w	b34c <usb_serial_available>

0000adcc <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    adcc:	f000 bb5c 	b.w	b488 <usb_serial_flush_output>

0000add0 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    add0:	f000 bb32 	b.w	b438 <usb_serial_write_buffer_free>

0000add4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    add4:	4608      	mov	r0, r1
    add6:	4611      	mov	r1, r2
    add8:	f000 bb22 	b.w	b420 <usb_serial_write>

0000addc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    adde:	4c14      	ldr	r4, [pc, #80]	; (ae30 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ade0:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    ade4:	4e13      	ldr	r6, [pc, #76]	; (ae34 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ade6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    adea:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    adee:	4f12      	ldr	r7, [pc, #72]	; (ae38 <rx_queue_transfer+0x5c>)
    adf0:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    adf4:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    adf6:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    adfa:	4621      	mov	r1, r4
    adfc:	883a      	ldrh	r2, [r7, #0]
    adfe:	4630      	mov	r0, r6
    ae00:	f7ff ff78 	bl	acf4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    ae04:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    ae06:	4423      	add	r3, r4
	asm("dsb");
    ae08:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ae0c:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    ae10:	3420      	adds	r4, #32
	} while (location < end_addr);
    ae12:	42a3      	cmp	r3, r4
    ae14:	d8fa      	bhi.n	ae0c <rx_queue_transfer+0x30>
	asm("dsb");
    ae16:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ae1a:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    ae1e:	2003      	movs	r0, #3
    ae20:	4631      	mov	r1, r6
    ae22:	f7ff ff93 	bl	ad4c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ae26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    ae2a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    ae2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ae30:	20200080 	.word	0x20200080
    ae34:	20004f00 	.word	0x20004f00
    ae38:	2001888e 	.word	0x2001888e

0000ae3c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ae3c:	4b24      	ldr	r3, [pc, #144]	; (aed0 <rx_event+0x94>)
{
    ae3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ae42:	881c      	ldrh	r4, [r3, #0]
    ae44:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    ae46:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ae48:	f3c3 430e 	ubfx	r3, r3, #16, #15
    ae4c:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    ae4e:	2c00      	cmp	r4, #0
    ae50:	dd24      	ble.n	ae9c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    ae52:	4920      	ldr	r1, [pc, #128]	; (aed4 <rx_event+0x98>)
		if (head != rx_tail) {
    ae54:	4820      	ldr	r0, [pc, #128]	; (aed8 <rx_event+0x9c>)
		uint32_t head = rx_head;
    ae56:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    ae58:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    ae5a:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    ae5c:	4e1f      	ldr	r6, [pc, #124]	; (aedc <rx_event+0xa0>)
		if (head != rx_tail) {
    ae5e:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    ae60:	481f      	ldr	r0, [pc, #124]	; (aee0 <rx_event+0xa4>)
		if (head != rx_tail) {
    ae62:	d007      	beq.n	ae74 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    ae64:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    ae68:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    ae6c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    ae70:	4294      	cmp	r4, r2
    ae72:	d918      	bls.n	aea6 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    ae74:	3301      	adds	r3, #1
		rx_index[i] = 0;
    ae76:	2200      	movs	r2, #0
		rx_count[i] = len;
    ae78:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    ae7c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    ae7e:	4e19      	ldr	r6, [pc, #100]	; (aee4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    ae80:	bf88      	it	hi
    ae82:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    ae84:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    ae88:	bf98      	it	ls
    ae8a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    ae8c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    ae8e:	4b16      	ldr	r3, [pc, #88]	; (aee8 <rx_event+0xac>)
		rx_head = head;
    ae90:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    ae92:	681a      	ldr	r2, [r3, #0]
    ae94:	4414      	add	r4, r2
    ae96:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    ae98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    ae9c:	4628      	mov	r0, r5
}
    ae9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    aea2:	f7ff bf9b 	b.w	addc <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    aea6:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    aeaa:	4910      	ldr	r1, [pc, #64]	; (aeec <rx_event+0xb0>)
    aeac:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    aeae:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    aeb0:	4408      	add	r0, r1
    aeb2:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    aeb6:	f7ff f8f3 	bl	a0a0 <memcpy>
				rx_available += len;
    aeba:	4a0b      	ldr	r2, [pc, #44]	; (aee8 <rx_event+0xac>)
				rx_queue_transfer(i);
    aebc:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    aebe:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    aec2:	6813      	ldr	r3, [r2, #0]
    aec4:	4423      	add	r3, r4
}
    aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    aeca:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    aecc:	f7ff bf86 	b.w	addc <rx_queue_transfer>
    aed0:	2001888e 	.word	0x2001888e
    aed4:	200188a8 	.word	0x200188a8
    aed8:	200188a9 	.word	0x200188a9
    aedc:	20018828 	.word	0x20018828
    aee0:	20018848 	.word	0x20018848
    aee4:	20018838 	.word	0x20018838
    aee8:	20018824 	.word	0x20018824
    aeec:	20200080 	.word	0x20200080

0000aef0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    aef0:	4b1d      	ldr	r3, [pc, #116]	; (af68 <usb_serial_flush_callback+0x78>)
    aef2:	781a      	ldrb	r2, [r3, #0]
    aef4:	2a00      	cmp	r2, #0
    aef6:	d136      	bne.n	af66 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    aef8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    aefc:	4a1b      	ldr	r2, [pc, #108]	; (af6c <usb_serial_flush_callback+0x7c>)
    aefe:	7812      	ldrb	r2, [r2, #0]
    af00:	b38a      	cbz	r2, af66 <usb_serial_flush_callback+0x76>
{
    af02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    af06:	4d1a      	ldr	r5, [pc, #104]	; (af70 <usb_serial_flush_callback+0x80>)
    af08:	882a      	ldrh	r2, [r5, #0]
    af0a:	b352      	cbz	r2, af62 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    af0c:	4e19      	ldr	r6, [pc, #100]	; (af74 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    af0e:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    af12:	4f19      	ldr	r7, [pc, #100]	; (af78 <usb_serial_flush_callback+0x88>)
    af14:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    af16:	4c19      	ldr	r4, [pc, #100]	; (af7c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    af18:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    af1c:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    af20:	4642      	mov	r2, r8
    af22:	4638      	mov	r0, r7
    af24:	4621      	mov	r1, r4
    af26:	f7ff fee5 	bl	acf4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    af2a:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    af2e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    af32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    af36:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    af3a:	3420      	adds	r4, #32
	} while (location < end_addr);
    af3c:	42a2      	cmp	r2, r4
    af3e:	d8fa      	bhi.n	af36 <usb_serial_flush_callback+0x46>
	asm("dsb");
    af40:	f3bf 8f4f 	dsb	sy
	asm("isb");
    af44:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    af48:	2004      	movs	r0, #4
    af4a:	4639      	mov	r1, r7
    af4c:	f7ff feea 	bl	ad24 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    af50:	7833      	ldrb	r3, [r6, #0]
    af52:	3301      	adds	r3, #1
    af54:	b2db      	uxtb	r3, r3
    af56:	2b03      	cmp	r3, #3
    af58:	bf88      	it	hi
    af5a:	2300      	movhi	r3, #0
    af5c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    af5e:	2300      	movs	r3, #0
    af60:	802b      	strh	r3, [r5, #0]
}
    af62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af66:	4770      	bx	lr
    af68:	200188ad 	.word	0x200188ad
    af6c:	200188af 	.word	0x200188af
    af70:	20018890 	.word	0x20018890
    af74:	200188ac 	.word	0x200188ac
    af78:	20005000 	.word	0x20005000
    af7c:	20201080 	.word	0x20201080

0000af80 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af84:	b085      	sub	sp, #20
	while (size > 0) {
    af86:	e9cd 1001 	strd	r1, r0, [sp, #4]
    af8a:	2900      	cmp	r1, #0
    af8c:	f000 80bf 	beq.w	b10e <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    af90:	2300      	movs	r3, #0
    af92:	4c60      	ldr	r4, [pc, #384]	; (b114 <usb_serial_write.part.0+0x194>)
    af94:	f8df 8198 	ldr.w	r8, [pc, #408]	; b130 <usb_serial_write.part.0+0x1b0>
    af98:	f8df a198 	ldr.w	sl, [pc, #408]	; b134 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    af9c:	4f5e      	ldr	r7, [pc, #376]	; (b118 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    af9e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    afa0:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    afa2:	4a5e      	ldr	r2, [pc, #376]	; (b11c <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    afa4:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    afa6:	4b5e      	ldr	r3, [pc, #376]	; (b120 <usb_serial_write.part.0+0x1a0>)
    afa8:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    afaa:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    afae:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    afb2:	2b00      	cmp	r3, #0
    afb4:	f040 80a7 	bne.w	b106 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    afb8:	461e      	mov	r6, r3
		int waiting=0;
    afba:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    afbc:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    afbe:	4648      	mov	r0, r9
    afc0:	f7ff fed2 	bl	ad68 <usb_transfer_status>
			if (!(status & 0x80)) {
    afc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    afc8:	f000 808c 	beq.w	b0e4 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    afcc:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    afd0:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    afd4:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    afd8:	b905      	cbnz	r5, afdc <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    afda:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    afdc:	2b00      	cmp	r3, #0
    afde:	d17d      	bne.n	b0dc <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    afe0:	683b      	ldr	r3, [r7, #0]
    afe2:	1b9b      	subs	r3, r3, r6
    afe4:	2b78      	cmp	r3, #120	; 0x78
    afe6:	f200 8087 	bhi.w	b0f8 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    afea:	4b4e      	ldr	r3, [pc, #312]	; (b124 <usb_serial_write.part.0+0x1a4>)
    afec:	781b      	ldrb	r3, [r3, #0]
    afee:	2b00      	cmp	r3, #0
    aff0:	d074      	beq.n	b0dc <usb_serial_write.part.0+0x15c>
			yield();
    aff2:	f000 fa93 	bl	b51c <yield>
			tx_noautoflush = 1;
    aff6:	2201      	movs	r2, #1
		while (!tx_available) {
    aff8:	f8b8 3000 	ldrh.w	r3, [r8]
    affc:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    affe:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    b000:	2b00      	cmp	r3, #0
    b002:	d0dc      	beq.n	afbe <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b004:	4a46      	ldr	r2, [pc, #280]	; (b120 <usb_serial_write.part.0+0x1a0>)
    b006:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    b00a:	7811      	ldrb	r1, [r2, #0]
    b00c:	461a      	mov	r2, r3
    b00e:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    b012:	4d45      	ldr	r5, [pc, #276]	; (b128 <usb_serial_write.part.0+0x1a8>)
    b014:	02c9      	lsls	r1, r1, #11
    b016:	4428      	add	r0, r5
		if (size >= tx_available) {
    b018:	9d01      	ldr	r5, [sp, #4]
    b01a:	4295      	cmp	r5, r2
    b01c:	d217      	bcs.n	b04e <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    b01e:	9303      	str	r3, [sp, #12]
    b020:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    b024:	462a      	mov	r2, r5
    b026:	f7ff f83b 	bl	a0a0 <memcpy>
			tx_available -= size;
    b02a:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    b02c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    b030:	1b5b      	subs	r3, r3, r5
    b032:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    b036:	4b3d      	ldr	r3, [pc, #244]	; (b12c <usb_serial_write.part.0+0x1ac>)
    b038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    b03c:	f3bf 8f4f 	dsb	sy
			sent += size;
    b040:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    b042:	2300      	movs	r3, #0
			sent += size;
    b044:	4428      	add	r0, r5
		tx_noautoflush = 0;
    b046:	7023      	strb	r3, [r4, #0]
}
    b048:	b005      	add	sp, #20
    b04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b04e:	4b36      	ldr	r3, [pc, #216]	; (b128 <usb_serial_write.part.0+0x1a8>)
    b050:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    b052:	9902      	ldr	r1, [sp, #8]
    b054:	f7ff f824 	bl	a0a0 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    b058:	2300      	movs	r3, #0
    b05a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b05e:	4629      	mov	r1, r5
    b060:	4648      	mov	r0, r9
    b062:	f7ff fe47 	bl	acf4 <usb_prepare_transfer>
	asm("dsb");
    b066:	f3bf 8f4f 	dsb	sy
    b06a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    b06e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    b072:	4293      	cmp	r3, r2
    b074:	bf34      	ite	cc
    b076:	2301      	movcc	r3, #1
    b078:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    b07a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b07e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    b082:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    b086:	3520      	adds	r5, #32
	} while (location < end_addr);
    b088:	42ab      	cmp	r3, r5
    b08a:	d1fa      	bne.n	b082 <usb_serial_write.part.0+0x102>
	asm("dsb");
    b08c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b090:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    b094:	2004      	movs	r0, #4
    b096:	4649      	mov	r1, r9
    b098:	f7ff fe44 	bl	ad24 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    b09c:	4a20      	ldr	r2, [pc, #128]	; (b120 <usb_serial_write.part.0+0x1a0>)
    b09e:	7813      	ldrb	r3, [r2, #0]
    b0a0:	3301      	adds	r3, #1
    b0a2:	b2db      	uxtb	r3, r3
    b0a4:	2b03      	cmp	r3, #3
    b0a6:	bf84      	itt	hi
    b0a8:	2300      	movhi	r3, #0
    b0aa:	4a1d      	ldrhi	r2, [pc, #116]	; (b120 <usb_serial_write.part.0+0x1a0>)
    b0ac:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    b0ae:	f8b8 3000 	ldrh.w	r3, [r8]
    b0b2:	9a01      	ldr	r2, [sp, #4]
    b0b4:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    b0b6:	9a00      	ldr	r2, [sp, #0]
    b0b8:	441a      	add	r2, r3
			size -= tx_available;
    b0ba:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    b0bc:	9200      	str	r2, [sp, #0]
			data += tx_available;
    b0be:	9a02      	ldr	r2, [sp, #8]
    b0c0:	441a      	add	r2, r3
			tx_available = 0;
    b0c2:	2300      	movs	r3, #0
			data += tx_available;
    b0c4:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    b0c6:	4a19      	ldr	r2, [pc, #100]	; (b12c <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    b0c8:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    b0cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    b0d0:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    b0d4:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    b0d6:	2900      	cmp	r1, #0
    b0d8:	f47f af62 	bne.w	afa0 <usb_serial_write.part.0+0x20>
	return sent;
    b0dc:	9800      	ldr	r0, [sp, #0]
}
    b0de:	b005      	add	sp, #20
    b0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    b0e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b0e8:	4b0d      	ldr	r3, [pc, #52]	; (b120 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    b0ea:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b0ee:	7819      	ldrb	r1, [r3, #0]
				break;
    b0f0:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    b0f2:	f8a8 2000 	strh.w	r2, [r8]
				break;
    b0f6:	e78a      	b.n	b00e <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    b0f8:	2301      	movs	r3, #1
				return sent;
    b0fa:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    b0fc:	f88a 3000 	strb.w	r3, [sl]
}
    b100:	b005      	add	sp, #20
    b102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    b106:	461a      	mov	r2, r3
    b108:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    b10c:	e77f      	b.n	b00e <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    b10e:	9801      	ldr	r0, [sp, #4]
	return sent;
    b110:	e7e5      	b.n	b0de <usb_serial_write.part.0+0x15e>
    b112:	bf00      	nop
    b114:	200188ad 	.word	0x200188ad
    b118:	2001886c 	.word	0x2001886c
    b11c:	20005000 	.word	0x20005000
    b120:	200188ac 	.word	0x200188ac
    b124:	200188af 	.word	0x200188af
    b128:	20201080 	.word	0x20201080
    b12c:	402e0000 	.word	0x402e0000
    b130:	20018890 	.word	0x20018890
    b134:	200188ab 	.word	0x200188ab

0000b138 <usb_serial_reset>:
}
    b138:	4770      	bx	lr
    b13a:	bf00      	nop

0000b13c <usb_serial_configure>:
	if (usb_high_speed) {
    b13c:	4b2a      	ldr	r3, [pc, #168]	; (b1e8 <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b13e:	2100      	movs	r1, #0
    b140:	2280      	movs	r2, #128	; 0x80
    b142:	482a      	ldr	r0, [pc, #168]	; (b1ec <usb_serial_configure+0xb0>)
{
    b144:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    b146:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    b148:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    b14a:	4d29      	ldr	r5, [pc, #164]	; (b1f0 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    b14c:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    b14e:	4e29      	ldr	r6, [pc, #164]	; (b1f4 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    b150:	bf0c      	ite	eq
    b152:	2340      	moveq	r3, #64	; 0x40
    b154:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    b158:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    b15a:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    b15c:	f001 fd48 	bl	cbf0 <memset>
	tx_head = 0;
    b160:	4a25      	ldr	r2, [pc, #148]	; (b1f8 <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b162:	4621      	mov	r1, r4
	tx_available = 0;
    b164:	4b25      	ldr	r3, [pc, #148]	; (b1fc <usb_serial_configure+0xc0>)
	tx_head = 0;
    b166:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b168:	f44f 7280 	mov.w	r2, #256	; 0x100
    b16c:	4824      	ldr	r0, [pc, #144]	; (b200 <usb_serial_configure+0xc4>)
	tx_available = 0;
    b16e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    b170:	f001 fd3e 	bl	cbf0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    b174:	4a23      	ldr	r2, [pc, #140]	; (b204 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b176:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    b178:	4b23      	ldr	r3, [pc, #140]	; (b208 <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b17a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    b17c:	e9c2 4400 	strd	r4, r4, [r2]
    b180:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    b184:	4a21      	ldr	r2, [pc, #132]	; (b20c <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    b186:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    b18a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    b18c:	4a20      	ldr	r2, [pc, #128]	; (b210 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    b18e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    b192:	4b20      	ldr	r3, [pc, #128]	; (b214 <usb_serial_configure+0xd8>)
    b194:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b196:	4623      	mov	r3, r4
	rx_available = 0;
    b198:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    b19a:	4622      	mov	r2, r4
    b19c:	f7ff fd78 	bl	ac90 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    b1a0:	4622      	mov	r2, r4
    b1a2:	8831      	ldrh	r1, [r6, #0]
    b1a4:	2003      	movs	r0, #3
    b1a6:	4b1c      	ldr	r3, [pc, #112]	; (b218 <usb_serial_configure+0xdc>)
    b1a8:	f7ff fd40 	bl	ac2c <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    b1ac:	4623      	mov	r3, r4
    b1ae:	2201      	movs	r2, #1
    b1b0:	8829      	ldrh	r1, [r5, #0]
    b1b2:	2004      	movs	r0, #4
    b1b4:	f7ff fd6c 	bl	ac90 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b1b8:	4620      	mov	r0, r4
    b1ba:	3401      	adds	r4, #1
    b1bc:	f7ff fe0e 	bl	addc <rx_queue_transfer>
    b1c0:	2c08      	cmp	r4, #8
    b1c2:	d1f9      	bne.n	b1b8 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    b1c4:	4b15      	ldr	r3, [pc, #84]	; (b21c <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    b1c6:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    b1c8:	4815      	ldr	r0, [pc, #84]	; (b220 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    b1ca:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    b1cc:	4c15      	ldr	r4, [pc, #84]	; (b224 <usb_serial_configure+0xe8>)
    b1ce:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    b1d0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    b1d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    b1d8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    b1dc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    b1e0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    b1e4:	bd70      	pop	{r4, r5, r6, pc}
    b1e6:	bf00      	nop
    b1e8:	200188b0 	.word	0x200188b0
    b1ec:	20005000 	.word	0x20005000
    b1f0:	20018892 	.word	0x20018892
    b1f4:	2001888e 	.word	0x2001888e
    b1f8:	200188ac 	.word	0x200188ac
    b1fc:	20018890 	.word	0x20018890
    b200:	20004f00 	.word	0x20004f00
    b204:	20018828 	.word	0x20018828
    b208:	20018838 	.word	0x20018838
    b20c:	200188a8 	.word	0x200188a8
    b210:	20018824 	.word	0x20018824
    b214:	200188a9 	.word	0x200188a9
    b218:	0000ae3d 	.word	0x0000ae3d
    b21c:	402e0000 	.word	0x402e0000
    b220:	20018880 	.word	0x20018880
    b224:	0000aef1 	.word	0x0000aef1

0000b228 <usb_serial_read>:
{
    b228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b22c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b230:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    b234:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b300 <usb_serial_read+0xd8>
{
    b238:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    b23a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    b23e:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    b240:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    b244:	2900      	cmp	r1, #0
    b246:	d04f      	beq.n	b2e8 <usb_serial_read+0xc0>
    b248:	4680      	mov	r8, r0
    b24a:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    b24c:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    b24e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; b304 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    b252:	4b26      	ldr	r3, [pc, #152]	; (b2ec <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    b254:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b258:	4925      	ldr	r1, [pc, #148]	; (b2f0 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    b25a:	781b      	ldrb	r3, [r3, #0]
    b25c:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    b25e:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    b262:	d03f      	beq.n	b2e4 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    b264:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    b266:	4b23      	ldr	r3, [pc, #140]	; (b2f4 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b268:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    b26a:	bf28      	it	cs
    b26c:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    b26e:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    b270:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b274:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    b278:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    b27a:	4b1f      	ldr	r3, [pc, #124]	; (b2f8 <usb_serial_read+0xd0>)
    b27c:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    b280:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    b284:	42aa      	cmp	r2, r5
    b286:	d21c      	bcs.n	b2c2 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    b288:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    b28c:	4918      	ldr	r1, [pc, #96]	; (b2f0 <usb_serial_read+0xc8>)
			rx_available -= len;
    b28e:	4c1b      	ldr	r4, [pc, #108]	; (b2fc <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    b290:	4461      	add	r1, ip
    b292:	9201      	str	r2, [sp, #4]
    b294:	f7fe ff04 	bl	a0a0 <memcpy>
			rx_available -= len;
    b298:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    b29a:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    b29e:	4658      	mov	r0, fp
			rx_index[i] += len;
    b2a0:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    b2a2:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    b2a6:	442a      	add	r2, r5
			rx_available -= len;
    b2a8:	4439      	add	r1, r7
			rx_index[i] += len;
    b2aa:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    b2ae:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    b2b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b2b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    b2b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    b2bc:	b003      	add	sp, #12
    b2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b2c2:	462a      	mov	r2, r5
			count += avail;
    b2c4:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    b2c6:	f7fe feeb 	bl	a0a0 <memcpy>
			rx_available -= avail;
    b2ca:	490c      	ldr	r1, [pc, #48]	; (b2fc <usb_serial_read+0xd4>)
			rx_tail = tail;
    b2cc:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    b2ce:	4630      	mov	r0, r6
			rx_available -= avail;
    b2d0:	680a      	ldr	r2, [r1, #0]
			p += avail;
    b2d2:	44a8      	add	r8, r5
			rx_available -= avail;
    b2d4:	1b52      	subs	r2, r2, r5
    b2d6:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    b2d8:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    b2dc:	f7ff fd7e 	bl	addc <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    b2e0:	45bb      	cmp	fp, r7
    b2e2:	d8b6      	bhi.n	b252 <usb_serial_read+0x2a>
	return count;
    b2e4:	4638      	mov	r0, r7
    b2e6:	e7e3      	b.n	b2b0 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    b2e8:	4608      	mov	r0, r1
    b2ea:	e7e1      	b.n	b2b0 <usb_serial_read+0x88>
    b2ec:	200188a8 	.word	0x200188a8
    b2f0:	20200080 	.word	0x20200080
    b2f4:	20018848 	.word	0x20018848
    b2f8:	20018828 	.word	0x20018828
    b2fc:	20018824 	.word	0x20018824
    b300:	200188a9 	.word	0x200188a9
    b304:	20018838 	.word	0x20018838

0000b308 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    b308:	4b0b      	ldr	r3, [pc, #44]	; (b338 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    b30a:	4a0c      	ldr	r2, [pc, #48]	; (b33c <usb_serial_peekchar+0x34>)
    b30c:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    b30e:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    b310:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    b312:	428a      	cmp	r2, r1
    b314:	d00d      	beq.n	b332 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    b316:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    b318:	4809      	ldr	r0, [pc, #36]	; (b340 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b31a:	4a0a      	ldr	r2, [pc, #40]	; (b344 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    b31c:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b31e:	490a      	ldr	r1, [pc, #40]	; (b348 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    b320:	bf28      	it	cs
    b322:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    b324:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    b326:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    b32a:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    b32e:	5c58      	ldrb	r0, [r3, r1]
    b330:	4770      	bx	lr
	if (tail == rx_head) return -1;
    b332:	f04f 30ff 	mov.w	r0, #4294967295
}
    b336:	4770      	bx	lr
    b338:	200188a8 	.word	0x200188a8
    b33c:	200188a9 	.word	0x200188a9
    b340:	20018848 	.word	0x20018848
    b344:	20200080 	.word	0x20200080
    b348:	20018838 	.word	0x20018838

0000b34c <usb_serial_available>:
	uint32_t n = rx_available;
    b34c:	4b04      	ldr	r3, [pc, #16]	; (b360 <usb_serial_available+0x14>)
{
    b34e:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    b350:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    b352:	b10c      	cbz	r4, b358 <usb_serial_available+0xc>
}
    b354:	4620      	mov	r0, r4
    b356:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    b358:	f000 f8e0 	bl	b51c <yield>
}
    b35c:	4620      	mov	r0, r4
    b35e:	bd10      	pop	{r4, pc}
    b360:	20018824 	.word	0x20018824

0000b364 <usb_serial_flush_input>:
{
    b364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    b368:	4e14      	ldr	r6, [pc, #80]	; (b3bc <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    b36a:	4d15      	ldr	r5, [pc, #84]	; (b3c0 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    b36c:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    b36e:	782a      	ldrb	r2, [r5, #0]
    b370:	4293      	cmp	r3, r2
    b372:	d021      	beq.n	b3b8 <usb_serial_flush_input+0x54>
    b374:	b2dc      	uxtb	r4, r3
    b376:	f8df 9050 	ldr.w	r9, [pc, #80]	; b3c8 <usb_serial_flush_input+0x64>
    b37a:	f8df b050 	ldr.w	fp, [pc, #80]	; b3cc <usb_serial_flush_input+0x68>
    b37e:	f8df 8050 	ldr.w	r8, [pc, #80]	; b3d0 <usb_serial_flush_input+0x6c>
    b382:	4f10      	ldr	r7, [pc, #64]	; (b3c4 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    b384:	3401      	adds	r4, #1
    b386:	2c08      	cmp	r4, #8
		rx_tail = tail;
    b388:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    b38c:	d901      	bls.n	b392 <usb_serial_flush_input+0x2e>
    b38e:	2400      	movs	r4, #0
    b390:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    b392:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    b396:	f8db 3000 	ldr.w	r3, [fp]
    b39a:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    b39e:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    b3a2:	1a52      	subs	r2, r2, r1
    b3a4:	1a9b      	subs	r3, r3, r2
    b3a6:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    b3aa:	f7ff fd17 	bl	addc <rx_queue_transfer>
		rx_tail = tail;
    b3ae:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    b3b2:	782b      	ldrb	r3, [r5, #0]
    b3b4:	42a3      	cmp	r3, r4
    b3b6:	d1e5      	bne.n	b384 <usb_serial_flush_input+0x20>
}
    b3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3bc:	200188a9 	.word	0x200188a9
    b3c0:	200188a8 	.word	0x200188a8
    b3c4:	20018838 	.word	0x20018838
    b3c8:	20018848 	.word	0x20018848
    b3cc:	20018824 	.word	0x20018824
    b3d0:	20018828 	.word	0x20018828

0000b3d4 <usb_serial_getchar>:
{
    b3d4:	b500      	push	{lr}
    b3d6:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    b3d8:	2101      	movs	r1, #1
    b3da:	f10d 0007 	add.w	r0, sp, #7
    b3de:	f7ff ff23 	bl	b228 <usb_serial_read>
    b3e2:	b120      	cbz	r0, b3ee <usb_serial_getchar+0x1a>
    b3e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    b3e8:	b003      	add	sp, #12
    b3ea:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    b3ee:	f04f 30ff 	mov.w	r0, #4294967295
    b3f2:	e7f9      	b.n	b3e8 <usb_serial_getchar+0x14>

0000b3f4 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    b3f4:	4b09      	ldr	r3, [pc, #36]	; (b41c <usb_serial_putchar+0x28>)
{
    b3f6:	b500      	push	{lr}
    b3f8:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    b3fa:	781b      	ldrb	r3, [r3, #0]
{
    b3fc:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    b400:	b13b      	cbz	r3, b412 <usb_serial_putchar+0x1e>
    b402:	2101      	movs	r1, #1
    b404:	f10d 0007 	add.w	r0, sp, #7
    b408:	f7ff fdba 	bl	af80 <usb_serial_write.part.0>
}
    b40c:	b003      	add	sp, #12
    b40e:	f85d fb04 	ldr.w	pc, [sp], #4
    b412:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    b416:	b003      	add	sp, #12
    b418:	f85d fb04 	ldr.w	pc, [sp], #4
    b41c:	200188af 	.word	0x200188af

0000b420 <usb_serial_write>:
	if (!usb_configuration) return 0;
    b420:	4b04      	ldr	r3, [pc, #16]	; (b434 <usb_serial_write+0x14>)
    b422:	781b      	ldrb	r3, [r3, #0]
    b424:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    b428:	b10b      	cbz	r3, b42e <usb_serial_write+0xe>
    b42a:	f7ff bda9 	b.w	af80 <usb_serial_write.part.0>
}
    b42e:	4610      	mov	r0, r2
    b430:	4770      	bx	lr
    b432:	bf00      	nop
    b434:	200188af 	.word	0x200188af

0000b438 <usb_serial_write_buffer_free>:
{
    b438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    b43c:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    b43e:	f8df 8044 	ldr.w	r8, [pc, #68]	; b484 <usb_serial_write_buffer_free+0x4c>
    b442:	2301      	movs	r3, #1
    b444:	4d0d      	ldr	r5, [pc, #52]	; (b47c <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    b446:	4627      	mov	r7, r4
    b448:	4e0d      	ldr	r6, [pc, #52]	; (b480 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    b44a:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    b44e:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b450:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    b452:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    b454:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    b456:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    b45a:	d005      	beq.n	b468 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b45c:	f7ff fc84 	bl	ad68 <usb_transfer_status>
    b460:	0603      	lsls	r3, r0, #24
    b462:	bf58      	it	pl
    b464:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    b468:	2c04      	cmp	r4, #4
    b46a:	d1f0      	bne.n	b44e <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    b46c:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    b470:	2300      	movs	r3, #0
}
    b472:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    b474:	f888 3000 	strb.w	r3, [r8]
}
    b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b47c:	20005000 	.word	0x20005000
    b480:	200188ac 	.word	0x200188ac
    b484:	200188ad 	.word	0x200188ad

0000b488 <usb_serial_flush_output>:
{
    b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    b48c:	4b1d      	ldr	r3, [pc, #116]	; (b504 <usb_serial_flush_output+0x7c>)
    b48e:	781b      	ldrb	r3, [r3, #0]
    b490:	b113      	cbz	r3, b498 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    b492:	4d1d      	ldr	r5, [pc, #116]	; (b508 <usb_serial_flush_output+0x80>)
    b494:	882a      	ldrh	r2, [r5, #0]
    b496:	b90a      	cbnz	r2, b49c <usb_serial_flush_output+0x14>
}
    b498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    b49c:	4e1b      	ldr	r6, [pc, #108]	; (b50c <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    b49e:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    b4a2:	491b      	ldr	r1, [pc, #108]	; (b510 <usb_serial_flush_output+0x88>)
    b4a4:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b4a6:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b4a8:	4c1a      	ldr	r4, [pc, #104]	; (b514 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    b4aa:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    b4ae:	4f1a      	ldr	r7, [pc, #104]	; (b518 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b4b0:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    b4b4:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b4b6:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    b4b8:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b4ba:	4621      	mov	r1, r4
    b4bc:	2300      	movs	r3, #0
    b4be:	f7ff fc19 	bl	acf4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    b4c2:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    b4c6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b4ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b4ce:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    b4d2:	3420      	adds	r4, #32
	} while (location < end_addr);
    b4d4:	42a2      	cmp	r2, r4
    b4d6:	d8fa      	bhi.n	b4ce <usb_serial_flush_output+0x46>
	asm("dsb");
    b4d8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    b4dc:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    b4e0:	2004      	movs	r0, #4
    b4e2:	4641      	mov	r1, r8
    b4e4:	f7ff fc1e 	bl	ad24 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b4e8:	7833      	ldrb	r3, [r6, #0]
    b4ea:	3301      	adds	r3, #1
    b4ec:	b2db      	uxtb	r3, r3
    b4ee:	2b03      	cmp	r3, #3
    b4f0:	bf88      	it	hi
    b4f2:	2300      	movhi	r3, #0
    b4f4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    b4f6:	2300      	movs	r3, #0
    b4f8:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    b4fa:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    b4fe:	703b      	strb	r3, [r7, #0]
}
    b500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b504:	200188af 	.word	0x200188af
    b508:	20018890 	.word	0x20018890
    b50c:	200188ac 	.word	0x200188ac
    b510:	20005000 	.word	0x20005000
    b514:	20201080 	.word	0x20201080
    b518:	200188ad 	.word	0x200188ad

0000b51c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    b520:	4e32      	ldr	r6, [pc, #200]	; (b5ec <yield+0xd0>)
    b522:	7833      	ldrb	r3, [r6, #0]
    b524:	b163      	cbz	r3, b540 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    b526:	4f32      	ldr	r7, [pc, #200]	; (b5f0 <yield+0xd4>)
    b528:	783a      	ldrb	r2, [r7, #0]
    b52a:	b94a      	cbnz	r2, b540 <yield+0x24>
	running = 1;
    b52c:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b52e:	07d9      	lsls	r1, r3, #31
	running = 1;
    b530:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b532:	d444      	bmi.n	b5be <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    b534:	079a      	lsls	r2, r3, #30
    b536:	d426      	bmi.n	b586 <yield+0x6a>

	running = 0;
    b538:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b53a:	075b      	lsls	r3, r3, #29
	running = 0;
    b53c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b53e:	d401      	bmi.n	b544 <yield+0x28>
	
};
    b540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    b544:	4b2b      	ldr	r3, [pc, #172]	; (b5f4 <yield+0xd8>)
    b546:	681a      	ldr	r2, [r3, #0]
    b548:	2a00      	cmp	r2, #0
    b54a:	d0f9      	beq.n	b540 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b54c:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    b550:	2a00      	cmp	r2, #0
    b552:	d1f5      	bne.n	b540 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b554:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    b558:	b672      	cpsid	i
		EventResponder *first = firstYield;
    b55a:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    b55c:	2800      	cmp	r0, #0
    b55e:	d03b      	beq.n	b5d8 <yield+0xbc>
		if (runningFromYield) {
    b560:	4c25      	ldr	r4, [pc, #148]	; (b5f8 <yield+0xdc>)
    b562:	7821      	ldrb	r1, [r4, #0]
    b564:	2900      	cmp	r1, #0
    b566:	d137      	bne.n	b5d8 <yield+0xbc>
		runningFromYield = true;
    b568:	2201      	movs	r2, #1
    b56a:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    b56c:	6942      	ldr	r2, [r0, #20]
    b56e:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    b570:	2a00      	cmp	r2, #0
    b572:	d038      	beq.n	b5e6 <yield+0xca>
			firstYield->_prev = nullptr;
    b574:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b576:	b905      	cbnz	r5, b57a <yield+0x5e>
    b578:	b662      	cpsie	i
		first->_triggered = false;
    b57a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    b57c:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    b57e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    b580:	4798      	blx	r3
		runningFromYield = false;
    b582:	7025      	strb	r5, [r4, #0]
    b584:	e7dc      	b.n	b540 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b586:	f8df 807c 	ldr.w	r8, [pc, #124]	; b604 <yield+0xe8>
    b58a:	f898 2000 	ldrb.w	r2, [r8]
    b58e:	2a00      	cmp	r2, #0
    b590:	d0d2      	beq.n	b538 <yield+0x1c>
    b592:	2500      	movs	r5, #0
    b594:	f8df 9070 	ldr.w	r9, [pc, #112]	; b608 <yield+0xec>
    b598:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    b59a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b59e:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    b5a0:	6823      	ldr	r3, [r4, #0]
    b5a2:	4620      	mov	r0, r4
    b5a4:	691b      	ldr	r3, [r3, #16]
    b5a6:	4798      	blx	r3
    b5a8:	b110      	cbz	r0, b5b0 <yield+0x94>
    b5aa:	6963      	ldr	r3, [r4, #20]
    b5ac:	689b      	ldr	r3, [r3, #8]
    b5ae:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b5b0:	f898 2000 	ldrb.w	r2, [r8]
    b5b4:	b2eb      	uxtb	r3, r5
    b5b6:	429a      	cmp	r2, r3
    b5b8:	d8ef      	bhi.n	b59a <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b5ba:	7833      	ldrb	r3, [r6, #0]
    b5bc:	e7bc      	b.n	b538 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    b5be:	f7ff fec5 	bl	b34c <usb_serial_available>
		if (Serial.available()) serialEvent();
    b5c2:	b968      	cbnz	r0, b5e0 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    b5c4:	4b0d      	ldr	r3, [pc, #52]	; (b5fc <yield+0xe0>)
    b5c6:	781b      	ldrb	r3, [r3, #0]
    b5c8:	b90b      	cbnz	r3, b5ce <yield+0xb2>
    b5ca:	7833      	ldrb	r3, [r6, #0]
    b5cc:	e7b2      	b.n	b534 <yield+0x18>
    b5ce:	7833      	ldrb	r3, [r6, #0]
    b5d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    b5d4:	7033      	strb	r3, [r6, #0]
    b5d6:	e7ad      	b.n	b534 <yield+0x18>
		if (doit) __enable_irq();
    b5d8:	2d00      	cmp	r5, #0
    b5da:	d1b1      	bne.n	b540 <yield+0x24>
    b5dc:	b662      	cpsie	i
    b5de:	e7af      	b.n	b540 <yield+0x24>
		if (Serial.available()) serialEvent();
    b5e0:	f000 fa8a 	bl	baf8 <serialEvent()>
    b5e4:	e7ee      	b.n	b5c4 <yield+0xa8>
			lastYield = nullptr;
    b5e6:	4b06      	ldr	r3, [pc, #24]	; (b600 <yield+0xe4>)
    b5e8:	601a      	str	r2, [r3, #0]
    b5ea:	e7c4      	b.n	b576 <yield+0x5a>
    b5ec:	2000496a 	.word	0x2000496a
    b5f0:	20018896 	.word	0x20018896
    b5f4:	20005088 	.word	0x20005088
    b5f8:	20018894 	.word	0x20018894
    b5fc:	60001f58 	.word	0x60001f58
    b600:	20005094 	.word	0x20005094
    b604:	20018895 	.word	0x20018895
    b608:	20005098 	.word	0x20005098

0000b60c <EventResponder::runFromInterrupt()>:
{
    b60c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b60e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    b612:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    b614:	4c0c      	ldr	r4, [pc, #48]	; (b648 <EventResponder::runFromInterrupt()+0x3c>)
    b616:	6820      	ldr	r0, [r4, #0]
		if (first) {
    b618:	b180      	cbz	r0, b63c <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    b61a:	4e0c      	ldr	r6, [pc, #48]	; (b64c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    b61c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    b61e:	6943      	ldr	r3, [r0, #20]
    b620:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    b622:	b173      	cbz	r3, b642 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    b624:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    b626:	b902      	cbnz	r2, b62a <EventResponder::runFromInterrupt()+0x1e>
    b628:	b662      	cpsie	i
			(*(first->_function))(*first);
    b62a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    b62c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    b62e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b630:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    b634:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    b636:	6820      	ldr	r0, [r4, #0]
		if (first) {
    b638:	2800      	cmp	r0, #0
    b63a:	d1f0      	bne.n	b61e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    b63c:	b902      	cbnz	r2, b640 <EventResponder::runFromInterrupt()+0x34>
    b63e:	b662      	cpsie	i
}
    b640:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    b642:	6033      	str	r3, [r6, #0]
    b644:	e7ef      	b.n	b626 <EventResponder::runFromInterrupt()+0x1a>
    b646:	bf00      	nop
    b648:	20005090 	.word	0x20005090
    b64c:	2000508c 	.word	0x2000508c

0000b650 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    b650:	f7ff bfdc 	b.w	b60c <EventResponder::runFromInterrupt()>

0000b654 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b654:	4904      	ldr	r1, [pc, #16]	; (b668 <systick_isr+0x14>)
	systick_millis_count++;
    b656:	4a05      	ldr	r2, [pc, #20]	; (b66c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    b658:	6849      	ldr	r1, [r1, #4]
    b65a:	4b05      	ldr	r3, [pc, #20]	; (b670 <systick_isr+0x1c>)
    b65c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    b65e:	6813      	ldr	r3, [r2, #0]
    b660:	3301      	adds	r3, #1
    b662:	6013      	str	r3, [r2, #0]
}
    b664:	4770      	bx	lr
    b666:	bf00      	nop
    b668:	e0001000 	.word	0xe0001000
    b66c:	2001886c 	.word	0x2001886c
    b670:	20018868 	.word	0x20018868

0000b674 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b674:	49a2      	ldr	r1, [pc, #648]	; (b900 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b676:	4ba3      	ldr	r3, [pc, #652]	; (b904 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    b678:	4288      	cmp	r0, r1
{
    b67a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    b67e:	4ca2      	ldr	r4, [pc, #648]	; (b908 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b680:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    b682:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    b684:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    b688:	d91b      	bls.n	b6c2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    b68a:	4ba0      	ldr	r3, [pc, #640]	; (b90c <set_arm_clock+0x298>)
    b68c:	4298      	cmp	r0, r3
    b68e:	f240 8102 	bls.w	b896 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b692:	1ac3      	subs	r3, r0, r3
    b694:	499e      	ldr	r1, [pc, #632]	; (b910 <set_arm_clock+0x29c>)
    b696:	0a1b      	lsrs	r3, r3, #8
    b698:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b69c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b6a0:	09db      	lsrs	r3, r3, #7
    b6a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b6a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b6aa:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b6ae:	428b      	cmp	r3, r1
    b6b0:	bf28      	it	cs
    b6b2:	460b      	movcs	r3, r1
    b6b4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    b6b8:	4b96      	ldr	r3, [pc, #600]	; (b914 <set_arm_clock+0x2a0>)
    b6ba:	fba3 3707 	umull	r3, r7, r3, r7
    b6be:	08ff      	lsrs	r7, r7, #3
    b6c0:	e004      	b.n	b6cc <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    b6c2:	4f95      	ldr	r7, [pc, #596]	; (b918 <set_arm_clock+0x2a4>)
    b6c4:	42b8      	cmp	r0, r7
    b6c6:	bf8c      	ite	hi
    b6c8:	270e      	movhi	r7, #14
    b6ca:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b6cc:	498d      	ldr	r1, [pc, #564]	; (b904 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b6ce:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b6d2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b6d6:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b6d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b6dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b6e0:	d20c      	bcs.n	b6fc <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b6e2:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b6e6:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b6ea:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    b6ee:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b6f2:	680b      	ldr	r3, [r1, #0]
    b6f4:	2b00      	cmp	r3, #0
    b6f6:	dafc      	bge.n	b6f2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b6f8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    b6fc:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    b700:	d124      	bne.n	b74c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    b702:	4986      	ldr	r1, [pc, #536]	; (b91c <set_arm_clock+0x2a8>)
    b704:	690c      	ldr	r4, [r1, #16]
    b706:	4986      	ldr	r1, [pc, #536]	; (b920 <set_arm_clock+0x2ac>)
    b708:	43a1      	bics	r1, r4
    b70a:	f000 80ea 	beq.w	b8e2 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b70e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    b712:	4634      	mov	r4, r6
    b714:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b718:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    b71c:	d004      	beq.n	b728 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    b71e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b722:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    b724:	4b77      	ldr	r3, [pc, #476]	; (b904 <set_arm_clock+0x290>)
    b726:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b728:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    b72c:	d007      	beq.n	b73e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    b72e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    b732:	4974      	ldr	r1, [pc, #464]	; (b904 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    b734:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    b736:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b738:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    b73a:	071a      	lsls	r2, r3, #28
    b73c:	d4fc      	bmi.n	b738 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    b73e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    b742:	4a70      	ldr	r2, [pc, #448]	; (b904 <set_arm_clock+0x290>)
    b744:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b746:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b748:	069b      	lsls	r3, r3, #26
    b74a:	d4fc      	bmi.n	b746 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    b74c:	4c75      	ldr	r4, [pc, #468]	; (b924 <set_arm_clock+0x2b0>)
    b74e:	42a0      	cmp	r0, r4
    b750:	f200 80ce 	bhi.w	b8f0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    b754:	f04f 0c01 	mov.w	ip, #1
    b758:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    b75a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    b75c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    b760:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    b764:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b768:	42a2      	cmp	r2, r4
    b76a:	d818      	bhi.n	b79e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    b76c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    b770:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    b774:	f040 808d 	bne.w	b892 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    b778:	f1bc 0f04 	cmp.w	ip, #4
    b77c:	f200 8091 	bhi.w	b8a2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    b780:	180a      	adds	r2, r1, r0
    b782:	42a2      	cmp	r2, r4
    b784:	f200 80a4 	bhi.w	b8d0 <set_arm_clock+0x25c>
    b788:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    b78c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    b78e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b792:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    b796:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b79a:	42a2      	cmp	r2, r4
    b79c:	d9e6      	bls.n	b76c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b79e:	f10c 31ff 	add.w	r1, ip, #4294967295
    b7a2:	028c      	lsls	r4, r1, #10
    b7a4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b7a8:	485f      	ldr	r0, [pc, #380]	; (b928 <set_arm_clock+0x2b4>)
    b7aa:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    b7ac:	4a5f      	ldr	r2, [pc, #380]	; (b92c <set_arm_clock+0x2b8>)
    b7ae:	4290      	cmp	r0, r2
    b7b0:	d97f      	bls.n	b8b2 <set_arm_clock+0x23e>
    b7b2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; b958 <set_arm_clock+0x2e4>
    b7b6:	226c      	movs	r2, #108	; 0x6c
    b7b8:	485d      	ldr	r0, [pc, #372]	; (b930 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b7ba:	4d58      	ldr	r5, [pc, #352]	; (b91c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    b7bc:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b7c0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    b7c4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b7c8:	f8df c190 	ldr.w	ip, [pc, #400]	; b95c <set_arm_clock+0x2e8>
    b7cc:	ea0e 0c0c 	and.w	ip, lr, ip
    b7d0:	45d4      	cmp	ip, sl
    b7d2:	d009      	beq.n	b7e8 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b7d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b7d8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    b7dc:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b7e0:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b7e2:	682a      	ldr	r2, [r5, #0]
    b7e4:	2a00      	cmp	r2, #0
    b7e6:	dafc      	bge.n	b7e2 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b7e8:	4a46      	ldr	r2, [pc, #280]	; (b904 <set_arm_clock+0x290>)
    b7ea:	6915      	ldr	r5, [r2, #16]
    b7ec:	f005 0507 	and.w	r5, r5, #7
    b7f0:	429d      	cmp	r5, r3
    b7f2:	d003      	beq.n	b7fc <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b7f4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b7f6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b7f8:	03dd      	lsls	r5, r3, #15
    b7fa:	d4fc      	bmi.n	b7f6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b7fc:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    b800:	d009      	beq.n	b816 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b802:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b806:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    b80a:	4a3e      	ldr	r2, [pc, #248]	; (b904 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b80c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    b80e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b810:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b812:	0799      	lsls	r1, r3, #30
    b814:	d4fc      	bmi.n	b810 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b816:	4947      	ldr	r1, [pc, #284]	; (b934 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    b818:	4a47      	ldr	r2, [pc, #284]	; (b938 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b81a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    b81c:	4291      	cmp	r1, r2
    b81e:	d83c      	bhi.n	b89a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b820:	4b46      	ldr	r3, [pc, #280]	; (b93c <set_arm_clock+0x2c8>)
    b822:	09c9      	lsrs	r1, r1, #7
    b824:	fba3 3101 	umull	r3, r1, r3, r1
    b828:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b82a:	1e4b      	subs	r3, r1, #1
    b82c:	021b      	lsls	r3, r3, #8
    b82e:	ea86 0203 	eor.w	r2, r6, r3
    b832:	f412 7f40 	tst.w	r2, #768	; 0x300
    b836:	d006      	beq.n	b846 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    b838:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b83c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    b840:	4a30      	ldr	r2, [pc, #192]	; (b904 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b842:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    b844:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b846:	4a2f      	ldr	r2, [pc, #188]	; (b904 <set_arm_clock+0x290>)
    b848:	6953      	ldr	r3, [r2, #20]
    b84a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    b84e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b850:	6c93      	ldr	r3, [r2, #72]	; 0x48
    b852:	069b      	lsls	r3, r3, #26
    b854:	d4fc      	bmi.n	b850 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b856:	4b3a      	ldr	r3, [pc, #232]	; (b940 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b858:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b85a:	fba3 2300 	umull	r2, r3, r3, r0
    b85e:	f04f 32ff 	mov.w	r2, #4294967295
    b862:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    b866:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b86a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    b86e:	4a35      	ldr	r2, [pc, #212]	; (b944 <set_arm_clock+0x2d0>)
    b870:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    b872:	4a35      	ldr	r2, [pc, #212]	; (b948 <set_arm_clock+0x2d4>)
    b874:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b876:	4a35      	ldr	r2, [pc, #212]	; (b94c <set_arm_clock+0x2d8>)
    b878:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b87a:	d208      	bcs.n	b88e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b87c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b880:	4a21      	ldr	r2, [pc, #132]	; (b908 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b882:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    b886:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b888:	6813      	ldr	r3, [r2, #0]
    b88a:	2b00      	cmp	r3, #0
    b88c:	dafc      	bge.n	b888 <set_arm_clock+0x214>
	}

	return frequency;
}
    b88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b892:	4673      	mov	r3, lr
    b894:	e762      	b.n	b75c <set_arm_clock+0xe8>
    b896:	2712      	movs	r7, #18
    b898:	e718      	b.n	b6cc <set_arm_clock+0x58>
    b89a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    b89e:	2104      	movs	r1, #4
    b8a0:	e7c5      	b.n	b82e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b8a2:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b8a6:	4820      	ldr	r0, [pc, #128]	; (b928 <set_arm_clock+0x2b4>)
    b8a8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b8aa:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b8ac:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b8ae:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b8b2:	4a27      	ldr	r2, [pc, #156]	; (b950 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b8b4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; b960 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b8b8:	fba2 2000 	umull	r2, r0, r2, r0
    b8bc:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    b8be:	4825      	ldr	r0, [pc, #148]	; (b954 <set_arm_clock+0x2e0>)
    b8c0:	2a36      	cmp	r2, #54	; 0x36
    b8c2:	bf38      	it	cc
    b8c4:	2236      	movcc	r2, #54	; 0x36
    b8c6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b8ca:	ea42 0a0a 	orr.w	sl, r2, sl
    b8ce:	e774      	b.n	b7ba <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b8d0:	ea4f 248c 	mov.w	r4, ip, lsl #10
    b8d4:	2300      	movs	r3, #0
    b8d6:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    b8da:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    b8de:	46ac      	mov	ip, r5
    b8e0:	e762      	b.n	b7a8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b8e2:	461d      	mov	r5, r3
    b8e4:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    b8e8:	4611      	mov	r1, r2
    b8ea:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    b8ee:	e713      	b.n	b718 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    b8f0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    b8f2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b8f6:	4602      	mov	r2, r0
    b8f8:	4631      	mov	r1, r6
    b8fa:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    b8fc:	46e6      	mov	lr, ip
    b8fe:	e753      	b.n	b7a8 <set_arm_clock+0x134>
    b900:	1f78a400 	.word	0x1f78a400
    b904:	400fc000 	.word	0x400fc000
    b908:	40080000 	.word	0x40080000
    b90c:	23c34600 	.word	0x23c34600
    b910:	004cb223 	.word	0x004cb223
    b914:	51eb851f 	.word	0x51eb851f
    b918:	016e3600 	.word	0x016e3600
    b91c:	400d8000 	.word	0x400d8000
    b920:	80003040 	.word	0x80003040
    b924:	269fb1ff 	.word	0x269fb1ff
    b928:	005b8d80 	.word	0x005b8d80
    b92c:	4df67eff 	.word	0x4df67eff
    b930:	4d3f6400 	.word	0x4d3f6400
    b934:	08f0d17f 	.word	0x08f0d17f
    b938:	2cb4177f 	.word	0x2cb4177f
    b93c:	00e5109f 	.word	0x00e5109f
    b940:	431bde83 	.word	0x431bde83
    b944:	20004354 	.word	0x20004354
    b948:	20004350 	.word	0x20004350
    b94c:	20018864 	.word	0x20018864
    b950:	165e9f81 	.word	0x165e9f81
    b954:	00b71b00 	.word	0x00b71b00
    b958:	8000206c 	.word	0x8000206c
    b95c:	8001307f 	.word	0x8001307f
    b960:	80002000 	.word	0x80002000

0000b964 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    b964:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    b966:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    b968:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    b96c:	4619      	mov	r1, r3
{
    b96e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b970:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b974:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    b978:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b97c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    b980:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    b984:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    b986:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    b98a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b98e:	b29b      	uxth	r3, r3
    b990:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    b994:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b998:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    b99c:	3101      	adds	r1, #1
    b99e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    b9a2:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    b9a4:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    b9a6:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    b9aa:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    b9ac:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    b9ae:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    b9b0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    b9b2:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    b9b6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    b9b8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    b9ba:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    b9bc:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    b9be:	d1eb      	bne.n	b998 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    b9c0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b9c4:	b29b      	uxth	r3, r3
    b9c6:	f043 030f 	orr.w	r3, r3, #15
    b9ca:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    b9ce:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    b9d2:	b29b      	uxth	r3, r3
    b9d4:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    b9d8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    b9dc:	bd10      	pop	{r4, pc}
    b9de:	bf00      	nop

0000b9e0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b9e0:	4b37      	ldr	r3, [pc, #220]	; (bac0 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b9e2:	4a38      	ldr	r2, [pc, #224]	; (bac4 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b9e4:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    b9e6:	4838      	ldr	r0, [pc, #224]	; (bac8 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b9e8:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    b9ec:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    b9ee:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    b9f0:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    b9f4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    b9f8:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    b9fc:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    ba00:	430a      	orrs	r2, r1
    ba02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    ba06:	f7ff ffad 	bl	b964 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    ba0a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    ba0e:	f7ff ffa9 	bl	b964 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    ba12:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    ba16:	f7ff ffa5 	bl	b964 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    ba1a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    ba1e:	f7ff ffa1 	bl	b964 <flexpwm_init>
	for (i=0; i < 4; i++) {
    ba22:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ba24:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba28:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    ba2c:	4611      	mov	r1, r2
    ba2e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    ba32:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ba36:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ba38:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ba3a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ba3c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba3e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba42:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba44:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ba46:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ba4a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba4c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ba4e:	d1ee      	bne.n	ba2e <pwm_init+0x4e>
    ba50:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ba52:	481e      	ldr	r0, [pc, #120]	; (bacc <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba54:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba58:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    ba5c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba5e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba62:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ba66:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    ba6a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    ba6e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ba70:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ba72:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ba74:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba76:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba7a:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba7c:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ba7e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    ba82:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba84:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ba86:	d1ee      	bne.n	ba66 <pwm_init+0x86>
    ba88:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    ba8a:	4811      	ldr	r0, [pc, #68]	; (bad0 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ba8c:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ba8e:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    ba92:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ba94:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ba98:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ba9c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    baa0:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    baa4:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    baa6:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    baa8:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    baaa:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    baac:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    baae:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bab0:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bab2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    bab6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bab8:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    babc:	d1ee      	bne.n	ba9c <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    babe:	bd70      	pop	{r4, r5, r6, pc}
    bac0:	400fc000 	.word	0x400fc000
    bac4:	fc030000 	.word	0xfc030000
    bac8:	403dc000 	.word	0x403dc000
    bacc:	401e0000 	.word	0x401e0000
    bad0:	401e4000 	.word	0x401e4000

0000bad4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    bad4:	4a07      	ldr	r2, [pc, #28]	; (baf4 <rtc_get+0x20>)
    bad6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    bad8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    bada:	4619      	mov	r1, r3
    badc:	4684      	mov	ip, r0
    bade:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    bae0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    bae2:	4299      	cmp	r1, r3
    bae4:	d1f9      	bne.n	bada <rtc_get+0x6>
    bae6:	4584      	cmp	ip, r0
    bae8:	d1f7      	bne.n	bada <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    baea:	0bdb      	lsrs	r3, r3, #15
}
    baec:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    baf0:	4770      	bx	lr
    baf2:	bf00      	nop
    baf4:	400d4000 	.word	0x400d4000

0000baf8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    baf8:	4770      	bx	lr
    bafa:	bf00      	nop

0000bafc <sm_align_pool>:
{
    bafc:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    bafe:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    bb02:	b15b      	cbz	r3, bb1c <sm_align_pool+0x20>
    bb04:	b1ba      	cbz	r2, bb36 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    bb06:	4b0f      	ldr	r3, [pc, #60]	; (bb44 <sm_align_pool+0x48>)
    bb08:	fba3 1302 	umull	r1, r3, r3, r2
    bb0c:	08db      	lsrs	r3, r3, #3
    bb0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bb12:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    bb16:	d10a      	bne.n	bb2e <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    bb18:	2001      	movs	r0, #1
}
    bb1a:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    bb1c:	4b09      	ldr	r3, [pc, #36]	; (bb44 <sm_align_pool+0x48>)
    bb1e:	fba3 1302 	umull	r1, r3, r3, r2
    bb22:	08db      	lsrs	r3, r3, #3
    bb24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    bb28:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    bb2c:	d001      	beq.n	bb32 <sm_align_pool+0x36>
    bb2e:	1ad2      	subs	r2, r2, r3
    bb30:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    bb32:	2af0      	cmp	r2, #240	; 0xf0
    bb34:	d8f0      	bhi.n	bb18 <sm_align_pool+0x1c>
		errno = ENOSPC;
    bb36:	f001 f9b1 	bl	ce9c <__errno>
    bb3a:	221c      	movs	r2, #28
    bb3c:	4603      	mov	r3, r0
    bb3e:	2000      	movs	r0, #0
    bb40:	601a      	str	r2, [r3, #0]
}
    bb42:	bd08      	pop	{r3, pc}
    bb44:	aaaaaaab 	.word	0xaaaaaaab

0000bb48 <sm_set_pool>:
{
    bb48:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    bb4a:	4604      	mov	r4, r0
    bb4c:	b338      	cbz	r0, bb9e <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    bb4e:	b119      	cbz	r1, bb58 <sm_set_pool+0x10>
    bb50:	fab2 f682 	clz	r6, r2
    bb54:	0976      	lsrs	r6, r6, #5
    bb56:	b9a2      	cbnz	r2, bb82 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    bb58:	6820      	ldr	r0, [r4, #0]
    bb5a:	b300      	cbz	r0, bb9e <sm_set_pool+0x56>
    bb5c:	6862      	ldr	r2, [r4, #4]
    bb5e:	b1f2      	cbz	r2, bb9e <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    bb60:	4b18      	ldr	r3, [pc, #96]	; (bbc4 <sm_set_pool+0x7c>)
    bb62:	4919      	ldr	r1, [pc, #100]	; (bbc8 <sm_set_pool+0x80>)
    bb64:	fb02 f303 	mul.w	r3, r2, r3
    bb68:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    bb6c:	d317      	bcc.n	bb9e <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bb6e:	68a3      	ldr	r3, [r4, #8]
    bb70:	b9e3      	cbnz	r3, bbac <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb72:	2200      	movs	r2, #0
			return 1;
    bb74:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    bb76:	6022      	str	r2, [r4, #0]
    bb78:	6062      	str	r2, [r4, #4]
    bb7a:	60a2      	str	r2, [r4, #8]
    bb7c:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    bb7e:	4618      	mov	r0, r3
    bb80:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    bb82:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    bb84:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    bb86:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    bb8a:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    bb8c:	f7ff ffb6 	bl	bafc <sm_align_pool>
    bb90:	4603      	mov	r3, r0
    bb92:	2800      	cmp	r0, #0
    bb94:	d0f3      	beq.n	bb7e <sm_set_pool+0x36>
	if (do_zero) {
    bb96:	b96d      	cbnz	r5, bbb4 <sm_set_pool+0x6c>
	return 1;
    bb98:	2301      	movs	r3, #1
}
    bb9a:	4618      	mov	r0, r3
    bb9c:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    bb9e:	f001 f97d 	bl	ce9c <__errno>
    bba2:	2216      	movs	r2, #22
		return 0;
    bba4:	2300      	movs	r3, #0
		errno = EINVAL;
    bba6:	6002      	str	r2, [r0, #0]
}
    bba8:	4618      	mov	r0, r3
    bbaa:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    bbac:	2100      	movs	r1, #0
    bbae:	f001 f81f 	bl	cbf0 <memset>
    bbb2:	e7de      	b.n	bb72 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    bbb4:	6862      	ldr	r2, [r4, #4]
    bbb6:	4631      	mov	r1, r6
    bbb8:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    bbba:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    bbbc:	f001 f818 	bl	cbf0 <memset>
	return 1;
    bbc0:	2301      	movs	r3, #1
    bbc2:	e7dc      	b.n	bb7e <sm_set_pool+0x36>
    bbc4:	aaaaaaab 	.word	0xaaaaaaab
    bbc8:	15555555 	.word	0x15555555

0000bbcc <__aeabi_atexit>:
    bbcc:	4603      	mov	r3, r0
    bbce:	4608      	mov	r0, r1
    bbd0:	4619      	mov	r1, r3
    bbd2:	f000 be27 	b.w	c824 <__cxa_atexit>
    bbd6:	bf00      	nop

0000bbd8 <atol>:
    bbd8:	220a      	movs	r2, #10
    bbda:	2100      	movs	r1, #0
    bbdc:	f000 bd66 	b.w	c6ac <strtol>

0000bbe0 <malloc>:
    bbe0:	4b02      	ldr	r3, [pc, #8]	; (bbec <malloc+0xc>)
    bbe2:	4601      	mov	r1, r0
    bbe4:	6818      	ldr	r0, [r3, #0]
    bbe6:	f000 b80b 	b.w	bc00 <_malloc_r>
    bbea:	bf00      	nop
    bbec:	200048fc 	.word	0x200048fc

0000bbf0 <free>:
    bbf0:	4b02      	ldr	r3, [pc, #8]	; (bbfc <free+0xc>)
    bbf2:	4601      	mov	r1, r0
    bbf4:	6818      	ldr	r0, [r3, #0]
    bbf6:	f001 bc65 	b.w	d4c4 <_free_r>
    bbfa:	bf00      	nop
    bbfc:	200048fc 	.word	0x200048fc

0000bc00 <_malloc_r>:
    bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc04:	f101 060b 	add.w	r6, r1, #11
    bc08:	2e16      	cmp	r6, #22
    bc0a:	b083      	sub	sp, #12
    bc0c:	4604      	mov	r4, r0
    bc0e:	d824      	bhi.n	bc5a <_malloc_r+0x5a>
    bc10:	2910      	cmp	r1, #16
    bc12:	f200 80ba 	bhi.w	bd8a <_malloc_r+0x18a>
    bc16:	f000 faa3 	bl	c160 <__malloc_lock>
    bc1a:	2610      	movs	r6, #16
    bc1c:	2218      	movs	r2, #24
    bc1e:	2002      	movs	r0, #2
    bc20:	4fb5      	ldr	r7, [pc, #724]	; (bef8 <_malloc_r+0x2f8>)
    bc22:	443a      	add	r2, r7
    bc24:	f1a2 0108 	sub.w	r1, r2, #8
    bc28:	6853      	ldr	r3, [r2, #4]
    bc2a:	428b      	cmp	r3, r1
    bc2c:	f000 80ba 	beq.w	bda4 <_malloc_r+0x1a4>
    bc30:	685a      	ldr	r2, [r3, #4]
    bc32:	68d9      	ldr	r1, [r3, #12]
    bc34:	f022 0203 	bic.w	r2, r2, #3
    bc38:	441a      	add	r2, r3
    bc3a:	689d      	ldr	r5, [r3, #8]
    bc3c:	60e9      	str	r1, [r5, #12]
    bc3e:	608d      	str	r5, [r1, #8]
    bc40:	6851      	ldr	r1, [r2, #4]
    bc42:	f041 0101 	orr.w	r1, r1, #1
    bc46:	4620      	mov	r0, r4
    bc48:	6051      	str	r1, [r2, #4]
    bc4a:	f103 0508 	add.w	r5, r3, #8
    bc4e:	f000 fa8d 	bl	c16c <__malloc_unlock>
    bc52:	4628      	mov	r0, r5
    bc54:	b003      	add	sp, #12
    bc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc5a:	f036 0607 	bics.w	r6, r6, #7
    bc5e:	f100 8094 	bmi.w	bd8a <_malloc_r+0x18a>
    bc62:	42b1      	cmp	r1, r6
    bc64:	f200 8091 	bhi.w	bd8a <_malloc_r+0x18a>
    bc68:	f000 fa7a 	bl	c160 <__malloc_lock>
    bc6c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    bc70:	f0c0 819a 	bcc.w	bfa8 <_malloc_r+0x3a8>
    bc74:	0a73      	lsrs	r3, r6, #9
    bc76:	f000 808f 	beq.w	bd98 <_malloc_r+0x198>
    bc7a:	2b04      	cmp	r3, #4
    bc7c:	f200 816f 	bhi.w	bf5e <_malloc_r+0x35e>
    bc80:	09b3      	lsrs	r3, r6, #6
    bc82:	f103 0039 	add.w	r0, r3, #57	; 0x39
    bc86:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    bc8a:	00c3      	lsls	r3, r0, #3
    bc8c:	4f9a      	ldr	r7, [pc, #616]	; (bef8 <_malloc_r+0x2f8>)
    bc8e:	443b      	add	r3, r7
    bc90:	f1a3 0508 	sub.w	r5, r3, #8
    bc94:	685b      	ldr	r3, [r3, #4]
    bc96:	429d      	cmp	r5, r3
    bc98:	d106      	bne.n	bca8 <_malloc_r+0xa8>
    bc9a:	e00c      	b.n	bcb6 <_malloc_r+0xb6>
    bc9c:	2900      	cmp	r1, #0
    bc9e:	f280 8127 	bge.w	bef0 <_malloc_r+0x2f0>
    bca2:	68db      	ldr	r3, [r3, #12]
    bca4:	429d      	cmp	r5, r3
    bca6:	d006      	beq.n	bcb6 <_malloc_r+0xb6>
    bca8:	685a      	ldr	r2, [r3, #4]
    bcaa:	f022 0203 	bic.w	r2, r2, #3
    bcae:	1b91      	subs	r1, r2, r6
    bcb0:	290f      	cmp	r1, #15
    bcb2:	ddf3      	ble.n	bc9c <_malloc_r+0x9c>
    bcb4:	4660      	mov	r0, ip
    bcb6:	693d      	ldr	r5, [r7, #16]
    bcb8:	f8df c250 	ldr.w	ip, [pc, #592]	; bf0c <_malloc_r+0x30c>
    bcbc:	4565      	cmp	r5, ip
    bcbe:	d07c      	beq.n	bdba <_malloc_r+0x1ba>
    bcc0:	686a      	ldr	r2, [r5, #4]
    bcc2:	f022 0203 	bic.w	r2, r2, #3
    bcc6:	1b93      	subs	r3, r2, r6
    bcc8:	2b0f      	cmp	r3, #15
    bcca:	f300 817b 	bgt.w	bfc4 <_malloc_r+0x3c4>
    bcce:	2b00      	cmp	r3, #0
    bcd0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    bcd4:	f280 816c 	bge.w	bfb0 <_malloc_r+0x3b0>
    bcd8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    bcdc:	f080 811a 	bcs.w	bf14 <_malloc_r+0x314>
    bce0:	08d3      	lsrs	r3, r2, #3
    bce2:	6879      	ldr	r1, [r7, #4]
    bce4:	3301      	adds	r3, #1
    bce6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    bcea:	2201      	movs	r2, #1
    bcec:	fa02 f20e 	lsl.w	r2, r2, lr
    bcf0:	430a      	orrs	r2, r1
    bcf2:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    bcf6:	f8c5 e008 	str.w	lr, [r5, #8]
    bcfa:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    bcfe:	3908      	subs	r1, #8
    bd00:	60e9      	str	r1, [r5, #12]
    bd02:	607a      	str	r2, [r7, #4]
    bd04:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    bd08:	f8ce 500c 	str.w	r5, [lr, #12]
    bd0c:	1083      	asrs	r3, r0, #2
    bd0e:	2101      	movs	r1, #1
    bd10:	4099      	lsls	r1, r3
    bd12:	4291      	cmp	r1, r2
    bd14:	d857      	bhi.n	bdc6 <_malloc_r+0x1c6>
    bd16:	4211      	tst	r1, r2
    bd18:	d106      	bne.n	bd28 <_malloc_r+0x128>
    bd1a:	f020 0003 	bic.w	r0, r0, #3
    bd1e:	0049      	lsls	r1, r1, #1
    bd20:	4211      	tst	r1, r2
    bd22:	f100 0004 	add.w	r0, r0, #4
    bd26:	d0fa      	beq.n	bd1e <_malloc_r+0x11e>
    bd28:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    bd2c:	464d      	mov	r5, r9
    bd2e:	4686      	mov	lr, r0
    bd30:	f8d5 800c 	ldr.w	r8, [r5, #12]
    bd34:	4545      	cmp	r5, r8
    bd36:	d108      	bne.n	bd4a <_malloc_r+0x14a>
    bd38:	e11d      	b.n	bf76 <_malloc_r+0x376>
    bd3a:	2b00      	cmp	r3, #0
    bd3c:	f280 8124 	bge.w	bf88 <_malloc_r+0x388>
    bd40:	f8d8 800c 	ldr.w	r8, [r8, #12]
    bd44:	4545      	cmp	r5, r8
    bd46:	f000 8116 	beq.w	bf76 <_malloc_r+0x376>
    bd4a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bd4e:	f022 0203 	bic.w	r2, r2, #3
    bd52:	1b93      	subs	r3, r2, r6
    bd54:	2b0f      	cmp	r3, #15
    bd56:	ddf0      	ble.n	bd3a <_malloc_r+0x13a>
    bd58:	4620      	mov	r0, r4
    bd5a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    bd5e:	eb08 0106 	add.w	r1, r8, r6
    bd62:	f046 0601 	orr.w	r6, r6, #1
    bd66:	f8c8 6004 	str.w	r6, [r8, #4]
    bd6a:	60ec      	str	r4, [r5, #12]
    bd6c:	60a5      	str	r5, [r4, #8]
    bd6e:	f043 0401 	orr.w	r4, r3, #1
    bd72:	e9c7 1104 	strd	r1, r1, [r7, #16]
    bd76:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    bd7a:	604c      	str	r4, [r1, #4]
    bd7c:	f848 3002 	str.w	r3, [r8, r2]
    bd80:	f000 f9f4 	bl	c16c <__malloc_unlock>
    bd84:	f108 0508 	add.w	r5, r8, #8
    bd88:	e002      	b.n	bd90 <_malloc_r+0x190>
    bd8a:	230c      	movs	r3, #12
    bd8c:	6023      	str	r3, [r4, #0]
    bd8e:	2500      	movs	r5, #0
    bd90:	4628      	mov	r0, r5
    bd92:	b003      	add	sp, #12
    bd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd98:	f44f 7300 	mov.w	r3, #512	; 0x200
    bd9c:	2040      	movs	r0, #64	; 0x40
    bd9e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    bda2:	e773      	b.n	bc8c <_malloc_r+0x8c>
    bda4:	68d3      	ldr	r3, [r2, #12]
    bda6:	429a      	cmp	r2, r3
    bda8:	bf08      	it	eq
    bdaa:	3002      	addeq	r0, #2
    bdac:	f47f af40 	bne.w	bc30 <_malloc_r+0x30>
    bdb0:	693d      	ldr	r5, [r7, #16]
    bdb2:	f8df c158 	ldr.w	ip, [pc, #344]	; bf0c <_malloc_r+0x30c>
    bdb6:	4565      	cmp	r5, ip
    bdb8:	d182      	bne.n	bcc0 <_malloc_r+0xc0>
    bdba:	687a      	ldr	r2, [r7, #4]
    bdbc:	1083      	asrs	r3, r0, #2
    bdbe:	2101      	movs	r1, #1
    bdc0:	4099      	lsls	r1, r3
    bdc2:	4291      	cmp	r1, r2
    bdc4:	d9a7      	bls.n	bd16 <_malloc_r+0x116>
    bdc6:	68bd      	ldr	r5, [r7, #8]
    bdc8:	686b      	ldr	r3, [r5, #4]
    bdca:	f023 0903 	bic.w	r9, r3, #3
    bdce:	454e      	cmp	r6, r9
    bdd0:	d803      	bhi.n	bdda <_malloc_r+0x1da>
    bdd2:	eba9 0306 	sub.w	r3, r9, r6
    bdd6:	2b0f      	cmp	r3, #15
    bdd8:	dc7a      	bgt.n	bed0 <_malloc_r+0x2d0>
    bdda:	f8df b134 	ldr.w	fp, [pc, #308]	; bf10 <_malloc_r+0x310>
    bdde:	4b47      	ldr	r3, [pc, #284]	; (befc <_malloc_r+0x2fc>)
    bde0:	f8db 2000 	ldr.w	r2, [fp]
    bde4:	681b      	ldr	r3, [r3, #0]
    bde6:	3201      	adds	r2, #1
    bde8:	4433      	add	r3, r6
    bdea:	eb05 0a09 	add.w	sl, r5, r9
    bdee:	f000 8133 	beq.w	c058 <_malloc_r+0x458>
    bdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    bdf6:	330f      	adds	r3, #15
    bdf8:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    bdfc:	f028 080f 	bic.w	r8, r8, #15
    be00:	4641      	mov	r1, r8
    be02:	4620      	mov	r0, r4
    be04:	f001 f822 	bl	ce4c <_sbrk_r>
    be08:	1c41      	adds	r1, r0, #1
    be0a:	4602      	mov	r2, r0
    be0c:	f000 80f3 	beq.w	bff6 <_malloc_r+0x3f6>
    be10:	4582      	cmp	sl, r0
    be12:	f200 80ee 	bhi.w	bff2 <_malloc_r+0x3f2>
    be16:	4b3a      	ldr	r3, [pc, #232]	; (bf00 <_malloc_r+0x300>)
    be18:	6819      	ldr	r1, [r3, #0]
    be1a:	4441      	add	r1, r8
    be1c:	6019      	str	r1, [r3, #0]
    be1e:	4608      	mov	r0, r1
    be20:	f000 814e 	beq.w	c0c0 <_malloc_r+0x4c0>
    be24:	f8db 1000 	ldr.w	r1, [fp]
    be28:	9301      	str	r3, [sp, #4]
    be2a:	3101      	adds	r1, #1
    be2c:	bf1b      	ittet	ne
    be2e:	eba2 010a 	subne.w	r1, r2, sl
    be32:	1809      	addne	r1, r1, r0
    be34:	f8cb 2000 	streq.w	r2, [fp]
    be38:	6019      	strne	r1, [r3, #0]
    be3a:	f012 0b07 	ands.w	fp, r2, #7
    be3e:	f000 8117 	beq.w	c070 <_malloc_r+0x470>
    be42:	f1cb 0108 	rsb	r1, fp, #8
    be46:	440a      	add	r2, r1
    be48:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    be4c:	4490      	add	r8, r2
    be4e:	3108      	adds	r1, #8
    be50:	eba1 0108 	sub.w	r1, r1, r8
    be54:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    be58:	4651      	mov	r1, sl
    be5a:	4620      	mov	r0, r4
    be5c:	9200      	str	r2, [sp, #0]
    be5e:	f000 fff5 	bl	ce4c <_sbrk_r>
    be62:	1c42      	adds	r2, r0, #1
    be64:	e9dd 2300 	ldrd	r2, r3, [sp]
    be68:	f000 814f 	beq.w	c10a <_malloc_r+0x50a>
    be6c:	1a80      	subs	r0, r0, r2
    be6e:	eb00 080a 	add.w	r8, r0, sl
    be72:	6819      	ldr	r1, [r3, #0]
    be74:	60ba      	str	r2, [r7, #8]
    be76:	f048 0001 	orr.w	r0, r8, #1
    be7a:	4451      	add	r1, sl
    be7c:	42bd      	cmp	r5, r7
    be7e:	6050      	str	r0, [r2, #4]
    be80:	6019      	str	r1, [r3, #0]
    be82:	f000 8129 	beq.w	c0d8 <_malloc_r+0x4d8>
    be86:	f1b9 0f0f 	cmp.w	r9, #15
    be8a:	f240 8127 	bls.w	c0dc <_malloc_r+0x4dc>
    be8e:	6868      	ldr	r0, [r5, #4]
    be90:	f1a9 0c0c 	sub.w	ip, r9, #12
    be94:	f02c 0c07 	bic.w	ip, ip, #7
    be98:	f000 0001 	and.w	r0, r0, #1
    be9c:	ea40 000c 	orr.w	r0, r0, ip
    bea0:	6068      	str	r0, [r5, #4]
    bea2:	f04f 0e05 	mov.w	lr, #5
    bea6:	eb05 000c 	add.w	r0, r5, ip
    beaa:	f1bc 0f0f 	cmp.w	ip, #15
    beae:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    beb2:	f200 8132 	bhi.w	c11a <_malloc_r+0x51a>
    beb6:	6850      	ldr	r0, [r2, #4]
    beb8:	4615      	mov	r5, r2
    beba:	4b12      	ldr	r3, [pc, #72]	; (bf04 <_malloc_r+0x304>)
    bebc:	681a      	ldr	r2, [r3, #0]
    bebe:	428a      	cmp	r2, r1
    bec0:	bf38      	it	cc
    bec2:	6019      	strcc	r1, [r3, #0]
    bec4:	4b10      	ldr	r3, [pc, #64]	; (bf08 <_malloc_r+0x308>)
    bec6:	681a      	ldr	r2, [r3, #0]
    bec8:	428a      	cmp	r2, r1
    beca:	bf38      	it	cc
    becc:	6019      	strcc	r1, [r3, #0]
    bece:	e094      	b.n	bffa <_malloc_r+0x3fa>
    bed0:	19aa      	adds	r2, r5, r6
    bed2:	f043 0301 	orr.w	r3, r3, #1
    bed6:	f046 0601 	orr.w	r6, r6, #1
    beda:	606e      	str	r6, [r5, #4]
    bedc:	4620      	mov	r0, r4
    bede:	60ba      	str	r2, [r7, #8]
    bee0:	6053      	str	r3, [r2, #4]
    bee2:	f000 f943 	bl	c16c <__malloc_unlock>
    bee6:	3508      	adds	r5, #8
    bee8:	4628      	mov	r0, r5
    beea:	b003      	add	sp, #12
    beec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bef0:	68d9      	ldr	r1, [r3, #12]
    bef2:	441a      	add	r2, r3
    bef4:	e6a1      	b.n	bc3a <_malloc_r+0x3a>
    bef6:	bf00      	nop
    bef8:	200044e0 	.word	0x200044e0
    befc:	20005288 	.word	0x20005288
    bf00:	20005258 	.word	0x20005258
    bf04:	20005280 	.word	0x20005280
    bf08:	20005284 	.word	0x20005284
    bf0c:	200044e8 	.word	0x200044e8
    bf10:	200048e8 	.word	0x200048e8
    bf14:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    bf18:	ea4f 2352 	mov.w	r3, r2, lsr #9
    bf1c:	d363      	bcc.n	bfe6 <_malloc_r+0x3e6>
    bf1e:	2b14      	cmp	r3, #20
    bf20:	f200 80b7 	bhi.w	c092 <_malloc_r+0x492>
    bf24:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    bf28:	00c9      	lsls	r1, r1, #3
    bf2a:	335b      	adds	r3, #91	; 0x5b
    bf2c:	eb07 0e01 	add.w	lr, r7, r1
    bf30:	5879      	ldr	r1, [r7, r1]
    bf32:	f1ae 0e08 	sub.w	lr, lr, #8
    bf36:	458e      	cmp	lr, r1
    bf38:	f000 8091 	beq.w	c05e <_malloc_r+0x45e>
    bf3c:	684b      	ldr	r3, [r1, #4]
    bf3e:	f023 0303 	bic.w	r3, r3, #3
    bf42:	4293      	cmp	r3, r2
    bf44:	d902      	bls.n	bf4c <_malloc_r+0x34c>
    bf46:	6889      	ldr	r1, [r1, #8]
    bf48:	458e      	cmp	lr, r1
    bf4a:	d1f7      	bne.n	bf3c <_malloc_r+0x33c>
    bf4c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    bf50:	687a      	ldr	r2, [r7, #4]
    bf52:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    bf56:	f8ce 5008 	str.w	r5, [lr, #8]
    bf5a:	60cd      	str	r5, [r1, #12]
    bf5c:	e6d6      	b.n	bd0c <_malloc_r+0x10c>
    bf5e:	2b14      	cmp	r3, #20
    bf60:	d959      	bls.n	c016 <_malloc_r+0x416>
    bf62:	2b54      	cmp	r3, #84	; 0x54
    bf64:	f200 809d 	bhi.w	c0a2 <_malloc_r+0x4a2>
    bf68:	0b33      	lsrs	r3, r6, #12
    bf6a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    bf6e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    bf72:	00c3      	lsls	r3, r0, #3
    bf74:	e68a      	b.n	bc8c <_malloc_r+0x8c>
    bf76:	f10e 0e01 	add.w	lr, lr, #1
    bf7a:	f01e 0f03 	tst.w	lr, #3
    bf7e:	f105 0508 	add.w	r5, r5, #8
    bf82:	f47f aed5 	bne.w	bd30 <_malloc_r+0x130>
    bf86:	e051      	b.n	c02c <_malloc_r+0x42c>
    bf88:	4442      	add	r2, r8
    bf8a:	4645      	mov	r5, r8
    bf8c:	6853      	ldr	r3, [r2, #4]
    bf8e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    bf92:	f043 0301 	orr.w	r3, r3, #1
    bf96:	6053      	str	r3, [r2, #4]
    bf98:	f855 3f08 	ldr.w	r3, [r5, #8]!
    bf9c:	4620      	mov	r0, r4
    bf9e:	60d9      	str	r1, [r3, #12]
    bfa0:	608b      	str	r3, [r1, #8]
    bfa2:	f000 f8e3 	bl	c16c <__malloc_unlock>
    bfa6:	e6f3      	b.n	bd90 <_malloc_r+0x190>
    bfa8:	08f0      	lsrs	r0, r6, #3
    bfaa:	f106 0208 	add.w	r2, r6, #8
    bfae:	e637      	b.n	bc20 <_malloc_r+0x20>
    bfb0:	442a      	add	r2, r5
    bfb2:	4620      	mov	r0, r4
    bfb4:	6853      	ldr	r3, [r2, #4]
    bfb6:	f043 0301 	orr.w	r3, r3, #1
    bfba:	6053      	str	r3, [r2, #4]
    bfbc:	3508      	adds	r5, #8
    bfbe:	f000 f8d5 	bl	c16c <__malloc_unlock>
    bfc2:	e6e5      	b.n	bd90 <_malloc_r+0x190>
    bfc4:	19a9      	adds	r1, r5, r6
    bfc6:	4620      	mov	r0, r4
    bfc8:	f046 0601 	orr.w	r6, r6, #1
    bfcc:	f043 0401 	orr.w	r4, r3, #1
    bfd0:	606e      	str	r6, [r5, #4]
    bfd2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    bfd6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    bfda:	604c      	str	r4, [r1, #4]
    bfdc:	50ab      	str	r3, [r5, r2]
    bfde:	f000 f8c5 	bl	c16c <__malloc_unlock>
    bfe2:	3508      	adds	r5, #8
    bfe4:	e6d4      	b.n	bd90 <_malloc_r+0x190>
    bfe6:	0993      	lsrs	r3, r2, #6
    bfe8:	f103 0139 	add.w	r1, r3, #57	; 0x39
    bfec:	00c9      	lsls	r1, r1, #3
    bfee:	3338      	adds	r3, #56	; 0x38
    bff0:	e79c      	b.n	bf2c <_malloc_r+0x32c>
    bff2:	42bd      	cmp	r5, r7
    bff4:	d05f      	beq.n	c0b6 <_malloc_r+0x4b6>
    bff6:	68bd      	ldr	r5, [r7, #8]
    bff8:	6868      	ldr	r0, [r5, #4]
    bffa:	f020 0803 	bic.w	r8, r0, #3
    bffe:	4546      	cmp	r6, r8
    c000:	eba8 0306 	sub.w	r3, r8, r6
    c004:	d802      	bhi.n	c00c <_malloc_r+0x40c>
    c006:	2b0f      	cmp	r3, #15
    c008:	f73f af62 	bgt.w	bed0 <_malloc_r+0x2d0>
    c00c:	4620      	mov	r0, r4
    c00e:	f000 f8ad 	bl	c16c <__malloc_unlock>
    c012:	2500      	movs	r5, #0
    c014:	e6bc      	b.n	bd90 <_malloc_r+0x190>
    c016:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c01a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    c01e:	00c3      	lsls	r3, r0, #3
    c020:	e634      	b.n	bc8c <_malloc_r+0x8c>
    c022:	f859 3908 	ldr.w	r3, [r9], #-8
    c026:	454b      	cmp	r3, r9
    c028:	f040 8096 	bne.w	c158 <_malloc_r+0x558>
    c02c:	f010 0f03 	tst.w	r0, #3
    c030:	f100 30ff 	add.w	r0, r0, #4294967295
    c034:	d1f5      	bne.n	c022 <_malloc_r+0x422>
    c036:	687b      	ldr	r3, [r7, #4]
    c038:	ea23 0301 	bic.w	r3, r3, r1
    c03c:	607b      	str	r3, [r7, #4]
    c03e:	0049      	lsls	r1, r1, #1
    c040:	4299      	cmp	r1, r3
    c042:	f63f aec0 	bhi.w	bdc6 <_malloc_r+0x1c6>
    c046:	b919      	cbnz	r1, c050 <_malloc_r+0x450>
    c048:	e6bd      	b.n	bdc6 <_malloc_r+0x1c6>
    c04a:	0049      	lsls	r1, r1, #1
    c04c:	f10e 0e04 	add.w	lr, lr, #4
    c050:	4219      	tst	r1, r3
    c052:	d0fa      	beq.n	c04a <_malloc_r+0x44a>
    c054:	4670      	mov	r0, lr
    c056:	e667      	b.n	bd28 <_malloc_r+0x128>
    c058:	f103 0810 	add.w	r8, r3, #16
    c05c:	e6d0      	b.n	be00 <_malloc_r+0x200>
    c05e:	109a      	asrs	r2, r3, #2
    c060:	f04f 0801 	mov.w	r8, #1
    c064:	687b      	ldr	r3, [r7, #4]
    c066:	fa08 f202 	lsl.w	r2, r8, r2
    c06a:	431a      	orrs	r2, r3
    c06c:	607a      	str	r2, [r7, #4]
    c06e:	e770      	b.n	bf52 <_malloc_r+0x352>
    c070:	eb02 0108 	add.w	r1, r2, r8
    c074:	4249      	negs	r1, r1
    c076:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    c07a:	4651      	mov	r1, sl
    c07c:	4620      	mov	r0, r4
    c07e:	9200      	str	r2, [sp, #0]
    c080:	f000 fee4 	bl	ce4c <_sbrk_r>
    c084:	1c43      	adds	r3, r0, #1
    c086:	e9dd 2300 	ldrd	r2, r3, [sp]
    c08a:	f47f aeef 	bne.w	be6c <_malloc_r+0x26c>
    c08e:	46da      	mov	sl, fp
    c090:	e6ef      	b.n	be72 <_malloc_r+0x272>
    c092:	2b54      	cmp	r3, #84	; 0x54
    c094:	d825      	bhi.n	c0e2 <_malloc_r+0x4e2>
    c096:	0b13      	lsrs	r3, r2, #12
    c098:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    c09c:	00c9      	lsls	r1, r1, #3
    c09e:	336e      	adds	r3, #110	; 0x6e
    c0a0:	e744      	b.n	bf2c <_malloc_r+0x32c>
    c0a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c0a6:	d825      	bhi.n	c0f4 <_malloc_r+0x4f4>
    c0a8:	0bf3      	lsrs	r3, r6, #15
    c0aa:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c0ae:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    c0b2:	00c3      	lsls	r3, r0, #3
    c0b4:	e5ea      	b.n	bc8c <_malloc_r+0x8c>
    c0b6:	4b29      	ldr	r3, [pc, #164]	; (c15c <_malloc_r+0x55c>)
    c0b8:	6818      	ldr	r0, [r3, #0]
    c0ba:	4440      	add	r0, r8
    c0bc:	6018      	str	r0, [r3, #0]
    c0be:	e6b1      	b.n	be24 <_malloc_r+0x224>
    c0c0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    c0c4:	f1bc 0f00 	cmp.w	ip, #0
    c0c8:	f47f aeac 	bne.w	be24 <_malloc_r+0x224>
    c0cc:	68bd      	ldr	r5, [r7, #8]
    c0ce:	44c8      	add	r8, r9
    c0d0:	f048 0001 	orr.w	r0, r8, #1
    c0d4:	6068      	str	r0, [r5, #4]
    c0d6:	e6f0      	b.n	beba <_malloc_r+0x2ba>
    c0d8:	4615      	mov	r5, r2
    c0da:	e6ee      	b.n	beba <_malloc_r+0x2ba>
    c0dc:	2301      	movs	r3, #1
    c0de:	6053      	str	r3, [r2, #4]
    c0e0:	e794      	b.n	c00c <_malloc_r+0x40c>
    c0e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c0e6:	d823      	bhi.n	c130 <_malloc_r+0x530>
    c0e8:	0bd3      	lsrs	r3, r2, #15
    c0ea:	f103 0178 	add.w	r1, r3, #120	; 0x78
    c0ee:	00c9      	lsls	r1, r1, #3
    c0f0:	3377      	adds	r3, #119	; 0x77
    c0f2:	e71b      	b.n	bf2c <_malloc_r+0x32c>
    c0f4:	f240 5254 	movw	r2, #1364	; 0x554
    c0f8:	4293      	cmp	r3, r2
    c0fa:	d823      	bhi.n	c144 <_malloc_r+0x544>
    c0fc:	0cb3      	lsrs	r3, r6, #18
    c0fe:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c102:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    c106:	00c3      	lsls	r3, r0, #3
    c108:	e5c0      	b.n	bc8c <_malloc_r+0x8c>
    c10a:	f1ab 0b08 	sub.w	fp, fp, #8
    c10e:	44d8      	add	r8, fp
    c110:	eba8 0802 	sub.w	r8, r8, r2
    c114:	f04f 0a00 	mov.w	sl, #0
    c118:	e6ab      	b.n	be72 <_malloc_r+0x272>
    c11a:	f105 0108 	add.w	r1, r5, #8
    c11e:	4620      	mov	r0, r4
    c120:	9300      	str	r3, [sp, #0]
    c122:	f001 f9cf 	bl	d4c4 <_free_r>
    c126:	68bd      	ldr	r5, [r7, #8]
    c128:	9b00      	ldr	r3, [sp, #0]
    c12a:	6868      	ldr	r0, [r5, #4]
    c12c:	6819      	ldr	r1, [r3, #0]
    c12e:	e6c4      	b.n	beba <_malloc_r+0x2ba>
    c130:	f240 5154 	movw	r1, #1364	; 0x554
    c134:	428b      	cmp	r3, r1
    c136:	d80b      	bhi.n	c150 <_malloc_r+0x550>
    c138:	0c93      	lsrs	r3, r2, #18
    c13a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    c13e:	00c9      	lsls	r1, r1, #3
    c140:	337c      	adds	r3, #124	; 0x7c
    c142:	e6f3      	b.n	bf2c <_malloc_r+0x32c>
    c144:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c148:	207f      	movs	r0, #127	; 0x7f
    c14a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    c14e:	e59d      	b.n	bc8c <_malloc_r+0x8c>
    c150:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    c154:	237e      	movs	r3, #126	; 0x7e
    c156:	e6e9      	b.n	bf2c <_malloc_r+0x32c>
    c158:	687b      	ldr	r3, [r7, #4]
    c15a:	e770      	b.n	c03e <_malloc_r+0x43e>
    c15c:	20005258 	.word	0x20005258

0000c160 <__malloc_lock>:
    c160:	4801      	ldr	r0, [pc, #4]	; (c168 <__malloc_lock+0x8>)
    c162:	f000 bec9 	b.w	cef8 <__retarget_lock_acquire_recursive>
    c166:	bf00      	nop
    c168:	20005250 	.word	0x20005250

0000c16c <__malloc_unlock>:
    c16c:	4801      	ldr	r0, [pc, #4]	; (c174 <__malloc_unlock+0x8>)
    c16e:	f000 bec5 	b.w	cefc <__retarget_lock_release_recursive>
    c172:	bf00      	nop
    c174:	20005250 	.word	0x20005250

0000c178 <realloc>:
    c178:	b410      	push	{r4}
    c17a:	4c04      	ldr	r4, [pc, #16]	; (c18c <realloc+0x14>)
    c17c:	4603      	mov	r3, r0
    c17e:	460a      	mov	r2, r1
    c180:	6820      	ldr	r0, [r4, #0]
    c182:	f85d 4b04 	ldr.w	r4, [sp], #4
    c186:	4619      	mov	r1, r3
    c188:	f000 b802 	b.w	c190 <_realloc_r>
    c18c:	200048fc 	.word	0x200048fc

0000c190 <_realloc_r>:
    c190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c194:	4617      	mov	r7, r2
    c196:	2900      	cmp	r1, #0
    c198:	f000 8098 	beq.w	c2cc <_realloc_r+0x13c>
    c19c:	460c      	mov	r4, r1
    c19e:	f107 050b 	add.w	r5, r7, #11
    c1a2:	4680      	mov	r8, r0
    c1a4:	f7ff ffdc 	bl	c160 <__malloc_lock>
    c1a8:	2d16      	cmp	r5, #22
    c1aa:	f854 1c04 	ldr.w	r1, [r4, #-4]
    c1ae:	d85b      	bhi.n	c268 <_realloc_r+0xd8>
    c1b0:	2510      	movs	r5, #16
    c1b2:	462a      	mov	r2, r5
    c1b4:	42af      	cmp	r7, r5
    c1b6:	d85c      	bhi.n	c272 <_realloc_r+0xe2>
    c1b8:	f021 0603 	bic.w	r6, r1, #3
    c1bc:	4296      	cmp	r6, r2
    c1be:	f1a4 0908 	sub.w	r9, r4, #8
    c1c2:	da62      	bge.n	c28a <_realloc_r+0xfa>
    c1c4:	4bbc      	ldr	r3, [pc, #752]	; (c4b8 <_realloc_r+0x328>)
    c1c6:	f8d3 c008 	ldr.w	ip, [r3, #8]
    c1ca:	eb09 0006 	add.w	r0, r9, r6
    c1ce:	4584      	cmp	ip, r0
    c1d0:	f000 8097 	beq.w	c302 <_realloc_r+0x172>
    c1d4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c1d8:	f02c 0301 	bic.w	r3, ip, #1
    c1dc:	4403      	add	r3, r0
    c1de:	685b      	ldr	r3, [r3, #4]
    c1e0:	07db      	lsls	r3, r3, #31
    c1e2:	d468      	bmi.n	c2b6 <_realloc_r+0x126>
    c1e4:	f02c 0c03 	bic.w	ip, ip, #3
    c1e8:	eb06 030c 	add.w	r3, r6, ip
    c1ec:	4293      	cmp	r3, r2
    c1ee:	da47      	bge.n	c280 <_realloc_r+0xf0>
    c1f0:	07cb      	lsls	r3, r1, #31
    c1f2:	d410      	bmi.n	c216 <_realloc_r+0x86>
    c1f4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c1f8:	eba9 0a03 	sub.w	sl, r9, r3
    c1fc:	f8da 3004 	ldr.w	r3, [sl, #4]
    c200:	f023 0103 	bic.w	r1, r3, #3
    c204:	448c      	add	ip, r1
    c206:	44b4      	add	ip, r6
    c208:	4594      	cmp	ip, r2
    c20a:	f280 8111 	bge.w	c430 <_realloc_r+0x2a0>
    c20e:	1873      	adds	r3, r6, r1
    c210:	4293      	cmp	r3, r2
    c212:	f280 80e8 	bge.w	c3e6 <_realloc_r+0x256>
    c216:	4639      	mov	r1, r7
    c218:	4640      	mov	r0, r8
    c21a:	f7ff fcf1 	bl	bc00 <_malloc_r>
    c21e:	4607      	mov	r7, r0
    c220:	b1e0      	cbz	r0, c25c <_realloc_r+0xcc>
    c222:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c226:	f023 0301 	bic.w	r3, r3, #1
    c22a:	444b      	add	r3, r9
    c22c:	f1a0 0208 	sub.w	r2, r0, #8
    c230:	4293      	cmp	r3, r2
    c232:	f000 80d2 	beq.w	c3da <_realloc_r+0x24a>
    c236:	1f32      	subs	r2, r6, #4
    c238:	2a24      	cmp	r2, #36	; 0x24
    c23a:	f200 80f5 	bhi.w	c428 <_realloc_r+0x298>
    c23e:	2a13      	cmp	r2, #19
    c240:	f200 80ac 	bhi.w	c39c <_realloc_r+0x20c>
    c244:	4603      	mov	r3, r0
    c246:	4622      	mov	r2, r4
    c248:	6811      	ldr	r1, [r2, #0]
    c24a:	6019      	str	r1, [r3, #0]
    c24c:	6851      	ldr	r1, [r2, #4]
    c24e:	6059      	str	r1, [r3, #4]
    c250:	6892      	ldr	r2, [r2, #8]
    c252:	609a      	str	r2, [r3, #8]
    c254:	4621      	mov	r1, r4
    c256:	4640      	mov	r0, r8
    c258:	f001 f934 	bl	d4c4 <_free_r>
    c25c:	4640      	mov	r0, r8
    c25e:	f7ff ff85 	bl	c16c <__malloc_unlock>
    c262:	4638      	mov	r0, r7
    c264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c268:	f025 0507 	bic.w	r5, r5, #7
    c26c:	2d00      	cmp	r5, #0
    c26e:	462a      	mov	r2, r5
    c270:	daa0      	bge.n	c1b4 <_realloc_r+0x24>
    c272:	230c      	movs	r3, #12
    c274:	f8c8 3000 	str.w	r3, [r8]
    c278:	2700      	movs	r7, #0
    c27a:	4638      	mov	r0, r7
    c27c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c280:	461e      	mov	r6, r3
    c282:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    c286:	60d3      	str	r3, [r2, #12]
    c288:	609a      	str	r2, [r3, #8]
    c28a:	1b73      	subs	r3, r6, r5
    c28c:	2b0f      	cmp	r3, #15
    c28e:	d822      	bhi.n	c2d6 <_realloc_r+0x146>
    c290:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c294:	f003 0301 	and.w	r3, r3, #1
    c298:	4333      	orrs	r3, r6
    c29a:	444e      	add	r6, r9
    c29c:	f8c9 3004 	str.w	r3, [r9, #4]
    c2a0:	6873      	ldr	r3, [r6, #4]
    c2a2:	f043 0301 	orr.w	r3, r3, #1
    c2a6:	6073      	str	r3, [r6, #4]
    c2a8:	4640      	mov	r0, r8
    c2aa:	4627      	mov	r7, r4
    c2ac:	f7ff ff5e 	bl	c16c <__malloc_unlock>
    c2b0:	4638      	mov	r0, r7
    c2b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2b6:	07c9      	lsls	r1, r1, #31
    c2b8:	d4ad      	bmi.n	c216 <_realloc_r+0x86>
    c2ba:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c2be:	eba9 0a03 	sub.w	sl, r9, r3
    c2c2:	f8da 1004 	ldr.w	r1, [sl, #4]
    c2c6:	f021 0103 	bic.w	r1, r1, #3
    c2ca:	e7a0      	b.n	c20e <_realloc_r+0x7e>
    c2cc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2d0:	4611      	mov	r1, r2
    c2d2:	f7ff bc95 	b.w	bc00 <_malloc_r>
    c2d6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c2da:	eb09 0105 	add.w	r1, r9, r5
    c2de:	f002 0201 	and.w	r2, r2, #1
    c2e2:	444e      	add	r6, r9
    c2e4:	f043 0301 	orr.w	r3, r3, #1
    c2e8:	432a      	orrs	r2, r5
    c2ea:	f8c9 2004 	str.w	r2, [r9, #4]
    c2ee:	604b      	str	r3, [r1, #4]
    c2f0:	6873      	ldr	r3, [r6, #4]
    c2f2:	f043 0301 	orr.w	r3, r3, #1
    c2f6:	3108      	adds	r1, #8
    c2f8:	6073      	str	r3, [r6, #4]
    c2fa:	4640      	mov	r0, r8
    c2fc:	f001 f8e2 	bl	d4c4 <_free_r>
    c300:	e7d2      	b.n	c2a8 <_realloc_r+0x118>
    c302:	f8dc 0004 	ldr.w	r0, [ip, #4]
    c306:	f020 0b03 	bic.w	fp, r0, #3
    c30a:	eb06 0c0b 	add.w	ip, r6, fp
    c30e:	f105 0010 	add.w	r0, r5, #16
    c312:	4584      	cmp	ip, r0
    c314:	da4d      	bge.n	c3b2 <_realloc_r+0x222>
    c316:	07c9      	lsls	r1, r1, #31
    c318:	f53f af7d 	bmi.w	c216 <_realloc_r+0x86>
    c31c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    c320:	eba9 0a01 	sub.w	sl, r9, r1
    c324:	f8da 1004 	ldr.w	r1, [sl, #4]
    c328:	f021 0103 	bic.w	r1, r1, #3
    c32c:	448b      	add	fp, r1
    c32e:	44b3      	add	fp, r6
    c330:	4558      	cmp	r0, fp
    c332:	f73f af6c 	bgt.w	c20e <_realloc_r+0x7e>
    c336:	4657      	mov	r7, sl
    c338:	f8da 100c 	ldr.w	r1, [sl, #12]
    c33c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    c340:	1f32      	subs	r2, r6, #4
    c342:	2a24      	cmp	r2, #36	; 0x24
    c344:	60c1      	str	r1, [r0, #12]
    c346:	6088      	str	r0, [r1, #8]
    c348:	f200 80db 	bhi.w	c502 <_realloc_r+0x372>
    c34c:	2a13      	cmp	r2, #19
    c34e:	f240 80d6 	bls.w	c4fe <_realloc_r+0x36e>
    c352:	6821      	ldr	r1, [r4, #0]
    c354:	f8ca 1008 	str.w	r1, [sl, #8]
    c358:	6861      	ldr	r1, [r4, #4]
    c35a:	f8ca 100c 	str.w	r1, [sl, #12]
    c35e:	2a1b      	cmp	r2, #27
    c360:	f200 80df 	bhi.w	c522 <_realloc_r+0x392>
    c364:	3408      	adds	r4, #8
    c366:	f10a 0210 	add.w	r2, sl, #16
    c36a:	6821      	ldr	r1, [r4, #0]
    c36c:	6011      	str	r1, [r2, #0]
    c36e:	6861      	ldr	r1, [r4, #4]
    c370:	6051      	str	r1, [r2, #4]
    c372:	68a1      	ldr	r1, [r4, #8]
    c374:	6091      	str	r1, [r2, #8]
    c376:	eb0a 0105 	add.w	r1, sl, r5
    c37a:	ebab 0205 	sub.w	r2, fp, r5
    c37e:	f042 0201 	orr.w	r2, r2, #1
    c382:	6099      	str	r1, [r3, #8]
    c384:	604a      	str	r2, [r1, #4]
    c386:	f8da 3004 	ldr.w	r3, [sl, #4]
    c38a:	f003 0301 	and.w	r3, r3, #1
    c38e:	432b      	orrs	r3, r5
    c390:	4640      	mov	r0, r8
    c392:	f8ca 3004 	str.w	r3, [sl, #4]
    c396:	f7ff fee9 	bl	c16c <__malloc_unlock>
    c39a:	e76e      	b.n	c27a <_realloc_r+0xea>
    c39c:	6823      	ldr	r3, [r4, #0]
    c39e:	6003      	str	r3, [r0, #0]
    c3a0:	6863      	ldr	r3, [r4, #4]
    c3a2:	6043      	str	r3, [r0, #4]
    c3a4:	2a1b      	cmp	r2, #27
    c3a6:	d868      	bhi.n	c47a <_realloc_r+0x2ea>
    c3a8:	f104 0208 	add.w	r2, r4, #8
    c3ac:	f100 0308 	add.w	r3, r0, #8
    c3b0:	e74a      	b.n	c248 <_realloc_r+0xb8>
    c3b2:	eb09 0205 	add.w	r2, r9, r5
    c3b6:	609a      	str	r2, [r3, #8]
    c3b8:	ebac 0305 	sub.w	r3, ip, r5
    c3bc:	f043 0301 	orr.w	r3, r3, #1
    c3c0:	6053      	str	r3, [r2, #4]
    c3c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c3c6:	f003 0301 	and.w	r3, r3, #1
    c3ca:	432b      	orrs	r3, r5
    c3cc:	4640      	mov	r0, r8
    c3ce:	f844 3c04 	str.w	r3, [r4, #-4]
    c3d2:	f7ff fecb 	bl	c16c <__malloc_unlock>
    c3d6:	4627      	mov	r7, r4
    c3d8:	e74f      	b.n	c27a <_realloc_r+0xea>
    c3da:	f850 3c04 	ldr.w	r3, [r0, #-4]
    c3de:	f023 0303 	bic.w	r3, r3, #3
    c3e2:	441e      	add	r6, r3
    c3e4:	e751      	b.n	c28a <_realloc_r+0xfa>
    c3e6:	4657      	mov	r7, sl
    c3e8:	f8da 100c 	ldr.w	r1, [sl, #12]
    c3ec:	f857 0f08 	ldr.w	r0, [r7, #8]!
    c3f0:	1f32      	subs	r2, r6, #4
    c3f2:	2a24      	cmp	r2, #36	; 0x24
    c3f4:	60c1      	str	r1, [r0, #12]
    c3f6:	6088      	str	r0, [r1, #8]
    c3f8:	d84c      	bhi.n	c494 <_realloc_r+0x304>
    c3fa:	2a13      	cmp	r2, #19
    c3fc:	d948      	bls.n	c490 <_realloc_r+0x300>
    c3fe:	6821      	ldr	r1, [r4, #0]
    c400:	f8ca 1008 	str.w	r1, [sl, #8]
    c404:	6861      	ldr	r1, [r4, #4]
    c406:	f8ca 100c 	str.w	r1, [sl, #12]
    c40a:	2a1b      	cmp	r2, #27
    c40c:	d856      	bhi.n	c4bc <_realloc_r+0x32c>
    c40e:	3408      	adds	r4, #8
    c410:	f10a 0210 	add.w	r2, sl, #16
    c414:	461e      	mov	r6, r3
    c416:	6823      	ldr	r3, [r4, #0]
    c418:	6013      	str	r3, [r2, #0]
    c41a:	6863      	ldr	r3, [r4, #4]
    c41c:	6053      	str	r3, [r2, #4]
    c41e:	68a3      	ldr	r3, [r4, #8]
    c420:	6093      	str	r3, [r2, #8]
    c422:	46d1      	mov	r9, sl
    c424:	463c      	mov	r4, r7
    c426:	e730      	b.n	c28a <_realloc_r+0xfa>
    c428:	4621      	mov	r1, r4
    c42a:	f000 fb65 	bl	caf8 <memmove>
    c42e:	e711      	b.n	c254 <_realloc_r+0xc4>
    c430:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    c434:	4657      	mov	r7, sl
    c436:	60cb      	str	r3, [r1, #12]
    c438:	6099      	str	r1, [r3, #8]
    c43a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    c43e:	f8da 300c 	ldr.w	r3, [sl, #12]
    c442:	60cb      	str	r3, [r1, #12]
    c444:	1f32      	subs	r2, r6, #4
    c446:	2a24      	cmp	r2, #36	; 0x24
    c448:	6099      	str	r1, [r3, #8]
    c44a:	d82d      	bhi.n	c4a8 <_realloc_r+0x318>
    c44c:	2a13      	cmp	r2, #19
    c44e:	d929      	bls.n	c4a4 <_realloc_r+0x314>
    c450:	6823      	ldr	r3, [r4, #0]
    c452:	f8ca 3008 	str.w	r3, [sl, #8]
    c456:	6863      	ldr	r3, [r4, #4]
    c458:	f8ca 300c 	str.w	r3, [sl, #12]
    c45c:	2a1b      	cmp	r2, #27
    c45e:	d842      	bhi.n	c4e6 <_realloc_r+0x356>
    c460:	3408      	adds	r4, #8
    c462:	f10a 0310 	add.w	r3, sl, #16
    c466:	6822      	ldr	r2, [r4, #0]
    c468:	601a      	str	r2, [r3, #0]
    c46a:	6862      	ldr	r2, [r4, #4]
    c46c:	605a      	str	r2, [r3, #4]
    c46e:	68a2      	ldr	r2, [r4, #8]
    c470:	609a      	str	r2, [r3, #8]
    c472:	4666      	mov	r6, ip
    c474:	46d1      	mov	r9, sl
    c476:	463c      	mov	r4, r7
    c478:	e707      	b.n	c28a <_realloc_r+0xfa>
    c47a:	68a3      	ldr	r3, [r4, #8]
    c47c:	6083      	str	r3, [r0, #8]
    c47e:	68e3      	ldr	r3, [r4, #12]
    c480:	60c3      	str	r3, [r0, #12]
    c482:	2a24      	cmp	r2, #36	; 0x24
    c484:	d026      	beq.n	c4d4 <_realloc_r+0x344>
    c486:	f104 0210 	add.w	r2, r4, #16
    c48a:	f100 0310 	add.w	r3, r0, #16
    c48e:	e6db      	b.n	c248 <_realloc_r+0xb8>
    c490:	463a      	mov	r2, r7
    c492:	e7bf      	b.n	c414 <_realloc_r+0x284>
    c494:	4621      	mov	r1, r4
    c496:	4638      	mov	r0, r7
    c498:	461e      	mov	r6, r3
    c49a:	46d1      	mov	r9, sl
    c49c:	f000 fb2c 	bl	caf8 <memmove>
    c4a0:	463c      	mov	r4, r7
    c4a2:	e6f2      	b.n	c28a <_realloc_r+0xfa>
    c4a4:	463b      	mov	r3, r7
    c4a6:	e7de      	b.n	c466 <_realloc_r+0x2d6>
    c4a8:	4621      	mov	r1, r4
    c4aa:	4638      	mov	r0, r7
    c4ac:	4666      	mov	r6, ip
    c4ae:	46d1      	mov	r9, sl
    c4b0:	f000 fb22 	bl	caf8 <memmove>
    c4b4:	463c      	mov	r4, r7
    c4b6:	e6e8      	b.n	c28a <_realloc_r+0xfa>
    c4b8:	200044e0 	.word	0x200044e0
    c4bc:	68a1      	ldr	r1, [r4, #8]
    c4be:	f8ca 1010 	str.w	r1, [sl, #16]
    c4c2:	68e1      	ldr	r1, [r4, #12]
    c4c4:	f8ca 1014 	str.w	r1, [sl, #20]
    c4c8:	2a24      	cmp	r2, #36	; 0x24
    c4ca:	d020      	beq.n	c50e <_realloc_r+0x37e>
    c4cc:	3410      	adds	r4, #16
    c4ce:	f10a 0218 	add.w	r2, sl, #24
    c4d2:	e79f      	b.n	c414 <_realloc_r+0x284>
    c4d4:	6923      	ldr	r3, [r4, #16]
    c4d6:	6103      	str	r3, [r0, #16]
    c4d8:	6961      	ldr	r1, [r4, #20]
    c4da:	6141      	str	r1, [r0, #20]
    c4dc:	f104 0218 	add.w	r2, r4, #24
    c4e0:	f100 0318 	add.w	r3, r0, #24
    c4e4:	e6b0      	b.n	c248 <_realloc_r+0xb8>
    c4e6:	68a3      	ldr	r3, [r4, #8]
    c4e8:	f8ca 3010 	str.w	r3, [sl, #16]
    c4ec:	68e3      	ldr	r3, [r4, #12]
    c4ee:	f8ca 3014 	str.w	r3, [sl, #20]
    c4f2:	2a24      	cmp	r2, #36	; 0x24
    c4f4:	d021      	beq.n	c53a <_realloc_r+0x3aa>
    c4f6:	3410      	adds	r4, #16
    c4f8:	f10a 0318 	add.w	r3, sl, #24
    c4fc:	e7b3      	b.n	c466 <_realloc_r+0x2d6>
    c4fe:	463a      	mov	r2, r7
    c500:	e733      	b.n	c36a <_realloc_r+0x1da>
    c502:	4621      	mov	r1, r4
    c504:	4638      	mov	r0, r7
    c506:	f000 faf7 	bl	caf8 <memmove>
    c50a:	4b16      	ldr	r3, [pc, #88]	; (c564 <_realloc_r+0x3d4>)
    c50c:	e733      	b.n	c376 <_realloc_r+0x1e6>
    c50e:	6922      	ldr	r2, [r4, #16]
    c510:	f8ca 2018 	str.w	r2, [sl, #24]
    c514:	6962      	ldr	r2, [r4, #20]
    c516:	f8ca 201c 	str.w	r2, [sl, #28]
    c51a:	3418      	adds	r4, #24
    c51c:	f10a 0220 	add.w	r2, sl, #32
    c520:	e778      	b.n	c414 <_realloc_r+0x284>
    c522:	68a1      	ldr	r1, [r4, #8]
    c524:	f8ca 1010 	str.w	r1, [sl, #16]
    c528:	68e1      	ldr	r1, [r4, #12]
    c52a:	f8ca 1014 	str.w	r1, [sl, #20]
    c52e:	2a24      	cmp	r2, #36	; 0x24
    c530:	d00d      	beq.n	c54e <_realloc_r+0x3be>
    c532:	3410      	adds	r4, #16
    c534:	f10a 0218 	add.w	r2, sl, #24
    c538:	e717      	b.n	c36a <_realloc_r+0x1da>
    c53a:	6923      	ldr	r3, [r4, #16]
    c53c:	f8ca 3018 	str.w	r3, [sl, #24]
    c540:	6963      	ldr	r3, [r4, #20]
    c542:	f8ca 301c 	str.w	r3, [sl, #28]
    c546:	3418      	adds	r4, #24
    c548:	f10a 0320 	add.w	r3, sl, #32
    c54c:	e78b      	b.n	c466 <_realloc_r+0x2d6>
    c54e:	6922      	ldr	r2, [r4, #16]
    c550:	f8ca 2018 	str.w	r2, [sl, #24]
    c554:	6962      	ldr	r2, [r4, #20]
    c556:	f8ca 201c 	str.w	r2, [sl, #28]
    c55a:	3418      	adds	r4, #24
    c55c:	f10a 0220 	add.w	r2, sl, #32
    c560:	e703      	b.n	c36a <_realloc_r+0x1da>
    c562:	bf00      	nop
    c564:	200044e0 	.word	0x200044e0

0000c568 <_strtol_l.constprop.0>:
    c568:	2b01      	cmp	r3, #1
    c56a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c56e:	d040      	beq.n	c5f2 <_strtol_l.constprop.0+0x8a>
    c570:	2b24      	cmp	r3, #36	; 0x24
    c572:	4698      	mov	r8, r3
    c574:	d83d      	bhi.n	c5f2 <_strtol_l.constprop.0+0x8a>
    c576:	4d4c      	ldr	r5, [pc, #304]	; (c6a8 <_strtol_l.constprop.0+0x140>)
    c578:	468e      	mov	lr, r1
    c57a:	4676      	mov	r6, lr
    c57c:	f81e bb01 	ldrb.w	fp, [lr], #1
    c580:	f815 400b 	ldrb.w	r4, [r5, fp]
    c584:	f014 0408 	ands.w	r4, r4, #8
    c588:	d1f7      	bne.n	c57a <_strtol_l.constprop.0+0x12>
    c58a:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    c58e:	d072      	beq.n	c676 <_strtol_l.constprop.0+0x10e>
    c590:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    c594:	bf08      	it	eq
    c596:	f89e b000 	ldrbeq.w	fp, [lr]
    c59a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    c59e:	bf08      	it	eq
    c5a0:	f106 0e02 	addeq.w	lr, r6, #2
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d042      	beq.n	c62e <_strtol_l.constprop.0+0xc6>
    c5a8:	2b10      	cmp	r3, #16
    c5aa:	d057      	beq.n	c65c <_strtol_l.constprop.0+0xf4>
    c5ac:	fbb9 f7f8 	udiv	r7, r9, r8
    c5b0:	2500      	movs	r5, #0
    c5b2:	462e      	mov	r6, r5
    c5b4:	fb08 9a17 	mls	sl, r8, r7, r9
    c5b8:	e005      	b.n	c5c6 <_strtol_l.constprop.0+0x5e>
    c5ba:	d033      	beq.n	c624 <_strtol_l.constprop.0+0xbc>
    c5bc:	fb08 c606 	mla	r6, r8, r6, ip
    c5c0:	2501      	movs	r5, #1
    c5c2:	f81e bb01 	ldrb.w	fp, [lr], #1
    c5c6:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    c5ca:	f1bc 0f09 	cmp.w	ip, #9
    c5ce:	d906      	bls.n	c5de <_strtol_l.constprop.0+0x76>
    c5d0:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    c5d4:	f1bc 0f19 	cmp.w	ip, #25
    c5d8:	d812      	bhi.n	c600 <_strtol_l.constprop.0+0x98>
    c5da:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    c5de:	4563      	cmp	r3, ip
    c5e0:	dd17      	ble.n	c612 <_strtol_l.constprop.0+0xaa>
    c5e2:	f1b5 3fff 	cmp.w	r5, #4294967295
    c5e6:	d0ec      	beq.n	c5c2 <_strtol_l.constprop.0+0x5a>
    c5e8:	42b7      	cmp	r7, r6
    c5ea:	d2e6      	bcs.n	c5ba <_strtol_l.constprop.0+0x52>
    c5ec:	f04f 35ff 	mov.w	r5, #4294967295
    c5f0:	e7e7      	b.n	c5c2 <_strtol_l.constprop.0+0x5a>
    c5f2:	f000 fc53 	bl	ce9c <__errno>
    c5f6:	2316      	movs	r3, #22
    c5f8:	6003      	str	r3, [r0, #0]
    c5fa:	2000      	movs	r0, #0
    c5fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c600:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    c604:	f1bc 0f19 	cmp.w	ip, #25
    c608:	d803      	bhi.n	c612 <_strtol_l.constprop.0+0xaa>
    c60a:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    c60e:	4563      	cmp	r3, ip
    c610:	dce7      	bgt.n	c5e2 <_strtol_l.constprop.0+0x7a>
    c612:	1c6b      	adds	r3, r5, #1
    c614:	d027      	beq.n	c666 <_strtol_l.constprop.0+0xfe>
    c616:	b98c      	cbnz	r4, c63c <_strtol_l.constprop.0+0xd4>
    c618:	b10a      	cbz	r2, c61e <_strtol_l.constprop.0+0xb6>
    c61a:	bba5      	cbnz	r5, c686 <_strtol_l.constprop.0+0x11e>
    c61c:	6011      	str	r1, [r2, #0]
    c61e:	4630      	mov	r0, r6
    c620:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c624:	45e2      	cmp	sl, ip
    c626:	dac9      	bge.n	c5bc <_strtol_l.constprop.0+0x54>
    c628:	f04f 35ff 	mov.w	r5, #4294967295
    c62c:	e7c9      	b.n	c5c2 <_strtol_l.constprop.0+0x5a>
    c62e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c632:	d005      	beq.n	c640 <_strtol_l.constprop.0+0xd8>
    c634:	f04f 080a 	mov.w	r8, #10
    c638:	4643      	mov	r3, r8
    c63a:	e7b7      	b.n	c5ac <_strtol_l.constprop.0+0x44>
    c63c:	4276      	negs	r6, r6
    c63e:	e7eb      	b.n	c618 <_strtol_l.constprop.0+0xb0>
    c640:	f89e 3000 	ldrb.w	r3, [lr]
    c644:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c648:	2b58      	cmp	r3, #88	; 0x58
    c64a:	d121      	bne.n	c690 <_strtol_l.constprop.0+0x128>
    c64c:	f04f 0810 	mov.w	r8, #16
    c650:	f89e b001 	ldrb.w	fp, [lr, #1]
    c654:	4643      	mov	r3, r8
    c656:	f10e 0e02 	add.w	lr, lr, #2
    c65a:	e7a7      	b.n	c5ac <_strtol_l.constprop.0+0x44>
    c65c:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    c660:	d01a      	beq.n	c698 <_strtol_l.constprop.0+0x130>
    c662:	4698      	mov	r8, r3
    c664:	e7a2      	b.n	c5ac <_strtol_l.constprop.0+0x44>
    c666:	2322      	movs	r3, #34	; 0x22
    c668:	6003      	str	r3, [r0, #0]
    c66a:	b172      	cbz	r2, c68a <_strtol_l.constprop.0+0x122>
    c66c:	f10e 31ff 	add.w	r1, lr, #4294967295
    c670:	464e      	mov	r6, r9
    c672:	6011      	str	r1, [r2, #0]
    c674:	e7d3      	b.n	c61e <_strtol_l.constprop.0+0xb6>
    c676:	f89e b000 	ldrb.w	fp, [lr]
    c67a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    c67e:	f106 0e02 	add.w	lr, r6, #2
    c682:	2401      	movs	r4, #1
    c684:	e78e      	b.n	c5a4 <_strtol_l.constprop.0+0x3c>
    c686:	46b1      	mov	r9, r6
    c688:	e7f0      	b.n	c66c <_strtol_l.constprop.0+0x104>
    c68a:	464e      	mov	r6, r9
    c68c:	4630      	mov	r0, r6
    c68e:	e7c7      	b.n	c620 <_strtol_l.constprop.0+0xb8>
    c690:	f04f 0808 	mov.w	r8, #8
    c694:	4643      	mov	r3, r8
    c696:	e789      	b.n	c5ac <_strtol_l.constprop.0+0x44>
    c698:	f89e 5000 	ldrb.w	r5, [lr]
    c69c:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    c6a0:	2d58      	cmp	r5, #88	; 0x58
    c6a2:	d0d3      	beq.n	c64c <_strtol_l.constprop.0+0xe4>
    c6a4:	4698      	mov	r8, r3
    c6a6:	e781      	b.n	c5ac <_strtol_l.constprop.0+0x44>
    c6a8:	20000b15 	.word	0x20000b15

0000c6ac <strtol>:
    c6ac:	b410      	push	{r4}
    c6ae:	4c05      	ldr	r4, [pc, #20]	; (c6c4 <strtol+0x18>)
    c6b0:	4684      	mov	ip, r0
    c6b2:	4613      	mov	r3, r2
    c6b4:	6820      	ldr	r0, [r4, #0]
    c6b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    c6ba:	460a      	mov	r2, r1
    c6bc:	4661      	mov	r1, ip
    c6be:	f7ff bf53 	b.w	c568 <_strtol_l.constprop.0>
    c6c2:	bf00      	nop
    c6c4:	200048fc 	.word	0x200048fc

0000c6c8 <_strtoul_l.constprop.0>:
    c6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6cc:	4607      	mov	r7, r0
    c6ce:	484c      	ldr	r0, [pc, #304]	; (c800 <_strtoul_l.constprop.0+0x138>)
    c6d0:	460e      	mov	r6, r1
    c6d2:	4635      	mov	r5, r6
    c6d4:	f816 eb01 	ldrb.w	lr, [r6], #1
    c6d8:	f810 c00e 	ldrb.w	ip, [r0, lr]
    c6dc:	f01c 0c08 	ands.w	ip, ip, #8
    c6e0:	d1f7      	bne.n	c6d2 <_strtoul_l.constprop.0+0xa>
    c6e2:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    c6e6:	d05a      	beq.n	c79e <_strtoul_l.constprop.0+0xd6>
    c6e8:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    c6ec:	bf03      	ittte	eq
    c6ee:	f896 e000 	ldrbeq.w	lr, [r6]
    c6f2:	4664      	moveq	r4, ip
    c6f4:	1cae      	addeq	r6, r5, #2
    c6f6:	4664      	movne	r4, ip
    c6f8:	b15b      	cbz	r3, c712 <_strtoul_l.constprop.0+0x4a>
    c6fa:	2b10      	cmp	r3, #16
    c6fc:	d054      	beq.n	c7a8 <_strtoul_l.constprop.0+0xe0>
    c6fe:	f04f 38ff 	mov.w	r8, #4294967295
    c702:	fbb8 f8f3 	udiv	r8, r8, r3
    c706:	fb03 fa08 	mul.w	sl, r3, r8
    c70a:	ea6f 0a0a 	mvn.w	sl, sl
    c70e:	4699      	mov	r9, r3
    c710:	e008      	b.n	c724 <_strtoul_l.constprop.0+0x5c>
    c712:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c716:	d05a      	beq.n	c7ce <_strtoul_l.constprop.0+0x106>
    c718:	230a      	movs	r3, #10
    c71a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; c804 <_strtoul_l.constprop.0+0x13c>
    c71e:	f04f 0a05 	mov.w	sl, #5
    c722:	4699      	mov	r9, r3
    c724:	2500      	movs	r5, #0
    c726:	4628      	mov	r0, r5
    c728:	e005      	b.n	c736 <_strtoul_l.constprop.0+0x6e>
    c72a:	d02c      	beq.n	c786 <_strtoul_l.constprop.0+0xbe>
    c72c:	fb09 c000 	mla	r0, r9, r0, ip
    c730:	2501      	movs	r5, #1
    c732:	f816 eb01 	ldrb.w	lr, [r6], #1
    c736:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    c73a:	f1bc 0f09 	cmp.w	ip, #9
    c73e:	d906      	bls.n	c74e <_strtoul_l.constprop.0+0x86>
    c740:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    c744:	f1bc 0f19 	cmp.w	ip, #25
    c748:	d80b      	bhi.n	c762 <_strtoul_l.constprop.0+0x9a>
    c74a:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    c74e:	4563      	cmp	r3, ip
    c750:	dd10      	ble.n	c774 <_strtoul_l.constprop.0+0xac>
    c752:	f1b5 3fff 	cmp.w	r5, #4294967295
    c756:	d0ec      	beq.n	c732 <_strtoul_l.constprop.0+0x6a>
    c758:	4540      	cmp	r0, r8
    c75a:	d9e6      	bls.n	c72a <_strtoul_l.constprop.0+0x62>
    c75c:	f04f 35ff 	mov.w	r5, #4294967295
    c760:	e7e7      	b.n	c732 <_strtoul_l.constprop.0+0x6a>
    c762:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    c766:	f1bc 0f19 	cmp.w	ip, #25
    c76a:	d803      	bhi.n	c774 <_strtoul_l.constprop.0+0xac>
    c76c:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    c770:	4563      	cmp	r3, ip
    c772:	dcee      	bgt.n	c752 <_strtoul_l.constprop.0+0x8a>
    c774:	1c6b      	adds	r3, r5, #1
    c776:	d00b      	beq.n	c790 <_strtoul_l.constprop.0+0xc8>
    c778:	b104      	cbz	r4, c77c <_strtoul_l.constprop.0+0xb4>
    c77a:	4240      	negs	r0, r0
    c77c:	b10a      	cbz	r2, c782 <_strtoul_l.constprop.0+0xba>
    c77e:	b965      	cbnz	r5, c79a <_strtoul_l.constprop.0+0xd2>
    c780:	6011      	str	r1, [r2, #0]
    c782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c786:	45d4      	cmp	ip, sl
    c788:	ddd0      	ble.n	c72c <_strtoul_l.constprop.0+0x64>
    c78a:	f04f 35ff 	mov.w	r5, #4294967295
    c78e:	e7d0      	b.n	c732 <_strtoul_l.constprop.0+0x6a>
    c790:	2322      	movs	r3, #34	; 0x22
    c792:	603b      	str	r3, [r7, #0]
    c794:	4628      	mov	r0, r5
    c796:	2a00      	cmp	r2, #0
    c798:	d0f3      	beq.n	c782 <_strtoul_l.constprop.0+0xba>
    c79a:	1e71      	subs	r1, r6, #1
    c79c:	e7f0      	b.n	c780 <_strtoul_l.constprop.0+0xb8>
    c79e:	f896 e000 	ldrb.w	lr, [r6]
    c7a2:	2401      	movs	r4, #1
    c7a4:	1cae      	adds	r6, r5, #2
    c7a6:	e7a7      	b.n	c6f8 <_strtoul_l.constprop.0+0x30>
    c7a8:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    c7ac:	d121      	bne.n	c7f2 <_strtoul_l.constprop.0+0x12a>
    c7ae:	7830      	ldrb	r0, [r6, #0]
    c7b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    c7b4:	2858      	cmp	r0, #88	; 0x58
    c7b6:	d116      	bne.n	c7e6 <_strtoul_l.constprop.0+0x11e>
    c7b8:	f04f 0910 	mov.w	r9, #16
    c7bc:	f896 e001 	ldrb.w	lr, [r6, #1]
    c7c0:	f04f 0a0f 	mov.w	sl, #15
    c7c4:	3602      	adds	r6, #2
    c7c6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c7ca:	464b      	mov	r3, r9
    c7cc:	e7aa      	b.n	c724 <_strtoul_l.constprop.0+0x5c>
    c7ce:	7833      	ldrb	r3, [r6, #0]
    c7d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c7d4:	2b58      	cmp	r3, #88	; 0x58
    c7d6:	d0ef      	beq.n	c7b8 <_strtoul_l.constprop.0+0xf0>
    c7d8:	2308      	movs	r3, #8
    c7da:	f04f 0a07 	mov.w	sl, #7
    c7de:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    c7e2:	4699      	mov	r9, r3
    c7e4:	e79e      	b.n	c724 <_strtoul_l.constprop.0+0x5c>
    c7e6:	4699      	mov	r9, r3
    c7e8:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c7ec:	f04f 0a0f 	mov.w	sl, #15
    c7f0:	e798      	b.n	c724 <_strtoul_l.constprop.0+0x5c>
    c7f2:	f04f 0a0f 	mov.w	sl, #15
    c7f6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    c7fa:	4699      	mov	r9, r3
    c7fc:	e792      	b.n	c724 <_strtoul_l.constprop.0+0x5c>
    c7fe:	bf00      	nop
    c800:	20000b15 	.word	0x20000b15
    c804:	19999999 	.word	0x19999999

0000c808 <strtoul>:
    c808:	b410      	push	{r4}
    c80a:	4c05      	ldr	r4, [pc, #20]	; (c820 <strtoul+0x18>)
    c80c:	4684      	mov	ip, r0
    c80e:	4613      	mov	r3, r2
    c810:	6820      	ldr	r0, [r4, #0]
    c812:	f85d 4b04 	ldr.w	r4, [sp], #4
    c816:	460a      	mov	r2, r1
    c818:	4661      	mov	r1, ip
    c81a:	f7ff bf55 	b.w	c6c8 <_strtoul_l.constprop.0>
    c81e:	bf00      	nop
    c820:	200048fc 	.word	0x200048fc

0000c824 <__cxa_atexit>:
    c824:	4613      	mov	r3, r2
    c826:	460a      	mov	r2, r1
    c828:	4601      	mov	r1, r0
    c82a:	2002      	movs	r0, #2
    c82c:	f000 bdb6 	b.w	d39c <__register_exitproc>

0000c830 <isprint>:
    c830:	4b02      	ldr	r3, [pc, #8]	; (c83c <isprint+0xc>)
    c832:	4418      	add	r0, r3
    c834:	7840      	ldrb	r0, [r0, #1]
    c836:	f000 0097 	and.w	r0, r0, #151	; 0x97
    c83a:	4770      	bx	lr
    c83c:	20000b14 	.word	0x20000b14

0000c840 <isspace>:
    c840:	4b02      	ldr	r3, [pc, #8]	; (c84c <isspace+0xc>)
    c842:	4418      	add	r0, r3
    c844:	7840      	ldrb	r0, [r0, #1]
    c846:	f000 0008 	and.w	r0, r0, #8
    c84a:	4770      	bx	lr
    c84c:	20000b14 	.word	0x20000b14

0000c850 <tolower>:
    c850:	4b03      	ldr	r3, [pc, #12]	; (c860 <tolower+0x10>)
    c852:	5c1b      	ldrb	r3, [r3, r0]
    c854:	f003 0303 	and.w	r3, r3, #3
    c858:	2b01      	cmp	r3, #1
    c85a:	bf08      	it	eq
    c85c:	3020      	addeq	r0, #32
    c85e:	4770      	bx	lr
    c860:	20000b15 	.word	0x20000b15

0000c864 <stdio_exit_handler>:
    c864:	4a02      	ldr	r2, [pc, #8]	; (c870 <stdio_exit_handler+0xc>)
    c866:	4903      	ldr	r1, [pc, #12]	; (c874 <stdio_exit_handler+0x10>)
    c868:	4803      	ldr	r0, [pc, #12]	; (c878 <stdio_exit_handler+0x14>)
    c86a:	f000 b8bb 	b.w	c9e4 <_fwalk_sglue>
    c86e:	bf00      	nop
    c870:	200048f0 	.word	0x200048f0
    c874:	0000f9d5 	.word	0x0000f9d5
    c878:	20001230 	.word	0x20001230

0000c87c <cleanup_stdio>:
    c87c:	4b0c      	ldr	r3, [pc, #48]	; (c8b0 <cleanup_stdio+0x34>)
    c87e:	6841      	ldr	r1, [r0, #4]
    c880:	4299      	cmp	r1, r3
    c882:	b510      	push	{r4, lr}
    c884:	4604      	mov	r4, r0
    c886:	d001      	beq.n	c88c <cleanup_stdio+0x10>
    c888:	f003 f8a4 	bl	f9d4 <_fclose_r>
    c88c:	68a1      	ldr	r1, [r4, #8]
    c88e:	4b09      	ldr	r3, [pc, #36]	; (c8b4 <cleanup_stdio+0x38>)
    c890:	4299      	cmp	r1, r3
    c892:	d002      	beq.n	c89a <cleanup_stdio+0x1e>
    c894:	4620      	mov	r0, r4
    c896:	f003 f89d 	bl	f9d4 <_fclose_r>
    c89a:	68e1      	ldr	r1, [r4, #12]
    c89c:	4b06      	ldr	r3, [pc, #24]	; (c8b8 <cleanup_stdio+0x3c>)
    c89e:	4299      	cmp	r1, r3
    c8a0:	d004      	beq.n	c8ac <cleanup_stdio+0x30>
    c8a2:	4620      	mov	r0, r4
    c8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c8a8:	f003 b894 	b.w	f9d4 <_fclose_r>
    c8ac:	bd10      	pop	{r4, pc}
    c8ae:	bf00      	nop
    c8b0:	2000528c 	.word	0x2000528c
    c8b4:	200052f4 	.word	0x200052f4
    c8b8:	2000535c 	.word	0x2000535c

0000c8bc <global_stdio_init.part.0>:
    c8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c8c0:	4c2a      	ldr	r4, [pc, #168]	; (c96c <global_stdio_init.part.0+0xb0>)
    c8c2:	4b2b      	ldr	r3, [pc, #172]	; (c970 <global_stdio_init.part.0+0xb4>)
    c8c4:	482b      	ldr	r0, [pc, #172]	; (c974 <global_stdio_init.part.0+0xb8>)
    c8c6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; c988 <global_stdio_init.part.0+0xcc>
    c8ca:	f8df 80c0 	ldr.w	r8, [pc, #192]	; c98c <global_stdio_init.part.0+0xd0>
    c8ce:	4f2a      	ldr	r7, [pc, #168]	; (c978 <global_stdio_init.part.0+0xbc>)
    c8d0:	6018      	str	r0, [r3, #0]
    c8d2:	2500      	movs	r5, #0
    c8d4:	2304      	movs	r3, #4
    c8d6:	2208      	movs	r2, #8
    c8d8:	4629      	mov	r1, r5
    c8da:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c8de:	4e27      	ldr	r6, [pc, #156]	; (c97c <global_stdio_init.part.0+0xc0>)
    c8e0:	6665      	str	r5, [r4, #100]	; 0x64
    c8e2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    c8e6:	e9c4 5500 	strd	r5, r5, [r4]
    c8ea:	e9c4 5504 	strd	r5, r5, [r4, #16]
    c8ee:	61a5      	str	r5, [r4, #24]
    c8f0:	f000 f97e 	bl	cbf0 <memset>
    c8f4:	4b22      	ldr	r3, [pc, #136]	; (c980 <global_stdio_init.part.0+0xc4>)
    c8f6:	6763      	str	r3, [r4, #116]	; 0x74
    c8f8:	2208      	movs	r2, #8
    c8fa:	4629      	mov	r1, r5
    c8fc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    c900:	e9c4 4907 	strd	r4, r9, [r4, #28]
    c904:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    c908:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    c90c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    c910:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    c914:	6725      	str	r5, [r4, #112]	; 0x70
    c916:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    c91a:	62e6      	str	r6, [r4, #44]	; 0x2c
    c91c:	f000 f968 	bl	cbf0 <memset>
    c920:	4b18      	ldr	r3, [pc, #96]	; (c984 <global_stdio_init.part.0+0xc8>)
    c922:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    c926:	4629      	mov	r1, r5
    c928:	f104 0368 	add.w	r3, r4, #104	; 0x68
    c92c:	2208      	movs	r2, #8
    c92e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    c932:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    c936:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    c93a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    c93e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    c942:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    c946:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    c94a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    c94e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    c952:	f000 f94d 	bl	cbf0 <memset>
    c956:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    c95a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    c95e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    c962:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    c966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c96a:	bf00      	nop
    c96c:	2000528c 	.word	0x2000528c
    c970:	200053c4 	.word	0x200053c4
    c974:	0000c865 	.word	0x0000c865
    c978:	0000cad1 	.word	0x0000cad1
    c97c:	0000caf1 	.word	0x0000caf1
    c980:	00010009 	.word	0x00010009
    c984:	00020012 	.word	0x00020012
    c988:	0000ca6d 	.word	0x0000ca6d
    c98c:	0000ca91 	.word	0x0000ca91

0000c990 <__sinit>:
    c990:	b510      	push	{r4, lr}
    c992:	4604      	mov	r4, r0
    c994:	480a      	ldr	r0, [pc, #40]	; (c9c0 <__sinit+0x30>)
    c996:	f000 faaf 	bl	cef8 <__retarget_lock_acquire_recursive>
    c99a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c99c:	b923      	cbnz	r3, c9a8 <__sinit+0x18>
    c99e:	4b09      	ldr	r3, [pc, #36]	; (c9c4 <__sinit+0x34>)
    c9a0:	4a09      	ldr	r2, [pc, #36]	; (c9c8 <__sinit+0x38>)
    c9a2:	681b      	ldr	r3, [r3, #0]
    c9a4:	6362      	str	r2, [r4, #52]	; 0x34
    c9a6:	b123      	cbz	r3, c9b2 <__sinit+0x22>
    c9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9ac:	4804      	ldr	r0, [pc, #16]	; (c9c0 <__sinit+0x30>)
    c9ae:	f000 baa5 	b.w	cefc <__retarget_lock_release_recursive>
    c9b2:	f7ff ff83 	bl	c8bc <global_stdio_init.part.0>
    c9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9ba:	4801      	ldr	r0, [pc, #4]	; (c9c0 <__sinit+0x30>)
    c9bc:	f000 ba9e 	b.w	cefc <__retarget_lock_release_recursive>
    c9c0:	20005254 	.word	0x20005254
    c9c4:	200053c4 	.word	0x200053c4
    c9c8:	0000c87d 	.word	0x0000c87d

0000c9cc <__sfp_lock_acquire>:
    c9cc:	4801      	ldr	r0, [pc, #4]	; (c9d4 <__sfp_lock_acquire+0x8>)
    c9ce:	f000 ba93 	b.w	cef8 <__retarget_lock_acquire_recursive>
    c9d2:	bf00      	nop
    c9d4:	20005254 	.word	0x20005254

0000c9d8 <__sfp_lock_release>:
    c9d8:	4801      	ldr	r0, [pc, #4]	; (c9e0 <__sfp_lock_release+0x8>)
    c9da:	f000 ba8f 	b.w	cefc <__retarget_lock_release_recursive>
    c9de:	bf00      	nop
    c9e0:	20005254 	.word	0x20005254

0000c9e4 <_fwalk_sglue>:
    c9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c9e8:	4680      	mov	r8, r0
    c9ea:	460f      	mov	r7, r1
    c9ec:	4616      	mov	r6, r2
    c9ee:	f04f 0900 	mov.w	r9, #0
    c9f2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    c9f6:	3d01      	subs	r5, #1
    c9f8:	d411      	bmi.n	ca1e <_fwalk_sglue+0x3a>
    c9fa:	89a3      	ldrh	r3, [r4, #12]
    c9fc:	2b01      	cmp	r3, #1
    c9fe:	f105 35ff 	add.w	r5, r5, #4294967295
    ca02:	d908      	bls.n	ca16 <_fwalk_sglue+0x32>
    ca04:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    ca08:	3301      	adds	r3, #1
    ca0a:	4621      	mov	r1, r4
    ca0c:	d003      	beq.n	ca16 <_fwalk_sglue+0x32>
    ca0e:	4640      	mov	r0, r8
    ca10:	47b8      	blx	r7
    ca12:	ea49 0900 	orr.w	r9, r9, r0
    ca16:	1c6b      	adds	r3, r5, #1
    ca18:	f104 0468 	add.w	r4, r4, #104	; 0x68
    ca1c:	d1ed      	bne.n	c9fa <_fwalk_sglue+0x16>
    ca1e:	6836      	ldr	r6, [r6, #0]
    ca20:	2e00      	cmp	r6, #0
    ca22:	d1e6      	bne.n	c9f2 <_fwalk_sglue+0xe>
    ca24:	4648      	mov	r0, r9
    ca26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ca2a:	bf00      	nop

0000ca2c <sprintf>:
    ca2c:	b40e      	push	{r1, r2, r3}
    ca2e:	b510      	push	{r4, lr}
    ca30:	b09d      	sub	sp, #116	; 0x74
    ca32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    ca36:	ab1f      	add	r3, sp, #124	; 0x7c
    ca38:	e9cd 0106 	strd	r0, r1, [sp, #24]
    ca3c:	9104      	str	r1, [sp, #16]
    ca3e:	4909      	ldr	r1, [pc, #36]	; (ca64 <sprintf+0x38>)
    ca40:	f853 2b04 	ldr.w	r2, [r3], #4
    ca44:	9002      	str	r0, [sp, #8]
    ca46:	4c08      	ldr	r4, [pc, #32]	; (ca68 <sprintf+0x3c>)
    ca48:	6808      	ldr	r0, [r1, #0]
    ca4a:	9301      	str	r3, [sp, #4]
    ca4c:	a902      	add	r1, sp, #8
    ca4e:	9405      	str	r4, [sp, #20]
    ca50:	f001 fa1e 	bl	de90 <_svfprintf_r>
    ca54:	9b02      	ldr	r3, [sp, #8]
    ca56:	2200      	movs	r2, #0
    ca58:	701a      	strb	r2, [r3, #0]
    ca5a:	b01d      	add	sp, #116	; 0x74
    ca5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca60:	b003      	add	sp, #12
    ca62:	4770      	bx	lr
    ca64:	200048fc 	.word	0x200048fc
    ca68:	ffff0208 	.word	0xffff0208

0000ca6c <__sread>:
    ca6c:	b510      	push	{r4, lr}
    ca6e:	460c      	mov	r4, r1
    ca70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ca74:	f000 f9d4 	bl	ce20 <_read_r>
    ca78:	2800      	cmp	r0, #0
    ca7a:	db03      	blt.n	ca84 <__sread+0x18>
    ca7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ca7e:	4403      	add	r3, r0
    ca80:	6523      	str	r3, [r4, #80]	; 0x50
    ca82:	bd10      	pop	{r4, pc}
    ca84:	89a3      	ldrh	r3, [r4, #12]
    ca86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    ca8a:	81a3      	strh	r3, [r4, #12]
    ca8c:	bd10      	pop	{r4, pc}
    ca8e:	bf00      	nop

0000ca90 <__swrite>:
    ca90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca94:	460c      	mov	r4, r1
    ca96:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    ca9a:	461f      	mov	r7, r3
    ca9c:	05cb      	lsls	r3, r1, #23
    ca9e:	4605      	mov	r5, r0
    caa0:	4616      	mov	r6, r2
    caa2:	d40b      	bmi.n	cabc <__swrite+0x2c>
    caa4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    caa8:	81a1      	strh	r1, [r4, #12]
    caaa:	463b      	mov	r3, r7
    caac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cab0:	4632      	mov	r2, r6
    cab2:	4628      	mov	r0, r5
    cab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cab8:	f000 b9da 	b.w	ce70 <_write_r>
    cabc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cac0:	2302      	movs	r3, #2
    cac2:	2200      	movs	r2, #0
    cac4:	f000 f996 	bl	cdf4 <_lseek_r>
    cac8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    cacc:	e7ea      	b.n	caa4 <__swrite+0x14>
    cace:	bf00      	nop

0000cad0 <__sseek>:
    cad0:	b510      	push	{r4, lr}
    cad2:	460c      	mov	r4, r1
    cad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cad8:	f000 f98c 	bl	cdf4 <_lseek_r>
    cadc:	89a3      	ldrh	r3, [r4, #12]
    cade:	1c42      	adds	r2, r0, #1
    cae0:	bf0e      	itee	eq
    cae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    cae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    caea:	6520      	strne	r0, [r4, #80]	; 0x50
    caec:	81a3      	strh	r3, [r4, #12]
    caee:	bd10      	pop	{r4, pc}

0000caf0 <__sclose>:
    caf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    caf4:	f000 b96c 	b.w	cdd0 <_close_r>

0000caf8 <memmove>:
    caf8:	4288      	cmp	r0, r1
    cafa:	d90d      	bls.n	cb18 <memmove+0x20>
    cafc:	188b      	adds	r3, r1, r2
    cafe:	4283      	cmp	r3, r0
    cb00:	d90a      	bls.n	cb18 <memmove+0x20>
    cb02:	eb00 0c02 	add.w	ip, r0, r2
    cb06:	b1ba      	cbz	r2, cb38 <memmove+0x40>
    cb08:	4662      	mov	r2, ip
    cb0a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    cb0e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    cb12:	4299      	cmp	r1, r3
    cb14:	d1f9      	bne.n	cb0a <memmove+0x12>
    cb16:	4770      	bx	lr
    cb18:	2a0f      	cmp	r2, #15
    cb1a:	d80e      	bhi.n	cb3a <memmove+0x42>
    cb1c:	4603      	mov	r3, r0
    cb1e:	f102 3cff 	add.w	ip, r2, #4294967295
    cb22:	b14a      	cbz	r2, cb38 <memmove+0x40>
    cb24:	f10c 0c01 	add.w	ip, ip, #1
    cb28:	3b01      	subs	r3, #1
    cb2a:	448c      	add	ip, r1
    cb2c:	f811 2b01 	ldrb.w	r2, [r1], #1
    cb30:	f803 2f01 	strb.w	r2, [r3, #1]!
    cb34:	4561      	cmp	r1, ip
    cb36:	d1f9      	bne.n	cb2c <memmove+0x34>
    cb38:	4770      	bx	lr
    cb3a:	ea40 0301 	orr.w	r3, r0, r1
    cb3e:	079b      	lsls	r3, r3, #30
    cb40:	d150      	bne.n	cbe4 <memmove+0xec>
    cb42:	f1a2 0310 	sub.w	r3, r2, #16
    cb46:	b570      	push	{r4, r5, r6, lr}
    cb48:	f101 0c20 	add.w	ip, r1, #32
    cb4c:	f023 050f 	bic.w	r5, r3, #15
    cb50:	f101 0e10 	add.w	lr, r1, #16
    cb54:	f100 0410 	add.w	r4, r0, #16
    cb58:	44ac      	add	ip, r5
    cb5a:	091b      	lsrs	r3, r3, #4
    cb5c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    cb60:	f844 5c10 	str.w	r5, [r4, #-16]
    cb64:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    cb68:	f844 5c0c 	str.w	r5, [r4, #-12]
    cb6c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    cb70:	f844 5c08 	str.w	r5, [r4, #-8]
    cb74:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    cb78:	f844 5c04 	str.w	r5, [r4, #-4]
    cb7c:	f10e 0e10 	add.w	lr, lr, #16
    cb80:	45e6      	cmp	lr, ip
    cb82:	f104 0410 	add.w	r4, r4, #16
    cb86:	d1e9      	bne.n	cb5c <memmove+0x64>
    cb88:	3301      	adds	r3, #1
    cb8a:	f012 0f0c 	tst.w	r2, #12
    cb8e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    cb92:	f002 040f 	and.w	r4, r2, #15
    cb96:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    cb9a:	d027      	beq.n	cbec <memmove+0xf4>
    cb9c:	3c04      	subs	r4, #4
    cb9e:	f024 0603 	bic.w	r6, r4, #3
    cba2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    cba6:	441e      	add	r6, r3
    cba8:	1f1c      	subs	r4, r3, #4
    cbaa:	468e      	mov	lr, r1
    cbac:	f85e 5b04 	ldr.w	r5, [lr], #4
    cbb0:	f844 5f04 	str.w	r5, [r4, #4]!
    cbb4:	42b4      	cmp	r4, r6
    cbb6:	d1f9      	bne.n	cbac <memmove+0xb4>
    cbb8:	f10c 0401 	add.w	r4, ip, #1
    cbbc:	f002 0203 	and.w	r2, r2, #3
    cbc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    cbc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    cbc8:	f102 3cff 	add.w	ip, r2, #4294967295
    cbcc:	b14a      	cbz	r2, cbe2 <memmove+0xea>
    cbce:	f10c 0c01 	add.w	ip, ip, #1
    cbd2:	3b01      	subs	r3, #1
    cbd4:	448c      	add	ip, r1
    cbd6:	f811 2b01 	ldrb.w	r2, [r1], #1
    cbda:	f803 2f01 	strb.w	r2, [r3, #1]!
    cbde:	4561      	cmp	r1, ip
    cbe0:	d1f9      	bne.n	cbd6 <memmove+0xde>
    cbe2:	bd70      	pop	{r4, r5, r6, pc}
    cbe4:	f102 3cff 	add.w	ip, r2, #4294967295
    cbe8:	4603      	mov	r3, r0
    cbea:	e79b      	b.n	cb24 <memmove+0x2c>
    cbec:	4622      	mov	r2, r4
    cbee:	e7eb      	b.n	cbc8 <memmove+0xd0>

0000cbf0 <memset>:
    cbf0:	0783      	lsls	r3, r0, #30
    cbf2:	b530      	push	{r4, r5, lr}
    cbf4:	d048      	beq.n	cc88 <memset+0x98>
    cbf6:	1e54      	subs	r4, r2, #1
    cbf8:	2a00      	cmp	r2, #0
    cbfa:	d03f      	beq.n	cc7c <memset+0x8c>
    cbfc:	b2ca      	uxtb	r2, r1
    cbfe:	4603      	mov	r3, r0
    cc00:	e001      	b.n	cc06 <memset+0x16>
    cc02:	3c01      	subs	r4, #1
    cc04:	d33a      	bcc.n	cc7c <memset+0x8c>
    cc06:	f803 2b01 	strb.w	r2, [r3], #1
    cc0a:	079d      	lsls	r5, r3, #30
    cc0c:	d1f9      	bne.n	cc02 <memset+0x12>
    cc0e:	2c03      	cmp	r4, #3
    cc10:	d92d      	bls.n	cc6e <memset+0x7e>
    cc12:	b2cd      	uxtb	r5, r1
    cc14:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    cc18:	2c0f      	cmp	r4, #15
    cc1a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    cc1e:	d936      	bls.n	cc8e <memset+0x9e>
    cc20:	f1a4 0210 	sub.w	r2, r4, #16
    cc24:	f022 0c0f 	bic.w	ip, r2, #15
    cc28:	f103 0e20 	add.w	lr, r3, #32
    cc2c:	44e6      	add	lr, ip
    cc2e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    cc32:	f103 0210 	add.w	r2, r3, #16
    cc36:	e942 5504 	strd	r5, r5, [r2, #-16]
    cc3a:	e942 5502 	strd	r5, r5, [r2, #-8]
    cc3e:	3210      	adds	r2, #16
    cc40:	4572      	cmp	r2, lr
    cc42:	d1f8      	bne.n	cc36 <memset+0x46>
    cc44:	f10c 0201 	add.w	r2, ip, #1
    cc48:	f014 0f0c 	tst.w	r4, #12
    cc4c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    cc50:	f004 0c0f 	and.w	ip, r4, #15
    cc54:	d013      	beq.n	cc7e <memset+0x8e>
    cc56:	f1ac 0304 	sub.w	r3, ip, #4
    cc5a:	f023 0303 	bic.w	r3, r3, #3
    cc5e:	3304      	adds	r3, #4
    cc60:	4413      	add	r3, r2
    cc62:	f842 5b04 	str.w	r5, [r2], #4
    cc66:	4293      	cmp	r3, r2
    cc68:	d1fb      	bne.n	cc62 <memset+0x72>
    cc6a:	f00c 0403 	and.w	r4, ip, #3
    cc6e:	b12c      	cbz	r4, cc7c <memset+0x8c>
    cc70:	b2c9      	uxtb	r1, r1
    cc72:	441c      	add	r4, r3
    cc74:	f803 1b01 	strb.w	r1, [r3], #1
    cc78:	429c      	cmp	r4, r3
    cc7a:	d1fb      	bne.n	cc74 <memset+0x84>
    cc7c:	bd30      	pop	{r4, r5, pc}
    cc7e:	4664      	mov	r4, ip
    cc80:	4613      	mov	r3, r2
    cc82:	2c00      	cmp	r4, #0
    cc84:	d1f4      	bne.n	cc70 <memset+0x80>
    cc86:	e7f9      	b.n	cc7c <memset+0x8c>
    cc88:	4603      	mov	r3, r0
    cc8a:	4614      	mov	r4, r2
    cc8c:	e7bf      	b.n	cc0e <memset+0x1e>
    cc8e:	461a      	mov	r2, r3
    cc90:	46a4      	mov	ip, r4
    cc92:	e7e0      	b.n	cc56 <memset+0x66>

0000cc94 <strchr>:
    cc94:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    cc98:	4603      	mov	r3, r0
    cc9a:	d044      	beq.n	cd26 <strchr+0x92>
    cc9c:	0782      	lsls	r2, r0, #30
    cc9e:	d132      	bne.n	cd06 <strchr+0x72>
    cca0:	b510      	push	{r4, lr}
    cca2:	6804      	ldr	r4, [r0, #0]
    cca4:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    cca8:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    ccac:	ea8e 0204 	eor.w	r2, lr, r4
    ccb0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    ccb4:	ea23 0302 	bic.w	r3, r3, r2
    ccb8:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    ccbc:	ea22 0204 	bic.w	r2, r2, r4
    ccc0:	4313      	orrs	r3, r2
    ccc2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    ccc6:	d10f      	bne.n	cce8 <strchr+0x54>
    ccc8:	f850 4f04 	ldr.w	r4, [r0, #4]!
    cccc:	ea84 0c0e 	eor.w	ip, r4, lr
    ccd0:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    ccd4:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    ccd8:	ea23 0304 	bic.w	r3, r3, r4
    ccdc:	ea22 020c 	bic.w	r2, r2, ip
    cce0:	4313      	orrs	r3, r2
    cce2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    cce6:	d0ef      	beq.n	ccc8 <strchr+0x34>
    cce8:	7803      	ldrb	r3, [r0, #0]
    ccea:	b923      	cbnz	r3, ccf6 <strchr+0x62>
    ccec:	e036      	b.n	cd5c <strchr+0xc8>
    ccee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    ccf2:	2b00      	cmp	r3, #0
    ccf4:	d032      	beq.n	cd5c <strchr+0xc8>
    ccf6:	4299      	cmp	r1, r3
    ccf8:	d1f9      	bne.n	ccee <strchr+0x5a>
    ccfa:	bd10      	pop	{r4, pc}
    ccfc:	428a      	cmp	r2, r1
    ccfe:	d011      	beq.n	cd24 <strchr+0x90>
    cd00:	079a      	lsls	r2, r3, #30
    cd02:	4618      	mov	r0, r3
    cd04:	d0cc      	beq.n	cca0 <strchr+0xc>
    cd06:	4618      	mov	r0, r3
    cd08:	f813 2b01 	ldrb.w	r2, [r3], #1
    cd0c:	2a00      	cmp	r2, #0
    cd0e:	d1f5      	bne.n	ccfc <strchr+0x68>
    cd10:	4610      	mov	r0, r2
    cd12:	4770      	bx	lr
    cd14:	0799      	lsls	r1, r3, #30
    cd16:	4618      	mov	r0, r3
    cd18:	d007      	beq.n	cd2a <strchr+0x96>
    cd1a:	4618      	mov	r0, r3
    cd1c:	3301      	adds	r3, #1
    cd1e:	7802      	ldrb	r2, [r0, #0]
    cd20:	2a00      	cmp	r2, #0
    cd22:	d1f7      	bne.n	cd14 <strchr+0x80>
    cd24:	4770      	bx	lr
    cd26:	0782      	lsls	r2, r0, #30
    cd28:	d1f7      	bne.n	cd1a <strchr+0x86>
    cd2a:	6802      	ldr	r2, [r0, #0]
    cd2c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    cd30:	ea23 0302 	bic.w	r3, r3, r2
    cd34:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    cd38:	d108      	bne.n	cd4c <strchr+0xb8>
    cd3a:	f850 2f04 	ldr.w	r2, [r0, #4]!
    cd3e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    cd42:	ea23 0302 	bic.w	r3, r3, r2
    cd46:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    cd4a:	d0f6      	beq.n	cd3a <strchr+0xa6>
    cd4c:	7803      	ldrb	r3, [r0, #0]
    cd4e:	2b00      	cmp	r3, #0
    cd50:	d0e8      	beq.n	cd24 <strchr+0x90>
    cd52:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    cd56:	2b00      	cmp	r3, #0
    cd58:	d1fb      	bne.n	cd52 <strchr+0xbe>
    cd5a:	4770      	bx	lr
    cd5c:	4618      	mov	r0, r3
    cd5e:	bd10      	pop	{r4, pc}

0000cd60 <strncpy>:
    cd60:	ea40 0301 	orr.w	r3, r0, r1
    cd64:	079b      	lsls	r3, r3, #30
    cd66:	b530      	push	{r4, r5, lr}
    cd68:	d101      	bne.n	cd6e <strncpy+0xe>
    cd6a:	2a03      	cmp	r2, #3
    cd6c:	d80f      	bhi.n	cd8e <strncpy+0x2e>
    cd6e:	4684      	mov	ip, r0
    cd70:	f101 3eff 	add.w	lr, r1, #4294967295
    cd74:	e007      	b.n	cd86 <strncpy+0x26>
    cd76:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    cd7a:	f803 1b01 	strb.w	r1, [r3], #1
    cd7e:	1e54      	subs	r4, r2, #1
    cd80:	b1c1      	cbz	r1, cdb4 <strncpy+0x54>
    cd82:	469c      	mov	ip, r3
    cd84:	4622      	mov	r2, r4
    cd86:	4663      	mov	r3, ip
    cd88:	2a00      	cmp	r2, #0
    cd8a:	d1f4      	bne.n	cd76 <strncpy+0x16>
    cd8c:	bd30      	pop	{r4, r5, pc}
    cd8e:	460b      	mov	r3, r1
    cd90:	4684      	mov	ip, r0
    cd92:	4619      	mov	r1, r3
    cd94:	f853 5b04 	ldr.w	r5, [r3], #4
    cd98:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    cd9c:	ea24 0405 	bic.w	r4, r4, r5
    cda0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    cda4:	d1e4      	bne.n	cd70 <strncpy+0x10>
    cda6:	3a04      	subs	r2, #4
    cda8:	2a03      	cmp	r2, #3
    cdaa:	f84c 5b04 	str.w	r5, [ip], #4
    cdae:	4619      	mov	r1, r3
    cdb0:	d8ef      	bhi.n	cd92 <strncpy+0x32>
    cdb2:	e7dd      	b.n	cd70 <strncpy+0x10>
    cdb4:	4494      	add	ip, r2
    cdb6:	2c00      	cmp	r4, #0
    cdb8:	d0e8      	beq.n	cd8c <strncpy+0x2c>
    cdba:	f803 1b01 	strb.w	r1, [r3], #1
    cdbe:	4563      	cmp	r3, ip
    cdc0:	d1fb      	bne.n	cdba <strncpy+0x5a>
    cdc2:	bd30      	pop	{r4, r5, pc}

0000cdc4 <__locale_mb_cur_max>:
    cdc4:	4b01      	ldr	r3, [pc, #4]	; (cdcc <__locale_mb_cur_max+0x8>)
    cdc6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    cdca:	4770      	bx	lr
    cdcc:	20004374 	.word	0x20004374

0000cdd0 <_close_r>:
    cdd0:	b538      	push	{r3, r4, r5, lr}
    cdd2:	4d07      	ldr	r5, [pc, #28]	; (cdf0 <_close_r+0x20>)
    cdd4:	2200      	movs	r2, #0
    cdd6:	4604      	mov	r4, r0
    cdd8:	4608      	mov	r0, r1
    cdda:	602a      	str	r2, [r5, #0]
    cddc:	f7fd fb08 	bl	a3f0 <_close>
    cde0:	1c43      	adds	r3, r0, #1
    cde2:	d000      	beq.n	cde6 <_close_r+0x16>
    cde4:	bd38      	pop	{r3, r4, r5, pc}
    cde6:	682b      	ldr	r3, [r5, #0]
    cde8:	2b00      	cmp	r3, #0
    cdea:	d0fb      	beq.n	cde4 <_close_r+0x14>
    cdec:	6023      	str	r3, [r4, #0]
    cdee:	bd38      	pop	{r3, r4, r5, pc}
    cdf0:	200053dc 	.word	0x200053dc

0000cdf4 <_lseek_r>:
    cdf4:	b538      	push	{r3, r4, r5, lr}
    cdf6:	460c      	mov	r4, r1
    cdf8:	4d08      	ldr	r5, [pc, #32]	; (ce1c <_lseek_r+0x28>)
    cdfa:	4684      	mov	ip, r0
    cdfc:	4611      	mov	r1, r2
    cdfe:	4620      	mov	r0, r4
    ce00:	461a      	mov	r2, r3
    ce02:	2300      	movs	r3, #0
    ce04:	602b      	str	r3, [r5, #0]
    ce06:	4664      	mov	r4, ip
    ce08:	f7fd fafe 	bl	a408 <_lseek>
    ce0c:	1c43      	adds	r3, r0, #1
    ce0e:	d000      	beq.n	ce12 <_lseek_r+0x1e>
    ce10:	bd38      	pop	{r3, r4, r5, pc}
    ce12:	682b      	ldr	r3, [r5, #0]
    ce14:	2b00      	cmp	r3, #0
    ce16:	d0fb      	beq.n	ce10 <_lseek_r+0x1c>
    ce18:	6023      	str	r3, [r4, #0]
    ce1a:	bd38      	pop	{r3, r4, r5, pc}
    ce1c:	200053dc 	.word	0x200053dc

0000ce20 <_read_r>:
    ce20:	b538      	push	{r3, r4, r5, lr}
    ce22:	460c      	mov	r4, r1
    ce24:	4d08      	ldr	r5, [pc, #32]	; (ce48 <_read_r+0x28>)
    ce26:	4684      	mov	ip, r0
    ce28:	4611      	mov	r1, r2
    ce2a:	4620      	mov	r0, r4
    ce2c:	461a      	mov	r2, r3
    ce2e:	2300      	movs	r3, #0
    ce30:	602b      	str	r3, [r5, #0]
    ce32:	4664      	mov	r4, ip
    ce34:	f7fd fada 	bl	a3ec <_read>
    ce38:	1c43      	adds	r3, r0, #1
    ce3a:	d000      	beq.n	ce3e <_read_r+0x1e>
    ce3c:	bd38      	pop	{r3, r4, r5, pc}
    ce3e:	682b      	ldr	r3, [r5, #0]
    ce40:	2b00      	cmp	r3, #0
    ce42:	d0fb      	beq.n	ce3c <_read_r+0x1c>
    ce44:	6023      	str	r3, [r4, #0]
    ce46:	bd38      	pop	{r3, r4, r5, pc}
    ce48:	200053dc 	.word	0x200053dc

0000ce4c <_sbrk_r>:
    ce4c:	b538      	push	{r3, r4, r5, lr}
    ce4e:	4d07      	ldr	r5, [pc, #28]	; (ce6c <_sbrk_r+0x20>)
    ce50:	2200      	movs	r2, #0
    ce52:	4604      	mov	r4, r0
    ce54:	4608      	mov	r0, r1
    ce56:	602a      	str	r2, [r5, #0]
    ce58:	f7fd faae 	bl	a3b8 <_sbrk>
    ce5c:	1c43      	adds	r3, r0, #1
    ce5e:	d000      	beq.n	ce62 <_sbrk_r+0x16>
    ce60:	bd38      	pop	{r3, r4, r5, pc}
    ce62:	682b      	ldr	r3, [r5, #0]
    ce64:	2b00      	cmp	r3, #0
    ce66:	d0fb      	beq.n	ce60 <_sbrk_r+0x14>
    ce68:	6023      	str	r3, [r4, #0]
    ce6a:	bd38      	pop	{r3, r4, r5, pc}
    ce6c:	200053dc 	.word	0x200053dc

0000ce70 <_write_r>:
    ce70:	b538      	push	{r3, r4, r5, lr}
    ce72:	460c      	mov	r4, r1
    ce74:	4d08      	ldr	r5, [pc, #32]	; (ce98 <_write_r+0x28>)
    ce76:	4684      	mov	ip, r0
    ce78:	4611      	mov	r1, r2
    ce7a:	4620      	mov	r0, r4
    ce7c:	461a      	mov	r2, r3
    ce7e:	2300      	movs	r3, #0
    ce80:	602b      	str	r3, [r5, #0]
    ce82:	4664      	mov	r4, ip
    ce84:	f7fc fe56 	bl	9b34 <_write>
    ce88:	1c43      	adds	r3, r0, #1
    ce8a:	d000      	beq.n	ce8e <_write_r+0x1e>
    ce8c:	bd38      	pop	{r3, r4, r5, pc}
    ce8e:	682b      	ldr	r3, [r5, #0]
    ce90:	2b00      	cmp	r3, #0
    ce92:	d0fb      	beq.n	ce8c <_write_r+0x1c>
    ce94:	6023      	str	r3, [r4, #0]
    ce96:	bd38      	pop	{r3, r4, r5, pc}
    ce98:	200053dc 	.word	0x200053dc

0000ce9c <__errno>:
    ce9c:	4b01      	ldr	r3, [pc, #4]	; (cea4 <__errno+0x8>)
    ce9e:	6818      	ldr	r0, [r3, #0]
    cea0:	4770      	bx	lr
    cea2:	bf00      	nop
    cea4:	200048fc 	.word	0x200048fc

0000cea8 <__libc_init_array>:
    cea8:	b570      	push	{r4, r5, r6, lr}
    ceaa:	4e0d      	ldr	r6, [pc, #52]	; (cee0 <__libc_init_array+0x38>)
    ceac:	4d0d      	ldr	r5, [pc, #52]	; (cee4 <__libc_init_array+0x3c>)
    ceae:	1b76      	subs	r6, r6, r5
    ceb0:	10b6      	asrs	r6, r6, #2
    ceb2:	d006      	beq.n	cec2 <__libc_init_array+0x1a>
    ceb4:	2400      	movs	r4, #0
    ceb6:	f855 3b04 	ldr.w	r3, [r5], #4
    ceba:	3401      	adds	r4, #1
    cebc:	4798      	blx	r3
    cebe:	42a6      	cmp	r6, r4
    cec0:	d1f9      	bne.n	ceb6 <__libc_init_array+0xe>
    cec2:	4e09      	ldr	r6, [pc, #36]	; (cee8 <__libc_init_array+0x40>)
    cec4:	4d09      	ldr	r5, [pc, #36]	; (ceec <__libc_init_array+0x44>)
    cec6:	1b76      	subs	r6, r6, r5
    cec8:	f005 fb9e 	bl	12608 <___init_veneer>
    cecc:	10b6      	asrs	r6, r6, #2
    cece:	d006      	beq.n	cede <__libc_init_array+0x36>
    ced0:	2400      	movs	r4, #0
    ced2:	f855 3b04 	ldr.w	r3, [r5], #4
    ced6:	3401      	adds	r4, #1
    ced8:	4798      	blx	r3
    ceda:	42a6      	cmp	r6, r4
    cedc:	d1f9      	bne.n	ced2 <__libc_init_array+0x2a>
    cede:	bd70      	pop	{r4, r5, r6, pc}
    cee0:	60001e48 	.word	0x60001e48
    cee4:	60001e48 	.word	0x60001e48
    cee8:	60001e50 	.word	0x60001e50
    ceec:	60001e48 	.word	0x60001e48

0000cef0 <__retarget_lock_init_recursive>:
    cef0:	4770      	bx	lr
    cef2:	bf00      	nop

0000cef4 <__retarget_lock_close_recursive>:
    cef4:	4770      	bx	lr
    cef6:	bf00      	nop

0000cef8 <__retarget_lock_acquire_recursive>:
    cef8:	4770      	bx	lr
    cefa:	bf00      	nop

0000cefc <__retarget_lock_release_recursive>:
    cefc:	4770      	bx	lr
    cefe:	bf00      	nop
    cf00:	eba2 0003 	sub.w	r0, r2, r3
    cf04:	4770      	bx	lr
    cf06:	bf00      	nop

0000cf08 <strcmp>:
    cf08:	7802      	ldrb	r2, [r0, #0]
    cf0a:	780b      	ldrb	r3, [r1, #0]
    cf0c:	2a01      	cmp	r2, #1
    cf0e:	bf28      	it	cs
    cf10:	429a      	cmpcs	r2, r3
    cf12:	d1f5      	bne.n	cf00 <__retarget_lock_release_recursive+0x4>
    cf14:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    cf18:	ea40 0401 	orr.w	r4, r0, r1
    cf1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    cf20:	f06f 0c00 	mvn.w	ip, #0
    cf24:	ea4f 7244 	mov.w	r2, r4, lsl #29
    cf28:	b312      	cbz	r2, cf70 <strcmp+0x68>
    cf2a:	ea80 0401 	eor.w	r4, r0, r1
    cf2e:	f014 0f07 	tst.w	r4, #7
    cf32:	d16a      	bne.n	d00a <strcmp+0x102>
    cf34:	f000 0407 	and.w	r4, r0, #7
    cf38:	f020 0007 	bic.w	r0, r0, #7
    cf3c:	f004 0503 	and.w	r5, r4, #3
    cf40:	f021 0107 	bic.w	r1, r1, #7
    cf44:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    cf48:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    cf4c:	f014 0f04 	tst.w	r4, #4
    cf50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    cf54:	fa0c f405 	lsl.w	r4, ip, r5
    cf58:	ea62 0204 	orn	r2, r2, r4
    cf5c:	ea66 0604 	orn	r6, r6, r4
    cf60:	d00a      	beq.n	cf78 <strcmp+0x70>
    cf62:	ea63 0304 	orn	r3, r3, r4
    cf66:	4662      	mov	r2, ip
    cf68:	ea67 0704 	orn	r7, r7, r4
    cf6c:	4666      	mov	r6, ip
    cf6e:	e003      	b.n	cf78 <strcmp+0x70>
    cf70:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    cf74:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    cf78:	fa82 f54c 	uadd8	r5, r2, ip
    cf7c:	ea82 0406 	eor.w	r4, r2, r6
    cf80:	faa4 f48c 	sel	r4, r4, ip
    cf84:	bb6c      	cbnz	r4, cfe2 <strcmp+0xda>
    cf86:	fa83 f54c 	uadd8	r5, r3, ip
    cf8a:	ea83 0507 	eor.w	r5, r3, r7
    cf8e:	faa5 f58c 	sel	r5, r5, ip
    cf92:	b995      	cbnz	r5, cfba <strcmp+0xb2>
    cf94:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    cf98:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    cf9c:	fa82 f54c 	uadd8	r5, r2, ip
    cfa0:	ea82 0406 	eor.w	r4, r2, r6
    cfa4:	faa4 f48c 	sel	r4, r4, ip
    cfa8:	fa83 f54c 	uadd8	r5, r3, ip
    cfac:	ea83 0507 	eor.w	r5, r3, r7
    cfb0:	faa5 f58c 	sel	r5, r5, ip
    cfb4:	4325      	orrs	r5, r4
    cfb6:	d0db      	beq.n	cf70 <strcmp+0x68>
    cfb8:	b99c      	cbnz	r4, cfe2 <strcmp+0xda>
    cfba:	ba2d      	rev	r5, r5
    cfbc:	fab5 f485 	clz	r4, r5
    cfc0:	f024 0407 	bic.w	r4, r4, #7
    cfc4:	fa27 f104 	lsr.w	r1, r7, r4
    cfc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cfcc:	fa23 f304 	lsr.w	r3, r3, r4
    cfd0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cfd4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cfd8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    cfdc:	eba0 0001 	sub.w	r0, r0, r1
    cfe0:	4770      	bx	lr
    cfe2:	ba24      	rev	r4, r4
    cfe4:	fab4 f484 	clz	r4, r4
    cfe8:	f024 0407 	bic.w	r4, r4, #7
    cfec:	fa26 f104 	lsr.w	r1, r6, r4
    cff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    cff4:	fa22 f204 	lsr.w	r2, r2, r4
    cff8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    cffc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d000:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d004:	eba0 0001 	sub.w	r0, r0, r1
    d008:	4770      	bx	lr
    d00a:	f014 0f03 	tst.w	r4, #3
    d00e:	d13c      	bne.n	d08a <strcmp+0x182>
    d010:	f010 0403 	ands.w	r4, r0, #3
    d014:	d128      	bne.n	d068 <strcmp+0x160>
    d016:	f850 2b08 	ldr.w	r2, [r0], #8
    d01a:	f851 3b08 	ldr.w	r3, [r1], #8
    d01e:	fa82 f54c 	uadd8	r5, r2, ip
    d022:	ea82 0503 	eor.w	r5, r2, r3
    d026:	faa5 f58c 	sel	r5, r5, ip
    d02a:	b95d      	cbnz	r5, d044 <strcmp+0x13c>
    d02c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    d030:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d034:	fa82 f54c 	uadd8	r5, r2, ip
    d038:	ea82 0503 	eor.w	r5, r2, r3
    d03c:	faa5 f58c 	sel	r5, r5, ip
    d040:	2d00      	cmp	r5, #0
    d042:	d0e8      	beq.n	d016 <strcmp+0x10e>
    d044:	ba2d      	rev	r5, r5
    d046:	fab5 f485 	clz	r4, r5
    d04a:	f024 0407 	bic.w	r4, r4, #7
    d04e:	fa23 f104 	lsr.w	r1, r3, r4
    d052:	fa22 f204 	lsr.w	r2, r2, r4
    d056:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    d05a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    d05e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d062:	eba0 0001 	sub.w	r0, r0, r1
    d066:	4770      	bx	lr
    d068:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    d06c:	f020 0003 	bic.w	r0, r0, #3
    d070:	f850 2b08 	ldr.w	r2, [r0], #8
    d074:	f021 0103 	bic.w	r1, r1, #3
    d078:	f851 3b08 	ldr.w	r3, [r1], #8
    d07c:	fa0c f404 	lsl.w	r4, ip, r4
    d080:	ea62 0204 	orn	r2, r2, r4
    d084:	ea63 0304 	orn	r3, r3, r4
    d088:	e7c9      	b.n	d01e <strcmp+0x116>
    d08a:	f010 0403 	ands.w	r4, r0, #3
    d08e:	d01a      	beq.n	d0c6 <strcmp+0x1be>
    d090:	eba1 0104 	sub.w	r1, r1, r4
    d094:	f020 0003 	bic.w	r0, r0, #3
    d098:	07e4      	lsls	r4, r4, #31
    d09a:	f850 2b04 	ldr.w	r2, [r0], #4
    d09e:	d006      	beq.n	d0ae <strcmp+0x1a6>
    d0a0:	d20f      	bcs.n	d0c2 <strcmp+0x1ba>
    d0a2:	788b      	ldrb	r3, [r1, #2]
    d0a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    d0a8:	1ae4      	subs	r4, r4, r3
    d0aa:	d106      	bne.n	d0ba <strcmp+0x1b2>
    d0ac:	b12b      	cbz	r3, d0ba <strcmp+0x1b2>
    d0ae:	78cb      	ldrb	r3, [r1, #3]
    d0b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    d0b4:	1ae4      	subs	r4, r4, r3
    d0b6:	d100      	bne.n	d0ba <strcmp+0x1b2>
    d0b8:	b91b      	cbnz	r3, d0c2 <strcmp+0x1ba>
    d0ba:	4620      	mov	r0, r4
    d0bc:	f85d 4b10 	ldr.w	r4, [sp], #16
    d0c0:	4770      	bx	lr
    d0c2:	f101 0104 	add.w	r1, r1, #4
    d0c6:	f850 2b04 	ldr.w	r2, [r0], #4
    d0ca:	07cc      	lsls	r4, r1, #31
    d0cc:	f021 0103 	bic.w	r1, r1, #3
    d0d0:	f851 3b04 	ldr.w	r3, [r1], #4
    d0d4:	d848      	bhi.n	d168 <strcmp+0x260>
    d0d6:	d224      	bcs.n	d122 <strcmp+0x21a>
    d0d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    d0dc:	fa82 f54c 	uadd8	r5, r2, ip
    d0e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    d0e4:	faa5 f58c 	sel	r5, r5, ip
    d0e8:	d10a      	bne.n	d100 <strcmp+0x1f8>
    d0ea:	b965      	cbnz	r5, d106 <strcmp+0x1fe>
    d0ec:	f851 3b04 	ldr.w	r3, [r1], #4
    d0f0:	ea84 0402 	eor.w	r4, r4, r2
    d0f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    d0f8:	d10e      	bne.n	d118 <strcmp+0x210>
    d0fa:	f850 2b04 	ldr.w	r2, [r0], #4
    d0fe:	e7eb      	b.n	d0d8 <strcmp+0x1d0>
    d100:	ea4f 2313 	mov.w	r3, r3, lsr #8
    d104:	e055      	b.n	d1b2 <strcmp+0x2aa>
    d106:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    d10a:	d14d      	bne.n	d1a8 <strcmp+0x2a0>
    d10c:	7808      	ldrb	r0, [r1, #0]
    d10e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d112:	f1c0 0000 	rsb	r0, r0, #0
    d116:	4770      	bx	lr
    d118:	ea4f 6212 	mov.w	r2, r2, lsr #24
    d11c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    d120:	e047      	b.n	d1b2 <strcmp+0x2aa>
    d122:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    d126:	fa82 f54c 	uadd8	r5, r2, ip
    d12a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    d12e:	faa5 f58c 	sel	r5, r5, ip
    d132:	d10a      	bne.n	d14a <strcmp+0x242>
    d134:	b965      	cbnz	r5, d150 <strcmp+0x248>
    d136:	f851 3b04 	ldr.w	r3, [r1], #4
    d13a:	ea84 0402 	eor.w	r4, r4, r2
    d13e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    d142:	d10c      	bne.n	d15e <strcmp+0x256>
    d144:	f850 2b04 	ldr.w	r2, [r0], #4
    d148:	e7eb      	b.n	d122 <strcmp+0x21a>
    d14a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    d14e:	e030      	b.n	d1b2 <strcmp+0x2aa>
    d150:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    d154:	d128      	bne.n	d1a8 <strcmp+0x2a0>
    d156:	880b      	ldrh	r3, [r1, #0]
    d158:	ea4f 4212 	mov.w	r2, r2, lsr #16
    d15c:	e029      	b.n	d1b2 <strcmp+0x2aa>
    d15e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    d162:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    d166:	e024      	b.n	d1b2 <strcmp+0x2aa>
    d168:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    d16c:	fa82 f54c 	uadd8	r5, r2, ip
    d170:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    d174:	faa5 f58c 	sel	r5, r5, ip
    d178:	d10a      	bne.n	d190 <strcmp+0x288>
    d17a:	b965      	cbnz	r5, d196 <strcmp+0x28e>
    d17c:	f851 3b04 	ldr.w	r3, [r1], #4
    d180:	ea84 0402 	eor.w	r4, r4, r2
    d184:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    d188:	d109      	bne.n	d19e <strcmp+0x296>
    d18a:	f850 2b04 	ldr.w	r2, [r0], #4
    d18e:	e7eb      	b.n	d168 <strcmp+0x260>
    d190:	ea4f 6313 	mov.w	r3, r3, lsr #24
    d194:	e00d      	b.n	d1b2 <strcmp+0x2aa>
    d196:	f015 0fff 	tst.w	r5, #255	; 0xff
    d19a:	d105      	bne.n	d1a8 <strcmp+0x2a0>
    d19c:	680b      	ldr	r3, [r1, #0]
    d19e:	ea4f 2212 	mov.w	r2, r2, lsr #8
    d1a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    d1a6:	e004      	b.n	d1b2 <strcmp+0x2aa>
    d1a8:	f04f 0000 	mov.w	r0, #0
    d1ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d1b0:	4770      	bx	lr
    d1b2:	ba12      	rev	r2, r2
    d1b4:	ba1b      	rev	r3, r3
    d1b6:	fa82 f44c 	uadd8	r4, r2, ip
    d1ba:	ea82 0403 	eor.w	r4, r2, r3
    d1be:	faa4 f58c 	sel	r5, r4, ip
    d1c2:	fab5 f485 	clz	r4, r5
    d1c6:	fa02 f204 	lsl.w	r2, r2, r4
    d1ca:	fa03 f304 	lsl.w	r3, r3, r4
    d1ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
    d1d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    d1d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    d1da:	4770      	bx	lr

0000d1dc <strcpy>:
    d1dc:	ea80 0201 	eor.w	r2, r0, r1
    d1e0:	4684      	mov	ip, r0
    d1e2:	f012 0f03 	tst.w	r2, #3
    d1e6:	d14f      	bne.n	d288 <strcpy+0xac>
    d1e8:	f011 0f03 	tst.w	r1, #3
    d1ec:	d132      	bne.n	d254 <strcpy+0x78>
    d1ee:	f84d 4d04 	str.w	r4, [sp, #-4]!
    d1f2:	f011 0f04 	tst.w	r1, #4
    d1f6:	f851 3b04 	ldr.w	r3, [r1], #4
    d1fa:	d00b      	beq.n	d214 <strcpy+0x38>
    d1fc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    d200:	439a      	bics	r2, r3
    d202:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d206:	bf04      	itt	eq
    d208:	f84c 3b04 	streq.w	r3, [ip], #4
    d20c:	f851 3b04 	ldreq.w	r3, [r1], #4
    d210:	d116      	bne.n	d240 <strcpy+0x64>
    d212:	bf00      	nop
    d214:	f851 4b04 	ldr.w	r4, [r1], #4
    d218:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    d21c:	439a      	bics	r2, r3
    d21e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d222:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    d226:	d10b      	bne.n	d240 <strcpy+0x64>
    d228:	f84c 3b04 	str.w	r3, [ip], #4
    d22c:	43a2      	bics	r2, r4
    d22e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    d232:	bf04      	itt	eq
    d234:	f851 3b04 	ldreq.w	r3, [r1], #4
    d238:	f84c 4b04 	streq.w	r4, [ip], #4
    d23c:	d0ea      	beq.n	d214 <strcpy+0x38>
    d23e:	4623      	mov	r3, r4
    d240:	f80c 3b01 	strb.w	r3, [ip], #1
    d244:	f013 0fff 	tst.w	r3, #255	; 0xff
    d248:	ea4f 2333 	mov.w	r3, r3, ror #8
    d24c:	d1f8      	bne.n	d240 <strcpy+0x64>
    d24e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d252:	4770      	bx	lr
    d254:	f011 0f01 	tst.w	r1, #1
    d258:	d006      	beq.n	d268 <strcpy+0x8c>
    d25a:	f811 2b01 	ldrb.w	r2, [r1], #1
    d25e:	f80c 2b01 	strb.w	r2, [ip], #1
    d262:	2a00      	cmp	r2, #0
    d264:	bf08      	it	eq
    d266:	4770      	bxeq	lr
    d268:	f011 0f02 	tst.w	r1, #2
    d26c:	d0bf      	beq.n	d1ee <strcpy+0x12>
    d26e:	f831 2b02 	ldrh.w	r2, [r1], #2
    d272:	f012 0fff 	tst.w	r2, #255	; 0xff
    d276:	bf16      	itet	ne
    d278:	f82c 2b02 	strhne.w	r2, [ip], #2
    d27c:	f88c 2000 	strbeq.w	r2, [ip]
    d280:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    d284:	d1b3      	bne.n	d1ee <strcpy+0x12>
    d286:	4770      	bx	lr
    d288:	f811 2b01 	ldrb.w	r2, [r1], #1
    d28c:	f80c 2b01 	strb.w	r2, [ip], #1
    d290:	2a00      	cmp	r2, #0
    d292:	d1f9      	bne.n	d288 <strcpy+0xac>
    d294:	4770      	bx	lr
    d296:	bf00      	nop
	...

0000d2c0 <strlen>:
    d2c0:	f890 f000 	pld	[r0]
    d2c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    d2c8:	f020 0107 	bic.w	r1, r0, #7
    d2cc:	f06f 0c00 	mvn.w	ip, #0
    d2d0:	f010 0407 	ands.w	r4, r0, #7
    d2d4:	f891 f020 	pld	[r1, #32]
    d2d8:	f040 8049 	bne.w	d36e <strlen+0xae>
    d2dc:	f04f 0400 	mov.w	r4, #0
    d2e0:	f06f 0007 	mvn.w	r0, #7
    d2e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    d2e8:	f891 f040 	pld	[r1, #64]	; 0x40
    d2ec:	f100 0008 	add.w	r0, r0, #8
    d2f0:	fa82 f24c 	uadd8	r2, r2, ip
    d2f4:	faa4 f28c 	sel	r2, r4, ip
    d2f8:	fa83 f34c 	uadd8	r3, r3, ip
    d2fc:	faa2 f38c 	sel	r3, r2, ip
    d300:	bb4b      	cbnz	r3, d356 <strlen+0x96>
    d302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    d306:	fa82 f24c 	uadd8	r2, r2, ip
    d30a:	f100 0008 	add.w	r0, r0, #8
    d30e:	faa4 f28c 	sel	r2, r4, ip
    d312:	fa83 f34c 	uadd8	r3, r3, ip
    d316:	faa2 f38c 	sel	r3, r2, ip
    d31a:	b9e3      	cbnz	r3, d356 <strlen+0x96>
    d31c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    d320:	fa82 f24c 	uadd8	r2, r2, ip
    d324:	f100 0008 	add.w	r0, r0, #8
    d328:	faa4 f28c 	sel	r2, r4, ip
    d32c:	fa83 f34c 	uadd8	r3, r3, ip
    d330:	faa2 f38c 	sel	r3, r2, ip
    d334:	b97b      	cbnz	r3, d356 <strlen+0x96>
    d336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    d33a:	f101 0120 	add.w	r1, r1, #32
    d33e:	fa82 f24c 	uadd8	r2, r2, ip
    d342:	f100 0008 	add.w	r0, r0, #8
    d346:	faa4 f28c 	sel	r2, r4, ip
    d34a:	fa83 f34c 	uadd8	r3, r3, ip
    d34e:	faa2 f38c 	sel	r3, r2, ip
    d352:	2b00      	cmp	r3, #0
    d354:	d0c6      	beq.n	d2e4 <strlen+0x24>
    d356:	2a00      	cmp	r2, #0
    d358:	bf04      	itt	eq
    d35a:	3004      	addeq	r0, #4
    d35c:	461a      	moveq	r2, r3
    d35e:	ba12      	rev	r2, r2
    d360:	fab2 f282 	clz	r2, r2
    d364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    d368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    d36c:	4770      	bx	lr
    d36e:	e9d1 2300 	ldrd	r2, r3, [r1]
    d372:	f004 0503 	and.w	r5, r4, #3
    d376:	f1c4 0000 	rsb	r0, r4, #0
    d37a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d37e:	f014 0f04 	tst.w	r4, #4
    d382:	f891 f040 	pld	[r1, #64]	; 0x40
    d386:	fa0c f505 	lsl.w	r5, ip, r5
    d38a:	ea62 0205 	orn	r2, r2, r5
    d38e:	bf1c      	itt	ne
    d390:	ea63 0305 	ornne	r3, r3, r5
    d394:	4662      	movne	r2, ip
    d396:	f04f 0400 	mov.w	r4, #0
    d39a:	e7a9      	b.n	d2f0 <strlen+0x30>

0000d39c <__register_exitproc>:
    d39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d3a0:	f8df a07c 	ldr.w	sl, [pc, #124]	; d420 <__register_exitproc+0x84>
    d3a4:	4606      	mov	r6, r0
    d3a6:	f8da 0000 	ldr.w	r0, [sl]
    d3aa:	4698      	mov	r8, r3
    d3ac:	460f      	mov	r7, r1
    d3ae:	4691      	mov	r9, r2
    d3b0:	f7ff fda2 	bl	cef8 <__retarget_lock_acquire_recursive>
    d3b4:	4b18      	ldr	r3, [pc, #96]	; (d418 <__register_exitproc+0x7c>)
    d3b6:	681c      	ldr	r4, [r3, #0]
    d3b8:	b324      	cbz	r4, d404 <__register_exitproc+0x68>
    d3ba:	6865      	ldr	r5, [r4, #4]
    d3bc:	2d1f      	cmp	r5, #31
    d3be:	dc24      	bgt.n	d40a <__register_exitproc+0x6e>
    d3c0:	b95e      	cbnz	r6, d3da <__register_exitproc+0x3e>
    d3c2:	1c6b      	adds	r3, r5, #1
    d3c4:	3502      	adds	r5, #2
    d3c6:	f8da 0000 	ldr.w	r0, [sl]
    d3ca:	6063      	str	r3, [r4, #4]
    d3cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    d3d0:	f7ff fd94 	bl	cefc <__retarget_lock_release_recursive>
    d3d4:	2000      	movs	r0, #0
    d3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d3da:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    d3de:	2301      	movs	r3, #1
    d3e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    d3e4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    d3e8:	40ab      	lsls	r3, r5
    d3ea:	431a      	orrs	r2, r3
    d3ec:	2e02      	cmp	r6, #2
    d3ee:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    d3f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    d3f6:	d1e4      	bne.n	d3c2 <__register_exitproc+0x26>
    d3f8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    d3fc:	431a      	orrs	r2, r3
    d3fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    d402:	e7de      	b.n	d3c2 <__register_exitproc+0x26>
    d404:	4c05      	ldr	r4, [pc, #20]	; (d41c <__register_exitproc+0x80>)
    d406:	601c      	str	r4, [r3, #0]
    d408:	e7d7      	b.n	d3ba <__register_exitproc+0x1e>
    d40a:	f8da 0000 	ldr.w	r0, [sl]
    d40e:	f7ff fd75 	bl	cefc <__retarget_lock_release_recursive>
    d412:	f04f 30ff 	mov.w	r0, #4294967295
    d416:	e7de      	b.n	d3d6 <__register_exitproc+0x3a>
    d418:	200050b8 	.word	0x200050b8
    d41c:	200050bc 	.word	0x200050bc
    d420:	20004368 	.word	0x20004368

0000d424 <_malloc_trim_r>:
    d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d426:	4f24      	ldr	r7, [pc, #144]	; (d4b8 <_malloc_trim_r+0x94>)
    d428:	460c      	mov	r4, r1
    d42a:	4606      	mov	r6, r0
    d42c:	f7fe fe98 	bl	c160 <__malloc_lock>
    d430:	68bb      	ldr	r3, [r7, #8]
    d432:	685d      	ldr	r5, [r3, #4]
    d434:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    d438:	310f      	adds	r1, #15
    d43a:	f025 0503 	bic.w	r5, r5, #3
    d43e:	194b      	adds	r3, r1, r5
    d440:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    d444:	f023 030f 	bic.w	r3, r3, #15
    d448:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    d44c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    d450:	db07      	blt.n	d462 <_malloc_trim_r+0x3e>
    d452:	2100      	movs	r1, #0
    d454:	4630      	mov	r0, r6
    d456:	f7ff fcf9 	bl	ce4c <_sbrk_r>
    d45a:	68bb      	ldr	r3, [r7, #8]
    d45c:	442b      	add	r3, r5
    d45e:	4298      	cmp	r0, r3
    d460:	d004      	beq.n	d46c <_malloc_trim_r+0x48>
    d462:	4630      	mov	r0, r6
    d464:	f7fe fe82 	bl	c16c <__malloc_unlock>
    d468:	2000      	movs	r0, #0
    d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d46c:	4261      	negs	r1, r4
    d46e:	4630      	mov	r0, r6
    d470:	f7ff fcec 	bl	ce4c <_sbrk_r>
    d474:	3001      	adds	r0, #1
    d476:	d00d      	beq.n	d494 <_malloc_trim_r+0x70>
    d478:	4a10      	ldr	r2, [pc, #64]	; (d4bc <_malloc_trim_r+0x98>)
    d47a:	68bb      	ldr	r3, [r7, #8]
    d47c:	1b2d      	subs	r5, r5, r4
    d47e:	f045 0501 	orr.w	r5, r5, #1
    d482:	605d      	str	r5, [r3, #4]
    d484:	6813      	ldr	r3, [r2, #0]
    d486:	4630      	mov	r0, r6
    d488:	1b1b      	subs	r3, r3, r4
    d48a:	6013      	str	r3, [r2, #0]
    d48c:	f7fe fe6e 	bl	c16c <__malloc_unlock>
    d490:	2001      	movs	r0, #1
    d492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d494:	2100      	movs	r1, #0
    d496:	4630      	mov	r0, r6
    d498:	f7ff fcd8 	bl	ce4c <_sbrk_r>
    d49c:	68ba      	ldr	r2, [r7, #8]
    d49e:	1a83      	subs	r3, r0, r2
    d4a0:	2b0f      	cmp	r3, #15
    d4a2:	ddde      	ble.n	d462 <_malloc_trim_r+0x3e>
    d4a4:	f043 0301 	orr.w	r3, r3, #1
    d4a8:	6053      	str	r3, [r2, #4]
    d4aa:	4b05      	ldr	r3, [pc, #20]	; (d4c0 <_malloc_trim_r+0x9c>)
    d4ac:	4903      	ldr	r1, [pc, #12]	; (d4bc <_malloc_trim_r+0x98>)
    d4ae:	681b      	ldr	r3, [r3, #0]
    d4b0:	1ac0      	subs	r0, r0, r3
    d4b2:	6008      	str	r0, [r1, #0]
    d4b4:	e7d5      	b.n	d462 <_malloc_trim_r+0x3e>
    d4b6:	bf00      	nop
    d4b8:	200044e0 	.word	0x200044e0
    d4bc:	20005258 	.word	0x20005258
    d4c0:	200048e8 	.word	0x200048e8

0000d4c4 <_free_r>:
    d4c4:	2900      	cmp	r1, #0
    d4c6:	d061      	beq.n	d58c <_free_r+0xc8>
    d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4ca:	460c      	mov	r4, r1
    d4cc:	4606      	mov	r6, r0
    d4ce:	f7fe fe47 	bl	c160 <__malloc_lock>
    d4d2:	f854 2c04 	ldr.w	r2, [r4, #-4]
    d4d6:	4f7b      	ldr	r7, [pc, #492]	; (d6c4 <_free_r+0x200>)
    d4d8:	f1a4 0508 	sub.w	r5, r4, #8
    d4dc:	f022 0101 	bic.w	r1, r2, #1
    d4e0:	eb05 0c01 	add.w	ip, r5, r1
    d4e4:	68b8      	ldr	r0, [r7, #8]
    d4e6:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d4ea:	4560      	cmp	r0, ip
    d4ec:	f023 0303 	bic.w	r3, r3, #3
    d4f0:	f000 808b 	beq.w	d60a <_free_r+0x146>
    d4f4:	07d2      	lsls	r2, r2, #31
    d4f6:	f8cc 3004 	str.w	r3, [ip, #4]
    d4fa:	d432      	bmi.n	d562 <_free_r+0x9e>
    d4fc:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d500:	1aad      	subs	r5, r5, r2
    d502:	4411      	add	r1, r2
    d504:	68aa      	ldr	r2, [r5, #8]
    d506:	f107 0008 	add.w	r0, r7, #8
    d50a:	4282      	cmp	r2, r0
    d50c:	d06a      	beq.n	d5e4 <_free_r+0x120>
    d50e:	eb0c 0403 	add.w	r4, ip, r3
    d512:	f8d4 e004 	ldr.w	lr, [r4, #4]
    d516:	68ec      	ldr	r4, [r5, #12]
    d518:	60d4      	str	r4, [r2, #12]
    d51a:	f01e 0f01 	tst.w	lr, #1
    d51e:	60a2      	str	r2, [r4, #8]
    d520:	f000 8097 	beq.w	d652 <_free_r+0x18e>
    d524:	f041 0301 	orr.w	r3, r1, #1
    d528:	606b      	str	r3, [r5, #4]
    d52a:	f8cc 1000 	str.w	r1, [ip]
    d52e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d532:	d235      	bcs.n	d5a0 <_free_r+0xdc>
    d534:	6878      	ldr	r0, [r7, #4]
    d536:	08cb      	lsrs	r3, r1, #3
    d538:	2201      	movs	r2, #1
    d53a:	0949      	lsrs	r1, r1, #5
    d53c:	3301      	adds	r3, #1
    d53e:	408a      	lsls	r2, r1
    d540:	4302      	orrs	r2, r0
    d542:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    d546:	607a      	str	r2, [r7, #4]
    d548:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    d54c:	3a08      	subs	r2, #8
    d54e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    d552:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d556:	60cd      	str	r5, [r1, #12]
    d558:	4630      	mov	r0, r6
    d55a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d55e:	f7fe be05 	b.w	c16c <__malloc_unlock>
    d562:	eb0c 0203 	add.w	r2, ip, r3
    d566:	6852      	ldr	r2, [r2, #4]
    d568:	07d0      	lsls	r0, r2, #31
    d56a:	d410      	bmi.n	d58e <_free_r+0xca>
    d56c:	4419      	add	r1, r3
    d56e:	f107 0008 	add.w	r0, r7, #8
    d572:	f8dc 3008 	ldr.w	r3, [ip, #8]
    d576:	4283      	cmp	r3, r0
    d578:	d073      	beq.n	d662 <_free_r+0x19e>
    d57a:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d57e:	60da      	str	r2, [r3, #12]
    d580:	6093      	str	r3, [r2, #8]
    d582:	f041 0301 	orr.w	r3, r1, #1
    d586:	606b      	str	r3, [r5, #4]
    d588:	5069      	str	r1, [r5, r1]
    d58a:	e7d0      	b.n	d52e <_free_r+0x6a>
    d58c:	4770      	bx	lr
    d58e:	f041 0301 	orr.w	r3, r1, #1
    d592:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d596:	f844 3c04 	str.w	r3, [r4, #-4]
    d59a:	f8cc 1000 	str.w	r1, [ip]
    d59e:	d3c9      	bcc.n	d534 <_free_r+0x70>
    d5a0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    d5a4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    d5a8:	d248      	bcs.n	d63c <_free_r+0x178>
    d5aa:	098b      	lsrs	r3, r1, #6
    d5ac:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d5b0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d5b4:	00c3      	lsls	r3, r0, #3
    d5b6:	18f8      	adds	r0, r7, r3
    d5b8:	58fb      	ldr	r3, [r7, r3]
    d5ba:	3808      	subs	r0, #8
    d5bc:	4298      	cmp	r0, r3
    d5be:	d059      	beq.n	d674 <_free_r+0x1b0>
    d5c0:	685a      	ldr	r2, [r3, #4]
    d5c2:	f022 0203 	bic.w	r2, r2, #3
    d5c6:	428a      	cmp	r2, r1
    d5c8:	d902      	bls.n	d5d0 <_free_r+0x10c>
    d5ca:	689b      	ldr	r3, [r3, #8]
    d5cc:	4298      	cmp	r0, r3
    d5ce:	d1f7      	bne.n	d5c0 <_free_r+0xfc>
    d5d0:	68d8      	ldr	r0, [r3, #12]
    d5d2:	e9c5 3002 	strd	r3, r0, [r5, #8]
    d5d6:	6085      	str	r5, [r0, #8]
    d5d8:	60dd      	str	r5, [r3, #12]
    d5da:	4630      	mov	r0, r6
    d5dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d5e0:	f7fe bdc4 	b.w	c16c <__malloc_unlock>
    d5e4:	eb0c 0203 	add.w	r2, ip, r3
    d5e8:	6852      	ldr	r2, [r2, #4]
    d5ea:	07d2      	lsls	r2, r2, #31
    d5ec:	d463      	bmi.n	d6b6 <_free_r+0x1f2>
    d5ee:	440b      	add	r3, r1
    d5f0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    d5f4:	60ca      	str	r2, [r1, #12]
    d5f6:	6091      	str	r1, [r2, #8]
    d5f8:	f043 0201 	orr.w	r2, r3, #1
    d5fc:	606a      	str	r2, [r5, #4]
    d5fe:	4630      	mov	r0, r6
    d600:	50eb      	str	r3, [r5, r3]
    d602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d606:	f7fe bdb1 	b.w	c16c <__malloc_unlock>
    d60a:	440b      	add	r3, r1
    d60c:	07d1      	lsls	r1, r2, #31
    d60e:	d407      	bmi.n	d620 <_free_r+0x15c>
    d610:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d614:	1aad      	subs	r5, r5, r2
    d616:	4413      	add	r3, r2
    d618:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    d61c:	60ca      	str	r2, [r1, #12]
    d61e:	6091      	str	r1, [r2, #8]
    d620:	f043 0201 	orr.w	r2, r3, #1
    d624:	606a      	str	r2, [r5, #4]
    d626:	4a28      	ldr	r2, [pc, #160]	; (d6c8 <_free_r+0x204>)
    d628:	60bd      	str	r5, [r7, #8]
    d62a:	6812      	ldr	r2, [r2, #0]
    d62c:	429a      	cmp	r2, r3
    d62e:	d893      	bhi.n	d558 <_free_r+0x94>
    d630:	4b26      	ldr	r3, [pc, #152]	; (d6cc <_free_r+0x208>)
    d632:	4630      	mov	r0, r6
    d634:	6819      	ldr	r1, [r3, #0]
    d636:	f7ff fef5 	bl	d424 <_malloc_trim_r>
    d63a:	e78d      	b.n	d558 <_free_r+0x94>
    d63c:	2b14      	cmp	r3, #20
    d63e:	d90a      	bls.n	d656 <_free_r+0x192>
    d640:	2b54      	cmp	r3, #84	; 0x54
    d642:	d81f      	bhi.n	d684 <_free_r+0x1c0>
    d644:	0b0b      	lsrs	r3, r1, #12
    d646:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d64a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    d64e:	00c3      	lsls	r3, r0, #3
    d650:	e7b1      	b.n	d5b6 <_free_r+0xf2>
    d652:	4419      	add	r1, r3
    d654:	e78d      	b.n	d572 <_free_r+0xae>
    d656:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d65a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    d65e:	00c3      	lsls	r3, r0, #3
    d660:	e7a9      	b.n	d5b6 <_free_r+0xf2>
    d662:	f041 0301 	orr.w	r3, r1, #1
    d666:	e9c7 5504 	strd	r5, r5, [r7, #16]
    d66a:	e9c5 0002 	strd	r0, r0, [r5, #8]
    d66e:	606b      	str	r3, [r5, #4]
    d670:	5069      	str	r1, [r5, r1]
    d672:	e771      	b.n	d558 <_free_r+0x94>
    d674:	6879      	ldr	r1, [r7, #4]
    d676:	1092      	asrs	r2, r2, #2
    d678:	2401      	movs	r4, #1
    d67a:	fa04 f202 	lsl.w	r2, r4, r2
    d67e:	430a      	orrs	r2, r1
    d680:	607a      	str	r2, [r7, #4]
    d682:	e7a6      	b.n	d5d2 <_free_r+0x10e>
    d684:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d688:	d806      	bhi.n	d698 <_free_r+0x1d4>
    d68a:	0bcb      	lsrs	r3, r1, #15
    d68c:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d690:	f103 0277 	add.w	r2, r3, #119	; 0x77
    d694:	00c3      	lsls	r3, r0, #3
    d696:	e78e      	b.n	d5b6 <_free_r+0xf2>
    d698:	f240 5254 	movw	r2, #1364	; 0x554
    d69c:	4293      	cmp	r3, r2
    d69e:	d806      	bhi.n	d6ae <_free_r+0x1ea>
    d6a0:	0c8b      	lsrs	r3, r1, #18
    d6a2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d6a6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    d6aa:	00c3      	lsls	r3, r0, #3
    d6ac:	e783      	b.n	d5b6 <_free_r+0xf2>
    d6ae:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d6b2:	227e      	movs	r2, #126	; 0x7e
    d6b4:	e77f      	b.n	d5b6 <_free_r+0xf2>
    d6b6:	f041 0301 	orr.w	r3, r1, #1
    d6ba:	606b      	str	r3, [r5, #4]
    d6bc:	f8cc 1000 	str.w	r1, [ip]
    d6c0:	e74a      	b.n	d558 <_free_r+0x94>
    d6c2:	bf00      	nop
    d6c4:	200044e0 	.word	0x200044e0
    d6c8:	200048ec 	.word	0x200048ec
    d6cc:	20005288 	.word	0x20005288

0000d6d0 <__ascii_mbtowc>:
    d6d0:	b082      	sub	sp, #8
    d6d2:	b149      	cbz	r1, d6e8 <__ascii_mbtowc+0x18>
    d6d4:	b15a      	cbz	r2, d6ee <__ascii_mbtowc+0x1e>
    d6d6:	b16b      	cbz	r3, d6f4 <__ascii_mbtowc+0x24>
    d6d8:	7813      	ldrb	r3, [r2, #0]
    d6da:	600b      	str	r3, [r1, #0]
    d6dc:	7812      	ldrb	r2, [r2, #0]
    d6de:	1e10      	subs	r0, r2, #0
    d6e0:	bf18      	it	ne
    d6e2:	2001      	movne	r0, #1
    d6e4:	b002      	add	sp, #8
    d6e6:	4770      	bx	lr
    d6e8:	a901      	add	r1, sp, #4
    d6ea:	2a00      	cmp	r2, #0
    d6ec:	d1f3      	bne.n	d6d6 <__ascii_mbtowc+0x6>
    d6ee:	4610      	mov	r0, r2
    d6f0:	b002      	add	sp, #8
    d6f2:	4770      	bx	lr
    d6f4:	f06f 0001 	mvn.w	r0, #1
    d6f8:	e7f4      	b.n	d6e4 <__ascii_mbtowc+0x14>
    d6fa:	bf00      	nop

0000d6fc <_Balloc>:
    d6fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d6fe:	b570      	push	{r4, r5, r6, lr}
    d700:	4605      	mov	r5, r0
    d702:	460c      	mov	r4, r1
    d704:	b14b      	cbz	r3, d71a <_Balloc+0x1e>
    d706:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    d70a:	b180      	cbz	r0, d72e <_Balloc+0x32>
    d70c:	6802      	ldr	r2, [r0, #0]
    d70e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    d712:	2300      	movs	r3, #0
    d714:	e9c0 3303 	strd	r3, r3, [r0, #12]
    d718:	bd70      	pop	{r4, r5, r6, pc}
    d71a:	2221      	movs	r2, #33	; 0x21
    d71c:	2104      	movs	r1, #4
    d71e:	f002 fb33 	bl	fd88 <_calloc_r>
    d722:	4603      	mov	r3, r0
    d724:	6468      	str	r0, [r5, #68]	; 0x44
    d726:	2800      	cmp	r0, #0
    d728:	d1ed      	bne.n	d706 <_Balloc+0xa>
    d72a:	2000      	movs	r0, #0
    d72c:	bd70      	pop	{r4, r5, r6, pc}
    d72e:	2101      	movs	r1, #1
    d730:	fa01 f604 	lsl.w	r6, r1, r4
    d734:	1d72      	adds	r2, r6, #5
    d736:	0092      	lsls	r2, r2, #2
    d738:	4628      	mov	r0, r5
    d73a:	f002 fb25 	bl	fd88 <_calloc_r>
    d73e:	2800      	cmp	r0, #0
    d740:	d0f3      	beq.n	d72a <_Balloc+0x2e>
    d742:	e9c0 4601 	strd	r4, r6, [r0, #4]
    d746:	e7e4      	b.n	d712 <_Balloc+0x16>

0000d748 <_Bfree>:
    d748:	b131      	cbz	r1, d758 <_Bfree+0x10>
    d74a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d74c:	684a      	ldr	r2, [r1, #4]
    d74e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    d752:	6008      	str	r0, [r1, #0]
    d754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    d758:	4770      	bx	lr
    d75a:	bf00      	nop

0000d75c <__multadd>:
    d75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d760:	690e      	ldr	r6, [r1, #16]
    d762:	4680      	mov	r8, r0
    d764:	460f      	mov	r7, r1
    d766:	461d      	mov	r5, r3
    d768:	f101 0e14 	add.w	lr, r1, #20
    d76c:	2000      	movs	r0, #0
    d76e:	f8de 1000 	ldr.w	r1, [lr]
    d772:	b28c      	uxth	r4, r1
    d774:	fb02 5304 	mla	r3, r2, r4, r5
    d778:	0c09      	lsrs	r1, r1, #16
    d77a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    d77e:	fb02 cc01 	mla	ip, r2, r1, ip
    d782:	3001      	adds	r0, #1
    d784:	b29c      	uxth	r4, r3
    d786:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    d78a:	4286      	cmp	r6, r0
    d78c:	f84e 4b04 	str.w	r4, [lr], #4
    d790:	ea4f 451c 	mov.w	r5, ip, lsr #16
    d794:	dceb      	bgt.n	d76e <__multadd+0x12>
    d796:	b13d      	cbz	r5, d7a8 <__multadd+0x4c>
    d798:	68bb      	ldr	r3, [r7, #8]
    d79a:	42b3      	cmp	r3, r6
    d79c:	dd07      	ble.n	d7ae <__multadd+0x52>
    d79e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    d7a2:	3601      	adds	r6, #1
    d7a4:	615d      	str	r5, [r3, #20]
    d7a6:	613e      	str	r6, [r7, #16]
    d7a8:	4638      	mov	r0, r7
    d7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7ae:	6879      	ldr	r1, [r7, #4]
    d7b0:	4640      	mov	r0, r8
    d7b2:	3101      	adds	r1, #1
    d7b4:	f7ff ffa2 	bl	d6fc <_Balloc>
    d7b8:	4604      	mov	r4, r0
    d7ba:	b1b0      	cbz	r0, d7ea <__multadd+0x8e>
    d7bc:	693a      	ldr	r2, [r7, #16]
    d7be:	3202      	adds	r2, #2
    d7c0:	f107 010c 	add.w	r1, r7, #12
    d7c4:	0092      	lsls	r2, r2, #2
    d7c6:	300c      	adds	r0, #12
    d7c8:	f7fc fc6a 	bl	a0a0 <memcpy>
    d7cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    d7d0:	687a      	ldr	r2, [r7, #4]
    d7d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d7d6:	6039      	str	r1, [r7, #0]
    d7d8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    d7dc:	4627      	mov	r7, r4
    d7de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    d7e2:	3601      	adds	r6, #1
    d7e4:	615d      	str	r5, [r3, #20]
    d7e6:	613e      	str	r6, [r7, #16]
    d7e8:	e7de      	b.n	d7a8 <__multadd+0x4c>
    d7ea:	4b03      	ldr	r3, [pc, #12]	; (d7f8 <__multadd+0x9c>)
    d7ec:	4803      	ldr	r0, [pc, #12]	; (d7fc <__multadd+0xa0>)
    d7ee:	4622      	mov	r2, r4
    d7f0:	21ba      	movs	r1, #186	; 0xba
    d7f2:	f002 faa9 	bl	fd48 <__assert_func>
    d7f6:	bf00      	nop
    d7f8:	20000aa4 	.word	0x20000aa4
    d7fc:	20000ab8 	.word	0x20000ab8

0000d800 <__hi0bits>:
    d800:	0c03      	lsrs	r3, r0, #16
    d802:	041b      	lsls	r3, r3, #16
    d804:	b9d3      	cbnz	r3, d83c <__hi0bits+0x3c>
    d806:	0400      	lsls	r0, r0, #16
    d808:	2310      	movs	r3, #16
    d80a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    d80e:	bf04      	itt	eq
    d810:	0200      	lsleq	r0, r0, #8
    d812:	3308      	addeq	r3, #8
    d814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    d818:	bf04      	itt	eq
    d81a:	0100      	lsleq	r0, r0, #4
    d81c:	3304      	addeq	r3, #4
    d81e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    d822:	bf04      	itt	eq
    d824:	0080      	lsleq	r0, r0, #2
    d826:	3302      	addeq	r3, #2
    d828:	2800      	cmp	r0, #0
    d82a:	db05      	blt.n	d838 <__hi0bits+0x38>
    d82c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    d830:	f103 0301 	add.w	r3, r3, #1
    d834:	bf08      	it	eq
    d836:	2320      	moveq	r3, #32
    d838:	4618      	mov	r0, r3
    d83a:	4770      	bx	lr
    d83c:	2300      	movs	r3, #0
    d83e:	e7e4      	b.n	d80a <__hi0bits+0xa>

0000d840 <__lo0bits>:
    d840:	6803      	ldr	r3, [r0, #0]
    d842:	f013 0207 	ands.w	r2, r3, #7
    d846:	d008      	beq.n	d85a <__lo0bits+0x1a>
    d848:	07d9      	lsls	r1, r3, #31
    d84a:	d41f      	bmi.n	d88c <__lo0bits+0x4c>
    d84c:	079a      	lsls	r2, r3, #30
    d84e:	d522      	bpl.n	d896 <__lo0bits+0x56>
    d850:	085b      	lsrs	r3, r3, #1
    d852:	6003      	str	r3, [r0, #0]
    d854:	2201      	movs	r2, #1
    d856:	4610      	mov	r0, r2
    d858:	4770      	bx	lr
    d85a:	b299      	uxth	r1, r3
    d85c:	b909      	cbnz	r1, d862 <__lo0bits+0x22>
    d85e:	0c1b      	lsrs	r3, r3, #16
    d860:	2210      	movs	r2, #16
    d862:	b2d9      	uxtb	r1, r3
    d864:	b909      	cbnz	r1, d86a <__lo0bits+0x2a>
    d866:	3208      	adds	r2, #8
    d868:	0a1b      	lsrs	r3, r3, #8
    d86a:	0719      	lsls	r1, r3, #28
    d86c:	bf04      	itt	eq
    d86e:	091b      	lsreq	r3, r3, #4
    d870:	3204      	addeq	r2, #4
    d872:	0799      	lsls	r1, r3, #30
    d874:	bf04      	itt	eq
    d876:	089b      	lsreq	r3, r3, #2
    d878:	3202      	addeq	r2, #2
    d87a:	07d9      	lsls	r1, r3, #31
    d87c:	d403      	bmi.n	d886 <__lo0bits+0x46>
    d87e:	085b      	lsrs	r3, r3, #1
    d880:	f102 0201 	add.w	r2, r2, #1
    d884:	d005      	beq.n	d892 <__lo0bits+0x52>
    d886:	6003      	str	r3, [r0, #0]
    d888:	4610      	mov	r0, r2
    d88a:	4770      	bx	lr
    d88c:	2200      	movs	r2, #0
    d88e:	4610      	mov	r0, r2
    d890:	4770      	bx	lr
    d892:	2220      	movs	r2, #32
    d894:	e7df      	b.n	d856 <__lo0bits+0x16>
    d896:	089b      	lsrs	r3, r3, #2
    d898:	2202      	movs	r2, #2
    d89a:	6003      	str	r3, [r0, #0]
    d89c:	4610      	mov	r0, r2
    d89e:	4770      	bx	lr

0000d8a0 <__i2b>:
    d8a0:	b538      	push	{r3, r4, r5, lr}
    d8a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d8a4:	4604      	mov	r4, r0
    d8a6:	460d      	mov	r5, r1
    d8a8:	b14b      	cbz	r3, d8be <__i2b+0x1e>
    d8aa:	6858      	ldr	r0, [r3, #4]
    d8ac:	b1b0      	cbz	r0, d8dc <__i2b+0x3c>
    d8ae:	6802      	ldr	r2, [r0, #0]
    d8b0:	605a      	str	r2, [r3, #4]
    d8b2:	2200      	movs	r2, #0
    d8b4:	2301      	movs	r3, #1
    d8b6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    d8ba:	60c2      	str	r2, [r0, #12]
    d8bc:	bd38      	pop	{r3, r4, r5, pc}
    d8be:	2221      	movs	r2, #33	; 0x21
    d8c0:	2104      	movs	r1, #4
    d8c2:	f002 fa61 	bl	fd88 <_calloc_r>
    d8c6:	4603      	mov	r3, r0
    d8c8:	6460      	str	r0, [r4, #68]	; 0x44
    d8ca:	2800      	cmp	r0, #0
    d8cc:	d1ed      	bne.n	d8aa <__i2b+0xa>
    d8ce:	4b09      	ldr	r3, [pc, #36]	; (d8f4 <__i2b+0x54>)
    d8d0:	4809      	ldr	r0, [pc, #36]	; (d8f8 <__i2b+0x58>)
    d8d2:	2200      	movs	r2, #0
    d8d4:	f240 1145 	movw	r1, #325	; 0x145
    d8d8:	f002 fa36 	bl	fd48 <__assert_func>
    d8dc:	221c      	movs	r2, #28
    d8de:	2101      	movs	r1, #1
    d8e0:	4620      	mov	r0, r4
    d8e2:	f002 fa51 	bl	fd88 <_calloc_r>
    d8e6:	2800      	cmp	r0, #0
    d8e8:	d0f1      	beq.n	d8ce <__i2b+0x2e>
    d8ea:	2201      	movs	r2, #1
    d8ec:	2302      	movs	r3, #2
    d8ee:	e9c0 2301 	strd	r2, r3, [r0, #4]
    d8f2:	e7de      	b.n	d8b2 <__i2b+0x12>
    d8f4:	20000aa4 	.word	0x20000aa4
    d8f8:	20000ab8 	.word	0x20000ab8

0000d8fc <__multiply>:
    d8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d900:	690e      	ldr	r6, [r1, #16]
    d902:	6915      	ldr	r5, [r2, #16]
    d904:	42ae      	cmp	r6, r5
    d906:	b085      	sub	sp, #20
    d908:	4688      	mov	r8, r1
    d90a:	4614      	mov	r4, r2
    d90c:	db05      	blt.n	d91a <__multiply+0x1e>
    d90e:	462a      	mov	r2, r5
    d910:	4623      	mov	r3, r4
    d912:	4635      	mov	r5, r6
    d914:	460c      	mov	r4, r1
    d916:	4616      	mov	r6, r2
    d918:	4698      	mov	r8, r3
    d91a:	68a3      	ldr	r3, [r4, #8]
    d91c:	6861      	ldr	r1, [r4, #4]
    d91e:	19af      	adds	r7, r5, r6
    d920:	42bb      	cmp	r3, r7
    d922:	bfb8      	it	lt
    d924:	3101      	addlt	r1, #1
    d926:	f7ff fee9 	bl	d6fc <_Balloc>
    d92a:	9001      	str	r0, [sp, #4]
    d92c:	2800      	cmp	r0, #0
    d92e:	f000 8087 	beq.w	da40 <__multiply+0x144>
    d932:	9b01      	ldr	r3, [sp, #4]
    d934:	f103 0914 	add.w	r9, r3, #20
    d938:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    d93c:	45d1      	cmp	r9, sl
    d93e:	d205      	bcs.n	d94c <__multiply+0x50>
    d940:	464b      	mov	r3, r9
    d942:	2200      	movs	r2, #0
    d944:	f843 2b04 	str.w	r2, [r3], #4
    d948:	459a      	cmp	sl, r3
    d94a:	d8fb      	bhi.n	d944 <__multiply+0x48>
    d94c:	f108 0814 	add.w	r8, r8, #20
    d950:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    d954:	f104 0314 	add.w	r3, r4, #20
    d958:	45d8      	cmp	r8, fp
    d95a:	461a      	mov	r2, r3
    d95c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    d960:	d25f      	bcs.n	da22 <__multiply+0x126>
    d962:	1b2b      	subs	r3, r5, r4
    d964:	3b15      	subs	r3, #21
    d966:	f023 0303 	bic.w	r3, r3, #3
    d96a:	3304      	adds	r3, #4
    d96c:	3415      	adds	r4, #21
    d96e:	42a5      	cmp	r5, r4
    d970:	bf38      	it	cc
    d972:	2304      	movcc	r3, #4
    d974:	e9cd a702 	strd	sl, r7, [sp, #8]
    d978:	46ac      	mov	ip, r5
    d97a:	461f      	mov	r7, r3
    d97c:	4692      	mov	sl, r2
    d97e:	e005      	b.n	d98c <__multiply+0x90>
    d980:	0c09      	lsrs	r1, r1, #16
    d982:	d129      	bne.n	d9d8 <__multiply+0xdc>
    d984:	45c3      	cmp	fp, r8
    d986:	f109 0904 	add.w	r9, r9, #4
    d98a:	d948      	bls.n	da1e <__multiply+0x122>
    d98c:	f858 1b04 	ldr.w	r1, [r8], #4
    d990:	b28d      	uxth	r5, r1
    d992:	2d00      	cmp	r5, #0
    d994:	d0f4      	beq.n	d980 <__multiply+0x84>
    d996:	4656      	mov	r6, sl
    d998:	464c      	mov	r4, r9
    d99a:	2300      	movs	r3, #0
    d99c:	f856 1b04 	ldr.w	r1, [r6], #4
    d9a0:	6822      	ldr	r2, [r4, #0]
    d9a2:	fa1f fe81 	uxth.w	lr, r1
    d9a6:	b290      	uxth	r0, r2
    d9a8:	0c09      	lsrs	r1, r1, #16
    d9aa:	fb05 000e 	mla	r0, r5, lr, r0
    d9ae:	0c12      	lsrs	r2, r2, #16
    d9b0:	4403      	add	r3, r0
    d9b2:	fb05 2201 	mla	r2, r5, r1, r2
    d9b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d9ba:	b29b      	uxth	r3, r3
    d9bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d9c0:	45b4      	cmp	ip, r6
    d9c2:	f844 3b04 	str.w	r3, [r4], #4
    d9c6:	ea4f 4312 	mov.w	r3, r2, lsr #16
    d9ca:	d8e7      	bhi.n	d99c <__multiply+0xa0>
    d9cc:	f849 3007 	str.w	r3, [r9, r7]
    d9d0:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d9d4:	0c09      	lsrs	r1, r1, #16
    d9d6:	d0d5      	beq.n	d984 <__multiply+0x88>
    d9d8:	f8d9 3000 	ldr.w	r3, [r9]
    d9dc:	4650      	mov	r0, sl
    d9de:	461a      	mov	r2, r3
    d9e0:	464c      	mov	r4, r9
    d9e2:	2600      	movs	r6, #0
    d9e4:	8805      	ldrh	r5, [r0, #0]
    d9e6:	0c12      	lsrs	r2, r2, #16
    d9e8:	fb01 2205 	mla	r2, r1, r5, r2
    d9ec:	4416      	add	r6, r2
    d9ee:	b29b      	uxth	r3, r3
    d9f0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d9f4:	f844 3b04 	str.w	r3, [r4], #4
    d9f8:	f850 5b04 	ldr.w	r5, [r0], #4
    d9fc:	6822      	ldr	r2, [r4, #0]
    d9fe:	0c2d      	lsrs	r5, r5, #16
    da00:	b293      	uxth	r3, r2
    da02:	fb01 3305 	mla	r3, r1, r5, r3
    da06:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    da0a:	4584      	cmp	ip, r0
    da0c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    da10:	d8e8      	bhi.n	d9e4 <__multiply+0xe8>
    da12:	45c3      	cmp	fp, r8
    da14:	f849 3007 	str.w	r3, [r9, r7]
    da18:	f109 0904 	add.w	r9, r9, #4
    da1c:	d8b6      	bhi.n	d98c <__multiply+0x90>
    da1e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    da22:	2f00      	cmp	r7, #0
    da24:	dc02      	bgt.n	da2c <__multiply+0x130>
    da26:	e005      	b.n	da34 <__multiply+0x138>
    da28:	3f01      	subs	r7, #1
    da2a:	d003      	beq.n	da34 <__multiply+0x138>
    da2c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    da30:	2b00      	cmp	r3, #0
    da32:	d0f9      	beq.n	da28 <__multiply+0x12c>
    da34:	9b01      	ldr	r3, [sp, #4]
    da36:	4618      	mov	r0, r3
    da38:	611f      	str	r7, [r3, #16]
    da3a:	b005      	add	sp, #20
    da3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da40:	4b03      	ldr	r3, [pc, #12]	; (da50 <__multiply+0x154>)
    da42:	4804      	ldr	r0, [pc, #16]	; (da54 <__multiply+0x158>)
    da44:	9a01      	ldr	r2, [sp, #4]
    da46:	f44f 71b1 	mov.w	r1, #354	; 0x162
    da4a:	f002 f97d 	bl	fd48 <__assert_func>
    da4e:	bf00      	nop
    da50:	20000aa4 	.word	0x20000aa4
    da54:	20000ab8 	.word	0x20000ab8

0000da58 <__pow5mult>:
    da58:	f012 0303 	ands.w	r3, r2, #3
    da5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da60:	4614      	mov	r4, r2
    da62:	4606      	mov	r6, r0
    da64:	d132      	bne.n	dacc <__pow5mult+0x74>
    da66:	460d      	mov	r5, r1
    da68:	10a4      	asrs	r4, r4, #2
    da6a:	d020      	beq.n	daae <__pow5mult+0x56>
    da6c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    da70:	f1b8 0f00 	cmp.w	r8, #0
    da74:	d033      	beq.n	dade <__pow5mult+0x86>
    da76:	07e3      	lsls	r3, r4, #31
    da78:	f04f 0700 	mov.w	r7, #0
    da7c:	d407      	bmi.n	da8e <__pow5mult+0x36>
    da7e:	1064      	asrs	r4, r4, #1
    da80:	d015      	beq.n	daae <__pow5mult+0x56>
    da82:	f8d8 0000 	ldr.w	r0, [r8]
    da86:	b1a8      	cbz	r0, dab4 <__pow5mult+0x5c>
    da88:	4680      	mov	r8, r0
    da8a:	07e3      	lsls	r3, r4, #31
    da8c:	d5f7      	bpl.n	da7e <__pow5mult+0x26>
    da8e:	4642      	mov	r2, r8
    da90:	4629      	mov	r1, r5
    da92:	4630      	mov	r0, r6
    da94:	f7ff ff32 	bl	d8fc <__multiply>
    da98:	b1b5      	cbz	r5, dac8 <__pow5mult+0x70>
    da9a:	6869      	ldr	r1, [r5, #4]
    da9c:	6c73      	ldr	r3, [r6, #68]	; 0x44
    da9e:	1064      	asrs	r4, r4, #1
    daa0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    daa4:	602a      	str	r2, [r5, #0]
    daa6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    daaa:	4605      	mov	r5, r0
    daac:	d1e9      	bne.n	da82 <__pow5mult+0x2a>
    daae:	4628      	mov	r0, r5
    dab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dab4:	4642      	mov	r2, r8
    dab6:	4641      	mov	r1, r8
    dab8:	4630      	mov	r0, r6
    daba:	f7ff ff1f 	bl	d8fc <__multiply>
    dabe:	f8c8 0000 	str.w	r0, [r8]
    dac2:	6007      	str	r7, [r0, #0]
    dac4:	4680      	mov	r8, r0
    dac6:	e7e0      	b.n	da8a <__pow5mult+0x32>
    dac8:	4605      	mov	r5, r0
    daca:	e7d8      	b.n	da7e <__pow5mult+0x26>
    dacc:	3b01      	subs	r3, #1
    dace:	4a0f      	ldr	r2, [pc, #60]	; (db0c <__pow5mult+0xb4>)
    dad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    dad4:	2300      	movs	r3, #0
    dad6:	f7ff fe41 	bl	d75c <__multadd>
    dada:	4605      	mov	r5, r0
    dadc:	e7c4      	b.n	da68 <__pow5mult+0x10>
    dade:	2101      	movs	r1, #1
    dae0:	4630      	mov	r0, r6
    dae2:	f7ff fe0b 	bl	d6fc <_Balloc>
    dae6:	4680      	mov	r8, r0
    dae8:	b140      	cbz	r0, dafc <__pow5mult+0xa4>
    daea:	2301      	movs	r3, #1
    daec:	f240 2271 	movw	r2, #625	; 0x271
    daf0:	e9c0 3204 	strd	r3, r2, [r0, #16]
    daf4:	2300      	movs	r3, #0
    daf6:	6430      	str	r0, [r6, #64]	; 0x40
    daf8:	6003      	str	r3, [r0, #0]
    dafa:	e7bc      	b.n	da76 <__pow5mult+0x1e>
    dafc:	4b04      	ldr	r3, [pc, #16]	; (db10 <__pow5mult+0xb8>)
    dafe:	4805      	ldr	r0, [pc, #20]	; (db14 <__pow5mult+0xbc>)
    db00:	4642      	mov	r2, r8
    db02:	f240 1145 	movw	r1, #325	; 0x145
    db06:	f002 f91f 	bl	fd48 <__assert_func>
    db0a:	bf00      	nop
    db0c:	20001074 	.word	0x20001074
    db10:	20000aa4 	.word	0x20000aa4
    db14:	20000ab8 	.word	0x20000ab8

0000db18 <__lshift>:
    db18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db1c:	460d      	mov	r5, r1
    db1e:	4614      	mov	r4, r2
    db20:	692f      	ldr	r7, [r5, #16]
    db22:	68ab      	ldr	r3, [r5, #8]
    db24:	6849      	ldr	r1, [r1, #4]
    db26:	eb07 1762 	add.w	r7, r7, r2, asr #5
    db2a:	1c7e      	adds	r6, r7, #1
    db2c:	429e      	cmp	r6, r3
    db2e:	4680      	mov	r8, r0
    db30:	ea4f 1962 	mov.w	r9, r2, asr #5
    db34:	dd04      	ble.n	db40 <__lshift+0x28>
    db36:	005b      	lsls	r3, r3, #1
    db38:	429e      	cmp	r6, r3
    db3a:	f101 0101 	add.w	r1, r1, #1
    db3e:	dcfa      	bgt.n	db36 <__lshift+0x1e>
    db40:	4640      	mov	r0, r8
    db42:	f7ff fddb 	bl	d6fc <_Balloc>
    db46:	4684      	mov	ip, r0
    db48:	2800      	cmp	r0, #0
    db4a:	d052      	beq.n	dbf2 <__lshift+0xda>
    db4c:	f1b9 0f00 	cmp.w	r9, #0
    db50:	f100 0214 	add.w	r2, r0, #20
    db54:	dd0e      	ble.n	db74 <__lshift+0x5c>
    db56:	f109 0105 	add.w	r1, r9, #5
    db5a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    db5e:	4613      	mov	r3, r2
    db60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    db64:	2000      	movs	r0, #0
    db66:	f843 0b04 	str.w	r0, [r3], #4
    db6a:	428b      	cmp	r3, r1
    db6c:	d1fb      	bne.n	db66 <__lshift+0x4e>
    db6e:	f1ae 0314 	sub.w	r3, lr, #20
    db72:	441a      	add	r2, r3
    db74:	6929      	ldr	r1, [r5, #16]
    db76:	f105 0314 	add.w	r3, r5, #20
    db7a:	f014 0e1f 	ands.w	lr, r4, #31
    db7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    db82:	d02e      	beq.n	dbe2 <__lshift+0xca>
    db84:	f1ce 0920 	rsb	r9, lr, #32
    db88:	4610      	mov	r0, r2
    db8a:	f04f 0a00 	mov.w	sl, #0
    db8e:	681c      	ldr	r4, [r3, #0]
    db90:	fa04 f40e 	lsl.w	r4, r4, lr
    db94:	ea44 040a 	orr.w	r4, r4, sl
    db98:	f840 4b04 	str.w	r4, [r0], #4
    db9c:	f853 4b04 	ldr.w	r4, [r3], #4
    dba0:	4299      	cmp	r1, r3
    dba2:	fa24 fa09 	lsr.w	sl, r4, r9
    dba6:	d8f2      	bhi.n	db8e <__lshift+0x76>
    dba8:	1b4b      	subs	r3, r1, r5
    dbaa:	3b15      	subs	r3, #21
    dbac:	f023 0303 	bic.w	r3, r3, #3
    dbb0:	3304      	adds	r3, #4
    dbb2:	f105 0015 	add.w	r0, r5, #21
    dbb6:	4281      	cmp	r1, r0
    dbb8:	bf38      	it	cc
    dbba:	2304      	movcc	r3, #4
    dbbc:	f1ba 0f00 	cmp.w	sl, #0
    dbc0:	bf18      	it	ne
    dbc2:	4637      	movne	r7, r6
    dbc4:	f842 a003 	str.w	sl, [r2, r3]
    dbc8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    dbcc:	686a      	ldr	r2, [r5, #4]
    dbce:	f8cc 7010 	str.w	r7, [ip, #16]
    dbd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    dbd6:	6029      	str	r1, [r5, #0]
    dbd8:	4660      	mov	r0, ip
    dbda:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    dbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbe2:	3a04      	subs	r2, #4
    dbe4:	f853 0b04 	ldr.w	r0, [r3], #4
    dbe8:	f842 0f04 	str.w	r0, [r2, #4]!
    dbec:	4299      	cmp	r1, r3
    dbee:	d8f9      	bhi.n	dbe4 <__lshift+0xcc>
    dbf0:	e7ea      	b.n	dbc8 <__lshift+0xb0>
    dbf2:	4b03      	ldr	r3, [pc, #12]	; (dc00 <__lshift+0xe8>)
    dbf4:	4803      	ldr	r0, [pc, #12]	; (dc04 <__lshift+0xec>)
    dbf6:	4662      	mov	r2, ip
    dbf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    dbfc:	f002 f8a4 	bl	fd48 <__assert_func>
    dc00:	20000aa4 	.word	0x20000aa4
    dc04:	20000ab8 	.word	0x20000ab8

0000dc08 <__mcmp>:
    dc08:	690b      	ldr	r3, [r1, #16]
    dc0a:	4684      	mov	ip, r0
    dc0c:	6900      	ldr	r0, [r0, #16]
    dc0e:	1ac0      	subs	r0, r0, r3
    dc10:	d116      	bne.n	dc40 <__mcmp+0x38>
    dc12:	f10c 0c14 	add.w	ip, ip, #20
    dc16:	3114      	adds	r1, #20
    dc18:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    dc1c:	b410      	push	{r4}
    dc1e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    dc22:	e001      	b.n	dc28 <__mcmp+0x20>
    dc24:	4594      	cmp	ip, r2
    dc26:	d208      	bcs.n	dc3a <__mcmp+0x32>
    dc28:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    dc2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    dc30:	428c      	cmp	r4, r1
    dc32:	d0f7      	beq.n	dc24 <__mcmp+0x1c>
    dc34:	d205      	bcs.n	dc42 <__mcmp+0x3a>
    dc36:	f04f 30ff 	mov.w	r0, #4294967295
    dc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    dc3e:	4770      	bx	lr
    dc40:	4770      	bx	lr
    dc42:	2001      	movs	r0, #1
    dc44:	f85d 4b04 	ldr.w	r4, [sp], #4
    dc48:	4770      	bx	lr
    dc4a:	bf00      	nop

0000dc4c <__mdiff>:
    dc4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc50:	690f      	ldr	r7, [r1, #16]
    dc52:	6913      	ldr	r3, [r2, #16]
    dc54:	1aff      	subs	r7, r7, r3
    dc56:	2f00      	cmp	r7, #0
    dc58:	460e      	mov	r6, r1
    dc5a:	4690      	mov	r8, r2
    dc5c:	d17f      	bne.n	dd5e <__mdiff+0x112>
    dc5e:	f101 0514 	add.w	r5, r1, #20
    dc62:	3214      	adds	r2, #20
    dc64:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    dc68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    dc6c:	e001      	b.n	dc72 <__mdiff+0x26>
    dc6e:	429d      	cmp	r5, r3
    dc70:	d278      	bcs.n	dd64 <__mdiff+0x118>
    dc72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    dc76:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    dc7a:	42a1      	cmp	r1, r4
    dc7c:	d0f7      	beq.n	dc6e <__mdiff+0x22>
    dc7e:	d369      	bcc.n	dd54 <__mdiff+0x108>
    dc80:	6871      	ldr	r1, [r6, #4]
    dc82:	f7ff fd3b 	bl	d6fc <_Balloc>
    dc86:	4681      	mov	r9, r0
    dc88:	2800      	cmp	r0, #0
    dc8a:	d077      	beq.n	dd7c <__mdiff+0x130>
    dc8c:	6935      	ldr	r5, [r6, #16]
    dc8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    dc92:	60c7      	str	r7, [r0, #12]
    dc94:	f108 0e14 	add.w	lr, r8, #20
    dc98:	f106 0014 	add.w	r0, r6, #20
    dc9c:	f109 0a14 	add.w	sl, r9, #20
    dca0:	f106 0110 	add.w	r1, r6, #16
    dca4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    dca8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    dcac:	4656      	mov	r6, sl
    dcae:	f04f 0c00 	mov.w	ip, #0
    dcb2:	f85e 4b04 	ldr.w	r4, [lr], #4
    dcb6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    dcba:	b2a3      	uxth	r3, r4
    dcbc:	fa1c fc8b 	uxtah	ip, ip, fp
    dcc0:	ebac 0303 	sub.w	r3, ip, r3
    dcc4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    dcc8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    dccc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    dcd0:	b29b      	uxth	r3, r3
    dcd2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    dcd6:	4572      	cmp	r2, lr
    dcd8:	f846 3b04 	str.w	r3, [r6], #4
    dcdc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    dce0:	d8e7      	bhi.n	dcb2 <__mdiff+0x66>
    dce2:	eba2 0108 	sub.w	r1, r2, r8
    dce6:	3915      	subs	r1, #21
    dce8:	f108 0815 	add.w	r8, r8, #21
    dcec:	4542      	cmp	r2, r8
    dcee:	f021 0403 	bic.w	r4, r1, #3
    dcf2:	f104 0404 	add.w	r4, r4, #4
    dcf6:	bf38      	it	cc
    dcf8:	2404      	movcc	r4, #4
    dcfa:	4420      	add	r0, r4
    dcfc:	f021 0203 	bic.w	r2, r1, #3
    dd00:	bf38      	it	cc
    dd02:	2200      	movcc	r2, #0
    dd04:	4287      	cmp	r7, r0
    dd06:	4452      	add	r2, sl
    dd08:	4454      	add	r4, sl
    dd0a:	d918      	bls.n	dd3e <__mdiff+0xf2>
    dd0c:	4626      	mov	r6, r4
    dd0e:	4601      	mov	r1, r0
    dd10:	f851 3b04 	ldr.w	r3, [r1], #4
    dd14:	fa1c fc83 	uxtah	ip, ip, r3
    dd18:	ea4f 422c 	mov.w	r2, ip, asr #16
    dd1c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    dd20:	fa1f fc8c 	uxth.w	ip, ip
    dd24:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    dd28:	428f      	cmp	r7, r1
    dd2a:	f846 3b04 	str.w	r3, [r6], #4
    dd2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    dd32:	d8ed      	bhi.n	dd10 <__mdiff+0xc4>
    dd34:	3f01      	subs	r7, #1
    dd36:	1a3f      	subs	r7, r7, r0
    dd38:	f027 0703 	bic.w	r7, r7, #3
    dd3c:	19e2      	adds	r2, r4, r7
    dd3e:	b923      	cbnz	r3, dd4a <__mdiff+0xfe>
    dd40:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    dd44:	3d01      	subs	r5, #1
    dd46:	2b00      	cmp	r3, #0
    dd48:	d0fa      	beq.n	dd40 <__mdiff+0xf4>
    dd4a:	f8c9 5010 	str.w	r5, [r9, #16]
    dd4e:	4648      	mov	r0, r9
    dd50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd54:	4633      	mov	r3, r6
    dd56:	2701      	movs	r7, #1
    dd58:	4646      	mov	r6, r8
    dd5a:	4698      	mov	r8, r3
    dd5c:	e790      	b.n	dc80 <__mdiff+0x34>
    dd5e:	dbf9      	blt.n	dd54 <__mdiff+0x108>
    dd60:	2700      	movs	r7, #0
    dd62:	e78d      	b.n	dc80 <__mdiff+0x34>
    dd64:	2100      	movs	r1, #0
    dd66:	f7ff fcc9 	bl	d6fc <_Balloc>
    dd6a:	4681      	mov	r9, r0
    dd6c:	b168      	cbz	r0, dd8a <__mdiff+0x13e>
    dd6e:	2201      	movs	r2, #1
    dd70:	2300      	movs	r3, #0
    dd72:	e9c9 2304 	strd	r2, r3, [r9, #16]
    dd76:	4648      	mov	r0, r9
    dd78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd7c:	4b06      	ldr	r3, [pc, #24]	; (dd98 <__mdiff+0x14c>)
    dd7e:	4807      	ldr	r0, [pc, #28]	; (dd9c <__mdiff+0x150>)
    dd80:	464a      	mov	r2, r9
    dd82:	f240 2145 	movw	r1, #581	; 0x245
    dd86:	f001 ffdf 	bl	fd48 <__assert_func>
    dd8a:	4b03      	ldr	r3, [pc, #12]	; (dd98 <__mdiff+0x14c>)
    dd8c:	4803      	ldr	r0, [pc, #12]	; (dd9c <__mdiff+0x150>)
    dd8e:	464a      	mov	r2, r9
    dd90:	f240 2137 	movw	r1, #567	; 0x237
    dd94:	f001 ffd8 	bl	fd48 <__assert_func>
    dd98:	20000aa4 	.word	0x20000aa4
    dd9c:	20000ab8 	.word	0x20000ab8

0000dda0 <__d2b>:
    dda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dda4:	4688      	mov	r8, r1
    dda6:	b083      	sub	sp, #12
    dda8:	2101      	movs	r1, #1
    ddaa:	ec57 6b10 	vmov	r6, r7, d0
    ddae:	4615      	mov	r5, r2
    ddb0:	f7ff fca4 	bl	d6fc <_Balloc>
    ddb4:	4604      	mov	r4, r0
    ddb6:	2800      	cmp	r0, #0
    ddb8:	d051      	beq.n	de5e <__d2b+0xbe>
    ddba:	f3c7 590a 	ubfx	r9, r7, #20, #11
    ddbe:	f3c7 0313 	ubfx	r3, r7, #0, #20
    ddc2:	f1b9 0f00 	cmp.w	r9, #0
    ddc6:	d001      	beq.n	ddcc <__d2b+0x2c>
    ddc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ddcc:	2e00      	cmp	r6, #0
    ddce:	9301      	str	r3, [sp, #4]
    ddd0:	d118      	bne.n	de04 <__d2b+0x64>
    ddd2:	a801      	add	r0, sp, #4
    ddd4:	f7ff fd34 	bl	d840 <__lo0bits>
    ddd8:	9a01      	ldr	r2, [sp, #4]
    ddda:	6162      	str	r2, [r4, #20]
    dddc:	2201      	movs	r2, #1
    ddde:	f100 0320 	add.w	r3, r0, #32
    dde2:	6122      	str	r2, [r4, #16]
    dde4:	f1b9 0f00 	cmp.w	r9, #0
    dde8:	d025      	beq.n	de36 <__d2b+0x96>
    ddea:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    ddee:	eb09 0203 	add.w	r2, r9, r3
    ddf2:	4620      	mov	r0, r4
    ddf4:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    ddf8:	f8c8 2000 	str.w	r2, [r8]
    ddfc:	602b      	str	r3, [r5, #0]
    ddfe:	b003      	add	sp, #12
    de00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    de04:	4668      	mov	r0, sp
    de06:	9600      	str	r6, [sp, #0]
    de08:	f7ff fd1a 	bl	d840 <__lo0bits>
    de0c:	4603      	mov	r3, r0
    de0e:	b310      	cbz	r0, de56 <__d2b+0xb6>
    de10:	e9dd 0200 	ldrd	r0, r2, [sp]
    de14:	f1c3 0120 	rsb	r1, r3, #32
    de18:	fa02 f101 	lsl.w	r1, r2, r1
    de1c:	4301      	orrs	r1, r0
    de1e:	40da      	lsrs	r2, r3
    de20:	6161      	str	r1, [r4, #20]
    de22:	9201      	str	r2, [sp, #4]
    de24:	2a00      	cmp	r2, #0
    de26:	61a2      	str	r2, [r4, #24]
    de28:	bf14      	ite	ne
    de2a:	2202      	movne	r2, #2
    de2c:	2201      	moveq	r2, #1
    de2e:	6122      	str	r2, [r4, #16]
    de30:	f1b9 0f00 	cmp.w	r9, #0
    de34:	d1d9      	bne.n	ddea <__d2b+0x4a>
    de36:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    de3a:	f8c8 3000 	str.w	r3, [r8]
    de3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    de42:	6918      	ldr	r0, [r3, #16]
    de44:	f7ff fcdc 	bl	d800 <__hi0bits>
    de48:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    de4c:	4620      	mov	r0, r4
    de4e:	602b      	str	r3, [r5, #0]
    de50:	b003      	add	sp, #12
    de52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    de56:	9a00      	ldr	r2, [sp, #0]
    de58:	6162      	str	r2, [r4, #20]
    de5a:	9a01      	ldr	r2, [sp, #4]
    de5c:	e7e2      	b.n	de24 <__d2b+0x84>
    de5e:	4b03      	ldr	r3, [pc, #12]	; (de6c <__d2b+0xcc>)
    de60:	4803      	ldr	r0, [pc, #12]	; (de70 <__d2b+0xd0>)
    de62:	4622      	mov	r2, r4
    de64:	f240 310f 	movw	r1, #783	; 0x30f
    de68:	f001 ff6e 	bl	fd48 <__assert_func>
    de6c:	20000aa4 	.word	0x20000aa4
    de70:	20000ab8 	.word	0x20000ab8

0000de74 <__ascii_wctomb>:
    de74:	b149      	cbz	r1, de8a <__ascii_wctomb+0x16>
    de76:	2aff      	cmp	r2, #255	; 0xff
    de78:	d802      	bhi.n	de80 <__ascii_wctomb+0xc>
    de7a:	700a      	strb	r2, [r1, #0]
    de7c:	2001      	movs	r0, #1
    de7e:	4770      	bx	lr
    de80:	238a      	movs	r3, #138	; 0x8a
    de82:	6003      	str	r3, [r0, #0]
    de84:	f04f 30ff 	mov.w	r0, #4294967295
    de88:	4770      	bx	lr
    de8a:	4608      	mov	r0, r1
    de8c:	4770      	bx	lr
    de8e:	bf00      	nop

0000de90 <_svfprintf_r>:
    de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de94:	ed2d 8b08 	vpush	{d8-d11}
    de98:	b0d1      	sub	sp, #324	; 0x144
    de9a:	460c      	mov	r4, r1
    de9c:	ee0b 1a10 	vmov	s22, r1
    dea0:	4690      	mov	r8, r2
    dea2:	9308      	str	r3, [sp, #32]
    dea4:	4683      	mov	fp, r0
    dea6:	f001 febb 	bl	fc20 <_localeconv_r>
    deaa:	6803      	ldr	r3, [r0, #0]
    deac:	9312      	str	r3, [sp, #72]	; 0x48
    deae:	4618      	mov	r0, r3
    deb0:	f7ff fa06 	bl	d2c0 <strlen>
    deb4:	af20      	add	r7, sp, #128	; 0x80
    deb6:	9010      	str	r0, [sp, #64]	; 0x40
    deb8:	2208      	movs	r2, #8
    deba:	2100      	movs	r1, #0
    debc:	4638      	mov	r0, r7
    debe:	f7fe fe97 	bl	cbf0 <memset>
    dec2:	89a3      	ldrh	r3, [r4, #12]
    dec4:	061b      	lsls	r3, r3, #24
    dec6:	d503      	bpl.n	ded0 <_svfprintf_r+0x40>
    dec8:	6923      	ldr	r3, [r4, #16]
    deca:	2b00      	cmp	r3, #0
    decc:	f000 8755 	beq.w	ed7a <_svfprintf_r+0xeea>
    ded0:	2300      	movs	r3, #0
    ded2:	ed9f 8b83 	vldr	d8, [pc, #524]	; e0e0 <_svfprintf_r+0x250>
    ded6:	ed9f 9b84 	vldr	d9, [pc, #528]	; e0e8 <_svfprintf_r+0x258>
    deda:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    dede:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    dee2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    dee6:	aa27      	add	r2, sp, #156	; 0x9c
    dee8:	930e      	str	r3, [sp, #56]	; 0x38
    deea:	9224      	str	r2, [sp, #144]	; 0x90
    deec:	4692      	mov	sl, r2
    deee:	9311      	str	r3, [sp, #68]	; 0x44
    def0:	9304      	str	r3, [sp, #16]
    def2:	4644      	mov	r4, r8
    def4:	46a1      	mov	r9, r4
    def6:	4b7e      	ldr	r3, [pc, #504]	; (e0f0 <_svfprintf_r+0x260>)
    def8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    defc:	f7fe ff62 	bl	cdc4 <__locale_mb_cur_max>
    df00:	464a      	mov	r2, r9
    df02:	4603      	mov	r3, r0
    df04:	a91c      	add	r1, sp, #112	; 0x70
    df06:	9700      	str	r7, [sp, #0]
    df08:	4658      	mov	r0, fp
    df0a:	47a8      	blx	r5
    df0c:	2800      	cmp	r0, #0
    df0e:	f000 80b0 	beq.w	e072 <_svfprintf_r+0x1e2>
    df12:	f2c0 80a6 	blt.w	e062 <_svfprintf_r+0x1d2>
    df16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    df18:	2a25      	cmp	r2, #37	; 0x25
    df1a:	4603      	mov	r3, r0
    df1c:	d001      	beq.n	df22 <_svfprintf_r+0x92>
    df1e:	4499      	add	r9, r3
    df20:	e7e9      	b.n	def6 <_svfprintf_r+0x66>
    df22:	ebb9 0504 	subs.w	r5, r9, r4
    df26:	4606      	mov	r6, r0
    df28:	f040 80a7 	bne.w	e07a <_svfprintf_r+0x1ea>
    df2c:	2300      	movs	r3, #0
    df2e:	f04f 32ff 	mov.w	r2, #4294967295
    df32:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    df36:	4698      	mov	r8, r3
    df38:	9306      	str	r3, [sp, #24]
    df3a:	f109 0901 	add.w	r9, r9, #1
    df3e:	f899 3000 	ldrb.w	r3, [r9]
    df42:	9203      	str	r2, [sp, #12]
    df44:	252b      	movs	r5, #43	; 0x2b
    df46:	2620      	movs	r6, #32
    df48:	f109 0901 	add.w	r9, r9, #1
    df4c:	f1a3 0220 	sub.w	r2, r3, #32
    df50:	2a5a      	cmp	r2, #90	; 0x5a
    df52:	f200 80cf 	bhi.w	e0f4 <_svfprintf_r+0x264>
    df56:	e8df f012 	tbh	[pc, r2, lsl #1]
    df5a:	02e8      	.short	0x02e8
    df5c:	00cd00cd 	.word	0x00cd00cd
    df60:	00cd02e3 	.word	0x00cd02e3
    df64:	00cd00cd 	.word	0x00cd00cd
    df68:	00cd006a 	.word	0x00cd006a
    df6c:	020500cd 	.word	0x020500cd
    df70:	00cd0284 	.word	0x00cd0284
    df74:	02c90210 	.word	0x02c90210
    df78:	02bd00cd 	.word	0x02bd00cd
    df7c:	005b005b 	.word	0x005b005b
    df80:	005b005b 	.word	0x005b005b
    df84:	005b005b 	.word	0x005b005b
    df88:	005b005b 	.word	0x005b005b
    df8c:	00cd005b 	.word	0x00cd005b
    df90:	00cd00cd 	.word	0x00cd00cd
    df94:	00cd00cd 	.word	0x00cd00cd
    df98:	00cd00cd 	.word	0x00cd00cd
    df9c:	00cd0153 	.word	0x00cd0153
    dfa0:	021a0183 	.word	0x021a0183
    dfa4:	01530153 	.word	0x01530153
    dfa8:	00cd0153 	.word	0x00cd0153
    dfac:	00cd00cd 	.word	0x00cd00cd
    dfb0:	021500cd 	.word	0x021500cd
    dfb4:	00cd00cd 	.word	0x00cd00cd
    dfb8:	00cd0296 	.word	0x00cd0296
    dfbc:	00cd00cd 	.word	0x00cd00cd
    dfc0:	00cd01ab 	.word	0x00cd01ab
    dfc4:	00cd02aa 	.word	0x00cd02aa
    dfc8:	06e300cd 	.word	0x06e300cd
    dfcc:	00cd00cd 	.word	0x00cd00cd
    dfd0:	00cd00cd 	.word	0x00cd00cd
    dfd4:	00cd00cd 	.word	0x00cd00cd
    dfd8:	00cd00cd 	.word	0x00cd00cd
    dfdc:	00cd0153 	.word	0x00cd0153
    dfe0:	01de0183 	.word	0x01de0183
    dfe4:	01530153 	.word	0x01530153
    dfe8:	02770153 	.word	0x02770153
    dfec:	007f01de 	.word	0x007f01de
    dff0:	028900cd 	.word	0x028900cd
    dff4:	025f00cd 	.word	0x025f00cd
    dff8:	022f06e0 	.word	0x022f06e0
    dffc:	00cd007f 	.word	0x00cd007f
    e000:	007c01ab 	.word	0x007c01ab
    e004:	00cd06b8 	.word	0x00cd06b8
    e008:	06bd00cd 	.word	0x06bd00cd
    e00c:	007c00cd 	.word	0x007c00cd
    e010:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e014:	2100      	movs	r1, #0
    e016:	f819 3b01 	ldrb.w	r3, [r9], #1
    e01a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e01e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e022:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e026:	2a09      	cmp	r2, #9
    e028:	d9f5      	bls.n	e016 <_svfprintf_r+0x186>
    e02a:	9106      	str	r1, [sp, #24]
    e02c:	e78e      	b.n	df4c <_svfprintf_r+0xbc>
    e02e:	4658      	mov	r0, fp
    e030:	f001 fdf6 	bl	fc20 <_localeconv_r>
    e034:	6843      	ldr	r3, [r0, #4]
    e036:	9315      	str	r3, [sp, #84]	; 0x54
    e038:	4618      	mov	r0, r3
    e03a:	f7ff f941 	bl	d2c0 <strlen>
    e03e:	9016      	str	r0, [sp, #88]	; 0x58
    e040:	4658      	mov	r0, fp
    e042:	f001 fded 	bl	fc20 <_localeconv_r>
    e046:	6883      	ldr	r3, [r0, #8]
    e048:	9313      	str	r3, [sp, #76]	; 0x4c
    e04a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e04c:	2b00      	cmp	r3, #0
    e04e:	f040 862d 	bne.w	ecac <_svfprintf_r+0xe1c>
    e052:	f899 3000 	ldrb.w	r3, [r9]
    e056:	e777      	b.n	df48 <_svfprintf_r+0xb8>
    e058:	f899 3000 	ldrb.w	r3, [r9]
    e05c:	f048 0820 	orr.w	r8, r8, #32
    e060:	e772      	b.n	df48 <_svfprintf_r+0xb8>
    e062:	2208      	movs	r2, #8
    e064:	2100      	movs	r1, #0
    e066:	4638      	mov	r0, r7
    e068:	f7fe fdc2 	bl	cbf0 <memset>
    e06c:	2301      	movs	r3, #1
    e06e:	4499      	add	r9, r3
    e070:	e741      	b.n	def6 <_svfprintf_r+0x66>
    e072:	ebb9 0504 	subs.w	r5, r9, r4
    e076:	4606      	mov	r6, r0
    e078:	d011      	beq.n	e09e <_svfprintf_r+0x20e>
    e07a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e07c:	442b      	add	r3, r5
    e07e:	9326      	str	r3, [sp, #152]	; 0x98
    e080:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e082:	3301      	adds	r3, #1
    e084:	2b07      	cmp	r3, #7
    e086:	e9ca 4500 	strd	r4, r5, [sl]
    e08a:	9325      	str	r3, [sp, #148]	; 0x94
    e08c:	dc1c      	bgt.n	e0c8 <_svfprintf_r+0x238>
    e08e:	f10a 0a08 	add.w	sl, sl, #8
    e092:	9b04      	ldr	r3, [sp, #16]
    e094:	442b      	add	r3, r5
    e096:	9304      	str	r3, [sp, #16]
    e098:	2e00      	cmp	r6, #0
    e09a:	f47f af47 	bne.w	df2c <_svfprintf_r+0x9c>
    e09e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e0a0:	2b00      	cmp	r3, #0
    e0a2:	f041 820b 	bne.w	f4bc <_svfprintf_r+0x162c>
    e0a6:	ee1b 3a10 	vmov	r3, s22
    e0aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    e0ae:	f013 0f40 	tst.w	r3, #64	; 0x40
    e0b2:	9b04      	ldr	r3, [sp, #16]
    e0b4:	bf18      	it	ne
    e0b6:	f04f 33ff 	movne.w	r3, #4294967295
    e0ba:	9304      	str	r3, [sp, #16]
    e0bc:	9804      	ldr	r0, [sp, #16]
    e0be:	b051      	add	sp, #324	; 0x144
    e0c0:	ecbd 8b08 	vpop	{d8-d11}
    e0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0c8:	ee1b 1a10 	vmov	r1, s22
    e0cc:	aa24      	add	r2, sp, #144	; 0x90
    e0ce:	4658      	mov	r0, fp
    e0d0:	f002 fde6 	bl	10ca0 <__ssprint_r>
    e0d4:	2800      	cmp	r0, #0
    e0d6:	d1e6      	bne.n	e0a6 <_svfprintf_r+0x216>
    e0d8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e0dc:	e7d9      	b.n	e092 <_svfprintf_r+0x202>
    e0de:	bf00      	nop
	...
    e0e8:	ffffffff 	.word	0xffffffff
    e0ec:	7fefffff 	.word	0x7fefffff
    e0f0:	20004374 	.word	0x20004374
    e0f4:	930b      	str	r3, [sp, #44]	; 0x2c
    e0f6:	2b00      	cmp	r3, #0
    e0f8:	d0d1      	beq.n	e09e <_svfprintf_r+0x20e>
    e0fa:	2100      	movs	r1, #0
    e0fc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    e100:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    e104:	2301      	movs	r3, #1
    e106:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e10a:	9302      	str	r3, [sp, #8]
    e10c:	9107      	str	r1, [sp, #28]
    e10e:	9305      	str	r3, [sp, #20]
    e110:	9103      	str	r1, [sp, #12]
    e112:	910f      	str	r1, [sp, #60]	; 0x3c
    e114:	ac37      	add	r4, sp, #220	; 0xdc
    e116:	f018 0302 	ands.w	r3, r8, #2
    e11a:	9309      	str	r3, [sp, #36]	; 0x24
    e11c:	d002      	beq.n	e124 <_svfprintf_r+0x294>
    e11e:	9b02      	ldr	r3, [sp, #8]
    e120:	3302      	adds	r3, #2
    e122:	9302      	str	r3, [sp, #8]
    e124:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    e128:	930a      	str	r3, [sp, #40]	; 0x28
    e12a:	d105      	bne.n	e138 <_svfprintf_r+0x2a8>
    e12c:	9b06      	ldr	r3, [sp, #24]
    e12e:	9a02      	ldr	r2, [sp, #8]
    e130:	1a9d      	subs	r5, r3, r2
    e132:	2d00      	cmp	r5, #0
    e134:	f300 8369 	bgt.w	e80a <_svfprintf_r+0x97a>
    e138:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e13a:	b189      	cbz	r1, e160 <_svfprintf_r+0x2d0>
    e13c:	9925      	ldr	r1, [sp, #148]	; 0x94
    e13e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    e142:	3101      	adds	r1, #1
    e144:	3201      	adds	r2, #1
    e146:	f8ca 0000 	str.w	r0, [sl]
    e14a:	2907      	cmp	r1, #7
    e14c:	f04f 0001 	mov.w	r0, #1
    e150:	9226      	str	r2, [sp, #152]	; 0x98
    e152:	9125      	str	r1, [sp, #148]	; 0x94
    e154:	f8ca 0004 	str.w	r0, [sl, #4]
    e158:	f300 83a2 	bgt.w	e8a0 <_svfprintf_r+0xa10>
    e15c:	f10a 0a08 	add.w	sl, sl, #8
    e160:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e162:	b183      	cbz	r3, e186 <_svfprintf_r+0x2f6>
    e164:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e166:	a91a      	add	r1, sp, #104	; 0x68
    e168:	3301      	adds	r3, #1
    e16a:	3202      	adds	r2, #2
    e16c:	f8ca 1000 	str.w	r1, [sl]
    e170:	2b07      	cmp	r3, #7
    e172:	f04f 0102 	mov.w	r1, #2
    e176:	9226      	str	r2, [sp, #152]	; 0x98
    e178:	9325      	str	r3, [sp, #148]	; 0x94
    e17a:	f8ca 1004 	str.w	r1, [sl, #4]
    e17e:	f300 83a3 	bgt.w	e8c8 <_svfprintf_r+0xa38>
    e182:	f10a 0a08 	add.w	sl, sl, #8
    e186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e188:	2b80      	cmp	r3, #128	; 0x80
    e18a:	f000 826c 	beq.w	e666 <_svfprintf_r+0x7d6>
    e18e:	9b03      	ldr	r3, [sp, #12]
    e190:	9905      	ldr	r1, [sp, #20]
    e192:	1a5d      	subs	r5, r3, r1
    e194:	2d00      	cmp	r5, #0
    e196:	f300 82a5 	bgt.w	e6e4 <_svfprintf_r+0x854>
    e19a:	f418 7f80 	tst.w	r8, #256	; 0x100
    e19e:	f040 820d 	bne.w	e5bc <_svfprintf_r+0x72c>
    e1a2:	9b05      	ldr	r3, [sp, #20]
    e1a4:	f8ca 3004 	str.w	r3, [sl, #4]
    e1a8:	441a      	add	r2, r3
    e1aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e1ac:	f8ca 4000 	str.w	r4, [sl]
    e1b0:	3301      	adds	r3, #1
    e1b2:	2b07      	cmp	r3, #7
    e1b4:	9226      	str	r2, [sp, #152]	; 0x98
    e1b6:	9325      	str	r3, [sp, #148]	; 0x94
    e1b8:	f300 831b 	bgt.w	e7f2 <_svfprintf_r+0x962>
    e1bc:	f10a 0a08 	add.w	sl, sl, #8
    e1c0:	f018 0f04 	tst.w	r8, #4
    e1c4:	d005      	beq.n	e1d2 <_svfprintf_r+0x342>
    e1c6:	9b06      	ldr	r3, [sp, #24]
    e1c8:	9902      	ldr	r1, [sp, #8]
    e1ca:	1a5c      	subs	r4, r3, r1
    e1cc:	2c00      	cmp	r4, #0
    e1ce:	f300 8388 	bgt.w	e8e2 <_svfprintf_r+0xa52>
    e1d2:	9b04      	ldr	r3, [sp, #16]
    e1d4:	9906      	ldr	r1, [sp, #24]
    e1d6:	9802      	ldr	r0, [sp, #8]
    e1d8:	4281      	cmp	r1, r0
    e1da:	bfac      	ite	ge
    e1dc:	185b      	addge	r3, r3, r1
    e1de:	181b      	addlt	r3, r3, r0
    e1e0:	9304      	str	r3, [sp, #16]
    e1e2:	2a00      	cmp	r2, #0
    e1e4:	f040 82b0 	bne.w	e748 <_svfprintf_r+0x8b8>
    e1e8:	2300      	movs	r3, #0
    e1ea:	9325      	str	r3, [sp, #148]	; 0x94
    e1ec:	9b07      	ldr	r3, [sp, #28]
    e1ee:	b11b      	cbz	r3, e1f8 <_svfprintf_r+0x368>
    e1f0:	9907      	ldr	r1, [sp, #28]
    e1f2:	4658      	mov	r0, fp
    e1f4:	f7ff f966 	bl	d4c4 <_free_r>
    e1f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e1fc:	464c      	mov	r4, r9
    e1fe:	e679      	b.n	def4 <_svfprintf_r+0x64>
    e200:	930b      	str	r3, [sp, #44]	; 0x2c
    e202:	9b08      	ldr	r3, [sp, #32]
    e204:	3307      	adds	r3, #7
    e206:	f023 0307 	bic.w	r3, r3, #7
    e20a:	ecb3 8b02 	vldmia	r3!, {d8}
    e20e:	eeb0 7bc8 	vabs.f64	d7, d8
    e212:	eeb4 7b49 	vcmp.f64	d7, d9
    e216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e21a:	9308      	str	r3, [sp, #32]
    e21c:	f340 84e9 	ble.w	ebf2 <_svfprintf_r+0xd62>
    e220:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    e224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e228:	f101 8059 	bmi.w	f2de <_svfprintf_r+0x144e>
    e22c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e230:	4cab      	ldr	r4, [pc, #684]	; (e4e0 <_svfprintf_r+0x650>)
    e232:	4bac      	ldr	r3, [pc, #688]	; (e4e4 <_svfprintf_r+0x654>)
    e234:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    e238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e23a:	2a47      	cmp	r2, #71	; 0x47
    e23c:	bfc8      	it	gt
    e23e:	461c      	movgt	r4, r3
    e240:	2300      	movs	r3, #0
    e242:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e246:	2203      	movs	r2, #3
    e248:	9307      	str	r3, [sp, #28]
    e24a:	9202      	str	r2, [sp, #8]
    e24c:	9205      	str	r2, [sp, #20]
    e24e:	9303      	str	r3, [sp, #12]
    e250:	930f      	str	r3, [sp, #60]	; 0x3c
    e252:	2900      	cmp	r1, #0
    e254:	f43f af5f 	beq.w	e116 <_svfprintf_r+0x286>
    e258:	9b02      	ldr	r3, [sp, #8]
    e25a:	3301      	adds	r3, #1
    e25c:	9302      	str	r3, [sp, #8]
    e25e:	e75a      	b.n	e116 <_svfprintf_r+0x286>
    e260:	2b43      	cmp	r3, #67	; 0x43
    e262:	930b      	str	r3, [sp, #44]	; 0x2c
    e264:	d003      	beq.n	e26e <_svfprintf_r+0x3de>
    e266:	f018 0f10 	tst.w	r8, #16
    e26a:	f000 855d 	beq.w	ed28 <_svfprintf_r+0xe98>
    e26e:	9d08      	ldr	r5, [sp, #32]
    e270:	2208      	movs	r2, #8
    e272:	2100      	movs	r1, #0
    e274:	a822      	add	r0, sp, #136	; 0x88
    e276:	ac37      	add	r4, sp, #220	; 0xdc
    e278:	f7fe fcba 	bl	cbf0 <memset>
    e27c:	ab22      	add	r3, sp, #136	; 0x88
    e27e:	f855 2b04 	ldr.w	r2, [r5], #4
    e282:	4621      	mov	r1, r4
    e284:	4658      	mov	r0, fp
    e286:	f002 fcc5 	bl	10c14 <_wcrtomb_r>
    e28a:	4603      	mov	r3, r0
    e28c:	3301      	adds	r3, #1
    e28e:	9005      	str	r0, [sp, #20]
    e290:	f001 82ee 	beq.w	f870 <_svfprintf_r+0x19e0>
    e294:	9b05      	ldr	r3, [sp, #20]
    e296:	9508      	str	r5, [sp, #32]
    e298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e29c:	9302      	str	r3, [sp, #8]
    e29e:	2100      	movs	r1, #0
    e2a0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    e2a4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    e2a8:	9107      	str	r1, [sp, #28]
    e2aa:	9103      	str	r1, [sp, #12]
    e2ac:	910f      	str	r1, [sp, #60]	; 0x3c
    e2ae:	e732      	b.n	e116 <_svfprintf_r+0x286>
    e2b0:	930b      	str	r3, [sp, #44]	; 0x2c
    e2b2:	9b08      	ldr	r3, [sp, #32]
    e2b4:	461a      	mov	r2, r3
    e2b6:	2300      	movs	r3, #0
    e2b8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e2bc:	4613      	mov	r3, r2
    e2be:	f853 4b04 	ldr.w	r4, [r3], #4
    e2c2:	9308      	str	r3, [sp, #32]
    e2c4:	2c00      	cmp	r4, #0
    e2c6:	f000 8548 	beq.w	ed5a <_svfprintf_r+0xeca>
    e2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e2cc:	2b53      	cmp	r3, #83	; 0x53
    e2ce:	f000 86ec 	beq.w	f0aa <_svfprintf_r+0x121a>
    e2d2:	f018 0310 	ands.w	r3, r8, #16
    e2d6:	930c      	str	r3, [sp, #48]	; 0x30
    e2d8:	f040 86e7 	bne.w	f0aa <_svfprintf_r+0x121a>
    e2dc:	9b03      	ldr	r3, [sp, #12]
    e2de:	1c5d      	adds	r5, r3, #1
    e2e0:	f001 80e5 	beq.w	f4ae <_svfprintf_r+0x161e>
    e2e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    e2e6:	461a      	mov	r2, r3
    e2e8:	4620      	mov	r0, r4
    e2ea:	f001 fca1 	bl	fc30 <memchr>
    e2ee:	9007      	str	r0, [sp, #28]
    e2f0:	2800      	cmp	r0, #0
    e2f2:	f001 8328 	beq.w	f946 <_svfprintf_r+0x1ab6>
    e2f6:	9b07      	ldr	r3, [sp, #28]
    e2f8:	1b1a      	subs	r2, r3, r4
    e2fa:	9205      	str	r2, [sp, #20]
    e2fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e2fe:	9303      	str	r3, [sp, #12]
    e300:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e304:	930f      	str	r3, [sp, #60]	; 0x3c
    e306:	930d      	str	r3, [sp, #52]	; 0x34
    e308:	9307      	str	r3, [sp, #28]
    e30a:	2373      	movs	r3, #115	; 0x73
    e30c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e310:	9202      	str	r2, [sp, #8]
    e312:	930b      	str	r3, [sp, #44]	; 0x2c
    e314:	e79d      	b.n	e252 <_svfprintf_r+0x3c2>
    e316:	f018 0f20 	tst.w	r8, #32
    e31a:	930b      	str	r3, [sp, #44]	; 0x2c
    e31c:	9b08      	ldr	r3, [sp, #32]
    e31e:	d03d      	beq.n	e39c <_svfprintf_r+0x50c>
    e320:	3307      	adds	r3, #7
    e322:	f023 0307 	bic.w	r3, r3, #7
    e326:	461a      	mov	r2, r3
    e328:	4611      	mov	r1, r2
    e32a:	685b      	ldr	r3, [r3, #4]
    e32c:	f851 2b08 	ldr.w	r2, [r1], #8
    e330:	9108      	str	r1, [sp, #32]
    e332:	4619      	mov	r1, r3
    e334:	2b00      	cmp	r3, #0
    e336:	f2c0 840c 	blt.w	eb52 <_svfprintf_r+0xcc2>
    e33a:	9b03      	ldr	r3, [sp, #12]
    e33c:	3301      	adds	r3, #1
    e33e:	f000 829e 	beq.w	e87e <_svfprintf_r+0x9ee>
    e342:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    e346:	ea52 0301 	orrs.w	r3, r2, r1
    e34a:	9002      	str	r0, [sp, #8]
    e34c:	f040 8299 	bne.w	e882 <_svfprintf_r+0x9f2>
    e350:	9b03      	ldr	r3, [sp, #12]
    e352:	2b00      	cmp	r3, #0
    e354:	f040 829a 	bne.w	e88c <_svfprintf_r+0x9fc>
    e358:	4680      	mov	r8, r0
    e35a:	2300      	movs	r3, #0
    e35c:	9303      	str	r3, [sp, #12]
    e35e:	9305      	str	r3, [sp, #20]
    e360:	ac50      	add	r4, sp, #320	; 0x140
    e362:	e106      	b.n	e572 <_svfprintf_r+0x6e2>
    e364:	9b08      	ldr	r3, [sp, #32]
    e366:	f853 2b04 	ldr.w	r2, [r3], #4
    e36a:	9206      	str	r2, [sp, #24]
    e36c:	2a00      	cmp	r2, #0
    e36e:	f280 8419 	bge.w	eba4 <_svfprintf_r+0xd14>
    e372:	9a06      	ldr	r2, [sp, #24]
    e374:	9308      	str	r3, [sp, #32]
    e376:	4252      	negs	r2, r2
    e378:	9206      	str	r2, [sp, #24]
    e37a:	f899 3000 	ldrb.w	r3, [r9]
    e37e:	f048 0804 	orr.w	r8, r8, #4
    e382:	e5e1      	b.n	df48 <_svfprintf_r+0xb8>
    e384:	f899 3000 	ldrb.w	r3, [r9]
    e388:	f048 0808 	orr.w	r8, r8, #8
    e38c:	e5dc      	b.n	df48 <_svfprintf_r+0xb8>
    e38e:	f048 0810 	orr.w	r8, r8, #16
    e392:	f018 0f20 	tst.w	r8, #32
    e396:	930b      	str	r3, [sp, #44]	; 0x2c
    e398:	9b08      	ldr	r3, [sp, #32]
    e39a:	d1c1      	bne.n	e320 <_svfprintf_r+0x490>
    e39c:	f018 0f10 	tst.w	r8, #16
    e3a0:	f040 840b 	bne.w	ebba <_svfprintf_r+0xd2a>
    e3a4:	f018 0f40 	tst.w	r8, #64	; 0x40
    e3a8:	f000 8403 	beq.w	ebb2 <_svfprintf_r+0xd22>
    e3ac:	f933 2b04 	ldrsh.w	r2, [r3], #4
    e3b0:	9308      	str	r3, [sp, #32]
    e3b2:	17d1      	asrs	r1, r2, #31
    e3b4:	460b      	mov	r3, r1
    e3b6:	e7bd      	b.n	e334 <_svfprintf_r+0x4a4>
    e3b8:	9b08      	ldr	r3, [sp, #32]
    e3ba:	f048 0202 	orr.w	r2, r8, #2
    e3be:	9202      	str	r2, [sp, #8]
    e3c0:	f853 2b04 	ldr.w	r2, [r3], #4
    e3c4:	9308      	str	r3, [sp, #32]
    e3c6:	f647 0330 	movw	r3, #30768	; 0x7830
    e3ca:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    e3ce:	2078      	movs	r0, #120	; 0x78
    e3d0:	4b45      	ldr	r3, [pc, #276]	; (e4e8 <_svfprintf_r+0x658>)
    e3d2:	9311      	str	r3, [sp, #68]	; 0x44
    e3d4:	2100      	movs	r1, #0
    e3d6:	2302      	movs	r3, #2
    e3d8:	900b      	str	r0, [sp, #44]	; 0x2c
    e3da:	2000      	movs	r0, #0
    e3dc:	9c03      	ldr	r4, [sp, #12]
    e3de:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    e3e2:	1c60      	adds	r0, r4, #1
    e3e4:	f000 80ad 	beq.w	e542 <_svfprintf_r+0x6b2>
    e3e8:	9802      	ldr	r0, [sp, #8]
    e3ea:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    e3ee:	ea52 0001 	orrs.w	r0, r2, r1
    e3f2:	f040 80a4 	bne.w	e53e <_svfprintf_r+0x6ae>
    e3f6:	2c00      	cmp	r4, #0
    e3f8:	f040 86ae 	bne.w	f158 <_svfprintf_r+0x12c8>
    e3fc:	2b00      	cmp	r3, #0
    e3fe:	d1ac      	bne.n	e35a <_svfprintf_r+0x4ca>
    e400:	9b02      	ldr	r3, [sp, #8]
    e402:	f013 0301 	ands.w	r3, r3, #1
    e406:	9305      	str	r3, [sp, #20]
    e408:	f000 83d1 	beq.w	ebae <_svfprintf_r+0xd1e>
    e40c:	2330      	movs	r3, #48	; 0x30
    e40e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    e412:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e416:	e0ac      	b.n	e572 <_svfprintf_r+0x6e2>
    e418:	f018 0f20 	tst.w	r8, #32
    e41c:	f040 83d4 	bne.w	ebc8 <_svfprintf_r+0xd38>
    e420:	f018 0f10 	tst.w	r8, #16
    e424:	f040 869f 	bne.w	f166 <_svfprintf_r+0x12d6>
    e428:	f018 0f40 	tst.w	r8, #64	; 0x40
    e42c:	f040 8797 	bne.w	f35e <_svfprintf_r+0x14ce>
    e430:	f418 7f00 	tst.w	r8, #512	; 0x200
    e434:	f000 8697 	beq.w	f166 <_svfprintf_r+0x12d6>
    e438:	9b08      	ldr	r3, [sp, #32]
    e43a:	9904      	ldr	r1, [sp, #16]
    e43c:	f853 2b04 	ldr.w	r2, [r3], #4
    e440:	9308      	str	r3, [sp, #32]
    e442:	7011      	strb	r1, [r2, #0]
    e444:	464c      	mov	r4, r9
    e446:	e555      	b.n	def4 <_svfprintf_r+0x64>
    e448:	f899 3000 	ldrb.w	r3, [r9]
    e44c:	2b68      	cmp	r3, #104	; 0x68
    e44e:	bf03      	ittte	eq
    e450:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    e454:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    e458:	f109 0901 	addeq.w	r9, r9, #1
    e45c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    e460:	e572      	b.n	df48 <_svfprintf_r+0xb8>
    e462:	f899 3000 	ldrb.w	r3, [r9]
    e466:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    e46a:	e56d      	b.n	df48 <_svfprintf_r+0xb8>
    e46c:	f899 3000 	ldrb.w	r3, [r9]
    e470:	2b6c      	cmp	r3, #108	; 0x6c
    e472:	bf03      	ittte	eq
    e474:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    e478:	f048 0820 	orreq.w	r8, r8, #32
    e47c:	f109 0901 	addeq.w	r9, r9, #1
    e480:	f048 0810 	orrne.w	r8, r8, #16
    e484:	e560      	b.n	df48 <_svfprintf_r+0xb8>
    e486:	930b      	str	r3, [sp, #44]	; 0x2c
    e488:	f048 0810 	orr.w	r8, r8, #16
    e48c:	f018 0120 	ands.w	r1, r8, #32
    e490:	f000 8351 	beq.w	eb36 <_svfprintf_r+0xca6>
    e494:	9b08      	ldr	r3, [sp, #32]
    e496:	3307      	adds	r3, #7
    e498:	f023 0307 	bic.w	r3, r3, #7
    e49c:	6859      	ldr	r1, [r3, #4]
    e49e:	f853 2b08 	ldr.w	r2, [r3], #8
    e4a2:	9308      	str	r3, [sp, #32]
    e4a4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    e4a8:	9302      	str	r3, [sp, #8]
    e4aa:	2300      	movs	r3, #0
    e4ac:	e795      	b.n	e3da <_svfprintf_r+0x54a>
    e4ae:	930b      	str	r3, [sp, #44]	; 0x2c
    e4b0:	f048 0310 	orr.w	r3, r8, #16
    e4b4:	9302      	str	r3, [sp, #8]
    e4b6:	9b02      	ldr	r3, [sp, #8]
    e4b8:	f013 0120 	ands.w	r1, r3, #32
    e4bc:	f000 8329 	beq.w	eb12 <_svfprintf_r+0xc82>
    e4c0:	9b08      	ldr	r3, [sp, #32]
    e4c2:	3307      	adds	r3, #7
    e4c4:	f023 0307 	bic.w	r3, r3, #7
    e4c8:	6859      	ldr	r1, [r3, #4]
    e4ca:	f853 2b08 	ldr.w	r2, [r3], #8
    e4ce:	9308      	str	r3, [sp, #32]
    e4d0:	2301      	movs	r3, #1
    e4d2:	e782      	b.n	e3da <_svfprintf_r+0x54a>
    e4d4:	f899 3000 	ldrb.w	r3, [r9]
    e4d8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    e4dc:	e534      	b.n	df48 <_svfprintf_r+0xb8>
    e4de:	bf00      	nop
    e4e0:	20000c84 	.word	0x20000c84
    e4e4:	20000c88 	.word	0x20000c88
    e4e8:	20000c94 	.word	0x20000c94
    e4ec:	4649      	mov	r1, r9
    e4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
    e4f2:	2b2a      	cmp	r3, #42	; 0x2a
    e4f4:	f001 8249 	beq.w	f98a <_svfprintf_r+0x1afa>
    e4f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e4fc:	2a09      	cmp	r2, #9
    e4fe:	4689      	mov	r9, r1
    e500:	bf98      	it	ls
    e502:	2100      	movls	r1, #0
    e504:	f201 8144 	bhi.w	f790 <_svfprintf_r+0x1900>
    e508:	f819 3b01 	ldrb.w	r3, [r9], #1
    e50c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e510:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e514:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e518:	2a09      	cmp	r2, #9
    e51a:	d9f5      	bls.n	e508 <_svfprintf_r+0x678>
    e51c:	9103      	str	r1, [sp, #12]
    e51e:	e515      	b.n	df4c <_svfprintf_r+0xbc>
    e520:	f899 3000 	ldrb.w	r3, [r9]
    e524:	f048 0801 	orr.w	r8, r8, #1
    e528:	e50e      	b.n	df48 <_svfprintf_r+0xb8>
    e52a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    e52e:	2b00      	cmp	r3, #0
    e530:	f47f ad8f 	bne.w	e052 <_svfprintf_r+0x1c2>
    e534:	f899 3000 	ldrb.w	r3, [r9]
    e538:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    e53c:	e504      	b.n	df48 <_svfprintf_r+0xb8>
    e53e:	f8cd 8008 	str.w	r8, [sp, #8]
    e542:	2b01      	cmp	r3, #1
    e544:	f000 819d 	beq.w	e882 <_svfprintf_r+0x9f2>
    e548:	2b02      	cmp	r3, #2
    e54a:	ac50      	add	r4, sp, #320	; 0x140
    e54c:	d120      	bne.n	e590 <_svfprintf_r+0x700>
    e54e:	9811      	ldr	r0, [sp, #68]	; 0x44
    e550:	f002 030f 	and.w	r3, r2, #15
    e554:	0912      	lsrs	r2, r2, #4
    e556:	5cc3      	ldrb	r3, [r0, r3]
    e558:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e55c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    e560:	0909      	lsrs	r1, r1, #4
    e562:	ea52 0301 	orrs.w	r3, r2, r1
    e566:	d1f3      	bne.n	e550 <_svfprintf_r+0x6c0>
    e568:	ab50      	add	r3, sp, #320	; 0x140
    e56a:	1b1b      	subs	r3, r3, r4
    e56c:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e570:	9305      	str	r3, [sp, #20]
    e572:	9a05      	ldr	r2, [sp, #20]
    e574:	9803      	ldr	r0, [sp, #12]
    e576:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e57a:	4282      	cmp	r2, r0
    e57c:	f04f 0300 	mov.w	r3, #0
    e580:	bfb8      	it	lt
    e582:	4602      	movlt	r2, r0
    e584:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    e588:	9307      	str	r3, [sp, #28]
    e58a:	9202      	str	r2, [sp, #8]
    e58c:	930f      	str	r3, [sp, #60]	; 0x3c
    e58e:	e660      	b.n	e252 <_svfprintf_r+0x3c2>
    e590:	f002 0307 	and.w	r3, r2, #7
    e594:	08d2      	lsrs	r2, r2, #3
    e596:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    e59a:	08c9      	lsrs	r1, r1, #3
    e59c:	3330      	adds	r3, #48	; 0x30
    e59e:	ea52 0501 	orrs.w	r5, r2, r1
    e5a2:	4620      	mov	r0, r4
    e5a4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e5a8:	d1f2      	bne.n	e590 <_svfprintf_r+0x700>
    e5aa:	9a02      	ldr	r2, [sp, #8]
    e5ac:	07d1      	lsls	r1, r2, #31
    e5ae:	f100 824d 	bmi.w	ea4c <_svfprintf_r+0xbbc>
    e5b2:	ab50      	add	r3, sp, #320	; 0x140
    e5b4:	1b1b      	subs	r3, r3, r4
    e5b6:	4690      	mov	r8, r2
    e5b8:	9305      	str	r3, [sp, #20]
    e5ba:	e7da      	b.n	e572 <_svfprintf_r+0x6e2>
    e5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5be:	2b65      	cmp	r3, #101	; 0x65
    e5c0:	f340 80d4 	ble.w	e76c <_svfprintf_r+0x8dc>
    e5c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e5cc:	f040 81c1 	bne.w	e952 <_svfprintf_r+0xac2>
    e5d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e5d2:	49ba      	ldr	r1, [pc, #744]	; (e8bc <_svfprintf_r+0xa2c>)
    e5d4:	f8ca 1000 	str.w	r1, [sl]
    e5d8:	3301      	adds	r3, #1
    e5da:	3201      	adds	r2, #1
    e5dc:	2101      	movs	r1, #1
    e5de:	2b07      	cmp	r3, #7
    e5e0:	9226      	str	r2, [sp, #152]	; 0x98
    e5e2:	9325      	str	r3, [sp, #148]	; 0x94
    e5e4:	f8ca 1004 	str.w	r1, [sl, #4]
    e5e8:	f300 8551 	bgt.w	f08e <_svfprintf_r+0x11fe>
    e5ec:	f10a 0a08 	add.w	sl, sl, #8
    e5f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e5f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    e5f4:	428b      	cmp	r3, r1
    e5f6:	f280 82d0 	bge.w	eb9a <_svfprintf_r+0xd0a>
    e5fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e5fc:	9912      	ldr	r1, [sp, #72]	; 0x48
    e5fe:	441a      	add	r2, r3
    e600:	e9ca 1300 	strd	r1, r3, [sl]
    e604:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e606:	9226      	str	r2, [sp, #152]	; 0x98
    e608:	3301      	adds	r3, #1
    e60a:	2b07      	cmp	r3, #7
    e60c:	9325      	str	r3, [sp, #148]	; 0x94
    e60e:	f300 8397 	bgt.w	ed40 <_svfprintf_r+0xeb0>
    e612:	f10a 0a08 	add.w	sl, sl, #8
    e616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e618:	1e5c      	subs	r4, r3, #1
    e61a:	2c00      	cmp	r4, #0
    e61c:	f77f add0 	ble.w	e1c0 <_svfprintf_r+0x330>
    e620:	2c10      	cmp	r4, #16
    e622:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e624:	f340 856e 	ble.w	f104 <_svfprintf_r+0x1274>
    e628:	ee1b 6a10 	vmov	r6, s22
    e62c:	2510      	movs	r5, #16
    e62e:	e005      	b.n	e63c <_svfprintf_r+0x7ac>
    e630:	f10a 0a08 	add.w	sl, sl, #8
    e634:	3c10      	subs	r4, #16
    e636:	2c10      	cmp	r4, #16
    e638:	f340 8564 	ble.w	f104 <_svfprintf_r+0x1274>
    e63c:	3301      	adds	r3, #1
    e63e:	49a0      	ldr	r1, [pc, #640]	; (e8c0 <_svfprintf_r+0xa30>)
    e640:	3210      	adds	r2, #16
    e642:	2b07      	cmp	r3, #7
    e644:	e9ca 1500 	strd	r1, r5, [sl]
    e648:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e64c:	ddf0      	ble.n	e630 <_svfprintf_r+0x7a0>
    e64e:	aa24      	add	r2, sp, #144	; 0x90
    e650:	4631      	mov	r1, r6
    e652:	4658      	mov	r0, fp
    e654:	f002 fb24 	bl	10ca0 <__ssprint_r>
    e658:	2800      	cmp	r0, #0
    e65a:	d17e      	bne.n	e75a <_svfprintf_r+0x8ca>
    e65c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e660:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e664:	e7e6      	b.n	e634 <_svfprintf_r+0x7a4>
    e666:	9b06      	ldr	r3, [sp, #24]
    e668:	9902      	ldr	r1, [sp, #8]
    e66a:	1a5d      	subs	r5, r3, r1
    e66c:	2d00      	cmp	r5, #0
    e66e:	f77f ad8e 	ble.w	e18e <_svfprintf_r+0x2fe>
    e672:	2d10      	cmp	r5, #16
    e674:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e676:	dd21      	ble.n	e6bc <_svfprintf_r+0x82c>
    e678:	9409      	str	r4, [sp, #36]	; 0x24
    e67a:	2610      	movs	r6, #16
    e67c:	ee1b 4a10 	vmov	r4, s22
    e680:	e004      	b.n	e68c <_svfprintf_r+0x7fc>
    e682:	3d10      	subs	r5, #16
    e684:	2d10      	cmp	r5, #16
    e686:	f10a 0a08 	add.w	sl, sl, #8
    e68a:	dd16      	ble.n	e6ba <_svfprintf_r+0x82a>
    e68c:	3301      	adds	r3, #1
    e68e:	498c      	ldr	r1, [pc, #560]	; (e8c0 <_svfprintf_r+0xa30>)
    e690:	3210      	adds	r2, #16
    e692:	2b07      	cmp	r3, #7
    e694:	e9ca 1600 	strd	r1, r6, [sl]
    e698:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e69c:	ddf1      	ble.n	e682 <_svfprintf_r+0x7f2>
    e69e:	aa24      	add	r2, sp, #144	; 0x90
    e6a0:	4621      	mov	r1, r4
    e6a2:	4658      	mov	r0, fp
    e6a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e6a8:	f002 fafa 	bl	10ca0 <__ssprint_r>
    e6ac:	2800      	cmp	r0, #0
    e6ae:	d154      	bne.n	e75a <_svfprintf_r+0x8ca>
    e6b0:	3d10      	subs	r5, #16
    e6b2:	2d10      	cmp	r5, #16
    e6b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e6b8:	dce8      	bgt.n	e68c <_svfprintf_r+0x7fc>
    e6ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e6bc:	4980      	ldr	r1, [pc, #512]	; (e8c0 <_svfprintf_r+0xa30>)
    e6be:	f8ca 5004 	str.w	r5, [sl, #4]
    e6c2:	3301      	adds	r3, #1
    e6c4:	442a      	add	r2, r5
    e6c6:	2b07      	cmp	r3, #7
    e6c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e6cc:	f8ca 1000 	str.w	r1, [sl]
    e6d0:	f300 8526 	bgt.w	f120 <_svfprintf_r+0x1290>
    e6d4:	9b03      	ldr	r3, [sp, #12]
    e6d6:	9905      	ldr	r1, [sp, #20]
    e6d8:	1a5d      	subs	r5, r3, r1
    e6da:	2d00      	cmp	r5, #0
    e6dc:	f10a 0a08 	add.w	sl, sl, #8
    e6e0:	f77f ad5b 	ble.w	e19a <_svfprintf_r+0x30a>
    e6e4:	2d10      	cmp	r5, #16
    e6e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e6e8:	dd1f      	ble.n	e72a <_svfprintf_r+0x89a>
    e6ea:	4651      	mov	r1, sl
    e6ec:	2610      	movs	r6, #16
    e6ee:	ee1b aa10 	vmov	sl, s22
    e6f2:	e004      	b.n	e6fe <_svfprintf_r+0x86e>
    e6f4:	3d10      	subs	r5, #16
    e6f6:	2d10      	cmp	r5, #16
    e6f8:	f101 0108 	add.w	r1, r1, #8
    e6fc:	dd14      	ble.n	e728 <_svfprintf_r+0x898>
    e6fe:	3301      	adds	r3, #1
    e700:	486f      	ldr	r0, [pc, #444]	; (e8c0 <_svfprintf_r+0xa30>)
    e702:	3210      	adds	r2, #16
    e704:	2b07      	cmp	r3, #7
    e706:	e9c1 0600 	strd	r0, r6, [r1]
    e70a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e70e:	ddf1      	ble.n	e6f4 <_svfprintf_r+0x864>
    e710:	aa24      	add	r2, sp, #144	; 0x90
    e712:	4651      	mov	r1, sl
    e714:	4658      	mov	r0, fp
    e716:	f002 fac3 	bl	10ca0 <__ssprint_r>
    e71a:	b9f0      	cbnz	r0, e75a <_svfprintf_r+0x8ca>
    e71c:	3d10      	subs	r5, #16
    e71e:	2d10      	cmp	r5, #16
    e720:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e724:	a927      	add	r1, sp, #156	; 0x9c
    e726:	dcea      	bgt.n	e6fe <_svfprintf_r+0x86e>
    e728:	468a      	mov	sl, r1
    e72a:	3301      	adds	r3, #1
    e72c:	4964      	ldr	r1, [pc, #400]	; (e8c0 <_svfprintf_r+0xa30>)
    e72e:	f8ca 5004 	str.w	r5, [sl, #4]
    e732:	442a      	add	r2, r5
    e734:	2b07      	cmp	r3, #7
    e736:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e73a:	f8ca 1000 	str.w	r1, [sl]
    e73e:	f300 81da 	bgt.w	eaf6 <_svfprintf_r+0xc66>
    e742:	f10a 0a08 	add.w	sl, sl, #8
    e746:	e528      	b.n	e19a <_svfprintf_r+0x30a>
    e748:	ee1b 1a10 	vmov	r1, s22
    e74c:	aa24      	add	r2, sp, #144	; 0x90
    e74e:	4658      	mov	r0, fp
    e750:	f002 faa6 	bl	10ca0 <__ssprint_r>
    e754:	2800      	cmp	r0, #0
    e756:	f43f ad47 	beq.w	e1e8 <_svfprintf_r+0x358>
    e75a:	9b07      	ldr	r3, [sp, #28]
    e75c:	2b00      	cmp	r3, #0
    e75e:	f43f aca2 	beq.w	e0a6 <_svfprintf_r+0x216>
    e762:	9907      	ldr	r1, [sp, #28]
    e764:	4658      	mov	r0, fp
    e766:	f7fe fead 	bl	d4c4 <_free_r>
    e76a:	e49c      	b.n	e0a6 <_svfprintf_r+0x216>
    e76c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e76e:	2b01      	cmp	r3, #1
    e770:	f340 817a 	ble.w	ea68 <_svfprintf_r+0xbd8>
    e774:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e776:	f8ca 4000 	str.w	r4, [sl]
    e77a:	3301      	adds	r3, #1
    e77c:	3201      	adds	r2, #1
    e77e:	2101      	movs	r1, #1
    e780:	2b07      	cmp	r3, #7
    e782:	9226      	str	r2, [sp, #152]	; 0x98
    e784:	9325      	str	r3, [sp, #148]	; 0x94
    e786:	f8ca 1004 	str.w	r1, [sl, #4]
    e78a:	f300 81f8 	bgt.w	eb7e <_svfprintf_r+0xcee>
    e78e:	f10a 0a08 	add.w	sl, sl, #8
    e792:	9910      	ldr	r1, [sp, #64]	; 0x40
    e794:	9812      	ldr	r0, [sp, #72]	; 0x48
    e796:	3301      	adds	r3, #1
    e798:	440a      	add	r2, r1
    e79a:	2b07      	cmp	r3, #7
    e79c:	e9ca 0100 	strd	r0, r1, [sl]
    e7a0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e7a4:	f300 81dd 	bgt.w	eb62 <_svfprintf_r+0xcd2>
    e7a8:	f10a 0a08 	add.w	sl, sl, #8
    e7ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
    e7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e7b4:	f000 8177 	beq.w	eaa6 <_svfprintf_r+0xc16>
    e7b8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e7ba:	3301      	adds	r3, #1
    e7bc:	3901      	subs	r1, #1
    e7be:	3401      	adds	r4, #1
    e7c0:	440a      	add	r2, r1
    e7c2:	2b07      	cmp	r3, #7
    e7c4:	f8ca 4000 	str.w	r4, [sl]
    e7c8:	9325      	str	r3, [sp, #148]	; 0x94
    e7ca:	f8ca 1004 	str.w	r1, [sl, #4]
    e7ce:	9226      	str	r2, [sp, #152]	; 0x98
    e7d0:	f300 815b 	bgt.w	ea8a <_svfprintf_r+0xbfa>
    e7d4:	f10a 0a08 	add.w	sl, sl, #8
    e7d8:	9914      	ldr	r1, [sp, #80]	; 0x50
    e7da:	f8ca 1004 	str.w	r1, [sl, #4]
    e7de:	3301      	adds	r3, #1
    e7e0:	440a      	add	r2, r1
    e7e2:	2b07      	cmp	r3, #7
    e7e4:	a91e      	add	r1, sp, #120	; 0x78
    e7e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e7ea:	f8ca 1000 	str.w	r1, [sl]
    e7ee:	f77f ace5 	ble.w	e1bc <_svfprintf_r+0x32c>
    e7f2:	ee1b 1a10 	vmov	r1, s22
    e7f6:	aa24      	add	r2, sp, #144	; 0x90
    e7f8:	4658      	mov	r0, fp
    e7fa:	f002 fa51 	bl	10ca0 <__ssprint_r>
    e7fe:	2800      	cmp	r0, #0
    e800:	d1ab      	bne.n	e75a <_svfprintf_r+0x8ca>
    e802:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e804:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e808:	e4da      	b.n	e1c0 <_svfprintf_r+0x330>
    e80a:	2d10      	cmp	r5, #16
    e80c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    e810:	4e2c      	ldr	r6, [pc, #176]	; (e8c4 <_svfprintf_r+0xa34>)
    e812:	dd24      	ble.n	e85e <_svfprintf_r+0x9ce>
    e814:	9417      	str	r4, [sp, #92]	; 0x5c
    e816:	2310      	movs	r3, #16
    e818:	ee1b 4a10 	vmov	r4, s22
    e81c:	4608      	mov	r0, r1
    e81e:	e004      	b.n	e82a <_svfprintf_r+0x99a>
    e820:	3d10      	subs	r5, #16
    e822:	2d10      	cmp	r5, #16
    e824:	f10a 0a08 	add.w	sl, sl, #8
    e828:	dd17      	ble.n	e85a <_svfprintf_r+0x9ca>
    e82a:	3001      	adds	r0, #1
    e82c:	3210      	adds	r2, #16
    e82e:	2807      	cmp	r0, #7
    e830:	e9ca 6300 	strd	r6, r3, [sl]
    e834:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    e838:	ddf2      	ble.n	e820 <_svfprintf_r+0x990>
    e83a:	aa24      	add	r2, sp, #144	; 0x90
    e83c:	4621      	mov	r1, r4
    e83e:	4658      	mov	r0, fp
    e840:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e844:	f002 fa2c 	bl	10ca0 <__ssprint_r>
    e848:	2800      	cmp	r0, #0
    e84a:	d186      	bne.n	e75a <_svfprintf_r+0x8ca>
    e84c:	3d10      	subs	r5, #16
    e84e:	2d10      	cmp	r5, #16
    e850:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    e854:	f04f 0310 	mov.w	r3, #16
    e858:	dce7      	bgt.n	e82a <_svfprintf_r+0x99a>
    e85a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    e85c:	4601      	mov	r1, r0
    e85e:	3101      	adds	r1, #1
    e860:	442a      	add	r2, r5
    e862:	2907      	cmp	r1, #7
    e864:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    e868:	f8ca 6000 	str.w	r6, [sl]
    e86c:	f8ca 5004 	str.w	r5, [sl, #4]
    e870:	f300 83bd 	bgt.w	efee <_svfprintf_r+0x115e>
    e874:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    e878:	f10a 0a08 	add.w	sl, sl, #8
    e87c:	e45d      	b.n	e13a <_svfprintf_r+0x2aa>
    e87e:	f8cd 8008 	str.w	r8, [sp, #8]
    e882:	2a0a      	cmp	r2, #10
    e884:	f171 0300 	sbcs.w	r3, r1, #0
    e888:	f080 8345 	bcs.w	ef16 <_svfprintf_r+0x1086>
    e88c:	3230      	adds	r2, #48	; 0x30
    e88e:	2301      	movs	r3, #1
    e890:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e894:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    e898:	9305      	str	r3, [sp, #20]
    e89a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    e89e:	e668      	b.n	e572 <_svfprintf_r+0x6e2>
    e8a0:	ee1b 1a10 	vmov	r1, s22
    e8a4:	aa24      	add	r2, sp, #144	; 0x90
    e8a6:	4658      	mov	r0, fp
    e8a8:	f002 f9fa 	bl	10ca0 <__ssprint_r>
    e8ac:	2800      	cmp	r0, #0
    e8ae:	f47f af54 	bne.w	e75a <_svfprintf_r+0x8ca>
    e8b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e8b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e8b8:	e452      	b.n	e160 <_svfprintf_r+0x2d0>
    e8ba:	bf00      	nop
    e8bc:	20000cc4 	.word	0x20000cc4
    e8c0:	2000120c 	.word	0x2000120c
    e8c4:	20000cc8 	.word	0x20000cc8
    e8c8:	ee1b 1a10 	vmov	r1, s22
    e8cc:	aa24      	add	r2, sp, #144	; 0x90
    e8ce:	4658      	mov	r0, fp
    e8d0:	f002 f9e6 	bl	10ca0 <__ssprint_r>
    e8d4:	2800      	cmp	r0, #0
    e8d6:	f47f af40 	bne.w	e75a <_svfprintf_r+0x8ca>
    e8da:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e8dc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e8e0:	e451      	b.n	e186 <_svfprintf_r+0x2f6>
    e8e2:	2c10      	cmp	r4, #16
    e8e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e8e6:	4ebe      	ldr	r6, [pc, #760]	; (ebe0 <_svfprintf_r+0xd50>)
    e8e8:	dd1f      	ble.n	e92a <_svfprintf_r+0xa9a>
    e8ea:	ee1b 8a10 	vmov	r8, s22
    e8ee:	2510      	movs	r5, #16
    e8f0:	e004      	b.n	e8fc <_svfprintf_r+0xa6c>
    e8f2:	3c10      	subs	r4, #16
    e8f4:	2c10      	cmp	r4, #16
    e8f6:	f10a 0a08 	add.w	sl, sl, #8
    e8fa:	dd16      	ble.n	e92a <_svfprintf_r+0xa9a>
    e8fc:	3301      	adds	r3, #1
    e8fe:	3210      	adds	r2, #16
    e900:	2b07      	cmp	r3, #7
    e902:	e9ca 6500 	strd	r6, r5, [sl]
    e906:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e90a:	ddf2      	ble.n	e8f2 <_svfprintf_r+0xa62>
    e90c:	aa24      	add	r2, sp, #144	; 0x90
    e90e:	4641      	mov	r1, r8
    e910:	4658      	mov	r0, fp
    e912:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    e916:	f002 f9c3 	bl	10ca0 <__ssprint_r>
    e91a:	2800      	cmp	r0, #0
    e91c:	f47f af1d 	bne.w	e75a <_svfprintf_r+0x8ca>
    e920:	3c10      	subs	r4, #16
    e922:	2c10      	cmp	r4, #16
    e924:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    e928:	dce8      	bgt.n	e8fc <_svfprintf_r+0xa6c>
    e92a:	3301      	adds	r3, #1
    e92c:	4422      	add	r2, r4
    e92e:	2b07      	cmp	r3, #7
    e930:	e9ca 6400 	strd	r6, r4, [sl]
    e934:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    e938:	f77f ac4b 	ble.w	e1d2 <_svfprintf_r+0x342>
    e93c:	ee1b 1a10 	vmov	r1, s22
    e940:	aa24      	add	r2, sp, #144	; 0x90
    e942:	4658      	mov	r0, fp
    e944:	f002 f9ac 	bl	10ca0 <__ssprint_r>
    e948:	2800      	cmp	r0, #0
    e94a:	f47f af06 	bne.w	e75a <_svfprintf_r+0x8ca>
    e94e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e950:	e43f      	b.n	e1d2 <_svfprintf_r+0x342>
    e952:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e954:	2900      	cmp	r1, #0
    e956:	f340 835a 	ble.w	f00e <_svfprintf_r+0x117e>
    e95a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e95e:	429e      	cmp	r6, r3
    e960:	bfa8      	it	ge
    e962:	461e      	movge	r6, r3
    e964:	2e00      	cmp	r6, #0
    e966:	dd0b      	ble.n	e980 <_svfprintf_r+0xaf0>
    e968:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e96a:	3301      	adds	r3, #1
    e96c:	4432      	add	r2, r6
    e96e:	2b07      	cmp	r3, #7
    e970:	e9ca 4600 	strd	r4, r6, [sl]
    e974:	9226      	str	r2, [sp, #152]	; 0x98
    e976:	9325      	str	r3, [sp, #148]	; 0x94
    e978:	f300 8689 	bgt.w	f68e <_svfprintf_r+0x17fe>
    e97c:	f10a 0a08 	add.w	sl, sl, #8
    e980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e982:	2e00      	cmp	r6, #0
    e984:	bfa8      	it	ge
    e986:	1bad      	subge	r5, r5, r6
    e988:	2d00      	cmp	r5, #0
    e98a:	f300 8203 	bgt.w	ed94 <_svfprintf_r+0xf04>
    e98e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e990:	f418 6f80 	tst.w	r8, #1024	; 0x400
    e994:	4423      	add	r3, r4
    e996:	9305      	str	r3, [sp, #20]
    e998:	f040 821f 	bne.w	edda <_svfprintf_r+0xf4a>
    e99c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e99e:	990e      	ldr	r1, [sp, #56]	; 0x38
    e9a0:	428b      	cmp	r3, r1
    e9a2:	db03      	blt.n	e9ac <_svfprintf_r+0xb1c>
    e9a4:	f018 0f01 	tst.w	r8, #1
    e9a8:	f000 84cf 	beq.w	f34a <_svfprintf_r+0x14ba>
    e9ac:	9910      	ldr	r1, [sp, #64]	; 0x40
    e9ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    e9b0:	440a      	add	r2, r1
    e9b2:	e9ca 0100 	strd	r0, r1, [sl]
    e9b6:	9925      	ldr	r1, [sp, #148]	; 0x94
    e9b8:	9226      	str	r2, [sp, #152]	; 0x98
    e9ba:	3101      	adds	r1, #1
    e9bc:	2907      	cmp	r1, #7
    e9be:	9125      	str	r1, [sp, #148]	; 0x94
    e9c0:	f300 86a5 	bgt.w	f70e <_svfprintf_r+0x187e>
    e9c4:	f10a 0a08 	add.w	sl, sl, #8
    e9c8:	990e      	ldr	r1, [sp, #56]	; 0x38
    e9ca:	1865      	adds	r5, r4, r1
    e9cc:	1acc      	subs	r4, r1, r3
    e9ce:	9b05      	ldr	r3, [sp, #20]
    e9d0:	1aed      	subs	r5, r5, r3
    e9d2:	42a5      	cmp	r5, r4
    e9d4:	bfa8      	it	ge
    e9d6:	4625      	movge	r5, r4
    e9d8:	2d00      	cmp	r5, #0
    e9da:	dd0d      	ble.n	e9f8 <_svfprintf_r+0xb68>
    e9dc:	f8ca 3000 	str.w	r3, [sl]
    e9e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    e9e2:	f8ca 5004 	str.w	r5, [sl, #4]
    e9e6:	3301      	adds	r3, #1
    e9e8:	442a      	add	r2, r5
    e9ea:	2b07      	cmp	r3, #7
    e9ec:	9226      	str	r2, [sp, #152]	; 0x98
    e9ee:	9325      	str	r3, [sp, #148]	; 0x94
    e9f0:	f300 86bb 	bgt.w	f76a <_svfprintf_r+0x18da>
    e9f4:	f10a 0a08 	add.w	sl, sl, #8
    e9f8:	2d00      	cmp	r5, #0
    e9fa:	bfa8      	it	ge
    e9fc:	1b64      	subge	r4, r4, r5
    e9fe:	2c00      	cmp	r4, #0
    ea00:	f77f abde 	ble.w	e1c0 <_svfprintf_r+0x330>
    ea04:	2c10      	cmp	r4, #16
    ea06:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea08:	f340 837c 	ble.w	f104 <_svfprintf_r+0x1274>
    ea0c:	ee1b 6a10 	vmov	r6, s22
    ea10:	2510      	movs	r5, #16
    ea12:	e005      	b.n	ea20 <_svfprintf_r+0xb90>
    ea14:	f10a 0a08 	add.w	sl, sl, #8
    ea18:	3c10      	subs	r4, #16
    ea1a:	2c10      	cmp	r4, #16
    ea1c:	f340 8372 	ble.w	f104 <_svfprintf_r+0x1274>
    ea20:	3301      	adds	r3, #1
    ea22:	4970      	ldr	r1, [pc, #448]	; (ebe4 <_svfprintf_r+0xd54>)
    ea24:	3210      	adds	r2, #16
    ea26:	2b07      	cmp	r3, #7
    ea28:	e9ca 1500 	strd	r1, r5, [sl]
    ea2c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ea30:	ddf0      	ble.n	ea14 <_svfprintf_r+0xb84>
    ea32:	aa24      	add	r2, sp, #144	; 0x90
    ea34:	4631      	mov	r1, r6
    ea36:	4658      	mov	r0, fp
    ea38:	f002 f932 	bl	10ca0 <__ssprint_r>
    ea3c:	2800      	cmp	r0, #0
    ea3e:	f47f ae8c 	bne.w	e75a <_svfprintf_r+0x8ca>
    ea42:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ea46:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ea4a:	e7e5      	b.n	ea18 <_svfprintf_r+0xb88>
    ea4c:	2b30      	cmp	r3, #48	; 0x30
    ea4e:	f43f ad8b 	beq.w	e568 <_svfprintf_r+0x6d8>
    ea52:	2330      	movs	r3, #48	; 0x30
    ea54:	3802      	subs	r0, #2
    ea56:	f804 3c01 	strb.w	r3, [r4, #-1]
    ea5a:	ab50      	add	r3, sp, #320	; 0x140
    ea5c:	1a1b      	subs	r3, r3, r0
    ea5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    ea62:	9305      	str	r3, [sp, #20]
    ea64:	4604      	mov	r4, r0
    ea66:	e584      	b.n	e572 <_svfprintf_r+0x6e2>
    ea68:	f018 0f01 	tst.w	r8, #1
    ea6c:	f47f ae82 	bne.w	e774 <_svfprintf_r+0x8e4>
    ea70:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ea72:	f8ca 4000 	str.w	r4, [sl]
    ea76:	3301      	adds	r3, #1
    ea78:	3201      	adds	r2, #1
    ea7a:	2101      	movs	r1, #1
    ea7c:	2b07      	cmp	r3, #7
    ea7e:	9226      	str	r2, [sp, #152]	; 0x98
    ea80:	9325      	str	r3, [sp, #148]	; 0x94
    ea82:	f8ca 1004 	str.w	r1, [sl, #4]
    ea86:	f77f aea5 	ble.w	e7d4 <_svfprintf_r+0x944>
    ea8a:	ee1b 1a10 	vmov	r1, s22
    ea8e:	aa24      	add	r2, sp, #144	; 0x90
    ea90:	4658      	mov	r0, fp
    ea92:	f002 f905 	bl	10ca0 <__ssprint_r>
    ea96:	2800      	cmp	r0, #0
    ea98:	f47f ae5f 	bne.w	e75a <_svfprintf_r+0x8ca>
    ea9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eaa0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eaa4:	e698      	b.n	e7d8 <_svfprintf_r+0x948>
    eaa6:	990e      	ldr	r1, [sp, #56]	; 0x38
    eaa8:	1e4c      	subs	r4, r1, #1
    eaaa:	2c00      	cmp	r4, #0
    eaac:	f77f ae94 	ble.w	e7d8 <_svfprintf_r+0x948>
    eab0:	2c10      	cmp	r4, #16
    eab2:	f340 8361 	ble.w	f178 <_svfprintf_r+0x12e8>
    eab6:	ee1b 6a10 	vmov	r6, s22
    eaba:	2510      	movs	r5, #16
    eabc:	e005      	b.n	eaca <_svfprintf_r+0xc3a>
    eabe:	f10a 0a08 	add.w	sl, sl, #8
    eac2:	3c10      	subs	r4, #16
    eac4:	2c10      	cmp	r4, #16
    eac6:	f340 8357 	ble.w	f178 <_svfprintf_r+0x12e8>
    eaca:	3301      	adds	r3, #1
    eacc:	4945      	ldr	r1, [pc, #276]	; (ebe4 <_svfprintf_r+0xd54>)
    eace:	3210      	adds	r2, #16
    ead0:	2b07      	cmp	r3, #7
    ead2:	e9ca 1500 	strd	r1, r5, [sl]
    ead6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eada:	ddf0      	ble.n	eabe <_svfprintf_r+0xc2e>
    eadc:	aa24      	add	r2, sp, #144	; 0x90
    eade:	4631      	mov	r1, r6
    eae0:	4658      	mov	r0, fp
    eae2:	f002 f8dd 	bl	10ca0 <__ssprint_r>
    eae6:	2800      	cmp	r0, #0
    eae8:	f47f ae37 	bne.w	e75a <_svfprintf_r+0x8ca>
    eaec:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eaf0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eaf4:	e7e5      	b.n	eac2 <_svfprintf_r+0xc32>
    eaf6:	ee1b 1a10 	vmov	r1, s22
    eafa:	aa24      	add	r2, sp, #144	; 0x90
    eafc:	4658      	mov	r0, fp
    eafe:	f002 f8cf 	bl	10ca0 <__ssprint_r>
    eb02:	2800      	cmp	r0, #0
    eb04:	f47f ae29 	bne.w	e75a <_svfprintf_r+0x8ca>
    eb08:	9a26      	ldr	r2, [sp, #152]	; 0x98
    eb0a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eb0e:	f7ff bb44 	b.w	e19a <_svfprintf_r+0x30a>
    eb12:	9b02      	ldr	r3, [sp, #8]
    eb14:	f013 0310 	ands.w	r3, r3, #16
    eb18:	f040 80c1 	bne.w	ec9e <_svfprintf_r+0xe0e>
    eb1c:	9a02      	ldr	r2, [sp, #8]
    eb1e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    eb22:	f000 837a 	beq.w	f21a <_svfprintf_r+0x138a>
    eb26:	9808      	ldr	r0, [sp, #32]
    eb28:	f850 2b04 	ldr.w	r2, [r0], #4
    eb2c:	9008      	str	r0, [sp, #32]
    eb2e:	4619      	mov	r1, r3
    eb30:	b292      	uxth	r2, r2
    eb32:	2301      	movs	r3, #1
    eb34:	e451      	b.n	e3da <_svfprintf_r+0x54a>
    eb36:	f018 0310 	ands.w	r3, r8, #16
    eb3a:	d155      	bne.n	ebe8 <_svfprintf_r+0xd58>
    eb3c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    eb40:	f000 835d 	beq.w	f1fe <_svfprintf_r+0x136e>
    eb44:	9808      	ldr	r0, [sp, #32]
    eb46:	f850 2b04 	ldr.w	r2, [r0], #4
    eb4a:	9008      	str	r0, [sp, #32]
    eb4c:	4619      	mov	r1, r3
    eb4e:	b292      	uxth	r2, r2
    eb50:	e4a8      	b.n	e4a4 <_svfprintf_r+0x614>
    eb52:	4252      	negs	r2, r2
    eb54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    eb58:	f8cd 8008 	str.w	r8, [sp, #8]
    eb5c:	202d      	movs	r0, #45	; 0x2d
    eb5e:	2301      	movs	r3, #1
    eb60:	e43c      	b.n	e3dc <_svfprintf_r+0x54c>
    eb62:	ee1b 1a10 	vmov	r1, s22
    eb66:	aa24      	add	r2, sp, #144	; 0x90
    eb68:	4658      	mov	r0, fp
    eb6a:	f002 f899 	bl	10ca0 <__ssprint_r>
    eb6e:	2800      	cmp	r0, #0
    eb70:	f47f adf3 	bne.w	e75a <_svfprintf_r+0x8ca>
    eb74:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eb78:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eb7c:	e616      	b.n	e7ac <_svfprintf_r+0x91c>
    eb7e:	ee1b 1a10 	vmov	r1, s22
    eb82:	aa24      	add	r2, sp, #144	; 0x90
    eb84:	4658      	mov	r0, fp
    eb86:	f002 f88b 	bl	10ca0 <__ssprint_r>
    eb8a:	2800      	cmp	r0, #0
    eb8c:	f47f ade5 	bne.w	e75a <_svfprintf_r+0x8ca>
    eb90:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eb94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    eb98:	e5fb      	b.n	e792 <_svfprintf_r+0x902>
    eb9a:	f018 0f01 	tst.w	r8, #1
    eb9e:	f43f ab0f 	beq.w	e1c0 <_svfprintf_r+0x330>
    eba2:	e52a      	b.n	e5fa <_svfprintf_r+0x76a>
    eba4:	9308      	str	r3, [sp, #32]
    eba6:	f899 3000 	ldrb.w	r3, [r9]
    ebaa:	f7ff b9cd 	b.w	df48 <_svfprintf_r+0xb8>
    ebae:	ac50      	add	r4, sp, #320	; 0x140
    ebb0:	e4df      	b.n	e572 <_svfprintf_r+0x6e2>
    ebb2:	f418 7f00 	tst.w	r8, #512	; 0x200
    ebb6:	f040 83db 	bne.w	f370 <_svfprintf_r+0x14e0>
    ebba:	f853 2b04 	ldr.w	r2, [r3], #4
    ebbe:	9308      	str	r3, [sp, #32]
    ebc0:	17d1      	asrs	r1, r2, #31
    ebc2:	460b      	mov	r3, r1
    ebc4:	f7ff bbb6 	b.w	e334 <_svfprintf_r+0x4a4>
    ebc8:	9b08      	ldr	r3, [sp, #32]
    ebca:	9804      	ldr	r0, [sp, #16]
    ebcc:	f853 1b04 	ldr.w	r1, [r3], #4
    ebd0:	9308      	str	r3, [sp, #32]
    ebd2:	17c2      	asrs	r2, r0, #31
    ebd4:	e9c1 0200 	strd	r0, r2, [r1]
    ebd8:	464c      	mov	r4, r9
    ebda:	f7ff b98b 	b.w	def4 <_svfprintf_r+0x64>
    ebde:	bf00      	nop
    ebe0:	20000cc8 	.word	0x20000cc8
    ebe4:	2000120c 	.word	0x2000120c
    ebe8:	9b08      	ldr	r3, [sp, #32]
    ebea:	f853 2b04 	ldr.w	r2, [r3], #4
    ebee:	9308      	str	r3, [sp, #32]
    ebf0:	e458      	b.n	e4a4 <_svfprintf_r+0x614>
    ebf2:	eeb4 8b48 	vcmp.f64	d8, d8
    ebf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebfa:	f180 8694 	bvs.w	f926 <_svfprintf_r+0x1a96>
    ebfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec00:	2b61      	cmp	r3, #97	; 0x61
    ec02:	f000 8552 	beq.w	f6aa <_svfprintf_r+0x181a>
    ec06:	2b41      	cmp	r3, #65	; 0x41
    ec08:	f000 85c0 	beq.w	f78c <_svfprintf_r+0x18fc>
    ec0c:	9b03      	ldr	r3, [sp, #12]
    ec0e:	3301      	adds	r3, #1
    ec10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec12:	f023 0520 	bic.w	r5, r3, #32
    ec16:	f000 8480 	beq.w	f51a <_svfprintf_r+0x168a>
    ec1a:	2d47      	cmp	r5, #71	; 0x47
    ec1c:	d104      	bne.n	ec28 <_svfprintf_r+0xd98>
    ec1e:	9b03      	ldr	r3, [sp, #12]
    ec20:	2b00      	cmp	r3, #0
    ec22:	bf08      	it	eq
    ec24:	2301      	moveq	r3, #1
    ec26:	9303      	str	r3, [sp, #12]
    ec28:	ee18 3a90 	vmov	r3, s17
    ec2c:	2b00      	cmp	r3, #0
    ec2e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    ec32:	4646      	mov	r6, r8
    ec34:	f2c0 8618 	blt.w	f868 <_svfprintf_r+0x19d8>
    ec38:	eeb0 ab48 	vmov.f64	d10, d8
    ec3c:	2300      	movs	r3, #0
    ec3e:	4690      	mov	r8, r2
    ec40:	9309      	str	r3, [sp, #36]	; 0x24
    ec42:	9307      	str	r3, [sp, #28]
    ec44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec46:	3b41      	subs	r3, #65	; 0x41
    ec48:	2b25      	cmp	r3, #37	; 0x25
    ec4a:	f200 8398 	bhi.w	f37e <_svfprintf_r+0x14ee>
    ec4e:	e8df f013 	tbh	[pc, r3, lsl #1]
    ec52:	046f      	.short	0x046f
    ec54:	03960396 	.word	0x03960396
    ec58:	04680396 	.word	0x04680396
    ec5c:	0396046c 	.word	0x0396046c
    ec60:	03960396 	.word	0x03960396
    ec64:	03960396 	.word	0x03960396
    ec68:	03960396 	.word	0x03960396
    ec6c:	03960396 	.word	0x03960396
    ec70:	03960396 	.word	0x03960396
    ec74:	03960396 	.word	0x03960396
    ec78:	03960396 	.word	0x03960396
    ec7c:	03960396 	.word	0x03960396
    ec80:	03960396 	.word	0x03960396
    ec84:	03960396 	.word	0x03960396
    ec88:	03960396 	.word	0x03960396
    ec8c:	03960396 	.word	0x03960396
    ec90:	03960396 	.word	0x03960396
    ec94:	03960396 	.word	0x03960396
    ec98:	04680396 	.word	0x04680396
    ec9c:	046c      	.short	0x046c
    ec9e:	9b08      	ldr	r3, [sp, #32]
    eca0:	f853 2b04 	ldr.w	r2, [r3], #4
    eca4:	9308      	str	r3, [sp, #32]
    eca6:	2301      	movs	r3, #1
    eca8:	f7ff bb97 	b.w	e3da <_svfprintf_r+0x54a>
    ecac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ecae:	2b00      	cmp	r3, #0
    ecb0:	f43f a9cf 	beq.w	e052 <_svfprintf_r+0x1c2>
    ecb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ecb6:	781b      	ldrb	r3, [r3, #0]
    ecb8:	2b00      	cmp	r3, #0
    ecba:	f43f a9ca 	beq.w	e052 <_svfprintf_r+0x1c2>
    ecbe:	f899 3000 	ldrb.w	r3, [r9]
    ecc2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    ecc6:	f7ff b93f 	b.w	df48 <_svfprintf_r+0xb8>
    ecca:	930b      	str	r3, [sp, #44]	; 0x2c
    eccc:	f8cd 8008 	str.w	r8, [sp, #8]
    ecd0:	f7ff bbf1 	b.w	e4b6 <_svfprintf_r+0x626>
    ecd4:	930b      	str	r3, [sp, #44]	; 0x2c
    ecd6:	4b9a      	ldr	r3, [pc, #616]	; (ef40 <_svfprintf_r+0x10b0>)
    ecd8:	9311      	str	r3, [sp, #68]	; 0x44
    ecda:	f018 0120 	ands.w	r1, r8, #32
    ecde:	f000 8105 	beq.w	eeec <_svfprintf_r+0x105c>
    ece2:	9b08      	ldr	r3, [sp, #32]
    ece4:	3307      	adds	r3, #7
    ece6:	f023 0307 	bic.w	r3, r3, #7
    ecea:	6859      	ldr	r1, [r3, #4]
    ecec:	f853 2b08 	ldr.w	r2, [r3], #8
    ecf0:	9308      	str	r3, [sp, #32]
    ecf2:	f018 0f01 	tst.w	r8, #1
    ecf6:	d00a      	beq.n	ed0e <_svfprintf_r+0xe7e>
    ecf8:	ea52 0301 	orrs.w	r3, r2, r1
    ecfc:	d007      	beq.n	ed0e <_svfprintf_r+0xe7e>
    ecfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ed00:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    ed04:	2330      	movs	r3, #48	; 0x30
    ed06:	f048 0802 	orr.w	r8, r8, #2
    ed0a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    ed0e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    ed12:	9302      	str	r3, [sp, #8]
    ed14:	2302      	movs	r3, #2
    ed16:	f7ff bb60 	b.w	e3da <_svfprintf_r+0x54a>
    ed1a:	930b      	str	r3, [sp, #44]	; 0x2c
    ed1c:	f7ff bbb6 	b.w	e48c <_svfprintf_r+0x5fc>
    ed20:	930b      	str	r3, [sp, #44]	; 0x2c
    ed22:	4b88      	ldr	r3, [pc, #544]	; (ef44 <_svfprintf_r+0x10b4>)
    ed24:	9311      	str	r3, [sp, #68]	; 0x44
    ed26:	e7d8      	b.n	ecda <_svfprintf_r+0xe4a>
    ed28:	9b08      	ldr	r3, [sp, #32]
    ed2a:	2101      	movs	r1, #1
    ed2c:	f853 2b04 	ldr.w	r2, [r3], #4
    ed30:	9102      	str	r1, [sp, #8]
    ed32:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    ed36:	9308      	str	r3, [sp, #32]
    ed38:	9105      	str	r1, [sp, #20]
    ed3a:	ac37      	add	r4, sp, #220	; 0xdc
    ed3c:	f7ff baaf 	b.w	e29e <_svfprintf_r+0x40e>
    ed40:	ee1b 1a10 	vmov	r1, s22
    ed44:	aa24      	add	r2, sp, #144	; 0x90
    ed46:	4658      	mov	r0, fp
    ed48:	f001 ffaa 	bl	10ca0 <__ssprint_r>
    ed4c:	2800      	cmp	r0, #0
    ed4e:	f47f ad04 	bne.w	e75a <_svfprintf_r+0x8ca>
    ed52:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ed54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ed58:	e45d      	b.n	e616 <_svfprintf_r+0x786>
    ed5a:	9b03      	ldr	r3, [sp, #12]
    ed5c:	9407      	str	r4, [sp, #28]
    ed5e:	2b06      	cmp	r3, #6
    ed60:	4622      	mov	r2, r4
    ed62:	bf28      	it	cs
    ed64:	2306      	movcs	r3, #6
    ed66:	9403      	str	r4, [sp, #12]
    ed68:	4621      	mov	r1, r4
    ed6a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    ed6e:	4c76      	ldr	r4, [pc, #472]	; (ef48 <_svfprintf_r+0x10b8>)
    ed70:	9302      	str	r3, [sp, #8]
    ed72:	9305      	str	r3, [sp, #20]
    ed74:	920f      	str	r2, [sp, #60]	; 0x3c
    ed76:	f7ff ba6c 	b.w	e252 <_svfprintf_r+0x3c2>
    ed7a:	2140      	movs	r1, #64	; 0x40
    ed7c:	4658      	mov	r0, fp
    ed7e:	f7fc ff3f 	bl	bc00 <_malloc_r>
    ed82:	6020      	str	r0, [r4, #0]
    ed84:	6120      	str	r0, [r4, #16]
    ed86:	2800      	cmp	r0, #0
    ed88:	f000 860f 	beq.w	f9aa <_svfprintf_r+0x1b1a>
    ed8c:	2340      	movs	r3, #64	; 0x40
    ed8e:	6163      	str	r3, [r4, #20]
    ed90:	f7ff b89e 	b.w	ded0 <_svfprintf_r+0x40>
    ed94:	2d10      	cmp	r5, #16
    ed96:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ed98:	f340 825d 	ble.w	f256 <_svfprintf_r+0x13c6>
    ed9c:	4651      	mov	r1, sl
    ed9e:	2610      	movs	r6, #16
    eda0:	ee1b aa10 	vmov	sl, s22
    eda4:	e004      	b.n	edb0 <_svfprintf_r+0xf20>
    eda6:	3108      	adds	r1, #8
    eda8:	3d10      	subs	r5, #16
    edaa:	2d10      	cmp	r5, #16
    edac:	f340 8252 	ble.w	f254 <_svfprintf_r+0x13c4>
    edb0:	3301      	adds	r3, #1
    edb2:	4866      	ldr	r0, [pc, #408]	; (ef4c <_svfprintf_r+0x10bc>)
    edb4:	3210      	adds	r2, #16
    edb6:	2b07      	cmp	r3, #7
    edb8:	e9c1 0600 	strd	r0, r6, [r1]
    edbc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    edc0:	ddf1      	ble.n	eda6 <_svfprintf_r+0xf16>
    edc2:	aa24      	add	r2, sp, #144	; 0x90
    edc4:	4651      	mov	r1, sl
    edc6:	4658      	mov	r0, fp
    edc8:	f001 ff6a 	bl	10ca0 <__ssprint_r>
    edcc:	2800      	cmp	r0, #0
    edce:	f47f acc4 	bne.w	e75a <_svfprintf_r+0x8ca>
    edd2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    edd6:	a927      	add	r1, sp, #156	; 0x9c
    edd8:	e7e6      	b.n	eda8 <_svfprintf_r+0xf18>
    edda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eddc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    ede0:	18e3      	adds	r3, r4, r3
    ede2:	9303      	str	r3, [sp, #12]
    ede4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ede6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    edea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    edec:	9d05      	ldr	r5, [sp, #20]
    edee:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    edf2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    edf6:	940b      	str	r4, [sp, #44]	; 0x2c
    edf8:	ee1b 1a10 	vmov	r1, s22
    edfc:	4650      	mov	r0, sl
    edfe:	2b00      	cmp	r3, #0
    ee00:	d034      	beq.n	ee6c <_svfprintf_r+0xfdc>
    ee02:	f1b8 0f00 	cmp.w	r8, #0
    ee06:	d135      	bne.n	ee74 <_svfprintf_r+0xfe4>
    ee08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee0a:	3b01      	subs	r3, #1
    ee0c:	3e01      	subs	r6, #1
    ee0e:	930d      	str	r3, [sp, #52]	; 0x34
    ee10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ee12:	e9c0 3900 	strd	r3, r9, [r0]
    ee16:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ee18:	3301      	adds	r3, #1
    ee1a:	444a      	add	r2, r9
    ee1c:	2b07      	cmp	r3, #7
    ee1e:	9226      	str	r2, [sp, #152]	; 0x98
    ee20:	9325      	str	r3, [sp, #148]	; 0x94
    ee22:	dc6c      	bgt.n	eefe <_svfprintf_r+0x106e>
    ee24:	3008      	adds	r0, #8
    ee26:	9b03      	ldr	r3, [sp, #12]
    ee28:	f896 c000 	ldrb.w	ip, [r6]
    ee2c:	1b5b      	subs	r3, r3, r5
    ee2e:	4563      	cmp	r3, ip
    ee30:	bfa8      	it	ge
    ee32:	4663      	movge	r3, ip
    ee34:	2b00      	cmp	r3, #0
    ee36:	469a      	mov	sl, r3
    ee38:	dd0c      	ble.n	ee54 <_svfprintf_r+0xfc4>
    ee3a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ee3c:	3401      	adds	r4, #1
    ee3e:	441a      	add	r2, r3
    ee40:	2c07      	cmp	r4, #7
    ee42:	e9c0 5300 	strd	r5, r3, [r0]
    ee46:	9226      	str	r2, [sp, #152]	; 0x98
    ee48:	9425      	str	r4, [sp, #148]	; 0x94
    ee4a:	f300 8177 	bgt.w	f13c <_svfprintf_r+0x12ac>
    ee4e:	f896 c000 	ldrb.w	ip, [r6]
    ee52:	3008      	adds	r0, #8
    ee54:	f1ba 0f00 	cmp.w	sl, #0
    ee58:	bfac      	ite	ge
    ee5a:	ebac 040a 	subge.w	r4, ip, sl
    ee5e:	4664      	movlt	r4, ip
    ee60:	2c00      	cmp	r4, #0
    ee62:	dc0a      	bgt.n	ee7a <_svfprintf_r+0xfea>
    ee64:	4465      	add	r5, ip
    ee66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ee68:	2b00      	cmp	r3, #0
    ee6a:	d1ca      	bne.n	ee02 <_svfprintf_r+0xf72>
    ee6c:	f1b8 0f00 	cmp.w	r8, #0
    ee70:	f000 83ac 	beq.w	f5cc <_svfprintf_r+0x173c>
    ee74:	f108 38ff 	add.w	r8, r8, #4294967295
    ee78:	e7ca      	b.n	ee10 <_svfprintf_r+0xf80>
    ee7a:	2c10      	cmp	r4, #16
    ee7c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    ee80:	dd24      	ble.n	eecc <_svfprintf_r+0x103c>
    ee82:	9505      	str	r5, [sp, #20]
    ee84:	f04f 0a10 	mov.w	sl, #16
    ee88:	4663      	mov	r3, ip
    ee8a:	460d      	mov	r5, r1
    ee8c:	e004      	b.n	ee98 <_svfprintf_r+0x1008>
    ee8e:	3c10      	subs	r4, #16
    ee90:	2c10      	cmp	r4, #16
    ee92:	f100 0008 	add.w	r0, r0, #8
    ee96:	dd16      	ble.n	eec6 <_svfprintf_r+0x1036>
    ee98:	3301      	adds	r3, #1
    ee9a:	492c      	ldr	r1, [pc, #176]	; (ef4c <_svfprintf_r+0x10bc>)
    ee9c:	3210      	adds	r2, #16
    ee9e:	2b07      	cmp	r3, #7
    eea0:	e9c0 1a00 	strd	r1, sl, [r0]
    eea4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eea8:	ddf1      	ble.n	ee8e <_svfprintf_r+0xffe>
    eeaa:	aa24      	add	r2, sp, #144	; 0x90
    eeac:	4629      	mov	r1, r5
    eeae:	4658      	mov	r0, fp
    eeb0:	f001 fef6 	bl	10ca0 <__ssprint_r>
    eeb4:	2800      	cmp	r0, #0
    eeb6:	f47f ac50 	bne.w	e75a <_svfprintf_r+0x8ca>
    eeba:	3c10      	subs	r4, #16
    eebc:	2c10      	cmp	r4, #16
    eebe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    eec2:	a827      	add	r0, sp, #156	; 0x9c
    eec4:	dce8      	bgt.n	ee98 <_svfprintf_r+0x1008>
    eec6:	4629      	mov	r1, r5
    eec8:	9d05      	ldr	r5, [sp, #20]
    eeca:	469c      	mov	ip, r3
    eecc:	f10c 0301 	add.w	r3, ip, #1
    eed0:	4422      	add	r2, r4
    eed2:	6044      	str	r4, [r0, #4]
    eed4:	2b07      	cmp	r3, #7
    eed6:	4c1d      	ldr	r4, [pc, #116]	; (ef4c <_svfprintf_r+0x10bc>)
    eed8:	6004      	str	r4, [r0, #0]
    eeda:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    eede:	f300 83c6 	bgt.w	f66e <_svfprintf_r+0x17de>
    eee2:	f896 c000 	ldrb.w	ip, [r6]
    eee6:	3008      	adds	r0, #8
    eee8:	4465      	add	r5, ip
    eeea:	e7bc      	b.n	ee66 <_svfprintf_r+0xfd6>
    eeec:	f018 0310 	ands.w	r3, r8, #16
    eef0:	f000 80c2 	beq.w	f078 <_svfprintf_r+0x11e8>
    eef4:	9b08      	ldr	r3, [sp, #32]
    eef6:	f853 2b04 	ldr.w	r2, [r3], #4
    eefa:	9308      	str	r3, [sp, #32]
    eefc:	e6f9      	b.n	ecf2 <_svfprintf_r+0xe62>
    eefe:	aa24      	add	r2, sp, #144	; 0x90
    ef00:	4658      	mov	r0, fp
    ef02:	9105      	str	r1, [sp, #20]
    ef04:	f001 fecc 	bl	10ca0 <__ssprint_r>
    ef08:	2800      	cmp	r0, #0
    ef0a:	f47f ac26 	bne.w	e75a <_svfprintf_r+0x8ca>
    ef0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ef10:	9905      	ldr	r1, [sp, #20]
    ef12:	a827      	add	r0, sp, #156	; 0x9c
    ef14:	e787      	b.n	ee26 <_svfprintf_r+0xf96>
    ef16:	9802      	ldr	r0, [sp, #8]
    ef18:	f8cd a01c 	str.w	sl, [sp, #28]
    ef1c:	ac50      	add	r4, sp, #320	; 0x140
    ef1e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    ef22:	2500      	movs	r5, #0
    ef24:	ee0a ba10 	vmov	s20, fp
    ef28:	4b09      	ldr	r3, [pc, #36]	; (ef50 <_svfprintf_r+0x10c0>)
    ef2a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    ef2e:	f8cd 9014 	str.w	r9, [sp, #20]
    ef32:	46a3      	mov	fp, r4
    ef34:	f04f 0805 	mov.w	r8, #5
    ef38:	46ac      	mov	ip, r5
    ef3a:	4604      	mov	r4, r0
    ef3c:	e010      	b.n	ef60 <_svfprintf_r+0x10d0>
    ef3e:	bf00      	nop
    ef40:	20000c94 	.word	0x20000c94
    ef44:	20000ca8 	.word	0x20000ca8
    ef48:	20000cbc 	.word	0x20000cbc
    ef4c:	2000120c 	.word	0x2000120c
    ef50:	cccccccd 	.word	0xcccccccd
    ef54:	2a0a      	cmp	r2, #10
    ef56:	f171 0100 	sbcs.w	r1, r1, #0
    ef5a:	d336      	bcc.n	efca <_svfprintf_r+0x113a>
    ef5c:	464a      	mov	r2, r9
    ef5e:	4631      	mov	r1, r6
    ef60:	1850      	adds	r0, r2, r1
    ef62:	f140 0000 	adc.w	r0, r0, #0
    ef66:	fba3 5600 	umull	r5, r6, r3, r0
    ef6a:	f026 0503 	bic.w	r5, r6, #3
    ef6e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    ef72:	1b40      	subs	r0, r0, r5
    ef74:	1a15      	subs	r5, r2, r0
    ef76:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    ef7a:	f161 0e00 	sbc.w	lr, r1, #0
    ef7e:	fb06 f605 	mul.w	r6, r6, r5
    ef82:	fba5 9503 	umull	r9, r5, r5, r3
    ef86:	fb03 660e 	mla	r6, r3, lr, r6
    ef8a:	f009 0e01 	and.w	lr, r9, #1
    ef8e:	442e      	add	r6, r5
    ef90:	fbae 5e08 	umull	r5, lr, lr, r8
    ef94:	182d      	adds	r5, r5, r0
    ef96:	ea4f 0959 	mov.w	r9, r9, lsr #1
    ef9a:	3530      	adds	r5, #48	; 0x30
    ef9c:	f80b 5c01 	strb.w	r5, [fp, #-1]
    efa0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    efa4:	f10c 0c01 	add.w	ip, ip, #1
    efa8:	f10b 3bff 	add.w	fp, fp, #4294967295
    efac:	0876      	lsrs	r6, r6, #1
    efae:	2c00      	cmp	r4, #0
    efb0:	d0d0      	beq.n	ef54 <_svfprintf_r+0x10c4>
    efb2:	f89a 0000 	ldrb.w	r0, [sl]
    efb6:	4584      	cmp	ip, r0
    efb8:	d1cc      	bne.n	ef54 <_svfprintf_r+0x10c4>
    efba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    efbe:	d0c9      	beq.n	ef54 <_svfprintf_r+0x10c4>
    efc0:	2a0a      	cmp	r2, #10
    efc2:	f171 0100 	sbcs.w	r1, r1, #0
    efc6:	f080 818f 	bcs.w	f2e8 <_svfprintf_r+0x1458>
    efca:	465c      	mov	r4, fp
    efcc:	ab50      	add	r3, sp, #320	; 0x140
    efce:	1b1b      	subs	r3, r3, r4
    efd0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    efd4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    efd8:	ee1a ba10 	vmov	fp, s20
    efdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
    efe0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    efe4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    efe8:	9305      	str	r3, [sp, #20]
    efea:	f7ff bac2 	b.w	e572 <_svfprintf_r+0x6e2>
    efee:	ee1b 1a10 	vmov	r1, s22
    eff2:	aa24      	add	r2, sp, #144	; 0x90
    eff4:	4658      	mov	r0, fp
    eff6:	f001 fe53 	bl	10ca0 <__ssprint_r>
    effa:	2800      	cmp	r0, #0
    effc:	f47f abad 	bne.w	e75a <_svfprintf_r+0x8ca>
    f000:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f004:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f006:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f00a:	f7ff b896 	b.w	e13a <_svfprintf_r+0x2aa>
    f00e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f010:	48be      	ldr	r0, [pc, #760]	; (f30c <_svfprintf_r+0x147c>)
    f012:	f8ca 0000 	str.w	r0, [sl]
    f016:	3301      	adds	r3, #1
    f018:	3201      	adds	r2, #1
    f01a:	2001      	movs	r0, #1
    f01c:	2b07      	cmp	r3, #7
    f01e:	9226      	str	r2, [sp, #152]	; 0x98
    f020:	9325      	str	r3, [sp, #148]	; 0x94
    f022:	f8ca 0004 	str.w	r0, [sl, #4]
    f026:	f300 8177 	bgt.w	f318 <_svfprintf_r+0x1488>
    f02a:	f10a 0a08 	add.w	sl, sl, #8
    f02e:	2900      	cmp	r1, #0
    f030:	f040 80af 	bne.w	f192 <_svfprintf_r+0x1302>
    f034:	990e      	ldr	r1, [sp, #56]	; 0x38
    f036:	f008 0301 	and.w	r3, r8, #1
    f03a:	430b      	orrs	r3, r1
    f03c:	f43f a8c0 	beq.w	e1c0 <_svfprintf_r+0x330>
    f040:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f042:	9912      	ldr	r1, [sp, #72]	; 0x48
    f044:	441a      	add	r2, r3
    f046:	e9ca 1300 	strd	r1, r3, [sl]
    f04a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f04c:	9226      	str	r2, [sp, #152]	; 0x98
    f04e:	3301      	adds	r3, #1
    f050:	2b07      	cmp	r3, #7
    f052:	9325      	str	r3, [sp, #148]	; 0x94
    f054:	f300 8252 	bgt.w	f4fc <_svfprintf_r+0x166c>
    f058:	f10a 0a08 	add.w	sl, sl, #8
    f05c:	990e      	ldr	r1, [sp, #56]	; 0x38
    f05e:	f8ca 4000 	str.w	r4, [sl]
    f062:	3301      	adds	r3, #1
    f064:	440a      	add	r2, r1
    f066:	2b07      	cmp	r3, #7
    f068:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f06c:	f8ca 1004 	str.w	r1, [sl, #4]
    f070:	f77f a8a4 	ble.w	e1bc <_svfprintf_r+0x32c>
    f074:	f7ff bbbd 	b.w	e7f2 <_svfprintf_r+0x962>
    f078:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    f07c:	f000 80dd 	beq.w	f23a <_svfprintf_r+0x13aa>
    f080:	9808      	ldr	r0, [sp, #32]
    f082:	f850 2b04 	ldr.w	r2, [r0], #4
    f086:	9008      	str	r0, [sp, #32]
    f088:	4619      	mov	r1, r3
    f08a:	b292      	uxth	r2, r2
    f08c:	e631      	b.n	ecf2 <_svfprintf_r+0xe62>
    f08e:	ee1b 1a10 	vmov	r1, s22
    f092:	aa24      	add	r2, sp, #144	; 0x90
    f094:	4658      	mov	r0, fp
    f096:	f001 fe03 	bl	10ca0 <__ssprint_r>
    f09a:	2800      	cmp	r0, #0
    f09c:	f47f ab5d 	bne.w	e75a <_svfprintf_r+0x8ca>
    f0a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f0a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f0a6:	f7ff baa3 	b.w	e5f0 <_svfprintf_r+0x760>
    f0aa:	ae22      	add	r6, sp, #136	; 0x88
    f0ac:	2208      	movs	r2, #8
    f0ae:	2100      	movs	r1, #0
    f0b0:	4630      	mov	r0, r6
    f0b2:	941d      	str	r4, [sp, #116]	; 0x74
    f0b4:	f7fd fd9c 	bl	cbf0 <memset>
    f0b8:	9b03      	ldr	r3, [sp, #12]
    f0ba:	1c5a      	adds	r2, r3, #1
    f0bc:	f000 80db 	beq.w	f276 <_svfprintf_r+0x13e6>
    f0c0:	2500      	movs	r5, #0
    f0c2:	f8cd 9008 	str.w	r9, [sp, #8]
    f0c6:	f8cd 801c 	str.w	r8, [sp, #28]
    f0ca:	4699      	mov	r9, r3
    f0cc:	46a8      	mov	r8, r5
    f0ce:	e00c      	b.n	f0ea <_svfprintf_r+0x125a>
    f0d0:	a937      	add	r1, sp, #220	; 0xdc
    f0d2:	4658      	mov	r0, fp
    f0d4:	f001 fd9e 	bl	10c14 <_wcrtomb_r>
    f0d8:	1c43      	adds	r3, r0, #1
    f0da:	4440      	add	r0, r8
    f0dc:	f000 83c8 	beq.w	f870 <_svfprintf_r+0x19e0>
    f0e0:	4548      	cmp	r0, r9
    f0e2:	dc08      	bgt.n	f0f6 <_svfprintf_r+0x1266>
    f0e4:	f000 8418 	beq.w	f918 <_svfprintf_r+0x1a88>
    f0e8:	4680      	mov	r8, r0
    f0ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    f0ec:	5952      	ldr	r2, [r2, r5]
    f0ee:	4633      	mov	r3, r6
    f0f0:	3504      	adds	r5, #4
    f0f2:	2a00      	cmp	r2, #0
    f0f4:	d1ec      	bne.n	f0d0 <_svfprintf_r+0x1240>
    f0f6:	f8cd 8014 	str.w	r8, [sp, #20]
    f0fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f0fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f102:	e0c5      	b.n	f290 <_svfprintf_r+0x1400>
    f104:	3301      	adds	r3, #1
    f106:	4982      	ldr	r1, [pc, #520]	; (f310 <_svfprintf_r+0x1480>)
    f108:	f8ca 4004 	str.w	r4, [sl, #4]
    f10c:	4422      	add	r2, r4
    f10e:	2b07      	cmp	r3, #7
    f110:	f8ca 1000 	str.w	r1, [sl]
    f114:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f118:	f77f a850 	ble.w	e1bc <_svfprintf_r+0x32c>
    f11c:	f7ff bb69 	b.w	e7f2 <_svfprintf_r+0x962>
    f120:	ee1b 1a10 	vmov	r1, s22
    f124:	aa24      	add	r2, sp, #144	; 0x90
    f126:	4658      	mov	r0, fp
    f128:	f001 fdba 	bl	10ca0 <__ssprint_r>
    f12c:	2800      	cmp	r0, #0
    f12e:	f47f ab14 	bne.w	e75a <_svfprintf_r+0x8ca>
    f132:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f134:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f138:	f7ff b829 	b.w	e18e <_svfprintf_r+0x2fe>
    f13c:	aa24      	add	r2, sp, #144	; 0x90
    f13e:	4658      	mov	r0, fp
    f140:	9105      	str	r1, [sp, #20]
    f142:	f001 fdad 	bl	10ca0 <__ssprint_r>
    f146:	2800      	cmp	r0, #0
    f148:	f47f ab07 	bne.w	e75a <_svfprintf_r+0x8ca>
    f14c:	f896 c000 	ldrb.w	ip, [r6]
    f150:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f152:	9905      	ldr	r1, [sp, #20]
    f154:	a827      	add	r0, sp, #156	; 0x9c
    f156:	e67d      	b.n	ee54 <_svfprintf_r+0xfc4>
    f158:	2b01      	cmp	r3, #1
    f15a:	f8cd 8008 	str.w	r8, [sp, #8]
    f15e:	f47f a9f3 	bne.w	e548 <_svfprintf_r+0x6b8>
    f162:	f7ff bb93 	b.w	e88c <_svfprintf_r+0x9fc>
    f166:	9b08      	ldr	r3, [sp, #32]
    f168:	9904      	ldr	r1, [sp, #16]
    f16a:	f853 2b04 	ldr.w	r2, [r3], #4
    f16e:	464c      	mov	r4, r9
    f170:	6011      	str	r1, [r2, #0]
    f172:	9308      	str	r3, [sp, #32]
    f174:	f7fe bebe 	b.w	def4 <_svfprintf_r+0x64>
    f178:	3301      	adds	r3, #1
    f17a:	4965      	ldr	r1, [pc, #404]	; (f310 <_svfprintf_r+0x1480>)
    f17c:	f8ca 4004 	str.w	r4, [sl, #4]
    f180:	4422      	add	r2, r4
    f182:	2b07      	cmp	r3, #7
    f184:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f188:	f8ca 1000 	str.w	r1, [sl]
    f18c:	f77f ab22 	ble.w	e7d4 <_svfprintf_r+0x944>
    f190:	e47b      	b.n	ea8a <_svfprintf_r+0xbfa>
    f192:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f194:	9812      	ldr	r0, [sp, #72]	; 0x48
    f196:	441a      	add	r2, r3
    f198:	e9ca 0300 	strd	r0, r3, [sl]
    f19c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f19e:	9226      	str	r2, [sp, #152]	; 0x98
    f1a0:	3301      	adds	r3, #1
    f1a2:	2b07      	cmp	r3, #7
    f1a4:	9325      	str	r3, [sp, #148]	; 0x94
    f1a6:	f300 81a9 	bgt.w	f4fc <_svfprintf_r+0x166c>
    f1aa:	f10a 0a08 	add.w	sl, sl, #8
    f1ae:	2900      	cmp	r1, #0
    f1b0:	f6bf af54 	bge.w	f05c <_svfprintf_r+0x11cc>
    f1b4:	424d      	negs	r5, r1
    f1b6:	3110      	adds	r1, #16
    f1b8:	f280 830f 	bge.w	f7da <_svfprintf_r+0x194a>
    f1bc:	ee1b 1a10 	vmov	r1, s22
    f1c0:	2610      	movs	r6, #16
    f1c2:	e005      	b.n	f1d0 <_svfprintf_r+0x1340>
    f1c4:	f10a 0a08 	add.w	sl, sl, #8
    f1c8:	3d10      	subs	r5, #16
    f1ca:	2d10      	cmp	r5, #16
    f1cc:	f340 8305 	ble.w	f7da <_svfprintf_r+0x194a>
    f1d0:	3301      	adds	r3, #1
    f1d2:	484f      	ldr	r0, [pc, #316]	; (f310 <_svfprintf_r+0x1480>)
    f1d4:	3210      	adds	r2, #16
    f1d6:	2b07      	cmp	r3, #7
    f1d8:	e9ca 0600 	strd	r0, r6, [sl]
    f1dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f1e0:	ddf0      	ble.n	f1c4 <_svfprintf_r+0x1334>
    f1e2:	aa24      	add	r2, sp, #144	; 0x90
    f1e4:	4658      	mov	r0, fp
    f1e6:	9103      	str	r1, [sp, #12]
    f1e8:	f001 fd5a 	bl	10ca0 <__ssprint_r>
    f1ec:	2800      	cmp	r0, #0
    f1ee:	f47f aab4 	bne.w	e75a <_svfprintf_r+0x8ca>
    f1f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f1f6:	9903      	ldr	r1, [sp, #12]
    f1f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f1fc:	e7e4      	b.n	f1c8 <_svfprintf_r+0x1338>
    f1fe:	9b08      	ldr	r3, [sp, #32]
    f200:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    f204:	bf1a      	itte	ne
    f206:	4611      	movne	r1, r2
    f208:	f853 2b04 	ldrne.w	r2, [r3], #4
    f20c:	f853 2b04 	ldreq.w	r2, [r3], #4
    f210:	9308      	str	r3, [sp, #32]
    f212:	bf18      	it	ne
    f214:	b2d2      	uxtbne	r2, r2
    f216:	f7ff b945 	b.w	e4a4 <_svfprintf_r+0x614>
    f21a:	9b02      	ldr	r3, [sp, #8]
    f21c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    f220:	9b08      	ldr	r3, [sp, #32]
    f222:	bf1a      	itte	ne
    f224:	4611      	movne	r1, r2
    f226:	f853 2b04 	ldrne.w	r2, [r3], #4
    f22a:	f853 2b04 	ldreq.w	r2, [r3], #4
    f22e:	9308      	str	r3, [sp, #32]
    f230:	bf18      	it	ne
    f232:	b2d2      	uxtbne	r2, r2
    f234:	2301      	movs	r3, #1
    f236:	f7ff b8d0 	b.w	e3da <_svfprintf_r+0x54a>
    f23a:	9b08      	ldr	r3, [sp, #32]
    f23c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    f240:	bf1a      	itte	ne
    f242:	4611      	movne	r1, r2
    f244:	f853 2b04 	ldrne.w	r2, [r3], #4
    f248:	f853 2b04 	ldreq.w	r2, [r3], #4
    f24c:	9308      	str	r3, [sp, #32]
    f24e:	bf18      	it	ne
    f250:	b2d2      	uxtbne	r2, r2
    f252:	e54e      	b.n	ecf2 <_svfprintf_r+0xe62>
    f254:	468a      	mov	sl, r1
    f256:	3301      	adds	r3, #1
    f258:	492d      	ldr	r1, [pc, #180]	; (f310 <_svfprintf_r+0x1480>)
    f25a:	f8ca 5004 	str.w	r5, [sl, #4]
    f25e:	442a      	add	r2, r5
    f260:	2b07      	cmp	r3, #7
    f262:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f266:	f8ca 1000 	str.w	r1, [sl]
    f26a:	f300 8139 	bgt.w	f4e0 <_svfprintf_r+0x1650>
    f26e:	f10a 0a08 	add.w	sl, sl, #8
    f272:	f7ff bb8c 	b.w	e98e <_svfprintf_r+0xafe>
    f276:	2300      	movs	r3, #0
    f278:	4619      	mov	r1, r3
    f27a:	9600      	str	r6, [sp, #0]
    f27c:	aa1d      	add	r2, sp, #116	; 0x74
    f27e:	4658      	mov	r0, fp
    f280:	f001 fcee 	bl	10c60 <_wcsrtombs_r>
    f284:	4603      	mov	r3, r0
    f286:	3301      	adds	r3, #1
    f288:	9005      	str	r0, [sp, #20]
    f28a:	f000 82f1 	beq.w	f870 <_svfprintf_r+0x19e0>
    f28e:	941d      	str	r4, [sp, #116]	; 0x74
    f290:	9b05      	ldr	r3, [sp, #20]
    f292:	2b00      	cmp	r3, #0
    f294:	d04e      	beq.n	f334 <_svfprintf_r+0x14a4>
    f296:	2b63      	cmp	r3, #99	; 0x63
    f298:	f300 8118 	bgt.w	f4cc <_svfprintf_r+0x163c>
    f29c:	2300      	movs	r3, #0
    f29e:	9307      	str	r3, [sp, #28]
    f2a0:	ac37      	add	r4, sp, #220	; 0xdc
    f2a2:	2208      	movs	r2, #8
    f2a4:	2100      	movs	r1, #0
    f2a6:	4630      	mov	r0, r6
    f2a8:	f7fd fca2 	bl	cbf0 <memset>
    f2ac:	9d05      	ldr	r5, [sp, #20]
    f2ae:	9600      	str	r6, [sp, #0]
    f2b0:	462b      	mov	r3, r5
    f2b2:	aa1d      	add	r2, sp, #116	; 0x74
    f2b4:	4621      	mov	r1, r4
    f2b6:	4658      	mov	r0, fp
    f2b8:	f001 fcd2 	bl	10c60 <_wcsrtombs_r>
    f2bc:	4285      	cmp	r5, r0
    f2be:	f040 837c 	bne.w	f9ba <_svfprintf_r+0x1b2a>
    f2c2:	9a05      	ldr	r2, [sp, #20]
    f2c4:	2300      	movs	r3, #0
    f2c6:	54a3      	strb	r3, [r4, r2]
    f2c8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f2cc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f2d0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f2d4:	9303      	str	r3, [sp, #12]
    f2d6:	9202      	str	r2, [sp, #8]
    f2d8:	930f      	str	r3, [sp, #60]	; 0x3c
    f2da:	f7fe bfba 	b.w	e252 <_svfprintf_r+0x3c2>
    f2de:	212d      	movs	r1, #45	; 0x2d
    f2e0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f2e4:	f7fe bfa4 	b.w	e230 <_svfprintf_r+0x3a0>
    f2e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f2ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    f2ec:	ebab 0b03 	sub.w	fp, fp, r3
    f2f0:	461a      	mov	r2, r3
    f2f2:	4658      	mov	r0, fp
    f2f4:	f7fd fd34 	bl	cd60 <strncpy>
    f2f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
    f2fc:	4b05      	ldr	r3, [pc, #20]	; (f314 <_svfprintf_r+0x1484>)
    f2fe:	b10a      	cbz	r2, f304 <_svfprintf_r+0x1474>
    f300:	f10a 0a01 	add.w	sl, sl, #1
    f304:	f04f 0c00 	mov.w	ip, #0
    f308:	e628      	b.n	ef5c <_svfprintf_r+0x10cc>
    f30a:	bf00      	nop
    f30c:	20000cc4 	.word	0x20000cc4
    f310:	2000120c 	.word	0x2000120c
    f314:	cccccccd 	.word	0xcccccccd
    f318:	ee1b 1a10 	vmov	r1, s22
    f31c:	aa24      	add	r2, sp, #144	; 0x90
    f31e:	4658      	mov	r0, fp
    f320:	f001 fcbe 	bl	10ca0 <__ssprint_r>
    f324:	2800      	cmp	r0, #0
    f326:	f47f aa18 	bne.w	e75a <_svfprintf_r+0x8ca>
    f32a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f32c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f32e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f332:	e67c      	b.n	f02e <_svfprintf_r+0x119e>
    f334:	9b05      	ldr	r3, [sp, #20]
    f336:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f33a:	930f      	str	r3, [sp, #60]	; 0x3c
    f33c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    f340:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f344:	9307      	str	r3, [sp, #28]
    f346:	f7fe bf84 	b.w	e252 <_svfprintf_r+0x3c2>
    f34a:	990e      	ldr	r1, [sp, #56]	; 0x38
    f34c:	9805      	ldr	r0, [sp, #20]
    f34e:	1865      	adds	r5, r4, r1
    f350:	1a2d      	subs	r5, r5, r0
    f352:	1acc      	subs	r4, r1, r3
    f354:	42a5      	cmp	r5, r4
    f356:	bfa8      	it	ge
    f358:	4625      	movge	r5, r4
    f35a:	f7ff bb4d 	b.w	e9f8 <_svfprintf_r+0xb68>
    f35e:	9b08      	ldr	r3, [sp, #32]
    f360:	9904      	ldr	r1, [sp, #16]
    f362:	f853 2b04 	ldr.w	r2, [r3], #4
    f366:	9308      	str	r3, [sp, #32]
    f368:	8011      	strh	r1, [r2, #0]
    f36a:	464c      	mov	r4, r9
    f36c:	f7fe bdc2 	b.w	def4 <_svfprintf_r+0x64>
    f370:	f913 2b04 	ldrsb.w	r2, [r3], #4
    f374:	9308      	str	r3, [sp, #32]
    f376:	17d1      	asrs	r1, r2, #31
    f378:	460b      	mov	r3, r1
    f37a:	f7fe bfdb 	b.w	e334 <_svfprintf_r+0x4a4>
    f37e:	9a03      	ldr	r2, [sp, #12]
    f380:	2102      	movs	r1, #2
    f382:	ab22      	add	r3, sp, #136	; 0x88
    f384:	9301      	str	r3, [sp, #4]
    f386:	ab1d      	add	r3, sp, #116	; 0x74
    f388:	9300      	str	r3, [sp, #0]
    f38a:	4658      	mov	r0, fp
    f38c:	ab1b      	add	r3, sp, #108	; 0x6c
    f38e:	eeb0 0b4a 	vmov.f64	d0, d10
    f392:	9202      	str	r2, [sp, #8]
    f394:	f000 fdc8 	bl	ff28 <_dtoa_r>
    f398:	2d47      	cmp	r5, #71	; 0x47
    f39a:	9a02      	ldr	r2, [sp, #8]
    f39c:	4604      	mov	r4, r0
    f39e:	f000 8161 	beq.w	f664 <_svfprintf_r+0x17d4>
    f3a2:	2d46      	cmp	r5, #70	; 0x46
    f3a4:	4410      	add	r0, r2
    f3a6:	d105      	bne.n	f3b4 <_svfprintf_r+0x1524>
    f3a8:	7823      	ldrb	r3, [r4, #0]
    f3aa:	2b30      	cmp	r3, #48	; 0x30
    f3ac:	f000 826f 	beq.w	f88e <_svfprintf_r+0x19fe>
    f3b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f3b2:	4410      	add	r0, r2
    f3b4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f3bc:	f040 8146 	bne.w	f64c <_svfprintf_r+0x17bc>
    f3c0:	4603      	mov	r3, r0
    f3c2:	1b1b      	subs	r3, r3, r4
    f3c4:	930e      	str	r3, [sp, #56]	; 0x38
    f3c6:	2d47      	cmp	r5, #71	; 0x47
    f3c8:	f000 8110 	beq.w	f5ec <_svfprintf_r+0x175c>
    f3cc:	2d46      	cmp	r5, #70	; 0x46
    f3ce:	f000 81b5 	beq.w	f73c <_svfprintf_r+0x18ac>
    f3d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f3d4:	930c      	str	r3, [sp, #48]	; 0x30
    f3d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f3d8:	2d41      	cmp	r5, #65	; 0x41
    f3da:	f103 33ff 	add.w	r3, r3, #4294967295
    f3de:	931b      	str	r3, [sp, #108]	; 0x6c
    f3e0:	f000 81e5 	beq.w	f7ae <_svfprintf_r+0x191e>
    f3e4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    f3e8:	2100      	movs	r1, #0
    f3ea:	2b00      	cmp	r3, #0
    f3ec:	bfb8      	it	lt
    f3ee:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    f3f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    f3f4:	bfba      	itte	lt
    f3f6:	f1c3 0301 	rsblt	r3, r3, #1
    f3fa:	222d      	movlt	r2, #45	; 0x2d
    f3fc:	222b      	movge	r2, #43	; 0x2b
    f3fe:	2b09      	cmp	r3, #9
    f400:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    f404:	f340 81da 	ble.w	f7bc <_svfprintf_r+0x192c>
    f408:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    f40c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; f82c <_svfprintf_r+0x199c>
    f410:	462a      	mov	r2, r5
    f412:	4610      	mov	r0, r2
    f414:	fb8c 2103 	smull	r2, r1, ip, r3
    f418:	17da      	asrs	r2, r3, #31
    f41a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    f41e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    f422:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    f426:	3130      	adds	r1, #48	; 0x30
    f428:	f800 1c01 	strb.w	r1, [r0, #-1]
    f42c:	4619      	mov	r1, r3
    f42e:	2963      	cmp	r1, #99	; 0x63
    f430:	4613      	mov	r3, r2
    f432:	f100 32ff 	add.w	r2, r0, #4294967295
    f436:	dcec      	bgt.n	f412 <_svfprintf_r+0x1582>
    f438:	3330      	adds	r3, #48	; 0x30
    f43a:	b2d9      	uxtb	r1, r3
    f43c:	1e83      	subs	r3, r0, #2
    f43e:	429d      	cmp	r5, r3
    f440:	f802 1c01 	strb.w	r1, [r2, #-1]
    f444:	f240 828b 	bls.w	f95e <_svfprintf_r+0x1ace>
    f448:	4613      	mov	r3, r2
    f44a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f44e:	e001      	b.n	f454 <_svfprintf_r+0x15c4>
    f450:	f813 1b01 	ldrb.w	r1, [r3], #1
    f454:	f802 1b01 	strb.w	r1, [r2], #1
    f458:	429d      	cmp	r5, r3
    f45a:	d1f9      	bne.n	f450 <_svfprintf_r+0x15c0>
    f45c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    f460:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f464:	1a1b      	subs	r3, r3, r0
    f466:	4413      	add	r3, r2
    f468:	aa1e      	add	r2, sp, #120	; 0x78
    f46a:	1a9b      	subs	r3, r3, r2
    f46c:	9314      	str	r3, [sp, #80]	; 0x50
    f46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f470:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f472:	2b01      	cmp	r3, #1
    f474:	441a      	add	r2, r3
    f476:	9205      	str	r2, [sp, #20]
    f478:	f340 8203 	ble.w	f882 <_svfprintf_r+0x19f2>
    f47c:	9b05      	ldr	r3, [sp, #20]
    f47e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f480:	4413      	add	r3, r2
    f482:	9305      	str	r3, [sp, #20]
    f484:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    f488:	9a05      	ldr	r2, [sp, #20]
    f48a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    f48e:	2300      	movs	r3, #0
    f490:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    f494:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f498:	930f      	str	r3, [sp, #60]	; 0x3c
    f49a:	9202      	str	r2, [sp, #8]
    f49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f49e:	2b00      	cmp	r3, #0
    f4a0:	f040 80b1 	bne.w	f606 <_svfprintf_r+0x1776>
    f4a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f4a8:	9303      	str	r3, [sp, #12]
    f4aa:	f7fe bed2 	b.w	e252 <_svfprintf_r+0x3c2>
    f4ae:	4620      	mov	r0, r4
    f4b0:	f7fd ff06 	bl	d2c0 <strlen>
    f4b4:	4602      	mov	r2, r0
    f4b6:	9005      	str	r0, [sp, #20]
    f4b8:	f7fe bf20 	b.w	e2fc <_svfprintf_r+0x46c>
    f4bc:	ee1b 1a10 	vmov	r1, s22
    f4c0:	aa24      	add	r2, sp, #144	; 0x90
    f4c2:	4658      	mov	r0, fp
    f4c4:	f001 fbec 	bl	10ca0 <__ssprint_r>
    f4c8:	f7fe bded 	b.w	e0a6 <_svfprintf_r+0x216>
    f4cc:	1c59      	adds	r1, r3, #1
    f4ce:	4658      	mov	r0, fp
    f4d0:	f7fc fb96 	bl	bc00 <_malloc_r>
    f4d4:	4604      	mov	r4, r0
    f4d6:	2800      	cmp	r0, #0
    f4d8:	f000 81ca 	beq.w	f870 <_svfprintf_r+0x19e0>
    f4dc:	9007      	str	r0, [sp, #28]
    f4de:	e6e0      	b.n	f2a2 <_svfprintf_r+0x1412>
    f4e0:	ee1b 1a10 	vmov	r1, s22
    f4e4:	aa24      	add	r2, sp, #144	; 0x90
    f4e6:	4658      	mov	r0, fp
    f4e8:	f001 fbda 	bl	10ca0 <__ssprint_r>
    f4ec:	2800      	cmp	r0, #0
    f4ee:	f47f a934 	bne.w	e75a <_svfprintf_r+0x8ca>
    f4f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f4f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f4f8:	f7ff ba49 	b.w	e98e <_svfprintf_r+0xafe>
    f4fc:	ee1b 1a10 	vmov	r1, s22
    f500:	aa24      	add	r2, sp, #144	; 0x90
    f502:	4658      	mov	r0, fp
    f504:	f001 fbcc 	bl	10ca0 <__ssprint_r>
    f508:	2800      	cmp	r0, #0
    f50a:	f47f a926 	bne.w	e75a <_svfprintf_r+0x8ca>
    f50e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f512:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f514:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f518:	e649      	b.n	f1ae <_svfprintf_r+0x131e>
    f51a:	2306      	movs	r3, #6
    f51c:	9303      	str	r3, [sp, #12]
    f51e:	f7ff bb83 	b.w	ec28 <_svfprintf_r+0xd98>
    f522:	9b03      	ldr	r3, [sp, #12]
    f524:	2102      	movs	r1, #2
    f526:	1c5a      	adds	r2, r3, #1
    f528:	e72b      	b.n	f382 <_svfprintf_r+0x14f2>
    f52a:	9a03      	ldr	r2, [sp, #12]
    f52c:	2103      	movs	r1, #3
    f52e:	e728      	b.n	f382 <_svfprintf_r+0x14f2>
    f530:	a81b      	add	r0, sp, #108	; 0x6c
    f532:	eeb0 0b4a 	vmov.f64	d0, d10
    f536:	f000 fbcb 	bl	fcd0 <frexp>
    f53a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    f53e:	ee20 0b07 	vmul.f64	d0, d0, d7
    f542:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f54a:	d101      	bne.n	f550 <_svfprintf_r+0x16c0>
    f54c:	2301      	movs	r3, #1
    f54e:	931b      	str	r3, [sp, #108]	; 0x6c
    f550:	48b3      	ldr	r0, [pc, #716]	; (f820 <_svfprintf_r+0x1990>)
    f552:	9b03      	ldr	r3, [sp, #12]
    f554:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    f558:	3b01      	subs	r3, #1
    f55a:	4622      	mov	r2, r4
    f55c:	e004      	b.n	f568 <_svfprintf_r+0x16d8>
    f55e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f566:	d013      	beq.n	f590 <_svfprintf_r+0x1700>
    f568:	ee20 0b05 	vmul.f64	d0, d0, d5
    f56c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    f570:	f1b3 3fff 	cmp.w	r3, #4294967295
    f574:	ee17 1a90 	vmov	r1, s15
    f578:	5c41      	ldrb	r1, [r0, r1]
    f57a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    f57e:	4694      	mov	ip, r2
    f580:	ee30 0b46 	vsub.f64	d0, d0, d6
    f584:	f802 1b01 	strb.w	r1, [r2], #1
    f588:	4619      	mov	r1, r3
    f58a:	f103 33ff 	add.w	r3, r3, #4294967295
    f58e:	d1e6      	bne.n	f55e <_svfprintf_r+0x16ce>
    f590:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    f594:	eeb4 0bc6 	vcmpe.f64	d0, d6
    f598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f59c:	f300 8148 	bgt.w	f830 <_svfprintf_r+0x19a0>
    f5a0:	eeb4 0b46 	vcmp.f64	d0, d6
    f5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f5a8:	d104      	bne.n	f5b4 <_svfprintf_r+0x1724>
    f5aa:	ee17 3a90 	vmov	r3, s15
    f5ae:	07db      	lsls	r3, r3, #31
    f5b0:	f100 813e 	bmi.w	f830 <_svfprintf_r+0x19a0>
    f5b4:	2900      	cmp	r1, #0
    f5b6:	db06      	blt.n	f5c6 <_svfprintf_r+0x1736>
    f5b8:	1c4b      	adds	r3, r1, #1
    f5ba:	4413      	add	r3, r2
    f5bc:	2130      	movs	r1, #48	; 0x30
    f5be:	f802 1b01 	strb.w	r1, [r2], #1
    f5c2:	4293      	cmp	r3, r2
    f5c4:	d1fb      	bne.n	f5be <_svfprintf_r+0x172e>
    f5c6:	1b13      	subs	r3, r2, r4
    f5c8:	930e      	str	r3, [sp, #56]	; 0x38
    f5ca:	e6fc      	b.n	f3c6 <_svfprintf_r+0x1536>
    f5cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    f5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f5d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    f5d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    f5d8:	9613      	str	r6, [sp, #76]	; 0x4c
    f5da:	18e3      	adds	r3, r4, r3
    f5dc:	429d      	cmp	r5, r3
    f5de:	4629      	mov	r1, r5
    f5e0:	bf28      	it	cs
    f5e2:	4619      	movcs	r1, r3
    f5e4:	4682      	mov	sl, r0
    f5e6:	9105      	str	r1, [sp, #20]
    f5e8:	f7ff b9d8 	b.w	e99c <_svfprintf_r+0xb0c>
    f5ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f5ee:	930c      	str	r3, [sp, #48]	; 0x30
    f5f0:	1cda      	adds	r2, r3, #3
    f5f2:	db02      	blt.n	f5fa <_svfprintf_r+0x176a>
    f5f4:	9a03      	ldr	r2, [sp, #12]
    f5f6:	4293      	cmp	r3, r2
    f5f8:	dd0c      	ble.n	f614 <_svfprintf_r+0x1784>
    f5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5fc:	3b02      	subs	r3, #2
    f5fe:	930b      	str	r3, [sp, #44]	; 0x2c
    f600:	f023 0520 	bic.w	r5, r3, #32
    f604:	e6e7      	b.n	f3d6 <_svfprintf_r+0x1546>
    f606:	212d      	movs	r1, #45	; 0x2d
    f608:	2300      	movs	r3, #0
    f60a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    f60e:	9303      	str	r3, [sp, #12]
    f610:	f7fe be22 	b.w	e258 <_svfprintf_r+0x3c8>
    f614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f618:	4293      	cmp	r3, r2
    f61a:	f2c0 80bd 	blt.w	f798 <_svfprintf_r+0x1908>
    f61e:	07f0      	lsls	r0, r6, #31
    f620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f622:	f140 8132 	bpl.w	f88a <_svfprintf_r+0x19fa>
    f626:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f628:	4413      	add	r3, r2
    f62a:	9305      	str	r3, [sp, #20]
    f62c:	0571      	lsls	r1, r6, #21
    f62e:	d503      	bpl.n	f638 <_svfprintf_r+0x17a8>
    f630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f632:	2b00      	cmp	r3, #0
    f634:	f300 8135 	bgt.w	f8a2 <_svfprintf_r+0x1a12>
    f638:	9b05      	ldr	r3, [sp, #20]
    f63a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f63e:	9302      	str	r3, [sp, #8]
    f640:	2367      	movs	r3, #103	; 0x67
    f642:	930b      	str	r3, [sp, #44]	; 0x2c
    f644:	2300      	movs	r3, #0
    f646:	930f      	str	r3, [sp, #60]	; 0x3c
    f648:	930d      	str	r3, [sp, #52]	; 0x34
    f64a:	e727      	b.n	f49c <_svfprintf_r+0x160c>
    f64c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f64e:	4283      	cmp	r3, r0
    f650:	f4bf aeb7 	bcs.w	f3c2 <_svfprintf_r+0x1532>
    f654:	2130      	movs	r1, #48	; 0x30
    f656:	1c5a      	adds	r2, r3, #1
    f658:	9222      	str	r2, [sp, #136]	; 0x88
    f65a:	7019      	strb	r1, [r3, #0]
    f65c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f65e:	4298      	cmp	r0, r3
    f660:	d8f9      	bhi.n	f656 <_svfprintf_r+0x17c6>
    f662:	e6ae      	b.n	f3c2 <_svfprintf_r+0x1532>
    f664:	07f3      	lsls	r3, r6, #31
    f666:	f100 80a7 	bmi.w	f7b8 <_svfprintf_r+0x1928>
    f66a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f66c:	e6a9      	b.n	f3c2 <_svfprintf_r+0x1532>
    f66e:	aa24      	add	r2, sp, #144	; 0x90
    f670:	4658      	mov	r0, fp
    f672:	9105      	str	r1, [sp, #20]
    f674:	f001 fb14 	bl	10ca0 <__ssprint_r>
    f678:	2800      	cmp	r0, #0
    f67a:	f47f a86e 	bne.w	e75a <_svfprintf_r+0x8ca>
    f67e:	f896 c000 	ldrb.w	ip, [r6]
    f682:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f684:	9905      	ldr	r1, [sp, #20]
    f686:	a827      	add	r0, sp, #156	; 0x9c
    f688:	4465      	add	r5, ip
    f68a:	f7ff bbec 	b.w	ee66 <_svfprintf_r+0xfd6>
    f68e:	ee1b 1a10 	vmov	r1, s22
    f692:	aa24      	add	r2, sp, #144	; 0x90
    f694:	4658      	mov	r0, fp
    f696:	f001 fb03 	bl	10ca0 <__ssprint_r>
    f69a:	2800      	cmp	r0, #0
    f69c:	f47f a85d 	bne.w	e75a <_svfprintf_r+0x8ca>
    f6a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f6a2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f6a6:	f7ff b96b 	b.w	e980 <_svfprintf_r+0xaf0>
    f6aa:	2378      	movs	r3, #120	; 0x78
    f6ac:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f6b0:	2330      	movs	r3, #48	; 0x30
    f6b2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    f6b6:	9b03      	ldr	r3, [sp, #12]
    f6b8:	2b63      	cmp	r3, #99	; 0x63
    f6ba:	f048 0602 	orr.w	r6, r8, #2
    f6be:	f300 80a6 	bgt.w	f80e <_svfprintf_r+0x197e>
    f6c2:	2300      	movs	r3, #0
    f6c4:	9307      	str	r3, [sp, #28]
    f6c6:	ac37      	add	r4, sp, #220	; 0xdc
    f6c8:	ee18 3a90 	vmov	r3, s17
    f6cc:	2b00      	cmp	r3, #0
    f6ce:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    f6d2:	db2b      	blt.n	f72c <_svfprintf_r+0x189c>
    f6d4:	eeb0 ab48 	vmov.f64	d10, d8
    f6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6da:	f023 0520 	bic.w	r5, r3, #32
    f6de:	2300      	movs	r3, #0
    f6e0:	9309      	str	r3, [sp, #36]	; 0x24
    f6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f6e4:	2b61      	cmp	r3, #97	; 0x61
    f6e6:	f47f aaad 	bne.w	ec44 <_svfprintf_r+0xdb4>
    f6ea:	eeb0 0b4a 	vmov.f64	d0, d10
    f6ee:	a81b      	add	r0, sp, #108	; 0x6c
    f6f0:	f000 faee 	bl	fcd0 <frexp>
    f6f4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    f6f8:	ee20 0b07 	vmul.f64	d0, d0, d7
    f6fc:	eeb5 0b40 	vcmp.f64	d0, #0.0
    f700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f704:	d101      	bne.n	f70a <_svfprintf_r+0x187a>
    f706:	2301      	movs	r3, #1
    f708:	931b      	str	r3, [sp, #108]	; 0x6c
    f70a:	4846      	ldr	r0, [pc, #280]	; (f824 <_svfprintf_r+0x1994>)
    f70c:	e721      	b.n	f552 <_svfprintf_r+0x16c2>
    f70e:	ee1b 1a10 	vmov	r1, s22
    f712:	aa24      	add	r2, sp, #144	; 0x90
    f714:	4658      	mov	r0, fp
    f716:	f001 fac3 	bl	10ca0 <__ssprint_r>
    f71a:	2800      	cmp	r0, #0
    f71c:	f47f a81d 	bne.w	e75a <_svfprintf_r+0x8ca>
    f720:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f722:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f724:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f728:	f7ff b94e 	b.w	e9c8 <_svfprintf_r+0xb38>
    f72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f72e:	f023 0520 	bic.w	r5, r3, #32
    f732:	232d      	movs	r3, #45	; 0x2d
    f734:	9309      	str	r3, [sp, #36]	; 0x24
    f736:	eeb1 ab48 	vneg.f64	d10, d8
    f73a:	e7d2      	b.n	f6e2 <_svfprintf_r+0x1852>
    f73c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f73e:	920c      	str	r2, [sp, #48]	; 0x30
    f740:	2a00      	cmp	r2, #0
    f742:	f006 0301 	and.w	r3, r6, #1
    f746:	f340 810d 	ble.w	f964 <_svfprintf_r+0x1ad4>
    f74a:	9903      	ldr	r1, [sp, #12]
    f74c:	430b      	orrs	r3, r1
    f74e:	f040 80cf 	bne.w	f8f0 <_svfprintf_r+0x1a60>
    f752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f754:	9305      	str	r3, [sp, #20]
    f756:	2366      	movs	r3, #102	; 0x66
    f758:	930b      	str	r3, [sp, #44]	; 0x2c
    f75a:	0572      	lsls	r2, r6, #21
    f75c:	f100 80a3 	bmi.w	f8a6 <_svfprintf_r+0x1a16>
    f760:	9b05      	ldr	r3, [sp, #20]
    f762:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f766:	9302      	str	r3, [sp, #8]
    f768:	e76c      	b.n	f644 <_svfprintf_r+0x17b4>
    f76a:	ee1b 1a10 	vmov	r1, s22
    f76e:	aa24      	add	r2, sp, #144	; 0x90
    f770:	4658      	mov	r0, fp
    f772:	f001 fa95 	bl	10ca0 <__ssprint_r>
    f776:	2800      	cmp	r0, #0
    f778:	f47e afef 	bne.w	e75a <_svfprintf_r+0x8ca>
    f77c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    f77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f780:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f782:	1b1c      	subs	r4, r3, r4
    f784:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f788:	f7ff b936 	b.w	e9f8 <_svfprintf_r+0xb68>
    f78c:	2358      	movs	r3, #88	; 0x58
    f78e:	e78d      	b.n	f6ac <_svfprintf_r+0x181c>
    f790:	2200      	movs	r2, #0
    f792:	9203      	str	r2, [sp, #12]
    f794:	f7fe bbda 	b.w	df4c <_svfprintf_r+0xbc>
    f798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f79a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f79c:	189a      	adds	r2, r3, r2
    f79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f7a0:	9205      	str	r2, [sp, #20]
    f7a2:	2b00      	cmp	r3, #0
    f7a4:	f340 80ab 	ble.w	f8fe <_svfprintf_r+0x1a6e>
    f7a8:	2367      	movs	r3, #103	; 0x67
    f7aa:	930b      	str	r3, [sp, #44]	; 0x2c
    f7ac:	e7d5      	b.n	f75a <_svfprintf_r+0x18ca>
    f7ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f7b0:	320f      	adds	r2, #15
    f7b2:	b2d2      	uxtb	r2, r2
    f7b4:	2101      	movs	r1, #1
    f7b6:	e618      	b.n	f3ea <_svfprintf_r+0x155a>
    f7b8:	18a0      	adds	r0, r4, r2
    f7ba:	e5fb      	b.n	f3b4 <_svfprintf_r+0x1524>
    f7bc:	2900      	cmp	r1, #0
    f7be:	f040 80a8 	bne.w	f912 <_svfprintf_r+0x1a82>
    f7c2:	2230      	movs	r2, #48	; 0x30
    f7c4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    f7c8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    f7cc:	3330      	adds	r3, #48	; 0x30
    f7ce:	f802 3b01 	strb.w	r3, [r2], #1
    f7d2:	ab1e      	add	r3, sp, #120	; 0x78
    f7d4:	1ad3      	subs	r3, r2, r3
    f7d6:	9314      	str	r3, [sp, #80]	; 0x50
    f7d8:	e649      	b.n	f46e <_svfprintf_r+0x15de>
    f7da:	3301      	adds	r3, #1
    f7dc:	4912      	ldr	r1, [pc, #72]	; (f828 <_svfprintf_r+0x1998>)
    f7de:	f8ca 5004 	str.w	r5, [sl, #4]
    f7e2:	442a      	add	r2, r5
    f7e4:	2b07      	cmp	r3, #7
    f7e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    f7ea:	f8ca 1000 	str.w	r1, [sl]
    f7ee:	f77f ac33 	ble.w	f058 <_svfprintf_r+0x11c8>
    f7f2:	ee1b 1a10 	vmov	r1, s22
    f7f6:	aa24      	add	r2, sp, #144	; 0x90
    f7f8:	4658      	mov	r0, fp
    f7fa:	f001 fa51 	bl	10ca0 <__ssprint_r>
    f7fe:	2800      	cmp	r0, #0
    f800:	f47e afab 	bne.w	e75a <_svfprintf_r+0x8ca>
    f804:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    f808:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    f80c:	e426      	b.n	f05c <_svfprintf_r+0x11cc>
    f80e:	1c59      	adds	r1, r3, #1
    f810:	4658      	mov	r0, fp
    f812:	f7fc f9f5 	bl	bc00 <_malloc_r>
    f816:	4604      	mov	r4, r0
    f818:	b350      	cbz	r0, f870 <_svfprintf_r+0x19e0>
    f81a:	9007      	str	r0, [sp, #28]
    f81c:	e754      	b.n	f6c8 <_svfprintf_r+0x1838>
    f81e:	bf00      	nop
    f820:	20000ca8 	.word	0x20000ca8
    f824:	20000c94 	.word	0x20000c94
    f828:	2000120c 	.word	0x2000120c
    f82c:	66666667 	.word	0x66666667
    f830:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f834:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    f838:	f890 c00f 	ldrb.w	ip, [r0, #15]
    f83c:	4561      	cmp	r1, ip
    f83e:	4613      	mov	r3, r2
    f840:	d10a      	bne.n	f858 <_svfprintf_r+0x19c8>
    f842:	f04f 0e30 	mov.w	lr, #48	; 0x30
    f846:	f803 ec01 	strb.w	lr, [r3, #-1]
    f84a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f84c:	1e59      	subs	r1, r3, #1
    f84e:	9122      	str	r1, [sp, #136]	; 0x88
    f850:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    f854:	458c      	cmp	ip, r1
    f856:	d0f6      	beq.n	f846 <_svfprintf_r+0x19b6>
    f858:	2939      	cmp	r1, #57	; 0x39
    f85a:	bf16      	itet	ne
    f85c:	3101      	addne	r1, #1
    f85e:	7a81      	ldrbeq	r1, [r0, #10]
    f860:	b2c9      	uxtbne	r1, r1
    f862:	f803 1c01 	strb.w	r1, [r3, #-1]
    f866:	e6ae      	b.n	f5c6 <_svfprintf_r+0x1736>
    f868:	2300      	movs	r3, #0
    f86a:	4690      	mov	r8, r2
    f86c:	9307      	str	r3, [sp, #28]
    f86e:	e760      	b.n	f732 <_svfprintf_r+0x18a2>
    f870:	ee1b 2a10 	vmov	r2, s22
    f874:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f87c:	8193      	strh	r3, [r2, #12]
    f87e:	f7fe bc16 	b.w	e0ae <_svfprintf_r+0x21e>
    f882:	07f5      	lsls	r5, r6, #31
    f884:	f57f adfe 	bpl.w	f484 <_svfprintf_r+0x15f4>
    f888:	e5f8      	b.n	f47c <_svfprintf_r+0x15ec>
    f88a:	9305      	str	r3, [sp, #20]
    f88c:	e6ce      	b.n	f62c <_svfprintf_r+0x179c>
    f88e:	eeb5 ab40 	vcmp.f64	d10, #0.0
    f892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    f896:	f43f ad8b 	beq.w	f3b0 <_svfprintf_r+0x1520>
    f89a:	f1c2 0201 	rsb	r2, r2, #1
    f89e:	921b      	str	r2, [sp, #108]	; 0x6c
    f8a0:	e587      	b.n	f3b2 <_svfprintf_r+0x1522>
    f8a2:	2367      	movs	r3, #103	; 0x67
    f8a4:	930b      	str	r3, [sp, #44]	; 0x2c
    f8a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f8a8:	780b      	ldrb	r3, [r1, #0]
    f8aa:	2bff      	cmp	r3, #255	; 0xff
    f8ac:	d079      	beq.n	f9a2 <_svfprintf_r+0x1b12>
    f8ae:	2500      	movs	r5, #0
    f8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f8b2:	4628      	mov	r0, r5
    f8b4:	e003      	b.n	f8be <_svfprintf_r+0x1a2e>
    f8b6:	3001      	adds	r0, #1
    f8b8:	3101      	adds	r1, #1
    f8ba:	2bff      	cmp	r3, #255	; 0xff
    f8bc:	d008      	beq.n	f8d0 <_svfprintf_r+0x1a40>
    f8be:	4293      	cmp	r3, r2
    f8c0:	da06      	bge.n	f8d0 <_svfprintf_r+0x1a40>
    f8c2:	1ad2      	subs	r2, r2, r3
    f8c4:	784b      	ldrb	r3, [r1, #1]
    f8c6:	2b00      	cmp	r3, #0
    f8c8:	d1f5      	bne.n	f8b6 <_svfprintf_r+0x1a26>
    f8ca:	780b      	ldrb	r3, [r1, #0]
    f8cc:	3501      	adds	r5, #1
    f8ce:	e7f4      	b.n	f8ba <_svfprintf_r+0x1a2a>
    f8d0:	920c      	str	r2, [sp, #48]	; 0x30
    f8d2:	9113      	str	r1, [sp, #76]	; 0x4c
    f8d4:	900d      	str	r0, [sp, #52]	; 0x34
    f8d6:	950f      	str	r5, [sp, #60]	; 0x3c
    f8d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f8dc:	9916      	ldr	r1, [sp, #88]	; 0x58
    f8de:	4413      	add	r3, r2
    f8e0:	9a05      	ldr	r2, [sp, #20]
    f8e2:	fb01 2303 	mla	r3, r1, r3, r2
    f8e6:	9305      	str	r3, [sp, #20]
    f8e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f8ec:	9302      	str	r3, [sp, #8]
    f8ee:	e5d5      	b.n	f49c <_svfprintf_r+0x160c>
    f8f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f8f2:	18d3      	adds	r3, r2, r3
    f8f4:	4419      	add	r1, r3
    f8f6:	2366      	movs	r3, #102	; 0x66
    f8f8:	9105      	str	r1, [sp, #20]
    f8fa:	930b      	str	r3, [sp, #44]	; 0x2c
    f8fc:	e72d      	b.n	f75a <_svfprintf_r+0x18ca>
    f8fe:	f1c3 0301 	rsb	r3, r3, #1
    f902:	441a      	add	r2, r3
    f904:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f908:	9302      	str	r3, [sp, #8]
    f90a:	2367      	movs	r3, #103	; 0x67
    f90c:	9205      	str	r2, [sp, #20]
    f90e:	930b      	str	r3, [sp, #44]	; 0x2c
    f910:	e698      	b.n	f644 <_svfprintf_r+0x17b4>
    f912:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    f916:	e759      	b.n	f7cc <_svfprintf_r+0x193c>
    f918:	9b03      	ldr	r3, [sp, #12]
    f91a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    f91e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f922:	9305      	str	r3, [sp, #20]
    f924:	e4b4      	b.n	f290 <_svfprintf_r+0x1400>
    f926:	ee18 3a90 	vmov	r3, s17
    f92a:	2b00      	cmp	r3, #0
    f92c:	bfb4      	ite	lt
    f92e:	212d      	movlt	r1, #45	; 0x2d
    f930:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    f934:	4c25      	ldr	r4, [pc, #148]	; (f9cc <_svfprintf_r+0x1b3c>)
    f936:	4b26      	ldr	r3, [pc, #152]	; (f9d0 <_svfprintf_r+0x1b40>)
    f938:	bfb8      	it	lt
    f93a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    f93e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    f942:	f7fe bc79 	b.w	e238 <_svfprintf_r+0x3a8>
    f946:	9b03      	ldr	r3, [sp, #12]
    f948:	9302      	str	r3, [sp, #8]
    f94a:	9305      	str	r3, [sp, #20]
    f94c:	2373      	movs	r3, #115	; 0x73
    f94e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    f952:	9003      	str	r0, [sp, #12]
    f954:	900f      	str	r0, [sp, #60]	; 0x3c
    f956:	900d      	str	r0, [sp, #52]	; 0x34
    f958:	930b      	str	r3, [sp, #44]	; 0x2c
    f95a:	f7fe bc7a 	b.w	e252 <_svfprintf_r+0x3c2>
    f95e:	2302      	movs	r3, #2
    f960:	9314      	str	r3, [sp, #80]	; 0x50
    f962:	e584      	b.n	f46e <_svfprintf_r+0x15de>
    f964:	9a03      	ldr	r2, [sp, #12]
    f966:	4313      	orrs	r3, r2
    f968:	d105      	bne.n	f976 <_svfprintf_r+0x1ae6>
    f96a:	2301      	movs	r3, #1
    f96c:	2266      	movs	r2, #102	; 0x66
    f96e:	9302      	str	r3, [sp, #8]
    f970:	920b      	str	r2, [sp, #44]	; 0x2c
    f972:	9305      	str	r3, [sp, #20]
    f974:	e666      	b.n	f644 <_svfprintf_r+0x17b4>
    f976:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f978:	3301      	adds	r3, #1
    f97a:	441a      	add	r2, r3
    f97c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f980:	9302      	str	r3, [sp, #8]
    f982:	2366      	movs	r3, #102	; 0x66
    f984:	9205      	str	r2, [sp, #20]
    f986:	930b      	str	r3, [sp, #44]	; 0x2c
    f988:	e65c      	b.n	f644 <_svfprintf_r+0x17b4>
    f98a:	9a08      	ldr	r2, [sp, #32]
    f98c:	f899 3001 	ldrb.w	r3, [r9, #1]
    f990:	4689      	mov	r9, r1
    f992:	f852 1b04 	ldr.w	r1, [r2], #4
    f996:	9208      	str	r2, [sp, #32]
    f998:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    f99c:	9103      	str	r1, [sp, #12]
    f99e:	f7fe bad3 	b.w	df48 <_svfprintf_r+0xb8>
    f9a2:	2300      	movs	r3, #0
    f9a4:	930f      	str	r3, [sp, #60]	; 0x3c
    f9a6:	930d      	str	r3, [sp, #52]	; 0x34
    f9a8:	e796      	b.n	f8d8 <_svfprintf_r+0x1a48>
    f9aa:	230c      	movs	r3, #12
    f9ac:	f8cb 3000 	str.w	r3, [fp]
    f9b0:	f04f 33ff 	mov.w	r3, #4294967295
    f9b4:	9304      	str	r3, [sp, #16]
    f9b6:	f7fe bb81 	b.w	e0bc <_svfprintf_r+0x22c>
    f9ba:	ee1b 2a10 	vmov	r2, s22
    f9be:	8993      	ldrh	r3, [r2, #12]
    f9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f9c4:	8193      	strh	r3, [r2, #12]
    f9c6:	f7fe bec8 	b.w	e75a <_svfprintf_r+0x8ca>
    f9ca:	bf00      	nop
    f9cc:	20000c8c 	.word	0x20000c8c
    f9d0:	20000c90 	.word	0x20000c90

0000f9d4 <_fclose_r>:
    f9d4:	b570      	push	{r4, r5, r6, lr}
    f9d6:	2900      	cmp	r1, #0
    f9d8:	d04b      	beq.n	fa72 <_fclose_r+0x9e>
    f9da:	4606      	mov	r6, r0
    f9dc:	460c      	mov	r4, r1
    f9de:	b110      	cbz	r0, f9e6 <_fclose_r+0x12>
    f9e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f9e2:	2b00      	cmp	r3, #0
    f9e4:	d048      	beq.n	fa78 <_fclose_r+0xa4>
    f9e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f9e8:	07d8      	lsls	r0, r3, #31
    f9ea:	d534      	bpl.n	fa56 <_fclose_r+0x82>
    f9ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f9f0:	2b00      	cmp	r3, #0
    f9f2:	d03e      	beq.n	fa72 <_fclose_r+0x9e>
    f9f4:	4621      	mov	r1, r4
    f9f6:	4630      	mov	r0, r6
    f9f8:	f000 f850 	bl	fa9c <__sflush_r>
    f9fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f9fe:	4605      	mov	r5, r0
    fa00:	b133      	cbz	r3, fa10 <_fclose_r+0x3c>
    fa02:	69e1      	ldr	r1, [r4, #28]
    fa04:	4630      	mov	r0, r6
    fa06:	4798      	blx	r3
    fa08:	2800      	cmp	r0, #0
    fa0a:	bfb8      	it	lt
    fa0c:	f04f 35ff 	movlt.w	r5, #4294967295
    fa10:	89a3      	ldrh	r3, [r4, #12]
    fa12:	061a      	lsls	r2, r3, #24
    fa14:	d43c      	bmi.n	fa90 <_fclose_r+0xbc>
    fa16:	6b21      	ldr	r1, [r4, #48]	; 0x30
    fa18:	b141      	cbz	r1, fa2c <_fclose_r+0x58>
    fa1a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    fa1e:	4299      	cmp	r1, r3
    fa20:	d002      	beq.n	fa28 <_fclose_r+0x54>
    fa22:	4630      	mov	r0, r6
    fa24:	f7fd fd4e 	bl	d4c4 <_free_r>
    fa28:	2300      	movs	r3, #0
    fa2a:	6323      	str	r3, [r4, #48]	; 0x30
    fa2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    fa2e:	b121      	cbz	r1, fa3a <_fclose_r+0x66>
    fa30:	4630      	mov	r0, r6
    fa32:	f7fd fd47 	bl	d4c4 <_free_r>
    fa36:	2300      	movs	r3, #0
    fa38:	6463      	str	r3, [r4, #68]	; 0x44
    fa3a:	f7fc ffc7 	bl	c9cc <__sfp_lock_acquire>
    fa3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fa40:	2200      	movs	r2, #0
    fa42:	07db      	lsls	r3, r3, #31
    fa44:	81a2      	strh	r2, [r4, #12]
    fa46:	d51f      	bpl.n	fa88 <_fclose_r+0xb4>
    fa48:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fa4a:	f7fd fa53 	bl	cef4 <__retarget_lock_close_recursive>
    fa4e:	f7fc ffc3 	bl	c9d8 <__sfp_lock_release>
    fa52:	4628      	mov	r0, r5
    fa54:	bd70      	pop	{r4, r5, r6, pc}
    fa56:	89a3      	ldrh	r3, [r4, #12]
    fa58:	0599      	lsls	r1, r3, #22
    fa5a:	d4cb      	bmi.n	f9f4 <_fclose_r+0x20>
    fa5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fa5e:	f7fd fa4b 	bl	cef8 <__retarget_lock_acquire_recursive>
    fa62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    fa66:	2b00      	cmp	r3, #0
    fa68:	d1c4      	bne.n	f9f4 <_fclose_r+0x20>
    fa6a:	6e65      	ldr	r5, [r4, #100]	; 0x64
    fa6c:	f015 0501 	ands.w	r5, r5, #1
    fa70:	d005      	beq.n	fa7e <_fclose_r+0xaa>
    fa72:	2500      	movs	r5, #0
    fa74:	4628      	mov	r0, r5
    fa76:	bd70      	pop	{r4, r5, r6, pc}
    fa78:	f7fc ff8a 	bl	c990 <__sinit>
    fa7c:	e7b3      	b.n	f9e6 <_fclose_r+0x12>
    fa7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fa80:	f7fd fa3c 	bl	cefc <__retarget_lock_release_recursive>
    fa84:	4628      	mov	r0, r5
    fa86:	bd70      	pop	{r4, r5, r6, pc}
    fa88:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fa8a:	f7fd fa37 	bl	cefc <__retarget_lock_release_recursive>
    fa8e:	e7db      	b.n	fa48 <_fclose_r+0x74>
    fa90:	6921      	ldr	r1, [r4, #16]
    fa92:	4630      	mov	r0, r6
    fa94:	f7fd fd16 	bl	d4c4 <_free_r>
    fa98:	e7bd      	b.n	fa16 <_fclose_r+0x42>
    fa9a:	bf00      	nop

0000fa9c <__sflush_r>:
    fa9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    faa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    faa4:	460c      	mov	r4, r1
    faa6:	0711      	lsls	r1, r2, #28
    faa8:	4680      	mov	r8, r0
    faaa:	d447      	bmi.n	fb3c <__sflush_r+0xa0>
    faac:	6863      	ldr	r3, [r4, #4]
    faae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    fab2:	2b00      	cmp	r3, #0
    fab4:	81a2      	strh	r2, [r4, #12]
    fab6:	dd5e      	ble.n	fb76 <__sflush_r+0xda>
    fab8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    faba:	2d00      	cmp	r5, #0
    fabc:	d058      	beq.n	fb70 <__sflush_r+0xd4>
    fabe:	2300      	movs	r3, #0
    fac0:	f8d8 6000 	ldr.w	r6, [r8]
    fac4:	f8c8 3000 	str.w	r3, [r8]
    fac8:	b293      	uxth	r3, r2
    faca:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    face:	d156      	bne.n	fb7e <__sflush_r+0xe2>
    fad0:	2301      	movs	r3, #1
    fad2:	69e1      	ldr	r1, [r4, #28]
    fad4:	4640      	mov	r0, r8
    fad6:	47a8      	blx	r5
    fad8:	1c43      	adds	r3, r0, #1
    fada:	d067      	beq.n	fbac <__sflush_r+0x110>
    fadc:	89a3      	ldrh	r3, [r4, #12]
    fade:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    fae0:	075f      	lsls	r7, r3, #29
    fae2:	d505      	bpl.n	faf0 <__sflush_r+0x54>
    fae4:	6863      	ldr	r3, [r4, #4]
    fae6:	1ac0      	subs	r0, r0, r3
    fae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    faea:	b10b      	cbz	r3, faf0 <__sflush_r+0x54>
    faec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    faee:	1ac0      	subs	r0, r0, r3
    faf0:	69e1      	ldr	r1, [r4, #28]
    faf2:	4602      	mov	r2, r0
    faf4:	2300      	movs	r3, #0
    faf6:	4640      	mov	r0, r8
    faf8:	47a8      	blx	r5
    fafa:	1c41      	adds	r1, r0, #1
    fafc:	d141      	bne.n	fb82 <__sflush_r+0xe6>
    fafe:	f8d8 3000 	ldr.w	r3, [r8]
    fb02:	2b00      	cmp	r3, #0
    fb04:	d03d      	beq.n	fb82 <__sflush_r+0xe6>
    fb06:	2b1d      	cmp	r3, #29
    fb08:	d001      	beq.n	fb0e <__sflush_r+0x72>
    fb0a:	2b16      	cmp	r3, #22
    fb0c:	d156      	bne.n	fbbc <__sflush_r+0x120>
    fb0e:	89a3      	ldrh	r3, [r4, #12]
    fb10:	6922      	ldr	r2, [r4, #16]
    fb12:	6022      	str	r2, [r4, #0]
    fb14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    fb18:	2100      	movs	r1, #0
    fb1a:	6061      	str	r1, [r4, #4]
    fb1c:	81a3      	strh	r3, [r4, #12]
    fb1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    fb20:	f8c8 6000 	str.w	r6, [r8]
    fb24:	b321      	cbz	r1, fb70 <__sflush_r+0xd4>
    fb26:	f104 0340 	add.w	r3, r4, #64	; 0x40
    fb2a:	4299      	cmp	r1, r3
    fb2c:	d002      	beq.n	fb34 <__sflush_r+0x98>
    fb2e:	4640      	mov	r0, r8
    fb30:	f7fd fcc8 	bl	d4c4 <_free_r>
    fb34:	2000      	movs	r0, #0
    fb36:	6320      	str	r0, [r4, #48]	; 0x30
    fb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb3c:	6926      	ldr	r6, [r4, #16]
    fb3e:	b1be      	cbz	r6, fb70 <__sflush_r+0xd4>
    fb40:	b293      	uxth	r3, r2
    fb42:	6825      	ldr	r5, [r4, #0]
    fb44:	6026      	str	r6, [r4, #0]
    fb46:	079a      	lsls	r2, r3, #30
    fb48:	bf0c      	ite	eq
    fb4a:	6963      	ldreq	r3, [r4, #20]
    fb4c:	2300      	movne	r3, #0
    fb4e:	1bad      	subs	r5, r5, r6
    fb50:	60a3      	str	r3, [r4, #8]
    fb52:	e00b      	b.n	fb6c <__sflush_r+0xd0>
    fb54:	462b      	mov	r3, r5
    fb56:	4632      	mov	r2, r6
    fb58:	69e1      	ldr	r1, [r4, #28]
    fb5a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    fb5c:	4640      	mov	r0, r8
    fb5e:	47b8      	blx	r7
    fb60:	f1b0 0c00 	subs.w	ip, r0, #0
    fb64:	eba5 050c 	sub.w	r5, r5, ip
    fb68:	4466      	add	r6, ip
    fb6a:	dd17      	ble.n	fb9c <__sflush_r+0x100>
    fb6c:	2d00      	cmp	r5, #0
    fb6e:	dcf1      	bgt.n	fb54 <__sflush_r+0xb8>
    fb70:	2000      	movs	r0, #0
    fb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    fb78:	2b00      	cmp	r3, #0
    fb7a:	dc9d      	bgt.n	fab8 <__sflush_r+0x1c>
    fb7c:	e7f8      	b.n	fb70 <__sflush_r+0xd4>
    fb7e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    fb80:	e7ae      	b.n	fae0 <__sflush_r+0x44>
    fb82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    fb86:	6922      	ldr	r2, [r4, #16]
    fb88:	6022      	str	r2, [r4, #0]
    fb8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    fb8e:	81a3      	strh	r3, [r4, #12]
    fb90:	2200      	movs	r2, #0
    fb92:	04db      	lsls	r3, r3, #19
    fb94:	6062      	str	r2, [r4, #4]
    fb96:	d5c2      	bpl.n	fb1e <__sflush_r+0x82>
    fb98:	6520      	str	r0, [r4, #80]	; 0x50
    fb9a:	e7c0      	b.n	fb1e <__sflush_r+0x82>
    fb9c:	89a3      	ldrh	r3, [r4, #12]
    fb9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fba2:	f04f 30ff 	mov.w	r0, #4294967295
    fba6:	81a3      	strh	r3, [r4, #12]
    fba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fbac:	f8d8 3000 	ldr.w	r3, [r8]
    fbb0:	2b00      	cmp	r3, #0
    fbb2:	d093      	beq.n	fadc <__sflush_r+0x40>
    fbb4:	2b1d      	cmp	r3, #29
    fbb6:	d006      	beq.n	fbc6 <__sflush_r+0x12a>
    fbb8:	2b16      	cmp	r3, #22
    fbba:	d004      	beq.n	fbc6 <__sflush_r+0x12a>
    fbbc:	89a3      	ldrh	r3, [r4, #12]
    fbbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fbc2:	81a3      	strh	r3, [r4, #12]
    fbc4:	e7d5      	b.n	fb72 <__sflush_r+0xd6>
    fbc6:	f8c8 6000 	str.w	r6, [r8]
    fbca:	e7d1      	b.n	fb70 <__sflush_r+0xd4>

0000fbcc <_fflush_r>:
    fbcc:	b538      	push	{r3, r4, r5, lr}
    fbce:	460c      	mov	r4, r1
    fbd0:	4605      	mov	r5, r0
    fbd2:	b108      	cbz	r0, fbd8 <_fflush_r+0xc>
    fbd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    fbd6:	b303      	cbz	r3, fc1a <_fflush_r+0x4e>
    fbd8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    fbdc:	b188      	cbz	r0, fc02 <_fflush_r+0x36>
    fbde:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fbe0:	07db      	lsls	r3, r3, #31
    fbe2:	d401      	bmi.n	fbe8 <_fflush_r+0x1c>
    fbe4:	0581      	lsls	r1, r0, #22
    fbe6:	d50f      	bpl.n	fc08 <_fflush_r+0x3c>
    fbe8:	4628      	mov	r0, r5
    fbea:	4621      	mov	r1, r4
    fbec:	f7ff ff56 	bl	fa9c <__sflush_r>
    fbf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fbf2:	07da      	lsls	r2, r3, #31
    fbf4:	4605      	mov	r5, r0
    fbf6:	d402      	bmi.n	fbfe <_fflush_r+0x32>
    fbf8:	89a3      	ldrh	r3, [r4, #12]
    fbfa:	059b      	lsls	r3, r3, #22
    fbfc:	d508      	bpl.n	fc10 <_fflush_r+0x44>
    fbfe:	4628      	mov	r0, r5
    fc00:	bd38      	pop	{r3, r4, r5, pc}
    fc02:	4605      	mov	r5, r0
    fc04:	4628      	mov	r0, r5
    fc06:	bd38      	pop	{r3, r4, r5, pc}
    fc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fc0a:	f7fd f975 	bl	cef8 <__retarget_lock_acquire_recursive>
    fc0e:	e7eb      	b.n	fbe8 <_fflush_r+0x1c>
    fc10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fc12:	f7fd f973 	bl	cefc <__retarget_lock_release_recursive>
    fc16:	4628      	mov	r0, r5
    fc18:	bd38      	pop	{r3, r4, r5, pc}
    fc1a:	f7fc feb9 	bl	c990 <__sinit>
    fc1e:	e7db      	b.n	fbd8 <_fflush_r+0xc>

0000fc20 <_localeconv_r>:
    fc20:	4800      	ldr	r0, [pc, #0]	; (fc24 <_localeconv_r+0x4>)
    fc22:	4770      	bx	lr
    fc24:	20004464 	.word	0x20004464
	...

0000fc30 <memchr>:
    fc30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    fc34:	2a10      	cmp	r2, #16
    fc36:	db2b      	blt.n	fc90 <memchr+0x60>
    fc38:	f010 0f07 	tst.w	r0, #7
    fc3c:	d008      	beq.n	fc50 <memchr+0x20>
    fc3e:	f810 3b01 	ldrb.w	r3, [r0], #1
    fc42:	3a01      	subs	r2, #1
    fc44:	428b      	cmp	r3, r1
    fc46:	d02d      	beq.n	fca4 <memchr+0x74>
    fc48:	f010 0f07 	tst.w	r0, #7
    fc4c:	b342      	cbz	r2, fca0 <memchr+0x70>
    fc4e:	d1f6      	bne.n	fc3e <memchr+0xe>
    fc50:	b4f0      	push	{r4, r5, r6, r7}
    fc52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    fc56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    fc5a:	f022 0407 	bic.w	r4, r2, #7
    fc5e:	f07f 0700 	mvns.w	r7, #0
    fc62:	2300      	movs	r3, #0
    fc64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    fc68:	3c08      	subs	r4, #8
    fc6a:	ea85 0501 	eor.w	r5, r5, r1
    fc6e:	ea86 0601 	eor.w	r6, r6, r1
    fc72:	fa85 f547 	uadd8	r5, r5, r7
    fc76:	faa3 f587 	sel	r5, r3, r7
    fc7a:	fa86 f647 	uadd8	r6, r6, r7
    fc7e:	faa5 f687 	sel	r6, r5, r7
    fc82:	b98e      	cbnz	r6, fca8 <memchr+0x78>
    fc84:	d1ee      	bne.n	fc64 <memchr+0x34>
    fc86:	bcf0      	pop	{r4, r5, r6, r7}
    fc88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    fc8c:	f002 0207 	and.w	r2, r2, #7
    fc90:	b132      	cbz	r2, fca0 <memchr+0x70>
    fc92:	f810 3b01 	ldrb.w	r3, [r0], #1
    fc96:	3a01      	subs	r2, #1
    fc98:	ea83 0301 	eor.w	r3, r3, r1
    fc9c:	b113      	cbz	r3, fca4 <memchr+0x74>
    fc9e:	d1f8      	bne.n	fc92 <memchr+0x62>
    fca0:	2000      	movs	r0, #0
    fca2:	4770      	bx	lr
    fca4:	3801      	subs	r0, #1
    fca6:	4770      	bx	lr
    fca8:	2d00      	cmp	r5, #0
    fcaa:	bf06      	itte	eq
    fcac:	4635      	moveq	r5, r6
    fcae:	3803      	subeq	r0, #3
    fcb0:	3807      	subne	r0, #7
    fcb2:	f015 0f01 	tst.w	r5, #1
    fcb6:	d107      	bne.n	fcc8 <memchr+0x98>
    fcb8:	3001      	adds	r0, #1
    fcba:	f415 7f80 	tst.w	r5, #256	; 0x100
    fcbe:	bf02      	ittt	eq
    fcc0:	3001      	addeq	r0, #1
    fcc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    fcc6:	3001      	addeq	r0, #1
    fcc8:	bcf0      	pop	{r4, r5, r6, r7}
    fcca:	3801      	subs	r0, #1
    fccc:	4770      	bx	lr
    fcce:	bf00      	nop

0000fcd0 <frexp>:
    fcd0:	b430      	push	{r4, r5}
    fcd2:	b082      	sub	sp, #8
    fcd4:	ed8d 0b00 	vstr	d0, [sp]
    fcd8:	9a01      	ldr	r2, [sp, #4]
    fcda:	4c19      	ldr	r4, [pc, #100]	; (fd40 <frexp+0x70>)
    fcdc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    fce0:	2100      	movs	r1, #0
    fce2:	42a3      	cmp	r3, r4
    fce4:	6001      	str	r1, [r0, #0]
    fce6:	dc21      	bgt.n	fd2c <frexp+0x5c>
    fce8:	9c00      	ldr	r4, [sp, #0]
    fcea:	431c      	orrs	r4, r3
    fcec:	d01e      	beq.n	fd2c <frexp+0x5c>
    fcee:	4c15      	ldr	r4, [pc, #84]	; (fd44 <frexp+0x74>)
    fcf0:	4014      	ands	r4, r2
    fcf2:	b954      	cbnz	r4, fd0a <frexp+0x3a>
    fcf4:	ed9f 7b10 	vldr	d7, [pc, #64]	; fd38 <frexp+0x68>
    fcf8:	ee20 7b07 	vmul.f64	d7, d0, d7
    fcfc:	ed8d 7b00 	vstr	d7, [sp]
    fd00:	9a01      	ldr	r2, [sp, #4]
    fd02:	f06f 0135 	mvn.w	r1, #53	; 0x35
    fd06:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    fd0a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    fd0e:	e9dd 4500 	ldrd	r4, r5, [sp]
    fd12:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    fd16:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    fd1a:	151b      	asrs	r3, r3, #20
    fd1c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    fd20:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    fd24:	e9cd 4500 	strd	r4, r5, [sp]
    fd28:	440b      	add	r3, r1
    fd2a:	6003      	str	r3, [r0, #0]
    fd2c:	ed9d 0b00 	vldr	d0, [sp]
    fd30:	b002      	add	sp, #8
    fd32:	bc30      	pop	{r4, r5}
    fd34:	4770      	bx	lr
    fd36:	bf00      	nop
    fd38:	00000000 	.word	0x00000000
    fd3c:	43500000 	.word	0x43500000
    fd40:	7fefffff 	.word	0x7fefffff
    fd44:	7ff00000 	.word	0x7ff00000

0000fd48 <__assert_func>:
    fd48:	b500      	push	{lr}
    fd4a:	4c0b      	ldr	r4, [pc, #44]	; (fd78 <__assert_func+0x30>)
    fd4c:	6825      	ldr	r5, [r4, #0]
    fd4e:	4614      	mov	r4, r2
    fd50:	68ee      	ldr	r6, [r5, #12]
    fd52:	461a      	mov	r2, r3
    fd54:	b085      	sub	sp, #20
    fd56:	4603      	mov	r3, r0
    fd58:	460d      	mov	r5, r1
    fd5a:	b14c      	cbz	r4, fd70 <__assert_func+0x28>
    fd5c:	4907      	ldr	r1, [pc, #28]	; (fd7c <__assert_func+0x34>)
    fd5e:	9500      	str	r5, [sp, #0]
    fd60:	e9cd 1401 	strd	r1, r4, [sp, #4]
    fd64:	4630      	mov	r0, r6
    fd66:	4906      	ldr	r1, [pc, #24]	; (fd80 <__assert_func+0x38>)
    fd68:	f000 ff86 	bl	10c78 <fiprintf>
    fd6c:	f7fa fb50 	bl	a410 <abort>
    fd70:	4904      	ldr	r1, [pc, #16]	; (fd84 <__assert_func+0x3c>)
    fd72:	460c      	mov	r4, r1
    fd74:	e7f3      	b.n	fd5e <__assert_func+0x16>
    fd76:	bf00      	nop
    fd78:	200048fc 	.word	0x200048fc
    fd7c:	20000a64 	.word	0x20000a64
    fd80:	20000a74 	.word	0x20000a74
    fd84:	2000047c 	.word	0x2000047c

0000fd88 <_calloc_r>:
    fd88:	b538      	push	{r3, r4, r5, lr}
    fd8a:	fba1 1402 	umull	r1, r4, r1, r2
    fd8e:	bb8c      	cbnz	r4, fdf4 <_calloc_r+0x6c>
    fd90:	f7fb ff36 	bl	bc00 <_malloc_r>
    fd94:	4605      	mov	r5, r0
    fd96:	b1e0      	cbz	r0, fdd2 <_calloc_r+0x4a>
    fd98:	f850 2c04 	ldr.w	r2, [r0, #-4]
    fd9c:	f022 0203 	bic.w	r2, r2, #3
    fda0:	3a04      	subs	r2, #4
    fda2:	2a24      	cmp	r2, #36	; 0x24
    fda4:	d817      	bhi.n	fdd6 <_calloc_r+0x4e>
    fda6:	2a13      	cmp	r2, #19
    fda8:	d91a      	bls.n	fde0 <_calloc_r+0x58>
    fdaa:	2a1b      	cmp	r2, #27
    fdac:	e9c0 4400 	strd	r4, r4, [r0]
    fdb0:	d91d      	bls.n	fdee <_calloc_r+0x66>
    fdb2:	2a24      	cmp	r2, #36	; 0x24
    fdb4:	bf14      	ite	ne
    fdb6:	f100 0210 	addne.w	r2, r0, #16
    fdba:	f100 0218 	addeq.w	r2, r0, #24
    fdbe:	f04f 0300 	mov.w	r3, #0
    fdc2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    fdc6:	bf04      	itt	eq
    fdc8:	6104      	streq	r4, [r0, #16]
    fdca:	6144      	streq	r4, [r0, #20]
    fdcc:	e9c2 3300 	strd	r3, r3, [r2]
    fdd0:	6093      	str	r3, [r2, #8]
    fdd2:	4628      	mov	r0, r5
    fdd4:	bd38      	pop	{r3, r4, r5, pc}
    fdd6:	4621      	mov	r1, r4
    fdd8:	f7fc ff0a 	bl	cbf0 <memset>
    fddc:	4628      	mov	r0, r5
    fdde:	bd38      	pop	{r3, r4, r5, pc}
    fde0:	4602      	mov	r2, r0
    fde2:	2300      	movs	r3, #0
    fde4:	e9c2 3300 	strd	r3, r3, [r2]
    fde8:	6093      	str	r3, [r2, #8]
    fdea:	4628      	mov	r0, r5
    fdec:	bd38      	pop	{r3, r4, r5, pc}
    fdee:	f100 0208 	add.w	r2, r0, #8
    fdf2:	e7f6      	b.n	fde2 <_calloc_r+0x5a>
    fdf4:	f7fd f852 	bl	ce9c <__errno>
    fdf8:	230c      	movs	r3, #12
    fdfa:	2500      	movs	r5, #0
    fdfc:	6003      	str	r3, [r0, #0]
    fdfe:	e7e8      	b.n	fdd2 <_calloc_r+0x4a>

0000fe00 <quorem>:
    fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe04:	6903      	ldr	r3, [r0, #16]
    fe06:	690c      	ldr	r4, [r1, #16]
    fe08:	42a3      	cmp	r3, r4
    fe0a:	b083      	sub	sp, #12
    fe0c:	f2c0 8087 	blt.w	ff1e <quorem+0x11e>
    fe10:	3c01      	subs	r4, #1
    fe12:	f101 0514 	add.w	r5, r1, #20
    fe16:	00a3      	lsls	r3, r4, #2
    fe18:	f100 0814 	add.w	r8, r0, #20
    fe1c:	9300      	str	r3, [sp, #0]
    fe1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    fe22:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    fe26:	3301      	adds	r3, #1
    fe28:	4681      	mov	r9, r0
    fe2a:	429a      	cmp	r2, r3
    fe2c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    fe30:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    fe34:	9001      	str	r0, [sp, #4]
    fe36:	fbb2 f6f3 	udiv	r6, r2, r3
    fe3a:	d33b      	bcc.n	feb4 <quorem+0xb4>
    fe3c:	f04f 0c00 	mov.w	ip, #0
    fe40:	46ae      	mov	lr, r5
    fe42:	4640      	mov	r0, r8
    fe44:	46e2      	mov	sl, ip
    fe46:	4663      	mov	r3, ip
    fe48:	f85e bb04 	ldr.w	fp, [lr], #4
    fe4c:	6802      	ldr	r2, [r0, #0]
    fe4e:	fa1f fc8b 	uxth.w	ip, fp
    fe52:	fb06 330c 	mla	r3, r6, ip, r3
    fe56:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    fe5a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    fe5e:	fb06 cc0b 	mla	ip, r6, fp, ip
    fe62:	b29b      	uxth	r3, r3
    fe64:	ebaa 0303 	sub.w	r3, sl, r3
    fe68:	fa1f fa8c 	uxth.w	sl, ip
    fe6c:	fa13 f382 	uxtah	r3, r3, r2
    fe70:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    fe74:	eb02 4223 	add.w	r2, r2, r3, asr #16
    fe78:	b29b      	uxth	r3, r3
    fe7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    fe7e:	4577      	cmp	r7, lr
    fe80:	f840 3b04 	str.w	r3, [r0], #4
    fe84:	ea4f 4a22 	mov.w	sl, r2, asr #16
    fe88:	ea4f 431c 	mov.w	r3, ip, lsr #16
    fe8c:	d2dc      	bcs.n	fe48 <quorem+0x48>
    fe8e:	9b00      	ldr	r3, [sp, #0]
    fe90:	f858 3003 	ldr.w	r3, [r8, r3]
    fe94:	b973      	cbnz	r3, feb4 <quorem+0xb4>
    fe96:	9b01      	ldr	r3, [sp, #4]
    fe98:	3b04      	subs	r3, #4
    fe9a:	4598      	cmp	r8, r3
    fe9c:	d304      	bcc.n	fea8 <quorem+0xa8>
    fe9e:	e007      	b.n	feb0 <quorem+0xb0>
    fea0:	4598      	cmp	r8, r3
    fea2:	f104 34ff 	add.w	r4, r4, #4294967295
    fea6:	d203      	bcs.n	feb0 <quorem+0xb0>
    fea8:	f853 2904 	ldr.w	r2, [r3], #-4
    feac:	2a00      	cmp	r2, #0
    feae:	d0f7      	beq.n	fea0 <quorem+0xa0>
    feb0:	f8c9 4010 	str.w	r4, [r9, #16]
    feb4:	4648      	mov	r0, r9
    feb6:	f7fd fea7 	bl	dc08 <__mcmp>
    feba:	2800      	cmp	r0, #0
    febc:	db2b      	blt.n	ff16 <quorem+0x116>
    febe:	3601      	adds	r6, #1
    fec0:	4641      	mov	r1, r8
    fec2:	2300      	movs	r3, #0
    fec4:	f855 0b04 	ldr.w	r0, [r5], #4
    fec8:	f8d1 c000 	ldr.w	ip, [r1]
    fecc:	b282      	uxth	r2, r0
    fece:	1a9a      	subs	r2, r3, r2
    fed0:	0c03      	lsrs	r3, r0, #16
    fed2:	fa12 f28c 	uxtah	r2, r2, ip
    fed6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    feda:	eb03 4322 	add.w	r3, r3, r2, asr #16
    fede:	b292      	uxth	r2, r2
    fee0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    fee4:	42af      	cmp	r7, r5
    fee6:	f841 2b04 	str.w	r2, [r1], #4
    feea:	ea4f 4323 	mov.w	r3, r3, asr #16
    feee:	d2e9      	bcs.n	fec4 <quorem+0xc4>
    fef0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    fef4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    fef8:	b96a      	cbnz	r2, ff16 <quorem+0x116>
    fefa:	3b04      	subs	r3, #4
    fefc:	4598      	cmp	r8, r3
    fefe:	d304      	bcc.n	ff0a <quorem+0x10a>
    ff00:	e007      	b.n	ff12 <quorem+0x112>
    ff02:	4598      	cmp	r8, r3
    ff04:	f104 34ff 	add.w	r4, r4, #4294967295
    ff08:	d203      	bcs.n	ff12 <quorem+0x112>
    ff0a:	f853 2904 	ldr.w	r2, [r3], #-4
    ff0e:	2a00      	cmp	r2, #0
    ff10:	d0f7      	beq.n	ff02 <quorem+0x102>
    ff12:	f8c9 4010 	str.w	r4, [r9, #16]
    ff16:	4630      	mov	r0, r6
    ff18:	b003      	add	sp, #12
    ff1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff1e:	2000      	movs	r0, #0
    ff20:	b003      	add	sp, #12
    ff22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff26:	bf00      	nop

0000ff28 <_dtoa_r>:
    ff28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff2c:	ed2d 8b02 	vpush	{d8}
    ff30:	b08f      	sub	sp, #60	; 0x3c
    ff32:	ed8d 0b02 	vstr	d0, [sp, #8]
    ff36:	9101      	str	r1, [sp, #4]
    ff38:	6b81      	ldr	r1, [r0, #56]	; 0x38
    ff3a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    ff3c:	9305      	str	r3, [sp, #20]
    ff3e:	ec57 6b10 	vmov	r6, r7, d0
    ff42:	4604      	mov	r4, r0
    ff44:	4693      	mov	fp, r2
    ff46:	b141      	cbz	r1, ff5a <_dtoa_r+0x32>
    ff48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    ff4a:	604a      	str	r2, [r1, #4]
    ff4c:	2301      	movs	r3, #1
    ff4e:	4093      	lsls	r3, r2
    ff50:	608b      	str	r3, [r1, #8]
    ff52:	f7fd fbf9 	bl	d748 <_Bfree>
    ff56:	2300      	movs	r3, #0
    ff58:	63a3      	str	r3, [r4, #56]	; 0x38
    ff5a:	f1b7 0800 	subs.w	r8, r7, #0
    ff5e:	bfb4      	ite	lt
    ff60:	2301      	movlt	r3, #1
    ff62:	2300      	movge	r3, #0
    ff64:	602b      	str	r3, [r5, #0]
    ff66:	4bbe      	ldr	r3, [pc, #760]	; (10260 <_dtoa_r+0x338>)
    ff68:	bfbc      	itt	lt
    ff6a:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    ff6e:	f8cd 800c 	strlt.w	r8, [sp, #12]
    ff72:	ea33 0308 	bics.w	r3, r3, r8
    ff76:	f000 809f 	beq.w	100b8 <_dtoa_r+0x190>
    ff7a:	ed9d 8b02 	vldr	d8, [sp, #8]
    ff7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
    ff82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff86:	d111      	bne.n	ffac <_dtoa_r+0x84>
    ff88:	9a05      	ldr	r2, [sp, #20]
    ff8a:	2301      	movs	r3, #1
    ff8c:	6013      	str	r3, [r2, #0]
    ff8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ff90:	2b00      	cmp	r3, #0
    ff92:	f000 823f 	beq.w	10414 <_dtoa_r+0x4ec>
    ff96:	4bb3      	ldr	r3, [pc, #716]	; (10264 <_dtoa_r+0x33c>)
    ff98:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ff9a:	6013      	str	r3, [r2, #0]
    ff9c:	3b01      	subs	r3, #1
    ff9e:	9300      	str	r3, [sp, #0]
    ffa0:	9800      	ldr	r0, [sp, #0]
    ffa2:	b00f      	add	sp, #60	; 0x3c
    ffa4:	ecbd 8b02 	vpop	{d8}
    ffa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffac:	aa0c      	add	r2, sp, #48	; 0x30
    ffae:	a90d      	add	r1, sp, #52	; 0x34
    ffb0:	4620      	mov	r0, r4
    ffb2:	eeb0 0b48 	vmov.f64	d0, d8
    ffb6:	f7fd fef3 	bl	dda0 <__d2b>
    ffba:	ea5f 5318 	movs.w	r3, r8, lsr #20
    ffbe:	4605      	mov	r5, r0
    ffc0:	f040 8092 	bne.w	100e8 <_dtoa_r+0x1c0>
    ffc4:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    ffc8:	440b      	add	r3, r1
    ffca:	f203 4232 	addw	r2, r3, #1074	; 0x432
    ffce:	2a20      	cmp	r2, #32
    ffd0:	f340 82fa 	ble.w	105c8 <_dtoa_r+0x6a0>
    ffd4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    ffd8:	fa08 f802 	lsl.w	r8, r8, r2
    ffdc:	f203 4212 	addw	r2, r3, #1042	; 0x412
    ffe0:	40d6      	lsrs	r6, r2
    ffe2:	ea48 0206 	orr.w	r2, r8, r6
    ffe6:	ee07 2a10 	vmov	s14, r2
    ffea:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    ffee:	1e58      	subs	r0, r3, #1
    fff0:	ee17 6a90 	vmov	r6, s15
    fff4:	ec53 2b17 	vmov	r2, r3, d7
    fff8:	f04f 0a01 	mov.w	sl, #1
    fffc:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   10000:	ed9f 3b91 	vldr	d3, [pc, #580]	; 10248 <_dtoa_r+0x320>
   10004:	ed9f 7b92 	vldr	d7, [pc, #584]	; 10250 <_dtoa_r+0x328>
   10008:	ed9f 5b93 	vldr	d5, [pc, #588]	; 10258 <_dtoa_r+0x330>
   1000c:	ee06 0a90 	vmov	s13, r0
   10010:	ec43 2b12 	vmov	d2, r2, r3
   10014:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   10018:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   1001c:	ee32 6b46 	vsub.f64	d6, d2, d6
   10020:	eea6 7b03 	vfma.f64	d7, d6, d3
   10024:	eea4 7b05 	vfma.f64	d7, d4, d5
   10028:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1002c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   10030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10034:	ee16 7a90 	vmov	r7, s13
   10038:	d508      	bpl.n	1004c <_dtoa_r+0x124>
   1003a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   1003e:	eeb4 6b47 	vcmp.f64	d6, d7
   10042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10046:	bf18      	it	ne
   10048:	f107 37ff 	addne.w	r7, r7, #4294967295
   1004c:	2f16      	cmp	r7, #22
   1004e:	f200 8145 	bhi.w	102dc <_dtoa_r+0x3b4>
   10052:	4b85      	ldr	r3, [pc, #532]	; (10268 <_dtoa_r+0x340>)
   10054:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   10058:	ed93 7b00 	vldr	d7, [r3]
   1005c:	eeb4 8bc7 	vcmpe.f64	d8, d7
   10060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10064:	d557      	bpl.n	10116 <_dtoa_r+0x1ee>
   10066:	1a09      	subs	r1, r1, r0
   10068:	2300      	movs	r3, #0
   1006a:	f1b1 0801 	subs.w	r8, r1, #1
   1006e:	f107 37ff 	add.w	r7, r7, #4294967295
   10072:	930a      	str	r3, [sp, #40]	; 0x28
   10074:	f100 8139 	bmi.w	102ea <_dtoa_r+0x3c2>
   10078:	2300      	movs	r3, #0
   1007a:	9306      	str	r3, [sp, #24]
   1007c:	2f00      	cmp	r7, #0
   1007e:	da52      	bge.n	10126 <_dtoa_r+0x1fe>
   10080:	9b06      	ldr	r3, [sp, #24]
   10082:	9704      	str	r7, [sp, #16]
   10084:	1bdb      	subs	r3, r3, r7
   10086:	9306      	str	r3, [sp, #24]
   10088:	427b      	negs	r3, r7
   1008a:	9308      	str	r3, [sp, #32]
   1008c:	9b01      	ldr	r3, [sp, #4]
   1008e:	2b09      	cmp	r3, #9
   10090:	f04f 0700 	mov.w	r7, #0
   10094:	d84e      	bhi.n	10134 <_dtoa_r+0x20c>
   10096:	2b05      	cmp	r3, #5
   10098:	f340 829d 	ble.w	105d6 <_dtoa_r+0x6ae>
   1009c:	3b04      	subs	r3, #4
   1009e:	9301      	str	r3, [sp, #4]
   100a0:	2600      	movs	r6, #0
   100a2:	9b01      	ldr	r3, [sp, #4]
   100a4:	1e9a      	subs	r2, r3, #2
   100a6:	2a03      	cmp	r2, #3
   100a8:	f200 8125 	bhi.w	102f6 <_dtoa_r+0x3ce>
   100ac:	e8df f012 	tbh	[pc, r2, lsl #1]
   100b0:	03a703aa 	.word	0x03a703aa
   100b4:	037e039d 	.word	0x037e039d
   100b8:	9a05      	ldr	r2, [sp, #20]
   100ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
   100be:	f242 730f 	movw	r3, #9999	; 0x270f
   100c2:	ea58 0806 	orrs.w	r8, r8, r6
   100c6:	6013      	str	r3, [r2, #0]
   100c8:	d11e      	bne.n	10108 <_dtoa_r+0x1e0>
   100ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   100cc:	2b00      	cmp	r3, #0
   100ce:	f000 8591 	beq.w	10bf4 <_dtoa_r+0xccc>
   100d2:	4b66      	ldr	r3, [pc, #408]	; (1026c <_dtoa_r+0x344>)
   100d4:	9300      	str	r3, [sp, #0]
   100d6:	3308      	adds	r3, #8
   100d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   100da:	9800      	ldr	r0, [sp, #0]
   100dc:	6013      	str	r3, [r2, #0]
   100de:	b00f      	add	sp, #60	; 0x3c
   100e0:	ecbd 8b02 	vpop	{d8}
   100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100e8:	ee18 6a90 	vmov	r6, s17
   100ec:	f3c6 0613 	ubfx	r6, r6, #0, #20
   100f0:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   100f4:	ec53 2b18 	vmov	r2, r3, d8
   100f8:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   100fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   100fe:	f04f 0a00 	mov.w	sl, #0
   10102:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   10106:	e77b      	b.n	10000 <_dtoa_r+0xd8>
   10108:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1010a:	2b00      	cmp	r3, #0
   1010c:	f040 833b 	bne.w	10786 <_dtoa_r+0x85e>
   10110:	4b57      	ldr	r3, [pc, #348]	; (10270 <_dtoa_r+0x348>)
   10112:	9300      	str	r3, [sp, #0]
   10114:	e744      	b.n	ffa0 <_dtoa_r+0x78>
   10116:	1a09      	subs	r1, r1, r0
   10118:	2300      	movs	r3, #0
   1011a:	f1b1 0801 	subs.w	r8, r1, #1
   1011e:	930a      	str	r3, [sp, #40]	; 0x28
   10120:	f100 80e3 	bmi.w	102ea <_dtoa_r+0x3c2>
   10124:	9306      	str	r3, [sp, #24]
   10126:	2300      	movs	r3, #0
   10128:	9308      	str	r3, [sp, #32]
   1012a:	9b01      	ldr	r3, [sp, #4]
   1012c:	9704      	str	r7, [sp, #16]
   1012e:	2b09      	cmp	r3, #9
   10130:	44b8      	add	r8, r7
   10132:	d9b0      	bls.n	10096 <_dtoa_r+0x16e>
   10134:	2300      	movs	r3, #0
   10136:	2601      	movs	r6, #1
   10138:	9301      	str	r3, [sp, #4]
   1013a:	9607      	str	r6, [sp, #28]
   1013c:	f04f 39ff 	mov.w	r9, #4294967295
   10140:	469b      	mov	fp, r3
   10142:	2100      	movs	r1, #0
   10144:	63e1      	str	r1, [r4, #60]	; 0x3c
   10146:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   1014a:	4620      	mov	r0, r4
   1014c:	f7fd fad6 	bl	d6fc <_Balloc>
   10150:	9000      	str	r0, [sp, #0]
   10152:	2800      	cmp	r0, #0
   10154:	f000 8540 	beq.w	10bd8 <_dtoa_r+0xcb0>
   10158:	9b00      	ldr	r3, [sp, #0]
   1015a:	63a3      	str	r3, [r4, #56]	; 0x38
   1015c:	f1b9 0f0e 	cmp.w	r9, #14
   10160:	f200 80dc 	bhi.w	1031c <_dtoa_r+0x3f4>
   10164:	2e00      	cmp	r6, #0
   10166:	f000 80d9 	beq.w	1031c <_dtoa_r+0x3f4>
   1016a:	9b04      	ldr	r3, [sp, #16]
   1016c:	2b00      	cmp	r3, #0
   1016e:	f340 83de 	ble.w	1092e <_dtoa_r+0xa06>
   10172:	4a3d      	ldr	r2, [pc, #244]	; (10268 <_dtoa_r+0x340>)
   10174:	f003 010f 	and.w	r1, r3, #15
   10178:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1017c:	ed92 7b00 	vldr	d7, [r2]
   10180:	111a      	asrs	r2, r3, #4
   10182:	05db      	lsls	r3, r3, #23
   10184:	f140 8382 	bpl.w	1088c <_dtoa_r+0x964>
   10188:	493a      	ldr	r1, [pc, #232]	; (10274 <_dtoa_r+0x34c>)
   1018a:	ed91 6b08 	vldr	d6, [r1, #32]
   1018e:	f002 020f 	and.w	r2, r2, #15
   10192:	2003      	movs	r0, #3
   10194:	ee88 5b06 	vdiv.f64	d5, d8, d6
   10198:	b15a      	cbz	r2, 101b2 <_dtoa_r+0x28a>
   1019a:	4936      	ldr	r1, [pc, #216]	; (10274 <_dtoa_r+0x34c>)
   1019c:	07d6      	lsls	r6, r2, #31
   1019e:	d504      	bpl.n	101aa <_dtoa_r+0x282>
   101a0:	ed91 6b00 	vldr	d6, [r1]
   101a4:	3001      	adds	r0, #1
   101a6:	ee27 7b06 	vmul.f64	d7, d7, d6
   101aa:	1052      	asrs	r2, r2, #1
   101ac:	f101 0108 	add.w	r1, r1, #8
   101b0:	d1f4      	bne.n	1019c <_dtoa_r+0x274>
   101b2:	ee85 6b07 	vdiv.f64	d6, d5, d7
   101b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   101b8:	b13b      	cbz	r3, 101ca <_dtoa_r+0x2a2>
   101ba:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   101be:	eeb4 6bc7 	vcmpe.f64	d6, d7
   101c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   101c6:	f100 84ae 	bmi.w	10b26 <_dtoa_r+0xbfe>
   101ca:	ee07 0a90 	vmov	s15, r0
   101ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   101d2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   101d6:	eea5 7b06 	vfma.f64	d7, d5, d6
   101da:	ee17 2a90 	vmov	r2, s15
   101de:	ec51 0b17 	vmov	r0, r1, d7
   101e2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   101e6:	f1b9 0f00 	cmp.w	r9, #0
   101ea:	f000 8388 	beq.w	108fe <_dtoa_r+0x9d6>
   101ee:	9e04      	ldr	r6, [sp, #16]
   101f0:	464a      	mov	r2, r9
   101f2:	9b07      	ldr	r3, [sp, #28]
   101f4:	2b00      	cmp	r3, #0
   101f6:	f000 8447 	beq.w	10a88 <_dtoa_r+0xb60>
   101fa:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   101fe:	4b1a      	ldr	r3, [pc, #104]	; (10268 <_dtoa_r+0x340>)
   10200:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   10204:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   10208:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   1020c:	ee36 7b47 	vsub.f64	d7, d6, d7
   10210:	ed1c 6b02 	vldr	d6, [ip, #-8]
   10214:	ee83 5b06 	vdiv.f64	d5, d3, d6
   10218:	ec41 0b16 	vmov	d6, r0, r1
   1021c:	ee14 0a90 	vmov	r0, s9
   10220:	ee35 5b46 	vsub.f64	d5, d5, d6
   10224:	9900      	ldr	r1, [sp, #0]
   10226:	eeb4 5bc7 	vcmpe.f64	d5, d7
   1022a:	3030      	adds	r0, #48	; 0x30
   1022c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10230:	f801 0b01 	strb.w	r0, [r1], #1
   10234:	f300 84ac 	bgt.w	10b90 <_dtoa_r+0xc68>
   10238:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   1023c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   10240:	f04f 0c00 	mov.w	ip, #0
   10244:	e031      	b.n	102aa <_dtoa_r+0x382>
   10246:	bf00      	nop
   10248:	636f4361 	.word	0x636f4361
   1024c:	3fd287a7 	.word	0x3fd287a7
   10250:	8b60c8b3 	.word	0x8b60c8b3
   10254:	3fc68a28 	.word	0x3fc68a28
   10258:	509f79fb 	.word	0x509f79fb
   1025c:	3fd34413 	.word	0x3fd34413
   10260:	7ff00000 	.word	0x7ff00000
   10264:	20000cc5 	.word	0x20000cc5
   10268:	200002a8 	.word	0x200002a8
   1026c:	20000c18 	.word	0x20000c18
   10270:	20000c24 	.word	0x20000c24
   10274:	20000280 	.word	0x20000280
   10278:	f10c 0c01 	add.w	ip, ip, #1
   1027c:	4594      	cmp	ip, r2
   1027e:	da4d      	bge.n	1031c <_dtoa_r+0x3f4>
   10280:	ee27 7b04 	vmul.f64	d7, d7, d4
   10284:	ee25 5b04 	vmul.f64	d5, d5, d4
   10288:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   1028c:	ee16 3a90 	vmov	r3, s13
   10290:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   10294:	3330      	adds	r3, #48	; 0x30
   10296:	ee37 7b43 	vsub.f64	d7, d7, d3
   1029a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1029e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   102a2:	f801 3b01 	strb.w	r3, [r1], #1
   102a6:	f100 8473 	bmi.w	10b90 <_dtoa_r+0xc68>
   102aa:	ee32 6b47 	vsub.f64	d6, d2, d7
   102ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
   102b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   102b6:	d5df      	bpl.n	10278 <_dtoa_r+0x350>
   102b8:	9a00      	ldr	r2, [sp, #0]
   102ba:	9604      	str	r6, [sp, #16]
   102bc:	e002      	b.n	102c4 <_dtoa_r+0x39c>
   102be:	428a      	cmp	r2, r1
   102c0:	f000 8450 	beq.w	10b64 <_dtoa_r+0xc3c>
   102c4:	4689      	mov	r9, r1
   102c6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   102ca:	2b39      	cmp	r3, #57	; 0x39
   102cc:	d0f7      	beq.n	102be <_dtoa_r+0x396>
   102ce:	3301      	adds	r3, #1
   102d0:	b2db      	uxtb	r3, r3
   102d2:	700b      	strb	r3, [r1, #0]
   102d4:	9b04      	ldr	r3, [sp, #16]
   102d6:	3301      	adds	r3, #1
   102d8:	9304      	str	r3, [sp, #16]
   102da:	e155      	b.n	10588 <_dtoa_r+0x660>
   102dc:	1a09      	subs	r1, r1, r0
   102de:	2301      	movs	r3, #1
   102e0:	f1b1 0801 	subs.w	r8, r1, #1
   102e4:	930a      	str	r3, [sp, #40]	; 0x28
   102e6:	f57f aec7 	bpl.w	10078 <_dtoa_r+0x150>
   102ea:	f1c1 0301 	rsb	r3, r1, #1
   102ee:	9306      	str	r3, [sp, #24]
   102f0:	f04f 0800 	mov.w	r8, #0
   102f4:	e6c2      	b.n	1007c <_dtoa_r+0x154>
   102f6:	2600      	movs	r6, #0
   102f8:	63e6      	str	r6, [r4, #60]	; 0x3c
   102fa:	4631      	mov	r1, r6
   102fc:	4620      	mov	r0, r4
   102fe:	f7fd f9fd 	bl	d6fc <_Balloc>
   10302:	9000      	str	r0, [sp, #0]
   10304:	2800      	cmp	r0, #0
   10306:	f000 8467 	beq.w	10bd8 <_dtoa_r+0xcb0>
   1030a:	9b00      	ldr	r3, [sp, #0]
   1030c:	63a3      	str	r3, [r4, #56]	; 0x38
   1030e:	f04f 33ff 	mov.w	r3, #4294967295
   10312:	930b      	str	r3, [sp, #44]	; 0x2c
   10314:	4699      	mov	r9, r3
   10316:	2301      	movs	r3, #1
   10318:	46b3      	mov	fp, r6
   1031a:	9307      	str	r3, [sp, #28]
   1031c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1031e:	2a00      	cmp	r2, #0
   10320:	db55      	blt.n	103ce <_dtoa_r+0x4a6>
   10322:	9904      	ldr	r1, [sp, #16]
   10324:	290e      	cmp	r1, #14
   10326:	dc52      	bgt.n	103ce <_dtoa_r+0x4a6>
   10328:	4bb7      	ldr	r3, [pc, #732]	; (10608 <_dtoa_r+0x6e0>)
   1032a:	f1bb 0f00 	cmp.w	fp, #0
   1032e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   10332:	ed93 6b00 	vldr	d6, [r3]
   10336:	da15      	bge.n	10364 <_dtoa_r+0x43c>
   10338:	f1b9 0f00 	cmp.w	r9, #0
   1033c:	dc12      	bgt.n	10364 <_dtoa_r+0x43c>
   1033e:	f040 82f2 	bne.w	10926 <_dtoa_r+0x9fe>
   10342:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   10346:	ee26 7b07 	vmul.f64	d7, d6, d7
   1034a:	eeb4 8bc7 	vcmpe.f64	d8, d7
   1034e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10352:	46ca      	mov	sl, r9
   10354:	464e      	mov	r6, r9
   10356:	f200 826d 	bhi.w	10834 <_dtoa_r+0x90c>
   1035a:	f8dd 8000 	ldr.w	r8, [sp]
   1035e:	ea6f 0b0b 	mvn.w	fp, fp
   10362:	e270      	b.n	10846 <_dtoa_r+0x91e>
   10364:	ee88 7b06 	vdiv.f64	d7, d8, d6
   10368:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1036c:	9900      	ldr	r1, [sp, #0]
   1036e:	ee17 3a10 	vmov	r3, s14
   10372:	f1b9 0f01 	cmp.w	r9, #1
   10376:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1037a:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   1037e:	f801 3b01 	strb.w	r3, [r1], #1
   10382:	eea5 8b46 	vfms.f64	d8, d5, d6
   10386:	f000 8334 	beq.w	109f2 <_dtoa_r+0xaca>
   1038a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   1038e:	2301      	movs	r3, #1
   10390:	e011      	b.n	103b6 <_dtoa_r+0x48e>
   10392:	ee88 7b06 	vdiv.f64	d7, d8, d6
   10396:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   1039a:	3301      	adds	r3, #1
   1039c:	ee17 2a10 	vmov	r2, s14
   103a0:	454b      	cmp	r3, r9
   103a2:	f102 0230 	add.w	r2, r2, #48	; 0x30
   103a6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   103aa:	f801 2b01 	strb.w	r2, [r1], #1
   103ae:	eea5 8b46 	vfms.f64	d8, d5, d6
   103b2:	f000 831e 	beq.w	109f2 <_dtoa_r+0xaca>
   103b6:	ee28 8b04 	vmul.f64	d8, d8, d4
   103ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
   103be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   103c2:	d1e6      	bne.n	10392 <_dtoa_r+0x46a>
   103c4:	9b04      	ldr	r3, [sp, #16]
   103c6:	3301      	adds	r3, #1
   103c8:	9304      	str	r3, [sp, #16]
   103ca:	4689      	mov	r9, r1
   103cc:	e0dc      	b.n	10588 <_dtoa_r+0x660>
   103ce:	9b07      	ldr	r3, [sp, #28]
   103d0:	b343      	cbz	r3, 10424 <_dtoa_r+0x4fc>
   103d2:	9b01      	ldr	r3, [sp, #4]
   103d4:	2b01      	cmp	r3, #1
   103d6:	f340 8276 	ble.w	108c6 <_dtoa_r+0x99e>
   103da:	9b08      	ldr	r3, [sp, #32]
   103dc:	f109 3aff 	add.w	sl, r9, #4294967295
   103e0:	4553      	cmp	r3, sl
   103e2:	f280 823f 	bge.w	10864 <_dtoa_r+0x93c>
   103e6:	9b08      	ldr	r3, [sp, #32]
   103e8:	f8cd a020 	str.w	sl, [sp, #32]
   103ec:	ebaa 0203 	sub.w	r2, sl, r3
   103f0:	4417      	add	r7, r2
   103f2:	f04f 0a00 	mov.w	sl, #0
   103f6:	f1b9 0f00 	cmp.w	r9, #0
   103fa:	f2c0 8325 	blt.w	10a48 <_dtoa_r+0xb20>
   103fe:	9b06      	ldr	r3, [sp, #24]
   10400:	9309      	str	r3, [sp, #36]	; 0x24
   10402:	444b      	add	r3, r9
   10404:	44c8      	add	r8, r9
   10406:	9306      	str	r3, [sp, #24]
   10408:	2101      	movs	r1, #1
   1040a:	4620      	mov	r0, r4
   1040c:	f7fd fa48 	bl	d8a0 <__i2b>
   10410:	4606      	mov	r6, r0
   10412:	e00c      	b.n	1042e <_dtoa_r+0x506>
   10414:	4b7d      	ldr	r3, [pc, #500]	; (1060c <_dtoa_r+0x6e4>)
   10416:	9300      	str	r3, [sp, #0]
   10418:	9800      	ldr	r0, [sp, #0]
   1041a:	b00f      	add	sp, #60	; 0x3c
   1041c:	ecbd 8b02 	vpop	{d8}
   10420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10424:	9b06      	ldr	r3, [sp, #24]
   10426:	f8dd a020 	ldr.w	sl, [sp, #32]
   1042a:	9e07      	ldr	r6, [sp, #28]
   1042c:	9309      	str	r3, [sp, #36]	; 0x24
   1042e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10430:	b16b      	cbz	r3, 1044e <_dtoa_r+0x526>
   10432:	f1b8 0f00 	cmp.w	r8, #0
   10436:	dd0a      	ble.n	1044e <_dtoa_r+0x526>
   10438:	4543      	cmp	r3, r8
   1043a:	9906      	ldr	r1, [sp, #24]
   1043c:	461a      	mov	r2, r3
   1043e:	bfa8      	it	ge
   10440:	4642      	movge	r2, r8
   10442:	1a89      	subs	r1, r1, r2
   10444:	1a9b      	subs	r3, r3, r2
   10446:	9106      	str	r1, [sp, #24]
   10448:	9309      	str	r3, [sp, #36]	; 0x24
   1044a:	eba8 0802 	sub.w	r8, r8, r2
   1044e:	9b08      	ldr	r3, [sp, #32]
   10450:	b163      	cbz	r3, 1046c <_dtoa_r+0x544>
   10452:	9b07      	ldr	r3, [sp, #28]
   10454:	2b00      	cmp	r3, #0
   10456:	f000 82a7 	beq.w	109a8 <_dtoa_r+0xa80>
   1045a:	f1ba 0f00 	cmp.w	sl, #0
   1045e:	f300 8204 	bgt.w	1086a <_dtoa_r+0x942>
   10462:	9b08      	ldr	r3, [sp, #32]
   10464:	ebb3 020a 	subs.w	r2, r3, sl
   10468:	f040 82ff 	bne.w	10a6a <_dtoa_r+0xb42>
   1046c:	2101      	movs	r1, #1
   1046e:	4620      	mov	r0, r4
   10470:	f7fd fa16 	bl	d8a0 <__i2b>
   10474:	2f00      	cmp	r7, #0
   10476:	4682      	mov	sl, r0
   10478:	f300 80af 	bgt.w	105da <_dtoa_r+0x6b2>
   1047c:	9b01      	ldr	r3, [sp, #4]
   1047e:	2b01      	cmp	r3, #1
   10480:	f340 8187 	ble.w	10792 <_dtoa_r+0x86a>
   10484:	2300      	movs	r3, #0
   10486:	9308      	str	r3, [sp, #32]
   10488:	2001      	movs	r0, #1
   1048a:	2f00      	cmp	r7, #0
   1048c:	f040 80b1 	bne.w	105f2 <_dtoa_r+0x6ca>
   10490:	4440      	add	r0, r8
   10492:	f010 001f 	ands.w	r0, r0, #31
   10496:	f000 817a 	beq.w	1078e <_dtoa_r+0x866>
   1049a:	f1c0 0220 	rsb	r2, r0, #32
   1049e:	2a04      	cmp	r2, #4
   104a0:	f300 8088 	bgt.w	105b4 <_dtoa_r+0x68c>
   104a4:	f040 81f6 	bne.w	10894 <_dtoa_r+0x96c>
   104a8:	9b06      	ldr	r3, [sp, #24]
   104aa:	2b00      	cmp	r3, #0
   104ac:	dd05      	ble.n	104ba <_dtoa_r+0x592>
   104ae:	4629      	mov	r1, r5
   104b0:	461a      	mov	r2, r3
   104b2:	4620      	mov	r0, r4
   104b4:	f7fd fb30 	bl	db18 <__lshift>
   104b8:	4605      	mov	r5, r0
   104ba:	f1b8 0f00 	cmp.w	r8, #0
   104be:	dd05      	ble.n	104cc <_dtoa_r+0x5a4>
   104c0:	4651      	mov	r1, sl
   104c2:	4642      	mov	r2, r8
   104c4:	4620      	mov	r0, r4
   104c6:	f7fd fb27 	bl	db18 <__lshift>
   104ca:	4682      	mov	sl, r0
   104cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   104ce:	2b00      	cmp	r3, #0
   104d0:	f040 813f 	bne.w	10752 <_dtoa_r+0x82a>
   104d4:	f1b9 0f00 	cmp.w	r9, #0
   104d8:	f340 8125 	ble.w	10726 <_dtoa_r+0x7fe>
   104dc:	9b07      	ldr	r3, [sp, #28]
   104de:	2b00      	cmp	r3, #0
   104e0:	f040 80a3 	bne.w	1062a <_dtoa_r+0x702>
   104e4:	9b04      	ldr	r3, [sp, #16]
   104e6:	3301      	adds	r3, #1
   104e8:	9304      	str	r3, [sp, #16]
   104ea:	f8dd 8000 	ldr.w	r8, [sp]
   104ee:	2701      	movs	r7, #1
   104f0:	e007      	b.n	10502 <_dtoa_r+0x5da>
   104f2:	4629      	mov	r1, r5
   104f4:	2300      	movs	r3, #0
   104f6:	220a      	movs	r2, #10
   104f8:	4620      	mov	r0, r4
   104fa:	f7fd f92f 	bl	d75c <__multadd>
   104fe:	3701      	adds	r7, #1
   10500:	4605      	mov	r5, r0
   10502:	4651      	mov	r1, sl
   10504:	4628      	mov	r0, r5
   10506:	f7ff fc7b 	bl	fe00 <quorem>
   1050a:	45b9      	cmp	r9, r7
   1050c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   10510:	f808 0b01 	strb.w	r0, [r8], #1
   10514:	dced      	bgt.n	104f2 <_dtoa_r+0x5ca>
   10516:	f1b9 0f00 	cmp.w	r9, #0
   1051a:	9a00      	ldr	r2, [sp, #0]
   1051c:	bfcc      	ite	gt
   1051e:	46cb      	movgt	fp, r9
   10520:	f04f 0b01 	movle.w	fp, #1
   10524:	4603      	mov	r3, r0
   10526:	4493      	add	fp, r2
   10528:	2700      	movs	r7, #0
   1052a:	4629      	mov	r1, r5
   1052c:	2201      	movs	r2, #1
   1052e:	4620      	mov	r0, r4
   10530:	9301      	str	r3, [sp, #4]
   10532:	f7fd faf1 	bl	db18 <__lshift>
   10536:	4651      	mov	r1, sl
   10538:	4605      	mov	r5, r0
   1053a:	f7fd fb65 	bl	dc08 <__mcmp>
   1053e:	2800      	cmp	r0, #0
   10540:	f340 81af 	ble.w	108a2 <_dtoa_r+0x97a>
   10544:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   10548:	9a00      	ldr	r2, [sp, #0]
   1054a:	f10b 3bff 	add.w	fp, fp, #4294967295
   1054e:	e004      	b.n	1055a <_dtoa_r+0x632>
   10550:	455a      	cmp	r2, fp
   10552:	f000 81b1 	beq.w	108b8 <_dtoa_r+0x990>
   10556:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1055a:	2b39      	cmp	r3, #57	; 0x39
   1055c:	f10b 0901 	add.w	r9, fp, #1
   10560:	d0f6      	beq.n	10550 <_dtoa_r+0x628>
   10562:	3301      	adds	r3, #1
   10564:	f88b 3000 	strb.w	r3, [fp]
   10568:	4651      	mov	r1, sl
   1056a:	4620      	mov	r0, r4
   1056c:	f7fd f8ec 	bl	d748 <_Bfree>
   10570:	b156      	cbz	r6, 10588 <_dtoa_r+0x660>
   10572:	b12f      	cbz	r7, 10580 <_dtoa_r+0x658>
   10574:	42b7      	cmp	r7, r6
   10576:	d003      	beq.n	10580 <_dtoa_r+0x658>
   10578:	4639      	mov	r1, r7
   1057a:	4620      	mov	r0, r4
   1057c:	f7fd f8e4 	bl	d748 <_Bfree>
   10580:	4631      	mov	r1, r6
   10582:	4620      	mov	r0, r4
   10584:	f7fd f8e0 	bl	d748 <_Bfree>
   10588:	4629      	mov	r1, r5
   1058a:	4620      	mov	r0, r4
   1058c:	f7fd f8dc 	bl	d748 <_Bfree>
   10590:	2300      	movs	r3, #0
   10592:	f889 3000 	strb.w	r3, [r9]
   10596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1059a:	601a      	str	r2, [r3, #0]
   1059c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1059e:	2b00      	cmp	r3, #0
   105a0:	f43f acfe 	beq.w	ffa0 <_dtoa_r+0x78>
   105a4:	9800      	ldr	r0, [sp, #0]
   105a6:	f8c3 9000 	str.w	r9, [r3]
   105aa:	b00f      	add	sp, #60	; 0x3c
   105ac:	ecbd 8b02 	vpop	{d8}
   105b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105b4:	f1c0 001c 	rsb	r0, r0, #28
   105b8:	9b06      	ldr	r3, [sp, #24]
   105ba:	4403      	add	r3, r0
   105bc:	9306      	str	r3, [sp, #24]
   105be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   105c0:	4403      	add	r3, r0
   105c2:	9309      	str	r3, [sp, #36]	; 0x24
   105c4:	4480      	add	r8, r0
   105c6:	e76f      	b.n	104a8 <_dtoa_r+0x580>
   105c8:	f1c2 0220 	rsb	r2, r2, #32
   105cc:	fa06 f202 	lsl.w	r2, r6, r2
   105d0:	ee07 2a10 	vmov	s14, r2
   105d4:	e509      	b.n	ffea <_dtoa_r+0xc2>
   105d6:	2601      	movs	r6, #1
   105d8:	e563      	b.n	100a2 <_dtoa_r+0x17a>
   105da:	4601      	mov	r1, r0
   105dc:	463a      	mov	r2, r7
   105de:	4620      	mov	r0, r4
   105e0:	f7fd fa3a 	bl	da58 <__pow5mult>
   105e4:	9b01      	ldr	r3, [sp, #4]
   105e6:	2b01      	cmp	r3, #1
   105e8:	4682      	mov	sl, r0
   105ea:	f340 81c5 	ble.w	10978 <_dtoa_r+0xa50>
   105ee:	2300      	movs	r3, #0
   105f0:	9308      	str	r3, [sp, #32]
   105f2:	f8da 2010 	ldr.w	r2, [sl, #16]
   105f6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   105fa:	6910      	ldr	r0, [r2, #16]
   105fc:	f7fd f900 	bl	d800 <__hi0bits>
   10600:	f1c0 0020 	rsb	r0, r0, #32
   10604:	e744      	b.n	10490 <_dtoa_r+0x568>
   10606:	bf00      	nop
   10608:	200002a8 	.word	0x200002a8
   1060c:	20000cc4 	.word	0x20000cc4
   10610:	4631      	mov	r1, r6
   10612:	2300      	movs	r3, #0
   10614:	220a      	movs	r2, #10
   10616:	4620      	mov	r0, r4
   10618:	f7fd f8a0 	bl	d75c <__multadd>
   1061c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1061e:	2b00      	cmp	r3, #0
   10620:	4606      	mov	r6, r0
   10622:	f340 82ce 	ble.w	10bc2 <_dtoa_r+0xc9a>
   10626:	9704      	str	r7, [sp, #16]
   10628:	4699      	mov	r9, r3
   1062a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1062c:	2b00      	cmp	r3, #0
   1062e:	dd05      	ble.n	1063c <_dtoa_r+0x714>
   10630:	4631      	mov	r1, r6
   10632:	461a      	mov	r2, r3
   10634:	4620      	mov	r0, r4
   10636:	f7fd fa6f 	bl	db18 <__lshift>
   1063a:	4606      	mov	r6, r0
   1063c:	9b08      	ldr	r3, [sp, #32]
   1063e:	2b00      	cmp	r3, #0
   10640:	f040 81eb 	bne.w	10a1a <_dtoa_r+0xaf2>
   10644:	46b0      	mov	r8, r6
   10646:	9b02      	ldr	r3, [sp, #8]
   10648:	9f00      	ldr	r7, [sp, #0]
   1064a:	f003 0201 	and.w	r2, r3, #1
   1064e:	1e7b      	subs	r3, r7, #1
   10650:	444b      	add	r3, r9
   10652:	9308      	str	r3, [sp, #32]
   10654:	9b01      	ldr	r3, [sp, #4]
   10656:	920a      	str	r2, [sp, #40]	; 0x28
   10658:	4313      	orrs	r3, r2
   1065a:	9309      	str	r3, [sp, #36]	; 0x24
   1065c:	4651      	mov	r1, sl
   1065e:	4628      	mov	r0, r5
   10660:	f7ff fbce 	bl	fe00 <quorem>
   10664:	4631      	mov	r1, r6
   10666:	4683      	mov	fp, r0
   10668:	4628      	mov	r0, r5
   1066a:	f7fd facd 	bl	dc08 <__mcmp>
   1066e:	4642      	mov	r2, r8
   10670:	4651      	mov	r1, sl
   10672:	4681      	mov	r9, r0
   10674:	4620      	mov	r0, r4
   10676:	f7fd fae9 	bl	dc4c <__mdiff>
   1067a:	68c2      	ldr	r2, [r0, #12]
   1067c:	4601      	mov	r1, r0
   1067e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   10682:	2a00      	cmp	r2, #0
   10684:	d142      	bne.n	1070c <_dtoa_r+0x7e4>
   10686:	e9cd 0306 	strd	r0, r3, [sp, #24]
   1068a:	4628      	mov	r0, r5
   1068c:	f7fd fabc 	bl	dc08 <__mcmp>
   10690:	9906      	ldr	r1, [sp, #24]
   10692:	9002      	str	r0, [sp, #8]
   10694:	4620      	mov	r0, r4
   10696:	f7fd f857 	bl	d748 <_Bfree>
   1069a:	9a02      	ldr	r2, [sp, #8]
   1069c:	9b07      	ldr	r3, [sp, #28]
   1069e:	b91a      	cbnz	r2, 106a8 <_dtoa_r+0x780>
   106a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   106a2:	2900      	cmp	r1, #0
   106a4:	f000 827e 	beq.w	10ba4 <_dtoa_r+0xc7c>
   106a8:	f1b9 0f00 	cmp.w	r9, #0
   106ac:	f2c0 8183 	blt.w	109b6 <_dtoa_r+0xa8e>
   106b0:	9901      	ldr	r1, [sp, #4]
   106b2:	ea49 0901 	orr.w	r9, r9, r1
   106b6:	990a      	ldr	r1, [sp, #40]	; 0x28
   106b8:	ea51 0909 	orrs.w	r9, r1, r9
   106bc:	f000 817b 	beq.w	109b6 <_dtoa_r+0xa8e>
   106c0:	2a00      	cmp	r2, #0
   106c2:	f300 81c6 	bgt.w	10a52 <_dtoa_r+0xb2a>
   106c6:	9a08      	ldr	r2, [sp, #32]
   106c8:	703b      	strb	r3, [r7, #0]
   106ca:	f107 0901 	add.w	r9, r7, #1
   106ce:	4297      	cmp	r7, r2
   106d0:	46cb      	mov	fp, r9
   106d2:	f000 81c4 	beq.w	10a5e <_dtoa_r+0xb36>
   106d6:	4629      	mov	r1, r5
   106d8:	2300      	movs	r3, #0
   106da:	220a      	movs	r2, #10
   106dc:	4620      	mov	r0, r4
   106de:	f7fd f83d 	bl	d75c <__multadd>
   106e2:	4546      	cmp	r6, r8
   106e4:	4605      	mov	r5, r0
   106e6:	4631      	mov	r1, r6
   106e8:	f04f 0300 	mov.w	r3, #0
   106ec:	f04f 020a 	mov.w	r2, #10
   106f0:	4620      	mov	r0, r4
   106f2:	d012      	beq.n	1071a <_dtoa_r+0x7f2>
   106f4:	f7fd f832 	bl	d75c <__multadd>
   106f8:	4641      	mov	r1, r8
   106fa:	4606      	mov	r6, r0
   106fc:	2300      	movs	r3, #0
   106fe:	220a      	movs	r2, #10
   10700:	4620      	mov	r0, r4
   10702:	f7fd f82b 	bl	d75c <__multadd>
   10706:	464f      	mov	r7, r9
   10708:	4680      	mov	r8, r0
   1070a:	e7a7      	b.n	1065c <_dtoa_r+0x734>
   1070c:	4620      	mov	r0, r4
   1070e:	9302      	str	r3, [sp, #8]
   10710:	f7fd f81a 	bl	d748 <_Bfree>
   10714:	9b02      	ldr	r3, [sp, #8]
   10716:	2201      	movs	r2, #1
   10718:	e7c6      	b.n	106a8 <_dtoa_r+0x780>
   1071a:	f7fd f81f 	bl	d75c <__multadd>
   1071e:	464f      	mov	r7, r9
   10720:	4606      	mov	r6, r0
   10722:	4680      	mov	r8, r0
   10724:	e79a      	b.n	1065c <_dtoa_r+0x734>
   10726:	9b01      	ldr	r3, [sp, #4]
   10728:	2b02      	cmp	r3, #2
   1072a:	dc71      	bgt.n	10810 <_dtoa_r+0x8e8>
   1072c:	9b07      	ldr	r3, [sp, #28]
   1072e:	2b00      	cmp	r3, #0
   10730:	f47f af7b 	bne.w	1062a <_dtoa_r+0x702>
   10734:	9b04      	ldr	r3, [sp, #16]
   10736:	4651      	mov	r1, sl
   10738:	3301      	adds	r3, #1
   1073a:	4628      	mov	r0, r5
   1073c:	9304      	str	r3, [sp, #16]
   1073e:	f7ff fb5f 	bl	fe00 <quorem>
   10742:	f8dd b000 	ldr.w	fp, [sp]
   10746:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1074a:	f80b 3b01 	strb.w	r3, [fp], #1
   1074e:	2700      	movs	r7, #0
   10750:	e6eb      	b.n	1052a <_dtoa_r+0x602>
   10752:	4651      	mov	r1, sl
   10754:	4628      	mov	r0, r5
   10756:	f7fd fa57 	bl	dc08 <__mcmp>
   1075a:	2800      	cmp	r0, #0
   1075c:	f6bf aeba 	bge.w	104d4 <_dtoa_r+0x5ac>
   10760:	4629      	mov	r1, r5
   10762:	2300      	movs	r3, #0
   10764:	220a      	movs	r2, #10
   10766:	4620      	mov	r0, r4
   10768:	f7fc fff8 	bl	d75c <__multadd>
   1076c:	9b04      	ldr	r3, [sp, #16]
   1076e:	1e5f      	subs	r7, r3, #1
   10770:	9b07      	ldr	r3, [sp, #28]
   10772:	4605      	mov	r5, r0
   10774:	2b00      	cmp	r3, #0
   10776:	f47f af4b 	bne.w	10610 <_dtoa_r+0x6e8>
   1077a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1077c:	2b00      	cmp	r3, #0
   1077e:	f340 8218 	ble.w	10bb2 <_dtoa_r+0xc8a>
   10782:	4699      	mov	r9, r3
   10784:	e6b1      	b.n	104ea <_dtoa_r+0x5c2>
   10786:	4bbc      	ldr	r3, [pc, #752]	; (10a78 <_dtoa_r+0xb50>)
   10788:	9300      	str	r3, [sp, #0]
   1078a:	3303      	adds	r3, #3
   1078c:	e4a4      	b.n	100d8 <_dtoa_r+0x1b0>
   1078e:	201c      	movs	r0, #28
   10790:	e712      	b.n	105b8 <_dtoa_r+0x690>
   10792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10796:	2800      	cmp	r0, #0
   10798:	f47f ae74 	bne.w	10484 <_dtoa_r+0x55c>
   1079c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   107a0:	2a00      	cmp	r2, #0
   107a2:	f000 80f4 	beq.w	1098e <_dtoa_r+0xa66>
   107a6:	9b02      	ldr	r3, [sp, #8]
   107a8:	9308      	str	r3, [sp, #32]
   107aa:	e66d      	b.n	10488 <_dtoa_r+0x560>
   107ac:	2301      	movs	r3, #1
   107ae:	9307      	str	r3, [sp, #28]
   107b0:	9b04      	ldr	r3, [sp, #16]
   107b2:	445b      	add	r3, fp
   107b4:	f103 0901 	add.w	r9, r3, #1
   107b8:	f1b9 0f01 	cmp.w	r9, #1
   107bc:	46cc      	mov	ip, r9
   107be:	930b      	str	r3, [sp, #44]	; 0x2c
   107c0:	bfb8      	it	lt
   107c2:	f04f 0c01 	movlt.w	ip, #1
   107c6:	2100      	movs	r1, #0
   107c8:	f1bc 0f17 	cmp.w	ip, #23
   107cc:	63e1      	str	r1, [r4, #60]	; 0x3c
   107ce:	f77f acbc 	ble.w	1014a <_dtoa_r+0x222>
   107d2:	2001      	movs	r0, #1
   107d4:	2204      	movs	r2, #4
   107d6:	0052      	lsls	r2, r2, #1
   107d8:	f102 0314 	add.w	r3, r2, #20
   107dc:	4563      	cmp	r3, ip
   107de:	4601      	mov	r1, r0
   107e0:	f100 0001 	add.w	r0, r0, #1
   107e4:	d9f7      	bls.n	107d6 <_dtoa_r+0x8ae>
   107e6:	63e1      	str	r1, [r4, #60]	; 0x3c
   107e8:	e4af      	b.n	1014a <_dtoa_r+0x222>
   107ea:	2301      	movs	r3, #1
   107ec:	9307      	str	r3, [sp, #28]
   107ee:	f1bb 0f00 	cmp.w	fp, #0
   107f2:	dd52      	ble.n	1089a <_dtoa_r+0x972>
   107f4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   107f8:	46d9      	mov	r9, fp
   107fa:	46dc      	mov	ip, fp
   107fc:	e7e3      	b.n	107c6 <_dtoa_r+0x89e>
   107fe:	2300      	movs	r3, #0
   10800:	9307      	str	r3, [sp, #28]
   10802:	e7d5      	b.n	107b0 <_dtoa_r+0x888>
   10804:	2300      	movs	r3, #0
   10806:	9307      	str	r3, [sp, #28]
   10808:	e7f1      	b.n	107ee <_dtoa_r+0x8c6>
   1080a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   1080e:	9704      	str	r7, [sp, #16]
   10810:	f1b9 0f00 	cmp.w	r9, #0
   10814:	f47f ada1 	bne.w	1035a <_dtoa_r+0x432>
   10818:	4651      	mov	r1, sl
   1081a:	464b      	mov	r3, r9
   1081c:	2205      	movs	r2, #5
   1081e:	4620      	mov	r0, r4
   10820:	f7fc ff9c 	bl	d75c <__multadd>
   10824:	4601      	mov	r1, r0
   10826:	4682      	mov	sl, r0
   10828:	4628      	mov	r0, r5
   1082a:	f7fd f9ed 	bl	dc08 <__mcmp>
   1082e:	2800      	cmp	r0, #0
   10830:	f77f ad93 	ble.w	1035a <_dtoa_r+0x432>
   10834:	9b04      	ldr	r3, [sp, #16]
   10836:	f103 0b01 	add.w	fp, r3, #1
   1083a:	9b00      	ldr	r3, [sp, #0]
   1083c:	2231      	movs	r2, #49	; 0x31
   1083e:	4698      	mov	r8, r3
   10840:	f803 2b01 	strb.w	r2, [r3], #1
   10844:	9300      	str	r3, [sp, #0]
   10846:	4651      	mov	r1, sl
   10848:	4620      	mov	r0, r4
   1084a:	f7fc ff7d 	bl	d748 <_Bfree>
   1084e:	f10b 0301 	add.w	r3, fp, #1
   10852:	f8dd 9000 	ldr.w	r9, [sp]
   10856:	9304      	str	r3, [sp, #16]
   10858:	f8cd 8000 	str.w	r8, [sp]
   1085c:	2e00      	cmp	r6, #0
   1085e:	f47f ae8f 	bne.w	10580 <_dtoa_r+0x658>
   10862:	e691      	b.n	10588 <_dtoa_r+0x660>
   10864:	eba3 0a0a 	sub.w	sl, r3, sl
   10868:	e5c5      	b.n	103f6 <_dtoa_r+0x4ce>
   1086a:	4631      	mov	r1, r6
   1086c:	4652      	mov	r2, sl
   1086e:	4620      	mov	r0, r4
   10870:	f7fd f8f2 	bl	da58 <__pow5mult>
   10874:	462a      	mov	r2, r5
   10876:	4601      	mov	r1, r0
   10878:	4606      	mov	r6, r0
   1087a:	4620      	mov	r0, r4
   1087c:	f7fd f83e 	bl	d8fc <__multiply>
   10880:	4629      	mov	r1, r5
   10882:	4605      	mov	r5, r0
   10884:	4620      	mov	r0, r4
   10886:	f7fc ff5f 	bl	d748 <_Bfree>
   1088a:	e5ea      	b.n	10462 <_dtoa_r+0x53a>
   1088c:	2002      	movs	r0, #2
   1088e:	eeb0 5b48 	vmov.f64	d5, d8
   10892:	e481      	b.n	10198 <_dtoa_r+0x270>
   10894:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   10898:	e68e      	b.n	105b8 <_dtoa_r+0x690>
   1089a:	f04f 0b01 	mov.w	fp, #1
   1089e:	46d9      	mov	r9, fp
   108a0:	e44f      	b.n	10142 <_dtoa_r+0x21a>
   108a2:	d103      	bne.n	108ac <_dtoa_r+0x984>
   108a4:	9b01      	ldr	r3, [sp, #4]
   108a6:	07db      	lsls	r3, r3, #31
   108a8:	f53f ae4c 	bmi.w	10544 <_dtoa_r+0x61c>
   108ac:	46d9      	mov	r9, fp
   108ae:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   108b2:	2b30      	cmp	r3, #48	; 0x30
   108b4:	d0fa      	beq.n	108ac <_dtoa_r+0x984>
   108b6:	e657      	b.n	10568 <_dtoa_r+0x640>
   108b8:	9b04      	ldr	r3, [sp, #16]
   108ba:	9a00      	ldr	r2, [sp, #0]
   108bc:	3301      	adds	r3, #1
   108be:	9304      	str	r3, [sp, #16]
   108c0:	2331      	movs	r3, #49	; 0x31
   108c2:	7013      	strb	r3, [r2, #0]
   108c4:	e650      	b.n	10568 <_dtoa_r+0x640>
   108c6:	f1ba 0f00 	cmp.w	sl, #0
   108ca:	f000 8123 	beq.w	10b14 <_dtoa_r+0xbec>
   108ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
   108d2:	9b06      	ldr	r3, [sp, #24]
   108d4:	9309      	str	r3, [sp, #36]	; 0x24
   108d6:	4413      	add	r3, r2
   108d8:	f8dd a020 	ldr.w	sl, [sp, #32]
   108dc:	9306      	str	r3, [sp, #24]
   108de:	4490      	add	r8, r2
   108e0:	e592      	b.n	10408 <_dtoa_r+0x4e0>
   108e2:	ee07 0a90 	vmov	s15, r0
   108e6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   108ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   108ee:	eea6 5b07 	vfma.f64	d5, d6, d7
   108f2:	ee15 2a90 	vmov	r2, s11
   108f6:	ec51 0b15 	vmov	r0, r1, d5
   108fa:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   108fe:	ec41 0b15 	vmov	d5, r0, r1
   10902:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   10906:	ee36 7b47 	vsub.f64	d7, d6, d7
   1090a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10912:	f300 8137 	bgt.w	10b84 <_dtoa_r+0xc5c>
   10916:	eeb1 5b45 	vneg.f64	d5, d5
   1091a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   1091e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10922:	f57f acfb 	bpl.w	1031c <_dtoa_r+0x3f4>
   10926:	f04f 0a00 	mov.w	sl, #0
   1092a:	4656      	mov	r6, sl
   1092c:	e515      	b.n	1035a <_dtoa_r+0x432>
   1092e:	f000 80f5 	beq.w	10b1c <_dtoa_r+0xbf4>
   10932:	9b04      	ldr	r3, [sp, #16]
   10934:	4951      	ldr	r1, [pc, #324]	; (10a7c <_dtoa_r+0xb54>)
   10936:	425a      	negs	r2, r3
   10938:	f002 000f 	and.w	r0, r2, #15
   1093c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   10940:	ed91 6b00 	vldr	d6, [r1]
   10944:	1112      	asrs	r2, r2, #4
   10946:	ee28 6b06 	vmul.f64	d6, d8, d6
   1094a:	f000 8142 	beq.w	10bd2 <_dtoa_r+0xcaa>
   1094e:	eeb0 7b46 	vmov.f64	d7, d6
   10952:	494b      	ldr	r1, [pc, #300]	; (10a80 <_dtoa_r+0xb58>)
   10954:	2600      	movs	r6, #0
   10956:	2002      	movs	r0, #2
   10958:	07d3      	lsls	r3, r2, #31
   1095a:	d505      	bpl.n	10968 <_dtoa_r+0xa40>
   1095c:	ed91 5b00 	vldr	d5, [r1]
   10960:	3001      	adds	r0, #1
   10962:	2601      	movs	r6, #1
   10964:	ee27 7b05 	vmul.f64	d7, d7, d5
   10968:	1052      	asrs	r2, r2, #1
   1096a:	f101 0108 	add.w	r1, r1, #8
   1096e:	d1f3      	bne.n	10958 <_dtoa_r+0xa30>
   10970:	2e00      	cmp	r6, #0
   10972:	fe06 6b07 	vseleq.f64	d6, d6, d7
   10976:	e41e      	b.n	101b6 <_dtoa_r+0x28e>
   10978:	9b02      	ldr	r3, [sp, #8]
   1097a:	2b00      	cmp	r3, #0
   1097c:	f47f ae37 	bne.w	105ee <_dtoa_r+0x6c6>
   10980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10984:	f3c1 0213 	ubfx	r2, r1, #0, #20
   10988:	2a00      	cmp	r2, #0
   1098a:	f040 8137 	bne.w	10bfc <_dtoa_r+0xcd4>
   1098e:	4a3d      	ldr	r2, [pc, #244]	; (10a84 <_dtoa_r+0xb5c>)
   10990:	400a      	ands	r2, r1
   10992:	2a00      	cmp	r2, #0
   10994:	f000 80fa 	beq.w	10b8c <_dtoa_r+0xc64>
   10998:	9b06      	ldr	r3, [sp, #24]
   1099a:	3301      	adds	r3, #1
   1099c:	9306      	str	r3, [sp, #24]
   1099e:	2301      	movs	r3, #1
   109a0:	f108 0801 	add.w	r8, r8, #1
   109a4:	9308      	str	r3, [sp, #32]
   109a6:	e56f      	b.n	10488 <_dtoa_r+0x560>
   109a8:	4629      	mov	r1, r5
   109aa:	9a08      	ldr	r2, [sp, #32]
   109ac:	4620      	mov	r0, r4
   109ae:	f7fd f853 	bl	da58 <__pow5mult>
   109b2:	4605      	mov	r5, r0
   109b4:	e55a      	b.n	1046c <_dtoa_r+0x544>
   109b6:	2a00      	cmp	r2, #0
   109b8:	dd12      	ble.n	109e0 <_dtoa_r+0xab8>
   109ba:	4629      	mov	r1, r5
   109bc:	2201      	movs	r2, #1
   109be:	4620      	mov	r0, r4
   109c0:	9301      	str	r3, [sp, #4]
   109c2:	f7fd f8a9 	bl	db18 <__lshift>
   109c6:	4651      	mov	r1, sl
   109c8:	4605      	mov	r5, r0
   109ca:	f7fd f91d 	bl	dc08 <__mcmp>
   109ce:	2800      	cmp	r0, #0
   109d0:	9b01      	ldr	r3, [sp, #4]
   109d2:	f340 80e1 	ble.w	10b98 <_dtoa_r+0xc70>
   109d6:	2b39      	cmp	r3, #57	; 0x39
   109d8:	f000 80ca 	beq.w	10b70 <_dtoa_r+0xc48>
   109dc:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   109e0:	46b9      	mov	r9, r7
   109e2:	f809 3b01 	strb.w	r3, [r9], #1
   109e6:	9b04      	ldr	r3, [sp, #16]
   109e8:	3301      	adds	r3, #1
   109ea:	4637      	mov	r7, r6
   109ec:	9304      	str	r3, [sp, #16]
   109ee:	4646      	mov	r6, r8
   109f0:	e5ba      	b.n	10568 <_dtoa_r+0x640>
   109f2:	ee38 8b08 	vadd.f64	d8, d8, d8
   109f6:	eeb4 8bc6 	vcmpe.f64	d8, d6
   109fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   109fe:	dc0a      	bgt.n	10a16 <_dtoa_r+0xaee>
   10a00:	eeb4 8b46 	vcmp.f64	d8, d6
   10a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10a08:	f47f acdc 	bne.w	103c4 <_dtoa_r+0x49c>
   10a0c:	ee17 3a10 	vmov	r3, s14
   10a10:	07d8      	lsls	r0, r3, #31
   10a12:	f57f acd7 	bpl.w	103c4 <_dtoa_r+0x49c>
   10a16:	9a00      	ldr	r2, [sp, #0]
   10a18:	e454      	b.n	102c4 <_dtoa_r+0x39c>
   10a1a:	6871      	ldr	r1, [r6, #4]
   10a1c:	4620      	mov	r0, r4
   10a1e:	f7fc fe6d 	bl	d6fc <_Balloc>
   10a22:	4607      	mov	r7, r0
   10a24:	2800      	cmp	r0, #0
   10a26:	f000 80de 	beq.w	10be6 <_dtoa_r+0xcbe>
   10a2a:	6933      	ldr	r3, [r6, #16]
   10a2c:	3302      	adds	r3, #2
   10a2e:	009a      	lsls	r2, r3, #2
   10a30:	f106 010c 	add.w	r1, r6, #12
   10a34:	300c      	adds	r0, #12
   10a36:	f7f9 fb33 	bl	a0a0 <memcpy>
   10a3a:	4639      	mov	r1, r7
   10a3c:	2201      	movs	r2, #1
   10a3e:	4620      	mov	r0, r4
   10a40:	f7fd f86a 	bl	db18 <__lshift>
   10a44:	4680      	mov	r8, r0
   10a46:	e5fe      	b.n	10646 <_dtoa_r+0x71e>
   10a48:	9b06      	ldr	r3, [sp, #24]
   10a4a:	eba3 0309 	sub.w	r3, r3, r9
   10a4e:	9309      	str	r3, [sp, #36]	; 0x24
   10a50:	e4da      	b.n	10408 <_dtoa_r+0x4e0>
   10a52:	2b39      	cmp	r3, #57	; 0x39
   10a54:	f000 808c 	beq.w	10b70 <_dtoa_r+0xc48>
   10a58:	46b9      	mov	r9, r7
   10a5a:	3301      	adds	r3, #1
   10a5c:	e7c1      	b.n	109e2 <_dtoa_r+0xaba>
   10a5e:	9a04      	ldr	r2, [sp, #16]
   10a60:	3201      	adds	r2, #1
   10a62:	4637      	mov	r7, r6
   10a64:	9204      	str	r2, [sp, #16]
   10a66:	4646      	mov	r6, r8
   10a68:	e55f      	b.n	1052a <_dtoa_r+0x602>
   10a6a:	4629      	mov	r1, r5
   10a6c:	4620      	mov	r0, r4
   10a6e:	f7fc fff3 	bl	da58 <__pow5mult>
   10a72:	4605      	mov	r5, r0
   10a74:	e4fa      	b.n	1046c <_dtoa_r+0x544>
   10a76:	bf00      	nop
   10a78:	20000c24 	.word	0x20000c24
   10a7c:	200002a8 	.word	0x200002a8
   10a80:	20000280 	.word	0x20000280
   10a84:	7ff00000 	.word	0x7ff00000
   10a88:	4b5e      	ldr	r3, [pc, #376]	; (10c04 <_dtoa_r+0xcdc>)
   10a8a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   10a8e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   10a92:	ed1c 3b02 	vldr	d3, [ip, #-8]
   10a96:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   10a9a:	ee36 7b47 	vsub.f64	d7, d6, d7
   10a9e:	ec41 0b16 	vmov	d6, r0, r1
   10aa2:	ee15 1a90 	vmov	r1, s11
   10aa6:	ee23 3b06 	vmul.f64	d3, d3, d6
   10aaa:	9800      	ldr	r0, [sp, #0]
   10aac:	3130      	adds	r1, #48	; 0x30
   10aae:	2a01      	cmp	r2, #1
   10ab0:	f800 1b01 	strb.w	r1, [r0], #1
   10ab4:	f000 8083 	beq.w	10bbe <_dtoa_r+0xc96>
   10ab8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   10abc:	9b00      	ldr	r3, [sp, #0]
   10abe:	1899      	adds	r1, r3, r2
   10ac0:	ee27 7b04 	vmul.f64	d7, d7, d4
   10ac4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   10ac8:	ee16 3a90 	vmov	r3, s13
   10acc:	3330      	adds	r3, #48	; 0x30
   10ace:	f800 3b01 	strb.w	r3, [r0], #1
   10ad2:	4281      	cmp	r1, r0
   10ad4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   10ad8:	ee37 7b45 	vsub.f64	d7, d7, d5
   10adc:	d1f0      	bne.n	10ac0 <_dtoa_r+0xb98>
   10ade:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   10ae2:	ee33 5b06 	vadd.f64	d5, d3, d6
   10ae6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   10aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10aee:	f53f abe3 	bmi.w	102b8 <_dtoa_r+0x390>
   10af2:	ee36 6b43 	vsub.f64	d6, d6, d3
   10af6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   10afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10afe:	f77f ac0d 	ble.w	1031c <_dtoa_r+0x3f4>
   10b02:	4689      	mov	r9, r1
   10b04:	3901      	subs	r1, #1
   10b06:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   10b0a:	2b30      	cmp	r3, #48	; 0x30
   10b0c:	d0f9      	beq.n	10b02 <_dtoa_r+0xbda>
   10b0e:	1c73      	adds	r3, r6, #1
   10b10:	9304      	str	r3, [sp, #16]
   10b12:	e539      	b.n	10588 <_dtoa_r+0x660>
   10b14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   10b1a:	e6da      	b.n	108d2 <_dtoa_r+0x9aa>
   10b1c:	2002      	movs	r0, #2
   10b1e:	eeb0 6b48 	vmov.f64	d6, d8
   10b22:	f7ff bb48 	b.w	101b6 <_dtoa_r+0x28e>
   10b26:	f1b9 0f00 	cmp.w	r9, #0
   10b2a:	f43f aeda 	beq.w	108e2 <_dtoa_r+0x9ba>
   10b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10b30:	2a00      	cmp	r2, #0
   10b32:	f77f abf3 	ble.w	1031c <_dtoa_r+0x3f4>
   10b36:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   10b3a:	ee26 6b04 	vmul.f64	d6, d6, d4
   10b3e:	3001      	adds	r0, #1
   10b40:	ee07 0a90 	vmov	s15, r0
   10b44:	9b04      	ldr	r3, [sp, #16]
   10b46:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   10b4a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   10b4e:	eea6 7b05 	vfma.f64	d7, d6, d5
   10b52:	ee17 ca90 	vmov	ip, s15
   10b56:	ec51 0b17 	vmov	r0, r1, d7
   10b5a:	1e5e      	subs	r6, r3, #1
   10b5c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   10b60:	f7ff bb47 	b.w	101f2 <_dtoa_r+0x2ca>
   10b64:	9b04      	ldr	r3, [sp, #16]
   10b66:	3301      	adds	r3, #1
   10b68:	9304      	str	r3, [sp, #16]
   10b6a:	2331      	movs	r3, #49	; 0x31
   10b6c:	f7ff bbb1 	b.w	102d2 <_dtoa_r+0x3aa>
   10b70:	9b04      	ldr	r3, [sp, #16]
   10b72:	46bb      	mov	fp, r7
   10b74:	3301      	adds	r3, #1
   10b76:	9304      	str	r3, [sp, #16]
   10b78:	2339      	movs	r3, #57	; 0x39
   10b7a:	4637      	mov	r7, r6
   10b7c:	f80b 3b01 	strb.w	r3, [fp], #1
   10b80:	4646      	mov	r6, r8
   10b82:	e4e1      	b.n	10548 <_dtoa_r+0x620>
   10b84:	f04f 0a00 	mov.w	sl, #0
   10b88:	4656      	mov	r6, sl
   10b8a:	e653      	b.n	10834 <_dtoa_r+0x90c>
   10b8c:	9208      	str	r2, [sp, #32]
   10b8e:	e47b      	b.n	10488 <_dtoa_r+0x560>
   10b90:	1c73      	adds	r3, r6, #1
   10b92:	9304      	str	r3, [sp, #16]
   10b94:	4689      	mov	r9, r1
   10b96:	e4f7      	b.n	10588 <_dtoa_r+0x660>
   10b98:	f47f af22 	bne.w	109e0 <_dtoa_r+0xab8>
   10b9c:	07da      	lsls	r2, r3, #31
   10b9e:	f57f af1f 	bpl.w	109e0 <_dtoa_r+0xab8>
   10ba2:	e718      	b.n	109d6 <_dtoa_r+0xaae>
   10ba4:	2b39      	cmp	r3, #57	; 0x39
   10ba6:	d0e3      	beq.n	10b70 <_dtoa_r+0xc48>
   10ba8:	f1b9 0f00 	cmp.w	r9, #0
   10bac:	f73f af16 	bgt.w	109dc <_dtoa_r+0xab4>
   10bb0:	e716      	b.n	109e0 <_dtoa_r+0xab8>
   10bb2:	9b01      	ldr	r3, [sp, #4]
   10bb4:	2b02      	cmp	r3, #2
   10bb6:	f73f ae28 	bgt.w	1080a <_dtoa_r+0x8e2>
   10bba:	9704      	str	r7, [sp, #16]
   10bbc:	e5ba      	b.n	10734 <_dtoa_r+0x80c>
   10bbe:	4601      	mov	r1, r0
   10bc0:	e78d      	b.n	10ade <_dtoa_r+0xbb6>
   10bc2:	9b01      	ldr	r3, [sp, #4]
   10bc4:	2b02      	cmp	r3, #2
   10bc6:	f73f ae20 	bgt.w	1080a <_dtoa_r+0x8e2>
   10bca:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   10bce:	9704      	str	r7, [sp, #16]
   10bd0:	e52b      	b.n	1062a <_dtoa_r+0x702>
   10bd2:	2002      	movs	r0, #2
   10bd4:	f7ff baef 	b.w	101b6 <_dtoa_r+0x28e>
   10bd8:	4b0b      	ldr	r3, [pc, #44]	; (10c08 <_dtoa_r+0xce0>)
   10bda:	480c      	ldr	r0, [pc, #48]	; (10c0c <_dtoa_r+0xce4>)
   10bdc:	2200      	movs	r2, #0
   10bde:	f240 11af 	movw	r1, #431	; 0x1af
   10be2:	f7ff f8b1 	bl	fd48 <__assert_func>
   10be6:	4b08      	ldr	r3, [pc, #32]	; (10c08 <_dtoa_r+0xce0>)
   10be8:	4808      	ldr	r0, [pc, #32]	; (10c0c <_dtoa_r+0xce4>)
   10bea:	463a      	mov	r2, r7
   10bec:	f240 21ef 	movw	r1, #751	; 0x2ef
   10bf0:	f7ff f8aa 	bl	fd48 <__assert_func>
   10bf4:	4b06      	ldr	r3, [pc, #24]	; (10c10 <_dtoa_r+0xce8>)
   10bf6:	9300      	str	r3, [sp, #0]
   10bf8:	f7ff b9d2 	b.w	ffa0 <_dtoa_r+0x78>
   10bfc:	9b02      	ldr	r3, [sp, #8]
   10bfe:	9308      	str	r3, [sp, #32]
   10c00:	e4f7      	b.n	105f2 <_dtoa_r+0x6ca>
   10c02:	bf00      	nop
   10c04:	200002a8 	.word	0x200002a8
   10c08:	20000aa4 	.word	0x20000aa4
   10c0c:	20000c28 	.word	0x20000c28
   10c10:	20000c18 	.word	0x20000c18

00010c14 <_wcrtomb_r>:
   10c14:	b570      	push	{r4, r5, r6, lr}
   10c16:	4605      	mov	r5, r0
   10c18:	b084      	sub	sp, #16
   10c1a:	b15b      	cbz	r3, 10c34 <_wcrtomb_r+0x20>
   10c1c:	461c      	mov	r4, r3
   10c1e:	b169      	cbz	r1, 10c3c <_wcrtomb_r+0x28>
   10c20:	4b0e      	ldr	r3, [pc, #56]	; (10c5c <_wcrtomb_r+0x48>)
   10c22:	4628      	mov	r0, r5
   10c24:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   10c28:	4623      	mov	r3, r4
   10c2a:	47b0      	blx	r6
   10c2c:	1c43      	adds	r3, r0, #1
   10c2e:	d00f      	beq.n	10c50 <_wcrtomb_r+0x3c>
   10c30:	b004      	add	sp, #16
   10c32:	bd70      	pop	{r4, r5, r6, pc}
   10c34:	f500 7482 	add.w	r4, r0, #260	; 0x104
   10c38:	2900      	cmp	r1, #0
   10c3a:	d1f1      	bne.n	10c20 <_wcrtomb_r+0xc>
   10c3c:	4a07      	ldr	r2, [pc, #28]	; (10c5c <_wcrtomb_r+0x48>)
   10c3e:	4623      	mov	r3, r4
   10c40:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   10c44:	4628      	mov	r0, r5
   10c46:	460a      	mov	r2, r1
   10c48:	a901      	add	r1, sp, #4
   10c4a:	47b0      	blx	r6
   10c4c:	1c43      	adds	r3, r0, #1
   10c4e:	d1ef      	bne.n	10c30 <_wcrtomb_r+0x1c>
   10c50:	2200      	movs	r2, #0
   10c52:	238a      	movs	r3, #138	; 0x8a
   10c54:	6022      	str	r2, [r4, #0]
   10c56:	602b      	str	r3, [r5, #0]
   10c58:	b004      	add	sp, #16
   10c5a:	bd70      	pop	{r4, r5, r6, pc}
   10c5c:	20004374 	.word	0x20004374

00010c60 <_wcsrtombs_r>:
   10c60:	b510      	push	{r4, lr}
   10c62:	b082      	sub	sp, #8
   10c64:	9c04      	ldr	r4, [sp, #16]
   10c66:	e9cd 3400 	strd	r3, r4, [sp]
   10c6a:	f04f 33ff 	mov.w	r3, #4294967295
   10c6e:	f001 fbc7 	bl	12400 <_wcsnrtombs_r>
   10c72:	b002      	add	sp, #8
   10c74:	bd10      	pop	{r4, pc}
   10c76:	bf00      	nop

00010c78 <fiprintf>:
   10c78:	b40e      	push	{r1, r2, r3}
   10c7a:	b510      	push	{r4, lr}
   10c7c:	b083      	sub	sp, #12
   10c7e:	ab05      	add	r3, sp, #20
   10c80:	4c06      	ldr	r4, [pc, #24]	; (10c9c <fiprintf+0x24>)
   10c82:	f853 2b04 	ldr.w	r2, [r3], #4
   10c86:	9301      	str	r3, [sp, #4]
   10c88:	4601      	mov	r1, r0
   10c8a:	6820      	ldr	r0, [r4, #0]
   10c8c:	f000 f8c4 	bl	10e18 <_vfiprintf_r>
   10c90:	b003      	add	sp, #12
   10c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10c96:	b003      	add	sp, #12
   10c98:	4770      	bx	lr
   10c9a:	bf00      	nop
   10c9c:	200048fc 	.word	0x200048fc

00010ca0 <__ssprint_r>:
   10ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ca4:	6893      	ldr	r3, [r2, #8]
   10ca6:	6817      	ldr	r7, [r2, #0]
   10ca8:	b083      	sub	sp, #12
   10caa:	4692      	mov	sl, r2
   10cac:	2b00      	cmp	r3, #0
   10cae:	d070      	beq.n	10d92 <__ssprint_r+0xf2>
   10cb0:	4681      	mov	r9, r0
   10cb2:	688a      	ldr	r2, [r1, #8]
   10cb4:	6808      	ldr	r0, [r1, #0]
   10cb6:	460c      	mov	r4, r1
   10cb8:	3708      	adds	r7, #8
   10cba:	e043      	b.n	10d44 <__ssprint_r+0xa4>
   10cbc:	89a3      	ldrh	r3, [r4, #12]
   10cbe:	f413 6f90 	tst.w	r3, #1152	; 0x480
   10cc2:	d02e      	beq.n	10d22 <__ssprint_r+0x82>
   10cc4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   10cc8:	eba0 0801 	sub.w	r8, r0, r1
   10ccc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   10cd0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   10cd4:	f108 0001 	add.w	r0, r8, #1
   10cd8:	1076      	asrs	r6, r6, #1
   10cda:	4428      	add	r0, r5
   10cdc:	42b0      	cmp	r0, r6
   10cde:	4632      	mov	r2, r6
   10ce0:	bf84      	itt	hi
   10ce2:	4606      	movhi	r6, r0
   10ce4:	4632      	movhi	r2, r6
   10ce6:	055b      	lsls	r3, r3, #21
   10ce8:	d537      	bpl.n	10d5a <__ssprint_r+0xba>
   10cea:	4611      	mov	r1, r2
   10cec:	4648      	mov	r0, r9
   10cee:	f7fa ff87 	bl	bc00 <_malloc_r>
   10cf2:	9001      	str	r0, [sp, #4]
   10cf4:	2800      	cmp	r0, #0
   10cf6:	d03a      	beq.n	10d6e <__ssprint_r+0xce>
   10cf8:	4642      	mov	r2, r8
   10cfa:	6921      	ldr	r1, [r4, #16]
   10cfc:	f7f9 f9d0 	bl	a0a0 <memcpy>
   10d00:	89a2      	ldrh	r2, [r4, #12]
   10d02:	9b01      	ldr	r3, [sp, #4]
   10d04:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   10d08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10d0c:	81a2      	strh	r2, [r4, #12]
   10d0e:	eba6 0208 	sub.w	r2, r6, r8
   10d12:	eb03 0008 	add.w	r0, r3, r8
   10d16:	6166      	str	r6, [r4, #20]
   10d18:	60a2      	str	r2, [r4, #8]
   10d1a:	6123      	str	r3, [r4, #16]
   10d1c:	6020      	str	r0, [r4, #0]
   10d1e:	462e      	mov	r6, r5
   10d20:	46a8      	mov	r8, r5
   10d22:	4642      	mov	r2, r8
   10d24:	4659      	mov	r1, fp
   10d26:	f7fb fee7 	bl	caf8 <memmove>
   10d2a:	f8da 3008 	ldr.w	r3, [sl, #8]
   10d2e:	68a2      	ldr	r2, [r4, #8]
   10d30:	6820      	ldr	r0, [r4, #0]
   10d32:	1b92      	subs	r2, r2, r6
   10d34:	4440      	add	r0, r8
   10d36:	1b5b      	subs	r3, r3, r5
   10d38:	60a2      	str	r2, [r4, #8]
   10d3a:	6020      	str	r0, [r4, #0]
   10d3c:	f8ca 3008 	str.w	r3, [sl, #8]
   10d40:	b33b      	cbz	r3, 10d92 <__ssprint_r+0xf2>
   10d42:	3708      	adds	r7, #8
   10d44:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   10d48:	2d00      	cmp	r5, #0
   10d4a:	d0fa      	beq.n	10d42 <__ssprint_r+0xa2>
   10d4c:	42aa      	cmp	r2, r5
   10d4e:	4616      	mov	r6, r2
   10d50:	4690      	mov	r8, r2
   10d52:	d9b3      	bls.n	10cbc <__ssprint_r+0x1c>
   10d54:	462e      	mov	r6, r5
   10d56:	46a8      	mov	r8, r5
   10d58:	e7e3      	b.n	10d22 <__ssprint_r+0x82>
   10d5a:	4648      	mov	r0, r9
   10d5c:	f7fb fa18 	bl	c190 <_realloc_r>
   10d60:	4603      	mov	r3, r0
   10d62:	2800      	cmp	r0, #0
   10d64:	d1d3      	bne.n	10d0e <__ssprint_r+0x6e>
   10d66:	6921      	ldr	r1, [r4, #16]
   10d68:	4648      	mov	r0, r9
   10d6a:	f7fc fbab 	bl	d4c4 <_free_r>
   10d6e:	89a3      	ldrh	r3, [r4, #12]
   10d70:	220c      	movs	r2, #12
   10d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d76:	f8c9 2000 	str.w	r2, [r9]
   10d7a:	f04f 30ff 	mov.w	r0, #4294967295
   10d7e:	81a3      	strh	r3, [r4, #12]
   10d80:	2200      	movs	r2, #0
   10d82:	2300      	movs	r3, #0
   10d84:	f8ca 2008 	str.w	r2, [sl, #8]
   10d88:	f8ca 3004 	str.w	r3, [sl, #4]
   10d8c:	b003      	add	sp, #12
   10d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d92:	2000      	movs	r0, #0
   10d94:	2300      	movs	r3, #0
   10d96:	f8ca 3004 	str.w	r3, [sl, #4]
   10d9a:	b003      	add	sp, #12
   10d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010da0 <__sprint_r.part.0>:
   10da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10da4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10da6:	049c      	lsls	r4, r3, #18
   10da8:	4690      	mov	r8, r2
   10daa:	d52d      	bpl.n	10e08 <__sprint_r.part.0+0x68>
   10dac:	6893      	ldr	r3, [r2, #8]
   10dae:	6812      	ldr	r2, [r2, #0]
   10db0:	b343      	cbz	r3, 10e04 <__sprint_r.part.0+0x64>
   10db2:	468b      	mov	fp, r1
   10db4:	4606      	mov	r6, r0
   10db6:	f102 0908 	add.w	r9, r2, #8
   10dba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   10dbe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   10dc2:	d015      	beq.n	10df0 <__sprint_r.part.0+0x50>
   10dc4:	3d04      	subs	r5, #4
   10dc6:	2400      	movs	r4, #0
   10dc8:	e001      	b.n	10dce <__sprint_r.part.0+0x2e>
   10dca:	42a7      	cmp	r7, r4
   10dcc:	d00e      	beq.n	10dec <__sprint_r.part.0+0x4c>
   10dce:	f855 1f04 	ldr.w	r1, [r5, #4]!
   10dd2:	465a      	mov	r2, fp
   10dd4:	4630      	mov	r0, r6
   10dd6:	f001 fa5b 	bl	12290 <_fputwc_r>
   10dda:	1c43      	adds	r3, r0, #1
   10ddc:	f104 0401 	add.w	r4, r4, #1
   10de0:	d1f3      	bne.n	10dca <__sprint_r.part.0+0x2a>
   10de2:	2300      	movs	r3, #0
   10de4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10dec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   10df0:	f02a 0a03 	bic.w	sl, sl, #3
   10df4:	eba3 030a 	sub.w	r3, r3, sl
   10df8:	f8c8 3008 	str.w	r3, [r8, #8]
   10dfc:	f109 0908 	add.w	r9, r9, #8
   10e00:	2b00      	cmp	r3, #0
   10e02:	d1da      	bne.n	10dba <__sprint_r.part.0+0x1a>
   10e04:	2000      	movs	r0, #0
   10e06:	e7ec      	b.n	10de2 <__sprint_r.part.0+0x42>
   10e08:	f001 f80c 	bl	11e24 <__sfvwrite_r>
   10e0c:	2300      	movs	r3, #0
   10e0e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10e12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e16:	bf00      	nop

00010e18 <_vfiprintf_r>:
   10e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e1c:	ed2d 8b02 	vpush	{d8}
   10e20:	b0c5      	sub	sp, #276	; 0x114
   10e22:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   10e26:	4683      	mov	fp, r0
   10e28:	ee08 1a10 	vmov	s16, r1
   10e2c:	4616      	mov	r6, r2
   10e2e:	2100      	movs	r1, #0
   10e30:	2208      	movs	r2, #8
   10e32:	4650      	mov	r0, sl
   10e34:	461c      	mov	r4, r3
   10e36:	9307      	str	r3, [sp, #28]
   10e38:	f7fb feda 	bl	cbf0 <memset>
   10e3c:	f1bb 0f00 	cmp.w	fp, #0
   10e40:	d004      	beq.n	10e4c <_vfiprintf_r+0x34>
   10e42:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   10e46:	2b00      	cmp	r3, #0
   10e48:	f000 86a0 	beq.w	11b8c <_vfiprintf_r+0xd74>
   10e4c:	ee18 2a10 	vmov	r2, s16
   10e50:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10e52:	07db      	lsls	r3, r3, #31
   10e54:	f140 8513 	bpl.w	1187e <_vfiprintf_r+0xa66>
   10e58:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10e5c:	b28a      	uxth	r2, r1
   10e5e:	0495      	lsls	r5, r2, #18
   10e60:	d40b      	bmi.n	10e7a <_vfiprintf_r+0x62>
   10e62:	ee18 3a10 	vmov	r3, s16
   10e66:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   10e6a:	8199      	strh	r1, [r3, #12]
   10e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   10e6e:	b28a      	uxth	r2, r1
   10e70:	ee18 1a10 	vmov	r1, s16
   10e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   10e78:	664b      	str	r3, [r1, #100]	; 0x64
   10e7a:	0710      	lsls	r0, r2, #28
   10e7c:	f140 8105 	bpl.w	1108a <_vfiprintf_r+0x272>
   10e80:	ee18 3a10 	vmov	r3, s16
   10e84:	691b      	ldr	r3, [r3, #16]
   10e86:	2b00      	cmp	r3, #0
   10e88:	f000 80ff 	beq.w	1108a <_vfiprintf_r+0x272>
   10e8c:	f002 031a 	and.w	r3, r2, #26
   10e90:	2b0a      	cmp	r3, #10
   10e92:	f000 810a 	beq.w	110aa <_vfiprintf_r+0x292>
   10e96:	2300      	movs	r3, #0
   10e98:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   10e9c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   10ea0:	aa1b      	add	r2, sp, #108	; 0x6c
   10ea2:	930c      	str	r3, [sp, #48]	; 0x30
   10ea4:	9218      	str	r2, [sp, #96]	; 0x60
   10ea6:	4691      	mov	r9, r2
   10ea8:	930b      	str	r3, [sp, #44]	; 0x2c
   10eaa:	9305      	str	r3, [sp, #20]
   10eac:	46b0      	mov	r8, r6
   10eae:	4644      	mov	r4, r8
   10eb0:	4ba8      	ldr	r3, [pc, #672]	; (11154 <_vfiprintf_r+0x33c>)
   10eb2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   10eb6:	f7fb ff85 	bl	cdc4 <__locale_mb_cur_max>
   10eba:	4622      	mov	r2, r4
   10ebc:	4603      	mov	r3, r0
   10ebe:	a912      	add	r1, sp, #72	; 0x48
   10ec0:	f8cd a000 	str.w	sl, [sp]
   10ec4:	4658      	mov	r0, fp
   10ec6:	47a8      	blx	r5
   10ec8:	2800      	cmp	r0, #0
   10eca:	f000 8145 	beq.w	11158 <_vfiprintf_r+0x340>
   10ece:	f2c0 8139 	blt.w	11144 <_vfiprintf_r+0x32c>
   10ed2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10ed4:	2a25      	cmp	r2, #37	; 0x25
   10ed6:	4603      	mov	r3, r0
   10ed8:	d001      	beq.n	10ede <_vfiprintf_r+0xc6>
   10eda:	441c      	add	r4, r3
   10edc:	e7e8      	b.n	10eb0 <_vfiprintf_r+0x98>
   10ede:	ebb4 0608 	subs.w	r6, r4, r8
   10ee2:	4605      	mov	r5, r0
   10ee4:	f040 813c 	bne.w	11160 <_vfiprintf_r+0x348>
   10ee8:	2300      	movs	r3, #0
   10eea:	7861      	ldrb	r1, [r4, #1]
   10eec:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10ef0:	f104 0801 	add.w	r8, r4, #1
   10ef4:	9306      	str	r3, [sp, #24]
   10ef6:	f04f 37ff 	mov.w	r7, #4294967295
   10efa:	461e      	mov	r6, r3
   10efc:	242b      	movs	r4, #43	; 0x2b
   10efe:	f108 0801 	add.w	r8, r8, #1
   10f02:	f1a1 0320 	sub.w	r3, r1, #32
   10f06:	2b5a      	cmp	r3, #90	; 0x5a
   10f08:	f200 8178 	bhi.w	111fc <_vfiprintf_r+0x3e4>
   10f0c:	e8df f013 	tbh	[pc, r3, lsl #1]
   10f10:	017602b5 	.word	0x017602b5
   10f14:	02b00176 	.word	0x02b00176
   10f18:	01760176 	.word	0x01760176
   10f1c:	006a0176 	.word	0x006a0176
   10f20:	01760176 	.word	0x01760176
   10f24:	028d027d 	.word	0x028d027d
   10f28:	02880176 	.word	0x02880176
   10f2c:	01760297 	.word	0x01760297
   10f30:	005b0292 	.word	0x005b0292
   10f34:	005b005b 	.word	0x005b005b
   10f38:	005b005b 	.word	0x005b005b
   10f3c:	005b005b 	.word	0x005b005b
   10f40:	005b005b 	.word	0x005b005b
   10f44:	01760176 	.word	0x01760176
   10f48:	01760176 	.word	0x01760176
   10f4c:	01760176 	.word	0x01760176
   10f50:	01760176 	.word	0x01760176
   10f54:	025c0176 	.word	0x025c0176
   10f58:	01760084 	.word	0x01760084
   10f5c:	01760176 	.word	0x01760176
   10f60:	01760176 	.word	0x01760176
   10f64:	01760176 	.word	0x01760176
   10f68:	01760176 	.word	0x01760176
   10f6c:	00e80176 	.word	0x00e80176
   10f70:	01760176 	.word	0x01760176
   10f74:	02330176 	.word	0x02330176
   10f78:	02da0176 	.word	0x02da0176
   10f7c:	01760176 	.word	0x01760176
   10f80:	0176058b 	.word	0x0176058b
   10f84:	01760176 	.word	0x01760176
   10f88:	01760176 	.word	0x01760176
   10f8c:	01760176 	.word	0x01760176
   10f90:	01760176 	.word	0x01760176
   10f94:	025c0176 	.word	0x025c0176
   10f98:	01760086 	.word	0x01760086
   10f9c:	01760176 	.word	0x01760176
   10fa0:	008602cd 	.word	0x008602cd
   10fa4:	0176007f 	.word	0x0176007f
   10fa8:	017602c0 	.word	0x017602c0
   10fac:	00ea02fd 	.word	0x00ea02fd
   10fb0:	007f02ed 	.word	0x007f02ed
   10fb4:	02330176 	.word	0x02330176
   10fb8:	0569007c 	.word	0x0569007c
   10fbc:	01760176 	.word	0x01760176
   10fc0:	0176056b 	.word	0x0176056b
   10fc4:	007c      	.short	0x007c
   10fc6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10fca:	2200      	movs	r2, #0
   10fcc:	f818 1b01 	ldrb.w	r1, [r8], #1
   10fd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   10fd4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10fd8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10fdc:	2b09      	cmp	r3, #9
   10fde:	d9f5      	bls.n	10fcc <_vfiprintf_r+0x1b4>
   10fe0:	9206      	str	r2, [sp, #24]
   10fe2:	e78e      	b.n	10f02 <_vfiprintf_r+0xea>
   10fe4:	4658      	mov	r0, fp
   10fe6:	f7fe fe1b 	bl	fc20 <_localeconv_r>
   10fea:	6843      	ldr	r3, [r0, #4]
   10fec:	930d      	str	r3, [sp, #52]	; 0x34
   10fee:	4618      	mov	r0, r3
   10ff0:	f7fc f966 	bl	d2c0 <strlen>
   10ff4:	900e      	str	r0, [sp, #56]	; 0x38
   10ff6:	4605      	mov	r5, r0
   10ff8:	4658      	mov	r0, fp
   10ffa:	f7fe fe11 	bl	fc20 <_localeconv_r>
   10ffe:	6883      	ldr	r3, [r0, #8]
   11000:	930b      	str	r3, [sp, #44]	; 0x2c
   11002:	2d00      	cmp	r5, #0
   11004:	f040 84d6 	bne.w	119b4 <_vfiprintf_r+0xb9c>
   11008:	f898 1000 	ldrb.w	r1, [r8]
   1100c:	e777      	b.n	10efe <_vfiprintf_r+0xe6>
   1100e:	f898 1000 	ldrb.w	r1, [r8]
   11012:	f046 0620 	orr.w	r6, r6, #32
   11016:	e772      	b.n	10efe <_vfiprintf_r+0xe6>
   11018:	f046 0610 	orr.w	r6, r6, #16
   1101c:	06b4      	lsls	r4, r6, #26
   1101e:	f140 818e 	bpl.w	1133e <_vfiprintf_r+0x526>
   11022:	9b07      	ldr	r3, [sp, #28]
   11024:	3307      	adds	r3, #7
   11026:	f023 0307 	bic.w	r3, r3, #7
   1102a:	461a      	mov	r2, r3
   1102c:	6859      	ldr	r1, [r3, #4]
   1102e:	f852 3b08 	ldr.w	r3, [r2], #8
   11032:	9207      	str	r2, [sp, #28]
   11034:	460a      	mov	r2, r1
   11036:	2900      	cmp	r1, #0
   11038:	f2c0 8470 	blt.w	1191c <_vfiprintf_r+0xb04>
   1103c:	1c79      	adds	r1, r7, #1
   1103e:	f000 85a2 	beq.w	11b86 <_vfiprintf_r+0xd6e>
   11042:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   11046:	9103      	str	r1, [sp, #12]
   11048:	ea53 0102 	orrs.w	r1, r3, r2
   1104c:	f000 843f 	beq.w	118ce <_vfiprintf_r+0xab6>
   11050:	2b0a      	cmp	r3, #10
   11052:	f172 0100 	sbcs.w	r1, r2, #0
   11056:	f080 8541 	bcs.w	11adc <_vfiprintf_r+0xcc4>
   1105a:	3330      	adds	r3, #48	; 0x30
   1105c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   11060:	9e03      	ldr	r6, [sp, #12]
   11062:	2301      	movs	r3, #1
   11064:	9304      	str	r3, [sp, #16]
   11066:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1106a:	9b04      	ldr	r3, [sp, #16]
   1106c:	42bb      	cmp	r3, r7
   1106e:	bfb8      	it	lt
   11070:	463b      	movlt	r3, r7
   11072:	9303      	str	r3, [sp, #12]
   11074:	2300      	movs	r3, #0
   11076:	9308      	str	r3, [sp, #32]
   11078:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1107c:	2b00      	cmp	r3, #0
   1107e:	f000 80cb 	beq.w	11218 <_vfiprintf_r+0x400>
   11082:	9b03      	ldr	r3, [sp, #12]
   11084:	3301      	adds	r3, #1
   11086:	9303      	str	r3, [sp, #12]
   11088:	e0c6      	b.n	11218 <_vfiprintf_r+0x400>
   1108a:	ee18 1a10 	vmov	r1, s16
   1108e:	4658      	mov	r0, fp
   11090:	ee18 5a10 	vmov	r5, s16
   11094:	f001 f840 	bl	12118 <__swsetup_r>
   11098:	2800      	cmp	r0, #0
   1109a:	f040 8652 	bne.w	11d42 <_vfiprintf_r+0xf2a>
   1109e:	89aa      	ldrh	r2, [r5, #12]
   110a0:	f002 031a 	and.w	r3, r2, #26
   110a4:	2b0a      	cmp	r3, #10
   110a6:	f47f aef6 	bne.w	10e96 <_vfiprintf_r+0x7e>
   110aa:	ee18 1a10 	vmov	r1, s16
   110ae:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   110b2:	2b00      	cmp	r3, #0
   110b4:	f6ff aeef 	blt.w	10e96 <_vfiprintf_r+0x7e>
   110b8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   110ba:	07db      	lsls	r3, r3, #31
   110bc:	d402      	bmi.n	110c4 <_vfiprintf_r+0x2ac>
   110be:	0597      	lsls	r7, r2, #22
   110c0:	f140 8612 	bpl.w	11ce8 <_vfiprintf_r+0xed0>
   110c4:	ee18 1a10 	vmov	r1, s16
   110c8:	4623      	mov	r3, r4
   110ca:	4632      	mov	r2, r6
   110cc:	4658      	mov	r0, fp
   110ce:	f000 fe69 	bl	11da4 <__sbprintf>
   110d2:	9005      	str	r0, [sp, #20]
   110d4:	9805      	ldr	r0, [sp, #20]
   110d6:	b045      	add	sp, #276	; 0x114
   110d8:	ecbd 8b02 	vpop	{d8}
   110dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110e0:	f046 0610 	orr.w	r6, r6, #16
   110e4:	f016 0220 	ands.w	r2, r6, #32
   110e8:	f000 8136 	beq.w	11358 <_vfiprintf_r+0x540>
   110ec:	9b07      	ldr	r3, [sp, #28]
   110ee:	3307      	adds	r3, #7
   110f0:	f023 0307 	bic.w	r3, r3, #7
   110f4:	4619      	mov	r1, r3
   110f6:	685a      	ldr	r2, [r3, #4]
   110f8:	f851 3b08 	ldr.w	r3, [r1], #8
   110fc:	9107      	str	r1, [sp, #28]
   110fe:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   11102:	9103      	str	r1, [sp, #12]
   11104:	2100      	movs	r1, #0
   11106:	2000      	movs	r0, #0
   11108:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1110c:	1c78      	adds	r0, r7, #1
   1110e:	f000 8210 	beq.w	11532 <_vfiprintf_r+0x71a>
   11112:	9803      	ldr	r0, [sp, #12]
   11114:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   11118:	ea53 0002 	orrs.w	r0, r3, r2
   1111c:	f040 8208 	bne.w	11530 <_vfiprintf_r+0x718>
   11120:	2f00      	cmp	r7, #0
   11122:	f040 8538 	bne.w	11b96 <_vfiprintf_r+0xd7e>
   11126:	2900      	cmp	r1, #0
   11128:	f040 83d5 	bne.w	118d6 <_vfiprintf_r+0xabe>
   1112c:	9b03      	ldr	r3, [sp, #12]
   1112e:	f013 0301 	ands.w	r3, r3, #1
   11132:	9304      	str	r3, [sp, #16]
   11134:	f000 8411 	beq.w	1195a <_vfiprintf_r+0xb42>
   11138:	2330      	movs	r3, #48	; 0x30
   1113a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   1113e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   11142:	e792      	b.n	1106a <_vfiprintf_r+0x252>
   11144:	2208      	movs	r2, #8
   11146:	2100      	movs	r1, #0
   11148:	4650      	mov	r0, sl
   1114a:	f7fb fd51 	bl	cbf0 <memset>
   1114e:	2301      	movs	r3, #1
   11150:	441c      	add	r4, r3
   11152:	e6ad      	b.n	10eb0 <_vfiprintf_r+0x98>
   11154:	20004374 	.word	0x20004374
   11158:	ebb4 0608 	subs.w	r6, r4, r8
   1115c:	4605      	mov	r5, r0
   1115e:	d01b      	beq.n	11198 <_vfiprintf_r+0x380>
   11160:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11162:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11164:	3301      	adds	r3, #1
   11166:	4432      	add	r2, r6
   11168:	2b07      	cmp	r3, #7
   1116a:	e9c9 8600 	strd	r8, r6, [r9]
   1116e:	921a      	str	r2, [sp, #104]	; 0x68
   11170:	9319      	str	r3, [sp, #100]	; 0x64
   11172:	dd1c      	ble.n	111ae <_vfiprintf_r+0x396>
   11174:	2a00      	cmp	r2, #0
   11176:	f000 83a6 	beq.w	118c6 <_vfiprintf_r+0xaae>
   1117a:	ee18 1a10 	vmov	r1, s16
   1117e:	aa18      	add	r2, sp, #96	; 0x60
   11180:	4658      	mov	r0, fp
   11182:	f7ff fe0d 	bl	10da0 <__sprint_r.part.0>
   11186:	bb20      	cbnz	r0, 111d2 <_vfiprintf_r+0x3ba>
   11188:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1118c:	9b05      	ldr	r3, [sp, #20]
   1118e:	4433      	add	r3, r6
   11190:	9305      	str	r3, [sp, #20]
   11192:	2d00      	cmp	r5, #0
   11194:	f47f aea8 	bne.w	10ee8 <_vfiprintf_r+0xd0>
   11198:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1119a:	2b00      	cmp	r3, #0
   1119c:	f040 85c1 	bne.w	11d22 <_vfiprintf_r+0xf0a>
   111a0:	ee18 3a10 	vmov	r3, s16
   111a4:	2200      	movs	r2, #0
   111a6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   111aa:	9219      	str	r2, [sp, #100]	; 0x64
   111ac:	e015      	b.n	111da <_vfiprintf_r+0x3c2>
   111ae:	f109 0908 	add.w	r9, r9, #8
   111b2:	e7eb      	b.n	1118c <_vfiprintf_r+0x374>
   111b4:	ee18 1a10 	vmov	r1, s16
   111b8:	aa18      	add	r2, sp, #96	; 0x60
   111ba:	4658      	mov	r0, fp
   111bc:	f7ff fdf0 	bl	10da0 <__sprint_r.part.0>
   111c0:	2800      	cmp	r0, #0
   111c2:	f000 80a6 	beq.w	11312 <_vfiprintf_r+0x4fa>
   111c6:	9b08      	ldr	r3, [sp, #32]
   111c8:	b11b      	cbz	r3, 111d2 <_vfiprintf_r+0x3ba>
   111ca:	9908      	ldr	r1, [sp, #32]
   111cc:	4658      	mov	r0, fp
   111ce:	f7fc f979 	bl	d4c4 <_free_r>
   111d2:	ee18 3a10 	vmov	r3, s16
   111d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   111da:	ee18 2a10 	vmov	r2, s16
   111de:	6e52      	ldr	r2, [r2, #100]	; 0x64
   111e0:	f012 0f01 	tst.w	r2, #1
   111e4:	b29a      	uxth	r2, r3
   111e6:	f000 80a0 	beq.w	1132a <_vfiprintf_r+0x512>
   111ea:	0650      	lsls	r0, r2, #25
   111ec:	f100 85b2 	bmi.w	11d54 <_vfiprintf_r+0xf3c>
   111f0:	9805      	ldr	r0, [sp, #20]
   111f2:	b045      	add	sp, #276	; 0x114
   111f4:	ecbd 8b02 	vpop	{d8}
   111f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111fc:	2900      	cmp	r1, #0
   111fe:	d0cb      	beq.n	11198 <_vfiprintf_r+0x380>
   11200:	2300      	movs	r3, #0
   11202:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11206:	2301      	movs	r3, #1
   11208:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1120c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   11210:	ac2b      	add	r4, sp, #172	; 0xac
   11212:	2300      	movs	r3, #0
   11214:	9308      	str	r3, [sp, #32]
   11216:	461f      	mov	r7, r3
   11218:	f016 0302 	ands.w	r3, r6, #2
   1121c:	9309      	str	r3, [sp, #36]	; 0x24
   1121e:	d002      	beq.n	11226 <_vfiprintf_r+0x40e>
   11220:	9b03      	ldr	r3, [sp, #12]
   11222:	3302      	adds	r3, #2
   11224:	9303      	str	r3, [sp, #12]
   11226:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   1122a:	930a      	str	r3, [sp, #40]	; 0x28
   1122c:	d105      	bne.n	1123a <_vfiprintf_r+0x422>
   1122e:	9b06      	ldr	r3, [sp, #24]
   11230:	9a03      	ldr	r2, [sp, #12]
   11232:	1a9d      	subs	r5, r3, r2
   11234:	2d00      	cmp	r5, #0
   11236:	f300 827b 	bgt.w	11730 <_vfiprintf_r+0x918>
   1123a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1123e:	1c41      	adds	r1, r0, #1
   11240:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11244:	b182      	cbz	r2, 11268 <_vfiprintf_r+0x450>
   11246:	2201      	movs	r2, #1
   11248:	3301      	adds	r3, #1
   1124a:	f8c9 2004 	str.w	r2, [r9, #4]
   1124e:	2907      	cmp	r1, #7
   11250:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   11254:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11258:	f8c9 2000 	str.w	r2, [r9]
   1125c:	f300 824a 	bgt.w	116f4 <_vfiprintf_r+0x8dc>
   11260:	4608      	mov	r0, r1
   11262:	f109 0908 	add.w	r9, r9, #8
   11266:	3101      	adds	r1, #1
   11268:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1126a:	b1e2      	cbz	r2, 112a6 <_vfiprintf_r+0x48e>
   1126c:	aa11      	add	r2, sp, #68	; 0x44
   1126e:	3302      	adds	r3, #2
   11270:	f8c9 2000 	str.w	r2, [r9]
   11274:	2907      	cmp	r1, #7
   11276:	f04f 0202 	mov.w	r2, #2
   1127a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1127e:	f8c9 2004 	str.w	r2, [r9, #4]
   11282:	f340 8250 	ble.w	11726 <_vfiprintf_r+0x90e>
   11286:	2b00      	cmp	r3, #0
   11288:	f000 8343 	beq.w	11912 <_vfiprintf_r+0xafa>
   1128c:	ee18 1a10 	vmov	r1, s16
   11290:	aa18      	add	r2, sp, #96	; 0x60
   11292:	4658      	mov	r0, fp
   11294:	f7ff fd84 	bl	10da0 <__sprint_r.part.0>
   11298:	2800      	cmp	r0, #0
   1129a:	d194      	bne.n	111c6 <_vfiprintf_r+0x3ae>
   1129c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   112a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   112a4:	1c41      	adds	r1, r0, #1
   112a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   112a8:	2a80      	cmp	r2, #128	; 0x80
   112aa:	f000 8184 	beq.w	115b6 <_vfiprintf_r+0x79e>
   112ae:	9a04      	ldr	r2, [sp, #16]
   112b0:	1abd      	subs	r5, r7, r2
   112b2:	2d00      	cmp	r5, #0
   112b4:	f300 81d7 	bgt.w	11666 <_vfiprintf_r+0x84e>
   112b8:	9a04      	ldr	r2, [sp, #16]
   112ba:	f8c9 4000 	str.w	r4, [r9]
   112be:	4413      	add	r3, r2
   112c0:	2907      	cmp	r1, #7
   112c2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   112c6:	f8c9 2004 	str.w	r2, [r9, #4]
   112ca:	f340 816e 	ble.w	115aa <_vfiprintf_r+0x792>
   112ce:	2b00      	cmp	r3, #0
   112d0:	f000 8275 	beq.w	117be <_vfiprintf_r+0x9a6>
   112d4:	ee18 1a10 	vmov	r1, s16
   112d8:	aa18      	add	r2, sp, #96	; 0x60
   112da:	4658      	mov	r0, fp
   112dc:	f7ff fd60 	bl	10da0 <__sprint_r.part.0>
   112e0:	2800      	cmp	r0, #0
   112e2:	f47f af70 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   112e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   112e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   112ec:	0775      	lsls	r5, r6, #29
   112ee:	d505      	bpl.n	112fc <_vfiprintf_r+0x4e4>
   112f0:	9a06      	ldr	r2, [sp, #24]
   112f2:	9903      	ldr	r1, [sp, #12]
   112f4:	1a54      	subs	r4, r2, r1
   112f6:	2c00      	cmp	r4, #0
   112f8:	f300 826b 	bgt.w	117d2 <_vfiprintf_r+0x9ba>
   112fc:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   11300:	9803      	ldr	r0, [sp, #12]
   11302:	4281      	cmp	r1, r0
   11304:	bfac      	ite	ge
   11306:	1852      	addge	r2, r2, r1
   11308:	1812      	addlt	r2, r2, r0
   1130a:	9205      	str	r2, [sp, #20]
   1130c:	2b00      	cmp	r3, #0
   1130e:	f47f af51 	bne.w	111b4 <_vfiprintf_r+0x39c>
   11312:	9908      	ldr	r1, [sp, #32]
   11314:	2300      	movs	r3, #0
   11316:	9319      	str	r3, [sp, #100]	; 0x64
   11318:	2900      	cmp	r1, #0
   1131a:	f000 8149 	beq.w	115b0 <_vfiprintf_r+0x798>
   1131e:	4658      	mov	r0, fp
   11320:	f7fc f8d0 	bl	d4c4 <_free_r>
   11324:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11328:	e5c1      	b.n	10eae <_vfiprintf_r+0x96>
   1132a:	059c      	lsls	r4, r3, #22
   1132c:	f53f af5d 	bmi.w	111ea <_vfiprintf_r+0x3d2>
   11330:	ee18 4a10 	vmov	r4, s16
   11334:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11336:	f7fb fde1 	bl	cefc <__retarget_lock_release_recursive>
   1133a:	89a2      	ldrh	r2, [r4, #12]
   1133c:	e755      	b.n	111ea <_vfiprintf_r+0x3d2>
   1133e:	06f0      	lsls	r0, r6, #27
   11340:	9a07      	ldr	r2, [sp, #28]
   11342:	f100 831f 	bmi.w	11984 <_vfiprintf_r+0xb6c>
   11346:	0671      	lsls	r1, r6, #25
   11348:	f140 8319 	bpl.w	1197e <_vfiprintf_r+0xb66>
   1134c:	f932 3b04 	ldrsh.w	r3, [r2], #4
   11350:	9207      	str	r2, [sp, #28]
   11352:	17da      	asrs	r2, r3, #31
   11354:	4611      	mov	r1, r2
   11356:	e66e      	b.n	11036 <_vfiprintf_r+0x21e>
   11358:	f016 0310 	ands.w	r3, r6, #16
   1135c:	9907      	ldr	r1, [sp, #28]
   1135e:	f040 8309 	bne.w	11974 <_vfiprintf_r+0xb5c>
   11362:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   11366:	f000 8301 	beq.w	1196c <_vfiprintf_r+0xb54>
   1136a:	461a      	mov	r2, r3
   1136c:	f851 3b04 	ldr.w	r3, [r1], #4
   11370:	9107      	str	r1, [sp, #28]
   11372:	b29b      	uxth	r3, r3
   11374:	e6c3      	b.n	110fe <_vfiprintf_r+0x2e6>
   11376:	9b07      	ldr	r3, [sp, #28]
   11378:	461a      	mov	r2, r3
   1137a:	2300      	movs	r3, #0
   1137c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11380:	4613      	mov	r3, r2
   11382:	f853 4b04 	ldr.w	r4, [r3], #4
   11386:	9303      	str	r3, [sp, #12]
   11388:	2c00      	cmp	r4, #0
   1138a:	f000 8412 	beq.w	11bb2 <_vfiprintf_r+0xd9a>
   1138e:	2953      	cmp	r1, #83	; 0x53
   11390:	f000 8365 	beq.w	11a5e <_vfiprintf_r+0xc46>
   11394:	f016 0510 	ands.w	r5, r6, #16
   11398:	f040 8361 	bne.w	11a5e <_vfiprintf_r+0xc46>
   1139c:	1c7b      	adds	r3, r7, #1
   1139e:	f000 84b3 	beq.w	11d08 <_vfiprintf_r+0xef0>
   113a2:	463a      	mov	r2, r7
   113a4:	4629      	mov	r1, r5
   113a6:	4620      	mov	r0, r4
   113a8:	f7fe fc42 	bl	fc30 <memchr>
   113ac:	9008      	str	r0, [sp, #32]
   113ae:	2800      	cmp	r0, #0
   113b0:	f000 849f 	beq.w	11cf2 <_vfiprintf_r+0xeda>
   113b4:	1b03      	subs	r3, r0, r4
   113b6:	9a03      	ldr	r2, [sp, #12]
   113b8:	9304      	str	r3, [sp, #16]
   113ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   113be:	462f      	mov	r7, r5
   113c0:	9207      	str	r2, [sp, #28]
   113c2:	9303      	str	r3, [sp, #12]
   113c4:	9508      	str	r5, [sp, #32]
   113c6:	e657      	b.n	11078 <_vfiprintf_r+0x260>
   113c8:	2943      	cmp	r1, #67	; 0x43
   113ca:	d002      	beq.n	113d2 <_vfiprintf_r+0x5ba>
   113cc:	06f5      	lsls	r5, r6, #27
   113ce:	f140 832d 	bpl.w	11a2c <_vfiprintf_r+0xc14>
   113d2:	9d07      	ldr	r5, [sp, #28]
   113d4:	2208      	movs	r2, #8
   113d6:	2100      	movs	r1, #0
   113d8:	a816      	add	r0, sp, #88	; 0x58
   113da:	ac2b      	add	r4, sp, #172	; 0xac
   113dc:	f7fb fc08 	bl	cbf0 <memset>
   113e0:	ab16      	add	r3, sp, #88	; 0x58
   113e2:	f855 2b04 	ldr.w	r2, [r5], #4
   113e6:	4621      	mov	r1, r4
   113e8:	4658      	mov	r0, fp
   113ea:	f7ff fc13 	bl	10c14 <_wcrtomb_r>
   113ee:	4603      	mov	r3, r0
   113f0:	3301      	adds	r3, #1
   113f2:	9004      	str	r0, [sp, #16]
   113f4:	f000 84b3 	beq.w	11d5e <_vfiprintf_r+0xf46>
   113f8:	9b04      	ldr	r3, [sp, #16]
   113fa:	9507      	str	r5, [sp, #28]
   113fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11400:	9303      	str	r3, [sp, #12]
   11402:	2300      	movs	r3, #0
   11404:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11408:	e703      	b.n	11212 <_vfiprintf_r+0x3fa>
   1140a:	9b07      	ldr	r3, [sp, #28]
   1140c:	f853 2b04 	ldr.w	r2, [r3], #4
   11410:	9206      	str	r2, [sp, #24]
   11412:	2a00      	cmp	r2, #0
   11414:	f280 829c 	bge.w	11950 <_vfiprintf_r+0xb38>
   11418:	9a06      	ldr	r2, [sp, #24]
   1141a:	4252      	negs	r2, r2
   1141c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11420:	f898 1000 	ldrb.w	r1, [r8]
   11424:	f046 0604 	orr.w	r6, r6, #4
   11428:	e569      	b.n	10efe <_vfiprintf_r+0xe6>
   1142a:	f898 1000 	ldrb.w	r1, [r8]
   1142e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   11432:	e564      	b.n	10efe <_vfiprintf_r+0xe6>
   11434:	f898 1000 	ldrb.w	r1, [r8]
   11438:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   1143c:	e55f      	b.n	10efe <_vfiprintf_r+0xe6>
   1143e:	4642      	mov	r2, r8
   11440:	f812 1b01 	ldrb.w	r1, [r2], #1
   11444:	292a      	cmp	r1, #42	; 0x2a
   11446:	f000 8496 	beq.w	11d76 <_vfiprintf_r+0xf5e>
   1144a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1144e:	2b09      	cmp	r3, #9
   11450:	4690      	mov	r8, r2
   11452:	f04f 0700 	mov.w	r7, #0
   11456:	f63f ad54 	bhi.w	10f02 <_vfiprintf_r+0xea>
   1145a:	f818 1b01 	ldrb.w	r1, [r8], #1
   1145e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   11462:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   11466:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1146a:	2b09      	cmp	r3, #9
   1146c:	d9f5      	bls.n	1145a <_vfiprintf_r+0x642>
   1146e:	e548      	b.n	10f02 <_vfiprintf_r+0xea>
   11470:	f898 1000 	ldrb.w	r1, [r8]
   11474:	f046 0601 	orr.w	r6, r6, #1
   11478:	e541      	b.n	10efe <_vfiprintf_r+0xe6>
   1147a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1147e:	2b00      	cmp	r3, #0
   11480:	f47f adc2 	bne.w	11008 <_vfiprintf_r+0x1f0>
   11484:	2320      	movs	r3, #32
   11486:	f898 1000 	ldrb.w	r1, [r8]
   1148a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1148e:	e536      	b.n	10efe <_vfiprintf_r+0xe6>
   11490:	f898 1000 	ldrb.w	r1, [r8]
   11494:	296c      	cmp	r1, #108	; 0x6c
   11496:	bf03      	ittte	eq
   11498:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1149c:	f046 0620 	orreq.w	r6, r6, #32
   114a0:	f108 0801 	addeq.w	r8, r8, #1
   114a4:	f046 0610 	orrne.w	r6, r6, #16
   114a8:	e529      	b.n	10efe <_vfiprintf_r+0xe6>
   114aa:	f898 1000 	ldrb.w	r1, [r8]
   114ae:	2968      	cmp	r1, #104	; 0x68
   114b0:	bf03      	ittte	eq
   114b2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   114b6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   114ba:	f108 0801 	addeq.w	r8, r8, #1
   114be:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   114c2:	e51c      	b.n	10efe <_vfiprintf_r+0xe6>
   114c4:	f046 0310 	orr.w	r3, r6, #16
   114c8:	9303      	str	r3, [sp, #12]
   114ca:	9b03      	ldr	r3, [sp, #12]
   114cc:	f013 0220 	ands.w	r2, r3, #32
   114d0:	f000 8206 	beq.w	118e0 <_vfiprintf_r+0xac8>
   114d4:	9b07      	ldr	r3, [sp, #28]
   114d6:	3307      	adds	r3, #7
   114d8:	f023 0307 	bic.w	r3, r3, #7
   114dc:	4619      	mov	r1, r3
   114de:	685a      	ldr	r2, [r3, #4]
   114e0:	f851 3b08 	ldr.w	r3, [r1], #8
   114e4:	9107      	str	r1, [sp, #28]
   114e6:	2101      	movs	r1, #1
   114e8:	e60d      	b.n	11106 <_vfiprintf_r+0x2ee>
   114ea:	9a07      	ldr	r2, [sp, #28]
   114ec:	f046 0302 	orr.w	r3, r6, #2
   114f0:	9303      	str	r3, [sp, #12]
   114f2:	f852 3b04 	ldr.w	r3, [r2], #4
   114f6:	9207      	str	r2, [sp, #28]
   114f8:	f647 0230 	movw	r2, #30768	; 0x7830
   114fc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   11500:	4ab8      	ldr	r2, [pc, #736]	; (117e4 <_vfiprintf_r+0x9cc>)
   11502:	920c      	str	r2, [sp, #48]	; 0x30
   11504:	2102      	movs	r1, #2
   11506:	2200      	movs	r2, #0
   11508:	e5fd      	b.n	11106 <_vfiprintf_r+0x2ee>
   1150a:	06b7      	lsls	r7, r6, #26
   1150c:	f100 8248 	bmi.w	119a0 <_vfiprintf_r+0xb88>
   11510:	06f5      	lsls	r5, r6, #27
   11512:	f100 8346 	bmi.w	11ba2 <_vfiprintf_r+0xd8a>
   11516:	0674      	lsls	r4, r6, #25
   11518:	f100 83d5 	bmi.w	11cc6 <_vfiprintf_r+0xeae>
   1151c:	05b0      	lsls	r0, r6, #22
   1151e:	f140 8340 	bpl.w	11ba2 <_vfiprintf_r+0xd8a>
   11522:	9b07      	ldr	r3, [sp, #28]
   11524:	9905      	ldr	r1, [sp, #20]
   11526:	f853 2b04 	ldr.w	r2, [r3], #4
   1152a:	9307      	str	r3, [sp, #28]
   1152c:	7011      	strb	r1, [r2, #0]
   1152e:	e4be      	b.n	10eae <_vfiprintf_r+0x96>
   11530:	9603      	str	r6, [sp, #12]
   11532:	2901      	cmp	r1, #1
   11534:	f43f ad8c 	beq.w	11050 <_vfiprintf_r+0x238>
   11538:	2902      	cmp	r1, #2
   1153a:	ac44      	add	r4, sp, #272	; 0x110
   1153c:	d111      	bne.n	11562 <_vfiprintf_r+0x74a>
   1153e:	980c      	ldr	r0, [sp, #48]	; 0x30
   11540:	f003 010f 	and.w	r1, r3, #15
   11544:	091b      	lsrs	r3, r3, #4
   11546:	5c41      	ldrb	r1, [r0, r1]
   11548:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1154c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   11550:	0912      	lsrs	r2, r2, #4
   11552:	ea53 0102 	orrs.w	r1, r3, r2
   11556:	d1f3      	bne.n	11540 <_vfiprintf_r+0x728>
   11558:	9e03      	ldr	r6, [sp, #12]
   1155a:	ab44      	add	r3, sp, #272	; 0x110
   1155c:	1b1b      	subs	r3, r3, r4
   1155e:	9304      	str	r3, [sp, #16]
   11560:	e583      	b.n	1106a <_vfiprintf_r+0x252>
   11562:	f003 0107 	and.w	r1, r3, #7
   11566:	08db      	lsrs	r3, r3, #3
   11568:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   1156c:	08d2      	lsrs	r2, r2, #3
   1156e:	3130      	adds	r1, #48	; 0x30
   11570:	ea53 0502 	orrs.w	r5, r3, r2
   11574:	4620      	mov	r0, r4
   11576:	f804 1d01 	strb.w	r1, [r4, #-1]!
   1157a:	d1f2      	bne.n	11562 <_vfiprintf_r+0x74a>
   1157c:	9e03      	ldr	r6, [sp, #12]
   1157e:	07f3      	lsls	r3, r6, #31
   11580:	d5eb      	bpl.n	1155a <_vfiprintf_r+0x742>
   11582:	2930      	cmp	r1, #48	; 0x30
   11584:	d0e8      	beq.n	11558 <_vfiprintf_r+0x740>
   11586:	2330      	movs	r3, #48	; 0x30
   11588:	3802      	subs	r0, #2
   1158a:	f804 3c01 	strb.w	r3, [r4, #-1]
   1158e:	ab44      	add	r3, sp, #272	; 0x110
   11590:	1a1b      	subs	r3, r3, r0
   11592:	9e03      	ldr	r6, [sp, #12]
   11594:	9304      	str	r3, [sp, #16]
   11596:	4604      	mov	r4, r0
   11598:	e567      	b.n	1106a <_vfiprintf_r+0x252>
   1159a:	9b04      	ldr	r3, [sp, #16]
   1159c:	941b      	str	r4, [sp, #108]	; 0x6c
   1159e:	2201      	movs	r2, #1
   115a0:	931c      	str	r3, [sp, #112]	; 0x70
   115a2:	931a      	str	r3, [sp, #104]	; 0x68
   115a4:	9219      	str	r2, [sp, #100]	; 0x64
   115a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   115aa:	f109 0908 	add.w	r9, r9, #8
   115ae:	e69d      	b.n	112ec <_vfiprintf_r+0x4d4>
   115b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   115b4:	e47b      	b.n	10eae <_vfiprintf_r+0x96>
   115b6:	9a06      	ldr	r2, [sp, #24]
   115b8:	9d03      	ldr	r5, [sp, #12]
   115ba:	1b55      	subs	r5, r2, r5
   115bc:	2d00      	cmp	r5, #0
   115be:	f77f ae76 	ble.w	112ae <_vfiprintf_r+0x496>
   115c2:	2d10      	cmp	r5, #16
   115c4:	f340 83bb 	ble.w	11d3e <_vfiprintf_r+0xf26>
   115c8:	9409      	str	r4, [sp, #36]	; 0x24
   115ca:	ee18 4a10 	vmov	r4, s16
   115ce:	e007      	b.n	115e0 <_vfiprintf_r+0x7c8>
   115d0:	f100 0c02 	add.w	ip, r0, #2
   115d4:	f109 0908 	add.w	r9, r9, #8
   115d8:	4610      	mov	r0, r2
   115da:	3d10      	subs	r5, #16
   115dc:	2d10      	cmp	r5, #16
   115de:	dd1e      	ble.n	1161e <_vfiprintf_r+0x806>
   115e0:	4981      	ldr	r1, [pc, #516]	; (117e8 <_vfiprintf_r+0x9d0>)
   115e2:	f8c9 1000 	str.w	r1, [r9]
   115e6:	1c42      	adds	r2, r0, #1
   115e8:	3310      	adds	r3, #16
   115ea:	2110      	movs	r1, #16
   115ec:	2a07      	cmp	r2, #7
   115ee:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   115f2:	f8c9 1004 	str.w	r1, [r9, #4]
   115f6:	ddeb      	ble.n	115d0 <_vfiprintf_r+0x7b8>
   115f8:	aa18      	add	r2, sp, #96	; 0x60
   115fa:	2b00      	cmp	r3, #0
   115fc:	d074      	beq.n	116e8 <_vfiprintf_r+0x8d0>
   115fe:	4621      	mov	r1, r4
   11600:	4658      	mov	r0, fp
   11602:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11606:	f7ff fbcb 	bl	10da0 <__sprint_r.part.0>
   1160a:	2800      	cmp	r0, #0
   1160c:	f47f addb 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   11610:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11614:	3d10      	subs	r5, #16
   11616:	2d10      	cmp	r5, #16
   11618:	f100 0c01 	add.w	ip, r0, #1
   1161c:	dce0      	bgt.n	115e0 <_vfiprintf_r+0x7c8>
   1161e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11620:	4a71      	ldr	r2, [pc, #452]	; (117e8 <_vfiprintf_r+0x9d0>)
   11622:	f8c9 5004 	str.w	r5, [r9, #4]
   11626:	442b      	add	r3, r5
   11628:	f1bc 0f07 	cmp.w	ip, #7
   1162c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   11630:	f8c9 2000 	str.w	r2, [r9]
   11634:	f340 8194 	ble.w	11960 <_vfiprintf_r+0xb48>
   11638:	2b00      	cmp	r3, #0
   1163a:	f000 831f 	beq.w	11c7c <_vfiprintf_r+0xe64>
   1163e:	ee18 1a10 	vmov	r1, s16
   11642:	aa18      	add	r2, sp, #96	; 0x60
   11644:	4658      	mov	r0, fp
   11646:	f7ff fbab 	bl	10da0 <__sprint_r.part.0>
   1164a:	2800      	cmp	r0, #0
   1164c:	f47f adbb 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   11650:	9a04      	ldr	r2, [sp, #16]
   11652:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11656:	1abd      	subs	r5, r7, r2
   11658:	2d00      	cmp	r5, #0
   1165a:	f100 0101 	add.w	r1, r0, #1
   1165e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11662:	f77f ae29 	ble.w	112b8 <_vfiprintf_r+0x4a0>
   11666:	2d10      	cmp	r5, #16
   11668:	dd29      	ble.n	116be <_vfiprintf_r+0x8a6>
   1166a:	9409      	str	r4, [sp, #36]	; 0x24
   1166c:	2710      	movs	r7, #16
   1166e:	ee18 4a10 	vmov	r4, s16
   11672:	e007      	b.n	11684 <_vfiprintf_r+0x86c>
   11674:	f100 0c02 	add.w	ip, r0, #2
   11678:	f109 0908 	add.w	r9, r9, #8
   1167c:	4610      	mov	r0, r2
   1167e:	3d10      	subs	r5, #16
   11680:	2d10      	cmp	r5, #16
   11682:	dd1a      	ble.n	116ba <_vfiprintf_r+0x8a2>
   11684:	1c42      	adds	r2, r0, #1
   11686:	4958      	ldr	r1, [pc, #352]	; (117e8 <_vfiprintf_r+0x9d0>)
   11688:	3310      	adds	r3, #16
   1168a:	2a07      	cmp	r2, #7
   1168c:	e9c9 1700 	strd	r1, r7, [r9]
   11690:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   11694:	ddee      	ble.n	11674 <_vfiprintf_r+0x85c>
   11696:	aa18      	add	r2, sp, #96	; 0x60
   11698:	b303      	cbz	r3, 116dc <_vfiprintf_r+0x8c4>
   1169a:	4621      	mov	r1, r4
   1169c:	4658      	mov	r0, fp
   1169e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116a2:	f7ff fb7d 	bl	10da0 <__sprint_r.part.0>
   116a6:	2800      	cmp	r0, #0
   116a8:	f47f ad8d 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   116ac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   116b0:	3d10      	subs	r5, #16
   116b2:	2d10      	cmp	r5, #16
   116b4:	f100 0c01 	add.w	ip, r0, #1
   116b8:	dce4      	bgt.n	11684 <_vfiprintf_r+0x86c>
   116ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
   116bc:	4661      	mov	r1, ip
   116be:	4a4a      	ldr	r2, [pc, #296]	; (117e8 <_vfiprintf_r+0x9d0>)
   116c0:	f8c9 5004 	str.w	r5, [r9, #4]
   116c4:	442b      	add	r3, r5
   116c6:	2907      	cmp	r1, #7
   116c8:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   116cc:	f8c9 2000 	str.w	r2, [r9]
   116d0:	f300 80e7 	bgt.w	118a2 <_vfiprintf_r+0xa8a>
   116d4:	f109 0908 	add.w	r9, r9, #8
   116d8:	3101      	adds	r1, #1
   116da:	e5ed      	b.n	112b8 <_vfiprintf_r+0x4a0>
   116dc:	f04f 0c01 	mov.w	ip, #1
   116e0:	4618      	mov	r0, r3
   116e2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116e6:	e7ca      	b.n	1167e <_vfiprintf_r+0x866>
   116e8:	f04f 0c01 	mov.w	ip, #1
   116ec:	4618      	mov	r0, r3
   116ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116f2:	e772      	b.n	115da <_vfiprintf_r+0x7c2>
   116f4:	2b00      	cmp	r3, #0
   116f6:	f000 8104 	beq.w	11902 <_vfiprintf_r+0xaea>
   116fa:	ee18 1a10 	vmov	r1, s16
   116fe:	aa18      	add	r2, sp, #96	; 0x60
   11700:	4658      	mov	r0, fp
   11702:	f7ff fb4d 	bl	10da0 <__sprint_r.part.0>
   11706:	2800      	cmp	r0, #0
   11708:	f47f ad5d 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   1170c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11710:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11714:	1c41      	adds	r1, r0, #1
   11716:	e5a7      	b.n	11268 <_vfiprintf_r+0x450>
   11718:	2302      	movs	r3, #2
   1171a:	aa11      	add	r2, sp, #68	; 0x44
   1171c:	931c      	str	r3, [sp, #112]	; 0x70
   1171e:	921b      	str	r2, [sp, #108]	; 0x6c
   11720:	2101      	movs	r1, #1
   11722:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11726:	4608      	mov	r0, r1
   11728:	f109 0908 	add.w	r9, r9, #8
   1172c:	1c41      	adds	r1, r0, #1
   1172e:	e5ba      	b.n	112a6 <_vfiprintf_r+0x48e>
   11730:	2d10      	cmp	r5, #16
   11732:	f340 82e5 	ble.w	11d00 <_vfiprintf_r+0xee8>
   11736:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1173a:	940f      	str	r4, [sp, #60]	; 0x3c
   1173c:	4608      	mov	r0, r1
   1173e:	ee18 4a10 	vmov	r4, s16
   11742:	e007      	b.n	11754 <_vfiprintf_r+0x93c>
   11744:	f100 0c02 	add.w	ip, r0, #2
   11748:	f109 0908 	add.w	r9, r9, #8
   1174c:	4610      	mov	r0, r2
   1174e:	3d10      	subs	r5, #16
   11750:	2d10      	cmp	r5, #16
   11752:	dd1d      	ble.n	11790 <_vfiprintf_r+0x978>
   11754:	4925      	ldr	r1, [pc, #148]	; (117ec <_vfiprintf_r+0x9d4>)
   11756:	f8c9 1000 	str.w	r1, [r9]
   1175a:	1c42      	adds	r2, r0, #1
   1175c:	3310      	adds	r3, #16
   1175e:	2110      	movs	r1, #16
   11760:	2a07      	cmp	r2, #7
   11762:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   11766:	f8c9 1004 	str.w	r1, [r9, #4]
   1176a:	ddeb      	ble.n	11744 <_vfiprintf_r+0x92c>
   1176c:	aa18      	add	r2, sp, #96	; 0x60
   1176e:	b303      	cbz	r3, 117b2 <_vfiprintf_r+0x99a>
   11770:	4621      	mov	r1, r4
   11772:	4658      	mov	r0, fp
   11774:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11778:	f7ff fb12 	bl	10da0 <__sprint_r.part.0>
   1177c:	2800      	cmp	r0, #0
   1177e:	f47f ad22 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   11782:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11786:	3d10      	subs	r5, #16
   11788:	2d10      	cmp	r5, #16
   1178a:	f100 0c01 	add.w	ip, r0, #1
   1178e:	dce1      	bgt.n	11754 <_vfiprintf_r+0x93c>
   11790:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   11792:	4660      	mov	r0, ip
   11794:	4a15      	ldr	r2, [pc, #84]	; (117ec <_vfiprintf_r+0x9d4>)
   11796:	f8c9 5004 	str.w	r5, [r9, #4]
   1179a:	442b      	add	r3, r5
   1179c:	2807      	cmp	r0, #7
   1179e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   117a2:	f8c9 2000 	str.w	r2, [r9]
   117a6:	f300 80c1 	bgt.w	1192c <_vfiprintf_r+0xb14>
   117aa:	f109 0908 	add.w	r9, r9, #8
   117ae:	1c41      	adds	r1, r0, #1
   117b0:	e546      	b.n	11240 <_vfiprintf_r+0x428>
   117b2:	4618      	mov	r0, r3
   117b4:	f04f 0c01 	mov.w	ip, #1
   117b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   117bc:	e7c7      	b.n	1174e <_vfiprintf_r+0x936>
   117be:	0776      	lsls	r6, r6, #29
   117c0:	9319      	str	r3, [sp, #100]	; 0x64
   117c2:	d553      	bpl.n	1186c <_vfiprintf_r+0xa54>
   117c4:	9a06      	ldr	r2, [sp, #24]
   117c6:	9903      	ldr	r1, [sp, #12]
   117c8:	1a54      	subs	r4, r2, r1
   117ca:	2c00      	cmp	r4, #0
   117cc:	dd4e      	ble.n	1186c <_vfiprintf_r+0xa54>
   117ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   117d2:	2c10      	cmp	r4, #16
   117d4:	f340 82b0 	ble.w	11d38 <_vfiprintf_r+0xf20>
   117d8:	9919      	ldr	r1, [sp, #100]	; 0x64
   117da:	ee18 6a10 	vmov	r6, s16
   117de:	2510      	movs	r5, #16
   117e0:	e00d      	b.n	117fe <_vfiprintf_r+0x9e6>
   117e2:	bf00      	nop
   117e4:	20000c94 	.word	0x20000c94
   117e8:	2000121c 	.word	0x2000121c
   117ec:	20000cd8 	.word	0x20000cd8
   117f0:	1c88      	adds	r0, r1, #2
   117f2:	f109 0908 	add.w	r9, r9, #8
   117f6:	4611      	mov	r1, r2
   117f8:	3c10      	subs	r4, #16
   117fa:	2c10      	cmp	r4, #16
   117fc:	dd1a      	ble.n	11834 <_vfiprintf_r+0xa1c>
   117fe:	1c4a      	adds	r2, r1, #1
   11800:	48b3      	ldr	r0, [pc, #716]	; (11ad0 <_vfiprintf_r+0xcb8>)
   11802:	3310      	adds	r3, #16
   11804:	2a07      	cmp	r2, #7
   11806:	e9c9 0500 	strd	r0, r5, [r9]
   1180a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1180e:	ddef      	ble.n	117f0 <_vfiprintf_r+0x9d8>
   11810:	aa18      	add	r2, sp, #96	; 0x60
   11812:	b333      	cbz	r3, 11862 <_vfiprintf_r+0xa4a>
   11814:	4631      	mov	r1, r6
   11816:	4658      	mov	r0, fp
   11818:	f7ff fac2 	bl	10da0 <__sprint_r.part.0>
   1181c:	2800      	cmp	r0, #0
   1181e:	f47f acd2 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   11822:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   11826:	3c10      	subs	r4, #16
   11828:	2c10      	cmp	r4, #16
   1182a:	f101 0001 	add.w	r0, r1, #1
   1182e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11832:	dce4      	bgt.n	117fe <_vfiprintf_r+0x9e6>
   11834:	4aa6      	ldr	r2, [pc, #664]	; (11ad0 <_vfiprintf_r+0xcb8>)
   11836:	f8c9 4004 	str.w	r4, [r9, #4]
   1183a:	4423      	add	r3, r4
   1183c:	2807      	cmp	r0, #7
   1183e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   11842:	f8c9 2000 	str.w	r2, [r9]
   11846:	f77f ad59 	ble.w	112fc <_vfiprintf_r+0x4e4>
   1184a:	b17b      	cbz	r3, 1186c <_vfiprintf_r+0xa54>
   1184c:	ee18 1a10 	vmov	r1, s16
   11850:	aa18      	add	r2, sp, #96	; 0x60
   11852:	4658      	mov	r0, fp
   11854:	f7ff faa4 	bl	10da0 <__sprint_r.part.0>
   11858:	2800      	cmp	r0, #0
   1185a:	f47f acb4 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   1185e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11860:	e54c      	b.n	112fc <_vfiprintf_r+0x4e4>
   11862:	2001      	movs	r0, #1
   11864:	4619      	mov	r1, r3
   11866:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1186a:	e7c5      	b.n	117f8 <_vfiprintf_r+0x9e0>
   1186c:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   11870:	9903      	ldr	r1, [sp, #12]
   11872:	428a      	cmp	r2, r1
   11874:	bfac      	ite	ge
   11876:	189b      	addge	r3, r3, r2
   11878:	185b      	addlt	r3, r3, r1
   1187a:	9305      	str	r3, [sp, #20]
   1187c:	e549      	b.n	11312 <_vfiprintf_r+0x4fa>
   1187e:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   11882:	058f      	lsls	r7, r1, #22
   11884:	ee18 3a10 	vmov	r3, s16
   11888:	b28a      	uxth	r2, r1
   1188a:	f53f aae8 	bmi.w	10e5e <_vfiprintf_r+0x46>
   1188e:	ee18 5a10 	vmov	r5, s16
   11892:	6d98      	ldr	r0, [r3, #88]	; 0x58
   11894:	f7fb fb30 	bl	cef8 <__retarget_lock_acquire_recursive>
   11898:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   1189c:	b28a      	uxth	r2, r1
   1189e:	f7ff bade 	b.w	10e5e <_vfiprintf_r+0x46>
   118a2:	2b00      	cmp	r3, #0
   118a4:	f43f ae79 	beq.w	1159a <_vfiprintf_r+0x782>
   118a8:	ee18 1a10 	vmov	r1, s16
   118ac:	aa18      	add	r2, sp, #96	; 0x60
   118ae:	4658      	mov	r0, fp
   118b0:	f7ff fa76 	bl	10da0 <__sprint_r.part.0>
   118b4:	2800      	cmp	r0, #0
   118b6:	f47f ac86 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   118ba:	9919      	ldr	r1, [sp, #100]	; 0x64
   118bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   118be:	3101      	adds	r1, #1
   118c0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   118c4:	e4f8      	b.n	112b8 <_vfiprintf_r+0x4a0>
   118c6:	9219      	str	r2, [sp, #100]	; 0x64
   118c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   118cc:	e45e      	b.n	1118c <_vfiprintf_r+0x374>
   118ce:	2f00      	cmp	r7, #0
   118d0:	f47f abc3 	bne.w	1105a <_vfiprintf_r+0x242>
   118d4:	9e03      	ldr	r6, [sp, #12]
   118d6:	2700      	movs	r7, #0
   118d8:	9704      	str	r7, [sp, #16]
   118da:	ac44      	add	r4, sp, #272	; 0x110
   118dc:	f7ff bbc5 	b.w	1106a <_vfiprintf_r+0x252>
   118e0:	9b03      	ldr	r3, [sp, #12]
   118e2:	f013 0310 	ands.w	r3, r3, #16
   118e6:	d154      	bne.n	11992 <_vfiprintf_r+0xb7a>
   118e8:	9a03      	ldr	r2, [sp, #12]
   118ea:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   118ee:	f000 816b 	beq.w	11bc8 <_vfiprintf_r+0xdb0>
   118f2:	9907      	ldr	r1, [sp, #28]
   118f4:	461a      	mov	r2, r3
   118f6:	f851 3b04 	ldr.w	r3, [r1], #4
   118fa:	9107      	str	r1, [sp, #28]
   118fc:	b29b      	uxth	r3, r3
   118fe:	2101      	movs	r1, #1
   11900:	e401      	b.n	11106 <_vfiprintf_r+0x2ee>
   11902:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11904:	2a00      	cmp	r2, #0
   11906:	d164      	bne.n	119d2 <_vfiprintf_r+0xbba>
   11908:	4618      	mov	r0, r3
   1190a:	2101      	movs	r1, #1
   1190c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11910:	e4c9      	b.n	112a6 <_vfiprintf_r+0x48e>
   11912:	2101      	movs	r1, #1
   11914:	4618      	mov	r0, r3
   11916:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1191a:	e4c4      	b.n	112a6 <_vfiprintf_r+0x48e>
   1191c:	425b      	negs	r3, r3
   1191e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   11922:	9603      	str	r6, [sp, #12]
   11924:	202d      	movs	r0, #45	; 0x2d
   11926:	2101      	movs	r1, #1
   11928:	f7ff bbee 	b.w	11108 <_vfiprintf_r+0x2f0>
   1192c:	2b00      	cmp	r3, #0
   1192e:	f000 8088 	beq.w	11a42 <_vfiprintf_r+0xc2a>
   11932:	ee18 1a10 	vmov	r1, s16
   11936:	aa18      	add	r2, sp, #96	; 0x60
   11938:	4658      	mov	r0, fp
   1193a:	f7ff fa31 	bl	10da0 <__sprint_r.part.0>
   1193e:	2800      	cmp	r0, #0
   11940:	f47f ac41 	bne.w	111c6 <_vfiprintf_r+0x3ae>
   11944:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11948:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1194c:	1c41      	adds	r1, r0, #1
   1194e:	e477      	b.n	11240 <_vfiprintf_r+0x428>
   11950:	f898 1000 	ldrb.w	r1, [r8]
   11954:	9307      	str	r3, [sp, #28]
   11956:	f7ff bad2 	b.w	10efe <_vfiprintf_r+0xe6>
   1195a:	ac44      	add	r4, sp, #272	; 0x110
   1195c:	f7ff bb85 	b.w	1106a <_vfiprintf_r+0x252>
   11960:	f109 0908 	add.w	r9, r9, #8
   11964:	f10c 0101 	add.w	r1, ip, #1
   11968:	4660      	mov	r0, ip
   1196a:	e4a0      	b.n	112ae <_vfiprintf_r+0x496>
   1196c:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11970:	f040 8197 	bne.w	11ca2 <_vfiprintf_r+0xe8a>
   11974:	f851 3b04 	ldr.w	r3, [r1], #4
   11978:	9107      	str	r1, [sp, #28]
   1197a:	f7ff bbc0 	b.w	110fe <_vfiprintf_r+0x2e6>
   1197e:	05b3      	lsls	r3, r6, #22
   11980:	f100 8188 	bmi.w	11c94 <_vfiprintf_r+0xe7c>
   11984:	f852 3b04 	ldr.w	r3, [r2], #4
   11988:	9207      	str	r2, [sp, #28]
   1198a:	17da      	asrs	r2, r3, #31
   1198c:	4611      	mov	r1, r2
   1198e:	f7ff bb52 	b.w	11036 <_vfiprintf_r+0x21e>
   11992:	9907      	ldr	r1, [sp, #28]
   11994:	f851 3b04 	ldr.w	r3, [r1], #4
   11998:	9107      	str	r1, [sp, #28]
   1199a:	2101      	movs	r1, #1
   1199c:	f7ff bbb3 	b.w	11106 <_vfiprintf_r+0x2ee>
   119a0:	9b07      	ldr	r3, [sp, #28]
   119a2:	9805      	ldr	r0, [sp, #20]
   119a4:	f853 1b04 	ldr.w	r1, [r3], #4
   119a8:	9307      	str	r3, [sp, #28]
   119aa:	17c2      	asrs	r2, r0, #31
   119ac:	e9c1 0200 	strd	r0, r2, [r1]
   119b0:	f7ff ba7d 	b.w	10eae <_vfiprintf_r+0x96>
   119b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   119b6:	2b00      	cmp	r3, #0
   119b8:	f43f ab26 	beq.w	11008 <_vfiprintf_r+0x1f0>
   119bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   119be:	781b      	ldrb	r3, [r3, #0]
   119c0:	2b00      	cmp	r3, #0
   119c2:	f43f ab21 	beq.w	11008 <_vfiprintf_r+0x1f0>
   119c6:	f898 1000 	ldrb.w	r1, [r8]
   119ca:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   119ce:	f7ff ba96 	b.w	10efe <_vfiprintf_r+0xe6>
   119d2:	2302      	movs	r3, #2
   119d4:	aa11      	add	r2, sp, #68	; 0x44
   119d6:	931c      	str	r3, [sp, #112]	; 0x70
   119d8:	921b      	str	r2, [sp, #108]	; 0x6c
   119da:	2001      	movs	r0, #1
   119dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   119e0:	e6a2      	b.n	11728 <_vfiprintf_r+0x910>
   119e2:	9603      	str	r6, [sp, #12]
   119e4:	e571      	b.n	114ca <_vfiprintf_r+0x6b2>
   119e6:	4b3b      	ldr	r3, [pc, #236]	; (11ad4 <_vfiprintf_r+0xcbc>)
   119e8:	930c      	str	r3, [sp, #48]	; 0x30
   119ea:	f016 0220 	ands.w	r2, r6, #32
   119ee:	d059      	beq.n	11aa4 <_vfiprintf_r+0xc8c>
   119f0:	9b07      	ldr	r3, [sp, #28]
   119f2:	3307      	adds	r3, #7
   119f4:	f023 0307 	bic.w	r3, r3, #7
   119f8:	4618      	mov	r0, r3
   119fa:	685a      	ldr	r2, [r3, #4]
   119fc:	f850 3b08 	ldr.w	r3, [r0], #8
   11a00:	9007      	str	r0, [sp, #28]
   11a02:	07f4      	lsls	r4, r6, #31
   11a04:	d509      	bpl.n	11a1a <_vfiprintf_r+0xc02>
   11a06:	ea53 0002 	orrs.w	r0, r3, r2
   11a0a:	d006      	beq.n	11a1a <_vfiprintf_r+0xc02>
   11a0c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   11a10:	2130      	movs	r1, #48	; 0x30
   11a12:	f046 0602 	orr.w	r6, r6, #2
   11a16:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   11a1a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   11a1e:	9103      	str	r1, [sp, #12]
   11a20:	2102      	movs	r1, #2
   11a22:	f7ff bb70 	b.w	11106 <_vfiprintf_r+0x2ee>
   11a26:	4b2c      	ldr	r3, [pc, #176]	; (11ad8 <_vfiprintf_r+0xcc0>)
   11a28:	930c      	str	r3, [sp, #48]	; 0x30
   11a2a:	e7de      	b.n	119ea <_vfiprintf_r+0xbd2>
   11a2c:	9b07      	ldr	r3, [sp, #28]
   11a2e:	2101      	movs	r1, #1
   11a30:	f853 2b04 	ldr.w	r2, [r3], #4
   11a34:	9103      	str	r1, [sp, #12]
   11a36:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   11a3a:	9307      	str	r3, [sp, #28]
   11a3c:	9104      	str	r1, [sp, #16]
   11a3e:	ac2b      	add	r4, sp, #172	; 0xac
   11a40:	e4df      	b.n	11402 <_vfiprintf_r+0x5ea>
   11a42:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11a46:	2a00      	cmp	r2, #0
   11a48:	f040 8132 	bne.w	11cb0 <_vfiprintf_r+0xe98>
   11a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11a4e:	2a00      	cmp	r2, #0
   11a50:	f47f ae62 	bne.w	11718 <_vfiprintf_r+0x900>
   11a54:	4618      	mov	r0, r3
   11a56:	2101      	movs	r1, #1
   11a58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11a5c:	e427      	b.n	112ae <_vfiprintf_r+0x496>
   11a5e:	2100      	movs	r1, #0
   11a60:	2208      	movs	r2, #8
   11a62:	a816      	add	r0, sp, #88	; 0x58
   11a64:	9413      	str	r4, [sp, #76]	; 0x4c
   11a66:	f7fb f8c3 	bl	cbf0 <memset>
   11a6a:	1c79      	adds	r1, r7, #1
   11a6c:	f000 80bc 	beq.w	11be8 <_vfiprintf_r+0xdd0>
   11a70:	2500      	movs	r5, #0
   11a72:	9407      	str	r4, [sp, #28]
   11a74:	462c      	mov	r4, r5
   11a76:	e00c      	b.n	11a92 <_vfiprintf_r+0xc7a>
   11a78:	a92b      	add	r1, sp, #172	; 0xac
   11a7a:	4658      	mov	r0, fp
   11a7c:	f7ff f8ca 	bl	10c14 <_wcrtomb_r>
   11a80:	1c42      	adds	r2, r0, #1
   11a82:	4420      	add	r0, r4
   11a84:	f000 816b 	beq.w	11d5e <_vfiprintf_r+0xf46>
   11a88:	42b8      	cmp	r0, r7
   11a8a:	dc08      	bgt.n	11a9e <_vfiprintf_r+0xc86>
   11a8c:	f000 8170 	beq.w	11d70 <_vfiprintf_r+0xf58>
   11a90:	4604      	mov	r4, r0
   11a92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11a94:	5952      	ldr	r2, [r2, r5]
   11a96:	ab16      	add	r3, sp, #88	; 0x58
   11a98:	3504      	adds	r5, #4
   11a9a:	2a00      	cmp	r2, #0
   11a9c:	d1ec      	bne.n	11a78 <_vfiprintf_r+0xc60>
   11a9e:	9404      	str	r4, [sp, #16]
   11aa0:	9c07      	ldr	r4, [sp, #28]
   11aa2:	e0af      	b.n	11c04 <_vfiprintf_r+0xdec>
   11aa4:	f016 0310 	ands.w	r3, r6, #16
   11aa8:	9807      	ldr	r0, [sp, #28]
   11aaa:	d10c      	bne.n	11ac6 <_vfiprintf_r+0xcae>
   11aac:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   11ab0:	d005      	beq.n	11abe <_vfiprintf_r+0xca6>
   11ab2:	461a      	mov	r2, r3
   11ab4:	f850 3b04 	ldr.w	r3, [r0], #4
   11ab8:	9007      	str	r0, [sp, #28]
   11aba:	b29b      	uxth	r3, r3
   11abc:	e7a1      	b.n	11a02 <_vfiprintf_r+0xbea>
   11abe:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11ac2:	f040 80e1 	bne.w	11c88 <_vfiprintf_r+0xe70>
   11ac6:	f850 3b04 	ldr.w	r3, [r0], #4
   11aca:	9007      	str	r0, [sp, #28]
   11acc:	e799      	b.n	11a02 <_vfiprintf_r+0xbea>
   11ace:	bf00      	nop
   11ad0:	20000cd8 	.word	0x20000cd8
   11ad4:	20000c94 	.word	0x20000c94
   11ad8:	20000ca8 	.word	0x20000ca8
   11adc:	9903      	ldr	r1, [sp, #12]
   11ade:	9704      	str	r7, [sp, #16]
   11ae0:	ac44      	add	r4, sp, #272	; 0x110
   11ae2:	469e      	mov	lr, r3
   11ae4:	ee08 ba90 	vmov	s17, fp
   11ae8:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   11aec:	f04f 0c00 	mov.w	ip, #0
   11af0:	4623      	mov	r3, r4
   11af2:	e006      	b.n	11b02 <_vfiprintf_r+0xcea>
   11af4:	f1be 0f0a 	cmp.w	lr, #10
   11af8:	f172 0200 	sbcs.w	r2, r2, #0
   11afc:	d339      	bcc.n	11b72 <_vfiprintf_r+0xd5a>
   11afe:	46a6      	mov	lr, r4
   11b00:	462a      	mov	r2, r5
   11b02:	49a6      	ldr	r1, [pc, #664]	; (11d9c <_vfiprintf_r+0xf84>)
   11b04:	eb1e 0002 	adds.w	r0, lr, r2
   11b08:	f140 0000 	adc.w	r0, r0, #0
   11b0c:	460f      	mov	r7, r1
   11b0e:	fba1 1400 	umull	r1, r4, r1, r0
   11b12:	f024 0103 	bic.w	r1, r4, #3
   11b16:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   11b1a:	1a40      	subs	r0, r0, r1
   11b1c:	ebbe 0100 	subs.w	r1, lr, r0
   11b20:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   11b24:	f162 0400 	sbc.w	r4, r2, #0
   11b28:	fb05 f501 	mul.w	r5, r5, r1
   11b2c:	fb07 5504 	mla	r5, r7, r4, r5
   11b30:	fba1 4107 	umull	r4, r1, r1, r7
   11b34:	440d      	add	r5, r1
   11b36:	2705      	movs	r7, #5
   11b38:	f004 0101 	and.w	r1, r4, #1
   11b3c:	fba1 1b07 	umull	r1, fp, r1, r7
   11b40:	1809      	adds	r1, r1, r0
   11b42:	0864      	lsrs	r4, r4, #1
   11b44:	3130      	adds	r1, #48	; 0x30
   11b46:	f803 1c01 	strb.w	r1, [r3, #-1]
   11b4a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   11b4e:	f10c 0c01 	add.w	ip, ip, #1
   11b52:	3b01      	subs	r3, #1
   11b54:	086d      	lsrs	r5, r5, #1
   11b56:	2e00      	cmp	r6, #0
   11b58:	d0cc      	beq.n	11af4 <_vfiprintf_r+0xcdc>
   11b5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11b5c:	7809      	ldrb	r1, [r1, #0]
   11b5e:	4561      	cmp	r1, ip
   11b60:	d1c8      	bne.n	11af4 <_vfiprintf_r+0xcdc>
   11b62:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   11b66:	d0c5      	beq.n	11af4 <_vfiprintf_r+0xcdc>
   11b68:	f1be 0f0a 	cmp.w	lr, #10
   11b6c:	f172 0200 	sbcs.w	r2, r2, #0
   11b70:	d26c      	bcs.n	11c4c <_vfiprintf_r+0xe34>
   11b72:	461c      	mov	r4, r3
   11b74:	ab44      	add	r3, sp, #272	; 0x110
   11b76:	1b1b      	subs	r3, r3, r4
   11b78:	9f04      	ldr	r7, [sp, #16]
   11b7a:	9e03      	ldr	r6, [sp, #12]
   11b7c:	9304      	str	r3, [sp, #16]
   11b7e:	ee18 ba90 	vmov	fp, s17
   11b82:	f7ff ba72 	b.w	1106a <_vfiprintf_r+0x252>
   11b86:	9603      	str	r6, [sp, #12]
   11b88:	f7ff ba62 	b.w	11050 <_vfiprintf_r+0x238>
   11b8c:	4658      	mov	r0, fp
   11b8e:	f7fa feff 	bl	c990 <__sinit>
   11b92:	f7ff b95b 	b.w	10e4c <_vfiprintf_r+0x34>
   11b96:	2901      	cmp	r1, #1
   11b98:	9603      	str	r6, [sp, #12]
   11b9a:	f47f accd 	bne.w	11538 <_vfiprintf_r+0x720>
   11b9e:	f7ff ba5c 	b.w	1105a <_vfiprintf_r+0x242>
   11ba2:	9b07      	ldr	r3, [sp, #28]
   11ba4:	9905      	ldr	r1, [sp, #20]
   11ba6:	f853 2b04 	ldr.w	r2, [r3], #4
   11baa:	6011      	str	r1, [r2, #0]
   11bac:	9307      	str	r3, [sp, #28]
   11bae:	f7ff b97e 	b.w	10eae <_vfiprintf_r+0x96>
   11bb2:	2f06      	cmp	r7, #6
   11bb4:	463b      	mov	r3, r7
   11bb6:	9a03      	ldr	r2, [sp, #12]
   11bb8:	4c79      	ldr	r4, [pc, #484]	; (11da0 <_vfiprintf_r+0xf88>)
   11bba:	9207      	str	r2, [sp, #28]
   11bbc:	bf28      	it	cs
   11bbe:	2306      	movcs	r3, #6
   11bc0:	9304      	str	r3, [sp, #16]
   11bc2:	9303      	str	r3, [sp, #12]
   11bc4:	f7ff bb25 	b.w	11212 <_vfiprintf_r+0x3fa>
   11bc8:	9b03      	ldr	r3, [sp, #12]
   11bca:	9907      	ldr	r1, [sp, #28]
   11bcc:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   11bd0:	bf14      	ite	ne
   11bd2:	f851 3b04 	ldrne.w	r3, [r1], #4
   11bd6:	f851 3b04 	ldreq.w	r3, [r1], #4
   11bda:	9107      	str	r1, [sp, #28]
   11bdc:	bf1c      	itt	ne
   11bde:	4602      	movne	r2, r0
   11be0:	b2db      	uxtbne	r3, r3
   11be2:	2101      	movs	r1, #1
   11be4:	f7ff ba8f 	b.w	11106 <_vfiprintf_r+0x2ee>
   11be8:	ab16      	add	r3, sp, #88	; 0x58
   11bea:	9300      	str	r3, [sp, #0]
   11bec:	2300      	movs	r3, #0
   11bee:	4619      	mov	r1, r3
   11bf0:	aa13      	add	r2, sp, #76	; 0x4c
   11bf2:	4658      	mov	r0, fp
   11bf4:	f7ff f834 	bl	10c60 <_wcsrtombs_r>
   11bf8:	4603      	mov	r3, r0
   11bfa:	3301      	adds	r3, #1
   11bfc:	9004      	str	r0, [sp, #16]
   11bfe:	f000 80ae 	beq.w	11d5e <_vfiprintf_r+0xf46>
   11c02:	9413      	str	r4, [sp, #76]	; 0x4c
   11c04:	9b04      	ldr	r3, [sp, #16]
   11c06:	2b00      	cmp	r3, #0
   11c08:	d030      	beq.n	11c6c <_vfiprintf_r+0xe54>
   11c0a:	2b63      	cmp	r3, #99	; 0x63
   11c0c:	dc63      	bgt.n	11cd6 <_vfiprintf_r+0xebe>
   11c0e:	2300      	movs	r3, #0
   11c10:	9308      	str	r3, [sp, #32]
   11c12:	ac2b      	add	r4, sp, #172	; 0xac
   11c14:	2208      	movs	r2, #8
   11c16:	2100      	movs	r1, #0
   11c18:	a816      	add	r0, sp, #88	; 0x58
   11c1a:	f7fa ffe9 	bl	cbf0 <memset>
   11c1e:	9d04      	ldr	r5, [sp, #16]
   11c20:	ab16      	add	r3, sp, #88	; 0x58
   11c22:	9300      	str	r3, [sp, #0]
   11c24:	aa13      	add	r2, sp, #76	; 0x4c
   11c26:	462b      	mov	r3, r5
   11c28:	4621      	mov	r1, r4
   11c2a:	4658      	mov	r0, fp
   11c2c:	f7ff f818 	bl	10c60 <_wcsrtombs_r>
   11c30:	4285      	cmp	r5, r0
   11c32:	f040 80ab 	bne.w	11d8c <_vfiprintf_r+0xf74>
   11c36:	9b03      	ldr	r3, [sp, #12]
   11c38:	9a04      	ldr	r2, [sp, #16]
   11c3a:	9307      	str	r3, [sp, #28]
   11c3c:	2300      	movs	r3, #0
   11c3e:	54a3      	strb	r3, [r4, r2]
   11c40:	461f      	mov	r7, r3
   11c42:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   11c46:	9303      	str	r3, [sp, #12]
   11c48:	f7ff ba16 	b.w	11078 <_vfiprintf_r+0x260>
   11c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11c4e:	990d      	ldr	r1, [sp, #52]	; 0x34
   11c50:	1a9b      	subs	r3, r3, r2
   11c52:	4618      	mov	r0, r3
   11c54:	9308      	str	r3, [sp, #32]
   11c56:	f7fb f883 	bl	cd60 <strncpy>
   11c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11c5c:	9b08      	ldr	r3, [sp, #32]
   11c5e:	784a      	ldrb	r2, [r1, #1]
   11c60:	b10a      	cbz	r2, 11c66 <_vfiprintf_r+0xe4e>
   11c62:	3101      	adds	r1, #1
   11c64:	910b      	str	r1, [sp, #44]	; 0x2c
   11c66:	f04f 0c00 	mov.w	ip, #0
   11c6a:	e748      	b.n	11afe <_vfiprintf_r+0xce6>
   11c6c:	9b03      	ldr	r3, [sp, #12]
   11c6e:	9307      	str	r3, [sp, #28]
   11c70:	9b04      	ldr	r3, [sp, #16]
   11c72:	9303      	str	r3, [sp, #12]
   11c74:	461f      	mov	r7, r3
   11c76:	9308      	str	r3, [sp, #32]
   11c78:	f7ff b9fe 	b.w	11078 <_vfiprintf_r+0x260>
   11c7c:	2101      	movs	r1, #1
   11c7e:	4618      	mov	r0, r3
   11c80:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11c84:	f7ff bb13 	b.w	112ae <_vfiprintf_r+0x496>
   11c88:	f850 3b04 	ldr.w	r3, [r0], #4
   11c8c:	9007      	str	r0, [sp, #28]
   11c8e:	4622      	mov	r2, r4
   11c90:	b2db      	uxtb	r3, r3
   11c92:	e6b6      	b.n	11a02 <_vfiprintf_r+0xbea>
   11c94:	f912 3b04 	ldrsb.w	r3, [r2], #4
   11c98:	9207      	str	r2, [sp, #28]
   11c9a:	17da      	asrs	r2, r3, #31
   11c9c:	4611      	mov	r1, r2
   11c9e:	f7ff b9ca 	b.w	11036 <_vfiprintf_r+0x21e>
   11ca2:	f851 3b04 	ldr.w	r3, [r1], #4
   11ca6:	9107      	str	r1, [sp, #28]
   11ca8:	4602      	mov	r2, r0
   11caa:	b2db      	uxtb	r3, r3
   11cac:	f7ff ba27 	b.w	110fe <_vfiprintf_r+0x2e6>
   11cb0:	2301      	movs	r3, #1
   11cb2:	931c      	str	r3, [sp, #112]	; 0x70
   11cb4:	2101      	movs	r1, #1
   11cb6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   11cba:	931b      	str	r3, [sp, #108]	; 0x6c
   11cbc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11cc0:	460b      	mov	r3, r1
   11cc2:	f7ff bacd 	b.w	11260 <_vfiprintf_r+0x448>
   11cc6:	9b07      	ldr	r3, [sp, #28]
   11cc8:	9905      	ldr	r1, [sp, #20]
   11cca:	f853 2b04 	ldr.w	r2, [r3], #4
   11cce:	9307      	str	r3, [sp, #28]
   11cd0:	8011      	strh	r1, [r2, #0]
   11cd2:	f7ff b8ec 	b.w	10eae <_vfiprintf_r+0x96>
   11cd6:	1c59      	adds	r1, r3, #1
   11cd8:	4658      	mov	r0, fp
   11cda:	f7f9 ff91 	bl	bc00 <_malloc_r>
   11cde:	4604      	mov	r4, r0
   11ce0:	2800      	cmp	r0, #0
   11ce2:	d03c      	beq.n	11d5e <_vfiprintf_r+0xf46>
   11ce4:	9008      	str	r0, [sp, #32]
   11ce6:	e795      	b.n	11c14 <_vfiprintf_r+0xdfc>
   11ce8:	6d88      	ldr	r0, [r1, #88]	; 0x58
   11cea:	f7fb f907 	bl	cefc <__retarget_lock_release_recursive>
   11cee:	f7ff b9e9 	b.w	110c4 <_vfiprintf_r+0x2ac>
   11cf2:	9b03      	ldr	r3, [sp, #12]
   11cf4:	9307      	str	r3, [sp, #28]
   11cf6:	e9cd 7703 	strd	r7, r7, [sp, #12]
   11cfa:	9f08      	ldr	r7, [sp, #32]
   11cfc:	f7ff b9bc 	b.w	11078 <_vfiprintf_r+0x260>
   11d00:	9819      	ldr	r0, [sp, #100]	; 0x64
   11d02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11d04:	3001      	adds	r0, #1
   11d06:	e545      	b.n	11794 <_vfiprintf_r+0x97c>
   11d08:	9b03      	ldr	r3, [sp, #12]
   11d0a:	9307      	str	r3, [sp, #28]
   11d0c:	4620      	mov	r0, r4
   11d0e:	f7fb fad7 	bl	d2c0 <strlen>
   11d12:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   11d16:	462f      	mov	r7, r5
   11d18:	9004      	str	r0, [sp, #16]
   11d1a:	9303      	str	r3, [sp, #12]
   11d1c:	9508      	str	r5, [sp, #32]
   11d1e:	f7ff b9ab 	b.w	11078 <_vfiprintf_r+0x260>
   11d22:	ee18 1a10 	vmov	r1, s16
   11d26:	aa18      	add	r2, sp, #96	; 0x60
   11d28:	4658      	mov	r0, fp
   11d2a:	f7ff f839 	bl	10da0 <__sprint_r.part.0>
   11d2e:	2800      	cmp	r0, #0
   11d30:	f43f aa36 	beq.w	111a0 <_vfiprintf_r+0x388>
   11d34:	f7ff ba4d 	b.w	111d2 <_vfiprintf_r+0x3ba>
   11d38:	9819      	ldr	r0, [sp, #100]	; 0x64
   11d3a:	3001      	adds	r0, #1
   11d3c:	e57a      	b.n	11834 <_vfiprintf_r+0xa1c>
   11d3e:	468c      	mov	ip, r1
   11d40:	e46e      	b.n	11620 <_vfiprintf_r+0x808>
   11d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   11d44:	07d9      	lsls	r1, r3, #31
   11d46:	d405      	bmi.n	11d54 <_vfiprintf_r+0xf3c>
   11d48:	89ab      	ldrh	r3, [r5, #12]
   11d4a:	059a      	lsls	r2, r3, #22
   11d4c:	d402      	bmi.n	11d54 <_vfiprintf_r+0xf3c>
   11d4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   11d50:	f7fb f8d4 	bl	cefc <__retarget_lock_release_recursive>
   11d54:	f04f 33ff 	mov.w	r3, #4294967295
   11d58:	9305      	str	r3, [sp, #20]
   11d5a:	f7ff ba49 	b.w	111f0 <_vfiprintf_r+0x3d8>
   11d5e:	ee18 2a10 	vmov	r2, s16
   11d62:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   11d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11d6a:	8193      	strh	r3, [r2, #12]
   11d6c:	f7ff ba35 	b.w	111da <_vfiprintf_r+0x3c2>
   11d70:	9c07      	ldr	r4, [sp, #28]
   11d72:	9704      	str	r7, [sp, #16]
   11d74:	e746      	b.n	11c04 <_vfiprintf_r+0xdec>
   11d76:	9b07      	ldr	r3, [sp, #28]
   11d78:	f898 1001 	ldrb.w	r1, [r8, #1]
   11d7c:	f853 7b04 	ldr.w	r7, [r3], #4
   11d80:	9307      	str	r3, [sp, #28]
   11d82:	4690      	mov	r8, r2
   11d84:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   11d88:	f7ff b8b9 	b.w	10efe <_vfiprintf_r+0xe6>
   11d8c:	ee18 2a10 	vmov	r2, s16
   11d90:	8993      	ldrh	r3, [r2, #12]
   11d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11d96:	8193      	strh	r3, [r2, #12]
   11d98:	f7ff ba15 	b.w	111c6 <_vfiprintf_r+0x3ae>
   11d9c:	cccccccd 	.word	0xcccccccd
   11da0:	20000cbc 	.word	0x20000cbc

00011da4 <__sbprintf>:
   11da4:	b570      	push	{r4, r5, r6, lr}
   11da6:	460c      	mov	r4, r1
   11da8:	8989      	ldrh	r1, [r1, #12]
   11daa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   11dae:	f021 0102 	bic.w	r1, r1, #2
   11db2:	f8ad 1014 	strh.w	r1, [sp, #20]
   11db6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   11db8:	911b      	str	r1, [sp, #108]	; 0x6c
   11dba:	89e1      	ldrh	r1, [r4, #14]
   11dbc:	f8ad 1016 	strh.w	r1, [sp, #22]
   11dc0:	69e1      	ldr	r1, [r4, #28]
   11dc2:	9109      	str	r1, [sp, #36]	; 0x24
   11dc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11dc6:	910b      	str	r1, [sp, #44]	; 0x2c
   11dc8:	a91c      	add	r1, sp, #112	; 0x70
   11dca:	9102      	str	r1, [sp, #8]
   11dcc:	9106      	str	r1, [sp, #24]
   11dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11dd2:	4606      	mov	r6, r0
   11dd4:	9104      	str	r1, [sp, #16]
   11dd6:	9107      	str	r1, [sp, #28]
   11dd8:	a818      	add	r0, sp, #96	; 0x60
   11dda:	2100      	movs	r1, #0
   11ddc:	e9cd 3200 	strd	r3, r2, [sp]
   11de0:	9108      	str	r1, [sp, #32]
   11de2:	f7fb f885 	bl	cef0 <__retarget_lock_init_recursive>
   11de6:	e9dd 3200 	ldrd	r3, r2, [sp]
   11dea:	a902      	add	r1, sp, #8
   11dec:	4630      	mov	r0, r6
   11dee:	f7ff f813 	bl	10e18 <_vfiprintf_r>
   11df2:	1e05      	subs	r5, r0, #0
   11df4:	db07      	blt.n	11e06 <__sbprintf+0x62>
   11df6:	a902      	add	r1, sp, #8
   11df8:	4630      	mov	r0, r6
   11dfa:	f7fd fee7 	bl	fbcc <_fflush_r>
   11dfe:	2800      	cmp	r0, #0
   11e00:	bf18      	it	ne
   11e02:	f04f 35ff 	movne.w	r5, #4294967295
   11e06:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   11e0a:	065b      	lsls	r3, r3, #25
   11e0c:	d503      	bpl.n	11e16 <__sbprintf+0x72>
   11e0e:	89a3      	ldrh	r3, [r4, #12]
   11e10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11e14:	81a3      	strh	r3, [r4, #12]
   11e16:	9818      	ldr	r0, [sp, #96]	; 0x60
   11e18:	f7fb f86c 	bl	cef4 <__retarget_lock_close_recursive>
   11e1c:	4628      	mov	r0, r5
   11e1e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   11e22:	bd70      	pop	{r4, r5, r6, pc}

00011e24 <__sfvwrite_r>:
   11e24:	6893      	ldr	r3, [r2, #8]
   11e26:	2b00      	cmp	r3, #0
   11e28:	f000 8085 	beq.w	11f36 <__sfvwrite_r+0x112>
   11e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e30:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   11e34:	460c      	mov	r4, r1
   11e36:	0719      	lsls	r1, r3, #28
   11e38:	4680      	mov	r8, r0
   11e3a:	b083      	sub	sp, #12
   11e3c:	4617      	mov	r7, r2
   11e3e:	b298      	uxth	r0, r3
   11e40:	d525      	bpl.n	11e8e <__sfvwrite_r+0x6a>
   11e42:	6923      	ldr	r3, [r4, #16]
   11e44:	b31b      	cbz	r3, 11e8e <__sfvwrite_r+0x6a>
   11e46:	f010 0302 	ands.w	r3, r0, #2
   11e4a:	683d      	ldr	r5, [r7, #0]
   11e4c:	d02d      	beq.n	11eaa <__sfvwrite_r+0x86>
   11e4e:	f04f 0a00 	mov.w	sl, #0
   11e52:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 12114 <__sfvwrite_r+0x2f0>
   11e56:	4656      	mov	r6, sl
   11e58:	46b9      	mov	r9, r7
   11e5a:	455e      	cmp	r6, fp
   11e5c:	4633      	mov	r3, r6
   11e5e:	4652      	mov	r2, sl
   11e60:	bf28      	it	cs
   11e62:	465b      	movcs	r3, fp
   11e64:	4640      	mov	r0, r8
   11e66:	2e00      	cmp	r6, #0
   11e68:	d052      	beq.n	11f10 <__sfvwrite_r+0xec>
   11e6a:	69e1      	ldr	r1, [r4, #28]
   11e6c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11e6e:	47b8      	blx	r7
   11e70:	2800      	cmp	r0, #0
   11e72:	dd56      	ble.n	11f22 <__sfvwrite_r+0xfe>
   11e74:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11e78:	1a1b      	subs	r3, r3, r0
   11e7a:	4482      	add	sl, r0
   11e7c:	1a36      	subs	r6, r6, r0
   11e7e:	f8c9 3008 	str.w	r3, [r9, #8]
   11e82:	2b00      	cmp	r3, #0
   11e84:	d1e9      	bne.n	11e5a <__sfvwrite_r+0x36>
   11e86:	2000      	movs	r0, #0
   11e88:	b003      	add	sp, #12
   11e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e8e:	4621      	mov	r1, r4
   11e90:	4640      	mov	r0, r8
   11e92:	f000 f941 	bl	12118 <__swsetup_r>
   11e96:	2800      	cmp	r0, #0
   11e98:	f040 8138 	bne.w	1210c <__sfvwrite_r+0x2e8>
   11e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11ea0:	683d      	ldr	r5, [r7, #0]
   11ea2:	b298      	uxth	r0, r3
   11ea4:	f010 0302 	ands.w	r3, r0, #2
   11ea8:	d1d1      	bne.n	11e4e <__sfvwrite_r+0x2a>
   11eaa:	f010 0901 	ands.w	r9, r0, #1
   11eae:	d144      	bne.n	11f3a <__sfvwrite_r+0x116>
   11eb0:	464e      	mov	r6, r9
   11eb2:	9700      	str	r7, [sp, #0]
   11eb4:	b346      	cbz	r6, 11f08 <__sfvwrite_r+0xe4>
   11eb6:	0582      	lsls	r2, r0, #22
   11eb8:	f8d4 b008 	ldr.w	fp, [r4, #8]
   11ebc:	f140 8085 	bpl.w	11fca <__sfvwrite_r+0x1a6>
   11ec0:	45b3      	cmp	fp, r6
   11ec2:	465a      	mov	r2, fp
   11ec4:	f200 80b4 	bhi.w	12030 <__sfvwrite_r+0x20c>
   11ec8:	f410 6f90 	tst.w	r0, #1152	; 0x480
   11ecc:	f040 80c1 	bne.w	12052 <__sfvwrite_r+0x22e>
   11ed0:	6820      	ldr	r0, [r4, #0]
   11ed2:	9201      	str	r2, [sp, #4]
   11ed4:	4649      	mov	r1, r9
   11ed6:	f7fa fe0f 	bl	caf8 <memmove>
   11eda:	68a3      	ldr	r3, [r4, #8]
   11edc:	9a01      	ldr	r2, [sp, #4]
   11ede:	eba3 010b 	sub.w	r1, r3, fp
   11ee2:	6823      	ldr	r3, [r4, #0]
   11ee4:	60a1      	str	r1, [r4, #8]
   11ee6:	4413      	add	r3, r2
   11ee8:	46b2      	mov	sl, r6
   11eea:	6023      	str	r3, [r4, #0]
   11eec:	2600      	movs	r6, #0
   11eee:	9a00      	ldr	r2, [sp, #0]
   11ef0:	6893      	ldr	r3, [r2, #8]
   11ef2:	eba3 030a 	sub.w	r3, r3, sl
   11ef6:	44d1      	add	r9, sl
   11ef8:	6093      	str	r3, [r2, #8]
   11efa:	2b00      	cmp	r3, #0
   11efc:	d0c3      	beq.n	11e86 <__sfvwrite_r+0x62>
   11efe:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11f02:	b280      	uxth	r0, r0
   11f04:	2e00      	cmp	r6, #0
   11f06:	d1d6      	bne.n	11eb6 <__sfvwrite_r+0x92>
   11f08:	e9d5 9600 	ldrd	r9, r6, [r5]
   11f0c:	3508      	adds	r5, #8
   11f0e:	e7d1      	b.n	11eb4 <__sfvwrite_r+0x90>
   11f10:	e9d5 a600 	ldrd	sl, r6, [r5]
   11f14:	3508      	adds	r5, #8
   11f16:	e7a0      	b.n	11e5a <__sfvwrite_r+0x36>
   11f18:	4621      	mov	r1, r4
   11f1a:	4640      	mov	r0, r8
   11f1c:	f7fd fe56 	bl	fbcc <_fflush_r>
   11f20:	b388      	cbz	r0, 11f86 <__sfvwrite_r+0x162>
   11f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11f2a:	f04f 30ff 	mov.w	r0, #4294967295
   11f2e:	81a3      	strh	r3, [r4, #12]
   11f30:	b003      	add	sp, #12
   11f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f36:	2000      	movs	r0, #0
   11f38:	4770      	bx	lr
   11f3a:	461e      	mov	r6, r3
   11f3c:	46ba      	mov	sl, r7
   11f3e:	4699      	mov	r9, r3
   11f40:	4618      	mov	r0, r3
   11f42:	9500      	str	r5, [sp, #0]
   11f44:	461f      	mov	r7, r3
   11f46:	b366      	cbz	r6, 11fa2 <__sfvwrite_r+0x17e>
   11f48:	2800      	cmp	r0, #0
   11f4a:	d032      	beq.n	11fb2 <__sfvwrite_r+0x18e>
   11f4c:	464a      	mov	r2, r9
   11f4e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   11f52:	6820      	ldr	r0, [r4, #0]
   11f54:	68a5      	ldr	r5, [r4, #8]
   11f56:	42b2      	cmp	r2, r6
   11f58:	bf28      	it	cs
   11f5a:	4632      	movcs	r2, r6
   11f5c:	4288      	cmp	r0, r1
   11f5e:	d904      	bls.n	11f6a <__sfvwrite_r+0x146>
   11f60:	eb05 0b03 	add.w	fp, r5, r3
   11f64:	455a      	cmp	r2, fp
   11f66:	f300 80a7 	bgt.w	120b8 <__sfvwrite_r+0x294>
   11f6a:	4293      	cmp	r3, r2
   11f6c:	dc64      	bgt.n	12038 <__sfvwrite_r+0x214>
   11f6e:	69e1      	ldr	r1, [r4, #28]
   11f70:	6a65      	ldr	r5, [r4, #36]	; 0x24
   11f72:	463a      	mov	r2, r7
   11f74:	4640      	mov	r0, r8
   11f76:	47a8      	blx	r5
   11f78:	f1b0 0b00 	subs.w	fp, r0, #0
   11f7c:	ddd1      	ble.n	11f22 <__sfvwrite_r+0xfe>
   11f7e:	ebb9 090b 	subs.w	r9, r9, fp
   11f82:	d0c9      	beq.n	11f18 <__sfvwrite_r+0xf4>
   11f84:	2001      	movs	r0, #1
   11f86:	f8da 3008 	ldr.w	r3, [sl, #8]
   11f8a:	eba3 030b 	sub.w	r3, r3, fp
   11f8e:	445f      	add	r7, fp
   11f90:	eba6 060b 	sub.w	r6, r6, fp
   11f94:	f8ca 3008 	str.w	r3, [sl, #8]
   11f98:	2b00      	cmp	r3, #0
   11f9a:	f43f af74 	beq.w	11e86 <__sfvwrite_r+0x62>
   11f9e:	2e00      	cmp	r6, #0
   11fa0:	d1d2      	bne.n	11f48 <__sfvwrite_r+0x124>
   11fa2:	9a00      	ldr	r2, [sp, #0]
   11fa4:	6856      	ldr	r6, [r2, #4]
   11fa6:	4613      	mov	r3, r2
   11fa8:	3208      	adds	r2, #8
   11faa:	9200      	str	r2, [sp, #0]
   11fac:	2e00      	cmp	r6, #0
   11fae:	d0f8      	beq.n	11fa2 <__sfvwrite_r+0x17e>
   11fb0:	681f      	ldr	r7, [r3, #0]
   11fb2:	4632      	mov	r2, r6
   11fb4:	210a      	movs	r1, #10
   11fb6:	4638      	mov	r0, r7
   11fb8:	f7fd fe3a 	bl	fc30 <memchr>
   11fbc:	2800      	cmp	r0, #0
   11fbe:	f000 809c 	beq.w	120fa <__sfvwrite_r+0x2d6>
   11fc2:	3001      	adds	r0, #1
   11fc4:	eba0 0907 	sub.w	r9, r0, r7
   11fc8:	e7c0      	b.n	11f4c <__sfvwrite_r+0x128>
   11fca:	6820      	ldr	r0, [r4, #0]
   11fcc:	6923      	ldr	r3, [r4, #16]
   11fce:	4298      	cmp	r0, r3
   11fd0:	d816      	bhi.n	12000 <__sfvwrite_r+0x1dc>
   11fd2:	6962      	ldr	r2, [r4, #20]
   11fd4:	42b2      	cmp	r2, r6
   11fd6:	d813      	bhi.n	12000 <__sfvwrite_r+0x1dc>
   11fd8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11fdc:	42b3      	cmp	r3, r6
   11fde:	bf28      	it	cs
   11fe0:	4633      	movcs	r3, r6
   11fe2:	69e1      	ldr	r1, [r4, #28]
   11fe4:	fb93 f3f2 	sdiv	r3, r3, r2
   11fe8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11fea:	fb02 f303 	mul.w	r3, r2, r3
   11fee:	4640      	mov	r0, r8
   11ff0:	464a      	mov	r2, r9
   11ff2:	47b8      	blx	r7
   11ff4:	f1b0 0a00 	subs.w	sl, r0, #0
   11ff8:	dd93      	ble.n	11f22 <__sfvwrite_r+0xfe>
   11ffa:	eba6 060a 	sub.w	r6, r6, sl
   11ffe:	e776      	b.n	11eee <__sfvwrite_r+0xca>
   12000:	45b3      	cmp	fp, r6
   12002:	46da      	mov	sl, fp
   12004:	bf28      	it	cs
   12006:	46b2      	movcs	sl, r6
   12008:	4652      	mov	r2, sl
   1200a:	4649      	mov	r1, r9
   1200c:	f7fa fd74 	bl	caf8 <memmove>
   12010:	68a3      	ldr	r3, [r4, #8]
   12012:	6822      	ldr	r2, [r4, #0]
   12014:	eba3 030a 	sub.w	r3, r3, sl
   12018:	4452      	add	r2, sl
   1201a:	60a3      	str	r3, [r4, #8]
   1201c:	6022      	str	r2, [r4, #0]
   1201e:	2b00      	cmp	r3, #0
   12020:	d1eb      	bne.n	11ffa <__sfvwrite_r+0x1d6>
   12022:	4621      	mov	r1, r4
   12024:	4640      	mov	r0, r8
   12026:	f7fd fdd1 	bl	fbcc <_fflush_r>
   1202a:	2800      	cmp	r0, #0
   1202c:	d0e5      	beq.n	11ffa <__sfvwrite_r+0x1d6>
   1202e:	e778      	b.n	11f22 <__sfvwrite_r+0xfe>
   12030:	6820      	ldr	r0, [r4, #0]
   12032:	46b3      	mov	fp, r6
   12034:	4632      	mov	r2, r6
   12036:	e74c      	b.n	11ed2 <__sfvwrite_r+0xae>
   12038:	4639      	mov	r1, r7
   1203a:	9201      	str	r2, [sp, #4]
   1203c:	f7fa fd5c 	bl	caf8 <memmove>
   12040:	9a01      	ldr	r2, [sp, #4]
   12042:	68a3      	ldr	r3, [r4, #8]
   12044:	1a9b      	subs	r3, r3, r2
   12046:	60a3      	str	r3, [r4, #8]
   12048:	6823      	ldr	r3, [r4, #0]
   1204a:	4413      	add	r3, r2
   1204c:	6023      	str	r3, [r4, #0]
   1204e:	4693      	mov	fp, r2
   12050:	e795      	b.n	11f7e <__sfvwrite_r+0x15a>
   12052:	6823      	ldr	r3, [r4, #0]
   12054:	6921      	ldr	r1, [r4, #16]
   12056:	eba3 0b01 	sub.w	fp, r3, r1
   1205a:	6963      	ldr	r3, [r4, #20]
   1205c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   12060:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   12064:	f10b 0301 	add.w	r3, fp, #1
   12068:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   1206c:	4433      	add	r3, r6
   1206e:	4553      	cmp	r3, sl
   12070:	4652      	mov	r2, sl
   12072:	bf84      	itt	hi
   12074:	469a      	movhi	sl, r3
   12076:	4652      	movhi	r2, sl
   12078:	0543      	lsls	r3, r0, #21
   1207a:	d52c      	bpl.n	120d6 <__sfvwrite_r+0x2b2>
   1207c:	4611      	mov	r1, r2
   1207e:	4640      	mov	r0, r8
   12080:	f7f9 fdbe 	bl	bc00 <_malloc_r>
   12084:	2800      	cmp	r0, #0
   12086:	d03b      	beq.n	12100 <__sfvwrite_r+0x2dc>
   12088:	465a      	mov	r2, fp
   1208a:	6921      	ldr	r1, [r4, #16]
   1208c:	9001      	str	r0, [sp, #4]
   1208e:	f7f8 f807 	bl	a0a0 <memcpy>
   12092:	89a2      	ldrh	r2, [r4, #12]
   12094:	9b01      	ldr	r3, [sp, #4]
   12096:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1209a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1209e:	81a2      	strh	r2, [r4, #12]
   120a0:	eb03 000b 	add.w	r0, r3, fp
   120a4:	6123      	str	r3, [r4, #16]
   120a6:	ebaa 030b 	sub.w	r3, sl, fp
   120aa:	f8c4 a014 	str.w	sl, [r4, #20]
   120ae:	60a3      	str	r3, [r4, #8]
   120b0:	6020      	str	r0, [r4, #0]
   120b2:	46b3      	mov	fp, r6
   120b4:	4632      	mov	r2, r6
   120b6:	e70c      	b.n	11ed2 <__sfvwrite_r+0xae>
   120b8:	4639      	mov	r1, r7
   120ba:	465a      	mov	r2, fp
   120bc:	f7fa fd1c 	bl	caf8 <memmove>
   120c0:	6823      	ldr	r3, [r4, #0]
   120c2:	445b      	add	r3, fp
   120c4:	6023      	str	r3, [r4, #0]
   120c6:	4621      	mov	r1, r4
   120c8:	4640      	mov	r0, r8
   120ca:	f7fd fd7f 	bl	fbcc <_fflush_r>
   120ce:	2800      	cmp	r0, #0
   120d0:	f43f af55 	beq.w	11f7e <__sfvwrite_r+0x15a>
   120d4:	e725      	b.n	11f22 <__sfvwrite_r+0xfe>
   120d6:	4640      	mov	r0, r8
   120d8:	f7fa f85a 	bl	c190 <_realloc_r>
   120dc:	4603      	mov	r3, r0
   120de:	2800      	cmp	r0, #0
   120e0:	d1de      	bne.n	120a0 <__sfvwrite_r+0x27c>
   120e2:	6921      	ldr	r1, [r4, #16]
   120e4:	4640      	mov	r0, r8
   120e6:	f7fb f9ed 	bl	d4c4 <_free_r>
   120ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   120ee:	220c      	movs	r2, #12
   120f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   120f4:	f8c8 2000 	str.w	r2, [r8]
   120f8:	e715      	b.n	11f26 <__sfvwrite_r+0x102>
   120fa:	1c72      	adds	r2, r6, #1
   120fc:	4691      	mov	r9, r2
   120fe:	e726      	b.n	11f4e <__sfvwrite_r+0x12a>
   12100:	220c      	movs	r2, #12
   12102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12106:	f8c8 2000 	str.w	r2, [r8]
   1210a:	e70c      	b.n	11f26 <__sfvwrite_r+0x102>
   1210c:	f04f 30ff 	mov.w	r0, #4294967295
   12110:	e6ba      	b.n	11e88 <__sfvwrite_r+0x64>
   12112:	bf00      	nop
   12114:	7ffffc00 	.word	0x7ffffc00

00012118 <__swsetup_r>:
   12118:	b538      	push	{r3, r4, r5, lr}
   1211a:	4b31      	ldr	r3, [pc, #196]	; (121e0 <__swsetup_r+0xc8>)
   1211c:	681b      	ldr	r3, [r3, #0]
   1211e:	4605      	mov	r5, r0
   12120:	460c      	mov	r4, r1
   12122:	b113      	cbz	r3, 1212a <__swsetup_r+0x12>
   12124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   12126:	2a00      	cmp	r2, #0
   12128:	d04e      	beq.n	121c8 <__swsetup_r+0xb0>
   1212a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1212e:	0718      	lsls	r0, r3, #28
   12130:	b29a      	uxth	r2, r3
   12132:	d51c      	bpl.n	1216e <__swsetup_r+0x56>
   12134:	6921      	ldr	r1, [r4, #16]
   12136:	b329      	cbz	r1, 12184 <__swsetup_r+0x6c>
   12138:	f012 0001 	ands.w	r0, r2, #1
   1213c:	d007      	beq.n	1214e <__swsetup_r+0x36>
   1213e:	2000      	movs	r0, #0
   12140:	60a0      	str	r0, [r4, #8]
   12142:	6960      	ldr	r0, [r4, #20]
   12144:	4240      	negs	r0, r0
   12146:	61a0      	str	r0, [r4, #24]
   12148:	b139      	cbz	r1, 1215a <__swsetup_r+0x42>
   1214a:	2000      	movs	r0, #0
   1214c:	bd38      	pop	{r3, r4, r5, pc}
   1214e:	0795      	lsls	r5, r2, #30
   12150:	bf58      	it	pl
   12152:	6960      	ldrpl	r0, [r4, #20]
   12154:	60a0      	str	r0, [r4, #8]
   12156:	2900      	cmp	r1, #0
   12158:	d1f7      	bne.n	1214a <__swsetup_r+0x32>
   1215a:	0612      	lsls	r2, r2, #24
   1215c:	bf58      	it	pl
   1215e:	4608      	movpl	r0, r1
   12160:	d5f4      	bpl.n	1214c <__swsetup_r+0x34>
   12162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12166:	81a3      	strh	r3, [r4, #12]
   12168:	f04f 30ff 	mov.w	r0, #4294967295
   1216c:	bd38      	pop	{r3, r4, r5, pc}
   1216e:	06d1      	lsls	r1, r2, #27
   12170:	d52e      	bpl.n	121d0 <__swsetup_r+0xb8>
   12172:	0752      	lsls	r2, r2, #29
   12174:	d414      	bmi.n	121a0 <__swsetup_r+0x88>
   12176:	6921      	ldr	r1, [r4, #16]
   12178:	f043 0308 	orr.w	r3, r3, #8
   1217c:	81a3      	strh	r3, [r4, #12]
   1217e:	b29a      	uxth	r2, r3
   12180:	2900      	cmp	r1, #0
   12182:	d1d9      	bne.n	12138 <__swsetup_r+0x20>
   12184:	f402 7020 	and.w	r0, r2, #640	; 0x280
   12188:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1218c:	d0d4      	beq.n	12138 <__swsetup_r+0x20>
   1218e:	4621      	mov	r1, r4
   12190:	4628      	mov	r0, r5
   12192:	f000 f947 	bl	12424 <__smakebuf_r>
   12196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1219a:	6921      	ldr	r1, [r4, #16]
   1219c:	b29a      	uxth	r2, r3
   1219e:	e7cb      	b.n	12138 <__swsetup_r+0x20>
   121a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   121a2:	b151      	cbz	r1, 121ba <__swsetup_r+0xa2>
   121a4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   121a8:	4291      	cmp	r1, r2
   121aa:	d004      	beq.n	121b6 <__swsetup_r+0x9e>
   121ac:	4628      	mov	r0, r5
   121ae:	f7fb f989 	bl	d4c4 <_free_r>
   121b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   121b6:	2200      	movs	r2, #0
   121b8:	6322      	str	r2, [r4, #48]	; 0x30
   121ba:	6921      	ldr	r1, [r4, #16]
   121bc:	2200      	movs	r2, #0
   121be:	e9c4 1200 	strd	r1, r2, [r4]
   121c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   121c6:	e7d7      	b.n	12178 <__swsetup_r+0x60>
   121c8:	4618      	mov	r0, r3
   121ca:	f7fa fbe1 	bl	c990 <__sinit>
   121ce:	e7ac      	b.n	1212a <__swsetup_r+0x12>
   121d0:	2209      	movs	r2, #9
   121d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   121d6:	602a      	str	r2, [r5, #0]
   121d8:	f04f 30ff 	mov.w	r0, #4294967295
   121dc:	81a3      	strh	r3, [r4, #12]
   121de:	bd38      	pop	{r3, r4, r5, pc}
   121e0:	200048fc 	.word	0x200048fc

000121e4 <__fputwc>:
   121e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   121e8:	b082      	sub	sp, #8
   121ea:	4682      	mov	sl, r0
   121ec:	4688      	mov	r8, r1
   121ee:	4614      	mov	r4, r2
   121f0:	f7fa fde8 	bl	cdc4 <__locale_mb_cur_max>
   121f4:	2801      	cmp	r0, #1
   121f6:	d103      	bne.n	12200 <__fputwc+0x1c>
   121f8:	f108 33ff 	add.w	r3, r8, #4294967295
   121fc:	2bfe      	cmp	r3, #254	; 0xfe
   121fe:	d936      	bls.n	1226e <__fputwc+0x8a>
   12200:	f10d 0904 	add.w	r9, sp, #4
   12204:	4642      	mov	r2, r8
   12206:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1220a:	4649      	mov	r1, r9
   1220c:	4650      	mov	r0, sl
   1220e:	f7fe fd01 	bl	10c14 <_wcrtomb_r>
   12212:	1c42      	adds	r2, r0, #1
   12214:	4606      	mov	r6, r0
   12216:	d032      	beq.n	1227e <__fputwc+0x9a>
   12218:	b320      	cbz	r0, 12264 <__fputwc+0x80>
   1221a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1221e:	2500      	movs	r5, #0
   12220:	e009      	b.n	12236 <__fputwc+0x52>
   12222:	6823      	ldr	r3, [r4, #0]
   12224:	1c5a      	adds	r2, r3, #1
   12226:	6022      	str	r2, [r4, #0]
   12228:	f883 c000 	strb.w	ip, [r3]
   1222c:	3501      	adds	r5, #1
   1222e:	42b5      	cmp	r5, r6
   12230:	d218      	bcs.n	12264 <__fputwc+0x80>
   12232:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   12236:	68a3      	ldr	r3, [r4, #8]
   12238:	3b01      	subs	r3, #1
   1223a:	2b00      	cmp	r3, #0
   1223c:	60a3      	str	r3, [r4, #8]
   1223e:	daf0      	bge.n	12222 <__fputwc+0x3e>
   12240:	69a7      	ldr	r7, [r4, #24]
   12242:	42bb      	cmp	r3, r7
   12244:	4661      	mov	r1, ip
   12246:	4622      	mov	r2, r4
   12248:	4650      	mov	r0, sl
   1224a:	db02      	blt.n	12252 <__fputwc+0x6e>
   1224c:	f1bc 0f0a 	cmp.w	ip, #10
   12250:	d1e7      	bne.n	12222 <__fputwc+0x3e>
   12252:	f000 f953 	bl	124fc <__swbuf_r>
   12256:	1c43      	adds	r3, r0, #1
   12258:	d1e8      	bne.n	1222c <__fputwc+0x48>
   1225a:	4606      	mov	r6, r0
   1225c:	4630      	mov	r0, r6
   1225e:	b002      	add	sp, #8
   12260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12264:	4646      	mov	r6, r8
   12266:	4630      	mov	r0, r6
   12268:	b002      	add	sp, #8
   1226a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1226e:	fa5f fc88 	uxtb.w	ip, r8
   12272:	f88d c004 	strb.w	ip, [sp, #4]
   12276:	4606      	mov	r6, r0
   12278:	f10d 0904 	add.w	r9, sp, #4
   1227c:	e7cf      	b.n	1221e <__fputwc+0x3a>
   1227e:	89a3      	ldrh	r3, [r4, #12]
   12280:	4630      	mov	r0, r6
   12282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12286:	81a3      	strh	r3, [r4, #12]
   12288:	b002      	add	sp, #8
   1228a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1228e:	bf00      	nop

00012290 <_fputwc_r>:
   12290:	b530      	push	{r4, r5, lr}
   12292:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12294:	f013 0f01 	tst.w	r3, #1
   12298:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1229c:	4614      	mov	r4, r2
   1229e:	b083      	sub	sp, #12
   122a0:	4605      	mov	r5, r0
   122a2:	b29a      	uxth	r2, r3
   122a4:	d101      	bne.n	122aa <_fputwc_r+0x1a>
   122a6:	0598      	lsls	r0, r3, #22
   122a8:	d51c      	bpl.n	122e4 <_fputwc_r+0x54>
   122aa:	0490      	lsls	r0, r2, #18
   122ac:	d406      	bmi.n	122bc <_fputwc_r+0x2c>
   122ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
   122b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   122b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   122b8:	81a3      	strh	r3, [r4, #12]
   122ba:	6662      	str	r2, [r4, #100]	; 0x64
   122bc:	4622      	mov	r2, r4
   122be:	4628      	mov	r0, r5
   122c0:	f7ff ff90 	bl	121e4 <__fputwc>
   122c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   122c6:	07da      	lsls	r2, r3, #31
   122c8:	4605      	mov	r5, r0
   122ca:	d402      	bmi.n	122d2 <_fputwc_r+0x42>
   122cc:	89a3      	ldrh	r3, [r4, #12]
   122ce:	059b      	lsls	r3, r3, #22
   122d0:	d502      	bpl.n	122d8 <_fputwc_r+0x48>
   122d2:	4628      	mov	r0, r5
   122d4:	b003      	add	sp, #12
   122d6:	bd30      	pop	{r4, r5, pc}
   122d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   122da:	f7fa fe0f 	bl	cefc <__retarget_lock_release_recursive>
   122de:	4628      	mov	r0, r5
   122e0:	b003      	add	sp, #12
   122e2:	bd30      	pop	{r4, r5, pc}
   122e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   122e6:	9101      	str	r1, [sp, #4]
   122e8:	f7fa fe06 	bl	cef8 <__retarget_lock_acquire_recursive>
   122ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   122f0:	9901      	ldr	r1, [sp, #4]
   122f2:	b29a      	uxth	r2, r3
   122f4:	e7d9      	b.n	122aa <_fputwc_r+0x1a>
   122f6:	bf00      	nop

000122f8 <_wcsnrtombs_l>:
   122f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122fc:	b08b      	sub	sp, #44	; 0x2c
   122fe:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   12302:	9f14      	ldr	r7, [sp, #80]	; 0x50
   12304:	9103      	str	r1, [sp, #12]
   12306:	4681      	mov	r9, r0
   12308:	9205      	str	r2, [sp, #20]
   1230a:	461e      	mov	r6, r3
   1230c:	f1b8 0f00 	cmp.w	r8, #0
   12310:	d05c      	beq.n	123cc <_wcsnrtombs_l+0xd4>
   12312:	9b03      	ldr	r3, [sp, #12]
   12314:	2b00      	cmp	r3, #0
   12316:	d05e      	beq.n	123d6 <_wcsnrtombs_l+0xde>
   12318:	9b05      	ldr	r3, [sp, #20]
   1231a:	681d      	ldr	r5, [r3, #0]
   1231c:	2f00      	cmp	r7, #0
   1231e:	d06a      	beq.n	123f6 <_wcsnrtombs_l+0xfe>
   12320:	1e74      	subs	r4, r6, #1
   12322:	b34e      	cbz	r6, 12378 <_wcsnrtombs_l+0x80>
   12324:	9b03      	ldr	r3, [sp, #12]
   12326:	9304      	str	r3, [sp, #16]
   12328:	3d04      	subs	r5, #4
   1232a:	2600      	movs	r6, #0
   1232c:	9501      	str	r5, [sp, #4]
   1232e:	e00b      	b.n	12348 <_wcsnrtombs_l+0x50>
   12330:	9b03      	ldr	r3, [sp, #12]
   12332:	bb2b      	cbnz	r3, 12380 <_wcsnrtombs_l+0x88>
   12334:	9b01      	ldr	r3, [sp, #4]
   12336:	681a      	ldr	r2, [r3, #0]
   12338:	2a00      	cmp	r2, #0
   1233a:	d03a      	beq.n	123b2 <_wcsnrtombs_l+0xba>
   1233c:	45bc      	cmp	ip, r7
   1233e:	d25c      	bcs.n	123fa <_wcsnrtombs_l+0x102>
   12340:	3c01      	subs	r4, #1
   12342:	1c63      	adds	r3, r4, #1
   12344:	4666      	mov	r6, ip
   12346:	d017      	beq.n	12378 <_wcsnrtombs_l+0x80>
   12348:	f8d8 3000 	ldr.w	r3, [r8]
   1234c:	9302      	str	r3, [sp, #8]
   1234e:	9b01      	ldr	r3, [sp, #4]
   12350:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   12354:	f853 2f04 	ldr.w	r2, [r3, #4]!
   12358:	9301      	str	r3, [sp, #4]
   1235a:	a907      	add	r1, sp, #28
   1235c:	4643      	mov	r3, r8
   1235e:	4648      	mov	r0, r9
   12360:	f8d8 b004 	ldr.w	fp, [r8, #4]
   12364:	47a8      	blx	r5
   12366:	1c42      	adds	r2, r0, #1
   12368:	d03a      	beq.n	123e0 <_wcsnrtombs_l+0xe8>
   1236a:	eb00 0c06 	add.w	ip, r0, r6
   1236e:	45bc      	cmp	ip, r7
   12370:	d9de      	bls.n	12330 <_wcsnrtombs_l+0x38>
   12372:	9b02      	ldr	r3, [sp, #8]
   12374:	e9c8 3b00 	strd	r3, fp, [r8]
   12378:	4630      	mov	r0, r6
   1237a:	b00b      	add	sp, #44	; 0x2c
   1237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12380:	2800      	cmp	r0, #0
   12382:	dd0e      	ble.n	123a2 <_wcsnrtombs_l+0xaa>
   12384:	9b04      	ldr	r3, [sp, #16]
   12386:	9d01      	ldr	r5, [sp, #4]
   12388:	4418      	add	r0, r3
   1238a:	1e5a      	subs	r2, r3, #1
   1238c:	a907      	add	r1, sp, #28
   1238e:	f100 3eff 	add.w	lr, r0, #4294967295
   12392:	f811 3b01 	ldrb.w	r3, [r1], #1
   12396:	f802 3f01 	strb.w	r3, [r2, #1]!
   1239a:	4572      	cmp	r2, lr
   1239c:	d1f9      	bne.n	12392 <_wcsnrtombs_l+0x9a>
   1239e:	9501      	str	r5, [sp, #4]
   123a0:	9004      	str	r0, [sp, #16]
   123a2:	9b05      	ldr	r3, [sp, #20]
   123a4:	681a      	ldr	r2, [r3, #0]
   123a6:	3204      	adds	r2, #4
   123a8:	601a      	str	r2, [r3, #0]
   123aa:	9b01      	ldr	r3, [sp, #4]
   123ac:	681a      	ldr	r2, [r3, #0]
   123ae:	2a00      	cmp	r2, #0
   123b0:	d1c4      	bne.n	1233c <_wcsnrtombs_l+0x44>
   123b2:	9b03      	ldr	r3, [sp, #12]
   123b4:	b10b      	cbz	r3, 123ba <_wcsnrtombs_l+0xc2>
   123b6:	9b05      	ldr	r3, [sp, #20]
   123b8:	601a      	str	r2, [r3, #0]
   123ba:	f10c 36ff 	add.w	r6, ip, #4294967295
   123be:	2200      	movs	r2, #0
   123c0:	4630      	mov	r0, r6
   123c2:	f8c8 2000 	str.w	r2, [r8]
   123c6:	b00b      	add	sp, #44	; 0x2c
   123c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123cc:	9b03      	ldr	r3, [sp, #12]
   123ce:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   123d2:	2b00      	cmp	r3, #0
   123d4:	d1a0      	bne.n	12318 <_wcsnrtombs_l+0x20>
   123d6:	9b05      	ldr	r3, [sp, #20]
   123d8:	f04f 37ff 	mov.w	r7, #4294967295
   123dc:	681d      	ldr	r5, [r3, #0]
   123de:	e79f      	b.n	12320 <_wcsnrtombs_l+0x28>
   123e0:	4606      	mov	r6, r0
   123e2:	218a      	movs	r1, #138	; 0x8a
   123e4:	2200      	movs	r2, #0
   123e6:	4630      	mov	r0, r6
   123e8:	f8c9 1000 	str.w	r1, [r9]
   123ec:	f8c8 2000 	str.w	r2, [r8]
   123f0:	b00b      	add	sp, #44	; 0x2c
   123f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123f6:	463e      	mov	r6, r7
   123f8:	e7be      	b.n	12378 <_wcsnrtombs_l+0x80>
   123fa:	4666      	mov	r6, ip
   123fc:	e7bc      	b.n	12378 <_wcsnrtombs_l+0x80>
   123fe:	bf00      	nop

00012400 <_wcsnrtombs_r>:
   12400:	b510      	push	{r4, lr}
   12402:	b084      	sub	sp, #16
   12404:	4c05      	ldr	r4, [pc, #20]	; (1241c <_wcsnrtombs_r+0x1c>)
   12406:	9806      	ldr	r0, [sp, #24]
   12408:	9000      	str	r0, [sp, #0]
   1240a:	9807      	ldr	r0, [sp, #28]
   1240c:	9001      	str	r0, [sp, #4]
   1240e:	4804      	ldr	r0, [pc, #16]	; (12420 <_wcsnrtombs_r+0x20>)
   12410:	6800      	ldr	r0, [r0, #0]
   12412:	9402      	str	r4, [sp, #8]
   12414:	f7ff ff70 	bl	122f8 <_wcsnrtombs_l>
   12418:	b004      	add	sp, #16
   1241a:	bd10      	pop	{r4, pc}
   1241c:	20004374 	.word	0x20004374
   12420:	200048fc 	.word	0x200048fc

00012424 <__smakebuf_r>:
   12424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12428:	898b      	ldrh	r3, [r1, #12]
   1242a:	460c      	mov	r4, r1
   1242c:	0799      	lsls	r1, r3, #30
   1242e:	b096      	sub	sp, #88	; 0x58
   12430:	d508      	bpl.n	12444 <__smakebuf_r+0x20>
   12432:	f104 0343 	add.w	r3, r4, #67	; 0x43
   12436:	2201      	movs	r2, #1
   12438:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1243c:	6023      	str	r3, [r4, #0]
   1243e:	b016      	add	sp, #88	; 0x58
   12440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12448:	2900      	cmp	r1, #0
   1244a:	4606      	mov	r6, r0
   1244c:	db25      	blt.n	1249a <__smakebuf_r+0x76>
   1244e:	466a      	mov	r2, sp
   12450:	f000 f8ac 	bl	125ac <_fstat_r>
   12454:	2800      	cmp	r0, #0
   12456:	db1f      	blt.n	12498 <__smakebuf_r+0x74>
   12458:	9d01      	ldr	r5, [sp, #4]
   1245a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1245e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   12462:	fab5 f585 	clz	r5, r5
   12466:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1246a:	096d      	lsrs	r5, r5, #5
   1246c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   12470:	4641      	mov	r1, r8
   12472:	4630      	mov	r0, r6
   12474:	f7f9 fbc4 	bl	bc00 <_malloc_r>
   12478:	b1e0      	cbz	r0, 124b4 <__smakebuf_r+0x90>
   1247a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1247e:	f8c4 8014 	str.w	r8, [r4, #20]
   12482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12486:	6020      	str	r0, [r4, #0]
   12488:	6120      	str	r0, [r4, #16]
   1248a:	81a3      	strh	r3, [r4, #12]
   1248c:	bb35      	cbnz	r5, 124dc <__smakebuf_r+0xb8>
   1248e:	433b      	orrs	r3, r7
   12490:	81a3      	strh	r3, [r4, #12]
   12492:	b016      	add	sp, #88	; 0x58
   12494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12498:	89a3      	ldrh	r3, [r4, #12]
   1249a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1249e:	d019      	beq.n	124d4 <__smakebuf_r+0xb0>
   124a0:	f04f 0840 	mov.w	r8, #64	; 0x40
   124a4:	2500      	movs	r5, #0
   124a6:	4641      	mov	r1, r8
   124a8:	4630      	mov	r0, r6
   124aa:	462f      	mov	r7, r5
   124ac:	f7f9 fba8 	bl	bc00 <_malloc_r>
   124b0:	2800      	cmp	r0, #0
   124b2:	d1e2      	bne.n	1247a <__smakebuf_r+0x56>
   124b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   124b8:	059a      	lsls	r2, r3, #22
   124ba:	d4c0      	bmi.n	1243e <__smakebuf_r+0x1a>
   124bc:	f023 0303 	bic.w	r3, r3, #3
   124c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   124c4:	f043 0302 	orr.w	r3, r3, #2
   124c8:	2101      	movs	r1, #1
   124ca:	e9c4 2104 	strd	r2, r1, [r4, #16]
   124ce:	81a3      	strh	r3, [r4, #12]
   124d0:	6022      	str	r2, [r4, #0]
   124d2:	e7b4      	b.n	1243e <__smakebuf_r+0x1a>
   124d4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   124d8:	462f      	mov	r7, r5
   124da:	e7c9      	b.n	12470 <__smakebuf_r+0x4c>
   124dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   124e0:	4630      	mov	r0, r6
   124e2:	f000 f879 	bl	125d8 <_isatty_r>
   124e6:	b910      	cbnz	r0, 124ee <__smakebuf_r+0xca>
   124e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   124ec:	e7cf      	b.n	1248e <__smakebuf_r+0x6a>
   124ee:	89a3      	ldrh	r3, [r4, #12]
   124f0:	f023 0303 	bic.w	r3, r3, #3
   124f4:	f043 0301 	orr.w	r3, r3, #1
   124f8:	b21b      	sxth	r3, r3
   124fa:	e7c8      	b.n	1248e <__smakebuf_r+0x6a>

000124fc <__swbuf_r>:
   124fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124fe:	460d      	mov	r5, r1
   12500:	4614      	mov	r4, r2
   12502:	4606      	mov	r6, r0
   12504:	b110      	cbz	r0, 1250c <__swbuf_r+0x10>
   12506:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12508:	2b00      	cmp	r3, #0
   1250a:	d04c      	beq.n	125a6 <__swbuf_r+0xaa>
   1250c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   12510:	69a3      	ldr	r3, [r4, #24]
   12512:	60a3      	str	r3, [r4, #8]
   12514:	0717      	lsls	r7, r2, #28
   12516:	b290      	uxth	r0, r2
   12518:	d51b      	bpl.n	12552 <__swbuf_r+0x56>
   1251a:	6923      	ldr	r3, [r4, #16]
   1251c:	b1cb      	cbz	r3, 12552 <__swbuf_r+0x56>
   1251e:	b2ed      	uxtb	r5, r5
   12520:	0481      	lsls	r1, r0, #18
   12522:	462f      	mov	r7, r5
   12524:	d522      	bpl.n	1256c <__swbuf_r+0x70>
   12526:	6822      	ldr	r2, [r4, #0]
   12528:	6961      	ldr	r1, [r4, #20]
   1252a:	1ad3      	subs	r3, r2, r3
   1252c:	4299      	cmp	r1, r3
   1252e:	dd29      	ble.n	12584 <__swbuf_r+0x88>
   12530:	3301      	adds	r3, #1
   12532:	68a1      	ldr	r1, [r4, #8]
   12534:	3901      	subs	r1, #1
   12536:	60a1      	str	r1, [r4, #8]
   12538:	1c51      	adds	r1, r2, #1
   1253a:	6021      	str	r1, [r4, #0]
   1253c:	7015      	strb	r5, [r2, #0]
   1253e:	6962      	ldr	r2, [r4, #20]
   12540:	429a      	cmp	r2, r3
   12542:	d027      	beq.n	12594 <__swbuf_r+0x98>
   12544:	89a3      	ldrh	r3, [r4, #12]
   12546:	07db      	lsls	r3, r3, #31
   12548:	d501      	bpl.n	1254e <__swbuf_r+0x52>
   1254a:	2d0a      	cmp	r5, #10
   1254c:	d022      	beq.n	12594 <__swbuf_r+0x98>
   1254e:	4638      	mov	r0, r7
   12550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12552:	4621      	mov	r1, r4
   12554:	4630      	mov	r0, r6
   12556:	f7ff fddf 	bl	12118 <__swsetup_r>
   1255a:	bb08      	cbnz	r0, 125a0 <__swbuf_r+0xa4>
   1255c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   12560:	6923      	ldr	r3, [r4, #16]
   12562:	b290      	uxth	r0, r2
   12564:	b2ed      	uxtb	r5, r5
   12566:	0481      	lsls	r1, r0, #18
   12568:	462f      	mov	r7, r5
   1256a:	d4dc      	bmi.n	12526 <__swbuf_r+0x2a>
   1256c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   12570:	81a2      	strh	r2, [r4, #12]
   12572:	6e62      	ldr	r2, [r4, #100]	; 0x64
   12574:	6961      	ldr	r1, [r4, #20]
   12576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1257a:	6662      	str	r2, [r4, #100]	; 0x64
   1257c:	6822      	ldr	r2, [r4, #0]
   1257e:	1ad3      	subs	r3, r2, r3
   12580:	4299      	cmp	r1, r3
   12582:	dcd5      	bgt.n	12530 <__swbuf_r+0x34>
   12584:	4621      	mov	r1, r4
   12586:	4630      	mov	r0, r6
   12588:	f7fd fb20 	bl	fbcc <_fflush_r>
   1258c:	b940      	cbnz	r0, 125a0 <__swbuf_r+0xa4>
   1258e:	6822      	ldr	r2, [r4, #0]
   12590:	2301      	movs	r3, #1
   12592:	e7ce      	b.n	12532 <__swbuf_r+0x36>
   12594:	4621      	mov	r1, r4
   12596:	4630      	mov	r0, r6
   12598:	f7fd fb18 	bl	fbcc <_fflush_r>
   1259c:	2800      	cmp	r0, #0
   1259e:	d0d6      	beq.n	1254e <__swbuf_r+0x52>
   125a0:	f04f 37ff 	mov.w	r7, #4294967295
   125a4:	e7d3      	b.n	1254e <__swbuf_r+0x52>
   125a6:	f7fa f9f3 	bl	c990 <__sinit>
   125aa:	e7af      	b.n	1250c <__swbuf_r+0x10>

000125ac <_fstat_r>:
   125ac:	b570      	push	{r4, r5, r6, lr}
   125ae:	460c      	mov	r4, r1
   125b0:	4d08      	ldr	r5, [pc, #32]	; (125d4 <_fstat_r+0x28>)
   125b2:	4603      	mov	r3, r0
   125b4:	2600      	movs	r6, #0
   125b6:	4620      	mov	r0, r4
   125b8:	4611      	mov	r1, r2
   125ba:	461c      	mov	r4, r3
   125bc:	602e      	str	r6, [r5, #0]
   125be:	f7f7 ff1b 	bl	a3f8 <_fstat>
   125c2:	1c43      	adds	r3, r0, #1
   125c4:	d000      	beq.n	125c8 <_fstat_r+0x1c>
   125c6:	bd70      	pop	{r4, r5, r6, pc}
   125c8:	682b      	ldr	r3, [r5, #0]
   125ca:	2b00      	cmp	r3, #0
   125cc:	d0fb      	beq.n	125c6 <_fstat_r+0x1a>
   125ce:	6023      	str	r3, [r4, #0]
   125d0:	bd70      	pop	{r4, r5, r6, pc}
   125d2:	bf00      	nop
   125d4:	200053dc 	.word	0x200053dc

000125d8 <_isatty_r>:
   125d8:	b538      	push	{r3, r4, r5, lr}
   125da:	4d07      	ldr	r5, [pc, #28]	; (125f8 <_isatty_r+0x20>)
   125dc:	2200      	movs	r2, #0
   125de:	4604      	mov	r4, r0
   125e0:	4608      	mov	r0, r1
   125e2:	602a      	str	r2, [r5, #0]
   125e4:	f7f7 ff0e 	bl	a404 <_isatty>
   125e8:	1c43      	adds	r3, r0, #1
   125ea:	d000      	beq.n	125ee <_isatty_r+0x16>
   125ec:	bd38      	pop	{r3, r4, r5, pc}
   125ee:	682b      	ldr	r3, [r5, #0]
   125f0:	2b00      	cmp	r3, #0
   125f2:	d0fb      	beq.n	125ec <_isatty_r+0x14>
   125f4:	6023      	str	r3, [r4, #0]
   125f6:	bd38      	pop	{r3, r4, r5, pc}
   125f8:	200053dc 	.word	0x200053dc
   125fc:	00000000 	.word	0x00000000

00012600 <___reboot_Teensyduino__veneer>:
   12600:	f85f f000 	ldr.w	pc, [pc]	; 12604 <___reboot_Teensyduino__veneer+0x4>
   12604:	60001d55 	.word	0x60001d55

00012608 <___init_veneer>:
   12608:	f85f f000 	ldr.w	pc, [pc]	; 1260c <___init_veneer+0x4>
   1260c:	60001dfd 	.word	0x60001dfd

Disassembly of section .fini:

00012610 <_fini>:
   12610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12612:	bf00      	nop
