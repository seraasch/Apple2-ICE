
C:\Users\sraas\Repositories\Apple2-ICE\build/Apple2-ICE.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 f912 	bl	60001654 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 f8be 	bl	60001664 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fae0 	bl	60001ae0 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fc6d 	bl	60001e10 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 f8ee 	bl	6000175c <configure_external_ram>
	analog_init();
60001580:	f000 fc12 	bl	60001da8 <analog_init>
	pwm_init();
60001584:	f000 fc48 	bl	60001e18 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fad8 	bl	60001b3c <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f864 	bl	60001658 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fb69 	bl	60001c6c <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f85d 	bl	60001660 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f859 	bl	6000165c <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fc41 	bl	60001e30 <____libc_init_array_veneer>
	main();
600015ae:	f000 fc3b 	bl	60001e28 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	0000f558 	.word	0x0000f558
600015c0:	60001f5c 	.word	0x60001f5c
600015c4:	00000000 	.word	0x00000000
600015c8:	20004ac0 	.word	0x20004ac0
600015cc:	600114b8 	.word	0x600114b8
600015d0:	20000000 	.word	0x20000000
600015d4:	200150e0 	.word	0x200150e0
600015d8:	20004ac0 	.word	0x20004ac0
600015dc:	20004800 	.word	0x20004800
600015e0:	0000716d 	.word	0x0000716d
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00008585 	.word	0x00008585
600015f4:	20015068 	.word	0x20015068
600015f8:	00008589 	.word	0x00008589
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2001506c 	.word	0x2001506c
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaaaaf 	.word	0xaaaaaaaf
6000164c:	00200007 	.word	0x00200007
60001650:	20070000 	.word	0x20070000

60001654 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001654:	4770      	bx	lr
60001656:	bf00      	nop

60001658 <startup_default_middle_hook>:
60001658:	4770      	bx	lr
6000165a:	bf00      	nop

6000165c <startup_default_late_hook>:
6000165c:	4770      	bx	lr
6000165e:	bf00      	nop

60001660 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001660:	bf00      	nop
60001662:	4770      	bx	lr

60001664 <configure_cache>:
{
60001664:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000166a:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000166c:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000166e:	482b      	ldr	r0, [pc, #172]	; (6000171c <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001670:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001674:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001678:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000167a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000167e:	4828      	ldr	r0, [pc, #160]	; (60001720 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001680:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001684:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001686:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000168a:	4826      	ldr	r0, [pc, #152]	; (60001724 <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000168c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001690:	4a25      	ldr	r2, [pc, #148]	; (60001728 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001692:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001696:	4c25      	ldr	r4, [pc, #148]	; (6000172c <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001698:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000169c:	4824      	ldr	r0, [pc, #144]	; (60001730 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000169e:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016a6:	4c23      	ldr	r4, [pc, #140]	; (60001734 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016a8:	4823      	ldr	r0, [pc, #140]	; (60001738 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016aa:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016b2:	4c22      	ldr	r4, [pc, #136]	; (6000173c <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016b8:	4821      	ldr	r0, [pc, #132]	; (60001740 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016ba:	4a22      	ldr	r2, [pc, #136]	; (60001744 <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016bc:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016c0:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016c4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016c8:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016cc:	4c1e      	ldr	r4, [pc, #120]	; (60001748 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ce:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016d0:	481e      	ldr	r0, [pc, #120]	; (6000174c <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016d2:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016d6:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016da:	4a1d      	ldr	r2, [pc, #116]	; (60001750 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016e0:	4c1c      	ldr	r4, [pc, #112]	; (60001754 <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016e2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016e6:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016e8:	481b      	ldr	r0, [pc, #108]	; (60001758 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016ea:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600016ee:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600016f2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600016f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016fa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600016fe:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001702:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001706:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000170a:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
6000170e:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001712:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001716:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000171a:	4770      	bx	lr
6000171c:	1000003f 	.word	0x1000003f
60001720:	03080025 	.word	0x03080025
60001724:	00100009 	.word	0x00100009
60001728:	200150e0 	.word	0x200150e0
6000172c:	00200013 	.word	0x00200013
60001730:	07020021 	.word	0x07020021
60001734:	20000014 	.word	0x20000014
60001738:	13080025 	.word	0x13080025
6000173c:	10000009 	.word	0x10000009
60001740:	20200016 	.word	0x20200016
60001744:	130b0027 	.word	0x130b0027
60001748:	40000017 	.word	0x40000017
6000174c:	60000018 	.word	0x60000018
60001750:	070b002f 	.word	0x070b002f
60001754:	70000019 	.word	0x70000019
60001758:	130b002f 	.word	0x130b002f

6000175c <configure_external_ram>:
{
6000175c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000175e:	4bb8      	ldr	r3, [pc, #736]	; (60001a40 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001760:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001762:	4eb8      	ldr	r6, [pc, #736]	; (60001a44 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001764:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001766:	4fb8      	ldr	r7, [pc, #736]	; (60001a48 <configure_external_ram+0x2ec>)
{
60001768:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000176a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000176e:	49b7      	ldr	r1, [pc, #732]	; (60001a4c <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001770:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001774:	4db6      	ldr	r5, [pc, #728]	; (60001a50 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001776:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000177a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000177e:	4cb5      	ldr	r4, [pc, #724]	; (60001a54 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001780:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001784:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001788:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000178c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001790:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001794:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001798:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000179a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000179c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000179e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600017a0:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600017a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600017ae:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017b2:	4aa9      	ldr	r2, [pc, #676]	; (60001a58 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600017b4:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600017b8:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600017bc:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600017c0:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600017c4:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017c8:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017ca:	4ba4      	ldr	r3, [pc, #656]	; (60001a5c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017cc:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017ce:	48a4      	ldr	r0, [pc, #656]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017d0:	49a4      	ldr	r1, [pc, #656]	; (60001a64 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600017d2:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017d4:	4aa4      	ldr	r2, [pc, #656]	; (60001a68 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600017d6:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600017d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
600017dc:	f043 030c 	orr.w	r3, r3, #12
600017e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017e4:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600017e8:	6803      	ldr	r3, [r0, #0]
600017ea:	f043 0302 	orr.w	r3, r3, #2
600017ee:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017f0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600017f4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600017f8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600017fa:	4b9c      	ldr	r3, [pc, #624]	; (60001a6c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600017fc:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600017fe:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001800:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001802:	4c9b      	ldr	r4, [pc, #620]	; (60001a70 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001804:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001806:	4a9b      	ldr	r2, [pc, #620]	; (60001a74 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001808:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000180c:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
6000180e:	68c3      	ldr	r3, [r0, #12]
60001810:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001814:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001816:	6a03      	ldr	r3, [r0, #32]
60001818:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000181a:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181c:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000181e:	6a03      	ldr	r3, [r0, #32]
60001820:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001822:	4a95      	ldr	r2, [pc, #596]	; (60001a78 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001824:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001826:	4c95      	ldr	r4, [pc, #596]	; (60001a7c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001828:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000182a:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
6000182c:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
6000182e:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001830:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001834:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001838:	f043 0301 	orr.w	r3, r3, #1
6000183c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001840:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001844:	498e      	ldr	r1, [pc, #568]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001846:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000184a:	f043 0301 	orr.w	r3, r3, #1
6000184e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001852:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001856:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001858:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000185a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000185c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001860:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001862:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001864:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001866:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000186a:	6803      	ldr	r3, [r0, #0]
6000186c:	f023 0302 	bic.w	r3, r3, #2
60001870:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001872:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001874:	4b83      	ldr	r3, [pc, #524]	; (60001a84 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001876:	4984      	ldr	r1, [pc, #528]	; (60001a88 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001878:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000187a:	f843 2b04 	str.w	r2, [r3], #4
6000187e:	428b      	cmp	r3, r1
60001880:	d1fb      	bne.n	6000187a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001882:	4a77      	ldr	r2, [pc, #476]	; (60001a60 <configure_external_ram+0x304>)
60001884:	6813      	ldr	r3, [r2, #0]
60001886:	f043 0301 	orr.w	r3, r3, #1
6000188a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000188c:	6813      	ldr	r3, [r2, #0]
6000188e:	f013 0301 	ands.w	r3, r3, #1
60001892:	d1fb      	bne.n	6000188c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001894:	487a      	ldr	r0, [pc, #488]	; (60001a80 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001896:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001898:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000189c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000189e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600018a2:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018a4:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600018a8:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018ac:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600018b0:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018b4:	4975      	ldr	r1, [pc, #468]	; (60001a8c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600018b6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600018ba:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018be:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018c2:	4873      	ldr	r0, [pc, #460]	; (60001a90 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600018c4:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600018c8:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018cc:	4c71      	ldr	r4, [pc, #452]	; (60001a94 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600018ce:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018d2:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600018d6:	4970      	ldr	r1, [pc, #448]	; (60001a98 <configure_external_ram+0x33c>)
600018d8:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018dc:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600018de:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600018e2:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018e6:	485e      	ldr	r0, [pc, #376]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600018e8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018f4:	6943      	ldr	r3, [r0, #20]
600018f6:	07da      	lsls	r2, r3, #31
600018f8:	d5fc      	bpl.n	600018f4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600018fa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600018fc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001902:	4957      	ldr	r1, [pc, #348]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001906:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000190a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000190e:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001912:	694b      	ldr	r3, [r1, #20]
60001914:	07db      	lsls	r3, r3, #31
60001916:	d5fc      	bpl.n	60001912 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001918:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000191a:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000191c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001920:	4a4f      	ldr	r2, [pc, #316]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001922:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001924:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001928:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000192c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001930:	6953      	ldr	r3, [r2, #20]
60001932:	07df      	lsls	r7, r3, #31
60001934:	d5fc      	bpl.n	60001930 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001936:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001938:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000193a:	4858      	ldr	r0, [pc, #352]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000193c:	4948      	ldr	r1, [pc, #288]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000193e:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001940:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001944:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001948:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000194c:	694b      	ldr	r3, [r1, #20]
6000194e:	07de      	lsls	r6, r3, #31
60001950:	d5fc      	bpl.n	6000194c <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001952:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001956:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000195c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000195e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001960:	4293      	cmp	r3, r2
60001962:	d165      	bne.n	60001a30 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001964:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001966:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000196a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000196c:	483c      	ldr	r0, [pc, #240]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000196e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001972:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001976:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000197a:	6943      	ldr	r3, [r0, #20]
6000197c:	07dd      	lsls	r5, r3, #31
6000197e:	d5fc      	bpl.n	6000197a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001980:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001982:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001986:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001988:	4a35      	ldr	r2, [pc, #212]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000198a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000198c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001990:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001994:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001998:	6953      	ldr	r3, [r2, #20]
6000199a:	07dc      	lsls	r4, r3, #31
6000199c:	d5fc      	bpl.n	60001998 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000199e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019a0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019a8:	492d      	ldr	r1, [pc, #180]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019aa:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ac:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019b0:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019b8:	694b      	ldr	r3, [r1, #20]
600019ba:	07d8      	lsls	r0, r3, #31
600019bc:	d5fc      	bpl.n	600019b8 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019be:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019c8:	4a25      	ldr	r2, [pc, #148]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019ca:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600019cc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600019d0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019d4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019d8:	6953      	ldr	r3, [r2, #20]
600019da:	07d9      	lsls	r1, r3, #31
600019dc:	d5fc      	bpl.n	600019d8 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019de:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600019e0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019e4:	482d      	ldr	r0, [pc, #180]	; (60001a9c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019e6:	491e      	ldr	r1, [pc, #120]	; (60001a60 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600019e8:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600019ea:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600019ee:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019f6:	694b      	ldr	r3, [r1, #20]
600019f8:	07da      	lsls	r2, r3, #31
600019fa:	d5fc      	bpl.n	600019f6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600019fc:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a00:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a04:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001a06:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001a08:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001a0a:	4293      	cmp	r3, r2
60001a0c:	d050      	beq.n	60001ab0 <configure_external_ram+0x354>
60001a0e:	2508      	movs	r5, #8
60001a10:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001a14:	4922      	ldr	r1, [pc, #136]	; (60001aa0 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a16:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001a18:	4b22      	ldr	r3, [pc, #136]	; (60001aa4 <configure_external_ram+0x348>)
			external_psram_size = 16;
60001a1a:	4a23      	ldr	r2, [pc, #140]	; (60001aa8 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a1c:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001a1e:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001a20:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001a22:	2301      	movs	r3, #1
60001a24:	4821      	ldr	r0, [pc, #132]	; (60001aac <configure_external_ram+0x350>)
60001a26:	4422      	add	r2, r4
60001a28:	f000 f9fa 	bl	60001e20 <__sm_set_pool_veneer>
}
60001a2c:	b003      	add	sp, #12
60001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001a30:	4b1e      	ldr	r3, [pc, #120]	; (60001aac <configure_external_ram+0x350>)
60001a32:	2200      	movs	r2, #0
60001a34:	e9c3 2200 	strd	r2, r2, [r3]
60001a38:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001a3c:	b003      	add	sp, #12
60001a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001a40:	401f8000 	.word	0x401f8000
60001a44:	0001b0f9 	.word	0x0001b0f9
60001a48:	000110f9 	.word	0x000110f9
60001a4c:	401f8400 	.word	0x401f8400
60001a50:	000170f9 	.word	0x000170f9
60001a54:	400fc000 	.word	0x400fc000
60001a58:	1ffffcff 	.word	0x1ffffcff
60001a5c:	a0000300 	.word	0xa0000300
60001a60:	402a4000 	.word	0x402a4000
60001a64:	402a8000 	.word	0x402a8000
60001a68:	ffff0012 	.word	0xffff0012
60001a6c:	00f737ff 	.word	0x00f737ff
60001a70:	80000040 	.word	0x80000040
60001a74:	7cf0ff00 	.word	0x7cf0ff00
60001a78:	830f00ff 	.word	0x830f00ff
60001a7c:	00020063 	.word	0x00020063
60001a80:	5af05af0 	.word	0x5af05af0
60001a84:	402a4200 	.word	0x402a4200
60001a88:	402a4300 	.word	0x402a4300
60001a8c:	3018049f 	.word	0x3018049f
60001a90:	0a1806eb 	.word	0x0a1806eb
60001a94:	0a180638 	.word	0x0a180638
60001a98:	26013206 	.word	0x26013206
60001a9c:	00030004 	.word	0x00030004
60001aa0:	70000000 	.word	0x70000000
60001aa4:	70000000 	.word	0x70000000
60001aa8:	2001509f 	.word	0x2001509f
60001aac:	20004fe0 	.word	0x20004fe0
	FLEXSPI2_IPCR0 = addr;
60001ab0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ab4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ab8:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001aba:	4808      	ldr	r0, [pc, #32]	; (60001adc <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001abc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ac0:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ac4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001ac8:	6943      	ldr	r3, [r0, #20]
60001aca:	07db      	lsls	r3, r3, #31
60001acc:	d5fc      	bpl.n	60001ac8 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ace:	2301      	movs	r3, #1
60001ad0:	2510      	movs	r5, #16
60001ad2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001ad6:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001ad8:	e79c      	b.n	60001a14 <configure_external_ram+0x2b8>
60001ada:	bf00      	nop
60001adc:	402a4000 	.word	0x402a4000

60001ae0 <usb_pll_start>:
{
60001ae0:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ae2:	4a15      	ldr	r2, [pc, #84]	; (60001b38 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001ae4:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001ae6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001aea:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001aee:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001af2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001af6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001afa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001afc:	f013 0f02 	tst.w	r3, #2
60001b00:	d10e      	bne.n	60001b20 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001b06:	d00f      	beq.n	60001b28 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001b08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001b0c:	d00e      	beq.n	60001b2c <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001b0e:	2b00      	cmp	r3, #0
60001b10:	daf3      	bge.n	60001afa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001b12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001b16:	d10b      	bne.n	60001b30 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001b18:	065b      	lsls	r3, r3, #25
60001b1a:	d50b      	bpl.n	60001b34 <usb_pll_start+0x54>
}
60001b1c:	bcf0      	pop	{r4, r5, r6, r7}
60001b1e:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b20:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b22:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b24:	6190      	str	r0, [r2, #24]
			continue;
60001b26:	e7e8      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b28:	6155      	str	r5, [r2, #20]
			continue;
60001b2a:	e7e6      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b2c:	6156      	str	r6, [r2, #20]
			continue;
60001b2e:	e7e4      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b30:	6191      	str	r1, [r2, #24]
			continue;
60001b32:	e7e2      	b.n	60001afa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b34:	6157      	str	r7, [r2, #20]
			continue;
60001b36:	e7e0      	b.n	60001afa <usb_pll_start+0x1a>
60001b38:	400d8000 	.word	0x400d8000

60001b3c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b3c:	4a3f      	ldr	r2, [pc, #252]	; (60001c3c <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b3e:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001b40:	493f      	ldr	r1, [pc, #252]	; (60001c40 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b42:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001b4a:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b4e:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001c44 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b52:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b56:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001c48 <tempmon_init+0x10c>
{
60001b5a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001b5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001b60:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001b64:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b68:	4d38      	ldr	r5, [pc, #224]	; (60001c4c <tempmon_init+0x110>)
60001b6a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b6c:	4c38      	ldr	r4, [pc, #224]	; (60001c50 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b6e:	4839      	ldr	r0, [pc, #228]	; (60001c54 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001b70:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b72:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b76:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b78:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001b80:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b84:	ee07 1a10 	vmov	s14, r1
60001b88:	4b33      	ldr	r3, [pc, #204]	; (60001c58 <tempmon_init+0x11c>)
60001b8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001b8e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b90:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001b94:	4931      	ldr	r1, [pc, #196]	; (60001c5c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b96:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001b9a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001b9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ba2:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001ba6:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001baa:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bae:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bb2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bb6:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bba:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bbe:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001bc2:	4827      	ldr	r0, [pc, #156]	; (60001c60 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc4:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bc8:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bcc:	ee75 5a87 	vadd.f32	s11, s11, s14
60001bd0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bd4:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001bd8:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001be4:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001be8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bec:	ee16 3a10 	vmov	r3, s12
60001bf0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001bf8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001bfc:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bfe:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c02:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001c0a:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001c0e:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001c10:	4914      	ldr	r1, [pc, #80]	; (60001c64 <tempmon_init+0x128>)
60001c12:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001c16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001c1a:	f043 0302 	orr.w	r3, r3, #2
60001c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001c22:	4b11      	ldr	r3, [pc, #68]	; (60001c68 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001c24:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001c28:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001c30:	2201      	movs	r2, #1
}
60001c32:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001c34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001c38:	4770      	bx	lr
60001c3a:	bf00      	nop
60001c3c:	400d8100 	.word	0x400d8100
60001c40:	401f4400 	.word	0x401f4400
60001c44:	42aa0000 	.word	0x42aa0000
60001c48:	42b40000 	.word	0x42b40000
60001c4c:	20015058 	.word	0x20015058
60001c50:	20015054 	.word	0x20015054
60001c54:	2001505c 	.word	0x2001505c
60001c58:	20015060 	.word	0x20015060
60001c5c:	0fff0000 	.word	0x0fff0000
60001c60:	e000e400 	.word	0xe000e400
60001c64:	20004800 	.word	0x20004800
60001c68:	00007349 	.word	0x00007349

60001c6c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c6c:	4b31      	ldr	r3, [pc, #196]	; (60001d34 <usb_init+0xc8>)
60001c6e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001c72:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001c74:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001c78:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001c7c:	f000 f8c4 	bl	60001e08 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c80:	4a2d      	ldr	r2, [pc, #180]	; (60001d38 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001c82:	492e      	ldr	r1, [pc, #184]	; (60001d3c <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c84:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c88:	482d      	ldr	r0, [pc, #180]	; (60001d40 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001c8a:	f043 0303 	orr.w	r3, r3, #3
60001c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c92:	4b2c      	ldr	r3, [pc, #176]	; (60001d44 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001c94:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001c98:	6802      	ldr	r2, [r0, #0]
60001c9a:	421a      	tst	r2, r3
60001c9c:	d103      	bne.n	60001ca6 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001c9e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001ca2:	079a      	lsls	r2, r3, #30
60001ca4:	d01b      	beq.n	60001cde <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001ca6:	4a25      	ldr	r2, [pc, #148]	; (60001d3c <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001ca8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001cac:	4b24      	ldr	r3, [pc, #144]	; (60001d40 <usb_init+0xd4>)
60001cae:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001cb0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cb4:	f043 0302 	orr.w	r3, r3, #2
60001cb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001cbc:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001cc0:	079b      	lsls	r3, r3, #30
60001cc2:	d4fb      	bmi.n	60001cbc <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001cc8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001ccc:	4b1c      	ldr	r3, [pc, #112]	; (60001d40 <usb_init+0xd4>)
60001cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001cd2:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001cd6:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001cd8:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001cda:	f000 f8b1 	bl	60001e40 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001cde:	4a18      	ldr	r2, [pc, #96]	; (60001d40 <usb_init+0xd4>)
60001ce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001ce4:	4c15      	ldr	r4, [pc, #84]	; (60001d3c <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001ce6:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001ce8:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cea:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cec:	4b16      	ldr	r3, [pc, #88]	; (60001d48 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001cee:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001cf4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001cf8:	4618      	mov	r0, r3
60001cfa:	f000 f89d 	bl	60001e38 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001cfe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001d02:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d04:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d08:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001d0c:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001d0e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001d12:	641a      	str	r2, [r3, #64]	; 0x40
60001d14:	4b0d      	ldr	r3, [pc, #52]	; (60001d4c <usb_init+0xe0>)
60001d16:	4a0e      	ldr	r2, [pc, #56]	; (60001d50 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001d18:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001d24:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001d28:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001d2a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001d2e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001d32:	bd10      	pop	{r4, pc}
60001d34:	400d8000 	.word	0x400d8000
60001d38:	400fc000 	.word	0x400fc000
60001d3c:	402e0000 	.word	0x402e0000
60001d40:	400d9000 	.word	0x400d9000
60001d44:	001e1c00 	.word	0x001e1c00
60001d48:	20000000 	.word	0x20000000
60001d4c:	20004800 	.word	0x20004800
60001d50:	00007531 	.word	0x00007531

60001d54 <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001d54:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001d56:	4b0e      	ldr	r3, [pc, #56]	; (60001d90 <_reboot_Teensyduino_+0x3c>)
60001d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001d5a:	079b      	lsls	r3, r3, #30
60001d5c:	d400      	bmi.n	60001d60 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001d5e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001d60:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001d62:	4b0c      	ldr	r3, [pc, #48]	; (60001d94 <_reboot_Teensyduino_+0x40>)
60001d64:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d66:	4a0c      	ldr	r2, [pc, #48]	; (60001d98 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001d68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d70:	490a      	ldr	r1, [pc, #40]	; (60001d9c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d72:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001d76:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001d78:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001d7a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001d82:	4807      	ldr	r0, [pc, #28]	; (60001da0 <_reboot_Teensyduino_+0x4c>)
60001d84:	4a07      	ldr	r2, [pc, #28]	; (60001da4 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d86:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001d88:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001d8a:	689b      	ldr	r3, [r3, #8]
60001d8c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001d8e:	bf00      	nop
60001d90:	401f4400 	.word	0x401f4400
60001d94:	402e0000 	.word	0x402e0000
60001d98:	400ac000 	.word	0x400ac000
60001d9c:	00200003 	.word	0x00200003
60001da0:	20208000 	.word	0x20208000
60001da4:	eb120000 	.word	0xeb120000

60001da8 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001da8:	4b10      	ldr	r3, [pc, #64]	; (60001dec <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001daa:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dac:	4a10      	ldr	r2, [pc, #64]	; (60001df0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001db0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001db4:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001db6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001db8:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001dbe:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001dc2:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc4:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dc6:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001dc8:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001dca:	061b      	lsls	r3, r3, #24
60001dcc:	d4fc      	bmi.n	60001dc8 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dce:	4a09      	ldr	r2, [pc, #36]	; (60001df4 <analog_init+0x4c>)
60001dd0:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd4:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001dd6:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dd8:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001dda:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001ddc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001de0:	d1fb      	bne.n	60001dda <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001de2:	4a05      	ldr	r2, [pc, #20]	; (60001df8 <analog_init+0x50>)
60001de4:	7013      	strb	r3, [r2, #0]
}
60001de6:	f85d 4b04 	ldr.w	r4, [sp], #4
60001dea:	4770      	bx	lr
60001dec:	400fc000 	.word	0x400fc000
60001df0:	400c4000 	.word	0x400c4000
60001df4:	400c8000 	.word	0x400c8000
60001df8:	20015099 	.word	0x20015099

60001dfc <_init>:
60001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001dfe:	bf00      	nop
60001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001e02:	bc08      	pop	{r3}
60001e04:	469e      	mov	lr, r3
60001e06:	4770      	bx	lr

60001e08 <__usb_init_serialnumber_veneer>:
60001e08:	f85f f000 	ldr.w	pc, [pc]	; 60001e0c <__usb_init_serialnumber_veneer+0x4>
60001e0c:	00007ca1 	.word	0x00007ca1

60001e10 <__set_arm_clock_veneer>:
60001e10:	f85f f000 	ldr.w	pc, [pc]	; 60001e14 <__set_arm_clock_veneer+0x4>
60001e14:	000085a9 	.word	0x000085a9

60001e18 <__pwm_init_veneer>:
60001e18:	f85f f000 	ldr.w	pc, [pc]	; 60001e1c <__pwm_init_veneer+0x4>
60001e1c:	00008915 	.word	0x00008915

60001e20 <__sm_set_pool_veneer>:
60001e20:	f85f f000 	ldr.w	pc, [pc]	; 60001e24 <__sm_set_pool_veneer+0x4>
60001e24:	00008a7d 	.word	0x00008a7d

60001e28 <__main_veneer>:
60001e28:	f85f f000 	ldr.w	pc, [pc]	; 60001e2c <__main_veneer+0x4>
60001e2c:	00006fc5 	.word	0x00006fc5

60001e30 <____libc_init_array_veneer>:
60001e30:	f85f f000 	ldr.w	pc, [pc]	; 60001e34 <____libc_init_array_veneer+0x4>
60001e34:	00009ddd 	.word	0x00009ddd

60001e38 <__memset_veneer>:
60001e38:	f85f f000 	ldr.w	pc, [pc]	; 60001e3c <__memset_veneer+0x4>
60001e3c:	00009b25 	.word	0x00009b25

60001e40 <__delay_veneer>:
60001e40:	f85f f000 	ldr.w	pc, [pc]	; 60001e44 <__delay_veneer+0x4>
60001e44:	00006ead 	.word	0x00006ead

60001e48 <__frame_dummy_init_array_entry>:
60001e48:	00000045 000069cd                       E....i..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
	// stop the SRTC
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
	// set the SRTC
	SNVS_LPSRTCLR = t << 15;
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
	SNVS_LPSRTCMR = t >> 17;
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
	SNVS_LPSRTCMR = t >> 17;
      24:	1a1b      	subs	r3, r3, r0
	SNVS_LPSRTCLR = t << 15;
      26:	0fd9      	lsrs	r1, r3, #31
	SNVS_LPSRTCMR = t >> 17;
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	4718      	bx	r3
      36:	4770      	bx	lr
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
      38:	20004ac0 	.word	0x20004ac0
      3c:	20004ac0 	.word	0x20004ac0
}
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
}
      60:	20015000 	.word	0x20015000
      64:	60016c00 	.word	0x60016c00

00000068 <Print::println(char const*) [clone .isra.0]>:
      68:	b538      	push	{r3, r4, r5, lr}
      6a:	4604      	mov	r4, r0
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      6c:	b149      	cbz	r1, 82 <Print::println(char const*) [clone .isra.0]+0x1a>
      6e:	4608      	mov	r0, r1
      70:	460d      	mov	r5, r1
		return ADC2_R0;
      72:	f00a f8c5 	bl	a200 <strlen>
}
      76:	6823      	ldr	r3, [r4, #0]
	if (pin > sizeof(pin_to_channel)) return 0;
      78:	4602      	mov	r2, r0
}
      7a:	4629      	mov	r1, r5
      7c:	685b      	ldr	r3, [r3, #4]
      7e:	4620      	mov	r0, r4
      80:	4798      	blx	r3
      82:	4620      	mov	r0, r4
      84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      88:	f006 bce0 	b.w	6a4c <Print::println()>

0000008c <check_for_CLK_activity()>:
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	4a0e      	ldr	r2, [pc, #56]	; (c8 <check_for_CLK_activity()+0x3c>)
      8e:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
      92:	6811      	ldr	r1, [r2, #0]
	}
	//printf(" div=%lu, scale=%lu\n", newdiv, prescale);
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
      94:	e004      	b.n	a0 <check_for_CLK_activity()+0x14>
      96:	6813      	ldr	r3, [r2, #0]
      98:	1a5b      	subs	r3, r3, r1
      9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
      9e:	d812      	bhi.n	c6 <check_for_CLK_activity()+0x3a>
      a0:	f8dc 0000 	ldr.w	r0, [ip]
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
      a4:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
      a8:	d0f5      	beq.n	96 <check_for_CLK_activity()+0xa>
      aa:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
      ae:	e004      	b.n	ba <check_for_CLK_activity()+0x2e>
      b0:	6813      	ldr	r3, [r2, #0]
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      b2:	1a5b      	subs	r3, r3, r1
      b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
      b8:	d804      	bhi.n	c4 <check_for_CLK_activity()+0x38>
      ba:	6803      	ldr	r3, [r0, #0]
      bc:	04db      	lsls	r3, r3, #19
      be:	d4f7      	bmi.n	b0 <check_for_CLK_activity()+0x24>
      c0:	2001      	movs	r0, #1
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	4770      	bx	lr
      c4:	2000      	movs	r0, #0
      c6:	4770      	bx	lr
      c8:	2001506c 	.word	0x2001506c

000000cc <setup>:
      cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
}
      d0:	2100      	movs	r1, #0
	while (newdiv > 65535 && prescale < 7) {
      d2:	b089      	sub	sp, #36	; 0x24
      d4:	2018      	movs	r0, #24
      d6:	4d93      	ldr	r5, [pc, #588]	; (324 <setup+0x258>)
      d8:	f006 ff3c 	bl	6f54 <pinMode>
            end_idx = args.length();
    }

    String rv = args.substring(start_idx, end_idx);
    return(rv);
}
      dc:	2100      	movs	r1, #0
      de:	2028      	movs	r0, #40	; 0x28
      e0:	4c91      	ldr	r4, [pc, #580]	; (328 <setup+0x25c>)
        return("");
      e2:	f006 ff37 	bl	6f54 <pinMode>
      e6:	2100      	movs	r1, #0
      e8:	201a      	movs	r0, #26
}
      ea:	4f90      	ldr	r7, [pc, #576]	; (32c <setup+0x260>)
      ec:	f006 ff32 	bl	6f54 <pinMode>
      f0:	2100      	movs	r1, #0
      f2:	2019      	movs	r0, #25
      f4:	f8df 9288 	ldr.w	r9, [pc, #648]	; 380 <setup+0x2b4>
      f8:	f006 ff2c 	bl	6f54 <pinMode>
      fc:	2100      	movs	r1, #0
      fe:	2029      	movs	r0, #41	; 0x29
     100:	f240 28ee 	movw	r8, #750	; 0x2ee
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
     104:	f006 ff26 	bl	6f54 <pinMode>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     108:	2101      	movs	r1, #1
     10a:	200c      	movs	r0, #12
     10c:	f006 ff22 	bl	6f54 <pinMode>
	if (newbuffer) {
     110:	2101      	movs	r1, #1
     112:	2027      	movs	r0, #39	; 0x27
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
		int index = len - 1;
     114:	f006 ff1e 	bl	6f54 <pinMode>
		capacity = maxStrLen;
     118:	2101      	movs	r1, #1
		return 1;
     11a:	201b      	movs	r0, #27
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     11c:	f006 ff1a 	bl	6f54 <pinMode>
     120:	2101      	movs	r1, #1
     122:	2026      	movs	r0, #38	; 0x26
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
     124:	f006 ff16 	bl	6f54 <pinMode>
     128:	2101      	movs	r1, #1
	mask = p->mask;
	if (pinmode & mask) {
     12a:	201c      	movs	r0, #28
     12c:	f006 ff12 	bl	6f54 <pinMode>
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     130:	2101      	movs	r1, #1
	pinmode = *(p->reg + 1);
     132:	2025      	movs	r0, #37	; 0x25
	mask = p->mask;
     134:	f006 ff0e 	bl	6f54 <pinMode>
	if (pinmode & mask) {
     138:	2101      	movs	r1, #1
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     13a:	201d      	movs	r0, #29
     13c:	f006 ff0a 	bl	6f54 <pinMode>
     140:	2101      	movs	r1, #1
     142:	2024      	movs	r0, #36	; 0x24
     144:	f006 ff06 	bl	6f54 <pinMode>
     148:	2101      	movs	r1, #1
     14a:	201e      	movs	r0, #30
     14c:	f006 ff02 	bl	6f54 <pinMode>
     150:	2101      	movs	r1, #1
     152:	2023      	movs	r0, #35	; 0x23
     154:	f006 fefe 	bl	6f54 <pinMode>
     158:	2101      	movs	r1, #1
     15a:	201f      	movs	r0, #31
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
     15c:	f006 fefa 	bl	6f54 <pinMode>
     160:	2101      	movs	r1, #1
     162:	2022      	movs	r0, #34	; 0x22
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     164:	f006 fef6 	bl	6f54 <pinMode>
     168:	2101      	movs	r1, #1
	NVIC_ENABLE_IRQ(hardware->irq);
     16a:	2020      	movs	r0, #32
     16c:	f006 fef2 	bl	6f54 <pinMode>
     170:	2101      	movs	r1, #1
     172:	2021      	movs	r0, #33	; 0x21
     174:	f006 feee 	bl	6f54 <pinMode>
     178:	2101      	movs	r1, #1
     17a:	4608      	mov	r0, r1
     17c:	f006 feea 	bl	6f54 <pinMode>
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     180:	2101      	movs	r1, #1
     182:	2000      	movs	r0, #0
     184:	f006 fee6 	bl	6f54 <pinMode>
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     188:	2101      	movs	r1, #1
     18a:	2002      	movs	r0, #2
     18c:	f006 fee2 	bl	6f54 <pinMode>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     190:	2101      	movs	r1, #1
     192:	2017      	movs	r0, #23
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     194:	f006 fede 	bl	6f54 <pinMode>
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     198:	2100      	movs	r1, #0
     19a:	200e      	movs	r0, #14
     19c:	f006 feda 	bl	6f54 <pinMode>
     1a0:	2100      	movs	r1, #0
     1a2:	200f      	movs	r0, #15
     1a4:	f006 fed6 	bl	6f54 <pinMode>

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1a8:	2100      	movs	r1, #0
     1aa:	2010      	movs	r0, #16
     1ac:	f006 fed2 	bl	6f54 <pinMode>

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1b0:	2100      	movs	r1, #0
     1b2:	2011      	movs	r0, #17
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1b4:	f006 fece 	bl	6f54 <pinMode>
     1b8:	2100      	movs	r1, #0
     1ba:	2012      	movs	r0, #18
     1bc:	f006 feca 	bl	6f54 <pinMode>
     1c0:	2100      	movs	r1, #0

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c2:	2013      	movs	r0, #19
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1c4:	f006 fec6 	bl	6f54 <pinMode>
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1c8:	2100      	movs	r1, #0
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1ca:	2014      	movs	r0, #20
     1cc:	f006 fec2 	bl	6f54 <pinMode>
	port->STAT = c;

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d0:	2100      	movs	r1, #0
	port->STAT = c;
     1d2:	2015      	movs	r0, #21
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1d4:	f006 febe 	bl	6f54 <pinMode>
     1d8:	2101      	movs	r1, #1
     1da:	200b      	movs	r0, #11
     1dc:	f006 feba 	bl	6f54 <pinMode>

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     1e0:	2101      	movs	r1, #1
     1e2:	200a      	movs	r0, #10
};
     1e4:	f006 feb6 	bl	6f54 <pinMode>
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1e8:	2101      	movs	r1, #1
     1ea:	2009      	movs	r0, #9
     1ec:	f006 feb2 	bl	6f54 <pinMode>
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     1f0:	2101      	movs	r1, #1
     1f2:	2008      	movs	r0, #8
     1f4:	f006 feae 	bl	6f54 <pinMode>
     1f8:	2101      	movs	r1, #1
     1fa:	2007      	movs	r0, #7
     1fc:	f006 feaa 	bl	6f54 <pinMode>
     200:	2101      	movs	r1, #1
     202:	2006      	movs	r0, #6
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     204:	f006 fea6 	bl	6f54 <pinMode>
     208:	2101      	movs	r1, #1
     20a:	2005      	movs	r0, #5
     20c:	f006 fea2 	bl	6f54 <pinMode>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     210:	2101      	movs	r1, #1
     212:	2004      	movs	r0, #4
     214:	f006 fe9e 	bl	6f54 <pinMode>
     218:	2101      	movs	r1, #1
     21a:	2003      	movs	r0, #3
     21c:	f006 fe9a 	bl	6f54 <pinMode>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     220:	f44f 6200 	mov.w	r2, #2048	; 0x800
     224:	4942      	ldr	r1, [pc, #264]	; (330 <setup+0x264>)
     226:	4843      	ldr	r0, [pc, #268]	; (334 <setup+0x268>)
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     228:	f006 fed4 	bl	6fd4 <memcpy>
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     22c:	f44f 6200 	mov.w	r2, #2048	; 0x800
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     230:	4941      	ldr	r1, [pc, #260]	; (338 <setup+0x26c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     232:	4842      	ldr	r0, [pc, #264]	; (33c <setup+0x270>)
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     234:	f006 fece 	bl	6fd4 <memcpy>
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     238:	f44f 6200 	mov.w	r2, #2048	; 0x800
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     23c:	4940      	ldr	r1, [pc, #256]	; (340 <setup+0x274>)
     23e:	4841      	ldr	r0, [pc, #260]	; (344 <setup+0x278>)
};
     240:	f006 fec8 	bl	6fd4 <memcpy>
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     244:	f44f 6200 	mov.w	r2, #2048	; 0x800
     248:	493f      	ldr	r1, [pc, #252]	; (348 <setup+0x27c>)
     24a:	4840      	ldr	r0, [pc, #256]	; (34c <setup+0x280>)
     24c:	f006 fec2 	bl	6fd4 <memcpy>
     250:	f44f 6200 	mov.w	r2, #2048	; 0x800
     254:	493e      	ldr	r1, [pc, #248]	; (350 <setup+0x284>)
     256:	483f      	ldr	r0, [pc, #252]	; (354 <setup+0x288>)
     258:	f006 febc 	bl	6fd4 <memcpy>
     25c:	f44f 6200 	mov.w	r2, #2048	; 0x800
     260:	493d      	ldr	r1, [pc, #244]	; (358 <setup+0x28c>)
     262:	483e      	ldr	r0, [pc, #248]	; (35c <setup+0x290>)
     264:	f006 feb6 	bl	6fd4 <memcpy>
     268:	682e      	ldr	r6, [r5, #0]
     26a:	f008 f8f1 	bl	8450 <yield>
     26e:	7823      	ldrb	r3, [r4, #0]
     270:	2b00      	cmp	r3, #0
     272:	d03c      	beq.n	2ee <setup+0x222>
     274:	783b      	ldrb	r3, [r7, #0]
     276:	07db      	lsls	r3, r3, #31
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     278:	d539      	bpl.n	2ee <setup+0x222>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     27a:	682b      	ldr	r3, [r5, #0]
     27c:	f8d9 2000 	ldr.w	r2, [r9]
     280:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     282:	2b0e      	cmp	r3, #14
     284:	d933      	bls.n	2ee <setup+0x222>
    Serial.setTimeout(5000);
     286:	f241 3188 	movw	r1, #5000	; 0x1388
     28a:	4835      	ldr	r0, [pc, #212]	; (360 <setup+0x294>)
     28c:	f006 fbfe 	bl	6a8c <Stream::setTimeout(unsigned long)>
    Serial.println(String("Apple ][+ In-circuit Emulator\n\rVersion ") + VERSION_NUM);
     290:	4934      	ldr	r1, [pc, #208]	; (364 <setup+0x298>)
     292:	4668      	mov	r0, sp
     294:	f006 fc56 	bl	6b44 <String::String(char const*)>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     298:	4669      	mov	r1, sp
     29a:	a804      	add	r0, sp, #16
     29c:	f006 fbf8 	bl	6a90 <String::String(String const&)>
     2a0:	4931      	ldr	r1, [pc, #196]	; (368 <setup+0x29c>)
     2a2:	a804      	add	r0, sp, #16
     2a4:	f006 fcea 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
     2a8:	4601      	mov	r1, r0
	// Print an object instance in human readable format
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	// Print a newline
	size_t println(void);
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
     2aa:	482d      	ldr	r0, [pc, #180]	; (360 <setup+0x294>)
     2ac:	f006 fba8 	bl	6a00 <Print::print(String const&)>
     2b0:	482b      	ldr	r0, [pc, #172]	; (360 <setup+0x294>)
     2b2:	f006 fbcb 	bl	6a4c <Print::println()>
class StringSumHelper : public String
     2b6:	a804      	add	r0, sp, #16
     2b8:	f006 fc08 	bl	6acc <String::~String()>
     2bc:	4668      	mov	r0, sp
     2be:	f006 fc05 	bl	6acc <String::~String()>
    if ( !check_for_CLK_activity() ) {
     2c2:	f7ff fee3 	bl	8c <check_for_CLK_activity()>
     2c6:	b9f8      	cbnz	r0, 308 <setup+0x23c>
        debug_mode = true;
     2c8:	4828      	ldr	r0, [pc, #160]	; (36c <setup+0x2a0>)
     2ca:	2401      	movs	r4, #1
        addr_mode = All_Fast_Internal;
     2cc:	4b28      	ldr	r3, [pc, #160]	; (370 <setup+0x2a4>)
     2ce:	2203      	movs	r2, #3
        debug_mode = true;
     2d0:	7004      	strb	r4, [r0, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2d2:	2146      	movs	r1, #70	; 0x46
     2d4:	4827      	ldr	r0, [pc, #156]	; (374 <setup+0x2a8>)
        addr_mode = All_Fast_Internal;
     2d6:	701a      	strb	r2, [r3, #0]
     2d8:	f008 f83c 	bl	8354 <usb_serial_write>
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
     2dc:	4820      	ldr	r0, [pc, #128]	; (360 <setup+0x294>)
     2de:	f006 fbb5 	bl	6a4c <Print::println()>
    run_mode = WAITING;
     2e2:	4b25      	ldr	r3, [pc, #148]	; (378 <setup+0x2ac>)
     2e4:	2200      	movs	r2, #0
     2e6:	701a      	strb	r2, [r3, #0]
}
     2e8:	b009      	add	sp, #36	; 0x24
     2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     2ee:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     2f0:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     2f2:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     2f4:	b12a      	cbz	r2, 302 <setup+0x236>
				if (elapsed > 2000) break;
     2f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     2fa:	d8c4      	bhi.n	286 <setup+0x1ba>
			yield();
     2fc:	f008 f8a8 	bl	8450 <yield>
     300:	e7b3      	b.n	26a <setup+0x19e>
				if (elapsed > 750) break;
     302:	4543      	cmp	r3, r8
     304:	d9fa      	bls.n	2fc <setup+0x230>
     306:	e7be      	b.n	286 <setup+0x1ba>
        debug_mode = false;
     308:	2300      	movs	r3, #0
        addr_mode = All_External;
     30a:	4a19      	ldr	r2, [pc, #100]	; (370 <setup+0x2a4>)
        debug_mode = false;
     30c:	4c17      	ldr	r4, [pc, #92]	; (36c <setup+0x2a0>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     30e:	2146      	movs	r1, #70	; 0x46
     310:	481a      	ldr	r0, [pc, #104]	; (37c <setup+0x2b0>)
     312:	7023      	strb	r3, [r4, #0]
        addr_mode = All_External;
     314:	7013      	strb	r3, [r2, #0]
     316:	f008 f81d 	bl	8354 <usb_serial_write>
     31a:	4811      	ldr	r0, [pc, #68]	; (360 <setup+0x294>)
     31c:	f006 fb96 	bl	6a4c <Print::println()>
     320:	e7df      	b.n	2e2 <setup+0x216>
     322:	bf00      	nop
     324:	2001506c 	.word	0x2001506c
     328:	200150af 	.word	0x200150af
     32c:	200150ae 	.word	0x200150ae
     330:	200011a8 	.word	0x200011a8
     334:	20011ff0 	.word	0x20011ff0
     338:	200019a8 	.word	0x200019a8
     33c:	200127f0 	.word	0x200127f0
     340:	200021a8 	.word	0x200021a8
     344:	20012ff0 	.word	0x20012ff0
     348:	200029a8 	.word	0x200029a8
     34c:	200137f0 	.word	0x200137f0
     350:	200031a8 	.word	0x200031a8
     354:	20013ff0 	.word	0x20013ff0
     358:	200039a8 	.word	0x200039a8
     35c:	200147f0 	.word	0x200147f0
     360:	200041b0 	.word	0x200041b0
     364:	20000ed8 	.word	0x20000ed8
     368:	20000f00 	.word	0x20000f00
     36c:	200047be 	.word	0x200047be
     370:	20015098 	.word	0x20015098
     374:	20000f08 	.word	0x20000f08
     378:	200150a6 	.word	0x200150a6
     37c:	20000f50 	.word	0x20000f50
     380:	2001507c 	.word	0x2001507c

00000384 <sample_at_CLK_rising_edge()>:
    if (debug_mode)
     384:	4b21      	ldr	r3, [pc, #132]	; (40c <sample_at_CLK_rising_edge()+0x88>)
     386:	781b      	ldrb	r3, [r3, #0]
     388:	b103      	cbz	r3, 38c <sample_at_CLK_rising_edge()+0x8>
     38a:	4770      	bx	lr
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
     38c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
inline void sample_at_CLK_rising_edge() {
     390:	b500      	push	{lr}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
     392:	6813      	ldr	r3, [r2, #0]
     394:	04db      	lsls	r3, r3, #19
     396:	d4fc      	bmi.n	392 <sample_at_CLK_rising_edge()+0xe>
    while (CLK0) {}      // Wait for CLK0 to become low
     398:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     39c:	6813      	ldr	r3, [r2, #0]
     39e:	04d8      	lsls	r0, r3, #19
     3a0:	d5fc      	bpl.n	39c <sample_at_CLK_rising_edge()+0x18>
        GPIO6_data_d1 = GPIO6_DR;
     3a2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     3a6:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
     3a8:	04d9      	lsls	r1, r3, #19
     3aa:	d5fc      	bpl.n	3a6 <sample_at_CLK_rising_edge()+0x22>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
     3ac:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
     3b0:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
     3b2:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
     3b4:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
     3b8:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
     3bc:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     3be:	ea42 020e 	orr.w	r2, r2, lr
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     3c2:	f00c 0e01 	and.w	lr, ip, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
     3c6:	f000 0c10 	and.w	ip, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     3ca:	ea42 020c 	orr.w	r2, r2, ip
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     3ce:	f000 0c01 	and.w	ip, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
     3d2:	0cd8      	lsrs	r0, r3, #19
     3d4:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     3d8:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
     3da:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     3de:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     3e2:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
     3e4:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
     3e8:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     3ec:	4302      	orrs	r2, r0
     3ee:	4808      	ldr	r0, [pc, #32]	; (410 <sample_at_CLK_rising_edge()+0x8c>)
     3f0:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     3f2:	4a08      	ldr	r2, [pc, #32]	; (414 <sample_at_CLK_rising_edge()+0x90>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
     3f4:	4808      	ldr	r0, [pc, #32]	; (418 <sample_at_CLK_rising_edge()+0x94>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     3f6:	f882 c000 	strb.w	ip, [r2]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
     3fa:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     3fc:	4a07      	ldr	r2, [pc, #28]	; (41c <sample_at_CLK_rising_edge()+0x98>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     3fe:	4b08      	ldr	r3, [pc, #32]	; (420 <sample_at_CLK_rising_edge()+0x9c>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     400:	f882 e000 	strb.w	lr, [r2]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     404:	7019      	strb	r1, [r3, #0]
}
     406:	f85d fb04 	ldr.w	pc, [sp], #4
     40a:	bf00      	nop
     40c:	200047be 	.word	0x200047be
     410:	2001509a 	.word	0x2001509a
     414:	2001509b 	.word	0x2001509b
     418:	2001509d 	.word	0x2001509d
     41c:	2001509e 	.word	0x2001509e
     420:	2001509c 	.word	0x2001509c

00000424 <read_byte(unsigned short, bool)>:
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     424:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
inline uint8_t read_byte(uint16_t local_address, bool assert_sync) {
     428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     42c:	d33c      	bcc.n	4a8 <read_byte(unsigned short, bool)+0x84>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
     42e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
     432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     436:	d355      	bcc.n	4e4 <read_byte(unsigned short, bool)+0xc0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
     438:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
     43c:	b294      	uxth	r4, r2
     43e:	f5b4 4f34 	cmp.w	r4, #46080	; 0xb400
     442:	d331      	bcc.n	4a8 <read_byte(unsigned short, bool)+0x84>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
     444:	2900      	cmp	r1, #0
     446:	f000 8118 	beq.w	67a <read_byte(unsigned short, bool)+0x256>
     44a:	4cb3      	ldr	r4, [pc, #716]	; (718 <read_byte(unsigned short, bool)+0x2f4>)
     44c:	f894 8000 	ldrb.w	r8, [r4]
     450:	f1b8 0f01 	cmp.w	r8, #1
     454:	f040 814f 	bne.w	6f6 <read_byte(unsigned short, bool)+0x2d2>
    current_address = local_address;
     458:	4ab0      	ldr	r2, [pc, #704]	; (71c <read_byte(unsigned short, bool)+0x2f8>)
     45a:	f04f 0801 	mov.w	r8, #1
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
     45e:	2100      	movs	r1, #0
    current_address = local_address;
     460:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
     462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     466:	d311      	bcc.n	48c <read_byte(unsigned short, bool)+0x68>
     468:	f5a0 6240 	sub.w	r2, r0, #3072	; 0xc00
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
     46c:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
     470:	f0c0 8135 	bcc.w	6de <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x2000) && (local_address < 0x6000)) return addr_mode; //  Apple IIPlus  HIRES Page 1 and 2
     474:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
     478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
     47c:	f0c0 812f 	bcc.w	6de <read_byte(unsigned short, bool)+0x2ba>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
     480:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
     484:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     488:	f0c0 8129 	bcc.w	6de <read_byte(unsigned short, bool)+0x2ba>
        last_access_internal_RAM = 0;
     48c:	4ba4      	ldr	r3, [pc, #656]	; (720 <read_byte(unsigned short, bool)+0x2fc>)
     48e:	2200      	movs	r2, #0
        if ((run_mode != SINGLE_STEP) && assert_sync)
     490:	f1b8 0f01 	cmp.w	r8, #1
        last_access_internal_RAM = 0;
     494:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
     496:	d02f      	beq.n	4f8 <read_byte(unsigned short, bool)+0xd4>
     498:	b371      	cbz	r1, 4f8 <read_byte(unsigned short, bool)+0xd4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
     49a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
     49e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     4a6:	e027      	b.n	4f8 <read_byte(unsigned short, bool)+0xd4>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     4a8:	4b9e      	ldr	r3, [pc, #632]	; (724 <read_byte(unsigned short, bool)+0x300>)
    if (internal_address_check(local_address) > Read_Internal_Write_External) {  // Either Fast mode
     4aa:	781a      	ldrb	r2, [r3, #0]
     4ac:	2a01      	cmp	r2, #1
     4ae:	d906      	bls.n	4be <read_byte(unsigned short, bool)+0x9a>
        last_access_internal_RAM = 1;
     4b0:	4a9b      	ldr	r2, [pc, #620]	; (720 <read_byte(unsigned short, bool)+0x2fc>)
     4b2:	2101      	movs	r1, #1
        return internal_RAM[local_address];
     4b4:	4b9c      	ldr	r3, [pc, #624]	; (728 <read_byte(unsigned short, bool)+0x304>)
        last_access_internal_RAM = 1;
     4b6:	7011      	strb	r1, [r2, #0]
        return internal_RAM[local_address];
     4b8:	5c18      	ldrb	r0, [r3, r0]
}
     4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
     4be:	4a96      	ldr	r2, [pc, #600]	; (718 <read_byte(unsigned short, bool)+0x2f4>)
     4c0:	f892 8000 	ldrb.w	r8, [r2]
     4c4:	2900      	cmp	r1, #0
     4c6:	f040 80de 	bne.w	686 <read_byte(unsigned short, bool)+0x262>
     4ca:	2100      	movs	r1, #0
    current_address = local_address;
     4cc:	4a93      	ldr	r2, [pc, #588]	; (71c <read_byte(unsigned short, bool)+0x2f8>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     4ce:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    current_address = local_address;
     4d2:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     4d4:	f080 811d 	bcs.w	712 <read_byte(unsigned short, bool)+0x2ee>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
     4d8:	781b      	ldrb	r3, [r3, #0]
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
     4da:	2b01      	cmp	r3, #1
     4dc:	d9d6      	bls.n	48c <read_byte(unsigned short, bool)+0x68>
    if (debug_mode) return;
     4de:	4b93      	ldr	r3, [pc, #588]	; (72c <read_byte(unsigned short, bool)+0x308>)
     4e0:	781c      	ldrb	r4, [r3, #0]
     4e2:	e06c      	b.n	5be <read_byte(unsigned short, bool)+0x19a>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
     4e4:	2900      	cmp	r1, #0
     4e6:	f040 813d 	bne.w	764 <read_byte(unsigned short, bool)+0x340>
     4ea:	4b8b      	ldr	r3, [pc, #556]	; (718 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
     4ec:	4c8b      	ldr	r4, [pc, #556]	; (71c <read_byte(unsigned short, bool)+0x2f8>)
        last_access_internal_RAM = 0;
     4ee:	4a8c      	ldr	r2, [pc, #560]	; (720 <read_byte(unsigned short, bool)+0x2fc>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
     4f0:	f893 8000 	ldrb.w	r8, [r3]
    current_address = local_address;
     4f4:	8020      	strh	r0, [r4, #0]
        last_access_internal_RAM = 0;
     4f6:	7011      	strb	r1, [r2, #0]
    if (debug_mode) return;
     4f8:	4b8c      	ldr	r3, [pc, #560]	; (72c <read_byte(unsigned short, bool)+0x308>)
     4fa:	781c      	ldrb	r4, [r3, #0]
     4fc:	b94c      	cbnz	r4, 512 <read_byte(unsigned short, bool)+0xee>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
     4fe:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     502:	6813      	ldr	r3, [r2, #0]
     504:	04de      	lsls	r6, r3, #19
     506:	d4fc      	bmi.n	502 <read_byte(unsigned short, bool)+0xde>
    while (CLK0) {}      // Wait for CLK0 to become low
     508:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     50c:	6813      	ldr	r3, [r2, #0]
     50e:	04dd      	lsls	r5, r3, #19
     510:	d5fc      	bpl.n	50c <read_byte(unsigned short, bool)+0xe8>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
     512:	4e87      	ldr	r6, [pc, #540]	; (730 <read_byte(unsigned short, bool)+0x30c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     514:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
     518:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
     51a:	0282      	lsls	r2, r0, #10
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
     51c:	0a85      	lsrs	r5, r0, #10
     51e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
     522:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     526:	f8dc 1000 	ldr.w	r1, [ip]
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
     52a:	f005 070c 	and.w	r7, r5, #12
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     52e:	4b81      	ldr	r3, [pc, #516]	; (734 <read_byte(unsigned short, bool)+0x310>)
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
     530:	f005 0510 	and.w	r5, r5, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     534:	400b      	ands	r3, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
     536:	06c1      	lsls	r1, r0, #27
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
     538:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
     53c:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
     53e:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
     540:	433b      	orrs	r3, r7
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
     542:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
     546:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
     54a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
     54e:	433b      	orrs	r3, r7
     550:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
     554:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
     556:	6837      	ldr	r7, [r6, #0]
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
     558:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
     55c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
     560:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
     562:	4b75      	ldr	r3, [pc, #468]	; (738 <read_byte(unsigned short, bool)+0x314>)
     564:	403b      	ands	r3, r7
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
     566:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
     568:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
     56a:	0543      	lsls	r3, r0, #21
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
     56c:	f407 2e00 	and.w	lr, r7, #524288	; 0x80000
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
     570:	f407 2780 	and.w	r7, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
     574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     578:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
     57a:	0342      	lsls	r2, r0, #13
     57c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
     580:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
     582:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
     584:	ea42 020e 	orr.w	r2, r2, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
     588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
     58c:	6032      	str	r2, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
     58e:	0442      	lsls	r2, r0, #17
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
     590:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
     594:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
     598:	4313      	orrs	r3, r2
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
     59a:	f8dc 2000 	ldr.w	r2, [ip]
     59e:	f422 0244 	bic.w	r2, r2, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
     5a2:	4313      	orrs	r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
     5a4:	4a65      	ldr	r2, [pc, #404]	; (73c <read_byte(unsigned short, bool)+0x318>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
     5a6:	433b      	orrs	r3, r7
     5a8:	f8cc 3000 	str.w	r3, [ip]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
     5ac:	0903      	lsrs	r3, r0, #4
     5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
     5b2:	432b      	orrs	r3, r5
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
     5b4:	6835      	ldr	r5, [r6, #0]
     5b6:	402a      	ands	r2, r5
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
     5b8:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
     5ba:	430b      	orrs	r3, r1
     5bc:	6033      	str	r3, [r6, #0]
    return;
     5be:	4d60      	ldr	r5, [pc, #384]	; (740 <read_byte(unsigned short, bool)+0x31c>)
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
     5c0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     5c4:	f8df e184 	ldr.w	lr, [pc, #388]	; 74c <read_byte(unsigned short, bool)+0x328>
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     5c8:	f8df c188 	ldr.w	ip, [pc, #392]	; 754 <read_byte(unsigned short, bool)+0x330>
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     5cc:	4f5d      	ldr	r7, [pc, #372]	; (744 <read_byte(unsigned short, bool)+0x320>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     5ce:	4e5e      	ldr	r6, [pc, #376]	; (748 <read_byte(unsigned short, bool)+0x324>)
    if (debug_mode)
     5d0:	b1d4      	cbz	r4, 608 <read_byte(unsigned short, bool)+0x1e4>
        } while (direct_ready_n == 0x1); // Delay a clock cycle until ready is active 
     5d2:	782b      	ldrb	r3, [r5, #0]
     5d4:	2b01      	cmp	r3, #1
     5d6:	d0fb      	beq.n	5d0 <read_byte(unsigned short, bool)+0x1ac>
        if (run_mode != SINGLE_STEP)
     5d8:	f1b8 0f01 	cmp.w	r8, #1
     5dc:	d005      	beq.n	5ea <read_byte(unsigned short, bool)+0x1c6>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
     5de:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
     5e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     5e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        if (local_address == 0xC000) {
     5ea:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
     5ee:	d05d      	beq.n	6ac <read_byte(unsigned short, bool)+0x288>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     5f0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
     5f4:	d352      	bcc.n	69c <read_byte(unsigned short, bool)+0x278>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
     5f6:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
     5fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     5fe:	d247      	bcs.n	690 <read_byte(unsigned short, bool)+0x26c>
            return internal_RAM[current_address];
     600:	4b49      	ldr	r3, [pc, #292]	; (728 <read_byte(unsigned short, bool)+0x304>)
     602:	5c18      	ldrb	r0, [r3, r0]
}
     604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
     608:	6813      	ldr	r3, [r2, #0]
     60a:	04d9      	lsls	r1, r3, #19
     60c:	d4fc      	bmi.n	608 <read_byte(unsigned short, bool)+0x1e4>
    while (CLK0) {}      // Wait for CLK0 to become low
     60e:	6813      	ldr	r3, [r2, #0]
     610:	04db      	lsls	r3, r3, #19
     612:	d5fc      	bpl.n	60e <read_byte(unsigned short, bool)+0x1ea>
        GPIO6_data_d1 = GPIO6_DR;
     614:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
     616:	04d9      	lsls	r1, r3, #19
     618:	d5fc      	bpl.n	614 <read_byte(unsigned short, bool)+0x1f0>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
     61a:	ea4f 5a13 	mov.w	sl, r3, lsr #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
     61e:	0ad9      	lsrs	r1, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
     620:	ea4f 3953 	mov.w	r9, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
     624:	f00a 0bc0 	and.w	fp, sl, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
     628:	f001 0120 	and.w	r1, r1, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     62c:	f00a 0a01 	and.w	sl, sl, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     630:	ea41 010b 	orr.w	r1, r1, fp
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     634:	f887 a000 	strb.w	sl, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
     638:	f009 0a10 	and.w	sl, r9, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     63c:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     640:	ea41 0a0a 	orr.w	sl, r1, sl
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
     644:	0cd9      	lsrs	r1, r3, #19
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     646:	f88c 9000 	strb.w	r9, [ip]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
     64a:	ea4f 5953 	mov.w	r9, r3, lsr #21
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
     64e:	f001 0108 	and.w	r1, r1, #8
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
     652:	f009 0b04 	and.w	fp, r9, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     656:	f009 0901 	and.w	r9, r9, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     65a:	ea4a 0101 	orr.w	r1, sl, r1
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
     65e:	f3c3 4a81 	ubfx	sl, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
     662:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     666:	f886 9000 	strb.w	r9, [r6]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     66a:	ea41 010b 	orr.w	r1, r1, fp
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
     66e:	702b      	strb	r3, [r5, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     670:	ea41 010a 	orr.w	r1, r1, sl
     674:	f88e 1000 	strb.w	r1, [lr]
    return;
     678:	e7ac      	b.n	5d4 <read_byte(unsigned short, bool)+0x1b0>
    current_address = local_address;
     67a:	4c28      	ldr	r4, [pc, #160]	; (71c <read_byte(unsigned short, bool)+0x2f8>)
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
     67c:	4b26      	ldr	r3, [pc, #152]	; (718 <read_byte(unsigned short, bool)+0x2f4>)
    current_address = local_address;
     67e:	8020      	strh	r0, [r4, #0]
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
     680:	f893 8000 	ldrb.w	r8, [r3]
     684:	e6f2      	b.n	46c <read_byte(unsigned short, bool)+0x48>
     686:	f1b8 0f01 	cmp.w	r8, #1
     68a:	f47f af1f 	bne.w	4cc <read_byte(unsigned short, bool)+0xa8>
     68e:	e71c      	b.n	4ca <read_byte(unsigned short, bool)+0xa6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
     690:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
     694:	b29b      	uxth	r3, r3
     696:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
     69a:	d203      	bcs.n	6a4 <read_byte(unsigned short, bool)+0x280>
     69c:	4b21      	ldr	r3, [pc, #132]	; (724 <read_byte(unsigned short, bool)+0x300>)
     69e:	781b      	ldrb	r3, [r3, #0]
        if (internal_address_check(current_address) != All_External) {
     6a0:	2b00      	cmp	r3, #0
     6a2:	d1ad      	bne.n	600 <read_byte(unsigned short, bool)+0x1dc>
     6a4:	4b29      	ldr	r3, [pc, #164]	; (74c <read_byte(unsigned short, bool)+0x328>)
            return direct_datain;
     6a6:	7818      	ldrb	r0, [r3, #0]
}
     6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
     6ac:	4928      	ldr	r1, [pc, #160]	; (750 <read_byte(unsigned short, bool)+0x32c>)
     6ae:	4b27      	ldr	r3, [pc, #156]	; (74c <read_byte(unsigned short, bool)+0x328>)
     6b0:	780a      	ldrb	r2, [r1, #0]
     6b2:	b9b2      	cbnz	r2, 6e2 <read_byte(unsigned short, bool)+0x2be>
     6b4:	781a      	ldrb	r2, [r3, #0]
     6b6:	2a88      	cmp	r2, #136	; 0x88
     6b8:	d1f5      	bne.n	6a6 <read_byte(unsigned short, bool)+0x282>
     6ba:	2201      	movs	r2, #1
     6bc:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 3) {
     6be:	780a      	ldrb	r2, [r1, #0]
     6c0:	2a03      	cmp	r2, #3
     6c2:	d1f0      	bne.n	6a6 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 0 && direct_datain == 0x88) rx_byte_state = 1;
     6c4:	7818      	ldrb	r0, [r3, #0]
                if (direct_datain == 0xB0) {
     6c6:	28b0      	cmp	r0, #176	; 0xb0
     6c8:	d018      	beq.n	6fc <read_byte(unsigned short, bool)+0x2d8>
                if (direct_datain == 0xB1) {
     6ca:	28b1      	cmp	r0, #177	; 0xb1
     6cc:	d044      	beq.n	758 <read_byte(unsigned short, bool)+0x334>
                if (direct_datain == 0xB2) {
     6ce:	28b2      	cmp	r0, #178	; 0xb2
     6d0:	d155      	bne.n	77e <read_byte(unsigned short, bool)+0x35a>
                    addr_mode = Read_Fast_Internal_Write_External;
     6d2:	4814      	ldr	r0, [pc, #80]	; (724 <read_byte(unsigned short, bool)+0x300>)
     6d4:	2402      	movs	r4, #2
                    rx_byte_state = 0;
     6d6:	2200      	movs	r2, #0
                    addr_mode = Read_Fast_Internal_Write_External;
     6d8:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
     6da:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
     6dc:	e7e3      	b.n	6a6 <read_byte(unsigned short, bool)+0x282>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
     6de:	4b11      	ldr	r3, [pc, #68]	; (724 <read_byte(unsigned short, bool)+0x300>)
     6e0:	e6fa      	b.n	4d8 <read_byte(unsigned short, bool)+0xb4>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
     6e2:	2a01      	cmp	r2, #1
     6e4:	d00f      	beq.n	706 <read_byte(unsigned short, bool)+0x2e2>
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
     6e6:	2a02      	cmp	r2, #2
     6e8:	d1ea      	bne.n	6c0 <read_byte(unsigned short, bool)+0x29c>
     6ea:	781a      	ldrb	r2, [r3, #0]
     6ec:	2a88      	cmp	r2, #136	; 0x88
     6ee:	d1da      	bne.n	6a6 <read_byte(unsigned short, bool)+0x282>
     6f0:	2203      	movs	r2, #3
     6f2:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
     6f4:	e7d7      	b.n	6a6 <read_byte(unsigned short, bool)+0x282>
    current_address = local_address;
     6f6:	4b09      	ldr	r3, [pc, #36]	; (71c <read_byte(unsigned short, bool)+0x2f8>)
     6f8:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
     6fa:	e6b7      	b.n	46c <read_byte(unsigned short, bool)+0x48>
                    addr_mode = All_External;
     6fc:	2200      	movs	r2, #0
     6fe:	4809      	ldr	r0, [pc, #36]	; (724 <read_byte(unsigned short, bool)+0x300>)
                    rx_byte_state = 0;
     700:	700a      	strb	r2, [r1, #0]
                    addr_mode = All_External;
     702:	7002      	strb	r2, [r0, #0]
                if (direct_datain == 0xB3) {
     704:	e7cf      	b.n	6a6 <read_byte(unsigned short, bool)+0x282>
            if (rx_byte_state == 1 && direct_datain == 0x95) rx_byte_state = 2;
     706:	781a      	ldrb	r2, [r3, #0]
     708:	2a95      	cmp	r2, #149	; 0x95
     70a:	d1d8      	bne.n	6be <read_byte(unsigned short, bool)+0x29a>
     70c:	2202      	movs	r2, #2
     70e:	700a      	strb	r2, [r1, #0]
            if (rx_byte_state == 2 && direct_datain == 0x88) rx_byte_state = 3;
     710:	e7c9      	b.n	6a6 <read_byte(unsigned short, bool)+0x282>
     712:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
     716:	e6a4      	b.n	462 <read_byte(unsigned short, bool)+0x3e>
     718:	200150a6 	.word	0x200150a6
     71c:	20015088 	.word	0x20015088
     720:	200150a1 	.word	0x200150a1
     724:	20015098 	.word	0x20015098
     728:	20004ff0 	.word	0x20004ff0
     72c:	200047be 	.word	0x200047be
     730:	42004000 	.word	0x42004000
     734:	6dfffff3 	.word	0x6dfffff3
     738:	cff3efff 	.word	0xcff3efff
     73c:	7fffff6f 	.word	0x7fffff6f
     740:	2001509d 	.word	0x2001509d
     744:	2001509e 	.word	0x2001509e
     748:	2001509c 	.word	0x2001509c
     74c:	2001509a 	.word	0x2001509a
     750:	200150a7 	.word	0x200150a7
     754:	2001509b 	.word	0x2001509b
                    addr_mode = Read_Internal_Write_External;
     758:	480c      	ldr	r0, [pc, #48]	; (78c <read_byte(unsigned short, bool)+0x368>)
     75a:	2401      	movs	r4, #1
                    rx_byte_state = 0;
     75c:	2200      	movs	r2, #0
                    addr_mode = Read_Internal_Write_External;
     75e:	7004      	strb	r4, [r0, #0]
                    rx_byte_state = 0;
     760:	700a      	strb	r2, [r1, #0]
                if (direct_datain == 0xB3) {
     762:	e7a0      	b.n	6a6 <read_byte(unsigned short, bool)+0x282>
        start_read(local_address, assert_sync && (run_mode != SINGLE_STEP));  // Wait for rising edge, set SYNC, set Address
     764:	4a0a      	ldr	r2, [pc, #40]	; (790 <read_byte(unsigned short, bool)+0x36c>)
     766:	f892 8000 	ldrb.w	r8, [r2]
     76a:	f1b8 0f01 	cmp.w	r8, #1
     76e:	f43f ae73 	beq.w	458 <read_byte(unsigned short, bool)+0x34>
    current_address = local_address;
     772:	4908      	ldr	r1, [pc, #32]	; (794 <read_byte(unsigned short, bool)+0x370>)
        last_access_internal_RAM = 0;
     774:	2200      	movs	r2, #0
     776:	4b08      	ldr	r3, [pc, #32]	; (798 <read_byte(unsigned short, bool)+0x374>)
    current_address = local_address;
     778:	8008      	strh	r0, [r1, #0]
        last_access_internal_RAM = 0;
     77a:	701a      	strb	r2, [r3, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
     77c:	e68d      	b.n	49a <read_byte(unsigned short, bool)+0x76>
                if (direct_datain == 0xB3) {
     77e:	28b3      	cmp	r0, #179	; 0xb3
     780:	d191      	bne.n	6a6 <read_byte(unsigned short, bool)+0x282>
                    addr_mode = All_Fast_Internal;
     782:	4c02      	ldr	r4, [pc, #8]	; (78c <read_byte(unsigned short, bool)+0x368>)
                    rx_byte_state = 0;
     784:	2000      	movs	r0, #0
                    addr_mode = All_Fast_Internal;
     786:	7022      	strb	r2, [r4, #0]
                    rx_byte_state = 0;
     788:	7008      	strb	r0, [r1, #0]
     78a:	e78c      	b.n	6a6 <read_byte(unsigned short, bool)+0x282>
     78c:	20015098 	.word	0x20015098
     790:	200150a6 	.word	0x200150a6
     794:	20015088 	.word	0x20015088
     798:	200150a1 	.word	0x200150a1

0000079c <write_byte(unsigned short, unsigned char)>:
    if (local_address < 0xC000) internal_RAM[local_address] = local_write_data;
     79c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
     7a0:	d201      	bcs.n	7a6 <write_byte(unsigned short, unsigned char)+0xa>
     7a2:	4b98      	ldr	r3, [pc, #608]	; (a04 <write_byte(unsigned short, unsigned char)+0x268>)
     7a4:	5419      	strb	r1, [r3, r0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     7a6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
     7aa:	f0c0 80ed 	bcc.w	988 <write_byte(unsigned short, unsigned char)+0x1ec>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
     7ae:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
     7b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     7b6:	d306      	bcc.n	7c6 <write_byte(unsigned short, unsigned char)+0x2a>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
     7b8:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
     7bc:	b29b      	uxth	r3, r3
     7be:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
     7c2:	f0c0 80e1 	bcc.w	988 <write_byte(unsigned short, unsigned char)+0x1ec>
    if (debug_mode) return;
     7c6:	4b90      	ldr	r3, [pc, #576]	; (a08 <write_byte(unsigned short, unsigned char)+0x26c>)
inline void write_byte(uint16_t local_address, uint8_t local_write_data) {
     7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (debug_mode) return;
     7cc:	781c      	ldrb	r4, [r3, #0]
     7ce:	b94c      	cbnz	r4, 7e4 <write_byte(unsigned short, unsigned char)+0x48>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
     7d0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     7d4:	6813      	ldr	r3, [r2, #0]
     7d6:	04dd      	lsls	r5, r3, #19
     7d8:	d4fc      	bmi.n	7d4 <write_byte(unsigned short, unsigned char)+0x38>
    while (CLK0) {}      // Wait for CLK0 to become low
     7da:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     7de:	6813      	ldr	r3, [r2, #0]
     7e0:	04db      	lsls	r3, r3, #19
     7e2:	d5fc      	bpl.n	7de <write_byte(unsigned short, unsigned char)+0x42>
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
     7e4:	4d89      	ldr	r5, [pc, #548]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     7e6:	2302      	movs	r3, #2
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     7e8:	f04f 4784 	mov.w	r7, #1107296256	; 0x42000000
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
     7ec:	0282      	lsls	r2, r0, #10
     7ee:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
     7f2:	ea4f 2e90 	mov.w	lr, r0, lsr #10
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     7f6:	683e      	ldr	r6, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
     7f8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     7fc:	4b84      	ldr	r3, [pc, #528]	; (a10 <write_byte(unsigned short, unsigned char)+0x274>)
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
     7fe:	ea4f 6cc0 	mov.w	ip, r0, lsl #27
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     802:	4033      	ands	r3, r6
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
     804:	f00e 060c 	and.w	r6, lr, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
     808:	f00e 0e10 	and.w	lr, lr, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
     80c:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
     810:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
     812:	0082      	lsls	r2, r0, #2
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
     814:	4333      	orrs	r3, r6
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
     816:	f00c 5680 	and.w	r6, ip, #268435456	; 0x10000000
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
     81a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
     81e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
     822:	4333      	orrs	r3, r6
     824:	603b      	str	r3, [r7, #0]
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
     826:	0503      	lsls	r3, r0, #20
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
     828:	682e      	ldr	r6, [r5, #0]
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
     82a:	0407      	lsls	r7, r0, #16
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
     82c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
     830:	f407 2800 	and.w	r8, r7, #524288	; 0x80000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
     834:	431a      	orrs	r2, r3
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
     836:	4b77      	ldr	r3, [pc, #476]	; (a14 <write_byte(unsigned short, unsigned char)+0x278>)
     838:	4033      	ands	r3, r6
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
     83a:	4e77      	ldr	r6, [pc, #476]	; (a18 <write_byte(unsigned short, unsigned char)+0x27c>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
     83c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
     83e:	0543      	lsls	r3, r0, #21
     840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     844:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
     846:	0342      	lsls	r2, r0, #13
     848:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
     84c:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
     84e:	0383      	lsls	r3, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
     850:	ea42 0208 	orr.w	r2, r2, r8
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
     854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
     858:	602a      	str	r2, [r5, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
     85a:	f407 2280 	and.w	r2, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
     85e:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
     860:	0900      	lsrs	r0, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
     862:	f407 0700 	and.w	r7, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
     866:	f000 0080 	and.w	r0, r0, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
     86a:	433b      	orrs	r3, r7
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
     86c:	6837      	ldr	r7, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
     86e:	ea40 000e 	orr.w	r0, r0, lr
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
     872:	f427 0e44 	bic.w	lr, r7, #12845056	; 0xc40000
		if (val) {
     876:	07cf      	lsls	r7, r1, #31
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
     878:	ea43 030e 	orr.w	r3, r3, lr
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
     87c:	ea43 0302 	orr.w	r3, r3, r2
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
     880:	4a66      	ldr	r2, [pc, #408]	; (a1c <write_byte(unsigned short, unsigned char)+0x280>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
     882:	6033      	str	r3, [r6, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
     884:	4b66      	ldr	r3, [pc, #408]	; (a20 <write_byte(unsigned short, unsigned char)+0x284>)
     886:	6816      	ldr	r6, [r2, #0]
     888:	ea03 0306 	and.w	r3, r3, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
     88c:	ea40 0003 	orr.w	r0, r0, r3
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
     890:	f04f 0304 	mov.w	r3, #4
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
     894:	ea40 000c 	orr.w	r0, r0, ip
     898:	6010      	str	r0, [r2, #0]
		if (val) {
     89a:	d47e      	bmi.n	99a <write_byte(unsigned short, unsigned char)+0x1fe>
     89c:	078e      	lsls	r6, r1, #30
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
     89e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
     8a2:	f04f 0201 	mov.w	r2, #1
     8a6:	4b59      	ldr	r3, [pc, #356]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
		if (val) {
     8a8:	d57e      	bpl.n	9a8 <write_byte(unsigned short, unsigned char)+0x20c>
     8aa:	074d      	lsls	r5, r1, #29
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
     8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
     8b0:	4b56      	ldr	r3, [pc, #344]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     8b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
     8b6:	d57e      	bpl.n	9b6 <write_byte(unsigned short, unsigned char)+0x21a>
     8b8:	0708      	lsls	r0, r1, #28
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
     8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
     8be:	4b53      	ldr	r3, [pc, #332]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     8c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
     8c4:	d57e      	bpl.n	9c4 <write_byte(unsigned short, unsigned char)+0x228>
     8c6:	06cf      	lsls	r7, r1, #27
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
     8c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
     8cc:	4b4f      	ldr	r3, [pc, #316]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     8ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
     8d2:	d57e      	bpl.n	9d2 <write_byte(unsigned short, unsigned char)+0x236>
     8d4:	068e      	lsls	r6, r1, #26
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
     8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     8da:	4b4c      	ldr	r3, [pc, #304]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     8dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
     8e0:	d57e      	bpl.n	9e0 <write_byte(unsigned short, unsigned char)+0x244>
     8e2:	064d      	lsls	r5, r1, #25
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     8e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
     8e8:	4b4c      	ldr	r3, [pc, #304]	; (a1c <write_byte(unsigned short, unsigned char)+0x280>)
     8ea:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
     8ee:	d57e      	bpl.n	9ee <write_byte(unsigned short, unsigned char)+0x252>
     8f0:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
     8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
     8f6:	4b49      	ldr	r3, [pc, #292]	; (a1c <write_byte(unsigned short, unsigned char)+0x280>)
     8f8:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
     8fc:	d07e      	beq.n	9fc <write_byte(unsigned short, unsigned char)+0x260>
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
     8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				CORE_PIN3_PORTCLEAR = CORE_PIN3_BITMASK;
     902:	4b46      	ldr	r3, [pc, #280]	; (a1c <write_byte(unsigned short, unsigned char)+0x280>)
     904:	2220      	movs	r2, #32
     906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if (debug_mode)
     90a:	2c00      	cmp	r4, #0
     90c:	d136      	bne.n	97c <write_byte(unsigned short, unsigned char)+0x1e0>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
     90e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     912:	6813      	ldr	r3, [r2, #0]
     914:	04dc      	lsls	r4, r3, #19
     916:	d4fc      	bmi.n	912 <write_byte(unsigned short, unsigned char)+0x176>
    while (CLK0) {}      // Wait for CLK0 to become low
     918:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     91c:	6813      	ldr	r3, [r2, #0]
     91e:	04d8      	lsls	r0, r3, #19
     920:	d5fc      	bpl.n	91c <write_byte(unsigned short, unsigned char)+0x180>
        GPIO6_data_d1 = GPIO6_DR;
     922:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     926:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
     928:	04d9      	lsls	r1, r3, #19
     92a:	d5fc      	bpl.n	926 <write_byte(unsigned short, unsigned char)+0x18a>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
     92c:	0d1c      	lsrs	r4, r3, #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
     92e:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
     930:	0b58      	lsrs	r0, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
     932:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
     936:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
     93a:	0d59      	lsrs	r1, r3, #21
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     93c:	432a      	orrs	r2, r5
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     93e:	f004 0501 	and.w	r5, r4, #1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
     942:	f000 0410 	and.w	r4, r0, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     946:	4322      	orrs	r2, r4
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     948:	f000 0401 	and.w	r4, r0, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
     94c:	0cd8      	lsrs	r0, r3, #19
     94e:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     952:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
     954:	f001 0004 	and.w	r0, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     958:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     95c:	4302      	orrs	r2, r0
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
     95e:	f3c3 4081 	ubfx	r0, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
     962:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
     966:	4302      	orrs	r2, r0
     968:	482e      	ldr	r0, [pc, #184]	; (a24 <write_byte(unsigned short, unsigned char)+0x288>)
     96a:	7002      	strb	r2, [r0, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     96c:	4a2e      	ldr	r2, [pc, #184]	; (a28 <write_byte(unsigned short, unsigned char)+0x28c>)
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
     96e:	482f      	ldr	r0, [pc, #188]	; (a2c <write_byte(unsigned short, unsigned char)+0x290>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
     970:	7014      	strb	r4, [r2, #0]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
     972:	7003      	strb	r3, [r0, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     974:	4a2e      	ldr	r2, [pc, #184]	; (a30 <write_byte(unsigned short, unsigned char)+0x294>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     976:	4b2f      	ldr	r3, [pc, #188]	; (a34 <write_byte(unsigned short, unsigned char)+0x298>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
     978:	7015      	strb	r5, [r2, #0]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
     97a:	7019      	strb	r1, [r3, #0]
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
     97c:	4b27      	ldr	r3, [pc, #156]	; (a1c <write_byte(unsigned short, unsigned char)+0x280>)
     97e:	2220      	movs	r2, #32
     980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     988:	4b2b      	ldr	r3, [pc, #172]	; (a38 <write_byte(unsigned short, unsigned char)+0x29c>)
    if (internal_address_check(local_address) > 0x2) {
     98a:	781b      	ldrb	r3, [r3, #0]
     98c:	2b02      	cmp	r3, #2
     98e:	f67f af1a 	bls.w	7c6 <write_byte(unsigned short, unsigned char)+0x2a>
        last_access_internal_RAM = 1;
     992:	4b2a      	ldr	r3, [pc, #168]	; (a3c <write_byte(unsigned short, unsigned char)+0x2a0>)
     994:	2201      	movs	r2, #1
     996:	701a      	strb	r2, [r3, #0]
     998:	4770      	bx	lr
		if (val) {
     99a:	078e      	lsls	r6, r1, #30
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
     99c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
				CORE_PIN10_PORTSET = CORE_PIN10_BITMASK;
     9a0:	f04f 0201 	mov.w	r2, #1
     9a4:	4b19      	ldr	r3, [pc, #100]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
		if (val) {
     9a6:	d480      	bmi.n	8aa <write_byte(unsigned short, unsigned char)+0x10e>
     9a8:	074d      	lsls	r5, r1, #29
				CORE_PIN10_PORTCLEAR = CORE_PIN10_BITMASK;
     9aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN9_PORTSET = CORE_PIN9_BITMASK;
     9ae:	4b17      	ldr	r3, [pc, #92]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     9b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
		if (val) {
     9b4:	d480      	bmi.n	8b8 <write_byte(unsigned short, unsigned char)+0x11c>
     9b6:	0708      	lsls	r0, r1, #28
				CORE_PIN9_PORTCLEAR = CORE_PIN9_BITMASK;
     9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN8_PORTSET = CORE_PIN8_BITMASK;
     9bc:	4b13      	ldr	r3, [pc, #76]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     9be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
		if (val) {
     9c2:	d480      	bmi.n	8c6 <write_byte(unsigned short, unsigned char)+0x12a>
     9c4:	06cf      	lsls	r7, r1, #27
				CORE_PIN8_PORTCLEAR = CORE_PIN8_BITMASK;
     9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN7_PORTSET = CORE_PIN7_BITMASK;
     9ca:	4b10      	ldr	r3, [pc, #64]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     9cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
		if (val) {
     9d0:	d480      	bmi.n	8d4 <write_byte(unsigned short, unsigned char)+0x138>
     9d2:	068e      	lsls	r6, r1, #26
				CORE_PIN7_PORTCLEAR = CORE_PIN7_BITMASK;
     9d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN6_PORTSET = CORE_PIN6_BITMASK;
     9d8:	4b0c      	ldr	r3, [pc, #48]	; (a0c <write_byte(unsigned short, unsigned char)+0x270>)
     9da:	f44f 6280 	mov.w	r2, #1024	; 0x400
		if (val) {
     9de:	d480      	bmi.n	8e2 <write_byte(unsigned short, unsigned char)+0x146>
     9e0:	064d      	lsls	r5, r1, #25
				CORE_PIN6_PORTCLEAR = CORE_PIN6_BITMASK;
     9e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN5_PORTSET = CORE_PIN5_BITMASK;
     9e6:	4b0d      	ldr	r3, [pc, #52]	; (a1c <write_byte(unsigned short, unsigned char)+0x280>)
     9e8:	f44f 7280 	mov.w	r2, #256	; 0x100
		if (val) {
     9ec:	d480      	bmi.n	8f0 <write_byte(unsigned short, unsigned char)+0x154>
     9ee:	09c9      	lsrs	r1, r1, #7
				CORE_PIN5_PORTCLEAR = CORE_PIN5_BITMASK;
     9f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				CORE_PIN4_PORTSET = CORE_PIN4_BITMASK;
     9f4:	4b09      	ldr	r3, [pc, #36]	; (a1c <write_byte(unsigned short, unsigned char)+0x280>)
     9f6:	f04f 0240 	mov.w	r2, #64	; 0x40
		if (val) {
     9fa:	d180      	bne.n	8fe <write_byte(unsigned short, unsigned char)+0x162>
				CORE_PIN4_PORTCLEAR = CORE_PIN4_BITMASK;
     9fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     a00:	e77f      	b.n	902 <write_byte(unsigned short, unsigned char)+0x166>
     a02:	bf00      	nop
     a04:	20004ff0 	.word	0x20004ff0
     a08:	200047be 	.word	0x200047be
     a0c:	42004000 	.word	0x42004000
     a10:	6dfffff3 	.word	0x6dfffff3
     a14:	cff3efff 	.word	0xcff3efff
     a18:	42008000 	.word	0x42008000
     a1c:	4200c000 	.word	0x4200c000
     a20:	7fffff6f 	.word	0x7fffff6f
     a24:	2001509a 	.word	0x2001509a
     a28:	2001509b 	.word	0x2001509b
     a2c:	2001509d 	.word	0x2001509d
     a30:	2001509e 	.word	0x2001509e
     a34:	2001509c 	.word	0x2001509c
     a38:	20015098 	.word	0x20015098
     a3c:	200150a1 	.word	0x200150a1

00000a40 <Fetch_Immediate()>:
uint8_t Fetch_Immediate() {
     a40:	b508      	push	{r3, lr}
    register_pc++;
     a42:	4b04      	ldr	r3, [pc, #16]	; (a54 <Fetch_Immediate()+0x14>)
    return read_byte(register_pc, false);
     a44:	2100      	movs	r1, #0
    register_pc++;
     a46:	8818      	ldrh	r0, [r3, #0]
     a48:	3001      	adds	r0, #1
     a4a:	b280      	uxth	r0, r0
     a4c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
     a4e:	f7ff fce9 	bl	424 <read_byte(unsigned short, bool)>
}
     a52:	bd08      	pop	{r3, pc}
     a54:	2001508c 	.word	0x2001508c

00000a58 <Fetch_ZeroPage()>:
uint8_t Fetch_ZeroPage() {
     a58:	b508      	push	{r3, lr}
    register_pc++;
     a5a:	4b07      	ldr	r3, [pc, #28]	; (a78 <Fetch_ZeroPage()+0x20>)
    return read_byte(register_pc, false);
     a5c:	2100      	movs	r1, #0
    register_pc++;
     a5e:	8818      	ldrh	r0, [r3, #0]
     a60:	3001      	adds	r0, #1
     a62:	b280      	uxth	r0, r0
     a64:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
     a66:	f7ff fcdd 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
     a6a:	4b04      	ldr	r3, [pc, #16]	; (a7c <Fetch_ZeroPage()+0x24>)
     a6c:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
     a6e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
     a70:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
     a72:	f7ff fcd7 	bl	424 <read_byte(unsigned short, bool)>
}
     a76:	bd08      	pop	{r3, pc}
     a78:	2001508c 	.word	0x2001508c
     a7c:	2001508a 	.word	0x2001508a

00000a80 <Fetch_ZeroPage_X()>:
uint8_t Fetch_ZeroPage_X() {
     a80:	b510      	push	{r4, lr}
    register_pc++;
     a82:	4c0c      	ldr	r4, [pc, #48]	; (ab4 <Fetch_ZeroPage_X()+0x34>)
    return read_byte(register_pc, false);
     a84:	2100      	movs	r1, #0
    register_pc++;
     a86:	8820      	ldrh	r0, [r4, #0]
     a88:	3001      	adds	r0, #1
     a8a:	b280      	uxth	r0, r0
     a8c:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
     a8e:	f7ff fcc9 	bl	424 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
     a92:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc, false);
     a94:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
     a96:	2100      	movs	r1, #0
     a98:	1c58      	adds	r0, r3, #1
     a9a:	b280      	uxth	r0, r0
     a9c:	f7ff fcc2 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_x));
     aa0:	4a05      	ldr	r2, [pc, #20]	; (ab8 <Fetch_ZeroPage_X()+0x38>)
     aa2:	4b06      	ldr	r3, [pc, #24]	; (abc <Fetch_ZeroPage_X()+0x3c>)
    return read_byte(effective_address, false);
     aa4:	2100      	movs	r1, #0
     aa6:	7812      	ldrb	r2, [r2, #0]
     aa8:	18a0      	adds	r0, r4, r2
     aaa:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_x));
     aac:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
     aae:	f7ff fcb9 	bl	424 <read_byte(unsigned short, bool)>
}
     ab2:	bd10      	pop	{r4, pc}
     ab4:	2001508c 	.word	0x2001508c
     ab8:	200150a4 	.word	0x200150a4
     abc:	2001508a 	.word	0x2001508a

00000ac0 <Fetch_ZeroPage_Y()>:
uint8_t Fetch_ZeroPage_Y() {
     ac0:	b510      	push	{r4, lr}
    register_pc++;
     ac2:	4c0c      	ldr	r4, [pc, #48]	; (af4 <Fetch_ZeroPage_Y()+0x34>)
    return read_byte(register_pc, false);
     ac4:	2100      	movs	r1, #0
    register_pc++;
     ac6:	8820      	ldrh	r0, [r4, #0]
     ac8:	3001      	adds	r0, #1
     aca:	b280      	uxth	r0, r0
     acc:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
     ace:	f7ff fca9 	bl	424 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
     ad2:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc, false);
     ad4:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
     ad6:	2100      	movs	r1, #0
     ad8:	1c58      	adds	r0, r3, #1
     ada:	b280      	uxth	r0, r0
     adc:	f7ff fca2 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
     ae0:	4a05      	ldr	r2, [pc, #20]	; (af8 <Fetch_ZeroPage_Y()+0x38>)
     ae2:	4b06      	ldr	r3, [pc, #24]	; (afc <Fetch_ZeroPage_Y()+0x3c>)
    return read_byte(effective_address, false);
     ae4:	2100      	movs	r1, #0
     ae6:	7812      	ldrb	r2, [r2, #0]
     ae8:	18a0      	adds	r0, r4, r2
     aea:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
     aec:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
     aee:	f7ff fc99 	bl	424 <read_byte(unsigned short, bool)>
}
     af2:	bd10      	pop	{r4, pc}
     af4:	2001508c 	.word	0x2001508c
     af8:	200150a5 	.word	0x200150a5
     afc:	2001508a 	.word	0x2001508a

00000b00 <Fetch_Absolute()>:
uint8_t Fetch_Absolute() {
     b00:	b538      	push	{r3, r4, r5, lr}
    register_pc++;
     b02:	4d0c      	ldr	r5, [pc, #48]	; (b34 <Fetch_Absolute()+0x34>)
    return read_byte(register_pc, false);
     b04:	2100      	movs	r1, #0
    register_pc++;
     b06:	8828      	ldrh	r0, [r5, #0]
     b08:	3001      	adds	r0, #1
     b0a:	b280      	uxth	r0, r0
     b0c:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
     b0e:	f7ff fc89 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
     b12:	882b      	ldrh	r3, [r5, #0]
    return read_byte(register_pc, false);
     b14:	4604      	mov	r4, r0
     b16:	2100      	movs	r1, #0
    register_pc++;
     b18:	1c58      	adds	r0, r3, #1
     b1a:	b280      	uxth	r0, r0
     b1c:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
     b1e:	f7ff fc81 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
     b22:	eb04 2000 	add.w	r0, r4, r0, lsl #8
     b26:	4b04      	ldr	r3, [pc, #16]	; (b38 <Fetch_Absolute()+0x38>)
    return read_byte(effective_address, false);
     b28:	2100      	movs	r1, #0
    effective_address = adl + adh;
     b2a:	b280      	uxth	r0, r0
     b2c:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
     b2e:	f7ff fc79 	bl	424 <read_byte(unsigned short, bool)>
}
     b32:	bd38      	pop	{r3, r4, r5, pc}
     b34:	2001508c 	.word	0x2001508c
     b38:	2001508a 	.word	0x2001508a

00000b3c <Fetch_Absolute_X(unsigned char)>:
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
     b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    register_pc++;
     b3e:	4c15      	ldr	r4, [pc, #84]	; (b94 <Fetch_Absolute_X(unsigned char)+0x58>)
uint8_t Fetch_Absolute_X(uint8_t page_cross_check) {
     b40:	4605      	mov	r5, r0
    return read_byte(register_pc, false);
     b42:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
     b44:	4e14      	ldr	r6, [pc, #80]	; (b98 <Fetch_Absolute_X(unsigned char)+0x5c>)
    register_pc++;
     b46:	8823      	ldrh	r3, [r4, #0]
     b48:	3301      	adds	r3, #1
     b4a:	b298      	uxth	r0, r3
     b4c:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
     b4e:	f7ff fc69 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
     b52:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc, false);
     b54:	4607      	mov	r7, r0
     b56:	2100      	movs	r1, #0
    register_pc++;
     b58:	3301      	adds	r3, #1
     b5a:	b298      	uxth	r0, r3
     b5c:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
     b5e:	f7ff fc61 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_x;
     b62:	4b0e      	ldr	r3, [pc, #56]	; (b9c <Fetch_Absolute_X(unsigned char)+0x60>)
    bah = Fetch_Immediate() << 8;
     b64:	0204      	lsls	r4, r0, #8
    local_data = read_byte(effective_address, false);
     b66:	2100      	movs	r1, #0
    effective_address = bah + bal + register_x;
     b68:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate() << 8;
     b6a:	b2a4      	uxth	r4, r4
    effective_address = bah + bal + register_x;
     b6c:	443b      	add	r3, r7
     b6e:	4423      	add	r3, r4
     b70:	b298      	uxth	r0, r3
     b72:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
     b74:	f7ff fc56 	bl	424 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
     b78:	2d01      	cmp	r5, #1
     b7a:	d000      	beq.n	b7e <Fetch_Absolute_X(unsigned char)+0x42>
}
     b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
     b7e:	8833      	ldrh	r3, [r6, #0]
     b80:	405c      	eors	r4, r3
     b82:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
     b86:	d0f9      	beq.n	b7c <Fetch_Absolute_X(unsigned char)+0x40>
        local_data = read_byte(effective_address, false);
     b88:	2100      	movs	r1, #0
     b8a:	4618      	mov	r0, r3
     b8c:	f7ff fc4a 	bl	424 <read_byte(unsigned short, bool)>
}
     b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b92:	bf00      	nop
     b94:	2001508c 	.word	0x2001508c
     b98:	2001508a 	.word	0x2001508a
     b9c:	200150a4 	.word	0x200150a4

00000ba0 <Fetch_Absolute_Y(unsigned char)>:
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
     ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    register_pc++;
     ba2:	4c15      	ldr	r4, [pc, #84]	; (bf8 <Fetch_Absolute_Y(unsigned char)+0x58>)
uint8_t Fetch_Absolute_Y(uint8_t page_cross_check) {
     ba4:	4605      	mov	r5, r0
    return read_byte(register_pc, false);
     ba6:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
     ba8:	4e14      	ldr	r6, [pc, #80]	; (bfc <Fetch_Absolute_Y(unsigned char)+0x5c>)
    register_pc++;
     baa:	8823      	ldrh	r3, [r4, #0]
     bac:	3301      	adds	r3, #1
     bae:	b298      	uxth	r0, r3
     bb0:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
     bb2:	f7ff fc37 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
     bb6:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc, false);
     bb8:	4607      	mov	r7, r0
     bba:	2100      	movs	r1, #0
    register_pc++;
     bbc:	3301      	adds	r3, #1
     bbe:	b298      	uxth	r0, r3
     bc0:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
     bc2:	f7ff fc2f 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
     bc6:	4b0e      	ldr	r3, [pc, #56]	; (c00 <Fetch_Absolute_Y(unsigned char)+0x60>)
    bah = Fetch_Immediate() << 8;
     bc8:	0204      	lsls	r4, r0, #8
    local_data = read_byte(effective_address, false);
     bca:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
     bcc:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate() << 8;
     bce:	b2a4      	uxth	r4, r4
    effective_address = bah + bal + register_y;
     bd0:	443b      	add	r3, r7
     bd2:	4423      	add	r3, r4
     bd4:	b298      	uxth	r0, r3
     bd6:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
     bd8:	f7ff fc24 	bl	424 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
     bdc:	2d01      	cmp	r5, #1
     bde:	d000      	beq.n	be2 <Fetch_Absolute_Y(unsigned char)+0x42>
}
     be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
     be2:	8833      	ldrh	r3, [r6, #0]
     be4:	405c      	eors	r4, r3
     be6:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
     bea:	d0f9      	beq.n	be0 <Fetch_Absolute_Y(unsigned char)+0x40>
        local_data = read_byte(effective_address, false);
     bec:	2100      	movs	r1, #0
     bee:	4618      	mov	r0, r3
     bf0:	f7ff fc18 	bl	424 <read_byte(unsigned short, bool)>
}
     bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bf6:	bf00      	nop
     bf8:	2001508c 	.word	0x2001508c
     bfc:	2001508a 	.word	0x2001508a
     c00:	200150a5 	.word	0x200150a5

00000c04 <Fetch_Indexed_Indirect_X()>:
uint8_t Fetch_Indexed_Indirect_X() {
     c04:	b538      	push	{r3, r4, r5, lr}
    register_pc++;
     c06:	4b11      	ldr	r3, [pc, #68]	; (c4c <Fetch_Indexed_Indirect_X()+0x48>)
    return read_byte(register_pc, false);
     c08:	2100      	movs	r1, #0
    register_pc++;
     c0a:	8818      	ldrh	r0, [r3, #0]
     c0c:	3001      	adds	r0, #1
     c0e:	b280      	uxth	r0, r0
     c10:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
     c12:	f7ff fc07 	bl	424 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate() + register_x;
     c16:	4b0e      	ldr	r3, [pc, #56]	; (c50 <Fetch_Indexed_Indirect_X()+0x4c>)
    read_byte(bal, false);
     c18:	2100      	movs	r1, #0
    bal = Fetch_Immediate() + register_x;
     c1a:	781c      	ldrb	r4, [r3, #0]
     c1c:	4404      	add	r4, r0
     c1e:	b2a4      	uxth	r4, r4
    read_byte(bal, false);
     c20:	4620      	mov	r0, r4
     c22:	f7ff fbff 	bl	424 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & bal, false);
     c26:	2100      	movs	r1, #0
     c28:	b2e0      	uxtb	r0, r4
    adh = read_byte(0xFF & (bal + 1), false) << 8;
     c2a:	3401      	adds	r4, #1
    adl = read_byte(0xFF & bal, false);
     c2c:	f7ff fbfa 	bl	424 <read_byte(unsigned short, bool)>
     c30:	4605      	mov	r5, r0
    adh = read_byte(0xFF & (bal + 1), false) << 8;
     c32:	2100      	movs	r1, #0
     c34:	b2e0      	uxtb	r0, r4
     c36:	f7ff fbf5 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
     c3a:	4b06      	ldr	r3, [pc, #24]	; (c54 <Fetch_Indexed_Indirect_X()+0x50>)
     c3c:	eb05 2000 	add.w	r0, r5, r0, lsl #8
    local_data = read_byte(effective_address, false);
     c40:	2100      	movs	r1, #0
    effective_address = adh + adl;
     c42:	b280      	uxth	r0, r0
     c44:	8018      	strh	r0, [r3, #0]
    local_data = read_byte(effective_address, false);
     c46:	f7ff fbed 	bl	424 <read_byte(unsigned short, bool)>
}
     c4a:	bd38      	pop	{r3, r4, r5, pc}
     c4c:	2001508c 	.word	0x2001508c
     c50:	200150a4 	.word	0x200150a4
     c54:	2001508a 	.word	0x2001508a

00000c58 <Fetch_Indexed_Indirect_Y(unsigned char)>:
    register_pc++;
     c58:	4a16      	ldr	r2, [pc, #88]	; (cb4 <Fetch_Indexed_Indirect_Y(unsigned char)+0x5c>)
    return read_byte(register_pc, false);
     c5a:	2100      	movs	r1, #0
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
     c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    register_pc++;
     c5e:	8813      	ldrh	r3, [r2, #0]
uint8_t Fetch_Indexed_Indirect_Y(uint8_t page_cross_check) {
     c60:	4605      	mov	r5, r0
    effective_address = bah + bal + register_y;
     c62:	4e15      	ldr	r6, [pc, #84]	; (cb8 <Fetch_Indexed_Indirect_Y(unsigned char)+0x60>)
    register_pc++;
     c64:	3301      	adds	r3, #1
     c66:	b298      	uxth	r0, r3
     c68:	8010      	strh	r0, [r2, #0]
    return read_byte(register_pc, false);
     c6a:	f7ff fbdb 	bl	424 <read_byte(unsigned short, bool)>
    ial = Fetch_Immediate();
     c6e:	b284      	uxth	r4, r0
    bal = read_byte(0xFF & ial, false);
     c70:	2100      	movs	r1, #0
     c72:	4620      	mov	r0, r4
    bah = read_byte(0xFF & (ial + 1), false) << 8;
     c74:	3401      	adds	r4, #1
    bal = read_byte(0xFF & ial, false);
     c76:	f7ff fbd5 	bl	424 <read_byte(unsigned short, bool)>
    bah = read_byte(0xFF & (ial + 1), false) << 8;
     c7a:	2100      	movs	r1, #0
    bal = read_byte(0xFF & ial, false);
     c7c:	4607      	mov	r7, r0
    bah = read_byte(0xFF & (ial + 1), false) << 8;
     c7e:	b2e0      	uxtb	r0, r4
     c80:	f7ff fbd0 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
     c84:	4b0d      	ldr	r3, [pc, #52]	; (cbc <Fetch_Indexed_Indirect_Y(unsigned char)+0x64>)
    bah = read_byte(0xFF & (ial + 1), false) << 8;
     c86:	0200      	lsls	r0, r0, #8
    local_data = read_byte(effective_address, false);
     c88:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
     c8a:	781b      	ldrb	r3, [r3, #0]
    bah = read_byte(0xFF & (ial + 1), false) << 8;
     c8c:	b284      	uxth	r4, r0
    effective_address = bah + bal + register_y;
     c8e:	443b      	add	r3, r7
     c90:	4423      	add	r3, r4
     c92:	b298      	uxth	r0, r3
     c94:	8030      	strh	r0, [r6, #0]
    local_data = read_byte(effective_address, false);
     c96:	f7ff fbc5 	bl	424 <read_byte(unsigned short, bool)>
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
     c9a:	2d01      	cmp	r5, #1
     c9c:	d000      	beq.n	ca0 <Fetch_Indexed_Indirect_Y(unsigned char)+0x48>
}
     c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (page_cross_check == 1 && ((0xFF00 & effective_address) != (0xFF00 & bah))) {
     ca0:	8833      	ldrh	r3, [r6, #0]
     ca2:	405c      	eors	r4, r3
     ca4:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
     ca8:	d0f9      	beq.n	c9e <Fetch_Indexed_Indirect_Y(unsigned char)+0x46>
        local_data = read_byte(effective_address, false);
     caa:	2100      	movs	r1, #0
     cac:	4618      	mov	r0, r3
     cae:	f7ff fbb9 	bl	424 <read_byte(unsigned short, bool)>
}
     cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cb4:	2001508c 	.word	0x2001508c
     cb8:	2001508a 	.word	0x2001508a
     cbc:	200150a5 	.word	0x200150a5

00000cc0 <Write_ZeroPage(unsigned char)>:
    register_pc++;
     cc0:	4a08      	ldr	r2, [pc, #32]	; (ce4 <Write_ZeroPage(unsigned char)+0x24>)
    return read_byte(register_pc, false);
     cc2:	2100      	movs	r1, #0
    register_pc++;
     cc4:	8813      	ldrh	r3, [r2, #0]
     cc6:	3301      	adds	r3, #1
void Write_ZeroPage(uint8_t local_data) {
     cc8:	b510      	push	{r4, lr}
     cca:	4604      	mov	r4, r0
    register_pc++;
     ccc:	b298      	uxth	r0, r3
     cce:	8010      	strh	r0, [r2, #0]
    return read_byte(register_pc, false);
     cd0:	f7ff fba8 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
     cd4:	4b04      	ldr	r3, [pc, #16]	; (ce8 <Write_ZeroPage(unsigned char)+0x28>)
     cd6:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
     cd8:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate();
     cda:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
     cdc:	f7ff fd5e 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     ce0:	bd10      	pop	{r4, pc}
     ce2:	bf00      	nop
     ce4:	2001508c 	.word	0x2001508c
     ce8:	2001508a 	.word	0x2001508a

00000cec <Write_Absolute(unsigned char)>:
void Write_Absolute(uint8_t local_data) {
     cec:	b570      	push	{r4, r5, r6, lr}
    register_pc++;
     cee:	4d0d      	ldr	r5, [pc, #52]	; (d24 <Write_Absolute(unsigned char)+0x38>)
void Write_Absolute(uint8_t local_data) {
     cf0:	4606      	mov	r6, r0
    return read_byte(register_pc, false);
     cf2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
     cf4:	4c0c      	ldr	r4, [pc, #48]	; (d28 <Write_Absolute(unsigned char)+0x3c>)
    register_pc++;
     cf6:	882b      	ldrh	r3, [r5, #0]
     cf8:	3301      	adds	r3, #1
     cfa:	b298      	uxth	r0, r3
     cfc:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
     cfe:	f7ff fb91 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
     d02:	882b      	ldrh	r3, [r5, #0]
    return read_byte(register_pc, false);
     d04:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
     d06:	8020      	strh	r0, [r4, #0]
    register_pc++;
     d08:	3301      	adds	r3, #1
     d0a:	b298      	uxth	r0, r3
     d0c:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
     d0e:	f7ff fb89 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate() << 8) + effective_address;
     d12:	8823      	ldrh	r3, [r4, #0]
    write_byte(effective_address, local_data);
     d14:	4631      	mov	r1, r6
    effective_address = (Fetch_Immediate() << 8) + effective_address;
     d16:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     d1a:	b280      	uxth	r0, r0
     d1c:	8020      	strh	r0, [r4, #0]
    write_byte(effective_address, local_data);
     d1e:	f7ff fd3d 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     d22:	bd70      	pop	{r4, r5, r6, pc}
     d24:	2001508c 	.word	0x2001508c
     d28:	2001508a 	.word	0x2001508a

00000d2c <Write_ZeroPage_X(unsigned char)>:
    register_pc++;
     d2c:	4a0c      	ldr	r2, [pc, #48]	; (d60 <Write_ZeroPage_X(unsigned char)+0x34>)
    return read_byte(register_pc, false);
     d2e:	2100      	movs	r1, #0
void Write_ZeroPage_X(uint8_t local_data) {
     d30:	b538      	push	{r3, r4, r5, lr}
    register_pc++;
     d32:	8813      	ldrh	r3, [r2, #0]
void Write_ZeroPage_X(uint8_t local_data) {
     d34:	4604      	mov	r4, r0
    effective_address = Fetch_Immediate();
     d36:	4d0b      	ldr	r5, [pc, #44]	; (d64 <Write_ZeroPage_X(unsigned char)+0x38>)
    register_pc++;
     d38:	3301      	adds	r3, #1
     d3a:	b298      	uxth	r0, r3
     d3c:	8010      	strh	r0, [r2, #0]
    return read_byte(register_pc, false);
     d3e:	f7ff fb71 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
     d42:	b280      	uxth	r0, r0
    read_byte(effective_address, false);
     d44:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
     d46:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
     d48:	f7ff fb6c 	bl	424 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_x)), local_data);
     d4c:	4a06      	ldr	r2, [pc, #24]	; (d68 <Write_ZeroPage_X(unsigned char)+0x3c>)
     d4e:	4621      	mov	r1, r4
     d50:	882b      	ldrh	r3, [r5, #0]
     d52:	7810      	ldrb	r0, [r2, #0]
     d54:	4418      	add	r0, r3
     d56:	b2c0      	uxtb	r0, r0
     d58:	f7ff fd20 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     d5c:	bd38      	pop	{r3, r4, r5, pc}
     d5e:	bf00      	nop
     d60:	2001508c 	.word	0x2001508c
     d64:	2001508a 	.word	0x2001508a
     d68:	200150a4 	.word	0x200150a4

00000d6c <Write_ZeroPage_Y(unsigned char)>:
    register_pc++;
     d6c:	4a0c      	ldr	r2, [pc, #48]	; (da0 <Write_ZeroPage_Y(unsigned char)+0x34>)
    return read_byte(register_pc, false);
     d6e:	2100      	movs	r1, #0
void Write_ZeroPage_Y(uint8_t local_data) {
     d70:	b538      	push	{r3, r4, r5, lr}
    register_pc++;
     d72:	8813      	ldrh	r3, [r2, #0]
void Write_ZeroPage_Y(uint8_t local_data) {
     d74:	4604      	mov	r4, r0
    effective_address = Fetch_Immediate();
     d76:	4d0b      	ldr	r5, [pc, #44]	; (da4 <Write_ZeroPage_Y(unsigned char)+0x38>)
    register_pc++;
     d78:	3301      	adds	r3, #1
     d7a:	b298      	uxth	r0, r3
     d7c:	8010      	strh	r0, [r2, #0]
    return read_byte(register_pc, false);
     d7e:	f7ff fb51 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
     d82:	b280      	uxth	r0, r0
    read_byte(effective_address, false);
     d84:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
     d86:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
     d88:	f7ff fb4c 	bl	424 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
     d8c:	4a06      	ldr	r2, [pc, #24]	; (da8 <Write_ZeroPage_Y(unsigned char)+0x3c>)
     d8e:	4621      	mov	r1, r4
     d90:	882b      	ldrh	r3, [r5, #0]
     d92:	7810      	ldrb	r0, [r2, #0]
     d94:	4418      	add	r0, r3
     d96:	b2c0      	uxtb	r0, r0
     d98:	f7ff fd00 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     d9c:	bd38      	pop	{r3, r4, r5, pc}
     d9e:	bf00      	nop
     da0:	2001508c 	.word	0x2001508c
     da4:	2001508a 	.word	0x2001508a
     da8:	200150a5 	.word	0x200150a5

00000dac <Write_Absolute_X(unsigned char)>:
void Write_Absolute_X(uint8_t local_data) {
     dac:	b570      	push	{r4, r5, r6, lr}
    register_pc++;
     dae:	4d10      	ldr	r5, [pc, #64]	; (df0 <Write_Absolute_X(unsigned char)+0x44>)
void Write_Absolute_X(uint8_t local_data) {
     db0:	4604      	mov	r4, r0
    return read_byte(register_pc, false);
     db2:	2100      	movs	r1, #0
    register_pc++;
     db4:	882b      	ldrh	r3, [r5, #0]
     db6:	3301      	adds	r3, #1
     db8:	b298      	uxth	r0, r3
     dba:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
     dbc:	f7ff fb32 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
     dc0:	882b      	ldrh	r3, [r5, #0]
    return read_byte(register_pc, false);
     dc2:	4606      	mov	r6, r0
     dc4:	2100      	movs	r1, #0
    register_pc++;
     dc6:	3301      	adds	r3, #1
     dc8:	b298      	uxth	r0, r3
     dca:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
     dcc:	f7ff fb2a 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_x;
     dd0:	4b08      	ldr	r3, [pc, #32]	; (df4 <Write_Absolute_X(unsigned char)+0x48>)
    read_byte(effective_address, false);
     dd2:	2100      	movs	r1, #0
    effective_address = bal + bah + register_x;
     dd4:	4d08      	ldr	r5, [pc, #32]	; (df8 <Write_Absolute_X(unsigned char)+0x4c>)
     dd6:	781b      	ldrb	r3, [r3, #0]
     dd8:	4433      	add	r3, r6
     dda:	eb03 2300 	add.w	r3, r3, r0, lsl #8
     dde:	b298      	uxth	r0, r3
     de0:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
     de2:	f7ff fb1f 	bl	424 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
     de6:	4621      	mov	r1, r4
     de8:	8828      	ldrh	r0, [r5, #0]
     dea:	f7ff fcd7 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     dee:	bd70      	pop	{r4, r5, r6, pc}
     df0:	2001508c 	.word	0x2001508c
     df4:	200150a4 	.word	0x200150a4
     df8:	2001508a 	.word	0x2001508a

00000dfc <Write_Absolute_Y(unsigned char)>:
void Write_Absolute_Y(uint8_t local_data) {
     dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    register_pc++;
     dfe:	4c17      	ldr	r4, [pc, #92]	; (e5c <Write_Absolute_Y(unsigned char)+0x60>)
void Write_Absolute_Y(uint8_t local_data) {
     e00:	4605      	mov	r5, r0
    return read_byte(register_pc, false);
     e02:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
     e04:	4e16      	ldr	r6, [pc, #88]	; (e60 <Write_Absolute_Y(unsigned char)+0x64>)
    register_pc++;
     e06:	8823      	ldrh	r3, [r4, #0]
     e08:	1c58      	adds	r0, r3, #1
     e0a:	b280      	uxth	r0, r0
     e0c:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
     e0e:	f7ff fb09 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
     e12:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc, false);
     e14:	4607      	mov	r7, r0
     e16:	2100      	movs	r1, #0
    register_pc++;
     e18:	3301      	adds	r3, #1
     e1a:	b298      	uxth	r0, r3
     e1c:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
     e1e:	f7ff fb01 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = bal + bah + register_y;
     e22:	4b10      	ldr	r3, [pc, #64]	; (e64 <Write_Absolute_Y(unsigned char)+0x68>)
    bah = Fetch_Immediate() << 8;
     e24:	0204      	lsls	r4, r0, #8
    read_byte(effective_address, false);
     e26:	2100      	movs	r1, #0
    effective_address = bal + bah + register_y;
     e28:	781b      	ldrb	r3, [r3, #0]
    bah = Fetch_Immediate() << 8;
     e2a:	b2a4      	uxth	r4, r4
    effective_address = bal + bah + register_y;
     e2c:	443b      	add	r3, r7
     e2e:	4423      	add	r3, r4
     e30:	b298      	uxth	r0, r3
     e32:	8030      	strh	r0, [r6, #0]
    read_byte(effective_address, false);
     e34:	f7ff faf6 	bl	424 <read_byte(unsigned short, bool)>
    if ((0xFF00 & effective_address) != (0xFF00 & bah)) {
     e38:	8830      	ldrh	r0, [r6, #0]
     e3a:	4044      	eors	r4, r0
     e3c:	f414 4f7f 	tst.w	r4, #65280	; 0xff00
     e40:	d103      	bne.n	e4a <Write_Absolute_Y(unsigned char)+0x4e>
    write_byte(effective_address, local_data);
     e42:	4629      	mov	r1, r5
     e44:	f7ff fcaa 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        read_byte(effective_address, false);
     e4a:	2100      	movs	r1, #0
     e4c:	f7ff faea 	bl	424 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
     e50:	8830      	ldrh	r0, [r6, #0]
     e52:	4629      	mov	r1, r5
     e54:	f7ff fca2 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e5a:	bf00      	nop
     e5c:	2001508c 	.word	0x2001508c
     e60:	2001508a 	.word	0x2001508a
     e64:	200150a5 	.word	0x200150a5

00000e68 <Write_Indexed_Indirect_X(unsigned char)>:
    register_pc++;
     e68:	4a13      	ldr	r2, [pc, #76]	; (eb8 <Write_Indexed_Indirect_X(unsigned char)+0x50>)
    return read_byte(register_pc, false);
     e6a:	2100      	movs	r1, #0
void Write_Indexed_Indirect_X(uint8_t local_data) {
     e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    register_pc++;
     e6e:	8813      	ldrh	r3, [r2, #0]
void Write_Indexed_Indirect_X(uint8_t local_data) {
     e70:	4606      	mov	r6, r0
    adl = read_byte(0xFF & (bal + register_x), false);
     e72:	4f12      	ldr	r7, [pc, #72]	; (ebc <Write_Indexed_Indirect_X(unsigned char)+0x54>)
    register_pc++;
     e74:	3301      	adds	r3, #1
     e76:	b298      	uxth	r0, r3
     e78:	8010      	strh	r0, [r2, #0]
    return read_byte(register_pc, false);
     e7a:	f7ff fad3 	bl	424 <read_byte(unsigned short, bool)>
    bal = Fetch_Immediate();
     e7e:	b285      	uxth	r5, r0
    read_byte(bal, false);
     e80:	2100      	movs	r1, #0
    return read_byte(register_pc, false);
     e82:	4604      	mov	r4, r0
    read_byte(bal, false);
     e84:	4628      	mov	r0, r5
     e86:	f7ff facd 	bl	424 <read_byte(unsigned short, bool)>
    adl = read_byte(0xFF & (bal + register_x), false);
     e8a:	783b      	ldrb	r3, [r7, #0]
     e8c:	2100      	movs	r1, #0
     e8e:	441c      	add	r4, r3
     e90:	b2e0      	uxtb	r0, r4
     e92:	f7ff fac7 	bl	424 <read_byte(unsigned short, bool)>
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
     e96:	783b      	ldrb	r3, [r7, #0]
    adl = read_byte(0xFF & (bal + register_x), false);
     e98:	4604      	mov	r4, r0
    adh = read_byte(0xFF & (bal + register_x + 1), false) << 8;
     e9a:	2100      	movs	r1, #0
     e9c:	3301      	adds	r3, #1
     e9e:	18e8      	adds	r0, r5, r3
     ea0:	b2c0      	uxtb	r0, r0
     ea2:	f7ff fabf 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
     ea6:	4b06      	ldr	r3, [pc, #24]	; (ec0 <Write_Indexed_Indirect_X(unsigned char)+0x58>)
     ea8:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    write_byte(effective_address, local_data);
     eac:	4631      	mov	r1, r6
    effective_address = adh + adl;
     eae:	b280      	uxth	r0, r0
     eb0:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
     eb2:	f7ff fc73 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eb8:	2001508c 	.word	0x2001508c
     ebc:	200150a4 	.word	0x200150a4
     ec0:	2001508a 	.word	0x2001508a

00000ec4 <Write_Indexed_Indirect_Y(unsigned char)>:
    register_pc++;
     ec4:	4a12      	ldr	r2, [pc, #72]	; (f10 <Write_Indexed_Indirect_Y(unsigned char)+0x4c>)
    return read_byte(register_pc, false);
     ec6:	2100      	movs	r1, #0
void Write_Indexed_Indirect_Y(uint8_t local_data) {
     ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    register_pc++;
     eca:	8813      	ldrh	r3, [r2, #0]
void Write_Indexed_Indirect_Y(uint8_t local_data) {
     ecc:	4605      	mov	r5, r0
    effective_address = bah + bal + register_y;
     ece:	4f11      	ldr	r7, [pc, #68]	; (f14 <Write_Indexed_Indirect_Y(unsigned char)+0x50>)
    register_pc++;
     ed0:	3301      	adds	r3, #1
     ed2:	b298      	uxth	r0, r3
     ed4:	8010      	strh	r0, [r2, #0]
    return read_byte(register_pc, false);
     ed6:	f7ff faa5 	bl	424 <read_byte(unsigned short, bool)>
    ial = Fetch_Immediate();
     eda:	b284      	uxth	r4, r0
    bal = read_byte(ial, false);
     edc:	2100      	movs	r1, #0
     ede:	4620      	mov	r0, r4
    bah = read_byte(ial + 1, false) << 8;
     ee0:	3401      	adds	r4, #1
    bal = read_byte(ial, false);
     ee2:	f7ff fa9f 	bl	424 <read_byte(unsigned short, bool)>
    bah = read_byte(ial + 1, false) << 8;
     ee6:	2100      	movs	r1, #0
    bal = read_byte(ial, false);
     ee8:	4606      	mov	r6, r0
    bah = read_byte(ial + 1, false) << 8;
     eea:	b2a0      	uxth	r0, r4
     eec:	f7ff fa9a 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = bah + bal + register_y;
     ef0:	4b09      	ldr	r3, [pc, #36]	; (f18 <Write_Indexed_Indirect_Y(unsigned char)+0x54>)
    read_byte(effective_address, false);
     ef2:	2100      	movs	r1, #0
    effective_address = bah + bal + register_y;
     ef4:	781b      	ldrb	r3, [r3, #0]
     ef6:	4433      	add	r3, r6
     ef8:	eb03 2300 	add.w	r3, r3, r0, lsl #8
     efc:	b298      	uxth	r0, r3
     efe:	8038      	strh	r0, [r7, #0]
    read_byte(effective_address, false);
     f00:	f7ff fa90 	bl	424 <read_byte(unsigned short, bool)>
    write_byte(effective_address, local_data);
     f04:	4629      	mov	r1, r5
     f06:	8838      	ldrh	r0, [r7, #0]
     f08:	f7ff fc48 	bl	79c <write_byte(unsigned short, unsigned char)>
}
     f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f0e:	bf00      	nop
     f10:	2001508c 	.word	0x2001508c
     f14:	2001508a 	.word	0x2001508a
     f18:	200150a5 	.word	0x200150a5

00000f1c <reset_sequence()>:
void reset_sequence() {
     f1c:	b570      	push	{r4, r5, r6, lr}
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
     f1e:	4b65      	ldr	r3, [pc, #404]	; (10b4 <reset_sequence()+0x198>)
     f20:	2220      	movs	r2, #32
    temp1 = read_byte(register_pc, false); // Address ??
     f22:	4d65      	ldr	r5, [pc, #404]	; (10b8 <reset_sequence()+0x19c>)
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
     f24:	2002      	movs	r0, #2
     f26:	4965      	ldr	r1, [pc, #404]	; (10bc <reset_sequence()+0x1a0>)
    temp1 = read_byte(register_sp_fixed, false); // Address SP
     f28:	4c65      	ldr	r4, [pc, #404]	; (10c0 <reset_sequence()+0x1a4>)
     f2a:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
    temp1 = read_byte(register_pc, false); // Address ??
     f2e:	2100      	movs	r1, #0
				CORE_PIN3_PORTSET = CORE_PIN3_BITMASK;
     f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     f34:	8828      	ldrh	r0, [r5, #0]
     f36:	f7ff fa75 	bl	424 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_pc + 1, false); // Address ?? + 1
     f3a:	8828      	ldrh	r0, [r5, #0]
     f3c:	2100      	movs	r1, #0
     f3e:	3001      	adds	r0, #1
     f40:	b280      	uxth	r0, r0
     f42:	f7ff fa6f 	bl	424 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed, false); // Address SP
     f46:	7820      	ldrb	r0, [r4, #0]
     f48:	2100      	movs	r1, #0
     f4a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
     f4e:	f7ff fa69 	bl	424 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 1, false); // Address SP - 1
     f52:	7820      	ldrb	r0, [r4, #0]
     f54:	2100      	movs	r1, #0
     f56:	f440 7080 	orr.w	r0, r0, #256	; 0x100
     f5a:	3801      	subs	r0, #1
     f5c:	b280      	uxth	r0, r0
     f5e:	f7ff fa61 	bl	424 <read_byte(unsigned short, bool)>
    temp1 = read_byte(register_sp_fixed - 2, false); // Address SP - 2
     f62:	7820      	ldrb	r0, [r4, #0]
     f64:	2100      	movs	r1, #0
     f66:	f440 7080 	orr.w	r0, r0, #256	; 0x100
     f6a:	3802      	subs	r0, #2
     f6c:	b280      	uxth	r0, r0
     f6e:	f7ff fa59 	bl	424 <read_byte(unsigned short, bool)>
    temp1 = read_byte(0xFFFC, false); // Fetch Vector PCL
     f72:	2100      	movs	r1, #0
     f74:	f64f 70fc 	movw	r0, #65532	; 0xfffc
     f78:	f7ff fa54 	bl	424 <read_byte(unsigned short, bool)>
     f7c:	4604      	mov	r4, r0
    temp2 = read_byte(0xFFFD, false); // Fetch Vector PCH
     f7e:	2100      	movs	r1, #0
     f80:	f64f 70fd 	movw	r0, #65533	; 0xfffd
     f84:	f7ff fa4e 	bl	424 <read_byte(unsigned short, bool)>
    register_flags = 0x34; // Set the I and B flags
     f88:	4a4e      	ldr	r2, [pc, #312]	; (10c4 <reset_sequence()+0x1a8>)
    register_pc = (temp2 << 8) | temp1;
     f8a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    register_flags = 0x34; // Set the I and B flags
     f8e:	2134      	movs	r1, #52	; 0x34
    current_address = local_address;
     f90:	4b4d      	ldr	r3, [pc, #308]	; (10c8 <reset_sequence()+0x1ac>)
    register_pc = (temp2 << 8) | temp1;
     f92:	b280      	uxth	r0, r0
    register_flags = 0x34; // Set the I and B flags
     f94:	7011      	strb	r1, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     f96:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    register_pc = (temp2 << 8) | temp1;
     f9a:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
     f9c:	8018      	strh	r0, [r3, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
     f9e:	d37b      	bcc.n	1098 <reset_sequence()+0x17c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
     fa0:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
     fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     fa8:	d309      	bcc.n	fbe <reset_sequence()+0xa2>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
     faa:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
     fae:	f5b3 4fa8 	cmp.w	r3, #21504	; 0x5400
     fb2:	d371      	bcc.n	1098 <reset_sequence()+0x17c>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
     fb4:	f5a0 43c0 	sub.w	r3, r0, #24576	; 0x6000
     fb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
     fbc:	d36c      	bcc.n	1098 <reset_sequence()+0x17c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
     fbe:	4b43      	ldr	r3, [pc, #268]	; (10cc <reset_sequence()+0x1b0>)
        last_access_internal_RAM = 0;
     fc0:	2100      	movs	r1, #0
     fc2:	4a43      	ldr	r2, [pc, #268]	; (10d0 <reset_sequence()+0x1b4>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
     fc4:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
     fc6:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
     fc8:	2b01      	cmp	r3, #1
     fca:	d005      	beq.n	fd8 <reset_sequence()+0xbc>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
     fcc:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
     fd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
     fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
     fd8:	4b3e      	ldr	r3, [pc, #248]	; (10d4 <reset_sequence()+0x1b8>)
     fda:	781b      	ldrb	r3, [r3, #0]
     fdc:	b94b      	cbnz	r3, ff2 <reset_sequence()+0xd6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
     fde:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     fe2:	6813      	ldr	r3, [r2, #0]
     fe4:	04d9      	lsls	r1, r3, #19
     fe6:	d4fc      	bmi.n	fe2 <reset_sequence()+0xc6>
    while (CLK0) {}      // Wait for CLK0 to become low
     fe8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
     fec:	6813      	ldr	r3, [r2, #0]
     fee:	04db      	lsls	r3, r3, #19
     ff0:	d5fc      	bpl.n	fec <reset_sequence()+0xd0>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
     ff2:	4e32      	ldr	r6, [pc, #200]	; (10bc <reset_sequence()+0x1a0>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
     ff4:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
     ff8:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
     ffa:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
     ffc:	06c1      	lsls	r1, r0, #27
     ffe:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    1002:	ea4f 4c00 	mov.w	ip, r0, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1006:	682a      	ldr	r2, [r5, #0]
    1008:	4b33      	ldr	r3, [pc, #204]	; (10d8 <reset_sequence()+0x1bc>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    100a:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    100e:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    1010:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    1012:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    1016:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    101a:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    101c:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    1020:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    1024:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    1026:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    102a:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    102e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1030:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    1032:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    1034:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1036:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    103a:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    103c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1040:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1042:	4a26      	ldr	r2, [pc, #152]	; (10dc <reset_sequence()+0x1c0>)
    1044:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1046:	4d26      	ldr	r5, [pc, #152]	; (10e0 <reset_sequence()+0x1c4>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1048:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    104a:	0542      	lsls	r2, r0, #21
    104c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    1050:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    1052:	0343      	lsls	r3, r0, #13
    1054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    1058:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    105a:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    105c:	ea43 030e 	orr.w	r3, r3, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    1060:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    1064:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    1066:	f40c 2680 	and.w	r6, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    106a:	ea4f 4c40 	mov.w	ip, r0, lsl #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    106e:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    1070:	f40c 0000 	and.w	r0, ip, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    1074:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    1078:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    107a:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    107c:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    107e:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    1082:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1084:	480b      	ldr	r0, [pc, #44]	; (10b4 <reset_sequence()+0x198>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    1086:	4332      	orrs	r2, r6
    1088:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    108a:	4a16      	ldr	r2, [pc, #88]	; (10e4 <reset_sequence()+0x1c8>)
    108c:	6804      	ldr	r4, [r0, #0]
    108e:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    1090:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    1092:	430b      	orrs	r3, r1
    1094:	6003      	str	r3, [r0, #0]
    return;
    1096:	e003      	b.n	10a0 <reset_sequence()+0x184>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    1098:	4b13      	ldr	r3, [pc, #76]	; (10e8 <reset_sequence()+0x1cc>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	2b01      	cmp	r3, #1
    109e:	d98e      	bls.n	fbe <reset_sequence()+0xa2>
    10a0:	2110      	movs	r1, #16
    10a2:	4812      	ldr	r0, [pc, #72]	; (10ec <reset_sequence()+0x1d0>)
    10a4:	f007 f956 	bl	8354 <usb_serial_write>
    10a8:	4811      	ldr	r0, [pc, #68]	; (10f0 <reset_sequence()+0x1d4>)
}
    10aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    10ae:	f005 bccd 	b.w	6a4c <Print::println()>
    10b2:	bf00      	nop
    10b4:	4200c000 	.word	0x4200c000
    10b8:	2001508c 	.word	0x2001508c
    10bc:	42004000 	.word	0x42004000
    10c0:	200047c1 	.word	0x200047c1
    10c4:	200047c0 	.word	0x200047c0
    10c8:	20015088 	.word	0x20015088
    10cc:	200150a6 	.word	0x200150a6
    10d0:	200150a1 	.word	0x200150a1
    10d4:	200047be 	.word	0x200047be
    10d8:	6dfffff3 	.word	0x6dfffff3
    10dc:	cff3efff 	.word	0xcff3efff
    10e0:	42008000 	.word	0x42008000
    10e4:	7fffff6f 	.word	0x7fffff6f
    10e8:	20015098 	.word	0x20015098
    10ec:	200003cc 	.word	0x200003cc
    10f0:	200041b0 	.word	0x200041b0

000010f4 <nmi_handler()>:
void nmi_handler() {
    10f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (debug_mode)
    10f6:	4c83      	ldr	r4, [pc, #524]	; (1304 <nmi_handler()+0x210>)
    10f8:	7823      	ldrb	r3, [r4, #0]
    10fa:	2b00      	cmp	r3, #0
    10fc:	f000 80c9 	beq.w	1292 <nmi_handler()+0x19e>
    register_flags = register_flags & 0xEF; // Clear the B flag     
    1100:	4e81      	ldr	r6, [pc, #516]	; (1308 <nmi_handler()+0x214>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    1102:	2100      	movs	r1, #0
    1104:	4d81      	ldr	r5, [pc, #516]	; (130c <nmi_handler()+0x218>)
    register_flags = register_flags & 0xEF; // Clear the B flag     
    1106:	7833      	ldrb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    1108:	8828      	ldrh	r0, [r5, #0]
    register_flags = register_flags & 0xEF; // Clear the B flag     
    110a:	f023 0310 	bic.w	r3, r3, #16
    write_byte(register_sp_fixed, push_data);
    110e:	4f80      	ldr	r7, [pc, #512]	; (1310 <nmi_handler()+0x21c>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    1110:	3001      	adds	r0, #1
    register_flags = register_flags & 0xEF; // Clear the B flag     
    1112:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    1116:	b280      	uxth	r0, r0
    register_flags = register_flags & 0xEF; // Clear the B flag     
    1118:	7033      	strb	r3, [r6, #0]
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    111a:	f7ff f983 	bl	424 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    111e:	7838      	ldrb	r0, [r7, #0]
    push(register_pc >> 8); // Push PCH
    1120:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    1122:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1126:	0a09      	lsrs	r1, r1, #8
    1128:	f7ff fb38 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    112c:	7838      	ldrb	r0, [r7, #0]
    write_byte(register_sp_fixed, push_data);
    112e:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    1130:	3801      	subs	r0, #1
    1132:	b2c0      	uxtb	r0, r0
    1134:	7038      	strb	r0, [r7, #0]
    write_byte(register_sp_fixed, push_data);
    1136:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    113a:	f7ff fb2f 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    113e:	7838      	ldrb	r0, [r7, #0]
    write_byte(register_sp_fixed, push_data);
    1140:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    1142:	3801      	subs	r0, #1
    1144:	b2c0      	uxtb	r0, r0
    1146:	7038      	strb	r0, [r7, #0]
    write_byte(register_sp_fixed, push_data);
    1148:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    114c:	f7ff fb26 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    1150:	783b      	ldrb	r3, [r7, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    1152:	2100      	movs	r1, #0
    1154:	f64f 70fa 	movw	r0, #65530	; 0xfffa
    register_sp = register_sp - 1;
    1158:	3b01      	subs	r3, #1
    115a:	703b      	strb	r3, [r7, #0]
    temp1 = read_byte(0xFFFA, false); // Fetch Vector PCL
    115c:	f7ff f962 	bl	424 <read_byte(unsigned short, bool)>
    1160:	4607      	mov	r7, r0
    temp2 = read_byte(0xFFFB, false); // Fetch Vector PCH
    1162:	2100      	movs	r1, #0
    1164:	f64f 70fb 	movw	r0, #65531	; 0xfffb
    1168:	f7ff f95c 	bl	424 <read_byte(unsigned short, bool)>
    current_address = local_address;
    116c:	4a69      	ldr	r2, [pc, #420]	; (1314 <nmi_handler()+0x220>)
    register_pc = (temp2 << 8) | temp1;
    116e:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    1172:	b283      	uxth	r3, r0
    current_address = local_address;
    1174:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    1176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    117a:	7832      	ldrb	r2, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    117c:	802b      	strh	r3, [r5, #0]
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    117e:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    1182:	7032      	strb	r2, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    1184:	d378      	bcc.n	1278 <nmi_handler()+0x184>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    1186:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    118a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    118e:	d309      	bcc.n	11a4 <nmi_handler()+0xb0>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    1190:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    1194:	f5b2 4fa8 	cmp.w	r2, #21504	; 0x5400
    1198:	d36e      	bcc.n	1278 <nmi_handler()+0x184>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    119a:	f5a3 42c0 	sub.w	r2, r3, #24576	; 0x6000
    119e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
    11a2:	d369      	bcc.n	1278 <nmi_handler()+0x184>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    11a4:	4a5c      	ldr	r2, [pc, #368]	; (1318 <nmi_handler()+0x224>)
        last_access_internal_RAM = 0;
    11a6:	2000      	movs	r0, #0
    11a8:	495c      	ldr	r1, [pc, #368]	; (131c <nmi_handler()+0x228>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    11aa:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    11ac:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    11ae:	2a01      	cmp	r2, #1
    11b0:	d005      	beq.n	11be <nmi_handler()+0xca>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    11b2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    11b6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    11ba:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    11be:	7822      	ldrb	r2, [r4, #0]
    11c0:	b94a      	cbnz	r2, 11d6 <nmi_handler()+0xe2>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    11c2:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    11c6:	680a      	ldr	r2, [r1, #0]
    11c8:	04d0      	lsls	r0, r2, #19
    11ca:	d4fc      	bmi.n	11c6 <nmi_handler()+0xd2>
    while (CLK0) {}      // Wait for CLK0 to become low
    11cc:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    11d0:	680a      	ldr	r2, [r1, #0]
    11d2:	04d2      	lsls	r2, r2, #19
    11d4:	d5fc      	bpl.n	11d0 <nmi_handler()+0xdc>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    11d6:	4e52      	ldr	r6, [pc, #328]	; (1320 <nmi_handler()+0x22c>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    11d8:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    11dc:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    11de:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    11e0:	06d8      	lsls	r0, r3, #27
    11e2:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    11e6:	041f      	lsls	r7, r3, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    11e8:	6829      	ldr	r1, [r5, #0]
    11ea:	4a4e      	ldr	r2, [pc, #312]	; (1324 <nmi_handler()+0x230>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    11ec:	f407 2c00 	and.w	ip, r7, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    11f0:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    11f2:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    11f4:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    11f8:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    11fc:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    11fe:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    1202:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    1206:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    1208:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    120c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    1210:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1212:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    1214:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    1216:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1218:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    121c:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    121e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1222:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1224:	4940      	ldr	r1, [pc, #256]	; (1328 <nmi_handler()+0x234>)
    1226:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1228:	4d40      	ldr	r5, [pc, #256]	; (132c <nmi_handler()+0x238>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    122a:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    122c:	0559      	lsls	r1, r3, #21
    122e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    1232:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    1234:	0359      	lsls	r1, r3, #13
    1236:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    123a:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    123c:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    123e:	ea41 010c 	orr.w	r1, r1, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    1242:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    1246:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    1248:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    124a:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    124c:	f407 2180 	and.w	r1, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    1250:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    1254:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    1258:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    125a:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    125c:	682c      	ldr	r4, [r5, #0]
    125e:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    1262:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    1264:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1266:	4932      	ldr	r1, [pc, #200]	; (1330 <nmi_handler()+0x23c>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    1268:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    126a:	4a32      	ldr	r2, [pc, #200]	; (1334 <nmi_handler()+0x240>)
    126c:	680c      	ldr	r4, [r1, #0]
    126e:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    1270:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    1272:	4303      	orrs	r3, r0
    1274:	600b      	str	r3, [r1, #0]
    return;
    1276:	e003      	b.n	1280 <nmi_handler()+0x18c>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    1278:	4a2f      	ldr	r2, [pc, #188]	; (1338 <nmi_handler()+0x244>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    127a:	7812      	ldrb	r2, [r2, #0]
    127c:	2a01      	cmp	r2, #1
    127e:	d991      	bls.n	11a4 <nmi_handler()+0xb0>
    1280:	210e      	movs	r1, #14
    1282:	482e      	ldr	r0, [pc, #184]	; (133c <nmi_handler()+0x248>)
    1284:	f007 f866 	bl	8354 <usb_serial_write>
    1288:	482d      	ldr	r0, [pc, #180]	; (1340 <nmi_handler()+0x24c>)
}
    128a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    128e:	f005 bbdd 	b.w	6a4c <Print::println()>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    1292:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    1296:	6813      	ldr	r3, [r2, #0]
    1298:	04df      	lsls	r7, r3, #19
    129a:	d4fc      	bmi.n	1296 <nmi_handler()+0x1a2>
    while (CLK0) {}      // Wait for CLK0 to become low
    129c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    12a0:	6813      	ldr	r3, [r2, #0]
    12a2:	04de      	lsls	r6, r3, #19
    12a4:	d5fc      	bpl.n	12a0 <nmi_handler()+0x1ac>
        GPIO6_data_d1 = GPIO6_DR;
    12a6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    12aa:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    12ac:	04dd      	lsls	r5, r3, #19
    12ae:	d5fc      	bpl.n	12aa <nmi_handler()+0x1b6>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    12b0:	0d18      	lsrs	r0, r3, #20
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    12b2:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    12b4:	0b5d      	lsrs	r5, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    12b6:	f000 06c0 	and.w	r6, r0, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    12ba:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    12be:	0d59      	lsrs	r1, r3, #21
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    12c0:	f000 0001 	and.w	r0, r0, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    12c4:	4332      	orrs	r2, r6
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    12c6:	f005 0610 	and.w	r6, r5, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    12ca:	4332      	orrs	r2, r6
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    12cc:	f005 0601 	and.w	r6, r5, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    12d0:	0cdd      	lsrs	r5, r3, #19
    12d2:	f005 0508 	and.w	r5, r5, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    12d6:	432a      	orrs	r2, r5
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    12d8:	f001 0504 	and.w	r5, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    12dc:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    12e0:	432a      	orrs	r2, r5
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    12e2:	f3c3 4581 	ubfx	r5, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    12e6:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    12ea:	432a      	orrs	r2, r5
    12ec:	4d15      	ldr	r5, [pc, #84]	; (1344 <nmi_handler()+0x250>)
    12ee:	702a      	strb	r2, [r5, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    12f0:	4a15      	ldr	r2, [pc, #84]	; (1348 <nmi_handler()+0x254>)
    12f2:	7016      	strb	r6, [r2, #0]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    12f4:	4a15      	ldr	r2, [pc, #84]	; (134c <nmi_handler()+0x258>)
    12f6:	7013      	strb	r3, [r2, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    12f8:	4a15      	ldr	r2, [pc, #84]	; (1350 <nmi_handler()+0x25c>)
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    12fa:	4b16      	ldr	r3, [pc, #88]	; (1354 <nmi_handler()+0x260>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    12fc:	7010      	strb	r0, [r2, #0]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    12fe:	7019      	strb	r1, [r3, #0]
    return;
    1300:	e6fe      	b.n	1100 <nmi_handler()+0xc>
    1302:	bf00      	nop
    1304:	200047be 	.word	0x200047be
    1308:	200047c0 	.word	0x200047c0
    130c:	2001508c 	.word	0x2001508c
    1310:	200047c1 	.word	0x200047c1
    1314:	20015088 	.word	0x20015088
    1318:	200150a6 	.word	0x200150a6
    131c:	200150a1 	.word	0x200150a1
    1320:	42004000 	.word	0x42004000
    1324:	6dfffff3 	.word	0x6dfffff3
    1328:	cff3efff 	.word	0xcff3efff
    132c:	42008000 	.word	0x42008000
    1330:	4200c000 	.word	0x4200c000
    1334:	7fffff6f 	.word	0x7fffff6f
    1338:	20015098 	.word	0x20015098
    133c:	20000388 	.word	0x20000388
    1340:	200041b0 	.word	0x200041b0
    1344:	2001509a 	.word	0x2001509a
    1348:	2001509b 	.word	0x2001509b
    134c:	2001509d 	.word	0x2001509d
    1350:	2001509e 	.word	0x2001509e
    1354:	2001509c 	.word	0x2001509c

00001358 <irq_handler(unsigned char)>:
void irq_handler(uint8_t opcode_is_brk) {
    1358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (debug_mode)
    135a:	4c8c      	ldr	r4, [pc, #560]	; (158c <irq_handler(unsigned char)+0x234>)
    135c:	7823      	ldrb	r3, [r4, #0]
    135e:	2b00      	cmp	r3, #0
    1360:	f000 80cc 	beq.w	14fc <irq_handler(unsigned char)+0x1a4>
    register_flags = register_flags | 0x20; // Set the flag[5]          
    1364:	4e8a      	ldr	r6, [pc, #552]	; (1590 <irq_handler(unsigned char)+0x238>)
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    1366:	2801      	cmp	r0, #1
    register_flags = register_flags | 0x20; // Set the flag[5]          
    1368:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    136a:	f000 810c 	beq.w	1586 <irq_handler(unsigned char)+0x22e>
    else register_flags = register_flags & 0xEF; // Clear the B flag
    136e:	f023 0310 	bic.w	r3, r3, #16
    1372:	f043 0320 	orr.w	r3, r3, #32
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    1376:	4d87      	ldr	r5, [pc, #540]	; (1594 <irq_handler(unsigned char)+0x23c>)
    1378:	2100      	movs	r1, #0
    write_byte(register_sp_fixed, push_data);
    137a:	4f87      	ldr	r7, [pc, #540]	; (1598 <irq_handler(unsigned char)+0x240>)
    read_byte(register_pc + 1, false); // Fetch PC+1 (Discard)
    137c:	8828      	ldrh	r0, [r5, #0]
    137e:	7033      	strb	r3, [r6, #0]
    1380:	3001      	adds	r0, #1
    1382:	b280      	uxth	r0, r0
    1384:	f7ff f84e 	bl	424 <read_byte(unsigned short, bool)>
    write_byte(register_sp_fixed, push_data);
    1388:	7838      	ldrb	r0, [r7, #0]
    push(register_pc >> 8); // Push PCH
    138a:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    138c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1390:	0a09      	lsrs	r1, r1, #8
    1392:	f7ff fa03 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    1396:	7838      	ldrb	r0, [r7, #0]
    write_byte(register_sp_fixed, push_data);
    1398:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    139a:	3801      	subs	r0, #1
    139c:	b2c0      	uxtb	r0, r0
    139e:	7038      	strb	r0, [r7, #0]
    write_byte(register_sp_fixed, push_data);
    13a0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    13a4:	f7ff f9fa 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    13a8:	7838      	ldrb	r0, [r7, #0]
    write_byte(register_sp_fixed, push_data);
    13aa:	7831      	ldrb	r1, [r6, #0]
    register_sp = register_sp - 1;
    13ac:	3801      	subs	r0, #1
    13ae:	b2c0      	uxtb	r0, r0
    13b0:	7038      	strb	r0, [r7, #0]
    write_byte(register_sp_fixed, push_data);
    13b2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    13b6:	f7ff f9f1 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    13ba:	783b      	ldrb	r3, [r7, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    13bc:	2100      	movs	r1, #0
    13be:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    register_sp = register_sp - 1;
    13c2:	3b01      	subs	r3, #1
    13c4:	703b      	strb	r3, [r7, #0]
    temp1 = read_byte(0xFFFE, false); // Fetch Vector PCL
    13c6:	f7ff f82d 	bl	424 <read_byte(unsigned short, bool)>
    13ca:	4607      	mov	r7, r0
    temp2 = read_byte(0xFFFF, false); // Fetch Vector PCH
    13cc:	2100      	movs	r1, #0
    13ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
    13d2:	f7ff f827 	bl	424 <read_byte(unsigned short, bool)>
    current_address = local_address;
    13d6:	4a71      	ldr	r2, [pc, #452]	; (159c <irq_handler(unsigned char)+0x244>)
    register_pc = (temp2 << 8) | temp1;
    13d8:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    13dc:	b283      	uxth	r3, r0
    current_address = local_address;
    13de:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    13e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    13e4:	7832      	ldrb	r2, [r6, #0]
    register_pc = (temp2 << 8) | temp1;
    13e6:	802b      	strh	r3, [r5, #0]
    register_flags = register_flags | 0x34; // Set the I flag and restore the B flag
    13e8:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    13ec:	7032      	strb	r2, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    13ee:	d378      	bcc.n	14e2 <irq_handler(unsigned char)+0x18a>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    13f0:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    13f4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    13f8:	d309      	bcc.n	140e <irq_handler(unsigned char)+0xb6>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    13fa:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    13fe:	f5b2 4fa8 	cmp.w	r2, #21504	; 0x5400
    1402:	d36e      	bcc.n	14e2 <irq_handler(unsigned char)+0x18a>
    if ((local_address >= 0x6000) && (local_address < 0xC000)) return addr_mode; //  Apple II Plus RAM 
    1404:	f5a3 42c0 	sub.w	r2, r3, #24576	; 0x6000
    1408:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
    140c:	d369      	bcc.n	14e2 <irq_handler(unsigned char)+0x18a>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    140e:	4a64      	ldr	r2, [pc, #400]	; (15a0 <irq_handler(unsigned char)+0x248>)
        last_access_internal_RAM = 0;
    1410:	2000      	movs	r0, #0
    1412:	4964      	ldr	r1, [pc, #400]	; (15a4 <irq_handler(unsigned char)+0x24c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    1414:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    1416:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    1418:	2a01      	cmp	r2, #1
    141a:	d005      	beq.n	1428 <irq_handler(unsigned char)+0xd0>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    141c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    1420:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1424:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    1428:	7822      	ldrb	r2, [r4, #0]
    142a:	b94a      	cbnz	r2, 1440 <irq_handler(unsigned char)+0xe8>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    142c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    1430:	680a      	ldr	r2, [r1, #0]
    1432:	04d0      	lsls	r0, r2, #19
    1434:	d4fc      	bmi.n	1430 <irq_handler(unsigned char)+0xd8>
    while (CLK0) {}      // Wait for CLK0 to become low
    1436:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    143a:	680a      	ldr	r2, [r1, #0]
    143c:	04d2      	lsls	r2, r2, #19
    143e:	d5fc      	bpl.n	143a <irq_handler(unsigned char)+0xe2>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    1440:	4e59      	ldr	r6, [pc, #356]	; (15a8 <irq_handler(unsigned char)+0x250>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1442:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    1446:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    1448:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    144a:	06d8      	lsls	r0, r3, #27
    144c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    1450:	041f      	lsls	r7, r3, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1452:	6829      	ldr	r1, [r5, #0]
    1454:	4a55      	ldr	r2, [pc, #340]	; (15ac <irq_handler(unsigned char)+0x254>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    1456:	f407 2c00 	and.w	ip, r7, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    145a:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    145c:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    145e:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    1462:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    1466:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    1468:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    146c:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    1470:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    1472:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    1476:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    147a:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    147c:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    147e:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    1480:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1482:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1486:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    1488:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    148c:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    148e:	4948      	ldr	r1, [pc, #288]	; (15b0 <irq_handler(unsigned char)+0x258>)
    1490:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    1492:	4d48      	ldr	r5, [pc, #288]	; (15b4 <irq_handler(unsigned char)+0x25c>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    1494:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    1496:	0559      	lsls	r1, r3, #21
    1498:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    149c:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    149e:	0359      	lsls	r1, r3, #13
    14a0:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    14a4:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    14a6:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    14a8:	ea41 010c 	orr.w	r1, r1, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    14ac:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    14b0:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    14b2:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    14b4:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    14b6:	f407 2180 	and.w	r1, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    14ba:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    14be:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    14c2:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    14c4:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    14c6:	682c      	ldr	r4, [r5, #0]
    14c8:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    14cc:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    14ce:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    14d0:	4939      	ldr	r1, [pc, #228]	; (15b8 <irq_handler(unsigned char)+0x260>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    14d2:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    14d4:	4a39      	ldr	r2, [pc, #228]	; (15bc <irq_handler(unsigned char)+0x264>)
    14d6:	680c      	ldr	r4, [r1, #0]
    14d8:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    14da:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    14dc:	4303      	orrs	r3, r0
    14de:	600b      	str	r3, [r1, #0]
    return;
    14e0:	e003      	b.n	14ea <irq_handler(unsigned char)+0x192>
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    14e2:	4a37      	ldr	r2, [pc, #220]	; (15c0 <irq_handler(unsigned char)+0x268>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    14e4:	7812      	ldrb	r2, [r2, #0]
    14e6:	2a01      	cmp	r2, #1
    14e8:	d991      	bls.n	140e <irq_handler(unsigned char)+0xb6>
    14ea:	210e      	movs	r1, #14
    14ec:	4835      	ldr	r0, [pc, #212]	; (15c4 <irq_handler(unsigned char)+0x26c>)
    14ee:	f006 ff31 	bl	8354 <usb_serial_write>
    14f2:	4835      	ldr	r0, [pc, #212]	; (15c8 <irq_handler(unsigned char)+0x270>)
}
    14f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    14f8:	f005 baa8 	b.w	6a4c <Print::println()>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    14fc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    1500:	6813      	ldr	r3, [r2, #0]
    1502:	04df      	lsls	r7, r3, #19
    1504:	d4fc      	bmi.n	1500 <irq_handler(unsigned char)+0x1a8>
    while (CLK0) {}      // Wait for CLK0 to become low
    1506:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    150a:	6813      	ldr	r3, [r2, #0]
    150c:	04de      	lsls	r6, r3, #19
    150e:	d5fc      	bpl.n	150a <irq_handler(unsigned char)+0x1b2>
        GPIO6_data_d1 = GPIO6_DR;
    1510:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    1514:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    1516:	04dd      	lsls	r5, r3, #19
    1518:	d5fc      	bpl.n	1514 <irq_handler(unsigned char)+0x1bc>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    151a:	0d1d      	lsrs	r5, r3, #20
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    151c:	2801      	cmp	r0, #1
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    151e:	ea4f 22d3 	mov.w	r2, r3, lsr #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    1522:	ea4f 3653 	mov.w	r6, r3, lsr #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    1526:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    152a:	f002 0220 	and.w	r2, r2, #32
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    152e:	ea4f 5153 	mov.w	r1, r3, lsr #21
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    1532:	f005 0501 	and.w	r5, r5, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    1536:	ea42 0207 	orr.w	r2, r2, r7
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    153a:	f006 0710 	and.w	r7, r6, #16
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    153e:	ea42 0207 	orr.w	r2, r2, r7
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    1542:	f006 0701 	and.w	r7, r6, #1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    1546:	ea4f 46d3 	mov.w	r6, r3, lsr #19
    154a:	f006 0608 	and.w	r6, r6, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    154e:	ea42 0206 	orr.w	r2, r2, r6
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    1552:	f001 0604 	and.w	r6, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    1556:	f001 0101 	and.w	r1, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    155a:	ea42 0206 	orr.w	r2, r2, r6
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    155e:	f3c3 4681 	ubfx	r6, r3, #18, #2
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    1562:	f3c3 7380 	ubfx	r3, r3, #30, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    1566:	ea42 0206 	orr.w	r2, r2, r6
    156a:	4e18      	ldr	r6, [pc, #96]	; (15cc <irq_handler(unsigned char)+0x274>)
    156c:	7032      	strb	r2, [r6, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    156e:	4a18      	ldr	r2, [pc, #96]	; (15d0 <irq_handler(unsigned char)+0x278>)
    register_flags = register_flags | 0x20; // Set the flag[5]          
    1570:	4e07      	ldr	r6, [pc, #28]	; (1590 <irq_handler(unsigned char)+0x238>)
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    1572:	7017      	strb	r7, [r2, #0]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    1574:	4a17      	ldr	r2, [pc, #92]	; (15d4 <irq_handler(unsigned char)+0x27c>)
    1576:	7013      	strb	r3, [r2, #0]
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    1578:	4b17      	ldr	r3, [pc, #92]	; (15d8 <irq_handler(unsigned char)+0x280>)
    157a:	701d      	strb	r5, [r3, #0]
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    157c:	4b17      	ldr	r3, [pc, #92]	; (15dc <irq_handler(unsigned char)+0x284>)
    157e:	7019      	strb	r1, [r3, #0]
    register_flags = register_flags | 0x20; // Set the flag[5]          
    1580:	7833      	ldrb	r3, [r6, #0]
    if (opcode_is_brk == 1) register_flags = register_flags | 0x10; // Set the B flag
    1582:	f47f aef4 	bne.w	136e <irq_handler(unsigned char)+0x16>
    1586:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    158a:	e6f4      	b.n	1376 <irq_handler(unsigned char)+0x1e>
    158c:	200047be 	.word	0x200047be
    1590:	200047c0 	.word	0x200047c0
    1594:	2001508c 	.word	0x2001508c
    1598:	200047c1 	.word	0x200047c1
    159c:	20015088 	.word	0x20015088
    15a0:	200150a6 	.word	0x200150a6
    15a4:	200150a1 	.word	0x200150a1
    15a8:	42004000 	.word	0x42004000
    15ac:	6dfffff3 	.word	0x6dfffff3
    15b0:	cff3efff 	.word	0xcff3efff
    15b4:	42008000 	.word	0x42008000
    15b8:	4200c000 	.word	0x4200c000
    15bc:	7fffff6f 	.word	0x7fffff6f
    15c0:	20015098 	.word	0x20015098
    15c4:	20000378 	.word	0x20000378
    15c8:	200041b0 	.word	0x200041b0
    15cc:	2001509a 	.word	0x2001509a
    15d0:	2001509b 	.word	0x2001509b
    15d4:	2001509d 	.word	0x2001509d
    15d8:	2001509e 	.word	0x2001509e
    15dc:	2001509c 	.word	0x2001509c

000015e0 <opcode_0x0A()>:
// -------------------------------------------------

// -------------------------------------------------
// 0x0A - ASL A - Arithmetic Shift Left - Accumulator
// -------------------------------------------------
void opcode_0x0A() {
    15e0:	b508      	push	{r3, lr}

    read_byte(register_pc, false);
    15e2:	4b12      	ldr	r3, [pc, #72]	; (162c <opcode_0x0A()+0x4c>)
    15e4:	2100      	movs	r1, #0
    15e6:	8818      	ldrh	r0, [r3, #0]
    15e8:	f7fe ff1c 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    15ec:	4910      	ldr	r1, [pc, #64]	; (1630 <opcode_0x0A()+0x50>)
    15ee:	4811      	ldr	r0, [pc, #68]	; (1634 <opcode_0x0A()+0x54>)
    15f0:	780a      	ldrb	r2, [r1, #0]
    15f2:	f991 3000 	ldrsb.w	r3, [r1]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a << 1;
    15f6:	0052      	lsls	r2, r2, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    15f8:	2b00      	cmp	r3, #0
    15fa:	7803      	ldrb	r3, [r0, #0]
    register_a = register_a << 1;
    15fc:	b2d2      	uxtb	r2, r2
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    15fe:	bfb4      	ite	lt
    1600:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    1604:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = register_a << 1;
    1608:	700a      	strb	r2, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    160a:	0611      	lsls	r1, r2, #24
    160c:	d407      	bmi.n	161e <opcode_0x0A()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    160e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1612:	7003      	strb	r3, [r0, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1614:	b92a      	cbnz	r2, 1622 <opcode_0x0A()+0x42>
    1616:	f043 0302 	orr.w	r3, r3, #2
    return;
    161a:	7003      	strb	r3, [r0, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
    161c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    161e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1622:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1626:	7003      	strb	r3, [r0, #0]
    1628:	bd08      	pop	{r3, pc}
    162a:	bf00      	nop
    162c:	2001508c 	.word	0x2001508c
    1630:	200150a3 	.word	0x200150a3
    1634:	200047c0 	.word	0x200047c0

00001638 <opcode_0x4A()>:

// -------------------------------------------------
// 0x4A - LSR A - Logical Shift Right - Accumulator
// -------------------------------------------------
void opcode_0x4A() {
    1638:	b508      	push	{r3, lr}

    read_byte(register_pc, false);
    163a:	4b0f      	ldr	r3, [pc, #60]	; (1678 <opcode_0x4A()+0x40>)
    163c:	2100      	movs	r1, #0
    163e:	8818      	ldrh	r0, [r3, #0]
    1640:	f7fe fef0 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    1644:	480d      	ldr	r0, [pc, #52]	; (167c <opcode_0x4A()+0x44>)
    1646:	490e      	ldr	r1, [pc, #56]	; (1680 <opcode_0x4A()+0x48>)
    1648:	7802      	ldrb	r2, [r0, #0]
    164a:	780b      	ldrb	r3, [r1, #0]
    164c:	f012 0f01 	tst.w	r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = register_a >> 1;
    1650:	ea4f 0252 	mov.w	r2, r2, lsr #1
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    1654:	bf14      	ite	ne
    1656:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    165a:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = register_a >> 1;
    165e:	7002      	strb	r2, [r0, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1660:	b92a      	cbnz	r2, 166e <opcode_0x4A()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1666:	f043 0302 	orr.w	r3, r3, #2
    return;
    166a:	700b      	strb	r3, [r1, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
    166c:	bd08      	pop	{r3, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    166e:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    1672:	700b      	strb	r3, [r1, #0]
    1674:	bd08      	pop	{r3, pc}
    1676:	bf00      	nop
    1678:	2001508c 	.word	0x2001508c
    167c:	200150a3 	.word	0x200150a3
    1680:	200047c0 	.word	0x200047c0

00001684 <opcode_0x6A()>:

// -------------------------------------------------
// 0x6A - ROR A - Rotate Right - Accumulator
// -------------------------------------------------
void opcode_0x6A() {
    1684:	b508      	push	{r3, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    1686:	4b12      	ldr	r3, [pc, #72]	; (16d0 <opcode_0x6A()+0x4c>)
    1688:	2100      	movs	r1, #0
    168a:	8818      	ldrh	r0, [r3, #0]
    168c:	f7fe feca 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    1690:	4910      	ldr	r1, [pc, #64]	; (16d4 <opcode_0x6A()+0x50>)

    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    1692:	4811      	ldr	r0, [pc, #68]	; (16d8 <opcode_0x6A()+0x54>)
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    1694:	780b      	ldrb	r3, [r1, #0]
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    1696:	f890 c000 	ldrb.w	ip, [r0]
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    169a:	01da      	lsls	r2, r3, #7
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    169c:	f01c 0f01 	tst.w	ip, #1
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    16a0:	b2d2      	uxtb	r2, r2
    if (0x01 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    16a2:	bf14      	ite	ne
    16a4:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    16a8:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe

    register_a = (old_carry_flag | (register_a >> 1));
    16ac:	ea42 025c 	orr.w	r2, r2, ip, lsr #1
    16b0:	7002      	strb	r2, [r0, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    16b2:	0610      	lsls	r0, r2, #24
    16b4:	d406      	bmi.n	16c4 <opcode_0x6A()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    16b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    16ba:	b92a      	cbnz	r2, 16c8 <opcode_0x6A()+0x44>
    16bc:	f043 0302 	orr.w	r3, r3, #2
    return;
    16c0:	700b      	strb	r3, [r1, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
    16c2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    16c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    16c8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    16cc:	700b      	strb	r3, [r1, #0]
    16ce:	bd08      	pop	{r3, pc}
    16d0:	2001508c 	.word	0x2001508c
    16d4:	200047c0 	.word	0x200047c0
    16d8:	200150a3 	.word	0x200150a3

000016dc <opcode_0x2A()>:

// -------------------------------------------------
// 0x2A - ROL A - Rotate Left - Accumulator
// -------------------------------------------------
void opcode_0x2A() {
    16dc:	b508      	push	{r3, lr}

    uint8_t old_carry_flag = 0;

    read_byte(register_pc, false);
    16de:	4b14      	ldr	r3, [pc, #80]	; (1730 <opcode_0x2A()+0x54>)
    16e0:	2100      	movs	r1, #0
    16e2:	8818      	ldrh	r0, [r3, #0]
    16e4:	f7fe fe9e 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();

    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    16e8:	4812      	ldr	r0, [pc, #72]	; (1734 <opcode_0x2A()+0x58>)

    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    16ea:	4913      	ldr	r1, [pc, #76]	; (1738 <opcode_0x2A()+0x5c>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    16ec:	7803      	ldrb	r3, [r0, #0]
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    16ee:	f891 c000 	ldrb.w	ip, [r1]
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    16f2:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    16f6:	f991 e000 	ldrsb.w	lr, [r1]
    else register_flags = register_flags & 0xFE; // Clear the C flag

    register_a = (register_a << 1) | old_carry_flag;
    16fa:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    16fe:	f1be 0f00 	cmp.w	lr, #0
    register_a = (register_a << 1) | old_carry_flag;
    1702:	b2d2      	uxtb	r2, r2
    if (0x80 & register_a) register_flags = register_flags | 0x01; // Set the C flag
    1704:	bfb4      	ite	lt
    1706:	f043 0301 	orrlt.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    170a:	f003 03fe 	andge.w	r3, r3, #254	; 0xfe
    register_a = (register_a << 1) | old_carry_flag;
    170e:	700a      	strb	r2, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1710:	0611      	lsls	r1, r2, #24
    1712:	d406      	bmi.n	1722 <opcode_0x2A()+0x46>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1718:	b92a      	cbnz	r2, 1726 <opcode_0x2A()+0x4a>
    171a:	f043 0302 	orr.w	r3, r3, #2
    return;
    171e:	7003      	strb	r3, [r0, #0]

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
    1720:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1726:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    172a:	7003      	strb	r3, [r0, #0]
    172c:	bd08      	pop	{r3, pc}
    172e:	bf00      	nop
    1730:	2001508c 	.word	0x2001508c
    1734:	200047c0 	.word	0x200047c0
    1738:	200150a3 	.word	0x200150a3

0000173c <Calculate_ADC(unsigned short)>:
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if ((flag_d) == 1) {
    173c:	4937      	ldr	r1, [pc, #220]	; (181c <Calculate_ADC(unsigned short)+0xe0>)
void Calculate_ADC(uint16_t local_data) {
    173e:	b570      	push	{r4, r5, r6, lr}
    if ((flag_d) == 1) {
    1740:	780b      	ldrb	r3, [r1, #0]
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    1742:	4c37      	ldr	r4, [pc, #220]	; (1820 <Calculate_ADC(unsigned short)+0xe4>)
    if ((flag_d) == 1) {
    1744:	071a      	lsls	r2, r3, #28
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    1746:	f894 c000 	ldrb.w	ip, [r4]
    if ((flag_d) == 1) {
    174a:	d532      	bpl.n	17b2 <Calculate_ADC(unsigned short)+0x76>
        bcd_low = (0x0F & register_a) + (0x0F & local_data) + (flag_c);
    174c:	f003 0e01 	and.w	lr, r3, #1
    1750:	f00c 020f 	and.w	r2, ip, #15
    1754:	f000 050f 	and.w	r5, r0, #15
    1758:	4472      	add	r2, lr
    175a:	442a      	add	r2, r5
        if (bcd_low > 0x9) {
    175c:	2a09      	cmp	r2, #9
    175e:	d823      	bhi.n	17a8 <Calculate_ADC(unsigned short)+0x6c>
    1760:	f04f 0e00 	mov.w	lr, #0
            low_carry = 0x10;
            bcd_low = bcd_low - 0xA;
        }

        bcd_high = (0xF0 & register_a) + (0xF0 & local_data) + low_carry;
    1764:	f00c 05f0 	and.w	r5, ip, #240	; 0xf0
    1768:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    176c:	4435      	add	r5, r6
    176e:	44ae      	add	lr, r5
        if (bcd_high > 0x90) {
    1770:	f1be 0f90 	cmp.w	lr, #144	; 0x90
    1774:	d838      	bhi.n	17e8 <Calculate_ADC(unsigned short)+0xac>
            high_carry = 1;
            bcd_high = bcd_high - 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    1776:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    177a:	4472      	add	r2, lr
    177c:	b2d2      	uxtb	r2, r2
        else register_flags = register_flags & 0xFE; // Clear the C flag
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    177e:	fa4f fc8c 	sxtb.w	ip, ip
    1782:	b240      	sxtb	r0, r0

    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    1784:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    1788:	b2d5      	uxtb	r5, r2
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    178a:	db25      	blt.n	17d8 <Calculate_ADC(unsigned short)+0x9c>
    178c:	2800      	cmp	r0, #0
    178e:	db20      	blt.n	17d2 <Calculate_ADC(unsigned short)+0x96>
    1790:	0616      	lsls	r6, r2, #24
    1792:	d432      	bmi.n	17fa <Calculate_ADC(unsigned short)+0xbe>
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    1794:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    1798:	7025      	strb	r5, [r4, #0]
    else register_flags = register_flags & 0x7F; // Clear the N flag
    179a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    179e:	b9a5      	cbnz	r5, 17ca <Calculate_ADC(unsigned short)+0x8e>
    17a0:	f043 0302 	orr.w	r3, r3, #2
    return;
    17a4:	700b      	strb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    17a6:	bd70      	pop	{r4, r5, r6, pc}
            bcd_low = bcd_low - 0xA;
    17a8:	3a0a      	subs	r2, #10
    17aa:	f04f 0e10 	mov.w	lr, #16
    17ae:	b292      	uxth	r2, r2
    17b0:	e7d8      	b.n	1764 <Calculate_ADC(unsigned short)+0x28>
        total = register_a + local_data + (flag_c);
    17b2:	f003 0201 	and.w	r2, r3, #1
    17b6:	4402      	add	r2, r0
    17b8:	4462      	add	r2, ip
    17ba:	b292      	uxth	r2, r2
        if (total > 255) register_flags = register_flags | 0x01; // Set the C flag
    17bc:	2aff      	cmp	r2, #255	; 0xff
    17be:	bf8c      	ite	hi
    17c0:	f043 0301 	orrhi.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag
    17c4:	f003 03fe 	andls.w	r3, r3, #254	; 0xfe
    17c8:	e7d9      	b.n	177e <Calculate_ADC(unsigned short)+0x42>
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    17ca:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    17ce:	700b      	strb	r3, [r1, #0]
}
    17d0:	bd70      	pop	{r4, r5, r6, pc}
    else if (operand0 != 0 && operand1 != 0 && result == 0) register_flags = register_flags | 0x40;
    17d2:	f1bc 0f00 	cmp.w	ip, #0
    17d6:	da16      	bge.n	1806 <Calculate_ADC(unsigned short)+0xca>
    17d8:	2800      	cmp	r0, #0
    17da:	da14      	bge.n	1806 <Calculate_ADC(unsigned short)+0xca>
    17dc:	0612      	lsls	r2, r2, #24
    17de:	d418      	bmi.n	1812 <Calculate_ADC(unsigned short)+0xd6>
    17e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    17e4:	7025      	strb	r5, [r4, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    17e6:	e7d8      	b.n	179a <Calculate_ADC(unsigned short)+0x5e>
            bcd_high = bcd_high - 0xA0;
    17e8:	f1ae 0ea0 	sub.w	lr, lr, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    17ec:	f023 0301 	bic.w	r3, r3, #1
            bcd_high = bcd_high - 0xA0;
    17f0:	fa1f fe8e 	uxth.w	lr, lr
            register_flags = register_flags | 0x01;
    17f4:	f043 0301 	orr.w	r3, r3, #1
    17f8:	e7bf      	b.n	177a <Calculate_ADC(unsigned short)+0x3e>
    if (operand0 == 0 && operand1 == 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    17fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    17fe:	7025      	strb	r5, [r4, #0]
    1800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1804:	e7cb      	b.n	179e <Calculate_ADC(unsigned short)+0x62>
    1806:	0610      	lsls	r0, r2, #24
    else register_flags = register_flags & 0xBF; // Clear the V flag
    1808:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    register_a = (0xFF & total);
    180c:	7025      	strb	r5, [r4, #0]
    180e:	d5c4      	bpl.n	179a <Calculate_ADC(unsigned short)+0x5e>
    1810:	e7f6      	b.n	1800 <Calculate_ADC(unsigned short)+0xc4>
    else register_flags = register_flags & 0xBF; // Clear the V flag
    1812:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    register_a = (0xFF & total);
    1816:	7025      	strb	r5, [r4, #0]
    1818:	e7f2      	b.n	1800 <Calculate_ADC(unsigned short)+0xc4>
    181a:	bf00      	nop
    181c:	200047c0 	.word	0x200047c0
    1820:	200150a3 	.word	0x200150a3

00001824 <opcode_0x69()>:
void opcode_0x69() {
    1824:	b508      	push	{r3, lr}
    register_pc++;
    1826:	4b06      	ldr	r3, [pc, #24]	; (1840 <opcode_0x69()+0x1c>)
    return read_byte(register_pc, false);
    1828:	2100      	movs	r1, #0
    register_pc++;
    182a:	8818      	ldrh	r0, [r3, #0]
    182c:	3001      	adds	r0, #1
    182e:	b280      	uxth	r0, r0
    1830:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    1832:	f7fe fdf7 	bl	424 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_Immediate());
    1836:	b280      	uxth	r0, r0
    return;
} // 0x69 - ADC - Immediate - Binary
    1838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_ADC(Fetch_Immediate());
    183c:	f7ff bf7e 	b.w	173c <Calculate_ADC(unsigned short)>
    1840:	2001508c 	.word	0x2001508c

00001844 <opcode_0x65()>:
void opcode_0x65() {
    1844:	b508      	push	{r3, lr}
    register_pc++;
    1846:	4b09      	ldr	r3, [pc, #36]	; (186c <opcode_0x65()+0x28>)
    return read_byte(register_pc, false);
    1848:	2100      	movs	r1, #0
    register_pc++;
    184a:	8818      	ldrh	r0, [r3, #0]
    184c:	3001      	adds	r0, #1
    184e:	b280      	uxth	r0, r0
    1850:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    1852:	f7fe fde7 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    1856:	4b06      	ldr	r3, [pc, #24]	; (1870 <opcode_0x65()+0x2c>)
    1858:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    185a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    185c:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    185e:	f7fe fde1 	bl	424 <read_byte(unsigned short, bool)>
    Calculate_ADC(Fetch_ZeroPage());
    1862:	b280      	uxth	r0, r0
    return;
} // 0x65 - ADC - ZeroPage
    1864:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_ADC(Fetch_ZeroPage());
    1868:	f7ff bf68 	b.w	173c <Calculate_ADC(unsigned short)>
    186c:	2001508c 	.word	0x2001508c
    1870:	2001508a 	.word	0x2001508a

00001874 <opcode_0x75()>:
void opcode_0x75() {
    1874:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_ZeroPage_X());
    1876:	f7ff f903 	bl	a80 <Fetch_ZeroPage_X()>
    187a:	b280      	uxth	r0, r0
    return;
} // 0x75 - ADC - ZeroPage , X
    187c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_ADC(Fetch_ZeroPage_X());
    1880:	f7ff bf5c 	b.w	173c <Calculate_ADC(unsigned short)>

00001884 <opcode_0x6D()>:
void opcode_0x6D() {
    1884:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute());
    1886:	f7ff f93b 	bl	b00 <Fetch_Absolute()>
    188a:	b280      	uxth	r0, r0
    return;
} // 0x6D - ADC - Absolute
    188c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_ADC(Fetch_Absolute());
    1890:	f7ff bf54 	b.w	173c <Calculate_ADC(unsigned short)>

00001894 <opcode_0x7D()>:
void opcode_0x7D() {
    1894:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute_X(1));
    1896:	2001      	movs	r0, #1
    1898:	f7ff f950 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    189c:	b280      	uxth	r0, r0
    return;
} // 0x7D - ADC - Absolute , X
    189e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_ADC(Fetch_Absolute_X(1));
    18a2:	f7ff bf4b 	b.w	173c <Calculate_ADC(unsigned short)>
    18a6:	bf00      	nop

000018a8 <opcode_0x79()>:
void opcode_0x79() {
    18a8:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Absolute_Y(1));
    18aa:	2001      	movs	r0, #1
    18ac:	f7ff f978 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    18b0:	b280      	uxth	r0, r0
    return;
} // 0x79 - ADC - Absolute , Y
    18b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_ADC(Fetch_Absolute_Y(1));
    18b6:	f7ff bf41 	b.w	173c <Calculate_ADC(unsigned short)>
    18ba:	bf00      	nop

000018bc <opcode_0x61()>:
void opcode_0x61() {
    18bc:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    18be:	f7ff f9a1 	bl	c04 <Fetch_Indexed_Indirect_X()>
    18c2:	b280      	uxth	r0, r0
    return;
} // 0x61 - ADC - Indexed Indirect X
    18c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_ADC(Fetch_Indexed_Indirect_X());
    18c8:	f7ff bf38 	b.w	173c <Calculate_ADC(unsigned short)>

000018cc <opcode_0x71()>:
void opcode_0x71() {
    18cc:	b508      	push	{r3, lr}
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    18ce:	2001      	movs	r0, #1
    18d0:	f7ff f9c2 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    18d4:	b280      	uxth	r0, r0
    return;
} // 0x71 - ADC - Indirect Indexed  Y
    18d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_ADC(Fetch_Indexed_Indirect_Y(1));
    18da:	f7ff bf2f 	b.w	173c <Calculate_ADC(unsigned short)>
    18de:	bf00      	nop

000018e0 <Calculate_SBC(unsigned short)>:
    uint8_t low_carry = 0;
    uint8_t high_carry = 0;

    Begin_Fetch_Next_Opcode();

    if (flag_c != 0) flag_c_invert = 0;
    18e0:	4939      	ldr	r1, [pc, #228]	; (19c8 <Calculate_SBC(unsigned short)+0xe8>)
void Calculate_SBC(uint16_t local_data) {
    18e2:	b570      	push	{r4, r5, r6, lr}
    if (flag_c != 0) flag_c_invert = 0;
    18e4:	780b      	ldrb	r3, [r1, #0]
    else flag_c_invert = 1;

    if ((flag_d) == 1) {
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    18e6:	4c39      	ldr	r4, [pc, #228]	; (19cc <Calculate_SBC(unsigned short)+0xec>)
    18e8:	43da      	mvns	r2, r3
    if ((flag_d) == 1) {
    18ea:	071e      	lsls	r6, r3, #28
    18ec:	f002 0201 	and.w	r2, r2, #1
    18f0:	d538      	bpl.n	1964 <Calculate_SBC(unsigned short)+0x84>
        bcd_low = (0x0F & register_a) - (0x0F & local_data) - flag_c_invert;
    18f2:	f000 050f 	and.w	r5, r0, #15
    18f6:	f894 c000 	ldrb.w	ip, [r4]
    18fa:	442a      	add	r2, r5
    18fc:	f00c 0e0f 	and.w	lr, ip, #15
    1900:	ebae 0e02 	sub.w	lr, lr, r2
    1904:	fa1f fe8e 	uxth.w	lr, lr
        if (bcd_low > 0x9) {
    1908:	f1be 0f09 	cmp.w	lr, #9
    190c:	d824      	bhi.n	1958 <Calculate_SBC(unsigned short)+0x78>
    190e:	2500      	movs	r5, #0
            low_carry = 0x10;
            bcd_low = bcd_low + 0xA;
        }

        bcd_high = (0xF0 & register_a) - (0xF0 & local_data) - low_carry;
    1910:	f00c 02f0 	and.w	r2, ip, #240	; 0xf0
    1914:	f000 06f0 	and.w	r6, r0, #240	; 0xf0
    1918:	1b92      	subs	r2, r2, r6
    191a:	1b52      	subs	r2, r2, r5
    191c:	b292      	uxth	r2, r2
        if (bcd_high > 0x90) {
    191e:	2a90      	cmp	r2, #144	; 0x90
    1920:	d83c      	bhi.n	199c <Calculate_SBC(unsigned short)+0xbc>
            high_carry = 1;
            bcd_high = bcd_high + 0xA0;
        }

        register_flags = register_flags & 0xFE; // Clear the C flag
    1922:	f023 0301 	bic.w	r3, r3, #1
            bcd_total = bcd_total - 0x0A;
        }

        if (high_carry == 0) {
            bcd_total = bcd_total - 0xA0;
            register_flags = register_flags | 0x01;
    1926:	f043 0301 	orr.w	r3, r3, #1
        } // Set the C flag
        else register_flags = register_flags & 0xFE; // Clear the C flag     

        total = (0xFF & (bcd_low + bcd_high));
    192a:	4472      	add	r2, lr
    192c:	b2d2      	uxtb	r2, r2
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    }

    operand0 = (register_a & 0x80);
    operand1 = (local_data & 0x80);
    result = (total & 0x80);
    192e:	fa4f fc8c 	sxtb.w	ip, ip
    1932:	b240      	sxtb	r0, r0

    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    1934:	f1bc 0f00 	cmp.w	ip, #0
    result = (total & 0x80);
    1938:	b2d5      	uxtb	r5, r2
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    193a:	db27      	blt.n	198c <Calculate_SBC(unsigned short)+0xac>
    193c:	2800      	cmp	r0, #0
    193e:	da22      	bge.n	1986 <Calculate_SBC(unsigned short)+0xa6>
    1940:	0616      	lsls	r6, r2, #24
    1942:	d430      	bmi.n	19a6 <Calculate_SBC(unsigned short)+0xc6>
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    else register_flags = register_flags & 0xBF; // Clear the V flag
    1944:	f003 03bf 	and.w	r3, r3, #191	; 0xbf

    register_a = (0xFF & total);
    1948:	7025      	strb	r5, [r4, #0]
    else register_flags = register_flags & 0x7F; // Clear the N flag
    194a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    194e:	b9b5      	cbnz	r5, 197e <Calculate_SBC(unsigned short)+0x9e>
    1950:	f043 0302 	orr.w	r3, r3, #2
    return;
    1954:	700b      	strb	r3, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);

    return;
}
    1956:	bd70      	pop	{r4, r5, r6, pc}
            bcd_low = bcd_low + 0xA;
    1958:	f10e 0e0a 	add.w	lr, lr, #10
    195c:	2510      	movs	r5, #16
    195e:	fa1f fe8e 	uxth.w	lr, lr
    1962:	e7d5      	b.n	1910 <Calculate_SBC(unsigned short)+0x30>
        total = register_a - local_data - flag_c_invert;
    1964:	f894 c000 	ldrb.w	ip, [r4]
    1968:	ebac 0500 	sub.w	r5, ip, r0
    196c:	1aad      	subs	r5, r5, r2
    196e:	b2aa      	uxth	r2, r5
        if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    1970:	042d      	lsls	r5, r5, #16
    1972:	bf54      	ite	pl
    1974:	f043 0301 	orrpl.w	r3, r3, #1
        else register_flags = register_flags & 0xFE; // Clear the C flag  
    1978:	f003 03fe 	andmi.w	r3, r3, #254	; 0xfe
    197c:	e7d7      	b.n	192e <Calculate_SBC(unsigned short)+0x4e>
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    197e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1982:	700b      	strb	r3, [r1, #0]
}
    1984:	bd70      	pop	{r4, r5, r6, pc}
    else if (operand0 != 0 && operand1 == 0 && result == 0) register_flags = register_flags | 0x40;
    1986:	f1bc 0f00 	cmp.w	ip, #0
    198a:	da12      	bge.n	19b2 <Calculate_SBC(unsigned short)+0xd2>
    198c:	2800      	cmp	r0, #0
    198e:	db10      	blt.n	19b2 <Calculate_SBC(unsigned short)+0xd2>
    1990:	0612      	lsls	r2, r2, #24
    1992:	d414      	bmi.n	19be <Calculate_SBC(unsigned short)+0xde>
    1994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    1998:	7025      	strb	r5, [r4, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    199a:	e7d6      	b.n	194a <Calculate_SBC(unsigned short)+0x6a>
            bcd_high = bcd_high + 0xA0;
    199c:	32a0      	adds	r2, #160	; 0xa0
        register_flags = register_flags & 0xFE; // Clear the C flag
    199e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
            bcd_high = bcd_high + 0xA0;
    19a2:	b292      	uxth	r2, r2
        if (high_carry == 0) {
    19a4:	e7c1      	b.n	192a <Calculate_SBC(unsigned short)+0x4a>
    if (operand0 == 0 && operand1 != 0 && result != 0) register_flags = register_flags | 0x40; // Set the V flag
    19a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    register_a = (0xFF & total);
    19aa:	7025      	strb	r5, [r4, #0]
    19ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    19b0:	e7cd      	b.n	194e <Calculate_SBC(unsigned short)+0x6e>
    19b2:	0610      	lsls	r0, r2, #24
    else register_flags = register_flags & 0xBF; // Clear the V flag
    19b4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    register_a = (0xFF & total);
    19b8:	7025      	strb	r5, [r4, #0]
    19ba:	d5c6      	bpl.n	194a <Calculate_SBC(unsigned short)+0x6a>
    19bc:	e7f6      	b.n	19ac <Calculate_SBC(unsigned short)+0xcc>
    else register_flags = register_flags & 0xBF; // Clear the V flag
    19be:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    register_a = (0xFF & total);
    19c2:	7025      	strb	r5, [r4, #0]
    19c4:	e7f2      	b.n	19ac <Calculate_SBC(unsigned short)+0xcc>
    19c6:	bf00      	nop
    19c8:	200047c0 	.word	0x200047c0
    19cc:	200150a3 	.word	0x200150a3

000019d0 <opcode_0xE9()>:
void opcode_0xE9() {
    19d0:	b508      	push	{r3, lr}
    register_pc++;
    19d2:	4b06      	ldr	r3, [pc, #24]	; (19ec <opcode_0xE9()+0x1c>)
    return read_byte(register_pc, false);
    19d4:	2100      	movs	r1, #0
    register_pc++;
    19d6:	8818      	ldrh	r0, [r3, #0]
    19d8:	3001      	adds	r0, #1
    19da:	b280      	uxth	r0, r0
    19dc:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    19de:	f7fe fd21 	bl	424 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_Immediate());
    19e2:	b280      	uxth	r0, r0
    return;
} // 0xE9 - SBC - Immediate
    19e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_SBC(Fetch_Immediate());
    19e8:	f7ff bf7a 	b.w	18e0 <Calculate_SBC(unsigned short)>
    19ec:	2001508c 	.word	0x2001508c

000019f0 <opcode_0xE5()>:
void opcode_0xE5() {
    19f0:	b508      	push	{r3, lr}
    register_pc++;
    19f2:	4b09      	ldr	r3, [pc, #36]	; (1a18 <opcode_0xE5()+0x28>)
    return read_byte(register_pc, false);
    19f4:	2100      	movs	r1, #0
    register_pc++;
    19f6:	8818      	ldrh	r0, [r3, #0]
    19f8:	3001      	adds	r0, #1
    19fa:	b280      	uxth	r0, r0
    19fc:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    19fe:	f7fe fd11 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    1a02:	4b06      	ldr	r3, [pc, #24]	; (1a1c <opcode_0xE5()+0x2c>)
    1a04:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    1a06:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    1a08:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    1a0a:	f7fe fd0b 	bl	424 <read_byte(unsigned short, bool)>
    Calculate_SBC(Fetch_ZeroPage());
    1a0e:	b280      	uxth	r0, r0
    return;
} // 0xE5 - SBC - ZeroPage
    1a10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_SBC(Fetch_ZeroPage());
    1a14:	f7ff bf64 	b.w	18e0 <Calculate_SBC(unsigned short)>
    1a18:	2001508c 	.word	0x2001508c
    1a1c:	2001508a 	.word	0x2001508a

00001a20 <opcode_0xF5()>:
void opcode_0xF5() {
    1a20:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_ZeroPage_X());
    1a22:	f7ff f82d 	bl	a80 <Fetch_ZeroPage_X()>
    1a26:	b280      	uxth	r0, r0
    return;
} // 0xF5 - SBC - ZeroPage , X
    1a28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_SBC(Fetch_ZeroPage_X());
    1a2c:	f7ff bf58 	b.w	18e0 <Calculate_SBC(unsigned short)>

00001a30 <opcode_0xED()>:
void opcode_0xED() {
    1a30:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute());
    1a32:	f7ff f865 	bl	b00 <Fetch_Absolute()>
    1a36:	b280      	uxth	r0, r0
    return;
} // 0xED - SBC - Absolute
    1a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_SBC(Fetch_Absolute());
    1a3c:	f7ff bf50 	b.w	18e0 <Calculate_SBC(unsigned short)>

00001a40 <opcode_0xFD()>:
void opcode_0xFD() {
    1a40:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute_X(1));
    1a42:	2001      	movs	r0, #1
    1a44:	f7ff f87a 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    1a48:	b280      	uxth	r0, r0
    return;
} // 0xFD - SBC - Absolute , X
    1a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_SBC(Fetch_Absolute_X(1));
    1a4e:	f7ff bf47 	b.w	18e0 <Calculate_SBC(unsigned short)>
    1a52:	bf00      	nop

00001a54 <opcode_0xF9()>:
void opcode_0xF9() {
    1a54:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Absolute_Y(1));
    1a56:	2001      	movs	r0, #1
    1a58:	f7ff f8a2 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    1a5c:	b280      	uxth	r0, r0
    return;
} // 0xF9 - SBC - Absolute , Y
    1a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_SBC(Fetch_Absolute_Y(1));
    1a62:	f7ff bf3d 	b.w	18e0 <Calculate_SBC(unsigned short)>
    1a66:	bf00      	nop

00001a68 <opcode_0xE1()>:
void opcode_0xE1() {
    1a68:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    1a6a:	f7ff f8cb 	bl	c04 <Fetch_Indexed_Indirect_X()>
    1a6e:	b280      	uxth	r0, r0
    return;
} // 0xE1 - SBC - Indexed Indirect X
    1a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_SBC(Fetch_Indexed_Indirect_X());
    1a74:	f7ff bf34 	b.w	18e0 <Calculate_SBC(unsigned short)>

00001a78 <opcode_0xF1()>:
void opcode_0xF1() {
    1a78:	b508      	push	{r3, lr}
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    1a7a:	2001      	movs	r0, #1
    1a7c:	f7ff f8ec 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    1a80:	b280      	uxth	r0, r0
    return;
} // 0xF1 - SBC - Indirect Indexed  Y
    1a82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Calculate_SBC(Fetch_Indexed_Indirect_Y(1));
    1a86:	f7ff bf2b 	b.w	18e0 <Calculate_SBC(unsigned short)>
    1a8a:	bf00      	nop

00001a8c <opcode_0xEA()>:

// -------------------------------------------------
// Flag set/resets and NOP
// -------------------------------------------------
void opcode_0xEA() {
    1a8c:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1a8e:	4b04      	ldr	r3, [pc, #16]	; (1aa0 <opcode_0xEA()+0x14>)
    1a90:	2100      	movs	r1, #0
    1a92:	8818      	ldrh	r0, [r3, #0]
    1a94:	3001      	adds	r0, #1
    1a96:	b280      	uxth	r0, r0
    1a98:	f7fe fcc4 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0xEA - NOP   
    1a9c:	bd08      	pop	{r3, pc}
    1a9e:	bf00      	nop
    1aa0:	2001508c 	.word	0x2001508c

00001aa4 <opcode_0x18()>:
void opcode_0x18() {
    1aa4:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1aa6:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <opcode_0x18()+0x1c>)
    1aa8:	2100      	movs	r1, #0
    1aaa:	8818      	ldrh	r0, [r3, #0]
    1aac:	3001      	adds	r0, #1
    1aae:	b280      	uxth	r0, r0
    1ab0:	f7fe fcb8 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xFE;
    1ab4:	4a03      	ldr	r2, [pc, #12]	; (1ac4 <opcode_0x18()+0x20>)
    1ab6:	7813      	ldrb	r3, [r2, #0]
    1ab8:	f023 0301 	bic.w	r3, r3, #1
    1abc:	7013      	strb	r3, [r2, #0]
    return;
} // 0x18 - CLC - Clear Carry Flag  
    1abe:	bd08      	pop	{r3, pc}
    1ac0:	2001508c 	.word	0x2001508c
    1ac4:	200047c0 	.word	0x200047c0

00001ac8 <opcode_0xD8()>:
void opcode_0xD8() {
    1ac8:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1aca:	4b06      	ldr	r3, [pc, #24]	; (1ae4 <opcode_0xD8()+0x1c>)
    1acc:	2100      	movs	r1, #0
    1ace:	8818      	ldrh	r0, [r3, #0]
    1ad0:	3001      	adds	r0, #1
    1ad2:	b280      	uxth	r0, r0
    1ad4:	f7fe fca6 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xF7;
    1ad8:	4a03      	ldr	r2, [pc, #12]	; (1ae8 <opcode_0xD8()+0x20>)
    1ada:	7813      	ldrb	r3, [r2, #0]
    1adc:	f023 0308 	bic.w	r3, r3, #8
    1ae0:	7013      	strb	r3, [r2, #0]
    return;
} // 0xD8 - CLD - Clear Decimal Mode  
    1ae2:	bd08      	pop	{r3, pc}
    1ae4:	2001508c 	.word	0x2001508c
    1ae8:	200047c0 	.word	0x200047c0

00001aec <opcode_0x58()>:
void opcode_0x58() {
    1aec:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1aee:	4b06      	ldr	r3, [pc, #24]	; (1b08 <opcode_0x58()+0x1c>)
    1af0:	2100      	movs	r1, #0
    1af2:	8818      	ldrh	r0, [r3, #0]
    1af4:	3001      	adds	r0, #1
    1af6:	b280      	uxth	r0, r0
    1af8:	f7fe fc94 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xFB;
    1afc:	4a03      	ldr	r2, [pc, #12]	; (1b0c <opcode_0x58()+0x20>)
    1afe:	7813      	ldrb	r3, [r2, #0]
    1b00:	f023 0304 	bic.w	r3, r3, #4
    1b04:	7013      	strb	r3, [r2, #0]
    return;
} // 0x58 - CLI - Clear Interrupt Flag  
    1b06:	bd08      	pop	{r3, pc}
    1b08:	2001508c 	.word	0x2001508c
    1b0c:	200047c0 	.word	0x200047c0

00001b10 <opcode_0xB8()>:
void opcode_0xB8() {
    1b10:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1b12:	4b06      	ldr	r3, [pc, #24]	; (1b2c <opcode_0xB8()+0x1c>)
    1b14:	2100      	movs	r1, #0
    1b16:	8818      	ldrh	r0, [r3, #0]
    1b18:	3001      	adds	r0, #1
    1b1a:	b280      	uxth	r0, r0
    1b1c:	f7fe fc82 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags & 0xBF;
    1b20:	4a03      	ldr	r2, [pc, #12]	; (1b30 <opcode_0xB8()+0x20>)
    1b22:	7813      	ldrb	r3, [r2, #0]
    1b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    1b28:	7013      	strb	r3, [r2, #0]
    return;
} // 0xB8 - CLV - Clear Overflow Flag  
    1b2a:	bd08      	pop	{r3, pc}
    1b2c:	2001508c 	.word	0x2001508c
    1b30:	200047c0 	.word	0x200047c0

00001b34 <opcode_0x38()>:
void opcode_0x38() {
    1b34:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1b36:	4b06      	ldr	r3, [pc, #24]	; (1b50 <opcode_0x38()+0x1c>)
    1b38:	2100      	movs	r1, #0
    1b3a:	8818      	ldrh	r0, [r3, #0]
    1b3c:	3001      	adds	r0, #1
    1b3e:	b280      	uxth	r0, r0
    1b40:	f7fe fc70 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x01;
    1b44:	4a03      	ldr	r2, [pc, #12]	; (1b54 <opcode_0x38()+0x20>)
    1b46:	7813      	ldrb	r3, [r2, #0]
    1b48:	f043 0301 	orr.w	r3, r3, #1
    1b4c:	7013      	strb	r3, [r2, #0]
    return;
} // 0x38 - SEC - Set Carry Flag  
    1b4e:	bd08      	pop	{r3, pc}
    1b50:	2001508c 	.word	0x2001508c
    1b54:	200047c0 	.word	0x200047c0

00001b58 <opcode_0x78()>:
void opcode_0x78() {
    1b58:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1b5a:	4b06      	ldr	r3, [pc, #24]	; (1b74 <opcode_0x78()+0x1c>)
    1b5c:	2100      	movs	r1, #0
    1b5e:	8818      	ldrh	r0, [r3, #0]
    1b60:	3001      	adds	r0, #1
    1b62:	b280      	uxth	r0, r0
    1b64:	f7fe fc5e 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x04;
    1b68:	4a03      	ldr	r2, [pc, #12]	; (1b78 <opcode_0x78()+0x20>)
    1b6a:	7813      	ldrb	r3, [r2, #0]
    1b6c:	f043 0304 	orr.w	r3, r3, #4
    1b70:	7013      	strb	r3, [r2, #0]
    return;
} // 0x78 - SEI - Set Interrupt Flag  
    1b72:	bd08      	pop	{r3, pc}
    1b74:	2001508c 	.word	0x2001508c
    1b78:	200047c0 	.word	0x200047c0

00001b7c <opcode_0xF8()>:
void opcode_0xF8() {
    1b7c:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1b7e:	4b06      	ldr	r3, [pc, #24]	; (1b98 <opcode_0xF8()+0x1c>)
    1b80:	2100      	movs	r1, #0
    1b82:	8818      	ldrh	r0, [r3, #0]
    1b84:	3001      	adds	r0, #1
    1b86:	b280      	uxth	r0, r0
    1b88:	f7fe fc4c 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_flags = register_flags | 0x08;
    1b8c:	4a03      	ldr	r2, [pc, #12]	; (1b9c <opcode_0xF8()+0x20>)
    1b8e:	7813      	ldrb	r3, [r2, #0]
    1b90:	f043 0308 	orr.w	r3, r3, #8
    1b94:	7013      	strb	r3, [r2, #0]
    return;
} // 0xF8 - SED - Set Decimal Mode  
    1b96:	bd08      	pop	{r3, pc}
    1b98:	2001508c 	.word	0x2001508c
    1b9c:	200047c0 	.word	0x200047c0

00001ba0 <opcode_0xCA()>:

// -------------------------------------------------
// Increment/Decrements
// -------------------------------------------------
void opcode_0xCA() {
    1ba0:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1ba2:	4b0f      	ldr	r3, [pc, #60]	; (1be0 <opcode_0xCA()+0x40>)
    1ba4:	2100      	movs	r1, #0
    1ba6:	8818      	ldrh	r0, [r3, #0]
    1ba8:	3001      	adds	r0, #1
    1baa:	b280      	uxth	r0, r0
    1bac:	f7fe fc3a 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_x - 1;
    1bb0:	4a0c      	ldr	r2, [pc, #48]	; (1be4 <opcode_0xCA()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1bb2:	490d      	ldr	r1, [pc, #52]	; (1be8 <opcode_0xCA()+0x48>)
    1bb4:	7813      	ldrb	r3, [r2, #0]
    1bb6:	3b01      	subs	r3, #1
    1bb8:	b2db      	uxtb	r3, r3
    1bba:	0618      	lsls	r0, r3, #24
    1bbc:	7013      	strb	r3, [r2, #0]
    1bbe:	780a      	ldrb	r2, [r1, #0]
    1bc0:	d407      	bmi.n	1bd2 <opcode_0xCA()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1bc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1bc6:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1bc8:	b92b      	cbnz	r3, 1bd6 <opcode_0xCA()+0x36>
    1bca:	f042 0202 	orr.w	r2, r2, #2
    return;
    1bce:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xCA - DEX - Decrement X  
    1bd0:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1bd6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    1bda:	700a      	strb	r2, [r1, #0]
    1bdc:	bd08      	pop	{r3, pc}
    1bde:	bf00      	nop
    1be0:	2001508c 	.word	0x2001508c
    1be4:	200150a4 	.word	0x200150a4
    1be8:	200047c0 	.word	0x200047c0

00001bec <opcode_0x88()>:
void opcode_0x88() {
    1bec:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1bee:	4b0f      	ldr	r3, [pc, #60]	; (1c2c <opcode_0x88()+0x40>)
    1bf0:	2100      	movs	r1, #0
    1bf2:	8818      	ldrh	r0, [r3, #0]
    1bf4:	3001      	adds	r0, #1
    1bf6:	b280      	uxth	r0, r0
    1bf8:	f7fe fc14 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_y - 1;
    1bfc:	4a0c      	ldr	r2, [pc, #48]	; (1c30 <opcode_0x88()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1bfe:	490d      	ldr	r1, [pc, #52]	; (1c34 <opcode_0x88()+0x48>)
    1c00:	7813      	ldrb	r3, [r2, #0]
    1c02:	3b01      	subs	r3, #1
    1c04:	b2db      	uxtb	r3, r3
    1c06:	0618      	lsls	r0, r3, #24
    1c08:	7013      	strb	r3, [r2, #0]
    1c0a:	780a      	ldrb	r2, [r1, #0]
    1c0c:	d407      	bmi.n	1c1e <opcode_0x88()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1c0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1c12:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1c14:	b92b      	cbnz	r3, 1c22 <opcode_0x88()+0x36>
    1c16:	f042 0202 	orr.w	r2, r2, #2
    return;
    1c1a:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return;
} // 0x88 - DEY - Decrement Y  
    1c1c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1c1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1c22:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    1c26:	700a      	strb	r2, [r1, #0]
    1c28:	bd08      	pop	{r3, pc}
    1c2a:	bf00      	nop
    1c2c:	2001508c 	.word	0x2001508c
    1c30:	200150a5 	.word	0x200150a5
    1c34:	200047c0 	.word	0x200047c0

00001c38 <opcode_0xE8()>:
void opcode_0xE8() {
    1c38:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1c3a:	4b0f      	ldr	r3, [pc, #60]	; (1c78 <opcode_0xE8()+0x40>)
    1c3c:	2100      	movs	r1, #0
    1c3e:	8818      	ldrh	r0, [r3, #0]
    1c40:	3001      	adds	r0, #1
    1c42:	b280      	uxth	r0, r0
    1c44:	f7fe fbee 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_x + 1;
    1c48:	4a0c      	ldr	r2, [pc, #48]	; (1c7c <opcode_0xE8()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1c4a:	490d      	ldr	r1, [pc, #52]	; (1c80 <opcode_0xE8()+0x48>)
    1c4c:	7813      	ldrb	r3, [r2, #0]
    1c4e:	3301      	adds	r3, #1
    1c50:	b2db      	uxtb	r3, r3
    1c52:	0618      	lsls	r0, r3, #24
    1c54:	7013      	strb	r3, [r2, #0]
    1c56:	780a      	ldrb	r2, [r1, #0]
    1c58:	d407      	bmi.n	1c6a <opcode_0xE8()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1c5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1c5e:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1c60:	b92b      	cbnz	r3, 1c6e <opcode_0xE8()+0x36>
    1c62:	f042 0202 	orr.w	r2, r2, #2
    return;
    1c66:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xE8 - INX - Increment X  
    1c68:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1c6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1c6e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    1c72:	700a      	strb	r2, [r1, #0]
    1c74:	bd08      	pop	{r3, pc}
    1c76:	bf00      	nop
    1c78:	2001508c 	.word	0x2001508c
    1c7c:	200150a4 	.word	0x200150a4
    1c80:	200047c0 	.word	0x200047c0

00001c84 <opcode_0xC8()>:
void opcode_0xC8() {
    1c84:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1c86:	4b0f      	ldr	r3, [pc, #60]	; (1cc4 <opcode_0xC8()+0x40>)
    1c88:	2100      	movs	r1, #0
    1c8a:	8818      	ldrh	r0, [r3, #0]
    1c8c:	3001      	adds	r0, #1
    1c8e:	b280      	uxth	r0, r0
    1c90:	f7fe fbc8 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_y + 1;
    1c94:	4a0c      	ldr	r2, [pc, #48]	; (1cc8 <opcode_0xC8()+0x44>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1c96:	490d      	ldr	r1, [pc, #52]	; (1ccc <opcode_0xC8()+0x48>)
    1c98:	7813      	ldrb	r3, [r2, #0]
    1c9a:	3301      	adds	r3, #1
    1c9c:	b2db      	uxtb	r3, r3
    1c9e:	0618      	lsls	r0, r3, #24
    1ca0:	7013      	strb	r3, [r2, #0]
    1ca2:	780a      	ldrb	r2, [r1, #0]
    1ca4:	d407      	bmi.n	1cb6 <opcode_0xC8()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1ca6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1caa:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1cac:	b92b      	cbnz	r3, 1cba <opcode_0xC8()+0x36>
    1cae:	f042 0202 	orr.w	r2, r2, #2
    return;
    1cb2:	700a      	strb	r2, [r1, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return;
} // 0xC8 - INY - Increment Y  
    1cb4:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1cba:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    1cbe:	700a      	strb	r2, [r1, #0]
    1cc0:	bd08      	pop	{r3, pc}
    1cc2:	bf00      	nop
    1cc4:	2001508c 	.word	0x2001508c
    1cc8:	200150a5 	.word	0x200150a5
    1ccc:	200047c0 	.word	0x200047c0

00001cd0 <opcode_0xAA()>:

// -------------------------------------------------
// Transfers
// -------------------------------------------------
void opcode_0xAA() {
    1cd0:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1cd2:	4b0e      	ldr	r3, [pc, #56]	; (1d0c <opcode_0xAA()+0x3c>)
    1cd4:	2100      	movs	r1, #0
    1cd6:	8818      	ldrh	r0, [r3, #0]
    1cd8:	3001      	adds	r0, #1
    1cda:	b280      	uxth	r0, r0
    1cdc:	f7fe fba2 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_a;
    1ce0:	4a0b      	ldr	r2, [pc, #44]	; (1d10 <opcode_0xAA()+0x40>)
    1ce2:	4b0c      	ldr	r3, [pc, #48]	; (1d14 <opcode_0xAA()+0x44>)
    1ce4:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1ce6:	4a0c      	ldr	r2, [pc, #48]	; (1d18 <opcode_0xAA()+0x48>)
    1ce8:	0608      	lsls	r0, r1, #24
    1cea:	7019      	strb	r1, [r3, #0]
    1cec:	7813      	ldrb	r3, [r2, #0]
    1cee:	d407      	bmi.n	1d00 <opcode_0xAA()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1cf4:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1cf6:	b929      	cbnz	r1, 1d04 <opcode_0xAA()+0x34>
    1cf8:	f043 0302 	orr.w	r3, r3, #2
    return;
    1cfc:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xAA - TAX - Transfer Accumulator to X 
    1cfe:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1d04:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1d08:	7013      	strb	r3, [r2, #0]
    1d0a:	bd08      	pop	{r3, pc}
    1d0c:	2001508c 	.word	0x2001508c
    1d10:	200150a3 	.word	0x200150a3
    1d14:	200150a4 	.word	0x200150a4
    1d18:	200047c0 	.word	0x200047c0

00001d1c <opcode_0xA8()>:
void opcode_0xA8() {
    1d1c:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1d1e:	4b0e      	ldr	r3, [pc, #56]	; (1d58 <opcode_0xA8()+0x3c>)
    1d20:	2100      	movs	r1, #0
    1d22:	8818      	ldrh	r0, [r3, #0]
    1d24:	3001      	adds	r0, #1
    1d26:	b280      	uxth	r0, r0
    1d28:	f7fe fb7c 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_y = register_a;
    1d2c:	4a0b      	ldr	r2, [pc, #44]	; (1d5c <opcode_0xA8()+0x40>)
    1d2e:	4b0c      	ldr	r3, [pc, #48]	; (1d60 <opcode_0xA8()+0x44>)
    1d30:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1d32:	4a0c      	ldr	r2, [pc, #48]	; (1d64 <opcode_0xA8()+0x48>)
    1d34:	0608      	lsls	r0, r1, #24
    1d36:	7019      	strb	r1, [r3, #0]
    1d38:	7813      	ldrb	r3, [r2, #0]
    1d3a:	d407      	bmi.n	1d4c <opcode_0xA8()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1d40:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1d42:	b929      	cbnz	r1, 1d50 <opcode_0xA8()+0x34>
    1d44:	f043 0302 	orr.w	r3, r3, #2
    return;
    1d48:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return;
} // 0xA8 - TAY - Transfer Accumulator to Y
    1d4a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1d50:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1d54:	7013      	strb	r3, [r2, #0]
    1d56:	bd08      	pop	{r3, pc}
    1d58:	2001508c 	.word	0x2001508c
    1d5c:	200150a3 	.word	0x200150a3
    1d60:	200150a5 	.word	0x200150a5
    1d64:	200047c0 	.word	0x200047c0

00001d68 <opcode_0xBA()>:
void opcode_0xBA() {
    1d68:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1d6a:	4b0e      	ldr	r3, [pc, #56]	; (1da4 <opcode_0xBA()+0x3c>)
    1d6c:	2100      	movs	r1, #0
    1d6e:	8818      	ldrh	r0, [r3, #0]
    1d70:	3001      	adds	r0, #1
    1d72:	b280      	uxth	r0, r0
    1d74:	f7fe fb56 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_x = register_sp;
    1d78:	4a0b      	ldr	r2, [pc, #44]	; (1da8 <opcode_0xBA()+0x40>)
    1d7a:	4b0c      	ldr	r3, [pc, #48]	; (1dac <opcode_0xBA()+0x44>)
    1d7c:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1d7e:	4a0c      	ldr	r2, [pc, #48]	; (1db0 <opcode_0xBA()+0x48>)
    1d80:	0608      	lsls	r0, r1, #24
    1d82:	7019      	strb	r1, [r3, #0]
    1d84:	7813      	ldrb	r3, [r2, #0]
    1d86:	d407      	bmi.n	1d98 <opcode_0xBA()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1d8c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1d8e:	b929      	cbnz	r1, 1d9c <opcode_0xBA()+0x34>
    1d90:	f043 0302 	orr.w	r3, r3, #2
    return;
    1d94:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xBA - TSX - Transfer Stack Pointer to X
    1d96:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1d9c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1da0:	7013      	strb	r3, [r2, #0]
    1da2:	bd08      	pop	{r3, pc}
    1da4:	2001508c 	.word	0x2001508c
    1da8:	200047c1 	.word	0x200047c1
    1dac:	200150a4 	.word	0x200150a4
    1db0:	200047c0 	.word	0x200047c0

00001db4 <opcode_0x8A()>:
void opcode_0x8A() {
    1db4:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1db6:	4b0e      	ldr	r3, [pc, #56]	; (1df0 <opcode_0x8A()+0x3c>)
    1db8:	2100      	movs	r1, #0
    1dba:	8818      	ldrh	r0, [r3, #0]
    1dbc:	3001      	adds	r0, #1
    1dbe:	b280      	uxth	r0, r0
    1dc0:	f7fe fb30 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_a = register_x;
    1dc4:	4a0b      	ldr	r2, [pc, #44]	; (1df4 <opcode_0x8A()+0x40>)
    1dc6:	4b0c      	ldr	r3, [pc, #48]	; (1df8 <opcode_0x8A()+0x44>)
    1dc8:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1dca:	4a0c      	ldr	r2, [pc, #48]	; (1dfc <opcode_0x8A()+0x48>)
    1dcc:	0608      	lsls	r0, r1, #24
    1dce:	7019      	strb	r1, [r3, #0]
    1dd0:	7813      	ldrb	r3, [r2, #0]
    1dd2:	d407      	bmi.n	1de4 <opcode_0x8A()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1dd8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1dda:	b929      	cbnz	r1, 1de8 <opcode_0x8A()+0x34>
    1ddc:	f043 0302 	orr.w	r3, r3, #2
    return;
    1de0:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x8A - TXA - Transfer X to Accumulator
    1de2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1de8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1dec:	7013      	strb	r3, [r2, #0]
    1dee:	bd08      	pop	{r3, pc}
    1df0:	2001508c 	.word	0x2001508c
    1df4:	200150a4 	.word	0x200150a4
    1df8:	200150a3 	.word	0x200150a3
    1dfc:	200047c0 	.word	0x200047c0

00001e00 <opcode_0x9A()>:
void opcode_0x9A() {
    1e00:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1e02:	4b06      	ldr	r3, [pc, #24]	; (1e1c <opcode_0x9A()+0x1c>)
    1e04:	2100      	movs	r1, #0
    1e06:	8818      	ldrh	r0, [r3, #0]
    1e08:	3001      	adds	r0, #1
    1e0a:	b280      	uxth	r0, r0
    1e0c:	f7fe fb0a 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_sp = register_x;
    1e10:	4a03      	ldr	r2, [pc, #12]	; (1e20 <opcode_0x9A()+0x20>)
    1e12:	4b04      	ldr	r3, [pc, #16]	; (1e24 <opcode_0x9A()+0x24>)
    1e14:	7812      	ldrb	r2, [r2, #0]
    1e16:	701a      	strb	r2, [r3, #0]
    return;
} // 0x9A - TXS - Transfer X to Stack Pointer
    1e18:	bd08      	pop	{r3, pc}
    1e1a:	bf00      	nop
    1e1c:	2001508c 	.word	0x2001508c
    1e20:	200150a4 	.word	0x200150a4
    1e24:	200047c1 	.word	0x200047c1

00001e28 <opcode_0x98()>:
void opcode_0x98() {
    1e28:	b508      	push	{r3, lr}
    read_byte(register_pc+1, false);
    1e2a:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <opcode_0x98()+0x3c>)
    1e2c:	2100      	movs	r1, #0
    1e2e:	8818      	ldrh	r0, [r3, #0]
    1e30:	3001      	adds	r0, #1
    1e32:	b280      	uxth	r0, r0
    1e34:	f7fe faf6 	bl	424 <read_byte(unsigned short, bool)>
    Begin_Fetch_Next_Opcode();
    register_a = register_y;
    1e38:	4a0b      	ldr	r2, [pc, #44]	; (1e68 <opcode_0x98()+0x40>)
    1e3a:	4b0c      	ldr	r3, [pc, #48]	; (1e6c <opcode_0x98()+0x44>)
    1e3c:	7811      	ldrb	r1, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1e3e:	4a0c      	ldr	r2, [pc, #48]	; (1e70 <opcode_0x98()+0x48>)
    1e40:	0608      	lsls	r0, r1, #24
    1e42:	7019      	strb	r1, [r3, #0]
    1e44:	7813      	ldrb	r3, [r2, #0]
    1e46:	d407      	bmi.n	1e58 <opcode_0x98()+0x30>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1e4c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1e4e:	b929      	cbnz	r1, 1e5c <opcode_0x98()+0x34>
    1e50:	f043 0302 	orr.w	r3, r3, #2
    return;
    1e54:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x98 - TYA - Transfer Y to Accumulator
    1e56:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1e5c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1e60:	7013      	strb	r3, [r2, #0]
    1e62:	bd08      	pop	{r3, pc}
    1e64:	2001508c 	.word	0x2001508c
    1e68:	200150a5 	.word	0x200150a5
    1e6c:	200150a3 	.word	0x200150a3
    1e70:	200047c0 	.word	0x200047c0

00001e74 <opcode_0x08()>:

// -------------------------------------------------
// PUSH/POP Flags and Accumulator 
// -------------------------------------------------
void opcode_0x08() {
    read_byte(register_pc+1, false);
    1e74:	4b0a      	ldr	r3, [pc, #40]	; (1ea0 <opcode_0x08()+0x2c>)
    1e76:	2100      	movs	r1, #0
    1e78:	8818      	ldrh	r0, [r3, #0]
    1e7a:	3001      	adds	r0, #1
void opcode_0x08() {
    1e7c:	b510      	push	{r4, lr}
    read_byte(register_pc+1, false);
    1e7e:	b280      	uxth	r0, r0
    write_byte(register_sp_fixed, push_data);
    1e80:	4c08      	ldr	r4, [pc, #32]	; (1ea4 <opcode_0x08()+0x30>)
    1e82:	f7fe facf 	bl	424 <read_byte(unsigned short, bool)>
    push(register_flags | 0x30);
    1e86:	4b08      	ldr	r3, [pc, #32]	; (1ea8 <opcode_0x08()+0x34>)
    1e88:	7820      	ldrb	r0, [r4, #0]
    1e8a:	7819      	ldrb	r1, [r3, #0]
    1e8c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1e90:	f041 0130 	orr.w	r1, r1, #48	; 0x30
    1e94:	f7fe fc82 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    1e98:	7823      	ldrb	r3, [r4, #0]
    1e9a:	3b01      	subs	r3, #1
    1e9c:	7023      	strb	r3, [r4, #0]
    Begin_Fetch_Next_Opcode();
    return;
} // 0x08 - PHP - Push Flags to Stack
    1e9e:	bd10      	pop	{r4, pc}
    1ea0:	2001508c 	.word	0x2001508c
    1ea4:	200047c1 	.word	0x200047c1
    1ea8:	200047c0 	.word	0x200047c0

00001eac <opcode_0x48()>:
void opcode_0x48() {
    read_byte(register_pc+1, false);
    1eac:	4b09      	ldr	r3, [pc, #36]	; (1ed4 <opcode_0x48()+0x28>)
    1eae:	2100      	movs	r1, #0
    1eb0:	8818      	ldrh	r0, [r3, #0]
    1eb2:	3001      	adds	r0, #1
void opcode_0x48() {
    1eb4:	b510      	push	{r4, lr}
    write_byte(register_sp_fixed, push_data);
    1eb6:	4c08      	ldr	r4, [pc, #32]	; (1ed8 <opcode_0x48()+0x2c>)
    read_byte(register_pc+1, false);
    1eb8:	b280      	uxth	r0, r0
    1eba:	f7fe fab3 	bl	424 <read_byte(unsigned short, bool)>
    push(register_a);
    1ebe:	4b07      	ldr	r3, [pc, #28]	; (1edc <opcode_0x48()+0x30>)
    1ec0:	7820      	ldrb	r0, [r4, #0]
    1ec2:	7819      	ldrb	r1, [r3, #0]
    1ec4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1ec8:	f7fe fc68 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    1ecc:	7823      	ldrb	r3, [r4, #0]
    1ece:	3b01      	subs	r3, #1
    1ed0:	7023      	strb	r3, [r4, #0]
    Begin_Fetch_Next_Opcode();
    return;
} // 0x48 - PHA - Push Accumulator to the stack
    1ed2:	bd10      	pop	{r4, pc}
    1ed4:	2001508c 	.word	0x2001508c
    1ed8:	200047c1 	.word	0x200047c1
    1edc:	200150a3 	.word	0x200150a3

00001ee0 <opcode_0x28()>:
void opcode_0x28() {
    read_byte(register_pc+1, false);
    1ee0:	4b0e      	ldr	r3, [pc, #56]	; (1f1c <opcode_0x28()+0x3c>)
    1ee2:	2100      	movs	r1, #0
    1ee4:	8818      	ldrh	r0, [r3, #0]
    1ee6:	3001      	adds	r0, #1
void opcode_0x28() {
    1ee8:	b510      	push	{r4, lr}
    read_byte(register_sp_fixed, false);
    1eea:	4c0d      	ldr	r4, [pc, #52]	; (1f20 <opcode_0x28()+0x40>)
    read_byte(register_pc+1, false);
    1eec:	b280      	uxth	r0, r0
    1eee:	f7fe fa99 	bl	424 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    1ef2:	2100      	movs	r1, #0
    1ef4:	7820      	ldrb	r0, [r4, #0]
    1ef6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1efa:	f7fe fa93 	bl	424 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    1efe:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    1f00:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    1f02:	3301      	adds	r3, #1
    1f04:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    1f06:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    1f0a:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    1f0c:	f7fe fa8a 	bl	424 <read_byte(unsigned short, bool)>
    register_flags = (pop() | 0x30);
    1f10:	4b04      	ldr	r3, [pc, #16]	; (1f24 <opcode_0x28()+0x44>)
    1f12:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    1f16:	7018      	strb	r0, [r3, #0]
    Begin_Fetch_Next_Opcode();
    return;
} // 0x28 - PLP - Pop Flags from Stack
    1f18:	bd10      	pop	{r4, pc}
    1f1a:	bf00      	nop
    1f1c:	2001508c 	.word	0x2001508c
    1f20:	200047c1 	.word	0x200047c1
    1f24:	200047c0 	.word	0x200047c0

00001f28 <opcode_0x68()>:
void opcode_0x68() {
    read_byte(register_pc+1, false);
    1f28:	4b15      	ldr	r3, [pc, #84]	; (1f80 <opcode_0x68()+0x58>)
    1f2a:	2100      	movs	r1, #0
    1f2c:	8818      	ldrh	r0, [r3, #0]
    1f2e:	3001      	adds	r0, #1
void opcode_0x68() {
    1f30:	b510      	push	{r4, lr}
    read_byte(register_sp_fixed, false);
    1f32:	4c14      	ldr	r4, [pc, #80]	; (1f84 <opcode_0x68()+0x5c>)
    read_byte(register_pc+1, false);
    1f34:	b280      	uxth	r0, r0
    1f36:	f7fe fa75 	bl	424 <read_byte(unsigned short, bool)>
    read_byte(register_sp_fixed, false);
    1f3a:	2100      	movs	r1, #0
    1f3c:	7820      	ldrb	r0, [r4, #0]
    1f3e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1f42:	f7fe fa6f 	bl	424 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    1f46:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    1f48:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    1f4a:	3301      	adds	r3, #1
    1f4c:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    1f4e:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    1f52:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    1f54:	f7fe fa66 	bl	424 <read_byte(unsigned short, bool)>
    register_a = pop();
    1f58:	4b0b      	ldr	r3, [pc, #44]	; (1f88 <opcode_0x68()+0x60>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1f5a:	4a0c      	ldr	r2, [pc, #48]	; (1f8c <opcode_0x68()+0x64>)
    1f5c:	0601      	lsls	r1, r0, #24
    1f5e:	7018      	strb	r0, [r3, #0]
    1f60:	7813      	ldrb	r3, [r2, #0]
    1f62:	d407      	bmi.n	1f74 <opcode_0x68()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1f68:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1f6a:	b928      	cbnz	r0, 1f78 <opcode_0x68()+0x50>
    1f6c:	f043 0302 	orr.w	r3, r3, #2
    return;
    1f70:	7013      	strb	r3, [r2, #0]
    Calc_Flags_NEGATIVE_ZERO(register_a);
    Begin_Fetch_Next_Opcode();
    return;
} // 0x68 - PLA - Pop Accumulator from Stack
    1f72:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1f78:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1f7c:	7013      	strb	r3, [r2, #0]
    1f7e:	bd10      	pop	{r4, pc}
    1f80:	2001508c 	.word	0x2001508c
    1f84:	200047c1 	.word	0x200047c1
    1f88:	200150a3 	.word	0x200150a3
    1f8c:	200047c0 	.word	0x200047c0

00001f90 <opcode_0x29()>:

// -------------------------------------------------
// AND
// -------------------------------------------------
void opcode_0x29() {
    1f90:	b508      	push	{r3, lr}
    register_pc++;
    1f92:	4b0f      	ldr	r3, [pc, #60]	; (1fd0 <opcode_0x29()+0x40>)
    return read_byte(register_pc, false);
    1f94:	2100      	movs	r1, #0
    register_pc++;
    1f96:	8818      	ldrh	r0, [r3, #0]
    1f98:	3001      	adds	r0, #1
    1f9a:	b280      	uxth	r0, r0
    1f9c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    1f9e:	f7fe fa41 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_Immediate());
    1fa2:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <opcode_0x29()+0x44>)
    1fa4:	781a      	ldrb	r2, [r3, #0]
    1fa6:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1fa8:	4a0b      	ldr	r2, [pc, #44]	; (1fd8 <opcode_0x29()+0x48>)
    1faa:	0601      	lsls	r1, r0, #24
    1fac:	7018      	strb	r0, [r3, #0]
    1fae:	7813      	ldrb	r3, [r2, #0]
    1fb0:	d407      	bmi.n	1fc2 <opcode_0x29()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    1fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1fb6:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    1fb8:	b928      	cbnz	r0, 1fc6 <opcode_0x29()+0x36>
    1fba:	f043 0302 	orr.w	r3, r3, #2
    return;
    1fbe:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x29 - AND - Immediate
    1fc0:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    1fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    1fc6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    1fca:	7013      	strb	r3, [r2, #0]
    1fcc:	bd08      	pop	{r3, pc}
    1fce:	bf00      	nop
    1fd0:	2001508c 	.word	0x2001508c
    1fd4:	200150a3 	.word	0x200150a3
    1fd8:	200047c0 	.word	0x200047c0

00001fdc <opcode_0x25()>:
void opcode_0x25() {
    1fdc:	b508      	push	{r3, lr}
    register_pc++;
    1fde:	4b12      	ldr	r3, [pc, #72]	; (2028 <opcode_0x25()+0x4c>)
    return read_byte(register_pc, false);
    1fe0:	2100      	movs	r1, #0
    register_pc++;
    1fe2:	8818      	ldrh	r0, [r3, #0]
    1fe4:	3001      	adds	r0, #1
    1fe6:	b280      	uxth	r0, r0
    1fe8:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    1fea:	f7fe fa1b 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    1fee:	4b0f      	ldr	r3, [pc, #60]	; (202c <opcode_0x25()+0x50>)
    1ff0:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    1ff2:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    1ff4:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    1ff6:	f7fe fa15 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a & (Fetch_ZeroPage());
    1ffa:	4b0d      	ldr	r3, [pc, #52]	; (2030 <opcode_0x25()+0x54>)
    1ffc:	781a      	ldrb	r2, [r3, #0]
    1ffe:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2000:	4a0c      	ldr	r2, [pc, #48]	; (2034 <opcode_0x25()+0x58>)
    2002:	0601      	lsls	r1, r0, #24
    2004:	7018      	strb	r0, [r3, #0]
    2006:	7813      	ldrb	r3, [r2, #0]
    2008:	d407      	bmi.n	201a <opcode_0x25()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    200a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    200e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2010:	b928      	cbnz	r0, 201e <opcode_0x25()+0x42>
    2012:	f043 0302 	orr.w	r3, r3, #2
    return;
    2016:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x25 - AND - ZeroPage
    2018:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    201a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    201e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2022:	7013      	strb	r3, [r2, #0]
    2024:	bd08      	pop	{r3, pc}
    2026:	bf00      	nop
    2028:	2001508c 	.word	0x2001508c
    202c:	2001508a 	.word	0x2001508a
    2030:	200150a3 	.word	0x200150a3
    2034:	200047c0 	.word	0x200047c0

00002038 <opcode_0x35()>:
void opcode_0x35() {
    2038:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_ZeroPage_X());
    203a:	f7fe fd21 	bl	a80 <Fetch_ZeroPage_X()>
    203e:	4b0b      	ldr	r3, [pc, #44]	; (206c <opcode_0x35()+0x34>)
    2040:	781a      	ldrb	r2, [r3, #0]
    2042:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2044:	4a0a      	ldr	r2, [pc, #40]	; (2070 <opcode_0x35()+0x38>)
    2046:	0601      	lsls	r1, r0, #24
    2048:	7018      	strb	r0, [r3, #0]
    204a:	7813      	ldrb	r3, [r2, #0]
    204c:	d407      	bmi.n	205e <opcode_0x35()+0x26>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    204e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2052:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2054:	b928      	cbnz	r0, 2062 <opcode_0x35()+0x2a>
    2056:	f043 0302 	orr.w	r3, r3, #2
    return;
    205a:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x35 - AND - ZeroPage , X
    205c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    205e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2062:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2066:	7013      	strb	r3, [r2, #0]
    2068:	bd08      	pop	{r3, pc}
    206a:	bf00      	nop
    206c:	200150a3 	.word	0x200150a3
    2070:	200047c0 	.word	0x200047c0

00002074 <opcode_0x2D()>:
void opcode_0x2D() {
    2074:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute());
    2076:	f7fe fd43 	bl	b00 <Fetch_Absolute()>
    207a:	4b0b      	ldr	r3, [pc, #44]	; (20a8 <opcode_0x2D()+0x34>)
    207c:	781a      	ldrb	r2, [r3, #0]
    207e:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2080:	4a0a      	ldr	r2, [pc, #40]	; (20ac <opcode_0x2D()+0x38>)
    2082:	0601      	lsls	r1, r0, #24
    2084:	7018      	strb	r0, [r3, #0]
    2086:	7813      	ldrb	r3, [r2, #0]
    2088:	d407      	bmi.n	209a <opcode_0x2D()+0x26>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    208a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    208e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2090:	b928      	cbnz	r0, 209e <opcode_0x2D()+0x2a>
    2092:	f043 0302 	orr.w	r3, r3, #2
    return;
    2096:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x2D - AND - Absolute
    2098:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    209a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    209e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    20a2:	7013      	strb	r3, [r2, #0]
    20a4:	bd08      	pop	{r3, pc}
    20a6:	bf00      	nop
    20a8:	200150a3 	.word	0x200150a3
    20ac:	200047c0 	.word	0x200047c0

000020b0 <opcode_0x3D()>:
void opcode_0x3D() {
    20b0:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute_X(1));
    20b2:	2001      	movs	r0, #1
    20b4:	f7fe fd42 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    20b8:	4b0a      	ldr	r3, [pc, #40]	; (20e4 <opcode_0x3D()+0x34>)
    20ba:	781a      	ldrb	r2, [r3, #0]
    20bc:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    20be:	4a0a      	ldr	r2, [pc, #40]	; (20e8 <opcode_0x3D()+0x38>)
    20c0:	0601      	lsls	r1, r0, #24
    20c2:	7018      	strb	r0, [r3, #0]
    20c4:	7813      	ldrb	r3, [r2, #0]
    20c6:	d407      	bmi.n	20d8 <opcode_0x3D()+0x28>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    20c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    20cc:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    20ce:	b928      	cbnz	r0, 20dc <opcode_0x3D()+0x2c>
    20d0:	f043 0302 	orr.w	r3, r3, #2
    return;
    20d4:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x3D - AND - Absolute , X
    20d6:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    20d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    20dc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    20e0:	7013      	strb	r3, [r2, #0]
    20e2:	bd08      	pop	{r3, pc}
    20e4:	200150a3 	.word	0x200150a3
    20e8:	200047c0 	.word	0x200047c0

000020ec <opcode_0x39()>:
void opcode_0x39() {
    20ec:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Absolute_Y(1));
    20ee:	2001      	movs	r0, #1
    20f0:	f7fe fd56 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    20f4:	4b0a      	ldr	r3, [pc, #40]	; (2120 <opcode_0x39()+0x34>)
    20f6:	781a      	ldrb	r2, [r3, #0]
    20f8:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    20fa:	4a0a      	ldr	r2, [pc, #40]	; (2124 <opcode_0x39()+0x38>)
    20fc:	0601      	lsls	r1, r0, #24
    20fe:	7018      	strb	r0, [r3, #0]
    2100:	7813      	ldrb	r3, [r2, #0]
    2102:	d407      	bmi.n	2114 <opcode_0x39()+0x28>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2108:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    210a:	b928      	cbnz	r0, 2118 <opcode_0x39()+0x2c>
    210c:	f043 0302 	orr.w	r3, r3, #2
    return;
    2110:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x19 - OR - Absolute , Y
    2112:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2118:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    211c:	7013      	strb	r3, [r2, #0]
    211e:	bd08      	pop	{r3, pc}
    2120:	200150a3 	.word	0x200150a3
    2124:	200047c0 	.word	0x200047c0

00002128 <opcode_0x21()>:
void opcode_0x21() {
    2128:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Indexed_Indirect_X());
    212a:	f7fe fd6b 	bl	c04 <Fetch_Indexed_Indirect_X()>
    212e:	4b0b      	ldr	r3, [pc, #44]	; (215c <opcode_0x21()+0x34>)
    2130:	781a      	ldrb	r2, [r3, #0]
    2132:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2134:	4a0a      	ldr	r2, [pc, #40]	; (2160 <opcode_0x21()+0x38>)
    2136:	0601      	lsls	r1, r0, #24
    2138:	7018      	strb	r0, [r3, #0]
    213a:	7813      	ldrb	r3, [r2, #0]
    213c:	d407      	bmi.n	214e <opcode_0x21()+0x26>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    213e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2142:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2144:	b928      	cbnz	r0, 2152 <opcode_0x21()+0x2a>
    2146:	f043 0302 	orr.w	r3, r3, #2
    return;
    214a:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x21 - AND - Indexed Indirect X
    214c:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    214e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2152:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2156:	7013      	strb	r3, [r2, #0]
    2158:	bd08      	pop	{r3, pc}
    215a:	bf00      	nop
    215c:	200150a3 	.word	0x200150a3
    2160:	200047c0 	.word	0x200047c0

00002164 <opcode_0x31()>:
void opcode_0x31() {
    2164:	b508      	push	{r3, lr}
    register_a = register_a & (Fetch_Indexed_Indirect_Y(1));
    2166:	2001      	movs	r0, #1
    2168:	f7fe fd76 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    216c:	4b0a      	ldr	r3, [pc, #40]	; (2198 <opcode_0x31()+0x34>)
    216e:	781a      	ldrb	r2, [r3, #0]
    2170:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2172:	4a0a      	ldr	r2, [pc, #40]	; (219c <opcode_0x31()+0x38>)
    2174:	0601      	lsls	r1, r0, #24
    2176:	7018      	strb	r0, [r3, #0]
    2178:	7813      	ldrb	r3, [r2, #0]
    217a:	d407      	bmi.n	218c <opcode_0x31()+0x28>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    217c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2180:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2182:	b928      	cbnz	r0, 2190 <opcode_0x31()+0x2c>
    2184:	f043 0302 	orr.w	r3, r3, #2
    return;
    2188:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x31 - AND - Indirect Indexed  Y
    218a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    218c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2190:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2194:	7013      	strb	r3, [r2, #0]
    2196:	bd08      	pop	{r3, pc}
    2198:	200150a3 	.word	0x200150a3
    219c:	200047c0 	.word	0x200047c0

000021a0 <opcode_0x09()>:

// -------------------------------------------------
// ORA
// -------------------------------------------------
void opcode_0x09() {
    21a0:	b508      	push	{r3, lr}
    register_pc++;
    21a2:	4b0f      	ldr	r3, [pc, #60]	; (21e0 <opcode_0x09()+0x40>)
    return read_byte(register_pc, false);
    21a4:	2100      	movs	r1, #0
    register_pc++;
    21a6:	8818      	ldrh	r0, [r3, #0]
    21a8:	3001      	adds	r0, #1
    21aa:	b280      	uxth	r0, r0
    21ac:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    21ae:	f7fe f939 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_Immediate());
    21b2:	4b0c      	ldr	r3, [pc, #48]	; (21e4 <opcode_0x09()+0x44>)
    21b4:	781a      	ldrb	r2, [r3, #0]
    21b6:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    21b8:	4a0b      	ldr	r2, [pc, #44]	; (21e8 <opcode_0x09()+0x48>)
    21ba:	b2c0      	uxtb	r0, r0
    21bc:	0601      	lsls	r1, r0, #24
    21be:	7018      	strb	r0, [r3, #0]
    21c0:	7813      	ldrb	r3, [r2, #0]
    21c2:	d407      	bmi.n	21d4 <opcode_0x09()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    21c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    21c8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    21ca:	b928      	cbnz	r0, 21d8 <opcode_0x09()+0x38>
    21cc:	f043 0302 	orr.w	r3, r3, #2
    return;
    21d0:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x09 - OR - Immediate
    21d2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    21d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    21d8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    21dc:	7013      	strb	r3, [r2, #0]
    21de:	bd08      	pop	{r3, pc}
    21e0:	2001508c 	.word	0x2001508c
    21e4:	200150a3 	.word	0x200150a3
    21e8:	200047c0 	.word	0x200047c0

000021ec <opcode_0x05()>:
void opcode_0x05() {
    21ec:	b508      	push	{r3, lr}
    register_pc++;
    21ee:	4b12      	ldr	r3, [pc, #72]	; (2238 <opcode_0x05()+0x4c>)
    return read_byte(register_pc, false);
    21f0:	2100      	movs	r1, #0
    register_pc++;
    21f2:	8818      	ldrh	r0, [r3, #0]
    21f4:	3001      	adds	r0, #1
    21f6:	b280      	uxth	r0, r0
    21f8:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    21fa:	f7fe f913 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    21fe:	4b0f      	ldr	r3, [pc, #60]	; (223c <opcode_0x05()+0x50>)
    2200:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2202:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2204:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2206:	f7fe f90d 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a | (Fetch_ZeroPage());
    220a:	4b0d      	ldr	r3, [pc, #52]	; (2240 <opcode_0x05()+0x54>)
    220c:	781a      	ldrb	r2, [r3, #0]
    220e:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2210:	4a0c      	ldr	r2, [pc, #48]	; (2244 <opcode_0x05()+0x58>)
    2212:	b2c0      	uxtb	r0, r0
    2214:	0601      	lsls	r1, r0, #24
    2216:	7018      	strb	r0, [r3, #0]
    2218:	7813      	ldrb	r3, [r2, #0]
    221a:	d407      	bmi.n	222c <opcode_0x05()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    221c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2220:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2222:	b928      	cbnz	r0, 2230 <opcode_0x05()+0x44>
    2224:	f043 0302 	orr.w	r3, r3, #2
    return;
    2228:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x05 - OR - ZeroPage
    222a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    222c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2230:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2234:	7013      	strb	r3, [r2, #0]
    2236:	bd08      	pop	{r3, pc}
    2238:	2001508c 	.word	0x2001508c
    223c:	2001508a 	.word	0x2001508a
    2240:	200150a3 	.word	0x200150a3
    2244:	200047c0 	.word	0x200047c0

00002248 <opcode_0x15()>:
void opcode_0x15() {
    2248:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_ZeroPage_X());
    224a:	f7fe fc19 	bl	a80 <Fetch_ZeroPage_X()>
    224e:	4b0b      	ldr	r3, [pc, #44]	; (227c <opcode_0x15()+0x34>)
    2250:	781a      	ldrb	r2, [r3, #0]
    2252:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2254:	4a0a      	ldr	r2, [pc, #40]	; (2280 <opcode_0x15()+0x38>)
    2256:	b2c0      	uxtb	r0, r0
    2258:	0601      	lsls	r1, r0, #24
    225a:	7018      	strb	r0, [r3, #0]
    225c:	7813      	ldrb	r3, [r2, #0]
    225e:	d407      	bmi.n	2270 <opcode_0x15()+0x28>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2264:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2266:	b928      	cbnz	r0, 2274 <opcode_0x15()+0x2c>
    2268:	f043 0302 	orr.w	r3, r3, #2
    return;
    226c:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x15 - OR - ZeroPage , X
    226e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2274:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2278:	7013      	strb	r3, [r2, #0]
    227a:	bd08      	pop	{r3, pc}
    227c:	200150a3 	.word	0x200150a3
    2280:	200047c0 	.word	0x200047c0

00002284 <opcode_0x0D()>:
void opcode_0x0D() {
    2284:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute());
    2286:	f7fe fc3b 	bl	b00 <Fetch_Absolute()>
    228a:	4b0b      	ldr	r3, [pc, #44]	; (22b8 <opcode_0x0D()+0x34>)
    228c:	781a      	ldrb	r2, [r3, #0]
    228e:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2290:	4a0a      	ldr	r2, [pc, #40]	; (22bc <opcode_0x0D()+0x38>)
    2292:	b2c0      	uxtb	r0, r0
    2294:	0601      	lsls	r1, r0, #24
    2296:	7018      	strb	r0, [r3, #0]
    2298:	7813      	ldrb	r3, [r2, #0]
    229a:	d407      	bmi.n	22ac <opcode_0x0D()+0x28>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    229c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    22a0:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    22a2:	b928      	cbnz	r0, 22b0 <opcode_0x0D()+0x2c>
    22a4:	f043 0302 	orr.w	r3, r3, #2
    return;
    22a8:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x0D - OR - Absolute
    22aa:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    22ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    22b0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    22b4:	7013      	strb	r3, [r2, #0]
    22b6:	bd08      	pop	{r3, pc}
    22b8:	200150a3 	.word	0x200150a3
    22bc:	200047c0 	.word	0x200047c0

000022c0 <opcode_0x1D()>:
void opcode_0x1D() {
    22c0:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute_X(1));
    22c2:	2001      	movs	r0, #1
    22c4:	f7fe fc3a 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    22c8:	4b0b      	ldr	r3, [pc, #44]	; (22f8 <opcode_0x1D()+0x38>)
    22ca:	781a      	ldrb	r2, [r3, #0]
    22cc:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    22ce:	4a0b      	ldr	r2, [pc, #44]	; (22fc <opcode_0x1D()+0x3c>)
    22d0:	b2c0      	uxtb	r0, r0
    22d2:	0601      	lsls	r1, r0, #24
    22d4:	7018      	strb	r0, [r3, #0]
    22d6:	7813      	ldrb	r3, [r2, #0]
    22d8:	d407      	bmi.n	22ea <opcode_0x1D()+0x2a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    22da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    22de:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    22e0:	b928      	cbnz	r0, 22ee <opcode_0x1D()+0x2e>
    22e2:	f043 0302 	orr.w	r3, r3, #2
    return;
    22e6:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x1D - OR - Absolute , X
    22e8:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    22ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    22ee:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    22f2:	7013      	strb	r3, [r2, #0]
    22f4:	bd08      	pop	{r3, pc}
    22f6:	bf00      	nop
    22f8:	200150a3 	.word	0x200150a3
    22fc:	200047c0 	.word	0x200047c0

00002300 <opcode_0x19()>:
void opcode_0x19() {
    2300:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Absolute_Y(1));
    2302:	2001      	movs	r0, #1
    2304:	f7fe fc4c 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    2308:	4b0b      	ldr	r3, [pc, #44]	; (2338 <opcode_0x19()+0x38>)
    230a:	781a      	ldrb	r2, [r3, #0]
    230c:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    230e:	4a0b      	ldr	r2, [pc, #44]	; (233c <opcode_0x19()+0x3c>)
    2310:	b2c0      	uxtb	r0, r0
    2312:	0601      	lsls	r1, r0, #24
    2314:	7018      	strb	r0, [r3, #0]
    2316:	7813      	ldrb	r3, [r2, #0]
    2318:	d407      	bmi.n	232a <opcode_0x19()+0x2a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    231a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    231e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2320:	b928      	cbnz	r0, 232e <opcode_0x19()+0x2e>
    2322:	f043 0302 	orr.w	r3, r3, #2
    return;
    2326:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x19 - OR - Absolute , Y
    2328:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    232a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    232e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2332:	7013      	strb	r3, [r2, #0]
    2334:	bd08      	pop	{r3, pc}
    2336:	bf00      	nop
    2338:	200150a3 	.word	0x200150a3
    233c:	200047c0 	.word	0x200047c0

00002340 <opcode_0x01()>:
void opcode_0x01() {
    2340:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Indexed_Indirect_X());
    2342:	f7fe fc5f 	bl	c04 <Fetch_Indexed_Indirect_X()>
    2346:	4b0b      	ldr	r3, [pc, #44]	; (2374 <opcode_0x01()+0x34>)
    2348:	781a      	ldrb	r2, [r3, #0]
    234a:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    234c:	4a0a      	ldr	r2, [pc, #40]	; (2378 <opcode_0x01()+0x38>)
    234e:	b2c0      	uxtb	r0, r0
    2350:	0601      	lsls	r1, r0, #24
    2352:	7018      	strb	r0, [r3, #0]
    2354:	7813      	ldrb	r3, [r2, #0]
    2356:	d407      	bmi.n	2368 <opcode_0x01()+0x28>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    235c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    235e:	b928      	cbnz	r0, 236c <opcode_0x01()+0x2c>
    2360:	f043 0302 	orr.w	r3, r3, #2
    return;
    2364:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x01 - OR - Indexed Indirect X
    2366:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    236c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2370:	7013      	strb	r3, [r2, #0]
    2372:	bd08      	pop	{r3, pc}
    2374:	200150a3 	.word	0x200150a3
    2378:	200047c0 	.word	0x200047c0

0000237c <opcode_0x11()>:
void opcode_0x11() {
    237c:	b508      	push	{r3, lr}
    register_a = register_a | (Fetch_Indexed_Indirect_Y(1));
    237e:	2001      	movs	r0, #1
    2380:	f7fe fc6a 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    2384:	4b0b      	ldr	r3, [pc, #44]	; (23b4 <opcode_0x11()+0x38>)
    2386:	781a      	ldrb	r2, [r3, #0]
    2388:	4310      	orrs	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    238a:	4a0b      	ldr	r2, [pc, #44]	; (23b8 <opcode_0x11()+0x3c>)
    238c:	b2c0      	uxtb	r0, r0
    238e:	0601      	lsls	r1, r0, #24
    2390:	7018      	strb	r0, [r3, #0]
    2392:	7813      	ldrb	r3, [r2, #0]
    2394:	d407      	bmi.n	23a6 <opcode_0x11()+0x2a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    239a:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    239c:	b928      	cbnz	r0, 23aa <opcode_0x11()+0x2e>
    239e:	f043 0302 	orr.w	r3, r3, #2
    return;
    23a2:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x11 - OR - Indirect Indexed  Y
    23a4:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    23a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    23aa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    23ae:	7013      	strb	r3, [r2, #0]
    23b0:	bd08      	pop	{r3, pc}
    23b2:	bf00      	nop
    23b4:	200150a3 	.word	0x200150a3
    23b8:	200047c0 	.word	0x200047c0

000023bc <opcode_0x49()>:

// -------------------------------------------------
// EOR
// -------------------------------------------------
void opcode_0x49() {
    23bc:	b508      	push	{r3, lr}
    register_pc++;
    23be:	4b0f      	ldr	r3, [pc, #60]	; (23fc <opcode_0x49()+0x40>)
    return read_byte(register_pc, false);
    23c0:	2100      	movs	r1, #0
    register_pc++;
    23c2:	8818      	ldrh	r0, [r3, #0]
    23c4:	3001      	adds	r0, #1
    23c6:	b280      	uxth	r0, r0
    23c8:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    23ca:	f7fe f82b 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_Immediate());
    23ce:	4a0c      	ldr	r2, [pc, #48]	; (2400 <opcode_0x49()+0x44>)
    23d0:	7811      	ldrb	r1, [r2, #0]
    23d2:	ea81 0300 	eor.w	r3, r1, r0
    23d6:	b2db      	uxtb	r3, r3
    23d8:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    23da:	f013 0f80 	tst.w	r3, #128	; 0x80
    23de:	4a09      	ldr	r2, [pc, #36]	; (2404 <opcode_0x49()+0x48>)
    23e0:	7813      	ldrb	r3, [r2, #0]
    23e2:	bf14      	ite	ne
    23e4:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    23e8:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    23ec:	4281      	cmp	r1, r0
    23ee:	bf0c      	ite	eq
    23f0:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    23f4:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    23f8:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x49 - EOR - Immediate
    23fa:	bd08      	pop	{r3, pc}
    23fc:	2001508c 	.word	0x2001508c
    2400:	200150a3 	.word	0x200150a3
    2404:	200047c0 	.word	0x200047c0

00002408 <opcode_0x45()>:
void opcode_0x45() {
    2408:	b508      	push	{r3, lr}
    register_pc++;
    240a:	4b12      	ldr	r3, [pc, #72]	; (2454 <opcode_0x45()+0x4c>)
    return read_byte(register_pc, false);
    240c:	2100      	movs	r1, #0
    register_pc++;
    240e:	8818      	ldrh	r0, [r3, #0]
    2410:	3001      	adds	r0, #1
    2412:	b280      	uxth	r0, r0
    2414:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2416:	f7fe f805 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    241a:	4b0f      	ldr	r3, [pc, #60]	; (2458 <opcode_0x45()+0x50>)
    241c:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    241e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2420:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2422:	f7fd ffff 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a ^ (Fetch_ZeroPage());
    2426:	4a0d      	ldr	r2, [pc, #52]	; (245c <opcode_0x45()+0x54>)
    2428:	7811      	ldrb	r1, [r2, #0]
    242a:	ea81 0300 	eor.w	r3, r1, r0
    242e:	b2db      	uxtb	r3, r3
    2430:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2432:	f013 0f80 	tst.w	r3, #128	; 0x80
    2436:	4a0a      	ldr	r2, [pc, #40]	; (2460 <opcode_0x45()+0x58>)
    2438:	7813      	ldrb	r3, [r2, #0]
    243a:	bf14      	ite	ne
    243c:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2440:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2444:	4281      	cmp	r1, r0
    2446:	bf0c      	ite	eq
    2448:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    244c:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    2450:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x45 - EOR - ZeroPage
    2452:	bd08      	pop	{r3, pc}
    2454:	2001508c 	.word	0x2001508c
    2458:	2001508a 	.word	0x2001508a
    245c:	200150a3 	.word	0x200150a3
    2460:	200047c0 	.word	0x200047c0

00002464 <opcode_0x55()>:
void opcode_0x55() {
    2464:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_ZeroPage_X());
    2466:	f7fe fb0b 	bl	a80 <Fetch_ZeroPage_X()>
    246a:	4a0b      	ldr	r2, [pc, #44]	; (2498 <opcode_0x55()+0x34>)
    246c:	7811      	ldrb	r1, [r2, #0]
    246e:	ea80 0301 	eor.w	r3, r0, r1
    2472:	b2db      	uxtb	r3, r3
    2474:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2476:	f013 0f80 	tst.w	r3, #128	; 0x80
    247a:	4a08      	ldr	r2, [pc, #32]	; (249c <opcode_0x55()+0x38>)
    247c:	7813      	ldrb	r3, [r2, #0]
    247e:	bf14      	ite	ne
    2480:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2484:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2488:	4288      	cmp	r0, r1
    248a:	bf0c      	ite	eq
    248c:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2490:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    2494:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x55 - EOR - ZeroPage , X
    2496:	bd08      	pop	{r3, pc}
    2498:	200150a3 	.word	0x200150a3
    249c:	200047c0 	.word	0x200047c0

000024a0 <opcode_0x4D()>:
void opcode_0x4D() {
    24a0:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute());
    24a2:	f7fe fb2d 	bl	b00 <Fetch_Absolute()>
    24a6:	4a0b      	ldr	r2, [pc, #44]	; (24d4 <opcode_0x4D()+0x34>)
    24a8:	7811      	ldrb	r1, [r2, #0]
    24aa:	ea80 0301 	eor.w	r3, r0, r1
    24ae:	b2db      	uxtb	r3, r3
    24b0:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    24b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    24b6:	4a08      	ldr	r2, [pc, #32]	; (24d8 <opcode_0x4D()+0x38>)
    24b8:	7813      	ldrb	r3, [r2, #0]
    24ba:	bf14      	ite	ne
    24bc:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    24c0:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    24c4:	4288      	cmp	r0, r1
    24c6:	bf0c      	ite	eq
    24c8:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    24cc:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    24d0:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x4D - EOR - Absolute
    24d2:	bd08      	pop	{r3, pc}
    24d4:	200150a3 	.word	0x200150a3
    24d8:	200047c0 	.word	0x200047c0

000024dc <opcode_0x5D()>:
void opcode_0x5D() {
    24dc:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute_X(1));
    24de:	2001      	movs	r0, #1
    24e0:	f7fe fb2c 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    24e4:	4a0b      	ldr	r2, [pc, #44]	; (2514 <opcode_0x5D()+0x38>)
    24e6:	7811      	ldrb	r1, [r2, #0]
    24e8:	ea80 0301 	eor.w	r3, r0, r1
    24ec:	b2db      	uxtb	r3, r3
    24ee:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    24f0:	f013 0f80 	tst.w	r3, #128	; 0x80
    24f4:	4a08      	ldr	r2, [pc, #32]	; (2518 <opcode_0x5D()+0x3c>)
    24f6:	7813      	ldrb	r3, [r2, #0]
    24f8:	bf14      	ite	ne
    24fa:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    24fe:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2502:	4288      	cmp	r0, r1
    2504:	bf0c      	ite	eq
    2506:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    250a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    250e:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x5D - EOR - Absolute , X
    2510:	bd08      	pop	{r3, pc}
    2512:	bf00      	nop
    2514:	200150a3 	.word	0x200150a3
    2518:	200047c0 	.word	0x200047c0

0000251c <opcode_0x59()>:
void opcode_0x59() {
    251c:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Absolute_Y(1));
    251e:	2001      	movs	r0, #1
    2520:	f7fe fb3e 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    2524:	4a0b      	ldr	r2, [pc, #44]	; (2554 <opcode_0x59()+0x38>)
    2526:	7811      	ldrb	r1, [r2, #0]
    2528:	ea80 0301 	eor.w	r3, r0, r1
    252c:	b2db      	uxtb	r3, r3
    252e:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2530:	f013 0f80 	tst.w	r3, #128	; 0x80
    2534:	4a08      	ldr	r2, [pc, #32]	; (2558 <opcode_0x59()+0x3c>)
    2536:	7813      	ldrb	r3, [r2, #0]
    2538:	bf14      	ite	ne
    253a:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    253e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2542:	4288      	cmp	r0, r1
    2544:	bf0c      	ite	eq
    2546:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    254a:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    254e:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x59 - EOR - Absolute , Y
    2550:	bd08      	pop	{r3, pc}
    2552:	bf00      	nop
    2554:	200150a3 	.word	0x200150a3
    2558:	200047c0 	.word	0x200047c0

0000255c <opcode_0x41()>:
void opcode_0x41() {
    255c:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Indexed_Indirect_X());
    255e:	f7fe fb51 	bl	c04 <Fetch_Indexed_Indirect_X()>
    2562:	4a0b      	ldr	r2, [pc, #44]	; (2590 <opcode_0x41()+0x34>)
    2564:	7811      	ldrb	r1, [r2, #0]
    2566:	ea80 0301 	eor.w	r3, r0, r1
    256a:	b2db      	uxtb	r3, r3
    256c:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    256e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2572:	4a08      	ldr	r2, [pc, #32]	; (2594 <opcode_0x41()+0x38>)
    2574:	7813      	ldrb	r3, [r2, #0]
    2576:	bf14      	ite	ne
    2578:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    257c:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2580:	4288      	cmp	r0, r1
    2582:	bf0c      	ite	eq
    2584:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2588:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    258c:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x41 - EOR - Indexed Indirect X
    258e:	bd08      	pop	{r3, pc}
    2590:	200150a3 	.word	0x200150a3
    2594:	200047c0 	.word	0x200047c0

00002598 <opcode_0x51()>:
void opcode_0x51() {
    2598:	b508      	push	{r3, lr}
    register_a = register_a ^ (Fetch_Indexed_Indirect_Y(1));
    259a:	2001      	movs	r0, #1
    259c:	f7fe fb5c 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    25a0:	4a0b      	ldr	r2, [pc, #44]	; (25d0 <opcode_0x51()+0x38>)
    25a2:	7811      	ldrb	r1, [r2, #0]
    25a4:	ea80 0301 	eor.w	r3, r0, r1
    25a8:	b2db      	uxtb	r3, r3
    25aa:	7013      	strb	r3, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    25ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    25b0:	4a08      	ldr	r2, [pc, #32]	; (25d4 <opcode_0x51()+0x3c>)
    25b2:	7813      	ldrb	r3, [r2, #0]
    25b4:	bf14      	ite	ne
    25b6:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    25ba:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    25be:	4288      	cmp	r0, r1
    25c0:	bf0c      	ite	eq
    25c2:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    25c6:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    25ca:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0x51 - EOR - Indirect Indexed  Y
    25cc:	bd08      	pop	{r3, pc}
    25ce:	bf00      	nop
    25d0:	200150a3 	.word	0x200150a3
    25d4:	200047c0 	.word	0x200047c0

000025d8 <opcode_0xA9()>:

// -------------------------------------------------
// LDA
// -------------------------------------------------
void opcode_0xA9() {
    25d8:	b508      	push	{r3, lr}
    register_pc++;
    25da:	4b0e      	ldr	r3, [pc, #56]	; (2614 <opcode_0xA9()+0x3c>)
    return read_byte(register_pc, false);
    25dc:	2100      	movs	r1, #0
    register_pc++;
    25de:	8818      	ldrh	r0, [r3, #0]
    25e0:	3001      	adds	r0, #1
    25e2:	b280      	uxth	r0, r0
    25e4:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    25e6:	f7fd ff1d 	bl	424 <read_byte(unsigned short, bool)>
    register_a = Fetch_Immediate();
    25ea:	4b0b      	ldr	r3, [pc, #44]	; (2618 <opcode_0xA9()+0x40>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    25ec:	0601      	lsls	r1, r0, #24
    25ee:	4a0b      	ldr	r2, [pc, #44]	; (261c <opcode_0xA9()+0x44>)
    25f0:	7018      	strb	r0, [r3, #0]
    25f2:	7813      	ldrb	r3, [r2, #0]
    25f4:	d407      	bmi.n	2606 <opcode_0xA9()+0x2e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    25f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    25fa:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    25fc:	b928      	cbnz	r0, 260a <opcode_0xA9()+0x32>
    25fe:	f043 0302 	orr.w	r3, r3, #2
    return;
    2602:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xA9 - LDA - Immediate
    2604:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    260a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    260e:	7013      	strb	r3, [r2, #0]
    2610:	bd08      	pop	{r3, pc}
    2612:	bf00      	nop
    2614:	2001508c 	.word	0x2001508c
    2618:	200150a3 	.word	0x200150a3
    261c:	200047c0 	.word	0x200047c0

00002620 <opcode_0xA5()>:
void opcode_0xA5() {
    2620:	b508      	push	{r3, lr}
    register_pc++;
    2622:	4b11      	ldr	r3, [pc, #68]	; (2668 <opcode_0xA5()+0x48>)
    return read_byte(register_pc, false);
    2624:	2100      	movs	r1, #0
    register_pc++;
    2626:	8818      	ldrh	r0, [r3, #0]
    2628:	3001      	adds	r0, #1
    262a:	b280      	uxth	r0, r0
    262c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    262e:	f7fd fef9 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    2632:	4b0e      	ldr	r3, [pc, #56]	; (266c <opcode_0xA5()+0x4c>)
    2634:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2636:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2638:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    263a:	f7fd fef3 	bl	424 <read_byte(unsigned short, bool)>
    register_a = Fetch_ZeroPage();
    263e:	4b0c      	ldr	r3, [pc, #48]	; (2670 <opcode_0xA5()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2640:	0601      	lsls	r1, r0, #24
    2642:	4a0c      	ldr	r2, [pc, #48]	; (2674 <opcode_0xA5()+0x54>)
    2644:	7018      	strb	r0, [r3, #0]
    2646:	7813      	ldrb	r3, [r2, #0]
    2648:	d407      	bmi.n	265a <opcode_0xA5()+0x3a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    264a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    264e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2650:	b928      	cbnz	r0, 265e <opcode_0xA5()+0x3e>
    2652:	f043 0302 	orr.w	r3, r3, #2
    return;
    2656:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xA5 - LDA - ZeroPage
    2658:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    265a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    265e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2662:	7013      	strb	r3, [r2, #0]
    2664:	bd08      	pop	{r3, pc}
    2666:	bf00      	nop
    2668:	2001508c 	.word	0x2001508c
    266c:	2001508a 	.word	0x2001508a
    2670:	200150a3 	.word	0x200150a3
    2674:	200047c0 	.word	0x200047c0

00002678 <opcode_0xB5()>:
void opcode_0xB5() {
    2678:	b508      	push	{r3, lr}
    register_a = Fetch_ZeroPage_X();
    267a:	f7fe fa01 	bl	a80 <Fetch_ZeroPage_X()>
    267e:	4b0a      	ldr	r3, [pc, #40]	; (26a8 <opcode_0xB5()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2680:	4a0a      	ldr	r2, [pc, #40]	; (26ac <opcode_0xB5()+0x34>)
    2682:	0601      	lsls	r1, r0, #24
    2684:	7018      	strb	r0, [r3, #0]
    2686:	7813      	ldrb	r3, [r2, #0]
    2688:	d407      	bmi.n	269a <opcode_0xB5()+0x22>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    268a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    268e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2690:	b928      	cbnz	r0, 269e <opcode_0xB5()+0x26>
    2692:	f043 0302 	orr.w	r3, r3, #2
    return;
    2696:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xB5 - LDA - ZeroPage , X
    2698:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    269a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    269e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    26a2:	7013      	strb	r3, [r2, #0]
    26a4:	bd08      	pop	{r3, pc}
    26a6:	bf00      	nop
    26a8:	200150a3 	.word	0x200150a3
    26ac:	200047c0 	.word	0x200047c0

000026b0 <opcode_0xAD()>:
void opcode_0xAD() {
    26b0:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute();
    26b2:	f7fe fa25 	bl	b00 <Fetch_Absolute()>
    26b6:	4b0a      	ldr	r3, [pc, #40]	; (26e0 <opcode_0xAD()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    26b8:	4a0a      	ldr	r2, [pc, #40]	; (26e4 <opcode_0xAD()+0x34>)
    26ba:	0601      	lsls	r1, r0, #24
    26bc:	7018      	strb	r0, [r3, #0]
    26be:	7813      	ldrb	r3, [r2, #0]
    26c0:	d407      	bmi.n	26d2 <opcode_0xAD()+0x22>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    26c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    26c6:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    26c8:	b928      	cbnz	r0, 26d6 <opcode_0xAD()+0x26>
    26ca:	f043 0302 	orr.w	r3, r3, #2
    return;
    26ce:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xAD - LDA - Absolute
    26d0:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    26d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    26d6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    26da:	7013      	strb	r3, [r2, #0]
    26dc:	bd08      	pop	{r3, pc}
    26de:	bf00      	nop
    26e0:	200150a3 	.word	0x200150a3
    26e4:	200047c0 	.word	0x200047c0

000026e8 <opcode_0xBD()>:
void opcode_0xBD() {
    26e8:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_X(1);
    26ea:	2001      	movs	r0, #1
    26ec:	f7fe fa26 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    26f0:	4b09      	ldr	r3, [pc, #36]	; (2718 <opcode_0xBD()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    26f2:	4a0a      	ldr	r2, [pc, #40]	; (271c <opcode_0xBD()+0x34>)
    26f4:	0601      	lsls	r1, r0, #24
    26f6:	7018      	strb	r0, [r3, #0]
    26f8:	7813      	ldrb	r3, [r2, #0]
    26fa:	d407      	bmi.n	270c <opcode_0xBD()+0x24>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    26fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2700:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2702:	b928      	cbnz	r0, 2710 <opcode_0xBD()+0x28>
    2704:	f043 0302 	orr.w	r3, r3, #2
    return;
    2708:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xBD - LDA - Absolute , X
    270a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    270c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2710:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2714:	7013      	strb	r3, [r2, #0]
    2716:	bd08      	pop	{r3, pc}
    2718:	200150a3 	.word	0x200150a3
    271c:	200047c0 	.word	0x200047c0

00002720 <opcode_0xB9()>:
void opcode_0xB9() {
    2720:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_Y(1);
    2722:	2001      	movs	r0, #1
    2724:	f7fe fa3c 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    2728:	4b09      	ldr	r3, [pc, #36]	; (2750 <opcode_0xB9()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    272a:	4a0a      	ldr	r2, [pc, #40]	; (2754 <opcode_0xB9()+0x34>)
    272c:	0601      	lsls	r1, r0, #24
    272e:	7018      	strb	r0, [r3, #0]
    2730:	7813      	ldrb	r3, [r2, #0]
    2732:	d407      	bmi.n	2744 <opcode_0xB9()+0x24>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2738:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    273a:	b928      	cbnz	r0, 2748 <opcode_0xB9()+0x28>
    273c:	f043 0302 	orr.w	r3, r3, #2
    return;
    2740:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xB9 - LDA - Absolute , Y
    2742:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2748:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    274c:	7013      	strb	r3, [r2, #0]
    274e:	bd08      	pop	{r3, pc}
    2750:	200150a3 	.word	0x200150a3
    2754:	200047c0 	.word	0x200047c0

00002758 <opcode_0xA1()>:
void opcode_0xA1() {
    2758:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_X();
    275a:	f7fe fa53 	bl	c04 <Fetch_Indexed_Indirect_X()>
    275e:	4b0a      	ldr	r3, [pc, #40]	; (2788 <opcode_0xA1()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2760:	4a0a      	ldr	r2, [pc, #40]	; (278c <opcode_0xA1()+0x34>)
    2762:	0601      	lsls	r1, r0, #24
    2764:	7018      	strb	r0, [r3, #0]
    2766:	7813      	ldrb	r3, [r2, #0]
    2768:	d407      	bmi.n	277a <opcode_0xA1()+0x22>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    276a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    276e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2770:	b928      	cbnz	r0, 277e <opcode_0xA1()+0x26>
    2772:	f043 0302 	orr.w	r3, r3, #2
    return;
    2776:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xA1 - LDA - Indexed Indirect X
    2778:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    277a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    277e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2782:	7013      	strb	r3, [r2, #0]
    2784:	bd08      	pop	{r3, pc}
    2786:	bf00      	nop
    2788:	200150a3 	.word	0x200150a3
    278c:	200047c0 	.word	0x200047c0

00002790 <opcode_0xB1()>:
void opcode_0xB1() {
    2790:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_Y(1);
    2792:	2001      	movs	r0, #1
    2794:	f7fe fa60 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    2798:	4b09      	ldr	r3, [pc, #36]	; (27c0 <opcode_0xB1()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    279a:	4a0a      	ldr	r2, [pc, #40]	; (27c4 <opcode_0xB1()+0x34>)
    279c:	0601      	lsls	r1, r0, #24
    279e:	7018      	strb	r0, [r3, #0]
    27a0:	7813      	ldrb	r3, [r2, #0]
    27a2:	d407      	bmi.n	27b4 <opcode_0xB1()+0x24>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    27a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    27a8:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    27aa:	b928      	cbnz	r0, 27b8 <opcode_0xB1()+0x28>
    27ac:	f043 0302 	orr.w	r3, r3, #2
    return;
    27b0:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xB1 - LDA - Indirect Indexed  Y
    27b2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    27b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    27b8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    27bc:	7013      	strb	r3, [r2, #0]
    27be:	bd08      	pop	{r3, pc}
    27c0:	200150a3 	.word	0x200150a3
    27c4:	200047c0 	.word	0x200047c0

000027c8 <opcode_0xA2()>:

// -------------------------------------------------
// LDX
// -------------------------------------------------
void opcode_0xA2() {
    27c8:	b508      	push	{r3, lr}
    register_pc++;
    27ca:	4b0e      	ldr	r3, [pc, #56]	; (2804 <opcode_0xA2()+0x3c>)
    return read_byte(register_pc, false);
    27cc:	2100      	movs	r1, #0
    register_pc++;
    27ce:	8818      	ldrh	r0, [r3, #0]
    27d0:	3001      	adds	r0, #1
    27d2:	b280      	uxth	r0, r0
    27d4:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    27d6:	f7fd fe25 	bl	424 <read_byte(unsigned short, bool)>
    register_x = Fetch_Immediate();
    27da:	4b0b      	ldr	r3, [pc, #44]	; (2808 <opcode_0xA2()+0x40>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    27dc:	0601      	lsls	r1, r0, #24
    27de:	4a0b      	ldr	r2, [pc, #44]	; (280c <opcode_0xA2()+0x44>)
    27e0:	7018      	strb	r0, [r3, #0]
    27e2:	7813      	ldrb	r3, [r2, #0]
    27e4:	d407      	bmi.n	27f6 <opcode_0xA2()+0x2e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    27e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    27ea:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    27ec:	b928      	cbnz	r0, 27fa <opcode_0xA2()+0x32>
    27ee:	f043 0302 	orr.w	r3, r3, #2
    return;
    27f2:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xA2 - LDX - Immediate
    27f4:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    27f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    27fa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    27fe:	7013      	strb	r3, [r2, #0]
    2800:	bd08      	pop	{r3, pc}
    2802:	bf00      	nop
    2804:	2001508c 	.word	0x2001508c
    2808:	200150a4 	.word	0x200150a4
    280c:	200047c0 	.word	0x200047c0

00002810 <opcode_0xA6()>:
void opcode_0xA6() {
    2810:	b508      	push	{r3, lr}
    register_pc++;
    2812:	4b11      	ldr	r3, [pc, #68]	; (2858 <opcode_0xA6()+0x48>)
    return read_byte(register_pc, false);
    2814:	2100      	movs	r1, #0
    register_pc++;
    2816:	8818      	ldrh	r0, [r3, #0]
    2818:	3001      	adds	r0, #1
    281a:	b280      	uxth	r0, r0
    281c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    281e:	f7fd fe01 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    2822:	4b0e      	ldr	r3, [pc, #56]	; (285c <opcode_0xA6()+0x4c>)
    2824:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2826:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2828:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    282a:	f7fd fdfb 	bl	424 <read_byte(unsigned short, bool)>
    register_x = Fetch_ZeroPage();
    282e:	4b0c      	ldr	r3, [pc, #48]	; (2860 <opcode_0xA6()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2830:	0601      	lsls	r1, r0, #24
    2832:	4a0c      	ldr	r2, [pc, #48]	; (2864 <opcode_0xA6()+0x54>)
    2834:	7018      	strb	r0, [r3, #0]
    2836:	7813      	ldrb	r3, [r2, #0]
    2838:	d407      	bmi.n	284a <opcode_0xA6()+0x3a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    283a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    283e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2840:	b928      	cbnz	r0, 284e <opcode_0xA6()+0x3e>
    2842:	f043 0302 	orr.w	r3, r3, #2
    return;
    2846:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xA6 - LDX - ZeroPage
    2848:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    284a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    284e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2852:	7013      	strb	r3, [r2, #0]
    2854:	bd08      	pop	{r3, pc}
    2856:	bf00      	nop
    2858:	2001508c 	.word	0x2001508c
    285c:	2001508a 	.word	0x2001508a
    2860:	200150a4 	.word	0x200150a4
    2864:	200047c0 	.word	0x200047c0

00002868 <opcode_0xB6()>:
void opcode_0xB6() {
    2868:	b510      	push	{r4, lr}
    register_pc++;
    286a:	4c16      	ldr	r4, [pc, #88]	; (28c4 <opcode_0xB6()+0x5c>)
    return read_byte(register_pc, false);
    286c:	2100      	movs	r1, #0
    register_pc++;
    286e:	8820      	ldrh	r0, [r4, #0]
    2870:	3001      	adds	r0, #1
    2872:	b280      	uxth	r0, r0
    2874:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
    2876:	f7fd fdd5 	bl	424 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    287a:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc, false);
    287c:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    287e:	2100      	movs	r1, #0
    2880:	1c58      	adds	r0, r3, #1
    2882:	b280      	uxth	r0, r0
    2884:	f7fd fdce 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    2888:	4a0f      	ldr	r2, [pc, #60]	; (28c8 <opcode_0xB6()+0x60>)
    288a:	4b10      	ldr	r3, [pc, #64]	; (28cc <opcode_0xB6()+0x64>)
    return read_byte(effective_address, false);
    288c:	2100      	movs	r1, #0
    288e:	7812      	ldrb	r2, [r2, #0]
    2890:	18a0      	adds	r0, r4, r2
    2892:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    2894:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2896:	f7fd fdc5 	bl	424 <read_byte(unsigned short, bool)>
    register_x = Fetch_ZeroPage_Y();
    289a:	4b0d      	ldr	r3, [pc, #52]	; (28d0 <opcode_0xB6()+0x68>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    289c:	0601      	lsls	r1, r0, #24
    289e:	4a0d      	ldr	r2, [pc, #52]	; (28d4 <opcode_0xB6()+0x6c>)
    28a0:	7018      	strb	r0, [r3, #0]
    28a2:	7813      	ldrb	r3, [r2, #0]
    28a4:	d407      	bmi.n	28b6 <opcode_0xB6()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    28a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    28aa:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    28ac:	b928      	cbnz	r0, 28ba <opcode_0xB6()+0x52>
    28ae:	f043 0302 	orr.w	r3, r3, #2
    return;
    28b2:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xB6 - LDX - ZeroPage , Y
    28b4:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    28b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    28ba:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    28be:	7013      	strb	r3, [r2, #0]
    28c0:	bd10      	pop	{r4, pc}
    28c2:	bf00      	nop
    28c4:	2001508c 	.word	0x2001508c
    28c8:	200150a5 	.word	0x200150a5
    28cc:	2001508a 	.word	0x2001508a
    28d0:	200150a4 	.word	0x200150a4
    28d4:	200047c0 	.word	0x200047c0

000028d8 <opcode_0xAE()>:
void opcode_0xAE() {
    28d8:	b508      	push	{r3, lr}
    register_x = Fetch_Absolute();
    28da:	f7fe f911 	bl	b00 <Fetch_Absolute()>
    28de:	4b0a      	ldr	r3, [pc, #40]	; (2908 <opcode_0xAE()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    28e0:	4a0a      	ldr	r2, [pc, #40]	; (290c <opcode_0xAE()+0x34>)
    28e2:	0601      	lsls	r1, r0, #24
    28e4:	7018      	strb	r0, [r3, #0]
    28e6:	7813      	ldrb	r3, [r2, #0]
    28e8:	d407      	bmi.n	28fa <opcode_0xAE()+0x22>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    28ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    28ee:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    28f0:	b928      	cbnz	r0, 28fe <opcode_0xAE()+0x26>
    28f2:	f043 0302 	orr.w	r3, r3, #2
    return;
    28f6:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xAE - LDX - Absolute
    28f8:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    28fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    28fe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2902:	7013      	strb	r3, [r2, #0]
    2904:	bd08      	pop	{r3, pc}
    2906:	bf00      	nop
    2908:	200150a4 	.word	0x200150a4
    290c:	200047c0 	.word	0x200047c0

00002910 <opcode_0xBE()>:
void opcode_0xBE() {
    2910:	b508      	push	{r3, lr}
    register_x = Fetch_Absolute_Y(1);
    2912:	2001      	movs	r0, #1
    2914:	f7fe f944 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    2918:	4b09      	ldr	r3, [pc, #36]	; (2940 <opcode_0xBE()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    291a:	4a0a      	ldr	r2, [pc, #40]	; (2944 <opcode_0xBE()+0x34>)
    291c:	0601      	lsls	r1, r0, #24
    291e:	7018      	strb	r0, [r3, #0]
    2920:	7813      	ldrb	r3, [r2, #0]
    2922:	d407      	bmi.n	2934 <opcode_0xBE()+0x24>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2928:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    292a:	b928      	cbnz	r0, 2938 <opcode_0xBE()+0x28>
    292c:	f043 0302 	orr.w	r3, r3, #2
    return;
    2930:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_x);
    return;
} // 0xBE - LDX - Absolute , Y
    2932:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2938:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    293c:	7013      	strb	r3, [r2, #0]
    293e:	bd08      	pop	{r3, pc}
    2940:	200150a4 	.word	0x200150a4
    2944:	200047c0 	.word	0x200047c0

00002948 <opcode_0xA0()>:

// -------------------------------------------------          
// LDY                                                        
// -------------------------------------------------          
void opcode_0xA0() {
    2948:	b508      	push	{r3, lr}
    register_pc++;
    294a:	4b0e      	ldr	r3, [pc, #56]	; (2984 <opcode_0xA0()+0x3c>)
    return read_byte(register_pc, false);
    294c:	2100      	movs	r1, #0
    register_pc++;
    294e:	8818      	ldrh	r0, [r3, #0]
    2950:	3001      	adds	r0, #1
    2952:	b280      	uxth	r0, r0
    2954:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2956:	f7fd fd65 	bl	424 <read_byte(unsigned short, bool)>
    register_y = Fetch_Immediate();
    295a:	4b0b      	ldr	r3, [pc, #44]	; (2988 <opcode_0xA0()+0x40>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    295c:	0601      	lsls	r1, r0, #24
    295e:	4a0b      	ldr	r2, [pc, #44]	; (298c <opcode_0xA0()+0x44>)
    2960:	7018      	strb	r0, [r3, #0]
    2962:	7813      	ldrb	r3, [r2, #0]
    2964:	d407      	bmi.n	2976 <opcode_0xA0()+0x2e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    296a:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    296c:	b928      	cbnz	r0, 297a <opcode_0xA0()+0x32>
    296e:	f043 0302 	orr.w	r3, r3, #2
    return;
    2972:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return;
} // 0xA0 - LDY - Immediate
    2974:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    297a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    297e:	7013      	strb	r3, [r2, #0]
    2980:	bd08      	pop	{r3, pc}
    2982:	bf00      	nop
    2984:	2001508c 	.word	0x2001508c
    2988:	200150a5 	.word	0x200150a5
    298c:	200047c0 	.word	0x200047c0

00002990 <opcode_0xA4()>:
void opcode_0xA4() {
    2990:	b508      	push	{r3, lr}
    register_pc++;
    2992:	4b11      	ldr	r3, [pc, #68]	; (29d8 <opcode_0xA4()+0x48>)
    return read_byte(register_pc, false);
    2994:	2100      	movs	r1, #0
    register_pc++;
    2996:	8818      	ldrh	r0, [r3, #0]
    2998:	3001      	adds	r0, #1
    299a:	b280      	uxth	r0, r0
    299c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    299e:	f7fd fd41 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    29a2:	4b0e      	ldr	r3, [pc, #56]	; (29dc <opcode_0xA4()+0x4c>)
    29a4:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    29a6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    29a8:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    29aa:	f7fd fd3b 	bl	424 <read_byte(unsigned short, bool)>
    register_y = Fetch_ZeroPage();
    29ae:	4b0c      	ldr	r3, [pc, #48]	; (29e0 <opcode_0xA4()+0x50>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    29b0:	0601      	lsls	r1, r0, #24
    29b2:	4a0c      	ldr	r2, [pc, #48]	; (29e4 <opcode_0xA4()+0x54>)
    29b4:	7018      	strb	r0, [r3, #0]
    29b6:	7813      	ldrb	r3, [r2, #0]
    29b8:	d407      	bmi.n	29ca <opcode_0xA4()+0x3a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    29ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    29be:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    29c0:	b928      	cbnz	r0, 29ce <opcode_0xA4()+0x3e>
    29c2:	f043 0302 	orr.w	r3, r3, #2
    return;
    29c6:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return;
} // 0xA4 - LDY - ZeroPage
    29c8:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    29ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    29ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    29d2:	7013      	strb	r3, [r2, #0]
    29d4:	bd08      	pop	{r3, pc}
    29d6:	bf00      	nop
    29d8:	2001508c 	.word	0x2001508c
    29dc:	2001508a 	.word	0x2001508a
    29e0:	200150a5 	.word	0x200150a5
    29e4:	200047c0 	.word	0x200047c0

000029e8 <opcode_0xB4()>:
void opcode_0xB4() {
    29e8:	b508      	push	{r3, lr}
    register_y = Fetch_ZeroPage_X();
    29ea:	f7fe f849 	bl	a80 <Fetch_ZeroPage_X()>
    29ee:	4b0a      	ldr	r3, [pc, #40]	; (2a18 <opcode_0xB4()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    29f0:	4a0a      	ldr	r2, [pc, #40]	; (2a1c <opcode_0xB4()+0x34>)
    29f2:	0601      	lsls	r1, r0, #24
    29f4:	7018      	strb	r0, [r3, #0]
    29f6:	7813      	ldrb	r3, [r2, #0]
    29f8:	d407      	bmi.n	2a0a <opcode_0xB4()+0x22>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    29fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    29fe:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2a00:	b928      	cbnz	r0, 2a0e <opcode_0xB4()+0x26>
    2a02:	f043 0302 	orr.w	r3, r3, #2
    return;
    2a06:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return;
} // 0xB4 - LDY - ZeroPage , X
    2a08:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2a0e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2a12:	7013      	strb	r3, [r2, #0]
    2a14:	bd08      	pop	{r3, pc}
    2a16:	bf00      	nop
    2a18:	200150a5 	.word	0x200150a5
    2a1c:	200047c0 	.word	0x200047c0

00002a20 <opcode_0xAC()>:
void opcode_0xAC() {
    2a20:	b508      	push	{r3, lr}
    register_y = Fetch_Absolute();
    2a22:	f7fe f86d 	bl	b00 <Fetch_Absolute()>
    2a26:	4b0a      	ldr	r3, [pc, #40]	; (2a50 <opcode_0xAC()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2a28:	4a0a      	ldr	r2, [pc, #40]	; (2a54 <opcode_0xAC()+0x34>)
    2a2a:	0601      	lsls	r1, r0, #24
    2a2c:	7018      	strb	r0, [r3, #0]
    2a2e:	7813      	ldrb	r3, [r2, #0]
    2a30:	d407      	bmi.n	2a42 <opcode_0xAC()+0x22>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2a36:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2a38:	b928      	cbnz	r0, 2a46 <opcode_0xAC()+0x26>
    2a3a:	f043 0302 	orr.w	r3, r3, #2
    return;
    2a3e:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return;
} // 0xAC - LDY - Absolute
    2a40:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2a46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2a4a:	7013      	strb	r3, [r2, #0]
    2a4c:	bd08      	pop	{r3, pc}
    2a4e:	bf00      	nop
    2a50:	200150a5 	.word	0x200150a5
    2a54:	200047c0 	.word	0x200047c0

00002a58 <opcode_0xBC()>:
void opcode_0xBC() {
    2a58:	b508      	push	{r3, lr}
    register_y = Fetch_Absolute_X(1);
    2a5a:	2001      	movs	r0, #1
    2a5c:	f7fe f86e 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    2a60:	4b09      	ldr	r3, [pc, #36]	; (2a88 <opcode_0xBC()+0x30>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2a62:	4a0a      	ldr	r2, [pc, #40]	; (2a8c <opcode_0xBC()+0x34>)
    2a64:	0601      	lsls	r1, r0, #24
    2a66:	7018      	strb	r0, [r3, #0]
    2a68:	7813      	ldrb	r3, [r2, #0]
    2a6a:	d407      	bmi.n	2a7c <opcode_0xBC()+0x24>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2a70:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2a72:	b928      	cbnz	r0, 2a80 <opcode_0xBC()+0x28>
    2a74:	f043 0302 	orr.w	r3, r3, #2
    return;
    2a78:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_y);
    return;
} // 0xBC - LDY - Absolute , X
    2a7a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2a80:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2a84:	7013      	strb	r3, [r2, #0]
    2a86:	bd08      	pop	{r3, pc}
    2a88:	200150a5 	.word	0x200150a5
    2a8c:	200047c0 	.word	0x200047c0

00002a90 <opcode_0x24()>:
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    else register_flags = register_flags & 0xFD; // Clear the Z flag 

    return;
}
void opcode_0x24() {
    2a90:	b508      	push	{r3, lr}
    register_pc++;
    2a92:	4b11      	ldr	r3, [pc, #68]	; (2ad8 <opcode_0x24()+0x48>)
    return read_byte(register_pc, false);
    2a94:	2100      	movs	r1, #0
    register_pc++;
    2a96:	8818      	ldrh	r0, [r3, #0]
    2a98:	3001      	adds	r0, #1
    2a9a:	b280      	uxth	r0, r0
    2a9c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2a9e:	f7fd fcc1 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    2aa2:	4b0e      	ldr	r3, [pc, #56]	; (2adc <opcode_0x24()+0x4c>)
    2aa4:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2aa6:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2aa8:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2aaa:	f7fd fcbb 	bl	424 <read_byte(unsigned short, bool)>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    2aae:	490c      	ldr	r1, [pc, #48]	; (2ae0 <opcode_0x24()+0x50>)
    temp = local_data & register_a;
    2ab0:	4b0c      	ldr	r3, [pc, #48]	; (2ae4 <opcode_0x24()+0x54>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    2ab2:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    2ab4:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    2ab8:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    2abc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2ac0:	ea10 0f0c 	tst.w	r0, ip
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    2ac4:	ea43 0302 	orr.w	r3, r3, r2
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2ac8:	bf0c      	ite	eq
    2aca:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2ace:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    2ad2:	700b      	strb	r3, [r1, #0]
    Calculate_BIT(Fetch_ZeroPage());
    return;
} // 0x24 - BIT - ZeroPage
    2ad4:	bd08      	pop	{r3, pc}
    2ad6:	bf00      	nop
    2ad8:	2001508c 	.word	0x2001508c
    2adc:	2001508a 	.word	0x2001508a
    2ae0:	200047c0 	.word	0x200047c0
    2ae4:	200150a3 	.word	0x200150a3

00002ae8 <opcode_0x2C()>:
void opcode_0x2C() {
    2ae8:	b508      	push	{r3, lr}
    Calculate_BIT(Fetch_Absolute());
    2aea:	f7fe f809 	bl	b00 <Fetch_Absolute()>
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    2aee:	490a      	ldr	r1, [pc, #40]	; (2b18 <opcode_0x2C()+0x30>)
    temp = local_data & register_a;
    2af0:	4b0a      	ldr	r3, [pc, #40]	; (2b1c <opcode_0x2C()+0x34>)
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    2af2:	780a      	ldrb	r2, [r1, #0]
    temp = local_data & register_a;
    2af4:	f893 c000 	ldrb.w	ip, [r3]
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    2af8:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    2afc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2b00:	ea10 0f0c 	tst.w	r0, ip
    register_flags = (register_flags & 0x3F) | (local_data & 0xC0); // Copy fetched memory[7:6] to C,V flags
    2b04:	ea43 0302 	orr.w	r3, r3, r2
    if (temp == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2b08:	bf0c      	ite	eq
    2b0a:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2b0e:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    2b12:	700b      	strb	r3, [r1, #0]
    return;
} // 0x2C - BIT - Absolute
    2b14:	bd08      	pop	{r3, pc}
    2b16:	bf00      	nop
    2b18:	200047c0 	.word	0x200047c0
    2b1c:	200150a3 	.word	0x200150a3

00002b20 <opcode_0xC9()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
void opcode_0xC9() {
    2b20:	b508      	push	{r3, lr}
    register_pc++;
    2b22:	4b12      	ldr	r3, [pc, #72]	; (2b6c <opcode_0xC9()+0x4c>)
    return read_byte(register_pc, false);
    2b24:	2100      	movs	r1, #0
    register_pc++;
    2b26:	8818      	ldrh	r0, [r3, #0]
    2b28:	3001      	adds	r0, #1
    2b2a:	b280      	uxth	r0, r0
    2b2c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2b2e:	f7fd fc79 	bl	424 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    2b32:	4b0f      	ldr	r3, [pc, #60]	; (2b70 <opcode_0xC9()+0x50>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2b34:	490f      	ldr	r1, [pc, #60]	; (2b74 <opcode_0xC9()+0x54>)
    temp = register_a - local_data;
    2b36:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2b38:	780b      	ldrb	r3, [r1, #0]
    2b3a:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    2b3c:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2b40:	bf2c      	ite	cs
    2b42:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2b46:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2b4a:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2b4c:	0600      	lsls	r0, r0, #24
    2b4e:	d407      	bmi.n	2b60 <opcode_0xC9()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2b54:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2b56:	b92a      	cbnz	r2, 2b64 <opcode_0xC9()+0x44>
    2b58:	f043 0302 	orr.w	r3, r3, #2
    return;
    2b5c:	700b      	strb	r3, [r1, #0]
    Calculate_CMP(Fetch_Immediate());
    return;
} // 0xC9 - CMP - Immediate
    2b5e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2b64:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2b68:	700b      	strb	r3, [r1, #0]
    2b6a:	bd08      	pop	{r3, pc}
    2b6c:	2001508c 	.word	0x2001508c
    2b70:	200150a3 	.word	0x200150a3
    2b74:	200047c0 	.word	0x200047c0

00002b78 <opcode_0xC5()>:
void opcode_0xC5() {
    2b78:	b508      	push	{r3, lr}
    register_pc++;
    2b7a:	4b15      	ldr	r3, [pc, #84]	; (2bd0 <opcode_0xC5()+0x58>)
    return read_byte(register_pc, false);
    2b7c:	2100      	movs	r1, #0
    register_pc++;
    2b7e:	8818      	ldrh	r0, [r3, #0]
    2b80:	3001      	adds	r0, #1
    2b82:	b280      	uxth	r0, r0
    2b84:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2b86:	f7fd fc4d 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    2b8a:	4b12      	ldr	r3, [pc, #72]	; (2bd4 <opcode_0xC5()+0x5c>)
    2b8c:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2b8e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2b90:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2b92:	f7fd fc47 	bl	424 <read_byte(unsigned short, bool)>
    temp = register_a - local_data;
    2b96:	4b10      	ldr	r3, [pc, #64]	; (2bd8 <opcode_0xC5()+0x60>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2b98:	4910      	ldr	r1, [pc, #64]	; (2bdc <opcode_0xC5()+0x64>)
    temp = register_a - local_data;
    2b9a:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2b9c:	780b      	ldrb	r3, [r1, #0]
    2b9e:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    2ba0:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2ba4:	bf2c      	ite	cs
    2ba6:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2baa:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2bae:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2bb0:	0600      	lsls	r0, r0, #24
    2bb2:	d407      	bmi.n	2bc4 <opcode_0xC5()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2bb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2bb8:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2bba:	b92a      	cbnz	r2, 2bc8 <opcode_0xC5()+0x50>
    2bbc:	f043 0302 	orr.w	r3, r3, #2
    return;
    2bc0:	700b      	strb	r3, [r1, #0]
    Calculate_CMP(Fetch_ZeroPage());
    return;
} // 0xC5 - CMP - ZeroPage
    2bc2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2bc8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2bcc:	700b      	strb	r3, [r1, #0]
    2bce:	bd08      	pop	{r3, pc}
    2bd0:	2001508c 	.word	0x2001508c
    2bd4:	2001508a 	.word	0x2001508a
    2bd8:	200150a3 	.word	0x200150a3
    2bdc:	200047c0 	.word	0x200047c0

00002be0 <opcode_0xD5()>:
void opcode_0xD5() {
    2be0:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_ZeroPage_X());
    2be2:	f7fd ff4d 	bl	a80 <Fetch_ZeroPage_X()>
    temp = register_a - local_data;
    2be6:	4b0e      	ldr	r3, [pc, #56]	; (2c20 <opcode_0xD5()+0x40>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2be8:	490e      	ldr	r1, [pc, #56]	; (2c24 <opcode_0xD5()+0x44>)
    temp = register_a - local_data;
    2bea:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2bec:	780b      	ldrb	r3, [r1, #0]
    2bee:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    2bf0:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2bf4:	bf94      	ite	ls
    2bf6:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2bfa:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2bfe:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2c00:	0600      	lsls	r0, r0, #24
    2c02:	d407      	bmi.n	2c14 <opcode_0xD5()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c08:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2c0a:	b92a      	cbnz	r2, 2c18 <opcode_0xD5()+0x38>
    2c0c:	f043 0302 	orr.w	r3, r3, #2
    return;
    2c10:	700b      	strb	r3, [r1, #0]
    return;
} // 0xD5 - CMP - ZeroPage , X
    2c12:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2c18:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2c1c:	700b      	strb	r3, [r1, #0]
    2c1e:	bd08      	pop	{r3, pc}
    2c20:	200150a3 	.word	0x200150a3
    2c24:	200047c0 	.word	0x200047c0

00002c28 <opcode_0xCD()>:
void opcode_0xCD() {
    2c28:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute());
    2c2a:	f7fd ff69 	bl	b00 <Fetch_Absolute()>
    temp = register_a - local_data;
    2c2e:	4b0e      	ldr	r3, [pc, #56]	; (2c68 <opcode_0xCD()+0x40>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2c30:	490e      	ldr	r1, [pc, #56]	; (2c6c <opcode_0xCD()+0x44>)
    temp = register_a - local_data;
    2c32:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2c34:	780b      	ldrb	r3, [r1, #0]
    2c36:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    2c38:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2c3c:	bf94      	ite	ls
    2c3e:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2c42:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2c46:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2c48:	0600      	lsls	r0, r0, #24
    2c4a:	d407      	bmi.n	2c5c <opcode_0xCD()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c50:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2c52:	b92a      	cbnz	r2, 2c60 <opcode_0xCD()+0x38>
    2c54:	f043 0302 	orr.w	r3, r3, #2
    return;
    2c58:	700b      	strb	r3, [r1, #0]
    return;
} // 0xCD - CMP - Absolute
    2c5a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2c60:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2c64:	700b      	strb	r3, [r1, #0]
    2c66:	bd08      	pop	{r3, pc}
    2c68:	200150a3 	.word	0x200150a3
    2c6c:	200047c0 	.word	0x200047c0

00002c70 <opcode_0xDD()>:
void opcode_0xDD() {
    2c70:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute_X(1));
    2c72:	2001      	movs	r0, #1
    2c74:	f7fd ff62 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    temp = register_a - local_data;
    2c78:	4b0e      	ldr	r3, [pc, #56]	; (2cb4 <opcode_0xDD()+0x44>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2c7a:	490f      	ldr	r1, [pc, #60]	; (2cb8 <opcode_0xDD()+0x48>)
    temp = register_a - local_data;
    2c7c:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2c7e:	780b      	ldrb	r3, [r1, #0]
    2c80:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    2c82:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2c86:	bf94      	ite	ls
    2c88:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2c8c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2c90:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2c92:	0600      	lsls	r0, r0, #24
    2c94:	d407      	bmi.n	2ca6 <opcode_0xDD()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c9a:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2c9c:	b92a      	cbnz	r2, 2caa <opcode_0xDD()+0x3a>
    2c9e:	f043 0302 	orr.w	r3, r3, #2
    return;
    2ca2:	700b      	strb	r3, [r1, #0]
    return;
} // 0xDD - CMP - Absolute , X
    2ca4:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2caa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2cae:	700b      	strb	r3, [r1, #0]
    2cb0:	bd08      	pop	{r3, pc}
    2cb2:	bf00      	nop
    2cb4:	200150a3 	.word	0x200150a3
    2cb8:	200047c0 	.word	0x200047c0

00002cbc <opcode_0xD9()>:
void opcode_0xD9() {
    2cbc:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Absolute_Y(1));
    2cbe:	2001      	movs	r0, #1
    2cc0:	f7fd ff6e 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    temp = register_a - local_data;
    2cc4:	4b0e      	ldr	r3, [pc, #56]	; (2d00 <opcode_0xD9()+0x44>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2cc6:	490f      	ldr	r1, [pc, #60]	; (2d04 <opcode_0xD9()+0x48>)
    temp = register_a - local_data;
    2cc8:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2cca:	780b      	ldrb	r3, [r1, #0]
    2ccc:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    2cce:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2cd2:	bf94      	ite	ls
    2cd4:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2cd8:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2cdc:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2cde:	0600      	lsls	r0, r0, #24
    2ce0:	d407      	bmi.n	2cf2 <opcode_0xD9()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ce6:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2ce8:	b92a      	cbnz	r2, 2cf6 <opcode_0xD9()+0x3a>
    2cea:	f043 0302 	orr.w	r3, r3, #2
    return;
    2cee:	700b      	strb	r3, [r1, #0]
    return;
} // 0xD9 - CMP - Absolute , Y
    2cf0:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2cf6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2cfa:	700b      	strb	r3, [r1, #0]
    2cfc:	bd08      	pop	{r3, pc}
    2cfe:	bf00      	nop
    2d00:	200150a3 	.word	0x200150a3
    2d04:	200047c0 	.word	0x200047c0

00002d08 <opcode_0xC1()>:
void opcode_0xC1() {
    2d08:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Indexed_Indirect_X());
    2d0a:	f7fd ff7b 	bl	c04 <Fetch_Indexed_Indirect_X()>
    temp = register_a - local_data;
    2d0e:	4b0e      	ldr	r3, [pc, #56]	; (2d48 <opcode_0xC1()+0x40>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2d10:	490e      	ldr	r1, [pc, #56]	; (2d4c <opcode_0xC1()+0x44>)
    temp = register_a - local_data;
    2d12:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2d14:	780b      	ldrb	r3, [r1, #0]
    2d16:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    2d18:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2d1c:	bf94      	ite	ls
    2d1e:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2d22:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2d26:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2d28:	0600      	lsls	r0, r0, #24
    2d2a:	d407      	bmi.n	2d3c <opcode_0xC1()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2d30:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2d32:	b92a      	cbnz	r2, 2d40 <opcode_0xC1()+0x38>
    2d34:	f043 0302 	orr.w	r3, r3, #2
    return;
    2d38:	700b      	strb	r3, [r1, #0]
    return;
} // 0xC1 - CMP - Indexed Indirect X
    2d3a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2d40:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2d44:	700b      	strb	r3, [r1, #0]
    2d46:	bd08      	pop	{r3, pc}
    2d48:	200150a3 	.word	0x200150a3
    2d4c:	200047c0 	.word	0x200047c0

00002d50 <opcode_0xD1()>:
void opcode_0xD1() {
    2d50:	b508      	push	{r3, lr}
    Calculate_CMP(Fetch_Indexed_Indirect_Y(1));
    2d52:	2001      	movs	r0, #1
    2d54:	f7fd ff80 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    temp = register_a - local_data;
    2d58:	4b0e      	ldr	r3, [pc, #56]	; (2d94 <opcode_0xD1()+0x44>)
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2d5a:	490f      	ldr	r1, [pc, #60]	; (2d98 <opcode_0xD1()+0x48>)
    temp = register_a - local_data;
    2d5c:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2d5e:	780b      	ldrb	r3, [r1, #0]
    2d60:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    2d62:	eba2 0000 	sub.w	r0, r2, r0
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2d66:	bf94      	ite	ls
    2d68:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2d6c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2d70:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2d72:	0600      	lsls	r0, r0, #24
    2d74:	d407      	bmi.n	2d86 <opcode_0xD1()+0x36>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2d7a:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2d7c:	b92a      	cbnz	r2, 2d8a <opcode_0xD1()+0x3a>
    2d7e:	f043 0302 	orr.w	r3, r3, #2
    return;
    2d82:	700b      	strb	r3, [r1, #0]
    return;
} // 0xD1 - CMP - Indirect Indexed  Y
    2d84:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2d8a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2d8e:	700b      	strb	r3, [r1, #0]
    2d90:	bd08      	pop	{r3, pc}
    2d92:	bf00      	nop
    2d94:	200150a3 	.word	0x200150a3
    2d98:	200047c0 	.word	0x200047c0

00002d9c <opcode_0xE0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
void opcode_0xE0() {
    2d9c:	b508      	push	{r3, lr}
    register_pc++;
    2d9e:	4b12      	ldr	r3, [pc, #72]	; (2de8 <opcode_0xE0()+0x4c>)
    return read_byte(register_pc, false);
    2da0:	2100      	movs	r1, #0
    register_pc++;
    2da2:	8818      	ldrh	r0, [r3, #0]
    2da4:	3001      	adds	r0, #1
    2da6:	b280      	uxth	r0, r0
    2da8:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2daa:	f7fd fb3b 	bl	424 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    2dae:	4b0f      	ldr	r3, [pc, #60]	; (2dec <opcode_0xE0()+0x50>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2db0:	490f      	ldr	r1, [pc, #60]	; (2df0 <opcode_0xE0()+0x54>)
    temp = register_x - local_data;
    2db2:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2db4:	780b      	ldrb	r3, [r1, #0]
    2db6:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    2db8:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2dbc:	bf2c      	ite	cs
    2dbe:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2dc2:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2dc6:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2dc8:	0600      	lsls	r0, r0, #24
    2dca:	d407      	bmi.n	2ddc <opcode_0xE0()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2dd0:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2dd2:	b92a      	cbnz	r2, 2de0 <opcode_0xE0()+0x44>
    2dd4:	f043 0302 	orr.w	r3, r3, #2
    return;
    2dd8:	700b      	strb	r3, [r1, #0]
    Calculate_CPX(Fetch_Immediate());
    return;
} // 0xE0 - CPX - Immediate
    2dda:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2de0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2de4:	700b      	strb	r3, [r1, #0]
    2de6:	bd08      	pop	{r3, pc}
    2de8:	2001508c 	.word	0x2001508c
    2dec:	200150a4 	.word	0x200150a4
    2df0:	200047c0 	.word	0x200047c0

00002df4 <opcode_0xE4()>:
void opcode_0xE4() {
    2df4:	b508      	push	{r3, lr}
    register_pc++;
    2df6:	4b15      	ldr	r3, [pc, #84]	; (2e4c <opcode_0xE4()+0x58>)
    return read_byte(register_pc, false);
    2df8:	2100      	movs	r1, #0
    register_pc++;
    2dfa:	8818      	ldrh	r0, [r3, #0]
    2dfc:	3001      	adds	r0, #1
    2dfe:	b280      	uxth	r0, r0
    2e00:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2e02:	f7fd fb0f 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    2e06:	4b12      	ldr	r3, [pc, #72]	; (2e50 <opcode_0xE4()+0x5c>)
    2e08:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2e0a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2e0c:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2e0e:	f7fd fb09 	bl	424 <read_byte(unsigned short, bool)>
    temp = register_x - local_data;
    2e12:	4b10      	ldr	r3, [pc, #64]	; (2e54 <opcode_0xE4()+0x60>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2e14:	4910      	ldr	r1, [pc, #64]	; (2e58 <opcode_0xE4()+0x64>)
    temp = register_x - local_data;
    2e16:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2e18:	780b      	ldrb	r3, [r1, #0]
    2e1a:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    2e1c:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2e20:	bf2c      	ite	cs
    2e22:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2e26:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2e2a:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2e2c:	0600      	lsls	r0, r0, #24
    2e2e:	d407      	bmi.n	2e40 <opcode_0xE4()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2e34:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2e36:	b92a      	cbnz	r2, 2e44 <opcode_0xE4()+0x50>
    2e38:	f043 0302 	orr.w	r3, r3, #2
    return;
    2e3c:	700b      	strb	r3, [r1, #0]
    Calculate_CPX(Fetch_ZeroPage());
    return;
} // 0xE4 - CPX - ZeroPage
    2e3e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2e44:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2e48:	700b      	strb	r3, [r1, #0]
    2e4a:	bd08      	pop	{r3, pc}
    2e4c:	2001508c 	.word	0x2001508c
    2e50:	2001508a 	.word	0x2001508a
    2e54:	200150a4 	.word	0x200150a4
    2e58:	200047c0 	.word	0x200047c0

00002e5c <opcode_0xEC()>:
void opcode_0xEC() {
    2e5c:	b508      	push	{r3, lr}
    Calculate_CPX(Fetch_Absolute());
    2e5e:	f7fd fe4f 	bl	b00 <Fetch_Absolute()>
    temp = register_x - local_data;
    2e62:	4b0e      	ldr	r3, [pc, #56]	; (2e9c <opcode_0xEC()+0x40>)
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2e64:	490e      	ldr	r1, [pc, #56]	; (2ea0 <opcode_0xEC()+0x44>)
    temp = register_x - local_data;
    2e66:	781a      	ldrb	r2, [r3, #0]
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2e68:	780b      	ldrb	r3, [r1, #0]
    2e6a:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    2e6c:	eba2 0000 	sub.w	r0, r2, r0
    if (register_x >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2e70:	bf94      	ite	ls
    2e72:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2e76:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2e7a:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2e7c:	0600      	lsls	r0, r0, #24
    2e7e:	d407      	bmi.n	2e90 <opcode_0xEC()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2e84:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2e86:	b92a      	cbnz	r2, 2e94 <opcode_0xEC()+0x38>
    2e88:	f043 0302 	orr.w	r3, r3, #2
    return;
    2e8c:	700b      	strb	r3, [r1, #0]
    return;
} // 0xEC - CPX - Absolute
    2e8e:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2e94:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2e98:	700b      	strb	r3, [r1, #0]
    2e9a:	bd08      	pop	{r3, pc}
    2e9c:	200150a4 	.word	0x200150a4
    2ea0:	200047c0 	.word	0x200047c0

00002ea4 <opcode_0xC0()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag  

    Calc_Flags_NEGATIVE_ZERO(temp);
    return;
}
void opcode_0xC0() {
    2ea4:	b508      	push	{r3, lr}
    register_pc++;
    2ea6:	4b12      	ldr	r3, [pc, #72]	; (2ef0 <opcode_0xC0()+0x4c>)
    return read_byte(register_pc, false);
    2ea8:	2100      	movs	r1, #0
    register_pc++;
    2eaa:	8818      	ldrh	r0, [r3, #0]
    2eac:	3001      	adds	r0, #1
    2eae:	b280      	uxth	r0, r0
    2eb0:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2eb2:	f7fd fab7 	bl	424 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    2eb6:	4b0f      	ldr	r3, [pc, #60]	; (2ef4 <opcode_0xC0()+0x50>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2eb8:	490f      	ldr	r1, [pc, #60]	; (2ef8 <opcode_0xC0()+0x54>)
    temp = register_y - local_data;
    2eba:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2ebc:	780b      	ldrb	r3, [r1, #0]
    2ebe:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    2ec0:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2ec4:	bf2c      	ite	cs
    2ec6:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2eca:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2ece:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2ed0:	0600      	lsls	r0, r0, #24
    2ed2:	d407      	bmi.n	2ee4 <opcode_0xC0()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2ed8:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2eda:	b92a      	cbnz	r2, 2ee8 <opcode_0xC0()+0x44>
    2edc:	f043 0302 	orr.w	r3, r3, #2
    return;
    2ee0:	700b      	strb	r3, [r1, #0]
    Calculate_CPY(Fetch_Immediate());
    return;
} // 0xC0 - CPY - Immediate
    2ee2:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2ee8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2eec:	700b      	strb	r3, [r1, #0]
    2eee:	bd08      	pop	{r3, pc}
    2ef0:	2001508c 	.word	0x2001508c
    2ef4:	200150a5 	.word	0x200150a5
    2ef8:	200047c0 	.word	0x200047c0

00002efc <opcode_0xC4()>:
void opcode_0xC4() {
    2efc:	b508      	push	{r3, lr}
    register_pc++;
    2efe:	4b15      	ldr	r3, [pc, #84]	; (2f54 <opcode_0xC4()+0x58>)
    return read_byte(register_pc, false);
    2f00:	2100      	movs	r1, #0
    register_pc++;
    2f02:	8818      	ldrh	r0, [r3, #0]
    2f04:	3001      	adds	r0, #1
    2f06:	b280      	uxth	r0, r0
    2f08:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    2f0a:	f7fd fa8b 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    2f0e:	4b12      	ldr	r3, [pc, #72]	; (2f58 <opcode_0xC4()+0x5c>)
    2f10:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2f12:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2f14:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    2f16:	f7fd fa85 	bl	424 <read_byte(unsigned short, bool)>
    temp = register_y - local_data;
    2f1a:	4b10      	ldr	r3, [pc, #64]	; (2f5c <opcode_0xC4()+0x60>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2f1c:	4910      	ldr	r1, [pc, #64]	; (2f60 <opcode_0xC4()+0x64>)
    temp = register_y - local_data;
    2f1e:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2f20:	780b      	ldrb	r3, [r1, #0]
    2f22:	4282      	cmp	r2, r0
    Calc_Flags_NEGATIVE_ZERO(temp);
    2f24:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2f28:	bf2c      	ite	cs
    2f2a:	f043 0301 	orrcs.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2f2e:	f003 03fe 	andcc.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2f32:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2f34:	0600      	lsls	r0, r0, #24
    2f36:	d407      	bmi.n	2f48 <opcode_0xC4()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2f3c:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2f3e:	b92a      	cbnz	r2, 2f4c <opcode_0xC4()+0x50>
    2f40:	f043 0302 	orr.w	r3, r3, #2
    return;
    2f44:	700b      	strb	r3, [r1, #0]
    Calculate_CPY(Fetch_ZeroPage());
    return;
} // 0xC4 - CPY - ZeroPage
    2f46:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2f4c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2f50:	700b      	strb	r3, [r1, #0]
    2f52:	bd08      	pop	{r3, pc}
    2f54:	2001508c 	.word	0x2001508c
    2f58:	2001508a 	.word	0x2001508a
    2f5c:	200150a5 	.word	0x200150a5
    2f60:	200047c0 	.word	0x200047c0

00002f64 <opcode_0xCC()>:
void opcode_0xCC() {
    2f64:	b508      	push	{r3, lr}
    Calculate_CPY(Fetch_Absolute());
    2f66:	f7fd fdcb 	bl	b00 <Fetch_Absolute()>
    temp = register_y - local_data;
    2f6a:	4b0e      	ldr	r3, [pc, #56]	; (2fa4 <opcode_0xCC()+0x40>)
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2f6c:	490e      	ldr	r1, [pc, #56]	; (2fa8 <opcode_0xCC()+0x44>)
    temp = register_y - local_data;
    2f6e:	781a      	ldrb	r2, [r3, #0]
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2f70:	780b      	ldrb	r3, [r1, #0]
    2f72:	4290      	cmp	r0, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    2f74:	eba2 0000 	sub.w	r0, r2, r0
    if (register_y >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    2f78:	bf94      	ite	ls
    2f7a:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    2f7e:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    2f82:	b2c2      	uxtb	r2, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2f84:	0600      	lsls	r0, r0, #24
    2f86:	d407      	bmi.n	2f98 <opcode_0xCC()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2f8c:	700b      	strb	r3, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2f8e:	b92a      	cbnz	r2, 2f9c <opcode_0xCC()+0x38>
    2f90:	f043 0302 	orr.w	r3, r3, #2
    return;
    2f94:	700b      	strb	r3, [r1, #0]
    return;
} // 0xCC - CPY - Absolute
    2f96:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    2f9c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2fa0:	700b      	strb	r3, [r1, #0]
    2fa2:	bd08      	pop	{r3, pc}
    2fa4:	200150a5 	.word	0x200150a5
    2fa8:	200047c0 	.word	0x200047c0

00002fac <opcode_0x06()>:
    register_pc++;
    2fac:	4b18      	ldr	r3, [pc, #96]	; (3010 <opcode_0x06()+0x64>)
    return read_byte(register_pc, false);
    2fae:	2100      	movs	r1, #0
    register_pc++;
    2fb0:	8818      	ldrh	r0, [r3, #0]
    2fb2:	3001      	adds	r0, #1
    2fb4:	b280      	uxth	r0, r0
}

// -------------------------------------------------
// ASL - Read-modify-write Operations
// -------------------------------------------------
void opcode_0x06() {
    2fb6:	b510      	push	{r4, lr}
    2fb8:	b082      	sub	sp, #8
    2fba:	8018      	strh	r0, [r3, #0]
    effective_address = Fetch_Immediate();
    2fbc:	4c15      	ldr	r4, [pc, #84]	; (3014 <opcode_0x06()+0x68>)
    return read_byte(register_pc, false);
    2fbe:	f7fd fa31 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    2fc2:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    2fc4:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    2fc6:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    2fc8:	f7fd fa2c 	bl	424 <read_byte(unsigned short, bool)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    2fcc:	4a12      	ldr	r2, [pc, #72]	; (3018 <opcode_0x06()+0x6c>)
    2fce:	0601      	lsls	r1, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    2fd0:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    2fd4:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    2fd6:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    2fd8:	bf4c      	ite	mi
    2fda:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    2fde:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    2fe2:	0600      	lsls	r0, r0, #24
    2fe4:	bf4c      	ite	mi
    2fe6:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    2fea:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    2fee:	b961      	cbnz	r1, 300a <opcode_0x06()+0x5e>
    2ff0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    2ff4:	8820      	ldrh	r0, [r4, #0]
    2ff6:	9101      	str	r1, [sp, #4]
    2ff8:	7013      	strb	r3, [r2, #0]
    2ffa:	f7fd fbcf 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    2ffe:	9901      	ldr	r1, [sp, #4]
    3000:	8820      	ldrh	r0, [r4, #0]
    3002:	f7fd fbcb 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0x06 - ASL  - Arithmetic Shift Left - ZeroPage
    3006:	b002      	add	sp, #8
    3008:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    300a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    300e:	e7f1      	b.n	2ff4 <opcode_0x06()+0x48>
    3010:	2001508c 	.word	0x2001508c
    3014:	2001508a 	.word	0x2001508a
    3018:	200047c0 	.word	0x200047c0

0000301c <opcode_0x16()>:
void opcode_0x16() {
    301c:	b510      	push	{r4, lr}
    301e:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_ZeroPage_X()));
    3020:	f7fd fd2e 	bl	a80 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3024:	4a11      	ldr	r2, [pc, #68]	; (306c <opcode_0x16()+0x50>)
    3026:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3028:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    302c:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    302e:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3030:	bf4c      	ite	mi
    3032:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3036:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    303a:	0600      	lsls	r0, r0, #24
    303c:	bf4c      	ite	mi
    303e:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3042:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3046:	b969      	cbnz	r1, 3064 <opcode_0x16()+0x48>
    3048:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    304c:	4c08      	ldr	r4, [pc, #32]	; (3070 <opcode_0x16()+0x54>)
    304e:	9101      	str	r1, [sp, #4]
    3050:	8820      	ldrh	r0, [r4, #0]
    3052:	7013      	strb	r3, [r2, #0]
    3054:	f7fd fba2 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3058:	9901      	ldr	r1, [sp, #4]
    305a:	8820      	ldrh	r0, [r4, #0]
    305c:	f7fd fb9e 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x16 - ASL  - Arithmetic Shift Left - ZeroPage , X
    3060:	b002      	add	sp, #8
    3062:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3064:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3068:	e7f0      	b.n	304c <opcode_0x16()+0x30>
    306a:	bf00      	nop
    306c:	200047c0 	.word	0x200047c0
    3070:	2001508a 	.word	0x2001508a

00003074 <opcode_0x0E()>:
void opcode_0x0E() {
    3074:	b510      	push	{r4, lr}
    3076:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute()));
    3078:	f7fd fd42 	bl	b00 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    307c:	4a11      	ldr	r2, [pc, #68]	; (30c4 <opcode_0x0E()+0x50>)
    307e:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    3080:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3084:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    3086:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    3088:	bf4c      	ite	mi
    308a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    308e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3092:	0600      	lsls	r0, r0, #24
    3094:	bf4c      	ite	mi
    3096:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    309a:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    309e:	b969      	cbnz	r1, 30bc <opcode_0x0E()+0x48>
    30a0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    30a4:	4c08      	ldr	r4, [pc, #32]	; (30c8 <opcode_0x0E()+0x54>)
    30a6:	9101      	str	r1, [sp, #4]
    30a8:	8820      	ldrh	r0, [r4, #0]
    30aa:	7013      	strb	r3, [r2, #0]
    30ac:	f7fd fb76 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    30b0:	9901      	ldr	r1, [sp, #4]
    30b2:	8820      	ldrh	r0, [r4, #0]
    30b4:	f7fd fb72 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x0E - ASL  - Arithmetic Shift Left - Absolute
    30b8:	b002      	add	sp, #8
    30ba:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    30bc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    30c0:	e7f0      	b.n	30a4 <opcode_0x0E()+0x30>
    30c2:	bf00      	nop
    30c4:	200047c0 	.word	0x200047c0
    30c8:	2001508a 	.word	0x2001508a

000030cc <opcode_0x1E()>:
void opcode_0x1E() {
    30cc:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    30ce:	2000      	movs	r0, #0
void opcode_0x1E() {
    30d0:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_ASL(Fetch_Absolute_X(0)));
    30d2:	f7fd fd33 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    30d6:	4a11      	ldr	r2, [pc, #68]	; (311c <opcode_0x1E()+0x50>)
    30d8:	0604      	lsls	r4, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    30da:	ea4f 0040 	mov.w	r0, r0, lsl #1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    30de:	7813      	ldrb	r3, [r2, #0]
    local_data = ((local_data << 1) & 0xFE);
    30e0:	b2c1      	uxtb	r1, r0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    30e2:	bf4c      	ite	mi
    30e4:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    30e8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    30ec:	0600      	lsls	r0, r0, #24
    30ee:	bf4c      	ite	mi
    30f0:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    30f4:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    30f8:	b969      	cbnz	r1, 3116 <opcode_0x1E()+0x4a>
    30fa:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    30fe:	4c08      	ldr	r4, [pc, #32]	; (3120 <opcode_0x1E()+0x54>)
    3100:	9101      	str	r1, [sp, #4]
    3102:	8820      	ldrh	r0, [r4, #0]
    3104:	7013      	strb	r3, [r2, #0]
    3106:	f7fd fb49 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    310a:	9901      	ldr	r1, [sp, #4]
    310c:	8820      	ldrh	r0, [r4, #0]
    310e:	f7fd fb45 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x1E - ASL  - Arithmetic Shift Left - Absolute , X
    3112:	b002      	add	sp, #8
    3114:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3116:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    311a:	e7f0      	b.n	30fe <opcode_0x1E()+0x32>
    311c:	200047c0 	.word	0x200047c0
    3120:	2001508a 	.word	0x2001508a

00003124 <opcode_0xE6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

void opcode_0xE6() {
    3124:	b538      	push	{r3, r4, r5, lr}
    register_pc++;
    3126:	4b15      	ldr	r3, [pc, #84]	; (317c <opcode_0xE6()+0x58>)
    return read_byte(register_pc, false);
    3128:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    312a:	4d15      	ldr	r5, [pc, #84]	; (3180 <opcode_0xE6()+0x5c>)
    register_pc++;
    312c:	8818      	ldrh	r0, [r3, #0]
    312e:	3001      	adds	r0, #1
    3130:	b280      	uxth	r0, r0
    3132:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    3134:	f7fd f976 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    3138:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    313a:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    313c:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    313e:	f7fd f971 	bl	424 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    3142:	3001      	adds	r0, #1
    global_temp = local_data;
    3144:	4b0f      	ldr	r3, [pc, #60]	; (3184 <opcode_0xE6()+0x60>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3146:	4a10      	ldr	r2, [pc, #64]	; (3188 <opcode_0xE6()+0x64>)
    local_data = local_data + 1;
    3148:	b2c4      	uxtb	r4, r0
    314a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    314c:	701c      	strb	r4, [r3, #0]
    314e:	7813      	ldrb	r3, [r2, #0]
    3150:	d40f      	bmi.n	3172 <opcode_0xE6()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3156:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3158:	b96c      	cbnz	r4, 3176 <opcode_0xE6()+0x52>
    315a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    315e:	8828      	ldrh	r0, [r5, #0]
    3160:	4621      	mov	r1, r4
    3162:	7013      	strb	r3, [r2, #0]
    3164:	f7fd fb1a 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3168:	4621      	mov	r1, r4
    316a:	8828      	ldrh	r0, [r5, #0]
    316c:	f7fd fb16 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0xE6 - INC - ZeroPage
    3170:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3176:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    317a:	e7f0      	b.n	315e <opcode_0xE6()+0x3a>
    317c:	2001508c 	.word	0x2001508c
    3180:	2001508a 	.word	0x2001508a
    3184:	200150a0 	.word	0x200150a0
    3188:	200047c0 	.word	0x200047c0

0000318c <opcode_0xF6()>:
void opcode_0xF6() {
    318c:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    318e:	f7fd fc77 	bl	a80 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    3192:	3001      	adds	r0, #1
    global_temp = local_data;
    3194:	4b0e      	ldr	r3, [pc, #56]	; (31d0 <opcode_0xF6()+0x44>)
    local_data = local_data + 1;
    3196:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3198:	4a0e      	ldr	r2, [pc, #56]	; (31d4 <opcode_0xF6()+0x48>)
    319a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    319c:	701c      	strb	r4, [r3, #0]
    319e:	7813      	ldrb	r3, [r2, #0]
    31a0:	d410      	bmi.n	31c4 <opcode_0xF6()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    31a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    31a6:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    31a8:	b974      	cbnz	r4, 31c8 <opcode_0xF6()+0x3c>
    31aa:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    31ae:	4d0a      	ldr	r5, [pc, #40]	; (31d8 <opcode_0xF6()+0x4c>)
    31b0:	4621      	mov	r1, r4
    31b2:	7013      	strb	r3, [r2, #0]
    31b4:	8828      	ldrh	r0, [r5, #0]
    31b6:	f7fd faf1 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    31ba:	4621      	mov	r1, r4
    31bc:	8828      	ldrh	r0, [r5, #0]
    31be:	f7fd faed 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0xF6 - INC - ZeroPage , X
    31c2:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    31c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    31c8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    31cc:	e7ef      	b.n	31ae <opcode_0xF6()+0x22>
    31ce:	bf00      	nop
    31d0:	200150a0 	.word	0x200150a0
    31d4:	200047c0 	.word	0x200047c0
    31d8:	2001508a 	.word	0x2001508a

000031dc <opcode_0xEE()>:
void opcode_0xEE() {
    31dc:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    31de:	f7fd fc8f 	bl	b00 <Fetch_Absolute()>
    local_data = local_data + 1;
    31e2:	3001      	adds	r0, #1
    global_temp = local_data;
    31e4:	4b0e      	ldr	r3, [pc, #56]	; (3220 <opcode_0xEE()+0x44>)
    local_data = local_data + 1;
    31e6:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    31e8:	4a0e      	ldr	r2, [pc, #56]	; (3224 <opcode_0xEE()+0x48>)
    31ea:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    31ec:	701c      	strb	r4, [r3, #0]
    31ee:	7813      	ldrb	r3, [r2, #0]
    31f0:	d410      	bmi.n	3214 <opcode_0xEE()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    31f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    31f6:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    31f8:	b974      	cbnz	r4, 3218 <opcode_0xEE()+0x3c>
    31fa:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    31fe:	4d0a      	ldr	r5, [pc, #40]	; (3228 <opcode_0xEE()+0x4c>)
    3200:	4621      	mov	r1, r4
    3202:	7013      	strb	r3, [r2, #0]
    3204:	8828      	ldrh	r0, [r5, #0]
    3206:	f7fd fac9 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    320a:	4621      	mov	r1, r4
    320c:	8828      	ldrh	r0, [r5, #0]
    320e:	f7fd fac5 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0xEE - INC - Absolute
    3212:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3218:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    321c:	e7ef      	b.n	31fe <opcode_0xEE()+0x22>
    321e:	bf00      	nop
    3220:	200150a0 	.word	0x200150a0
    3224:	200047c0 	.word	0x200047c0
    3228:	2001508a 	.word	0x2001508a

0000322c <opcode_0xC6()>:
    global_temp = local_data;
    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}

void opcode_0xC6() {
    322c:	b538      	push	{r3, r4, r5, lr}
    register_pc++;
    322e:	4b15      	ldr	r3, [pc, #84]	; (3284 <opcode_0xC6()+0x58>)
    return read_byte(register_pc, false);
    3230:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    3232:	4d15      	ldr	r5, [pc, #84]	; (3288 <opcode_0xC6()+0x5c>)
    register_pc++;
    3234:	8818      	ldrh	r0, [r3, #0]
    3236:	3001      	adds	r0, #1
    3238:	b280      	uxth	r0, r0
    323a:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    323c:	f7fd f8f2 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    3240:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    3242:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    3244:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    3246:	f7fd f8ed 	bl	424 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    324a:	3801      	subs	r0, #1
    global_temp = local_data;
    324c:	4b0f      	ldr	r3, [pc, #60]	; (328c <opcode_0xC6()+0x60>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    324e:	4a10      	ldr	r2, [pc, #64]	; (3290 <opcode_0xC6()+0x64>)
    local_data = local_data - 1;
    3250:	b2c4      	uxtb	r4, r0
    3252:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    3254:	701c      	strb	r4, [r3, #0]
    3256:	7813      	ldrb	r3, [r2, #0]
    3258:	d40f      	bmi.n	327a <opcode_0xC6()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    325a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    325e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3260:	b96c      	cbnz	r4, 327e <opcode_0xC6()+0x52>
    3262:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3266:	8828      	ldrh	r0, [r5, #0]
    3268:	4621      	mov	r1, r4
    326a:	7013      	strb	r3, [r2, #0]
    326c:	f7fd fa96 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3270:	4621      	mov	r1, r4
    3272:	8828      	ldrh	r0, [r5, #0]
    3274:	f7fd fa92 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0xC6 - DEC - ZeroPage
    3278:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    327a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    327e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3282:	e7f0      	b.n	3266 <opcode_0xC6()+0x3a>
    3284:	2001508c 	.word	0x2001508c
    3288:	2001508a 	.word	0x2001508a
    328c:	200150a0 	.word	0x200150a0
    3290:	200047c0 	.word	0x200047c0

00003294 <opcode_0xD6()>:
void opcode_0xD6() {
    3294:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    3296:	f7fd fbf3 	bl	a80 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    329a:	3801      	subs	r0, #1
    global_temp = local_data;
    329c:	4b0e      	ldr	r3, [pc, #56]	; (32d8 <opcode_0xD6()+0x44>)
    local_data = local_data - 1;
    329e:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    32a0:	4a0e      	ldr	r2, [pc, #56]	; (32dc <opcode_0xD6()+0x48>)
    32a2:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    32a4:	701c      	strb	r4, [r3, #0]
    32a6:	7813      	ldrb	r3, [r2, #0]
    32a8:	d410      	bmi.n	32cc <opcode_0xD6()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    32aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    32ae:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    32b0:	b974      	cbnz	r4, 32d0 <opcode_0xD6()+0x3c>
    32b2:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    32b6:	4d0a      	ldr	r5, [pc, #40]	; (32e0 <opcode_0xD6()+0x4c>)
    32b8:	4621      	mov	r1, r4
    32ba:	7013      	strb	r3, [r2, #0]
    32bc:	8828      	ldrh	r0, [r5, #0]
    32be:	f7fd fa6d 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    32c2:	4621      	mov	r1, r4
    32c4:	8828      	ldrh	r0, [r5, #0]
    32c6:	f7fd fa69 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0xD6 - DEC - ZeroPage , X
    32ca:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    32cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    32d0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    32d4:	e7ef      	b.n	32b6 <opcode_0xD6()+0x22>
    32d6:	bf00      	nop
    32d8:	200150a0 	.word	0x200150a0
    32dc:	200047c0 	.word	0x200047c0
    32e0:	2001508a 	.word	0x2001508a

000032e4 <opcode_0xCE()>:
void opcode_0xCE() {
    32e4:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    32e6:	f7fd fc0b 	bl	b00 <Fetch_Absolute()>
    local_data = local_data - 1;
    32ea:	3801      	subs	r0, #1
    global_temp = local_data;
    32ec:	4b0e      	ldr	r3, [pc, #56]	; (3328 <opcode_0xCE()+0x44>)
    local_data = local_data - 1;
    32ee:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    32f0:	4a0e      	ldr	r2, [pc, #56]	; (332c <opcode_0xCE()+0x48>)
    32f2:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    32f4:	701c      	strb	r4, [r3, #0]
    32f6:	7813      	ldrb	r3, [r2, #0]
    32f8:	d410      	bmi.n	331c <opcode_0xCE()+0x38>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    32fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    32fe:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3300:	b974      	cbnz	r4, 3320 <opcode_0xCE()+0x3c>
    3302:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3306:	4d0a      	ldr	r5, [pc, #40]	; (3330 <opcode_0xCE()+0x4c>)
    3308:	4621      	mov	r1, r4
    330a:	7013      	strb	r3, [r2, #0]
    330c:	8828      	ldrh	r0, [r5, #0]
    330e:	f7fd fa45 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3312:	4621      	mov	r1, r4
    3314:	8828      	ldrh	r0, [r5, #0]
    3316:	f7fd fa41 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0xCE - DEC - Absolute
    331a:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    331c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3320:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3324:	e7ef      	b.n	3306 <opcode_0xCE()+0x22>
    3326:	bf00      	nop
    3328:	200150a0 	.word	0x200150a0
    332c:	200047c0 	.word	0x200047c0
    3330:	2001508a 	.word	0x2001508a

00003334 <opcode_0xDE()>:
void opcode_0xDE() {
    3334:	b538      	push	{r3, r4, r5, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    3336:	2000      	movs	r0, #0
    3338:	f7fd fc00 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    333c:	3801      	subs	r0, #1
    global_temp = local_data;
    333e:	4b0e      	ldr	r3, [pc, #56]	; (3378 <opcode_0xDE()+0x44>)
    local_data = local_data - 1;
    3340:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3342:	4a0e      	ldr	r2, [pc, #56]	; (337c <opcode_0xDE()+0x48>)
    3344:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    3346:	701c      	strb	r4, [r3, #0]
    3348:	7813      	ldrb	r3, [r2, #0]
    334a:	d410      	bmi.n	336e <opcode_0xDE()+0x3a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    334c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3350:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3352:	b974      	cbnz	r4, 3372 <opcode_0xDE()+0x3e>
    3354:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3358:	4d09      	ldr	r5, [pc, #36]	; (3380 <opcode_0xDE()+0x4c>)
    335a:	4621      	mov	r1, r4
    335c:	7013      	strb	r3, [r2, #0]
    335e:	8828      	ldrh	r0, [r5, #0]
    3360:	f7fd fa1c 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3364:	4621      	mov	r1, r4
    3366:	8828      	ldrh	r0, [r5, #0]
    3368:	f7fd fa18 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0xDE - DEC - Absolute , X
    336c:	bd38      	pop	{r3, r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3372:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3376:	e7ef      	b.n	3358 <opcode_0xDE()+0x24>
    3378:	200150a0 	.word	0x200150a0
    337c:	200047c0 	.word	0x200047c0
    3380:	2001508a 	.word	0x2001508a

00003384 <opcode_0x46()>:
    register_pc++;
    3384:	4b16      	ldr	r3, [pc, #88]	; (33e0 <opcode_0x46()+0x5c>)
    return read_byte(register_pc, false);
    3386:	2100      	movs	r1, #0
    register_pc++;
    3388:	8818      	ldrh	r0, [r3, #0]
    338a:	3001      	adds	r0, #1
    338c:	b280      	uxth	r0, r0
    local_data = (0x7F & (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
void opcode_0x46() {
    338e:	b510      	push	{r4, lr}
    3390:	b082      	sub	sp, #8
    3392:	8018      	strh	r0, [r3, #0]
    effective_address = Fetch_Immediate();
    3394:	4c13      	ldr	r4, [pc, #76]	; (33e4 <opcode_0x46()+0x60>)
    return read_byte(register_pc, false);
    3396:	f7fd f845 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    339a:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    339c:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    339e:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    33a0:	f7fd f840 	bl	424 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    33a4:	4a10      	ldr	r2, [pc, #64]	; (33e8 <opcode_0x46()+0x64>)
    33a6:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    33a8:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    33ac:	7813      	ldrb	r3, [r2, #0]
    33ae:	bf4c      	ite	mi
    33b0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    33b4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    33b8:	b971      	cbnz	r1, 33d8 <opcode_0x46()+0x54>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    33ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    33be:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    33c2:	8820      	ldrh	r0, [r4, #0]
    33c4:	9101      	str	r1, [sp, #4]
    33c6:	7013      	strb	r3, [r2, #0]
    33c8:	f7fd f9e8 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    33cc:	9901      	ldr	r1, [sp, #4]
    33ce:	8820      	ldrh	r0, [r4, #0]
    33d0:	f7fd f9e4 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0x46 - LSR - Logical Shift Right - ZeroPage
    33d4:	b002      	add	sp, #8
    33d6:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    33d8:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    33dc:	e7f1      	b.n	33c2 <opcode_0x46()+0x3e>
    33de:	bf00      	nop
    33e0:	2001508c 	.word	0x2001508c
    33e4:	2001508a 	.word	0x2001508a
    33e8:	200047c0 	.word	0x200047c0

000033ec <opcode_0x56()>:
void opcode_0x56() {
    33ec:	b510      	push	{r4, lr}
    33ee:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_ZeroPage_X()));
    33f0:	f7fd fb46 	bl	a80 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    33f4:	4a0e      	ldr	r2, [pc, #56]	; (3430 <opcode_0x56()+0x44>)
    33f6:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    33f8:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    33fc:	7813      	ldrb	r3, [r2, #0]
    33fe:	bf4c      	ite	mi
    3400:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3404:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3408:	b979      	cbnz	r1, 342a <opcode_0x56()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    340a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    340e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3412:	4c08      	ldr	r4, [pc, #32]	; (3434 <opcode_0x56()+0x48>)
    3414:	9101      	str	r1, [sp, #4]
    3416:	8820      	ldrh	r0, [r4, #0]
    3418:	7013      	strb	r3, [r2, #0]
    341a:	f7fd f9bf 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    341e:	9901      	ldr	r1, [sp, #4]
    3420:	8820      	ldrh	r0, [r4, #0]
    3422:	f7fd f9bb 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x56 - LSR - Logical Shift Right - ZeroPage , X
    3426:	b002      	add	sp, #8
    3428:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    342a:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    342e:	e7f0      	b.n	3412 <opcode_0x56()+0x26>
    3430:	200047c0 	.word	0x200047c0
    3434:	2001508a 	.word	0x2001508a

00003438 <opcode_0x4E()>:
void opcode_0x4E() {
    3438:	b510      	push	{r4, lr}
    343a:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute()));
    343c:	f7fd fb60 	bl	b00 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    3440:	4a0e      	ldr	r2, [pc, #56]	; (347c <opcode_0x4E()+0x44>)
    3442:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    3444:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    3448:	7813      	ldrb	r3, [r2, #0]
    344a:	bf4c      	ite	mi
    344c:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3450:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3454:	b979      	cbnz	r1, 3476 <opcode_0x4E()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    345a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    345e:	4c08      	ldr	r4, [pc, #32]	; (3480 <opcode_0x4E()+0x48>)
    3460:	9101      	str	r1, [sp, #4]
    3462:	8820      	ldrh	r0, [r4, #0]
    3464:	7013      	strb	r3, [r2, #0]
    3466:	f7fd f999 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    346a:	9901      	ldr	r1, [sp, #4]
    346c:	8820      	ldrh	r0, [r4, #0]
    346e:	f7fd f995 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x4E - LSR - Logical Shift Right - Absolute
    3472:	b002      	add	sp, #8
    3474:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3476:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    347a:	e7f0      	b.n	345e <opcode_0x4E()+0x26>
    347c:	200047c0 	.word	0x200047c0
    3480:	2001508a 	.word	0x2001508a

00003484 <opcode_0x5E()>:
void opcode_0x5E() {
    3484:	b510      	push	{r4, lr}
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    3486:	2000      	movs	r0, #0
void opcode_0x5E() {
    3488:	b082      	sub	sp, #8
    Double_WriteBack(Calculate_LSR(Fetch_Absolute_X(0)));
    348a:	f7fd fb57 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    348e:	4a0f      	ldr	r2, [pc, #60]	; (34cc <opcode_0x5E()+0x48>)
    3490:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    3492:	f3c0 0147 	ubfx	r1, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    3496:	7813      	ldrb	r3, [r2, #0]
    3498:	bf4c      	ite	mi
    349a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    349e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    34a2:	b979      	cbnz	r1, 34c4 <opcode_0x5E()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    34a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    34a8:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    34ac:	4c08      	ldr	r4, [pc, #32]	; (34d0 <opcode_0x5E()+0x4c>)
    34ae:	9101      	str	r1, [sp, #4]
    34b0:	8820      	ldrh	r0, [r4, #0]
    34b2:	7013      	strb	r3, [r2, #0]
    34b4:	f7fd f972 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    34b8:	9901      	ldr	r1, [sp, #4]
    34ba:	8820      	ldrh	r0, [r4, #0]
    34bc:	f7fd f96e 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x5E - LSR - Logical Shift Right - Absolute , X
    34c0:	b002      	add	sp, #8
    34c2:	bd10      	pop	{r4, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    34c4:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    34c8:	e7f0      	b.n	34ac <opcode_0x5E()+0x28>
    34ca:	bf00      	nop
    34cc:	200047c0 	.word	0x200047c0
    34d0:	2001508a 	.word	0x2001508a

000034d4 <opcode_0x66()>:
    register_pc++;
    34d4:	4b1a      	ldr	r3, [pc, #104]	; (3540 <opcode_0x66()+0x6c>)
    return read_byte(register_pc, false);
    34d6:	2100      	movs	r1, #0
    register_pc++;
    34d8:	8818      	ldrh	r0, [r3, #0]
    34da:	3001      	adds	r0, #1
    34dc:	b280      	uxth	r0, r0
    local_data = (old_carry_flag | (local_data >> 1));

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
void opcode_0x66() {
    34de:	b530      	push	{r4, r5, lr}
    34e0:	b083      	sub	sp, #12
    34e2:	8018      	strh	r0, [r3, #0]
    effective_address = Fetch_Immediate();
    34e4:	4c17      	ldr	r4, [pc, #92]	; (3544 <opcode_0x66()+0x70>)
    return read_byte(register_pc, false);
    34e6:	f7fc ff9d 	bl	424 <read_byte(unsigned short, bool)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    34ea:	4d17      	ldr	r5, [pc, #92]	; (3548 <opcode_0x66()+0x74>)
    effective_address = Fetch_Immediate();
    34ec:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    34ee:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    34f0:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    34f2:	f7fc ff97 	bl	424 <read_byte(unsigned short, bool)>
    34f6:	782b      	ldrb	r3, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    34f8:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    34fa:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    34fe:	bf4c      	ite	mi
    3500:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3504:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3508:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    350a:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    350e:	0602      	lsls	r2, r0, #24
    3510:	b2c1      	uxtb	r1, r0
    3512:	d40f      	bmi.n	3534 <opcode_0x66()+0x60>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3518:	b971      	cbnz	r1, 3538 <opcode_0x66()+0x64>
    351a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    351e:	8820      	ldrh	r0, [r4, #0]
    3520:	9101      	str	r1, [sp, #4]
    3522:	702b      	strb	r3, [r5, #0]
    3524:	f7fd f93a 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3528:	9901      	ldr	r1, [sp, #4]
    352a:	8820      	ldrh	r0, [r4, #0]
    352c:	f7fd f936 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0x66 - ROR - Rotate Right - ZeroPage
    3530:	b003      	add	sp, #12
    3532:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3538:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    353c:	e7ef      	b.n	351e <opcode_0x66()+0x4a>
    353e:	bf00      	nop
    3540:	2001508c 	.word	0x2001508c
    3544:	2001508a 	.word	0x2001508a
    3548:	200047c0 	.word	0x200047c0

0000354c <opcode_0x76()>:
void opcode_0x76() {
    354c:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    354e:	4d14      	ldr	r5, [pc, #80]	; (35a0 <opcode_0x76()+0x54>)
void opcode_0x76() {
    3550:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_ZeroPage_X()));
    3552:	f7fd fa95 	bl	a80 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    3556:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3558:	782b      	ldrb	r3, [r5, #0]
    355a:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    355e:	bf4c      	ite	mi
    3560:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3564:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3568:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    356a:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    356e:	0602      	lsls	r2, r0, #24
    3570:	b2c1      	uxtb	r1, r0
    3572:	d410      	bmi.n	3596 <opcode_0x76()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    3574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3578:	b979      	cbnz	r1, 359a <opcode_0x76()+0x4e>
    357a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    357e:	4c09      	ldr	r4, [pc, #36]	; (35a4 <opcode_0x76()+0x58>)
    3580:	9101      	str	r1, [sp, #4]
    3582:	8820      	ldrh	r0, [r4, #0]
    3584:	702b      	strb	r3, [r5, #0]
    3586:	f7fd f909 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    358a:	9901      	ldr	r1, [sp, #4]
    358c:	8820      	ldrh	r0, [r4, #0]
    358e:	f7fd f905 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x76 - ROR - Rotate Right - ZeroPage , X
    3592:	b003      	add	sp, #12
    3594:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    359a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    359e:	e7ee      	b.n	357e <opcode_0x76()+0x32>
    35a0:	200047c0 	.word	0x200047c0
    35a4:	2001508a 	.word	0x2001508a

000035a8 <opcode_0x6E()>:
void opcode_0x6E() {
    35a8:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    35aa:	4d14      	ldr	r5, [pc, #80]	; (35fc <opcode_0x6E()+0x54>)
void opcode_0x6E() {
    35ac:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_Absolute()));
    35ae:	f7fd faa7 	bl	b00 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    35b2:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    35b4:	782b      	ldrb	r3, [r5, #0]
    35b6:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    35ba:	bf4c      	ite	mi
    35bc:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    35c0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    35c4:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    35c6:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    35ca:	0602      	lsls	r2, r0, #24
    35cc:	b2c1      	uxtb	r1, r0
    35ce:	d410      	bmi.n	35f2 <opcode_0x6E()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    35d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    35d4:	b979      	cbnz	r1, 35f6 <opcode_0x6E()+0x4e>
    35d6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    35da:	4c09      	ldr	r4, [pc, #36]	; (3600 <opcode_0x6E()+0x58>)
    35dc:	9101      	str	r1, [sp, #4]
    35de:	8820      	ldrh	r0, [r4, #0]
    35e0:	702b      	strb	r3, [r5, #0]
    35e2:	f7fd f8db 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    35e6:	9901      	ldr	r1, [sp, #4]
    35e8:	8820      	ldrh	r0, [r4, #0]
    35ea:	f7fd f8d7 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x6E - ROR - Rotate Right - Absolute
    35ee:	b003      	add	sp, #12
    35f0:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    35f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    35f6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    35fa:	e7ee      	b.n	35da <opcode_0x6E()+0x32>
    35fc:	200047c0 	.word	0x200047c0
    3600:	2001508a 	.word	0x2001508a

00003604 <opcode_0x7E()>:
void opcode_0x7E() {
    3604:	b530      	push	{r4, r5, lr}
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3606:	4d15      	ldr	r5, [pc, #84]	; (365c <opcode_0x7E()+0x58>)
void opcode_0x7E() {
    3608:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROR(Fetch_Absolute_X(0)));
    360a:	2000      	movs	r0, #0
    360c:	f7fd fa96 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3610:	782b      	ldrb	r3, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    3612:	07c1      	lsls	r1, r0, #31
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3614:	ea4f 12c3 	mov.w	r2, r3, lsl #7
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    3618:	bf4c      	ite	mi
    361a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    361e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    old_carry_flag = register_flags << 7; // Shift the old carry flag to bit[8] to be rotated in
    3622:	b2d2      	uxtb	r2, r2
    local_data = (old_carry_flag | (local_data >> 1));
    3624:	ea42 0050 	orr.w	r0, r2, r0, lsr #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3628:	0602      	lsls	r2, r0, #24
    362a:	b2c1      	uxtb	r1, r0
    362c:	d410      	bmi.n	3650 <opcode_0x7E()+0x4c>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    362e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3632:	b979      	cbnz	r1, 3654 <opcode_0x7E()+0x50>
    3634:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3638:	4c09      	ldr	r4, [pc, #36]	; (3660 <opcode_0x7E()+0x5c>)
    363a:	9101      	str	r1, [sp, #4]
    363c:	8820      	ldrh	r0, [r4, #0]
    363e:	702b      	strb	r3, [r5, #0]
    3640:	f7fd f8ac 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3644:	9901      	ldr	r1, [sp, #4]
    3646:	8820      	ldrh	r0, [r4, #0]
    3648:	f7fd f8a8 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x7E - ROR - Rotate Right - Absolute , X
    364c:	b003      	add	sp, #12
    364e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3654:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3658:	e7ee      	b.n	3638 <opcode_0x7E()+0x34>
    365a:	bf00      	nop
    365c:	200047c0 	.word	0x200047c0
    3660:	2001508a 	.word	0x2001508a

00003664 <opcode_0x26()>:
    register_pc++;
    3664:	4b19      	ldr	r3, [pc, #100]	; (36cc <opcode_0x26()+0x68>)
    return read_byte(register_pc, false);
    3666:	2100      	movs	r1, #0
    register_pc++;
    3668:	8818      	ldrh	r0, [r3, #0]
    366a:	3001      	adds	r0, #1
    366c:	b280      	uxth	r0, r0
    local_data = (local_data << 1) | old_carry_flag;

    Calc_Flags_NEGATIVE_ZERO(local_data);
    return local_data;
}
void opcode_0x26() {
    366e:	b530      	push	{r4, r5, lr}
    3670:	b083      	sub	sp, #12
    3672:	8018      	strh	r0, [r3, #0]
    effective_address = Fetch_Immediate();
    3674:	4c16      	ldr	r4, [pc, #88]	; (36d0 <opcode_0x26()+0x6c>)
    return read_byte(register_pc, false);
    3676:	f7fc fed5 	bl	424 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    367a:	4d16      	ldr	r5, [pc, #88]	; (36d4 <opcode_0x26()+0x70>)
    effective_address = Fetch_Immediate();
    367c:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    367e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    3680:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    3682:	f7fc fecf 	bl	424 <read_byte(unsigned short, bool)>
    3686:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    3688:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    368a:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    368e:	bf4c      	ite	mi
    3690:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    3694:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    3698:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    369c:	0602      	lsls	r2, r0, #24
    369e:	b2c1      	uxtb	r1, r0
    36a0:	d40f      	bmi.n	36c2 <opcode_0x26()+0x5e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    36a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    36a6:	b971      	cbnz	r1, 36c6 <opcode_0x26()+0x62>
    36a8:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    36ac:	8820      	ldrh	r0, [r4, #0]
    36ae:	9101      	str	r1, [sp, #4]
    36b0:	702b      	strb	r3, [r5, #0]
    36b2:	f7fd f873 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    36b6:	9901      	ldr	r1, [sp, #4]
    36b8:	8820      	ldrh	r0, [r4, #0]
    36ba:	f7fd f86f 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0x26 - ROL - Rotate Left - ZeroPage
    36be:	b003      	add	sp, #12
    36c0:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    36c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    36c6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    36ca:	e7ef      	b.n	36ac <opcode_0x26()+0x48>
    36cc:	2001508c 	.word	0x2001508c
    36d0:	2001508a 	.word	0x2001508a
    36d4:	200047c0 	.word	0x200047c0

000036d8 <opcode_0x36()>:
void opcode_0x36() {
    36d8:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    36da:	4d14      	ldr	r5, [pc, #80]	; (372c <opcode_0x36()+0x54>)
void opcode_0x36() {
    36dc:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_ZeroPage_X()));
    36de:	f7fd f9cf 	bl	a80 <Fetch_ZeroPage_X()>
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    36e2:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    36e4:	782b      	ldrb	r3, [r5, #0]
    36e6:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    36ea:	bf4c      	ite	mi
    36ec:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    36f0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    36f4:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    36f8:	0602      	lsls	r2, r0, #24
    36fa:	b2c1      	uxtb	r1, r0
    36fc:	d410      	bmi.n	3720 <opcode_0x36()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    36fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    3702:	b979      	cbnz	r1, 3724 <opcode_0x36()+0x4c>
    3704:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3708:	4c09      	ldr	r4, [pc, #36]	; (3730 <opcode_0x36()+0x58>)
    370a:	9101      	str	r1, [sp, #4]
    370c:	8820      	ldrh	r0, [r4, #0]
    370e:	702b      	strb	r3, [r5, #0]
    3710:	f7fd f844 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3714:	9901      	ldr	r1, [sp, #4]
    3716:	8820      	ldrh	r0, [r4, #0]
    3718:	f7fd f840 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x36 - ROL - Rotate Left - ZeroPage , X
    371c:	b003      	add	sp, #12
    371e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3724:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3728:	e7ee      	b.n	3708 <opcode_0x36()+0x30>
    372a:	bf00      	nop
    372c:	200047c0 	.word	0x200047c0
    3730:	2001508a 	.word	0x2001508a

00003734 <opcode_0x2E()>:
void opcode_0x2E() {
    3734:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3736:	4d14      	ldr	r5, [pc, #80]	; (3788 <opcode_0x2E()+0x54>)
void opcode_0x2E() {
    3738:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_Absolute()));
    373a:	f7fd f9e1 	bl	b00 <Fetch_Absolute()>
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    373e:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3740:	782b      	ldrb	r3, [r5, #0]
    3742:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    3746:	bf4c      	ite	mi
    3748:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    374c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    3750:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    3754:	0602      	lsls	r2, r0, #24
    3756:	b2c1      	uxtb	r1, r0
    3758:	d410      	bmi.n	377c <opcode_0x2E()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    375a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    375e:	b979      	cbnz	r1, 3780 <opcode_0x2E()+0x4c>
    3760:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    3764:	4c09      	ldr	r4, [pc, #36]	; (378c <opcode_0x2E()+0x58>)
    3766:	9101      	str	r1, [sp, #4]
    3768:	8820      	ldrh	r0, [r4, #0]
    376a:	702b      	strb	r3, [r5, #0]
    376c:	f7fd f816 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    3770:	9901      	ldr	r1, [sp, #4]
    3772:	8820      	ldrh	r0, [r4, #0]
    3774:	f7fd f812 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x2E - ROL - Rotate Left - Absolute
    3778:	b003      	add	sp, #12
    377a:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    377c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    3780:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3784:	e7ee      	b.n	3764 <opcode_0x2E()+0x30>
    3786:	bf00      	nop
    3788:	200047c0 	.word	0x200047c0
    378c:	2001508a 	.word	0x2001508a

00003790 <opcode_0x3E()>:
void opcode_0x3E() {
    3790:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    3792:	4d14      	ldr	r5, [pc, #80]	; (37e4 <opcode_0x3E()+0x54>)
void opcode_0x3E() {
    3794:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_ROL(Fetch_Absolute_X(0)));
    3796:	2000      	movs	r0, #0
    3798:	f7fd f9d0 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    379c:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    379e:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    37a0:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    37a4:	bf4c      	ite	mi
    37a6:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    37aa:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    37ae:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    37b2:	0602      	lsls	r2, r0, #24
    37b4:	b2c1      	uxtb	r1, r0
    37b6:	d410      	bmi.n	37da <opcode_0x3E()+0x4a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    37b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    37bc:	b979      	cbnz	r1, 37de <opcode_0x3E()+0x4e>
    37be:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    37c2:	4c09      	ldr	r4, [pc, #36]	; (37e8 <opcode_0x3E()+0x58>)
    37c4:	9101      	str	r1, [sp, #4]
    37c6:	8820      	ldrh	r0, [r4, #0]
    37c8:	702b      	strb	r3, [r5, #0]
    37ca:	f7fc ffe7 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    37ce:	9901      	ldr	r1, [sp, #4]
    37d0:	8820      	ldrh	r0, [r4, #0]
    37d2:	f7fc ffe3 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x3E - ROL - Rotate Left - Absolute , X
    37d6:	b003      	add	sp, #12
    37d8:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    37da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    37de:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    37e2:	e7ee      	b.n	37c2 <opcode_0x3E()+0x32>
    37e4:	200047c0 	.word	0x200047c0
    37e8:	2001508a 	.word	0x2001508a

000037ec <Branch_Taken()>:

// -------------------------------------------------
// Branches
// -------------------------------------------------
void Branch_Taken() {
    37ec:	b570      	push	{r4, r5, r6, lr}
    register_pc++;
    37ee:	4c53      	ldr	r4, [pc, #332]	; (393c <Branch_Taken()+0x150>)
    return read_byte(register_pc, false);
    37f0:	2100      	movs	r1, #0
    register_pc++;
    37f2:	8820      	ldrh	r0, [r4, #0]
    37f4:	3001      	adds	r0, #1
    37f6:	b280      	uxth	r0, r0
    37f8:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
    37fa:	f7fc fe13 	bl	424 <read_byte(unsigned short, bool)>

    effective_address = Sign_Extend16(Fetch_Immediate());
    effective_address = (register_pc + 1) + effective_address;
    37fe:	8821      	ldrh	r1, [r4, #0]
    if ((reg_data & 0x0080) == 0x0080) {
    3800:	0605      	lsls	r5, r0, #24
    effective_address = Sign_Extend16(Fetch_Immediate());
    3802:	b283      	uxth	r3, r0
    effective_address = (register_pc + 1) + effective_address;
    3804:	4d4e      	ldr	r5, [pc, #312]	; (3940 <Branch_Taken()+0x154>)
    3806:	f101 0001 	add.w	r0, r1, #1
        return (reg_data | 0xFF00);
    380a:	bf48      	it	mi
    380c:	f443 437f 	orrmi.w	r3, r3, #65280	; 0xff00
    3810:	b280      	uxth	r0, r0
    3812:	4403      	add	r3, r0
    3814:	b29b      	uxth	r3, r3

    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    3816:	4059      	eors	r1, r3
    effective_address = (register_pc + 1) + effective_address;
    3818:	802b      	strh	r3, [r5, #0]
    if ((0xFF00 & register_pc) == (0xFF00 & effective_address)) {
    381a:	f411 417f 	ands.w	r1, r1, #65280	; 0xff00
    381e:	d007      	beq.n	3830 <Branch_Taken()+0x44>
    return read_byte(register_pc, false);
    3820:	2100      	movs	r1, #0
    register_pc++;
    3822:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
    3824:	f7fc fdfe 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
    3828:	8820      	ldrh	r0, [r4, #0]
    return read_byte(register_pc, false);
    382a:	2100      	movs	r1, #0
    register_pc++;
    382c:	3001      	adds	r0, #1
    382e:	b280      	uxth	r0, r0
    3830:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
    3832:	f7fc fdf7 	bl	424 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate();
        Fetch_Immediate();
    } // Page boundary crossed

    register_pc = effective_address;
    3836:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    3838:	4a42      	ldr	r2, [pc, #264]	; (3944 <Branch_Taken()+0x158>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    383a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    383e:	8023      	strh	r3, [r4, #0]
    current_address = local_address;
    3840:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3842:	d376      	bcc.n	3932 <Branch_Taken()+0x146>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3844:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    3848:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    384c:	d305      	bcc.n	385a <Branch_Taken()+0x6e>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    384e:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    3852:	b292      	uxth	r2, r2
    3854:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    3858:	d36b      	bcc.n	3932 <Branch_Taken()+0x146>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    385a:	4a3b      	ldr	r2, [pc, #236]	; (3948 <Branch_Taken()+0x15c>)
        last_access_internal_RAM = 0;
    385c:	2000      	movs	r0, #0
    385e:	493b      	ldr	r1, [pc, #236]	; (394c <Branch_Taken()+0x160>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3860:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    3862:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3864:	2a01      	cmp	r2, #1
    3866:	d005      	beq.n	3874 <Branch_Taken()+0x88>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3868:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    386c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3870:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    3874:	4a36      	ldr	r2, [pc, #216]	; (3950 <Branch_Taken()+0x164>)
    3876:	7812      	ldrb	r2, [r2, #0]
    3878:	b94a      	cbnz	r2, 388e <Branch_Taken()+0xa2>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    387a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    387e:	680a      	ldr	r2, [r1, #0]
    3880:	04d0      	lsls	r0, r2, #19
    3882:	d4fc      	bmi.n	387e <Branch_Taken()+0x92>
    while (CLK0) {}      // Wait for CLK0 to become low
    3884:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    3888:	680a      	ldr	r2, [r1, #0]
    388a:	04d2      	lsls	r2, r2, #19
    388c:	d5fc      	bpl.n	3888 <Branch_Taken()+0x9c>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    388e:	4e31      	ldr	r6, [pc, #196]	; (3954 <Branch_Taken()+0x168>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3890:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3894:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3896:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3898:	06d8      	lsls	r0, r3, #27
    389a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    389e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38a2:	6829      	ldr	r1, [r5, #0]
    38a4:	4a2c      	ldr	r2, [pc, #176]	; (3958 <Branch_Taken()+0x16c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    38a6:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38aa:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    38ac:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38ae:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    38b2:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38b6:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    38b8:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    38bc:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38c0:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    38c2:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    38c6:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38ca:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38cc:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    38ce:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    38d0:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38d2:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38d6:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    38d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38dc:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38de:	491f      	ldr	r1, [pc, #124]	; (395c <Branch_Taken()+0x170>)
    38e0:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    38e2:	4d1f      	ldr	r5, [pc, #124]	; (3960 <Branch_Taken()+0x174>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    38e4:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    38e6:	0559      	lsls	r1, r3, #21
    38e8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    38ec:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    38ee:	0359      	lsls	r1, r3, #13
    38f0:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    38f4:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    38f6:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    38f8:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    38fc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3900:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3902:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3904:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3906:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    390a:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3912:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3914:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3916:	682c      	ldr	r4, [r5, #0]
    3918:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    391c:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    391e:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3920:	4910      	ldr	r1, [pc, #64]	; (3964 <Branch_Taken()+0x178>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3922:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3924:	4a10      	ldr	r2, [pc, #64]	; (3968 <Branch_Taken()+0x17c>)
    3926:	680c      	ldr	r4, [r1, #0]
    3928:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    392a:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    392c:	4303      	orrs	r3, r0
    392e:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    3930:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3932:	4a0e      	ldr	r2, [pc, #56]	; (396c <Branch_Taken()+0x180>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3934:	7812      	ldrb	r2, [r2, #0]
    3936:	2a01      	cmp	r2, #1
    3938:	d98f      	bls.n	385a <Branch_Taken()+0x6e>
    393a:	bd70      	pop	{r4, r5, r6, pc}
    393c:	2001508c 	.word	0x2001508c
    3940:	2001508a 	.word	0x2001508a
    3944:	20015088 	.word	0x20015088
    3948:	200150a6 	.word	0x200150a6
    394c:	200150a1 	.word	0x200150a1
    3950:	200047be 	.word	0x200047be
    3954:	42004000 	.word	0x42004000
    3958:	6dfffff3 	.word	0x6dfffff3
    395c:	cff3efff 	.word	0xcff3efff
    3960:	42008000 	.word	0x42008000
    3964:	4200c000 	.word	0x4200c000
    3968:	7fffff6f 	.word	0x7fffff6f
    396c:	20015098 	.word	0x20015098

00003970 <opcode_0xB0()>:
void opcode_0xB0() {
    3970:	b508      	push	{r3, lr}
    if ((flag_c) == 1) Branch_Taken();
    3972:	4b08      	ldr	r3, [pc, #32]	; (3994 <opcode_0xB0()+0x24>)
    3974:	7819      	ldrb	r1, [r3, #0]
    3976:	f011 0101 	ands.w	r1, r1, #1
    397a:	d003      	beq.n	3984 <opcode_0xB0()+0x14>
    else {
        Fetch_Immediate();
        Begin_Fetch_Next_Opcode();
    }
    return;
} // 0xB0 - BCS - Branch on Carry Set
    397c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if ((flag_c) == 1) Branch_Taken();
    3980:	f7ff bf34 	b.w	37ec <Branch_Taken()>
    register_pc++;
    3984:	4b04      	ldr	r3, [pc, #16]	; (3998 <opcode_0xB0()+0x28>)
    3986:	8818      	ldrh	r0, [r3, #0]
    3988:	3001      	adds	r0, #1
    398a:	b280      	uxth	r0, r0
    398c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    398e:	f7fc fd49 	bl	424 <read_byte(unsigned short, bool)>
} // 0xB0 - BCS - Branch on Carry Set
    3992:	bd08      	pop	{r3, pc}
    3994:	200047c0 	.word	0x200047c0
    3998:	2001508c 	.word	0x2001508c

0000399c <opcode_0x90()>:
void opcode_0x90() {
    399c:	b508      	push	{r3, lr}
    if ((flag_c) == 0) Branch_Taken();
    399e:	4b08      	ldr	r3, [pc, #32]	; (39c0 <opcode_0x90()+0x24>)
    39a0:	781b      	ldrb	r3, [r3, #0]
    39a2:	07db      	lsls	r3, r3, #31
    39a4:	d403      	bmi.n	39ae <opcode_0x90()+0x12>
    else {
        Fetch_Immediate();
        Begin_Fetch_Next_Opcode();
    }
    return;
} // 0x90 - BCC - Branch on Carry Clear
    39a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if ((flag_c) == 0) Branch_Taken();
    39aa:	f7ff bf1f 	b.w	37ec <Branch_Taken()>
    register_pc++;
    39ae:	4b05      	ldr	r3, [pc, #20]	; (39c4 <opcode_0x90()+0x28>)
    return read_byte(register_pc, false);
    39b0:	2100      	movs	r1, #0
    register_pc++;
    39b2:	8818      	ldrh	r0, [r3, #0]
    39b4:	3001      	adds	r0, #1
    39b6:	b280      	uxth	r0, r0
    39b8:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    39ba:	f7fc fd33 	bl	424 <read_byte(unsigned short, bool)>
} // 0x90 - BCC - Branch on Carry Clear
    39be:	bd08      	pop	{r3, pc}
    39c0:	200047c0 	.word	0x200047c0
    39c4:	2001508c 	.word	0x2001508c

000039c8 <opcode_0xF0()>:
void opcode_0xF0() {
    39c8:	b508      	push	{r3, lr}
    if ((flag_z) == 1) Branch_Taken();
    39ca:	4b09      	ldr	r3, [pc, #36]	; (39f0 <opcode_0xF0()+0x28>)
    39cc:	781b      	ldrb	r3, [r3, #0]
    39ce:	f3c3 0140 	ubfx	r1, r3, #1, #1
    39d2:	079b      	lsls	r3, r3, #30
    39d4:	d503      	bpl.n	39de <opcode_0xF0()+0x16>
    else {
        Fetch_Immediate();
        Begin_Fetch_Next_Opcode();
    }
    return;
} // 0xF0 - BEQ - Branch on Zero Set
    39d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if ((flag_z) == 1) Branch_Taken();
    39da:	f7ff bf07 	b.w	37ec <Branch_Taken()>
    register_pc++;
    39de:	4b05      	ldr	r3, [pc, #20]	; (39f4 <opcode_0xF0()+0x2c>)
    39e0:	8818      	ldrh	r0, [r3, #0]
    39e2:	3001      	adds	r0, #1
    39e4:	b280      	uxth	r0, r0
    39e6:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    39e8:	f7fc fd1c 	bl	424 <read_byte(unsigned short, bool)>
} // 0xF0 - BEQ - Branch on Zero Set
    39ec:	bd08      	pop	{r3, pc}
    39ee:	bf00      	nop
    39f0:	200047c0 	.word	0x200047c0
    39f4:	2001508c 	.word	0x2001508c

000039f8 <opcode_0xD0()>:
void opcode_0xD0() {
    39f8:	b508      	push	{r3, lr}
    if ((flag_z) == 0) Branch_Taken();
    39fa:	4b08      	ldr	r3, [pc, #32]	; (3a1c <opcode_0xD0()+0x24>)
    39fc:	781b      	ldrb	r3, [r3, #0]
    39fe:	079b      	lsls	r3, r3, #30
    3a00:	d403      	bmi.n	3a0a <opcode_0xD0()+0x12>
    else {
        Fetch_Immediate();
        Begin_Fetch_Next_Opcode();
    }
    return;
} // 0xD0 - BNE - Branch on Zero Clear
    3a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if ((flag_z) == 0) Branch_Taken();
    3a06:	f7ff bef1 	b.w	37ec <Branch_Taken()>
    register_pc++;
    3a0a:	4b05      	ldr	r3, [pc, #20]	; (3a20 <opcode_0xD0()+0x28>)
    return read_byte(register_pc, false);
    3a0c:	2100      	movs	r1, #0
    register_pc++;
    3a0e:	8818      	ldrh	r0, [r3, #0]
    3a10:	3001      	adds	r0, #1
    3a12:	b280      	uxth	r0, r0
    3a14:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    3a16:	f7fc fd05 	bl	424 <read_byte(unsigned short, bool)>
} // 0xD0 - BNE - Branch on Zero Clear
    3a1a:	bd08      	pop	{r3, pc}
    3a1c:	200047c0 	.word	0x200047c0
    3a20:	2001508c 	.word	0x2001508c

00003a24 <opcode_0x70()>:
void opcode_0x70() {
    3a24:	b508      	push	{r3, lr}
    if ((flag_v) == 1) Branch_Taken();
    3a26:	4b09      	ldr	r3, [pc, #36]	; (3a4c <opcode_0x70()+0x28>)
    3a28:	781b      	ldrb	r3, [r3, #0]
    3a2a:	f3c3 1180 	ubfx	r1, r3, #6, #1
    3a2e:	065b      	lsls	r3, r3, #25
    3a30:	d503      	bpl.n	3a3a <opcode_0x70()+0x16>
    else {
        Fetch_Immediate();
        Begin_Fetch_Next_Opcode();
    }
    return;
} // 0x70 - BVS - Branch on Overflow Set
    3a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if ((flag_v) == 1) Branch_Taken();
    3a36:	f7ff bed9 	b.w	37ec <Branch_Taken()>
    register_pc++;
    3a3a:	4b05      	ldr	r3, [pc, #20]	; (3a50 <opcode_0x70()+0x2c>)
    3a3c:	8818      	ldrh	r0, [r3, #0]
    3a3e:	3001      	adds	r0, #1
    3a40:	b280      	uxth	r0, r0
    3a42:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    3a44:	f7fc fcee 	bl	424 <read_byte(unsigned short, bool)>
} // 0x70 - BVS - Branch on Overflow Set
    3a48:	bd08      	pop	{r3, pc}
    3a4a:	bf00      	nop
    3a4c:	200047c0 	.word	0x200047c0
    3a50:	2001508c 	.word	0x2001508c

00003a54 <opcode_0x50()>:
void opcode_0x50() {
    3a54:	b508      	push	{r3, lr}
    if ((flag_v) == 0) Branch_Taken();
    3a56:	4b08      	ldr	r3, [pc, #32]	; (3a78 <opcode_0x50()+0x24>)
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	065b      	lsls	r3, r3, #25
    3a5c:	d403      	bmi.n	3a66 <opcode_0x50()+0x12>
    else {
        Fetch_Immediate();
        Begin_Fetch_Next_Opcode();
    }
    return;
} // 0x50 - BVC - Branch on Overflow Clear
    3a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if ((flag_v) == 0) Branch_Taken();
    3a62:	f7ff bec3 	b.w	37ec <Branch_Taken()>
    register_pc++;
    3a66:	4b05      	ldr	r3, [pc, #20]	; (3a7c <opcode_0x50()+0x28>)
    return read_byte(register_pc, false);
    3a68:	2100      	movs	r1, #0
    register_pc++;
    3a6a:	8818      	ldrh	r0, [r3, #0]
    3a6c:	3001      	adds	r0, #1
    3a6e:	b280      	uxth	r0, r0
    3a70:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    3a72:	f7fc fcd7 	bl	424 <read_byte(unsigned short, bool)>
} // 0x50 - BVC - Branch on Overflow Clear
    3a76:	bd08      	pop	{r3, pc}
    3a78:	200047c0 	.word	0x200047c0
    3a7c:	2001508c 	.word	0x2001508c

00003a80 <opcode_0x30()>:
void opcode_0x30() {
    3a80:	b508      	push	{r3, lr}
    if ((flag_n) == 1) Branch_Taken();
    3a82:	4b08      	ldr	r3, [pc, #32]	; (3aa4 <opcode_0x30()+0x24>)
    3a84:	781b      	ldrb	r3, [r3, #0]
    3a86:	09db      	lsrs	r3, r3, #7
    3a88:	d108      	bne.n	3a9c <opcode_0x30()+0x1c>
    register_pc++;
    3a8a:	4b07      	ldr	r3, [pc, #28]	; (3aa8 <opcode_0x30()+0x28>)
    return read_byte(register_pc, false);
    3a8c:	2100      	movs	r1, #0
    register_pc++;
    3a8e:	8818      	ldrh	r0, [r3, #0]
    3a90:	3001      	adds	r0, #1
    3a92:	b280      	uxth	r0, r0
    3a94:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    3a96:	f7fc fcc5 	bl	424 <read_byte(unsigned short, bool)>
    else {
        Fetch_Immediate();
        Begin_Fetch_Next_Opcode();
    }
    return;
} // 0x30 - BMI - Branch on Minus (N Flag Set)
    3a9a:	bd08      	pop	{r3, pc}
    3a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if ((flag_n) == 1) Branch_Taken();
    3aa0:	f7ff bea4 	b.w	37ec <Branch_Taken()>
    3aa4:	200047c0 	.word	0x200047c0
    3aa8:	2001508c 	.word	0x2001508c

00003aac <opcode_0x10()>:
void opcode_0x10() {
    3aac:	b508      	push	{r3, lr}
    if ((flag_n) == 0) Branch_Taken();
    3aae:	4b09      	ldr	r3, [pc, #36]	; (3ad4 <opcode_0x10()+0x28>)
    3ab0:	f993 3000 	ldrsb.w	r3, [r3]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	db03      	blt.n	3ac0 <opcode_0x10()+0x14>
    else {
        Fetch_Immediate();
        Begin_Fetch_Next_Opcode();
    }
    return;
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)
    3ab8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if ((flag_n) == 0) Branch_Taken();
    3abc:	f7ff be96 	b.w	37ec <Branch_Taken()>
    register_pc++;
    3ac0:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <opcode_0x10()+0x2c>)
    return read_byte(register_pc, false);
    3ac2:	2100      	movs	r1, #0
    register_pc++;
    3ac4:	8818      	ldrh	r0, [r3, #0]
    3ac6:	3001      	adds	r0, #1
    3ac8:	b280      	uxth	r0, r0
    3aca:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    3acc:	f7fc fcaa 	bl	424 <read_byte(unsigned short, bool)>
} // 0x10 - BPL - Branch on Plus  (N Flag Clear)
    3ad0:	bd08      	pop	{r3, pc}
    3ad2:	bf00      	nop
    3ad4:	200047c0 	.word	0x200047c0
    3ad8:	2001508c 	.word	0x2001508c

00003adc <opcode_0x4C()>:

// -------------------------------------------------
// Jumps and Returns
// -------------------------------------------------
void opcode_0x4C() {
    3adc:	b570      	push	{r4, r5, r6, lr}
    register_pc++;
    3ade:	4d4b      	ldr	r5, [pc, #300]	; (3c0c <opcode_0x4C()+0x130>)
    return read_byte(register_pc, false);
    3ae0:	2100      	movs	r1, #0
    register_pc++;
    3ae2:	8828      	ldrh	r0, [r5, #0]
    3ae4:	3001      	adds	r0, #1
    3ae6:	b280      	uxth	r0, r0
    3ae8:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
    3aea:	f7fc fc9b 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
    3aee:	882a      	ldrh	r2, [r5, #0]
    return read_byte(register_pc, false);
    3af0:	4604      	mov	r4, r0
    3af2:	2100      	movs	r1, #0
    register_pc++;
    3af4:	3201      	adds	r2, #1
    3af6:	b290      	uxth	r0, r2
    3af8:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
    3afa:	f7fc fc93 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = adl + adh;
    3afe:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    3b02:	4943      	ldr	r1, [pc, #268]	; (3c10 <opcode_0x4C()+0x134>)
    current_address = local_address;
    3b04:	4a43      	ldr	r2, [pc, #268]	; (3c14 <opcode_0x4C()+0x138>)
    effective_address = adl + adh;
    3b06:	b283      	uxth	r3, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    effective_address = adl + adh;
    3b0c:	800b      	strh	r3, [r1, #0]
    register_pc = Calculate_Absolute();
    3b0e:	802b      	strh	r3, [r5, #0]
    current_address = local_address;
    3b10:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3b12:	d376      	bcc.n	3c02 <opcode_0x4C()+0x126>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3b14:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    3b18:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    3b1c:	d305      	bcc.n	3b2a <opcode_0x4C()+0x4e>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3b1e:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    3b22:	b292      	uxth	r2, r2
    3b24:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    3b28:	d36b      	bcc.n	3c02 <opcode_0x4C()+0x126>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3b2a:	4a3b      	ldr	r2, [pc, #236]	; (3c18 <opcode_0x4C()+0x13c>)
        last_access_internal_RAM = 0;
    3b2c:	2000      	movs	r0, #0
    3b2e:	493b      	ldr	r1, [pc, #236]	; (3c1c <opcode_0x4C()+0x140>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3b30:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    3b32:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3b34:	2a01      	cmp	r2, #1
    3b36:	d005      	beq.n	3b44 <opcode_0x4C()+0x68>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3b38:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3b3c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3b40:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    3b44:	4a36      	ldr	r2, [pc, #216]	; (3c20 <opcode_0x4C()+0x144>)
    3b46:	7812      	ldrb	r2, [r2, #0]
    3b48:	b94a      	cbnz	r2, 3b5e <opcode_0x4C()+0x82>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3b4a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    3b4e:	680a      	ldr	r2, [r1, #0]
    3b50:	04d0      	lsls	r0, r2, #19
    3b52:	d4fc      	bmi.n	3b4e <opcode_0x4C()+0x72>
    while (CLK0) {}      // Wait for CLK0 to become low
    3b54:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    3b58:	680a      	ldr	r2, [r1, #0]
    3b5a:	04d2      	lsls	r2, r2, #19
    3b5c:	d5fc      	bpl.n	3b58 <opcode_0x4C()+0x7c>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3b5e:	4e31      	ldr	r6, [pc, #196]	; (3c24 <opcode_0x4C()+0x148>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3b60:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3b64:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3b66:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3b68:	06d8      	lsls	r0, r3, #27
    3b6a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3b6e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3b72:	6829      	ldr	r1, [r5, #0]
    3b74:	4a2c      	ldr	r2, [pc, #176]	; (3c28 <opcode_0x4C()+0x14c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3b76:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3b7a:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3b7c:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3b7e:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3b82:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3b86:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    3b88:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3b8c:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3b90:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3b92:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3b96:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3b9a:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3b9c:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3b9e:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3ba0:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3ba2:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3ba6:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3ba8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3bac:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3bae:	491f      	ldr	r1, [pc, #124]	; (3c2c <opcode_0x4C()+0x150>)
    3bb0:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3bb2:	4d1f      	ldr	r5, [pc, #124]	; (3c30 <opcode_0x4C()+0x154>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3bb4:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    3bb6:	0559      	lsls	r1, r3, #21
    3bb8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    3bbc:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    3bbe:	0359      	lsls	r1, r3, #13
    3bc0:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    3bc4:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3bc6:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3bc8:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3bcc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3bd0:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3bd2:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3bd4:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3bd6:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3bda:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3be2:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3be4:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3be6:	682c      	ldr	r4, [r5, #0]
    3be8:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3bec:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3bee:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3bf0:	4910      	ldr	r1, [pc, #64]	; (3c34 <opcode_0x4C()+0x158>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3bf2:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3bf4:	4a10      	ldr	r2, [pc, #64]	; (3c38 <opcode_0x4C()+0x15c>)
    3bf6:	680c      	ldr	r4, [r1, #0]
    3bf8:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3bfa:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3bfc:	4303      	orrs	r3, r0
    3bfe:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
} // 0x4C - JMP - Jump Absolute
    3c00:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3c02:	4a0e      	ldr	r2, [pc, #56]	; (3c3c <opcode_0x4C()+0x160>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3c04:	7812      	ldrb	r2, [r2, #0]
    3c06:	2a01      	cmp	r2, #1
    3c08:	d98f      	bls.n	3b2a <opcode_0x4C()+0x4e>
    3c0a:	bd70      	pop	{r4, r5, r6, pc}
    3c0c:	2001508c 	.word	0x2001508c
    3c10:	2001508a 	.word	0x2001508a
    3c14:	20015088 	.word	0x20015088
    3c18:	200150a6 	.word	0x200150a6
    3c1c:	200150a1 	.word	0x200150a1
    3c20:	200047be 	.word	0x200047be
    3c24:	42004000 	.word	0x42004000
    3c28:	6dfffff3 	.word	0x6dfffff3
    3c2c:	cff3efff 	.word	0xcff3efff
    3c30:	42008000 	.word	0x42008000
    3c34:	4200c000 	.word	0x4200c000
    3c38:	7fffff6f 	.word	0x7fffff6f
    3c3c:	20015098 	.word	0x20015098

00003c40 <opcode_0x6C()>:

// -------------------------------------------------
// 0x6C - JMP - Jump Indirect
// -------------------------------------------------
void opcode_0x6C() {
    3c40:	b570      	push	{r4, r5, r6, lr}
    register_pc++;
    3c42:	4e53      	ldr	r6, [pc, #332]	; (3d90 <opcode_0x6C()+0x150>)
    return read_byte(register_pc, false);
    3c44:	2100      	movs	r1, #0
    register_pc++;
    3c46:	8830      	ldrh	r0, [r6, #0]
    3c48:	3001      	adds	r0, #1
    3c4a:	b280      	uxth	r0, r0
    3c4c:	8030      	strh	r0, [r6, #0]
    return read_byte(register_pc, false);
    3c4e:	f7fc fbe9 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
    3c52:	8833      	ldrh	r3, [r6, #0]
    return read_byte(register_pc, false);
    3c54:	4604      	mov	r4, r0
    3c56:	2100      	movs	r1, #0
    register_pc++;
    3c58:	1c58      	adds	r0, r3, #1
    3c5a:	b280      	uxth	r0, r0
    3c5c:	8030      	strh	r0, [r6, #0]
    return read_byte(register_pc, false);
    3c5e:	f7fc fbe1 	bl	424 <read_byte(unsigned short, bool)>
    uint16_t lal, lah;
    uint16_t adl, adh;

    lal = Fetch_Immediate();
    lah = Fetch_Immediate() << 8;
    adl = read_byte(lah + lal, false);
    3c62:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    3c66:	2100      	movs	r1, #0
    3c68:	b284      	uxth	r4, r0
    3c6a:	4620      	mov	r0, r4
    adh = read_byte(lah + lal + 1, false) << 8;
    3c6c:	3401      	adds	r4, #1
    adl = read_byte(lah + lal, false);
    3c6e:	f7fc fbd9 	bl	424 <read_byte(unsigned short, bool)>
    adh = read_byte(lah + lal + 1, false) << 8;
    3c72:	2100      	movs	r1, #0
    adl = read_byte(lah + lal, false);
    3c74:	4605      	mov	r5, r0
    adh = read_byte(lah + lal + 1, false) << 8;
    3c76:	b2a0      	uxth	r0, r4
    3c78:	f7fc fbd4 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = adh + adl;
    3c7c:	4c45      	ldr	r4, [pc, #276]	; (3d94 <opcode_0x6C()+0x154>)
    adh = read_byte(lah + lal + 1, false) << 8;
    3c7e:	0203      	lsls	r3, r0, #8
    current_address = local_address;
    3c80:	4945      	ldr	r1, [pc, #276]	; (3d98 <opcode_0x6C()+0x158>)
    3c82:	b29b      	uxth	r3, r3
    effective_address = adh + adl;
    3c84:	195a      	adds	r2, r3, r5
    3c86:	b292      	uxth	r2, r2
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    3c88:	b2d0      	uxtb	r0, r2
    effective_address = adh + adl;
    3c8a:	8022      	strh	r2, [r4, #0]
    register_pc = (0xFF00 & adh) + (0x00FF & effective_address); // 6502 page wrapping bug 
    3c8c:	4303      	orrs	r3, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3c92:	8033      	strh	r3, [r6, #0]
    current_address = local_address;
    3c94:	800b      	strh	r3, [r1, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3c96:	d376      	bcc.n	3d86 <opcode_0x6C()+0x146>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3c98:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    3c9c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    3ca0:	d305      	bcc.n	3cae <opcode_0x6C()+0x6e>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3ca2:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    3ca6:	b292      	uxth	r2, r2
    3ca8:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    3cac:	d36b      	bcc.n	3d86 <opcode_0x6C()+0x146>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3cae:	4a3b      	ldr	r2, [pc, #236]	; (3d9c <opcode_0x6C()+0x15c>)
        last_access_internal_RAM = 0;
    3cb0:	2000      	movs	r0, #0
    3cb2:	493b      	ldr	r1, [pc, #236]	; (3da0 <opcode_0x6C()+0x160>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3cb4:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    3cb6:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3cb8:	2a01      	cmp	r2, #1
    3cba:	d005      	beq.n	3cc8 <opcode_0x6C()+0x88>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3cbc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3cc0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3cc4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    3cc8:	4a36      	ldr	r2, [pc, #216]	; (3da4 <opcode_0x6C()+0x164>)
    3cca:	7812      	ldrb	r2, [r2, #0]
    3ccc:	b94a      	cbnz	r2, 3ce2 <opcode_0x6C()+0xa2>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3cce:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    3cd2:	680a      	ldr	r2, [r1, #0]
    3cd4:	04d0      	lsls	r0, r2, #19
    3cd6:	d4fc      	bmi.n	3cd2 <opcode_0x6C()+0x92>
    while (CLK0) {}      // Wait for CLK0 to become low
    3cd8:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    3cdc:	680a      	ldr	r2, [r1, #0]
    3cde:	04d2      	lsls	r2, r2, #19
    3ce0:	d5fc      	bpl.n	3cdc <opcode_0x6C()+0x9c>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3ce2:	4e31      	ldr	r6, [pc, #196]	; (3da8 <opcode_0x6C()+0x168>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3ce4:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3ce8:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3cea:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3cec:	06d8      	lsls	r0, r3, #27
    3cee:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3cf2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3cf6:	6829      	ldr	r1, [r5, #0]
    3cf8:	4a2c      	ldr	r2, [pc, #176]	; (3dac <opcode_0x6C()+0x16c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3cfa:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3cfe:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3d00:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3d02:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3d06:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3d0a:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    3d0c:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3d10:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3d14:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3d16:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3d1a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3d1e:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3d20:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3d22:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3d24:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3d26:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3d2a:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3d2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3d30:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3d32:	491f      	ldr	r1, [pc, #124]	; (3db0 <opcode_0x6C()+0x170>)
    3d34:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3d36:	4d1f      	ldr	r5, [pc, #124]	; (3db4 <opcode_0x6C()+0x174>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3d38:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    3d3a:	0559      	lsls	r1, r3, #21
    3d3c:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    3d40:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    3d42:	0359      	lsls	r1, r3, #13
    3d44:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    3d48:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3d4a:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3d4c:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3d50:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3d54:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3d56:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3d58:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3d5a:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3d5e:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3d66:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3d68:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3d6a:	682c      	ldr	r4, [r5, #0]
    3d6c:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3d70:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3d72:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3d74:	4910      	ldr	r1, [pc, #64]	; (3db8 <opcode_0x6C()+0x178>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3d76:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3d78:	4a10      	ldr	r2, [pc, #64]	; (3dbc <opcode_0x6C()+0x17c>)
    3d7a:	680c      	ldr	r4, [r1, #0]
    3d7c:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3d7e:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3d80:	4303      	orrs	r3, r0
    3d82:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    3d84:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3d86:	4a0e      	ldr	r2, [pc, #56]	; (3dc0 <opcode_0x6C()+0x180>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3d88:	7812      	ldrb	r2, [r2, #0]
    3d8a:	2a01      	cmp	r2, #1
    3d8c:	d98f      	bls.n	3cae <opcode_0x6C()+0x6e>
    3d8e:	bd70      	pop	{r4, r5, r6, pc}
    3d90:	2001508c 	.word	0x2001508c
    3d94:	2001508a 	.word	0x2001508a
    3d98:	20015088 	.word	0x20015088
    3d9c:	200150a6 	.word	0x200150a6
    3da0:	200150a1 	.word	0x200150a1
    3da4:	200047be 	.word	0x200047be
    3da8:	42004000 	.word	0x42004000
    3dac:	6dfffff3 	.word	0x6dfffff3
    3db0:	cff3efff 	.word	0xcff3efff
    3db4:	42008000 	.word	0x42008000
    3db8:	4200c000 	.word	0x4200c000
    3dbc:	7fffff6f 	.word	0x7fffff6f
    3dc0:	20015098 	.word	0x20015098

00003dc4 <opcode_0x20()>:

// -------------------------------------------------
// 0x20 - JSR - Jump to Subroutine
// -------------------------------------------------
void opcode_0x20() {
    3dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    register_pc++;
    3dc6:	4d57      	ldr	r5, [pc, #348]	; (3f24 <opcode_0x20()+0x160>)
    return read_byte(register_pc, false);
    3dc8:	2100      	movs	r1, #0
    uint16_t adl, adh;

    adl = Fetch_Immediate();
    adh = Fetch_Immediate() << 8;
    read_byte(register_sp_fixed, false);
    3dca:	4e57      	ldr	r6, [pc, #348]	; (3f28 <opcode_0x20()+0x164>)
    register_pc++;
    3dcc:	8828      	ldrh	r0, [r5, #0]
    3dce:	3001      	adds	r0, #1
    3dd0:	b280      	uxth	r0, r0
    3dd2:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
    3dd4:	f7fc fb26 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
    3dd8:	882b      	ldrh	r3, [r5, #0]
    return read_byte(register_pc, false);
    3dda:	4604      	mov	r4, r0
    3ddc:	2100      	movs	r1, #0
    register_pc++;
    3dde:	1c58      	adds	r0, r3, #1
    3de0:	b280      	uxth	r0, r0
    3de2:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
    3de4:	f7fc fb1e 	bl	424 <read_byte(unsigned short, bool)>
    3de8:	4607      	mov	r7, r0
    3dea:	7830      	ldrb	r0, [r6, #0]
    3dec:	2100      	movs	r1, #0
    3dee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3df2:	f7fc fb17 	bl	424 <read_byte(unsigned short, bool)>
    push((0xFF00 & register_pc) >> 8);
    3df6:	8829      	ldrh	r1, [r5, #0]
    write_byte(register_sp_fixed, push_data);
    3df8:	7830      	ldrb	r0, [r6, #0]
    3dfa:	0a09      	lsrs	r1, r1, #8
    3dfc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3e00:	f7fc fccc 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3e04:	7833      	ldrb	r3, [r6, #0]
    write_byte(register_sp_fixed, push_data);
    3e06:	7829      	ldrb	r1, [r5, #0]
    register_sp = register_sp - 1;
    3e08:	3b01      	subs	r3, #1
    3e0a:	b2db      	uxtb	r3, r3
    write_byte(register_sp_fixed, push_data);
    3e0c:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp - 1;
    3e10:	7033      	strb	r3, [r6, #0]
    write_byte(register_sp_fixed, push_data);
    3e12:	f7fc fcc3 	bl	79c <write_byte(unsigned short, unsigned char)>
    register_sp = register_sp - 1;
    3e16:	7833      	ldrb	r3, [r6, #0]

    push(0x00FF & register_pc);
    register_pc = adh + adl;
    3e18:	eb04 2007 	add.w	r0, r4, r7, lsl #8
    current_address = local_address;
    3e1c:	4a43      	ldr	r2, [pc, #268]	; (3f2c <opcode_0x20()+0x168>)
    register_sp = register_sp - 1;
    3e1e:	3b01      	subs	r3, #1
    3e20:	b280      	uxth	r0, r0
    3e22:	7033      	strb	r3, [r6, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3e24:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    3e28:	8028      	strh	r0, [r5, #0]
    current_address = local_address;
    3e2a:	8010      	strh	r0, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3e2c:	d375      	bcc.n	3f1a <opcode_0x20()+0x156>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3e2e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
    3e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3e36:	d305      	bcc.n	3e44 <opcode_0x20()+0x80>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3e38:	f5a0 6340 	sub.w	r3, r0, #3072	; 0xc00
    3e3c:	b29b      	uxth	r3, r3
    3e3e:	f5b3 4f34 	cmp.w	r3, #46080	; 0xb400
    3e42:	d36a      	bcc.n	3f1a <opcode_0x20()+0x156>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3e44:	4b3a      	ldr	r3, [pc, #232]	; (3f30 <opcode_0x20()+0x16c>)
        last_access_internal_RAM = 0;
    3e46:	2100      	movs	r1, #0
    3e48:	4a3a      	ldr	r2, [pc, #232]	; (3f34 <opcode_0x20()+0x170>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3e4a:	781b      	ldrb	r3, [r3, #0]
        last_access_internal_RAM = 0;
    3e4c:	7011      	strb	r1, [r2, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3e4e:	2b01      	cmp	r3, #1
    3e50:	d005      	beq.n	3e5e <opcode_0x20()+0x9a>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3e52:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    3e56:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    3e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode) return;
    3e5e:	4b36      	ldr	r3, [pc, #216]	; (3f38 <opcode_0x20()+0x174>)
    3e60:	781b      	ldrb	r3, [r3, #0]
    3e62:	b94b      	cbnz	r3, 3e78 <opcode_0x20()+0xb4>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3e64:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3e68:	6813      	ldr	r3, [r2, #0]
    3e6a:	04d9      	lsls	r1, r3, #19
    3e6c:	d4fc      	bmi.n	3e68 <opcode_0x20()+0xa4>
    while (CLK0) {}      // Wait for CLK0 to become low
    3e6e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3e72:	6813      	ldr	r3, [r2, #0]
    3e74:	04db      	lsls	r3, r3, #19
    3e76:	d5fc      	bpl.n	3e72 <opcode_0x20()+0xae>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    3e78:	4e30      	ldr	r6, [pc, #192]	; (3f3c <opcode_0x20()+0x178>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3e7a:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    3e7e:	2302      	movs	r3, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    3e80:	0a84      	lsrs	r4, r0, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3e82:	06c1      	lsls	r1, r0, #27
    3e84:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3e88:	0407      	lsls	r7, r0, #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3e8a:	682a      	ldr	r2, [r5, #0]
    3e8c:	4b2c      	ldr	r3, [pc, #176]	; (3f40 <opcode_0x20()+0x17c>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3e8e:	f407 2c00 	and.w	ip, r7, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3e92:	4013      	ands	r3, r2
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3e94:	0282      	lsls	r2, r0, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3e96:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    3e9a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3e9e:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    3ea0:	f004 020c 	and.w	r2, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    3ea4:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3ea8:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    3eaa:	f001 5280 	and.w	r2, r1, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3eae:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3eb2:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3eb4:	0502      	lsls	r2, r0, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    3eb6:	602b      	str	r3, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3eb8:	0083      	lsls	r3, r0, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3eba:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3ebe:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    3ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3ec4:	4313      	orrs	r3, r2
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3ec6:	4a1f      	ldr	r2, [pc, #124]	; (3f44 <opcode_0x20()+0x180>)
    3ec8:	402a      	ands	r2, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3eca:	4d1f      	ldr	r5, [pc, #124]	; (3f48 <opcode_0x20()+0x184>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    3ecc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    3ece:	0542      	lsls	r2, r0, #21
    3ed0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
    3ed4:	431a      	orrs	r2, r3
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    3ed6:	0343      	lsls	r3, r0, #13
    3ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    3edc:	4313      	orrs	r3, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3ede:	0382      	lsls	r2, r0, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3ee0:	ea43 030c 	orr.w	r3, r3, ip
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    3ee4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    3ee8:	6033      	str	r3, [r6, #0]
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3eea:	f407 2680 	and.w	r6, r7, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3eee:	0447      	lsls	r7, r0, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3ef0:	0903      	lsrs	r3, r0, #4
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3ef2:	f407 0000 	and.w	r0, r7, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3efa:	4302      	orrs	r2, r0
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3efc:	6828      	ldr	r0, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3efe:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3f00:	f420 0044 	bic.w	r0, r0, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    3f04:	4302      	orrs	r2, r0
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3f06:	4811      	ldr	r0, [pc, #68]	; (3f4c <opcode_0x20()+0x188>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    3f08:	4332      	orrs	r2, r6
    3f0a:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    3f0c:	4a10      	ldr	r2, [pc, #64]	; (3f50 <opcode_0x20()+0x18c>)
    3f0e:	6804      	ldr	r4, [r0, #0]
    3f10:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    3f12:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    3f14:	430b      	orrs	r3, r1
    3f16:	6003      	str	r3, [r0, #0]
    start_read(register_pc, true);
    return;
}
    3f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3f1a:	4b0e      	ldr	r3, [pc, #56]	; (3f54 <opcode_0x20()+0x190>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    3f1c:	781b      	ldrb	r3, [r3, #0]
    3f1e:	2b01      	cmp	r3, #1
    3f20:	d990      	bls.n	3e44 <opcode_0x20()+0x80>
    3f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f24:	2001508c 	.word	0x2001508c
    3f28:	200047c1 	.word	0x200047c1
    3f2c:	20015088 	.word	0x20015088
    3f30:	200150a6 	.word	0x200150a6
    3f34:	200150a1 	.word	0x200150a1
    3f38:	200047be 	.word	0x200047be
    3f3c:	42004000 	.word	0x42004000
    3f40:	6dfffff3 	.word	0x6dfffff3
    3f44:	cff3efff 	.word	0xcff3efff
    3f48:	42008000 	.word	0x42008000
    3f4c:	4200c000 	.word	0x4200c000
    3f50:	7fffff6f 	.word	0x7fffff6f
    3f54:	20015098 	.word	0x20015098

00003f58 <opcode_0x40()>:

// -------------------------------------------------
// 0x40 - RTI - Return from Interrupt
// -------------------------------------------------
void opcode_0x40() {
    3f58:	b570      	push	{r4, r5, r6, lr}
    register_pc++;
    3f5a:	4d59      	ldr	r5, [pc, #356]	; (40c0 <opcode_0x40()+0x168>)
    return read_byte(register_pc, false);
    3f5c:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate();
    read_byte(register_sp_fixed, false);
    3f5e:	4c59      	ldr	r4, [pc, #356]	; (40c4 <opcode_0x40()+0x16c>)
    register_pc++;
    3f60:	8828      	ldrh	r0, [r5, #0]
    3f62:	3001      	adds	r0, #1
    3f64:	b280      	uxth	r0, r0
    3f66:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
    3f68:	f7fc fa5c 	bl	424 <read_byte(unsigned short, bool)>
    3f6c:	7820      	ldrb	r0, [r4, #0]
    3f6e:	2100      	movs	r1, #0
    3f70:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    3f74:	f7fc fa56 	bl	424 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3f78:	7823      	ldrb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3f7a:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3f7c:	3301      	adds	r3, #1
    3f7e:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3f80:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3f84:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3f86:	f7fc fa4d 	bl	424 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3f8a:	7823      	ldrb	r3, [r4, #0]
    register_flags = pop();
    3f8c:	4a4e      	ldr	r2, [pc, #312]	; (40c8 <opcode_0x40()+0x170>)
    temp = read_byte(register_sp_fixed, false);
    3f8e:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3f90:	3301      	adds	r3, #1
    3f92:	7010      	strb	r0, [r2, #0]
    3f94:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    3f96:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    3f9a:	7023      	strb	r3, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3f9c:	f7fc fa42 	bl	424 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    3fa0:	7822      	ldrb	r2, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3fa2:	4606      	mov	r6, r0
    3fa4:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    3fa6:	3201      	adds	r2, #1
    3fa8:	b2d2      	uxtb	r2, r2
    temp = read_byte(register_sp_fixed, false);
    3faa:	f442 7080 	orr.w	r0, r2, #256	; 0x100
    register_sp = register_sp + 1;
    3fae:	7022      	strb	r2, [r4, #0]
    temp = read_byte(register_sp_fixed, false);
    3fb0:	f7fc fa38 	bl	424 <read_byte(unsigned short, bool)>
    current_address = local_address;
    3fb4:	4a45      	ldr	r2, [pc, #276]	; (40cc <opcode_0x40()+0x174>)
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl;
    3fb6:	eb06 2000 	add.w	r0, r6, r0, lsl #8
    3fba:	b283      	uxth	r3, r0
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3fc0:	802b      	strh	r3, [r5, #0]
    current_address = local_address;
    3fc2:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    3fc4:	d376      	bcc.n	40b4 <opcode_0x40()+0x15c>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    3fc6:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    3fca:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    3fce:	d305      	bcc.n	3fdc <opcode_0x40()+0x84>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    3fd0:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    3fd4:	b292      	uxth	r2, r2
    3fd6:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    3fda:	d36b      	bcc.n	40b4 <opcode_0x40()+0x15c>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3fdc:	4a3c      	ldr	r2, [pc, #240]	; (40d0 <opcode_0x40()+0x178>)
        last_access_internal_RAM = 0;
    3fde:	2000      	movs	r0, #0
    3fe0:	493c      	ldr	r1, [pc, #240]	; (40d4 <opcode_0x40()+0x17c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3fe2:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    3fe4:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    3fe6:	2a01      	cmp	r2, #1
    3fe8:	d005      	beq.n	3ff6 <opcode_0x40()+0x9e>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    3fea:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    3fee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3ff2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    3ff6:	4a38      	ldr	r2, [pc, #224]	; (40d8 <opcode_0x40()+0x180>)
    3ff8:	7812      	ldrb	r2, [r2, #0]
    3ffa:	b94a      	cbnz	r2, 4010 <opcode_0x40()+0xb8>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    3ffc:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4000:	680a      	ldr	r2, [r1, #0]
    4002:	04d0      	lsls	r0, r2, #19
    4004:	d4fc      	bmi.n	4000 <opcode_0x40()+0xa8>
    while (CLK0) {}      // Wait for CLK0 to become low
    4006:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    400a:	680a      	ldr	r2, [r1, #0]
    400c:	04d2      	lsls	r2, r2, #19
    400e:	d5fc      	bpl.n	400a <opcode_0x40()+0xb2>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    4010:	4e32      	ldr	r6, [pc, #200]	; (40dc <opcode_0x40()+0x184>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4012:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    4016:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    4018:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    401a:	06d8      	lsls	r0, r3, #27
    401c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4020:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4024:	6829      	ldr	r1, [r5, #0]
    4026:	4a2e      	ldr	r2, [pc, #184]	; (40e0 <opcode_0x40()+0x188>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4028:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    402c:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    402e:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4030:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    4034:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4038:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    403a:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    403e:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4042:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    4044:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4048:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    404c:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    404e:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    4050:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    4052:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4054:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4058:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    405a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    405e:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4060:	4920      	ldr	r1, [pc, #128]	; (40e4 <opcode_0x40()+0x18c>)
    4062:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4064:	4d20      	ldr	r5, [pc, #128]	; (40e8 <opcode_0x40()+0x190>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    4066:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    4068:	0559      	lsls	r1, r3, #21
    406a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    406e:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4070:	0359      	lsls	r1, r3, #13
    4072:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    4076:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4078:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    407a:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    407e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4082:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4084:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4086:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4088:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    408c:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4090:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4094:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4096:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4098:	682c      	ldr	r4, [r5, #0]
    409a:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    409e:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    40a0:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    40a2:	4912      	ldr	r1, [pc, #72]	; (40ec <opcode_0x40()+0x194>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    40a4:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    40a6:	4a12      	ldr	r2, [pc, #72]	; (40f0 <opcode_0x40()+0x198>)
    40a8:	680c      	ldr	r4, [r1, #0]
    40aa:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    40ac:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    40ae:	4303      	orrs	r3, r0
    40b0:	600b      	str	r3, [r1, #0]
    start_read(register_pc, true);
    return;
}
    40b2:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    40b4:	4a0f      	ldr	r2, [pc, #60]	; (40f4 <opcode_0x40()+0x19c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    40b6:	7812      	ldrb	r2, [r2, #0]
    40b8:	2a01      	cmp	r2, #1
    40ba:	d98f      	bls.n	3fdc <opcode_0x40()+0x84>
    40bc:	bd70      	pop	{r4, r5, r6, pc}
    40be:	bf00      	nop
    40c0:	2001508c 	.word	0x2001508c
    40c4:	200047c1 	.word	0x200047c1
    40c8:	200047c0 	.word	0x200047c0
    40cc:	20015088 	.word	0x20015088
    40d0:	200150a6 	.word	0x200150a6
    40d4:	200150a1 	.word	0x200150a1
    40d8:	200047be 	.word	0x200047be
    40dc:	42004000 	.word	0x42004000
    40e0:	6dfffff3 	.word	0x6dfffff3
    40e4:	cff3efff 	.word	0xcff3efff
    40e8:	42008000 	.word	0x42008000
    40ec:	4200c000 	.word	0x4200c000
    40f0:	7fffff6f 	.word	0x7fffff6f
    40f4:	20015098 	.word	0x20015098

000040f8 <opcode_0x60()>:

// -------------------------------------------------
// 0x60 - RTS - Return from Subroutine
// -------------------------------------------------
void opcode_0x60() {
    40f8:	b570      	push	{r4, r5, r6, lr}
    register_pc++;
    40fa:	4d56      	ldr	r5, [pc, #344]	; (4254 <opcode_0x60()+0x15c>)
    return read_byte(register_pc, false);
    40fc:	2100      	movs	r1, #0
    uint16_t pcl, pch;

    Fetch_Immediate();
    read_byte(register_sp_fixed, false);
    40fe:	4e56      	ldr	r6, [pc, #344]	; (4258 <opcode_0x60()+0x160>)
    register_pc++;
    4100:	8828      	ldrh	r0, [r5, #0]
    4102:	3001      	adds	r0, #1
    4104:	b280      	uxth	r0, r0
    4106:	8028      	strh	r0, [r5, #0]
    return read_byte(register_pc, false);
    4108:	f7fc f98c 	bl	424 <read_byte(unsigned short, bool)>
    410c:	7830      	ldrb	r0, [r6, #0]
    410e:	2100      	movs	r1, #0
    4110:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    4114:	f7fc f986 	bl	424 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    4118:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    411a:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    411c:	3301      	adds	r3, #1
    411e:	b2db      	uxtb	r3, r3
    temp = read_byte(register_sp_fixed, false);
    4120:	f443 7080 	orr.w	r0, r3, #256	; 0x100
    register_sp = register_sp + 1;
    4124:	7033      	strb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4126:	f7fc f97d 	bl	424 <read_byte(unsigned short, bool)>
    register_sp = register_sp + 1;
    412a:	7833      	ldrb	r3, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    412c:	4604      	mov	r4, r0
    412e:	2100      	movs	r1, #0
    register_sp = register_sp + 1;
    4130:	1c58      	adds	r0, r3, #1
    pcl = pop();
    pch = pop() << 8;
    register_pc = pch + pcl + 1;
    4132:	3401      	adds	r4, #1
    4134:	b2c0      	uxtb	r0, r0
    4136:	7030      	strb	r0, [r6, #0]
    temp = read_byte(register_sp_fixed, false);
    4138:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    413c:	f7fc f972 	bl	424 <read_byte(unsigned short, bool)>
    read_byte(register_pc, false);
    4140:	2100      	movs	r1, #0
    register_pc = pch + pcl + 1;
    4142:	eb04 2000 	add.w	r0, r4, r0, lsl #8
    4146:	b280      	uxth	r0, r0
    4148:	8028      	strh	r0, [r5, #0]
    read_byte(register_pc, false);
    414a:	f7fc f96b 	bl	424 <read_byte(unsigned short, bool)>
    start_read(register_pc, true);
    414e:	882b      	ldrh	r3, [r5, #0]
    current_address = local_address;
    4150:	4a42      	ldr	r2, [pc, #264]	; (425c <opcode_0x60()+0x164>)
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    current_address = local_address;
    4156:	8013      	strh	r3, [r2, #0]
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4158:	d376      	bcc.n	4248 <opcode_0x60()+0x150>
    if ((local_address >= 0x0400) && (local_address < 0x0C00)) return Read_Internal_Write_External; //  Apple II Plus Text Page 1 and 2
    415a:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
    415e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    4162:	d305      	bcc.n	4170 <opcode_0x60()+0x78>
    if ((local_address >= 0x0C00) && (local_address < 0x2000)) return addr_mode; //  Apple II Plus RAM 
    4164:	f5a3 6240 	sub.w	r2, r3, #3072	; 0xc00
    4168:	b292      	uxth	r2, r2
    416a:	f5b2 4f34 	cmp.w	r2, #46080	; 0xb400
    416e:	d36b      	bcc.n	4248 <opcode_0x60()+0x150>
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4170:	4a3b      	ldr	r2, [pc, #236]	; (4260 <opcode_0x60()+0x168>)
        last_access_internal_RAM = 0;
    4172:	2000      	movs	r0, #0
    4174:	493b      	ldr	r1, [pc, #236]	; (4264 <opcode_0x60()+0x16c>)
        if ((run_mode != SINGLE_STEP) && assert_sync)
    4176:	7812      	ldrb	r2, [r2, #0]
        last_access_internal_RAM = 0;
    4178:	7008      	strb	r0, [r1, #0]
        if ((run_mode != SINGLE_STEP) && assert_sync)
    417a:	2a01      	cmp	r2, #1
    417c:	d005      	beq.n	418a <opcode_0x60()+0x92>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    417e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    4182:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    4186:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    if (debug_mode) return;
    418a:	4a37      	ldr	r2, [pc, #220]	; (4268 <opcode_0x60()+0x170>)
    418c:	7812      	ldrb	r2, [r2, #0]
    418e:	b94a      	cbnz	r2, 41a4 <opcode_0x60()+0xac>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    4190:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    4194:	680a      	ldr	r2, [r1, #0]
    4196:	04d0      	lsls	r0, r2, #19
    4198:	d4fc      	bmi.n	4194 <opcode_0x60()+0x9c>
    while (CLK0) {}      // Wait for CLK0 to become low
    419a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
    419e:	680a      	ldr	r2, [r1, #0]
    41a0:	04d2      	lsls	r2, r2, #19
    41a2:	d5fc      	bpl.n	419e <opcode_0x60()+0xa6>
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
    41a4:	4e31      	ldr	r6, [pc, #196]	; (426c <opcode_0x60()+0x174>)
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    41a6:	f04f 4584 	mov.w	r5, #1107296256	; 0x42000000
    41aa:	2202      	movs	r2, #2
    writeback_data = writeback_data | (local_address & 0x2000) >> 10; // 6502_Address[13]   TEENSY_PIN0    GPIO6_DR[3]
    41ac:	0a9c      	lsrs	r4, r3, #10
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    41ae:	06d8      	lsls	r0, r3, #27
    41b0:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    41b4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    41b8:	6829      	ldr	r1, [r5, #0]
    41ba:	4a2d      	ldr	r2, [pc, #180]	; (4270 <opcode_0x60()+0x178>)
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    41bc:	f40c 2e00 	and.w	lr, ip, #524288	; 0x80000
    writeback_data = (0x6DFFFFF3 & GPIO6_DR); // Read in current GPIOx register value and clear the bits we intend to update
    41c0:	400a      	ands	r2, r1
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    41c2:	0299      	lsls	r1, r3, #10
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    41c4:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
    writeback_data = writeback_data | (local_address & 0x8000) << 10; // 6502_Address[15]   TEENSY_PIN23   GPIO6_DR[25]
    41c8:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    41cc:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x1000) >> 10; // 6502_Address[12]   TEENSY_PIN1    GPIO6_DR[2]
    41ce:	f004 010c 	and.w	r1, r4, #12
    writeback_data = writeback_data | (local_address & 0x4000) >> 10; // 6502_Address[14]   TEENSY_PIN2    GPIO9_DR[4]
    41d2:	f004 0410 	and.w	r4, r4, #16
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    41d6:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0002) << 27; // 6502_Address[1]    TEENSY_PIN38   GPIO6_DR[28]
    41d8:	f000 5180 	and.w	r1, r0, #268435456	; 0x10000000
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    41dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    41e0:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    41e2:	0519      	lsls	r1, r3, #20
    GPIO6_DR = writeback_data | (local_address & 0x0001) << 31; // 6502_Address[0]    TEENSY_PIN27   GPIO6_DR[31]
    41e4:	602a      	str	r2, [r5, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    41e6:	009a      	lsls	r2, r3, #2
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    41e8:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    41ec:	6835      	ldr	r5, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0400) << 2; // 6502_Address[10]   TEENSY_PIN32   GPIO7_DR[12]
    41ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    41f2:	430a      	orrs	r2, r1
    writeback_data = (0xCFF3EFFF & GPIO7_DR); // Read in current GPIOx register value and clear the bits we intend to update
    41f4:	491f      	ldr	r1, [pc, #124]	; (4274 <opcode_0x60()+0x17c>)
    41f6:	4029      	ands	r1, r5
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    41f8:	4d1f      	ldr	r5, [pc, #124]	; (4278 <opcode_0x60()+0x180>)
    writeback_data = writeback_data | (local_address & 0x0200) << 20; // 6502_Address[9]    TEENSY_PIN34   GPIO7_DR[29]
    41fa:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0080) << 21; // 6502_Address[7]    TEENSY_PIN35   GPIO7_DR[28]
    41fc:	0559      	lsls	r1, r3, #21
    41fe:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
    4202:	430a      	orrs	r2, r1
    writeback_data = writeback_data | (local_address & 0x0020) << 13; // 6502_Address[5]    TEENSY_PIN36   GPIO7_DR[18]
    4204:	0359      	lsls	r1, r3, #13
    4206:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
    420a:	4311      	orrs	r1, r2
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    420c:	039a      	lsls	r2, r3, #14
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    420e:	ea41 010e 	orr.w	r1, r1, lr
    writeback_data = writeback_data | (local_address & 0x0100) << 14; // 6502_Address[8]    TEENSY_PIN31   GPIO8_DR[22]
    4212:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
    GPIO7_DR = writeback_data | (local_address & 0x0008) << 16; // 6502_Address[3]    TEENSY_PIN37   GPIO7_DR[19]
    4216:	6031      	str	r1, [r6, #0]
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4218:	045e      	lsls	r6, r3, #17
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    421a:	091b      	lsrs	r3, r3, #4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    421c:	f40c 2180 	and.w	r1, ip, #262144	; 0x40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4220:	f406 0600 	and.w	r6, r6, #8388608	; 0x800000
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4224:	f003 0380 	and.w	r3, r3, #128	; 0x80
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4228:	4332      	orrs	r2, r6
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    422a:	4323      	orrs	r3, r4
    writeback_data = (0xFF3BFFFF & GPIO8_DR); // Read in current GPIOx register value and clear the bits we intend to update
    422c:	682c      	ldr	r4, [r5, #0]
    422e:	f424 0444 	bic.w	r4, r4, #12845056	; 0xc40000
    writeback_data = writeback_data | (local_address & 0x0040) << 17; // 6502_Address[6]    TEENSY_PIN30   GPIO8_DR[23]
    4232:	4322      	orrs	r2, r4
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4234:	430a      	orrs	r2, r1
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    4236:	4911      	ldr	r1, [pc, #68]	; (427c <opcode_0x60()+0x184>)
    GPIO8_DR = writeback_data | (local_address & 0x0004) << 16; // 6502_Address[2]    TEENSY_PIN28   GPIO8_DR[18]
    4238:	602a      	str	r2, [r5, #0]
    writeback_data = (0x7FFFFF6F & GPIO9_DR); // Read in current GPIOx register value and clear the bits we intend to update
    423a:	4a11      	ldr	r2, [pc, #68]	; (4280 <opcode_0x60()+0x188>)
    423c:	680c      	ldr	r4, [r1, #0]
    423e:	4022      	ands	r2, r4
    writeback_data = writeback_data | (local_address & 0x0800) >> 4; // 6502_Address[11]   TEENSY_PIN33   GPIO9_DR[7]
    4240:	4313      	orrs	r3, r2
    GPIO9_DR = writeback_data | (local_address & 0x0010) << 27; // 6502_Address[4]    TEENSY_PIN29   GPIO9_DR[31]
    4242:	4303      	orrs	r3, r0
    4244:	600b      	str	r3, [r1, #0]
    return;
}
    4246:	bd70      	pop	{r4, r5, r6, pc}
    if ((local_address >= 0x0000) && (local_address < 0x0400)) return addr_mode; //  6502 ZeroPage and Stack
    4248:	4a0e      	ldr	r2, [pc, #56]	; (4284 <opcode_0x60()+0x18c>)
    if (internal_address_check(current_address) > Read_Internal_Write_External) {  // Either Fast mode
    424a:	7812      	ldrb	r2, [r2, #0]
    424c:	2a01      	cmp	r2, #1
    424e:	d98f      	bls.n	4170 <opcode_0x60()+0x78>
    4250:	bd70      	pop	{r4, r5, r6, pc}
    4252:	bf00      	nop
    4254:	2001508c 	.word	0x2001508c
    4258:	200047c1 	.word	0x200047c1
    425c:	20015088 	.word	0x20015088
    4260:	200150a6 	.word	0x200150a6
    4264:	200150a1 	.word	0x200150a1
    4268:	200047be 	.word	0x200047be
    426c:	42004000 	.word	0x42004000
    4270:	6dfffff3 	.word	0x6dfffff3
    4274:	cff3efff 	.word	0xcff3efff
    4278:	42008000 	.word	0x42008000
    427c:	4200c000 	.word	0x4200c000
    4280:	7fffff6f 	.word	0x7fffff6f
    4284:	20015098 	.word	0x20015098

00004288 <opcode_0x07()>:
    register_pc++;
    4288:	4b1b      	ldr	r3, [pc, #108]	; (42f8 <opcode_0x07()+0x70>)
    return read_byte(register_pc, false);
    428a:	2100      	movs	r1, #0
    register_pc++;
    428c:	8818      	ldrh	r0, [r3, #0]
    428e:	3001      	adds	r0, #1
    4290:	b280      	uxth	r0, r0
    register_a = register_a | local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
void opcode_0x07() {
    4292:	b570      	push	{r4, r5, r6, lr}
    4294:	b082      	sub	sp, #8
    4296:	8018      	strh	r0, [r3, #0]
    effective_address = Fetch_Immediate();
    4298:	4c18      	ldr	r4, [pc, #96]	; (42fc <opcode_0x07()+0x74>)
    return read_byte(register_pc, false);
    429a:	f7fc f8c3 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    429e:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    42a0:	2100      	movs	r1, #0
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42a2:	4d17      	ldr	r5, [pc, #92]	; (4300 <opcode_0x07()+0x78>)
    effective_address = Fetch_Immediate();
    42a4:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    42a6:	f7fc f8bd 	bl	424 <read_byte(unsigned short, bool)>
    42aa:	0606      	lsls	r6, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    42ac:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    42b0:	4e14      	ldr	r6, [pc, #80]	; (4304 <opcode_0x07()+0x7c>)
    local_data = ((local_data << 1) & 0xFE);
    42b2:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42b4:	782b      	ldrb	r3, [r5, #0]
    register_a = register_a | local_data;
    42b6:	7832      	ldrb	r2, [r6, #0]
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    42b8:	bf4c      	ite	mi
    42ba:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    42be:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    42c2:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    42c4:	0610      	lsls	r0, r2, #24
    42c6:	7032      	strb	r2, [r6, #0]
    42c8:	d410      	bmi.n	42ec <opcode_0x07()+0x64>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    42ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    42ce:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    42d0:	b972      	cbnz	r2, 42f0 <opcode_0x07()+0x68>
    42d2:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    42d6:	8820      	ldrh	r0, [r4, #0]
    42d8:	9101      	str	r1, [sp, #4]
    42da:	702b      	strb	r3, [r5, #0]
    42dc:	f7fc fa5e 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    42e0:	9901      	ldr	r1, [sp, #4]
    42e2:	8820      	ldrh	r0, [r4, #0]
    42e4:	f7fc fa5a 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0x07 - SLO - ZeroPage
    42e8:	b002      	add	sp, #8
    42ea:	bd70      	pop	{r4, r5, r6, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    42ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    42f0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    42f4:	e7ef      	b.n	42d6 <opcode_0x07()+0x4e>
    42f6:	bf00      	nop
    42f8:	2001508c 	.word	0x2001508c
    42fc:	2001508a 	.word	0x2001508a
    4300:	200047c0 	.word	0x200047c0
    4304:	200150a3 	.word	0x200150a3

00004308 <opcode_0x17()>:
void opcode_0x17() {
    4308:	b530      	push	{r4, r5, lr}
    430a:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    430c:	4c14      	ldr	r4, [pc, #80]	; (4360 <opcode_0x17()+0x58>)
    Double_WriteBack(Calculate_SLO(Fetch_ZeroPage_X()));
    430e:	f7fc fbb7 	bl	a80 <Fetch_ZeroPage_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4312:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4314:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    4318:	4d12      	ldr	r5, [pc, #72]	; (4364 <opcode_0x17()+0x5c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    431a:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    431c:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    431e:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4320:	bf4c      	ite	mi
    4322:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4326:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    432a:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    432c:	0610      	lsls	r0, r2, #24
    432e:	702a      	strb	r2, [r5, #0]
    4330:	d411      	bmi.n	4356 <opcode_0x17()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4336:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4338:	b97a      	cbnz	r2, 435a <opcode_0x17()+0x52>
    433a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    433e:	4d0a      	ldr	r5, [pc, #40]	; (4368 <opcode_0x17()+0x60>)
    4340:	9101      	str	r1, [sp, #4]
    4342:	8828      	ldrh	r0, [r5, #0]
    4344:	7023      	strb	r3, [r4, #0]
    4346:	f7fc fa29 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    434a:	9901      	ldr	r1, [sp, #4]
    434c:	8828      	ldrh	r0, [r5, #0]
    434e:	f7fc fa25 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x17 - SLO - ZeroPage , X
    4352:	b003      	add	sp, #12
    4354:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    435a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    435e:	e7ee      	b.n	433e <opcode_0x17()+0x36>
    4360:	200047c0 	.word	0x200047c0
    4364:	200150a3 	.word	0x200150a3
    4368:	2001508a 	.word	0x2001508a

0000436c <opcode_0x03()>:
void opcode_0x03() {
    436c:	b530      	push	{r4, r5, lr}
    436e:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4370:	4c14      	ldr	r4, [pc, #80]	; (43c4 <opcode_0x03()+0x58>)
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_X()));
    4372:	f7fc fc47 	bl	c04 <Fetch_Indexed_Indirect_X()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4376:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4378:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    437c:	4d12      	ldr	r5, [pc, #72]	; (43c8 <opcode_0x03()+0x5c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    437e:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    4380:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    4382:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4384:	bf4c      	ite	mi
    4386:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    438a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    438e:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4390:	0610      	lsls	r0, r2, #24
    4392:	702a      	strb	r2, [r5, #0]
    4394:	d411      	bmi.n	43ba <opcode_0x03()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    439a:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    439c:	b97a      	cbnz	r2, 43be <opcode_0x03()+0x52>
    439e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    43a2:	4d0a      	ldr	r5, [pc, #40]	; (43cc <opcode_0x03()+0x60>)
    43a4:	9101      	str	r1, [sp, #4]
    43a6:	8828      	ldrh	r0, [r5, #0]
    43a8:	7023      	strb	r3, [r4, #0]
    43aa:	f7fc f9f7 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    43ae:	9901      	ldr	r1, [sp, #4]
    43b0:	8828      	ldrh	r0, [r5, #0]
    43b2:	f7fc f9f3 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x03 - SLO - Indexed Indirect X
    43b6:	b003      	add	sp, #12
    43b8:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    43ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    43be:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    43c2:	e7ee      	b.n	43a2 <opcode_0x03()+0x36>
    43c4:	200047c0 	.word	0x200047c0
    43c8:	200150a3 	.word	0x200150a3
    43cc:	2001508a 	.word	0x2001508a

000043d0 <opcode_0x13()>:
void opcode_0x13() {
    43d0:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    43d2:	2001      	movs	r0, #1
void opcode_0x13() {
    43d4:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Indexed_Indirect_Y(1)));
    43d6:	f7fc fc3f 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    43da:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    43dc:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    43e0:	4d12      	ldr	r5, [pc, #72]	; (442c <opcode_0x13()+0x5c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    43e2:	4c13      	ldr	r4, [pc, #76]	; (4430 <opcode_0x13()+0x60>)
    register_a = register_a | local_data;
    43e4:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    43e6:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    43e8:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    43ea:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    43ee:	bf4c      	ite	mi
    43f0:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    43f4:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    43f8:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    43fa:	702a      	strb	r2, [r5, #0]
    43fc:	d411      	bmi.n	4422 <opcode_0x13()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    43fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4402:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4404:	b97a      	cbnz	r2, 4426 <opcode_0x13()+0x56>
    4406:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    440a:	4d0a      	ldr	r5, [pc, #40]	; (4434 <opcode_0x13()+0x64>)
    440c:	9101      	str	r1, [sp, #4]
    440e:	8828      	ldrh	r0, [r5, #0]
    4410:	7023      	strb	r3, [r4, #0]
    4412:	f7fc f9c3 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4416:	9901      	ldr	r1, [sp, #4]
    4418:	8828      	ldrh	r0, [r5, #0]
    441a:	f7fc f9bf 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x13 - SLO - Indirect Indexed  Y
    441e:	b003      	add	sp, #12
    4420:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4426:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    442a:	e7ee      	b.n	440a <opcode_0x13()+0x3a>
    442c:	200150a3 	.word	0x200150a3
    4430:	200047c0 	.word	0x200047c0
    4434:	2001508a 	.word	0x2001508a

00004438 <opcode_0x0F()>:
void opcode_0x0F() {
    4438:	b530      	push	{r4, r5, lr}
    443a:	b083      	sub	sp, #12
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    443c:	4c14      	ldr	r4, [pc, #80]	; (4490 <opcode_0x0F()+0x58>)
    Double_WriteBack(Calculate_SLO(Fetch_Absolute()));
    443e:	f7fc fb5f 	bl	b00 <Fetch_Absolute()>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4442:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4444:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    4448:	4d12      	ldr	r5, [pc, #72]	; (4494 <opcode_0x0F()+0x5c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    444a:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    444c:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    444e:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4450:	bf4c      	ite	mi
    4452:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4456:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a | local_data;
    445a:	430a      	orrs	r2, r1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    445c:	0610      	lsls	r0, r2, #24
    445e:	702a      	strb	r2, [r5, #0]
    4460:	d411      	bmi.n	4486 <opcode_0x0F()+0x4e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4466:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4468:	b97a      	cbnz	r2, 448a <opcode_0x0F()+0x52>
    446a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    446e:	4d0a      	ldr	r5, [pc, #40]	; (4498 <opcode_0x0F()+0x60>)
    4470:	9101      	str	r1, [sp, #4]
    4472:	8828      	ldrh	r0, [r5, #0]
    4474:	7023      	strb	r3, [r4, #0]
    4476:	f7fc f991 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    447a:	9901      	ldr	r1, [sp, #4]
    447c:	8828      	ldrh	r0, [r5, #0]
    447e:	f7fc f98d 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x0F - SLO - Absolute
    4482:	b003      	add	sp, #12
    4484:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    448a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    448e:	e7ee      	b.n	446e <opcode_0x0F()+0x36>
    4490:	200047c0 	.word	0x200047c0
    4494:	200150a3 	.word	0x200150a3
    4498:	2001508a 	.word	0x2001508a

0000449c <opcode_0x1F()>:
void opcode_0x1F() {
    449c:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    449e:	2001      	movs	r0, #1
void opcode_0x1F() {
    44a0:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_X(1)));
    44a2:	f7fc fb4b 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    44a6:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    44a8:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    44ac:	4d12      	ldr	r5, [pc, #72]	; (44f8 <opcode_0x1F()+0x5c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    44ae:	4c13      	ldr	r4, [pc, #76]	; (44fc <opcode_0x1F()+0x60>)
    register_a = register_a | local_data;
    44b0:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    44b2:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    44b4:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    44b6:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    44ba:	bf4c      	ite	mi
    44bc:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    44c0:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    44c4:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    44c6:	702a      	strb	r2, [r5, #0]
    44c8:	d411      	bmi.n	44ee <opcode_0x1F()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    44ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    44ce:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    44d0:	b97a      	cbnz	r2, 44f2 <opcode_0x1F()+0x56>
    44d2:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    44d6:	4d0a      	ldr	r5, [pc, #40]	; (4500 <opcode_0x1F()+0x64>)
    44d8:	9101      	str	r1, [sp, #4]
    44da:	8828      	ldrh	r0, [r5, #0]
    44dc:	7023      	strb	r3, [r4, #0]
    44de:	f7fc f95d 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    44e2:	9901      	ldr	r1, [sp, #4]
    44e4:	8828      	ldrh	r0, [r5, #0]
    44e6:	f7fc f959 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x1F - SLO - Absolute , X
    44ea:	b003      	add	sp, #12
    44ec:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    44ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    44f2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    44f6:	e7ee      	b.n	44d6 <opcode_0x1F()+0x3a>
    44f8:	200150a3 	.word	0x200150a3
    44fc:	200047c0 	.word	0x200047c0
    4500:	2001508a 	.word	0x2001508a

00004504 <opcode_0x1B()>:
void opcode_0x1B() {
    4504:	b530      	push	{r4, r5, lr}
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    4506:	2001      	movs	r0, #1
void opcode_0x1B() {
    4508:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_SLO(Fetch_Absolute_Y(1)));
    450a:	f7fc fb49 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    450e:	0605      	lsls	r5, r0, #24
    local_data = ((local_data << 1) & 0xFE);
    4510:	ea4f 0140 	mov.w	r1, r0, lsl #1
    register_a = register_a | local_data;
    4514:	4d12      	ldr	r5, [pc, #72]	; (4560 <opcode_0x1B()+0x5c>)
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4516:	4c13      	ldr	r4, [pc, #76]	; (4564 <opcode_0x1B()+0x60>)
    register_a = register_a | local_data;
    4518:	782a      	ldrb	r2, [r5, #0]
    local_data = ((local_data << 1) & 0xFE);
    451a:	b2c9      	uxtb	r1, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    451c:	7823      	ldrb	r3, [r4, #0]
    register_a = register_a | local_data;
    451e:	ea42 0201 	orr.w	r2, r2, r1
    if ((0x80 & local_data) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    4522:	bf4c      	ite	mi
    4524:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4528:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    452c:	0610      	lsls	r0, r2, #24
    register_a = register_a | local_data;
    452e:	702a      	strb	r2, [r5, #0]
    4530:	d411      	bmi.n	4556 <opcode_0x1B()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4536:	7023      	strb	r3, [r4, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4538:	b97a      	cbnz	r2, 455a <opcode_0x1B()+0x56>
    453a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    453e:	4d0a      	ldr	r5, [pc, #40]	; (4568 <opcode_0x1B()+0x64>)
    4540:	9101      	str	r1, [sp, #4]
    4542:	8828      	ldrh	r0, [r5, #0]
    4544:	7023      	strb	r3, [r4, #0]
    4546:	f7fc f929 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    454a:	9901      	ldr	r1, [sp, #4]
    454c:	8828      	ldrh	r0, [r5, #0]
    454e:	f7fc f925 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x1B - SLO - Absolute , Y
    4552:	b003      	add	sp, #12
    4554:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    455a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    455e:	e7ee      	b.n	453e <opcode_0x1B()+0x3a>
    4560:	200150a3 	.word	0x200150a3
    4564:	200047c0 	.word	0x200047c0
    4568:	2001508a 	.word	0x2001508a

0000456c <opcode_0x27()>:
    register_pc++;
    456c:	4b1c      	ldr	r3, [pc, #112]	; (45e0 <opcode_0x27()+0x74>)
    return read_byte(register_pc, false);
    456e:	2100      	movs	r1, #0
    register_pc++;
    4570:	8818      	ldrh	r0, [r3, #0]
    4572:	3001      	adds	r0, #1
    4574:	b280      	uxth	r0, r0
    register_a = register_a & local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
void opcode_0x27() {
    4576:	b530      	push	{r4, r5, lr}
    4578:	b083      	sub	sp, #12
    457a:	8018      	strh	r0, [r3, #0]
    effective_address = Fetch_Immediate();
    457c:	4c19      	ldr	r4, [pc, #100]	; (45e4 <opcode_0x27()+0x78>)
    return read_byte(register_pc, false);
    457e:	f7fb ff51 	bl	424 <read_byte(unsigned short, bool)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4582:	4d19      	ldr	r5, [pc, #100]	; (45e8 <opcode_0x27()+0x7c>)
    effective_address = Fetch_Immediate();
    4584:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4586:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    4588:	8020      	strh	r0, [r4, #0]
    return read_byte(effective_address, false);
    458a:	f7fb ff4b 	bl	424 <read_byte(unsigned short, bool)>
    458e:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4590:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4592:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4596:	bf4c      	ite	mi
    4598:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    459c:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    45a0:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    45a4:	4a11      	ldr	r2, [pc, #68]	; (45ec <opcode_0x27()+0x80>)
    45a6:	f892 c000 	ldrb.w	ip, [r2]
    local_data = (local_data << 1) | old_carry_flag;
    45aa:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    45ac:	ea00 000c 	and.w	r0, r0, ip
    45b0:	7010      	strb	r0, [r2, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    45b2:	0602      	lsls	r2, r0, #24
    45b4:	d40f      	bmi.n	45d6 <opcode_0x27()+0x6a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    45b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    45ba:	b970      	cbnz	r0, 45da <opcode_0x27()+0x6e>
    45bc:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    45c0:	8820      	ldrh	r0, [r4, #0]
    45c2:	9101      	str	r1, [sp, #4]
    45c4:	702b      	strb	r3, [r5, #0]
    45c6:	f7fc f8e9 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    45ca:	9901      	ldr	r1, [sp, #4]
    45cc:	8820      	ldrh	r0, [r4, #0]
    45ce:	f7fc f8e5 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0x27 - RLA - ZeroPage
    45d2:	b003      	add	sp, #12
    45d4:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    45d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    45da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    45de:	e7ef      	b.n	45c0 <opcode_0x27()+0x54>
    45e0:	2001508c 	.word	0x2001508c
    45e4:	2001508a 	.word	0x2001508a
    45e8:	200047c0 	.word	0x200047c0
    45ec:	200150a3 	.word	0x200150a3

000045f0 <opcode_0x37()>:
void opcode_0x37() {
    45f0:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    45f2:	4d16      	ldr	r5, [pc, #88]	; (464c <opcode_0x37()+0x5c>)
void opcode_0x37() {
    45f4:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_ZeroPage_X()));
    45f6:	f7fc fa43 	bl	a80 <Fetch_ZeroPage_X()>
    register_a = register_a & local_data;
    45fa:	4c15      	ldr	r4, [pc, #84]	; (4650 <opcode_0x37()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    45fc:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    45fe:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4600:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4604:	bf4c      	ite	mi
    4606:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    460a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    460e:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    4612:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    4614:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    4616:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4618:	0602      	lsls	r2, r0, #24
    461a:	7020      	strb	r0, [r4, #0]
    461c:	d410      	bmi.n	4640 <opcode_0x37()+0x50>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    461e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4622:	b978      	cbnz	r0, 4644 <opcode_0x37()+0x54>
    4624:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    4628:	4c0a      	ldr	r4, [pc, #40]	; (4654 <opcode_0x37()+0x64>)
    462a:	9101      	str	r1, [sp, #4]
    462c:	8820      	ldrh	r0, [r4, #0]
    462e:	702b      	strb	r3, [r5, #0]
    4630:	f7fc f8b4 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4634:	9901      	ldr	r1, [sp, #4]
    4636:	8820      	ldrh	r0, [r4, #0]
    4638:	f7fc f8b0 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x37 - RLA - ZeroPage , X
    463c:	b003      	add	sp, #12
    463e:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4644:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4648:	e7ee      	b.n	4628 <opcode_0x37()+0x38>
    464a:	bf00      	nop
    464c:	200047c0 	.word	0x200047c0
    4650:	200150a3 	.word	0x200150a3
    4654:	2001508a 	.word	0x2001508a

00004658 <opcode_0x23()>:
void opcode_0x23() {
    4658:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    465a:	4d16      	ldr	r5, [pc, #88]	; (46b4 <opcode_0x23()+0x5c>)
void opcode_0x23() {
    465c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_X()));
    465e:	f7fc fad1 	bl	c04 <Fetch_Indexed_Indirect_X()>
    register_a = register_a & local_data;
    4662:	4c15      	ldr	r4, [pc, #84]	; (46b8 <opcode_0x23()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4664:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4666:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4668:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    466c:	bf4c      	ite	mi
    466e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4672:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4676:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    467a:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    467c:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    467e:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4680:	0602      	lsls	r2, r0, #24
    4682:	7020      	strb	r0, [r4, #0]
    4684:	d410      	bmi.n	46a8 <opcode_0x23()+0x50>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    468a:	b978      	cbnz	r0, 46ac <opcode_0x23()+0x54>
    468c:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    4690:	4c0a      	ldr	r4, [pc, #40]	; (46bc <opcode_0x23()+0x64>)
    4692:	9101      	str	r1, [sp, #4]
    4694:	8820      	ldrh	r0, [r4, #0]
    4696:	702b      	strb	r3, [r5, #0]
    4698:	f7fc f880 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    469c:	9901      	ldr	r1, [sp, #4]
    469e:	8820      	ldrh	r0, [r4, #0]
    46a0:	f7fc f87c 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x23 - RLA - Indexed Indirect X
    46a4:	b003      	add	sp, #12
    46a6:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    46a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    46ac:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    46b0:	e7ee      	b.n	4690 <opcode_0x23()+0x38>
    46b2:	bf00      	nop
    46b4:	200047c0 	.word	0x200047c0
    46b8:	200150a3 	.word	0x200150a3
    46bc:	2001508a 	.word	0x2001508a

000046c0 <opcode_0x33()>:
void opcode_0x33() {
    46c0:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    46c2:	4d16      	ldr	r5, [pc, #88]	; (471c <opcode_0x33()+0x5c>)
void opcode_0x33() {
    46c4:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    46c6:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    46c8:	4c15      	ldr	r4, [pc, #84]	; (4720 <opcode_0x33()+0x60>)
    Double_WriteBack(Calculate_RLA(Fetch_Indexed_Indirect_Y(1)));
    46ca:	f7fc fac5 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    46ce:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    46d0:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    46d2:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    46d6:	bf4c      	ite	mi
    46d8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    46dc:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    46e0:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    46e4:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    46e6:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    46e8:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    46ea:	0602      	lsls	r2, r0, #24
    46ec:	7020      	strb	r0, [r4, #0]
    46ee:	d410      	bmi.n	4712 <opcode_0x33()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    46f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    46f4:	b978      	cbnz	r0, 4716 <opcode_0x33()+0x56>
    46f6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    46fa:	4c0a      	ldr	r4, [pc, #40]	; (4724 <opcode_0x33()+0x64>)
    46fc:	9101      	str	r1, [sp, #4]
    46fe:	8820      	ldrh	r0, [r4, #0]
    4700:	702b      	strb	r3, [r5, #0]
    4702:	f7fc f84b 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4706:	9901      	ldr	r1, [sp, #4]
    4708:	8820      	ldrh	r0, [r4, #0]
    470a:	f7fc f847 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x33 - RLA - Indirect Indexed  Y
    470e:	b003      	add	sp, #12
    4710:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4716:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    471a:	e7ee      	b.n	46fa <opcode_0x33()+0x3a>
    471c:	200047c0 	.word	0x200047c0
    4720:	200150a3 	.word	0x200150a3
    4724:	2001508a 	.word	0x2001508a

00004728 <opcode_0x2F()>:
void opcode_0x2F() {
    4728:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    472a:	4d16      	ldr	r5, [pc, #88]	; (4784 <opcode_0x2F()+0x5c>)
void opcode_0x2F() {
    472c:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute()));
    472e:	f7fc f9e7 	bl	b00 <Fetch_Absolute()>
    register_a = register_a & local_data;
    4732:	4c15      	ldr	r4, [pc, #84]	; (4788 <opcode_0x2F()+0x60>)
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4734:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4736:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4738:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    473c:	bf4c      	ite	mi
    473e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4742:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4746:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    474a:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    474c:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    474e:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4750:	0602      	lsls	r2, r0, #24
    4752:	7020      	strb	r0, [r4, #0]
    4754:	d410      	bmi.n	4778 <opcode_0x2F()+0x50>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    475a:	b978      	cbnz	r0, 477c <opcode_0x2F()+0x54>
    475c:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    4760:	4c0a      	ldr	r4, [pc, #40]	; (478c <opcode_0x2F()+0x64>)
    4762:	9101      	str	r1, [sp, #4]
    4764:	8820      	ldrh	r0, [r4, #0]
    4766:	702b      	strb	r3, [r5, #0]
    4768:	f7fc f818 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    476c:	9901      	ldr	r1, [sp, #4]
    476e:	8820      	ldrh	r0, [r4, #0]
    4770:	f7fc f814 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x2F - RLA - Absolute
    4774:	b003      	add	sp, #12
    4776:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    477c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4780:	e7ee      	b.n	4760 <opcode_0x2F()+0x38>
    4782:	bf00      	nop
    4784:	200047c0 	.word	0x200047c0
    4788:	200150a3 	.word	0x200150a3
    478c:	2001508a 	.word	0x2001508a

00004790 <opcode_0x3F()>:
void opcode_0x3F() {
    4790:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4792:	4d16      	ldr	r5, [pc, #88]	; (47ec <opcode_0x3F()+0x5c>)
void opcode_0x3F() {
    4794:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    4796:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    4798:	4c15      	ldr	r4, [pc, #84]	; (47f0 <opcode_0x3F()+0x60>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_X(1)));
    479a:	f7fc f9cf 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    479e:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    47a0:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    47a2:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    47a6:	bf4c      	ite	mi
    47a8:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    47ac:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    47b0:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    47b4:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    47b6:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    47b8:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    47ba:	0602      	lsls	r2, r0, #24
    47bc:	7020      	strb	r0, [r4, #0]
    47be:	d410      	bmi.n	47e2 <opcode_0x3F()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    47c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    47c4:	b978      	cbnz	r0, 47e6 <opcode_0x3F()+0x56>
    47c6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    47ca:	4c0a      	ldr	r4, [pc, #40]	; (47f4 <opcode_0x3F()+0x64>)
    47cc:	9101      	str	r1, [sp, #4]
    47ce:	8820      	ldrh	r0, [r4, #0]
    47d0:	702b      	strb	r3, [r5, #0]
    47d2:	f7fb ffe3 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    47d6:	9901      	ldr	r1, [sp, #4]
    47d8:	8820      	ldrh	r0, [r4, #0]
    47da:	f7fb ffdf 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x3F - RLA - Absolute , X
    47de:	b003      	add	sp, #12
    47e0:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    47e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    47e6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    47ea:	e7ee      	b.n	47ca <opcode_0x3F()+0x3a>
    47ec:	200047c0 	.word	0x200047c0
    47f0:	200150a3 	.word	0x200150a3
    47f4:	2001508a 	.word	0x2001508a

000047f8 <opcode_0x3B()>:
void opcode_0x3B() {
    47f8:	b530      	push	{r4, r5, lr}
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    47fa:	4d16      	ldr	r5, [pc, #88]	; (4854 <opcode_0x3B()+0x5c>)
void opcode_0x3B() {
    47fc:	b083      	sub	sp, #12
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    47fe:	2001      	movs	r0, #1
    register_a = register_a & local_data;
    4800:	4c15      	ldr	r4, [pc, #84]	; (4858 <opcode_0x3B()+0x60>)
    Double_WriteBack(Calculate_RLA(Fetch_Absolute_Y(1)));
    4802:	f7fc f9cd 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    4806:	782b      	ldrb	r3, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    4808:	0601      	lsls	r1, r0, #24
    old_carry_flag = 0x1 & register_flags; // Store the old carry flag to be rotated in
    480a:	f003 0201 	and.w	r2, r3, #1
    if (0x80 & local_data) register_flags = register_flags | 0x01; // Set the C flag
    480e:	bf4c      	ite	mi
    4810:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4814:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    local_data = (local_data << 1) | old_carry_flag;
    4818:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
    register_a = register_a & local_data;
    481c:	7822      	ldrb	r2, [r4, #0]
    local_data = (local_data << 1) | old_carry_flag;
    481e:	b2c1      	uxtb	r1, r0
    register_a = register_a & local_data;
    4820:	4010      	ands	r0, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4822:	0602      	lsls	r2, r0, #24
    4824:	7020      	strb	r0, [r4, #0]
    4826:	d410      	bmi.n	484a <opcode_0x3B()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    482c:	b978      	cbnz	r0, 484e <opcode_0x3B()+0x56>
    482e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    4832:	4c0a      	ldr	r4, [pc, #40]	; (485c <opcode_0x3B()+0x64>)
    4834:	9101      	str	r1, [sp, #4]
    4836:	8820      	ldrh	r0, [r4, #0]
    4838:	702b      	strb	r3, [r5, #0]
    483a:	f7fb ffaf 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    483e:	9901      	ldr	r1, [sp, #4]
    4840:	8820      	ldrh	r0, [r4, #0]
    4842:	f7fb ffab 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x3B - RLA - Absolute , Y
    4846:	b003      	add	sp, #12
    4848:	bd30      	pop	{r4, r5, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    484a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    484e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4852:	e7ee      	b.n	4832 <opcode_0x3B()+0x3a>
    4854:	200047c0 	.word	0x200047c0
    4858:	200150a3 	.word	0x200150a3
    485c:	2001508a 	.word	0x2001508a

00004860 <opcode_0x47()>:
    register_pc++;
    4860:	4b19      	ldr	r3, [pc, #100]	; (48c8 <opcode_0x47()+0x68>)
    return read_byte(register_pc, false);
    4862:	2100      	movs	r1, #0
    register_pc++;
    4864:	8818      	ldrh	r0, [r3, #0]
    4866:	3001      	adds	r0, #1
    4868:	b280      	uxth	r0, r0
    register_a = register_a ^ local_data;

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return local_data;
}
void opcode_0x47() {
    486a:	b570      	push	{r4, r5, r6, lr}
    effective_address = Fetch_Immediate();
    486c:	4d17      	ldr	r5, [pc, #92]	; (48cc <opcode_0x47()+0x6c>)
    register_a = register_a ^ local_data;
    486e:	4e18      	ldr	r6, [pc, #96]	; (48d0 <opcode_0x47()+0x70>)
    register_pc++;
    4870:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    4872:	f7fb fdd7 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    4876:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4878:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    487a:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    487c:	f7fb fdd2 	bl	424 <read_byte(unsigned short, bool)>
    4880:	7831      	ldrb	r1, [r6, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4882:	07c4      	lsls	r4, r0, #31
    4884:	4a13      	ldr	r2, [pc, #76]	; (48d4 <opcode_0x47()+0x74>)
    local_data = (0x7F & (local_data >> 1));
    4886:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    488a:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    488c:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4890:	bf4c      	ite	mi
    4892:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4896:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    489a:	7030      	strb	r0, [r6, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    489c:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    489e:	8828      	ldrh	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    48a0:	bf4c      	ite	mi
    48a2:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    48a6:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    48aa:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    48ac:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    48ae:	bf0c      	ite	eq
    48b0:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    48b4:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    48b8:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    48ba:	f7fb ff6f 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    48be:	4621      	mov	r1, r4
    48c0:	8828      	ldrh	r0, [r5, #0]
    48c2:	f7fb ff6b 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage()));
    Begin_Fetch_Next_Opcode();
    return;
} // 0x47 - SRE - ZeroPage
    48c6:	bd70      	pop	{r4, r5, r6, pc}
    48c8:	2001508c 	.word	0x2001508c
    48cc:	2001508a 	.word	0x2001508a
    48d0:	200150a3 	.word	0x200150a3
    48d4:	200047c0 	.word	0x200047c0

000048d8 <opcode_0x57()>:
void opcode_0x57() {
    48d8:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    48da:	4d14      	ldr	r5, [pc, #80]	; (492c <opcode_0x57()+0x54>)
    Double_WriteBack(Calculate_SRE(Fetch_ZeroPage_X()));
    48dc:	f7fc f8d0 	bl	a80 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    48e0:	4a13      	ldr	r2, [pc, #76]	; (4930 <opcode_0x57()+0x58>)
    48e2:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    48e4:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    48e6:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    48ea:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    48ec:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    48f0:	bf4c      	ite	mi
    48f2:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    48f6:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    48fa:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    48fc:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    48fe:	4d0d      	ldr	r5, [pc, #52]	; (4934 <opcode_0x57()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4900:	bf4c      	ite	mi
    4902:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4906:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    490a:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    490c:	8828      	ldrh	r0, [r5, #0]
    490e:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4910:	bf0c      	ite	eq
    4912:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4916:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    491a:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    491c:	f7fb ff3e 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4920:	4621      	mov	r1, r4
    4922:	8828      	ldrh	r0, [r5, #0]
    4924:	f7fb ff3a 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x57 - SRE - ZeroPage , X
    4928:	bd38      	pop	{r3, r4, r5, pc}
    492a:	bf00      	nop
    492c:	200150a3 	.word	0x200150a3
    4930:	200047c0 	.word	0x200047c0
    4934:	2001508a 	.word	0x2001508a

00004938 <opcode_0x43()>:
void opcode_0x43() {
    4938:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    493a:	4d14      	ldr	r5, [pc, #80]	; (498c <opcode_0x43()+0x54>)
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_X()));
    493c:	f7fc f962 	bl	c04 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4940:	4a13      	ldr	r2, [pc, #76]	; (4990 <opcode_0x43()+0x58>)
    4942:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    4944:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    4946:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    494a:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    494c:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4950:	bf4c      	ite	mi
    4952:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4956:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    495a:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    495c:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    495e:	4d0d      	ldr	r5, [pc, #52]	; (4994 <opcode_0x43()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4960:	bf4c      	ite	mi
    4962:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4966:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    496a:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    496c:	8828      	ldrh	r0, [r5, #0]
    496e:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4970:	bf0c      	ite	eq
    4972:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4976:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    497a:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    497c:	f7fb ff0e 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4980:	4621      	mov	r1, r4
    4982:	8828      	ldrh	r0, [r5, #0]
    4984:	f7fb ff0a 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x43 - SRE - Indexed Indirect X
    4988:	bd38      	pop	{r3, r4, r5, pc}
    498a:	bf00      	nop
    498c:	200150a3 	.word	0x200150a3
    4990:	200047c0 	.word	0x200047c0
    4994:	2001508a 	.word	0x2001508a

00004998 <opcode_0x53()>:
void opcode_0x53() {
    4998:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    499a:	4d14      	ldr	r5, [pc, #80]	; (49ec <opcode_0x53()+0x54>)
    Double_WriteBack(Calculate_SRE(Fetch_Indexed_Indirect_Y(1)));
    499c:	2001      	movs	r0, #1
    499e:	f7fc f95b 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    49a2:	4a13      	ldr	r2, [pc, #76]	; (49f0 <opcode_0x53()+0x58>)
    register_a = register_a ^ local_data;
    49a4:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    49a6:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    49a8:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    49ac:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    49ae:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    49b2:	bf4c      	ite	mi
    49b4:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    49b8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    49bc:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    49be:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    49c0:	4d0c      	ldr	r5, [pc, #48]	; (49f4 <opcode_0x53()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    49c2:	bf4c      	ite	mi
    49c4:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    49c8:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    49cc:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    49ce:	8828      	ldrh	r0, [r5, #0]
    49d0:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    49d2:	bf0c      	ite	eq
    49d4:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    49d8:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    49dc:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    49de:	f7fb fedd 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    49e2:	4621      	mov	r1, r4
    49e4:	8828      	ldrh	r0, [r5, #0]
    49e6:	f7fb fed9 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x53 - SRE - Indirect Indexed  Y
    49ea:	bd38      	pop	{r3, r4, r5, pc}
    49ec:	200150a3 	.word	0x200150a3
    49f0:	200047c0 	.word	0x200047c0
    49f4:	2001508a 	.word	0x2001508a

000049f8 <opcode_0x4F()>:
void opcode_0x4F() {
    49f8:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    49fa:	4d14      	ldr	r5, [pc, #80]	; (4a4c <opcode_0x4F()+0x54>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute()));
    49fc:	f7fc f880 	bl	b00 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4a00:	4a13      	ldr	r2, [pc, #76]	; (4a50 <opcode_0x4F()+0x58>)
    4a02:	07c4      	lsls	r4, r0, #31
    register_a = register_a ^ local_data;
    4a04:	7829      	ldrb	r1, [r5, #0]
    local_data = (0x7F & (local_data >> 1));
    4a06:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4a0a:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    4a0c:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4a10:	bf4c      	ite	mi
    4a12:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4a16:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    4a1a:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a1c:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    4a1e:	4d0d      	ldr	r5, [pc, #52]	; (4a54 <opcode_0x4F()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a20:	bf4c      	ite	mi
    4a22:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4a26:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4a2a:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    4a2c:	8828      	ldrh	r0, [r5, #0]
    4a2e:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4a30:	bf0c      	ite	eq
    4a32:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4a36:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4a3a:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4a3c:	f7fb feae 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4a40:	4621      	mov	r1, r4
    4a42:	8828      	ldrh	r0, [r5, #0]
    4a44:	f7fb feaa 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x4F - SRE - Absolute
    4a48:	bd38      	pop	{r3, r4, r5, pc}
    4a4a:	bf00      	nop
    4a4c:	200150a3 	.word	0x200150a3
    4a50:	200047c0 	.word	0x200047c0
    4a54:	2001508a 	.word	0x2001508a

00004a58 <opcode_0x5F()>:
void opcode_0x5F() {
    4a58:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    4a5a:	4d14      	ldr	r5, [pc, #80]	; (4aac <opcode_0x5F()+0x54>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_X(1)));
    4a5c:	2001      	movs	r0, #1
    4a5e:	f7fc f86d 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4a62:	4a13      	ldr	r2, [pc, #76]	; (4ab0 <opcode_0x5F()+0x58>)
    register_a = register_a ^ local_data;
    4a64:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4a66:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4a68:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4a6c:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    4a6e:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4a72:	bf4c      	ite	mi
    4a74:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4a78:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    4a7c:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a7e:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    4a80:	4d0c      	ldr	r5, [pc, #48]	; (4ab4 <opcode_0x5F()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4a82:	bf4c      	ite	mi
    4a84:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4a88:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4a8c:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    4a8e:	8828      	ldrh	r0, [r5, #0]
    4a90:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4a92:	bf0c      	ite	eq
    4a94:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4a98:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4a9c:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4a9e:	f7fb fe7d 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4aa2:	4621      	mov	r1, r4
    4aa4:	8828      	ldrh	r0, [r5, #0]
    4aa6:	f7fb fe79 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x5F - SRE - Absolute , X
    4aaa:	bd38      	pop	{r3, r4, r5, pc}
    4aac:	200150a3 	.word	0x200150a3
    4ab0:	200047c0 	.word	0x200047c0
    4ab4:	2001508a 	.word	0x2001508a

00004ab8 <opcode_0x5B()>:
void opcode_0x5B() {
    4ab8:	b538      	push	{r3, r4, r5, lr}
    register_a = register_a ^ local_data;
    4aba:	4d14      	ldr	r5, [pc, #80]	; (4b0c <opcode_0x5B()+0x54>)
    Double_WriteBack(Calculate_SRE(Fetch_Absolute_Y(1)));
    4abc:	2001      	movs	r0, #1
    4abe:	f7fc f86f 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4ac2:	4a13      	ldr	r2, [pc, #76]	; (4b10 <opcode_0x5B()+0x58>)
    register_a = register_a ^ local_data;
    4ac4:	7829      	ldrb	r1, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4ac6:	07c4      	lsls	r4, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4ac8:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4acc:	7813      	ldrb	r3, [r2, #0]
    register_a = register_a ^ local_data;
    4ace:	ea84 0001 	eor.w	r0, r4, r1
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4ad2:	bf4c      	ite	mi
    4ad4:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4ad8:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    register_a = register_a ^ local_data;
    4adc:	7028      	strb	r0, [r5, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ade:	0600      	lsls	r0, r0, #24
    write_byte(effective_address, local_data);
    4ae0:	4d0c      	ldr	r5, [pc, #48]	; (4b14 <opcode_0x5B()+0x5c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ae2:	bf4c      	ite	mi
    4ae4:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4ae8:	f003 037f 	andpl.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4aec:	428c      	cmp	r4, r1
    write_byte(effective_address, local_data);
    4aee:	8828      	ldrh	r0, [r5, #0]
    4af0:	4621      	mov	r1, r4
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4af2:	bf0c      	ite	eq
    4af4:	f043 0302 	orreq.w	r3, r3, #2
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4af8:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
    4afc:	7013      	strb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4afe:	f7fb fe4d 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4b02:	4621      	mov	r1, r4
    4b04:	8828      	ldrh	r0, [r5, #0]
    4b06:	f7fb fe49 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x5B - SRE - Absolute , Y
    4b0a:	bd38      	pop	{r3, r4, r5, pc}
    4b0c:	200150a3 	.word	0x200150a3
    4b10:	200047c0 	.word	0x200047c0
    4b14:	2001508a 	.word	0x2001508a

00004b18 <opcode_0x67()>:
    register_pc++;
    4b18:	4b14      	ldr	r3, [pc, #80]	; (4b6c <opcode_0x67()+0x54>)
    return read_byte(register_pc, false);
    4b1a:	2100      	movs	r1, #0
    register_pc++;
    4b1c:	8818      	ldrh	r0, [r3, #0]
    4b1e:	3001      	adds	r0, #1
    4b20:	b280      	uxth	r0, r0

    global_temp = local_data;

    return local_data;
}
void opcode_0x67() {
    4b22:	b570      	push	{r4, r5, r6, lr}
    effective_address = Fetch_Immediate();
    4b24:	4d12      	ldr	r5, [pc, #72]	; (4b70 <opcode_0x67()+0x58>)
    register_pc++;
    4b26:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    4b28:	f7fb fc7c 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    4b2c:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4b2e:	2100      	movs	r1, #0
    global_temp = local_data;
    4b30:	4e10      	ldr	r6, [pc, #64]	; (4b74 <opcode_0x67()+0x5c>)
    effective_address = Fetch_Immediate();
    4b32:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    4b34:	f7fb fc76 	bl	424 <read_byte(unsigned short, bool)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4b38:	4a0f      	ldr	r2, [pc, #60]	; (4b78 <opcode_0x67()+0x60>)
    4b3a:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4b3c:	f3c0 0447 	ubfx	r4, r0, #1, #8
    write_byte(effective_address, local_data);
    4b40:	8828      	ldrh	r0, [r5, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4b42:	7813      	ldrb	r3, [r2, #0]
    4b44:	4621      	mov	r1, r4
    global_temp = local_data;
    4b46:	7034      	strb	r4, [r6, #0]
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4b48:	bf4c      	ite	mi
    4b4a:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4b4e:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4b52:	7013      	strb	r3, [r2, #0]
    4b54:	f7fb fe22 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4b58:	8828      	ldrh	r0, [r5, #0]
    4b5a:	4621      	mov	r1, r4
    4b5c:	f7fb fe1e 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage()));
    Calculate_ADC(global_temp);
    4b60:	7830      	ldrb	r0, [r6, #0]
    return;
} // 0x67 - RRA - ZeroPage
    4b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_ADC(global_temp);
    4b66:	f7fc bde9 	b.w	173c <Calculate_ADC(unsigned short)>
    4b6a:	bf00      	nop
    4b6c:	2001508c 	.word	0x2001508c
    4b70:	2001508a 	.word	0x2001508a
    4b74:	200150a0 	.word	0x200150a0
    4b78:	200047c0 	.word	0x200047c0

00004b7c <opcode_0x77()>:
void opcode_0x77() {
    4b7c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_ZeroPage_X()));
    4b7e:	f7fb ff7f 	bl	a80 <Fetch_ZeroPage_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4b82:	4a0d      	ldr	r2, [pc, #52]	; (4bb8 <opcode_0x77()+0x3c>)
    4b84:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4b86:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4b8a:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4b8c:	4e0b      	ldr	r6, [pc, #44]	; (4bbc <opcode_0x77()+0x40>)
    4b8e:	4621      	mov	r1, r4
    4b90:	bf4c      	ite	mi
    4b92:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4b96:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    4b9a:	4d09      	ldr	r5, [pc, #36]	; (4bc0 <opcode_0x77()+0x44>)
    4b9c:	8830      	ldrh	r0, [r6, #0]
    4b9e:	7013      	strb	r3, [r2, #0]
    4ba0:	702c      	strb	r4, [r5, #0]
    4ba2:	f7fb fdfb 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4ba6:	8830      	ldrh	r0, [r6, #0]
    4ba8:	4621      	mov	r1, r4
    4baa:	f7fb fdf7 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    4bae:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0x77 - RRA - ZeroPage , X
    4bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_ADC(global_temp);
    4bb4:	f7fc bdc2 	b.w	173c <Calculate_ADC(unsigned short)>
    4bb8:	200047c0 	.word	0x200047c0
    4bbc:	2001508a 	.word	0x2001508a
    4bc0:	200150a0 	.word	0x200150a0

00004bc4 <opcode_0x63()>:
void opcode_0x63() {
    4bc4:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_X()));
    4bc6:	f7fc f81d 	bl	c04 <Fetch_Indexed_Indirect_X()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4bca:	4a0d      	ldr	r2, [pc, #52]	; (4c00 <opcode_0x63()+0x3c>)
    4bcc:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4bce:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4bd2:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4bd4:	4e0b      	ldr	r6, [pc, #44]	; (4c04 <opcode_0x63()+0x40>)
    4bd6:	4621      	mov	r1, r4
    4bd8:	bf4c      	ite	mi
    4bda:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4bde:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    4be2:	4d09      	ldr	r5, [pc, #36]	; (4c08 <opcode_0x63()+0x44>)
    4be4:	8830      	ldrh	r0, [r6, #0]
    4be6:	7013      	strb	r3, [r2, #0]
    4be8:	702c      	strb	r4, [r5, #0]
    4bea:	f7fb fdd7 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4bee:	8830      	ldrh	r0, [r6, #0]
    4bf0:	4621      	mov	r1, r4
    4bf2:	f7fb fdd3 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    4bf6:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0x63 - RRA - Indexed Indirect X
    4bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_ADC(global_temp);
    4bfc:	f7fc bd9e 	b.w	173c <Calculate_ADC(unsigned short)>
    4c00:	200047c0 	.word	0x200047c0
    4c04:	2001508a 	.word	0x2001508a
    4c08:	200150a0 	.word	0x200150a0

00004c0c <opcode_0x73()>:
void opcode_0x73() {
    4c0c:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Indexed_Indirect_Y(1)));
    4c0e:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    4c10:	4e0e      	ldr	r6, [pc, #56]	; (4c4c <opcode_0x73()+0x40>)
    4c12:	f7fc f821 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4c16:	4a0e      	ldr	r2, [pc, #56]	; (4c50 <opcode_0x73()+0x44>)
    4c18:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4c1a:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4c1e:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    4c20:	4d0c      	ldr	r5, [pc, #48]	; (4c54 <opcode_0x73()+0x48>)
    4c22:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4c24:	bf4c      	ite	mi
    4c26:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4c2a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4c2e:	8830      	ldrh	r0, [r6, #0]
    4c30:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    4c32:	702c      	strb	r4, [r5, #0]
    4c34:	f7fb fdb2 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4c38:	8830      	ldrh	r0, [r6, #0]
    4c3a:	4621      	mov	r1, r4
    4c3c:	f7fb fdae 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    4c40:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0x73 - RRA - Indirect Indexed  Y
    4c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_ADC(global_temp);
    4c46:	f7fc bd79 	b.w	173c <Calculate_ADC(unsigned short)>
    4c4a:	bf00      	nop
    4c4c:	2001508a 	.word	0x2001508a
    4c50:	200047c0 	.word	0x200047c0
    4c54:	200150a0 	.word	0x200150a0

00004c58 <opcode_0x6F()>:
void opcode_0x6F() {
    4c58:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute()));
    4c5a:	f7fb ff51 	bl	b00 <Fetch_Absolute()>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4c5e:	4a0d      	ldr	r2, [pc, #52]	; (4c94 <opcode_0x6F()+0x3c>)
    4c60:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4c62:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4c66:	7813      	ldrb	r3, [r2, #0]
    write_byte(effective_address, local_data);
    4c68:	4e0b      	ldr	r6, [pc, #44]	; (4c98 <opcode_0x6F()+0x40>)
    4c6a:	4621      	mov	r1, r4
    4c6c:	bf4c      	ite	mi
    4c6e:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4c72:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    global_temp = local_data;
    4c76:	4d09      	ldr	r5, [pc, #36]	; (4c9c <opcode_0x6F()+0x44>)
    4c78:	8830      	ldrh	r0, [r6, #0]
    4c7a:	7013      	strb	r3, [r2, #0]
    4c7c:	702c      	strb	r4, [r5, #0]
    4c7e:	f7fb fd8d 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4c82:	8830      	ldrh	r0, [r6, #0]
    4c84:	4621      	mov	r1, r4
    4c86:	f7fb fd89 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    4c8a:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0x6F - RRA - Absolute
    4c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_ADC(global_temp);
    4c90:	f7fc bd54 	b.w	173c <Calculate_ADC(unsigned short)>
    4c94:	200047c0 	.word	0x200047c0
    4c98:	2001508a 	.word	0x2001508a
    4c9c:	200150a0 	.word	0x200150a0

00004ca0 <opcode_0x7F()>:
void opcode_0x7F() {
    4ca0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_X(1)));
    4ca2:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    4ca4:	4e0e      	ldr	r6, [pc, #56]	; (4ce0 <opcode_0x7F()+0x40>)
    4ca6:	f7fb ff49 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4caa:	4a0e      	ldr	r2, [pc, #56]	; (4ce4 <opcode_0x7F()+0x44>)
    4cac:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4cae:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4cb2:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    4cb4:	4d0c      	ldr	r5, [pc, #48]	; (4ce8 <opcode_0x7F()+0x48>)
    4cb6:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4cb8:	bf4c      	ite	mi
    4cba:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4cbe:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4cc2:	8830      	ldrh	r0, [r6, #0]
    4cc4:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    4cc6:	702c      	strb	r4, [r5, #0]
    4cc8:	f7fb fd68 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4ccc:	8830      	ldrh	r0, [r6, #0]
    4cce:	4621      	mov	r1, r4
    4cd0:	f7fb fd64 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    4cd4:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0x7F - RRA - Absolute , X
    4cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_ADC(global_temp);
    4cda:	f7fc bd2f 	b.w	173c <Calculate_ADC(unsigned short)>
    4cde:	bf00      	nop
    4ce0:	2001508a 	.word	0x2001508a
    4ce4:	200047c0 	.word	0x200047c0
    4ce8:	200150a0 	.word	0x200150a0

00004cec <opcode_0x7B()>:
void opcode_0x7B() {
    4cec:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_RRA(Fetch_Absolute_Y(1)));
    4cee:	2001      	movs	r0, #1
    write_byte(effective_address, local_data);
    4cf0:	4e0e      	ldr	r6, [pc, #56]	; (4d2c <opcode_0x7B()+0x40>)
    4cf2:	f7fb ff55 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4cf6:	4a0e      	ldr	r2, [pc, #56]	; (4d30 <opcode_0x7B()+0x44>)
    4cf8:	07c1      	lsls	r1, r0, #31
    local_data = (0x7F & (local_data >> 1));
    4cfa:	f3c0 0447 	ubfx	r4, r0, #1, #8
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4cfe:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    4d00:	4d0c      	ldr	r5, [pc, #48]	; (4d34 <opcode_0x7B()+0x48>)
    4d02:	4621      	mov	r1, r4
    if ((0x01 & local_data) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    4d04:	bf4c      	ite	mi
    4d06:	f043 0301 	orrmi.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    4d0a:	f003 03fe 	andpl.w	r3, r3, #254	; 0xfe
    4d0e:	8830      	ldrh	r0, [r6, #0]
    4d10:	7013      	strb	r3, [r2, #0]
    global_temp = local_data;
    4d12:	702c      	strb	r4, [r5, #0]
    4d14:	f7fb fd42 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    4d18:	8830      	ldrh	r0, [r6, #0]
    4d1a:	4621      	mov	r1, r4
    4d1c:	f7fb fd3e 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_ADC(global_temp);
    4d20:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0x7B - RRA - Absolute , Y
    4d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_ADC(global_temp);
    4d26:	f7fc bd09 	b.w	173c <Calculate_ADC(unsigned short)>
    4d2a:	bf00      	nop
    4d2c:	2001508a 	.word	0x2001508a
    4d30:	200047c0 	.word	0x200047c0
    4d34:	200150a0 	.word	0x200150a0

00004d38 <opcode_0x87()>:
    register_pc++;
    4d38:	4b0a      	ldr	r3, [pc, #40]	; (4d64 <opcode_0x87()+0x2c>)
    return read_byte(register_pc, false);
    4d3a:	2100      	movs	r1, #0
// --------------------------------------------------------------------------------------------------
// AND the contents of the A and X registers (without changing the contents of either register) and 
// stores the result in memory.
// --------------------------------------------------------------------------------------------------
void opcode_0x87() {
    Write_ZeroPage(register_a & register_x);
    4d3c:	4a0a      	ldr	r2, [pc, #40]	; (4d68 <opcode_0x87()+0x30>)
    register_pc++;
    4d3e:	8818      	ldrh	r0, [r3, #0]
void opcode_0x87() {
    4d40:	b510      	push	{r4, lr}
    Write_ZeroPage(register_a & register_x);
    4d42:	4c0a      	ldr	r4, [pc, #40]	; (4d6c <opcode_0x87()+0x34>)
    4d44:	3001      	adds	r0, #1
    4d46:	7812      	ldrb	r2, [r2, #0]
    4d48:	7824      	ldrb	r4, [r4, #0]
    4d4a:	b280      	uxth	r0, r0
    4d4c:	4014      	ands	r4, r2
    4d4e:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    4d50:	f7fb fb68 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    4d54:	4b06      	ldr	r3, [pc, #24]	; (4d70 <opcode_0x87()+0x38>)
    4d56:	b280      	uxth	r0, r0
    write_byte(effective_address, local_data);
    4d58:	4621      	mov	r1, r4
    effective_address = Fetch_Immediate();
    4d5a:	8018      	strh	r0, [r3, #0]
    write_byte(effective_address, local_data);
    4d5c:	f7fb fd1e 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x87 - SAX - ZeroPage
    4d60:	bd10      	pop	{r4, pc}
    4d62:	bf00      	nop
    4d64:	2001508c 	.word	0x2001508c
    4d68:	200150a4 	.word	0x200150a4
    4d6c:	200150a3 	.word	0x200150a3
    4d70:	2001508a 	.word	0x2001508a

00004d74 <opcode_0x97()>:
void opcode_0x97() {
    4d74:	b538      	push	{r3, r4, r5, lr}
    register_pc++;
    4d76:	4b0e      	ldr	r3, [pc, #56]	; (4db0 <opcode_0x97()+0x3c>)
    return read_byte(register_pc, false);
    4d78:	2100      	movs	r1, #0
    Write_ZeroPage_Y(register_a & register_x);
    4d7a:	4c0e      	ldr	r4, [pc, #56]	; (4db4 <opcode_0x97()+0x40>)
    register_pc++;
    4d7c:	8818      	ldrh	r0, [r3, #0]
    4d7e:	4a0e      	ldr	r2, [pc, #56]	; (4db8 <opcode_0x97()+0x44>)
    4d80:	3001      	adds	r0, #1
    4d82:	7824      	ldrb	r4, [r4, #0]
    4d84:	7812      	ldrb	r2, [r2, #0]
    4d86:	b280      	uxth	r0, r0
    effective_address = Fetch_Immediate();
    4d88:	4d0c      	ldr	r5, [pc, #48]	; (4dbc <opcode_0x97()+0x48>)
    4d8a:	4014      	ands	r4, r2
    register_pc++;
    4d8c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    4d8e:	f7fb fb49 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    4d92:	b280      	uxth	r0, r0
    read_byte(effective_address, false);
    4d94:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    4d96:	8028      	strh	r0, [r5, #0]
    read_byte(effective_address, false);
    4d98:	f7fb fb44 	bl	424 <read_byte(unsigned short, bool)>
    write_byte((0x00FF & (effective_address + register_y)), local_data);
    4d9c:	4a08      	ldr	r2, [pc, #32]	; (4dc0 <opcode_0x97()+0x4c>)
    4d9e:	4621      	mov	r1, r4
    4da0:	882b      	ldrh	r3, [r5, #0]
    4da2:	7810      	ldrb	r0, [r2, #0]
    4da4:	4418      	add	r0, r3
    4da6:	b2c0      	uxtb	r0, r0
    4da8:	f7fb fcf8 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x97 - SAX - ZeroPage , Y
    4dac:	bd38      	pop	{r3, r4, r5, pc}
    4dae:	bf00      	nop
    4db0:	2001508c 	.word	0x2001508c
    4db4:	200150a3 	.word	0x200150a3
    4db8:	200150a4 	.word	0x200150a4
    4dbc:	2001508a 	.word	0x2001508a
    4dc0:	200150a5 	.word	0x200150a5

00004dc4 <opcode_0x83()>:
void opcode_0x83() {
    Write_Indexed_Indirect_X(register_a & register_x);
    4dc4:	4a03      	ldr	r2, [pc, #12]	; (4dd4 <opcode_0x83()+0x10>)
    4dc6:	4b04      	ldr	r3, [pc, #16]	; (4dd8 <opcode_0x83()+0x14>)
    4dc8:	7810      	ldrb	r0, [r2, #0]
    4dca:	781b      	ldrb	r3, [r3, #0]
    4dcc:	4018      	ands	r0, r3
    4dce:	f7fc b84b 	b.w	e68 <Write_Indexed_Indirect_X(unsigned char)>
    4dd2:	bf00      	nop
    4dd4:	200150a3 	.word	0x200150a3
    4dd8:	200150a4 	.word	0x200150a4

00004ddc <opcode_0x8F()>:
    Begin_Fetch_Next_Opcode();
    return;
} // 0x83 - SAX - Indexed Indirect X
void opcode_0x8F() {
    4ddc:	b570      	push	{r4, r5, r6, lr}
    register_pc++;
    4dde:	4c0f      	ldr	r4, [pc, #60]	; (4e1c <opcode_0x8F()+0x40>)
    return read_byte(register_pc, false);
    4de0:	2100      	movs	r1, #0
    Write_Absolute(register_a & register_x);
    4de2:	4a0f      	ldr	r2, [pc, #60]	; (4e20 <opcode_0x8F()+0x44>)
    register_pc++;
    4de4:	8820      	ldrh	r0, [r4, #0]
    4de6:	4b0f      	ldr	r3, [pc, #60]	; (4e24 <opcode_0x8F()+0x48>)
    4de8:	3001      	adds	r0, #1
    4dea:	7816      	ldrb	r6, [r2, #0]
    4dec:	781b      	ldrb	r3, [r3, #0]
    4dee:	b280      	uxth	r0, r0
    effective_address = Fetch_Immediate();
    4df0:	4d0d      	ldr	r5, [pc, #52]	; (4e28 <opcode_0x8F()+0x4c>)
    4df2:	401e      	ands	r6, r3
    register_pc++;
    4df4:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
    4df6:	f7fb fb15 	bl	424 <read_byte(unsigned short, bool)>
    register_pc++;
    4dfa:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc, false);
    4dfc:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    4dfe:	8028      	strh	r0, [r5, #0]
    register_pc++;
    4e00:	3301      	adds	r3, #1
    4e02:	b298      	uxth	r0, r3
    4e04:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
    4e06:	f7fb fb0d 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = (Fetch_Immediate() << 8) + effective_address;
    4e0a:	882b      	ldrh	r3, [r5, #0]
    write_byte(effective_address, local_data);
    4e0c:	4631      	mov	r1, r6
    effective_address = (Fetch_Immediate() << 8) + effective_address;
    4e0e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    4e12:	b280      	uxth	r0, r0
    4e14:	8028      	strh	r0, [r5, #0]
    write_byte(effective_address, local_data);
    4e16:	f7fb fcc1 	bl	79c <write_byte(unsigned short, unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
} // 0x8F - SAX - Absolute
    4e1a:	bd70      	pop	{r4, r5, r6, pc}
    4e1c:	2001508c 	.word	0x2001508c
    4e20:	200150a3 	.word	0x200150a3
    4e24:	200150a4 	.word	0x200150a4
    4e28:	2001508a 	.word	0x2001508a

00004e2c <opcode_0xA7()>:

// --------------------------------------------------------------------------------------------------
// Load both the accumulator and the X register with the contents of a memory location.
// --------------------------------------------------------------------------------------------------
void opcode_0xA7() {
    4e2c:	b508      	push	{r3, lr}
    register_pc++;
    4e2e:	4b12      	ldr	r3, [pc, #72]	; (4e78 <opcode_0xA7()+0x4c>)
    return read_byte(register_pc, false);
    4e30:	2100      	movs	r1, #0
    register_pc++;
    4e32:	8818      	ldrh	r0, [r3, #0]
    4e34:	3001      	adds	r0, #1
    4e36:	b280      	uxth	r0, r0
    4e38:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    4e3a:	f7fb faf3 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    4e3e:	4b0f      	ldr	r3, [pc, #60]	; (4e7c <opcode_0xA7()+0x50>)
    4e40:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    4e42:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    4e44:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4e46:	f7fb faed 	bl	424 <read_byte(unsigned short, bool)>
    register_a = Fetch_ZeroPage();
    4e4a:	4a0d      	ldr	r2, [pc, #52]	; (4e80 <opcode_0xA7()+0x54>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e4c:	0601      	lsls	r1, r0, #24
    register_x = register_a;
    4e4e:	4b0d      	ldr	r3, [pc, #52]	; (4e84 <opcode_0xA7()+0x58>)
    register_a = Fetch_ZeroPage();
    4e50:	7010      	strb	r0, [r2, #0]
    4e52:	4a0d      	ldr	r2, [pc, #52]	; (4e88 <opcode_0xA7()+0x5c>)
    register_x = register_a;
    4e54:	7018      	strb	r0, [r3, #0]
    4e56:	7813      	ldrb	r3, [r2, #0]
    4e58:	d407      	bmi.n	4e6a <opcode_0xA7()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4e5e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4e60:	b928      	cbnz	r0, 4e6e <opcode_0xA7()+0x42>
    4e62:	f043 0302 	orr.w	r3, r3, #2
    return;
    4e66:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xA7 - LAX - ZeroPage
    4e68:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4e6e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4e72:	7013      	strb	r3, [r2, #0]
    4e74:	bd08      	pop	{r3, pc}
    4e76:	bf00      	nop
    4e78:	2001508c 	.word	0x2001508c
    4e7c:	2001508a 	.word	0x2001508a
    4e80:	200150a3 	.word	0x200150a3
    4e84:	200150a4 	.word	0x200150a4
    4e88:	200047c0 	.word	0x200047c0

00004e8c <opcode_0xB7()>:
void opcode_0xB7() {
    4e8c:	b510      	push	{r4, lr}
    register_pc++;
    4e8e:	4c17      	ldr	r4, [pc, #92]	; (4eec <opcode_0xB7()+0x60>)
    return read_byte(register_pc, false);
    4e90:	2100      	movs	r1, #0
    register_pc++;
    4e92:	8820      	ldrh	r0, [r4, #0]
    4e94:	3001      	adds	r0, #1
    4e96:	b280      	uxth	r0, r0
    4e98:	8020      	strh	r0, [r4, #0]
    return read_byte(register_pc, false);
    4e9a:	f7fb fac3 	bl	424 <read_byte(unsigned short, bool)>
    read_byte(register_pc + 1, false);
    4e9e:	8823      	ldrh	r3, [r4, #0]
    return read_byte(register_pc, false);
    4ea0:	4604      	mov	r4, r0
    read_byte(register_pc + 1, false);
    4ea2:	2100      	movs	r1, #0
    4ea4:	1c58      	adds	r0, r3, #1
    4ea6:	b280      	uxth	r0, r0
    4ea8:	f7fb fabc 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = (0x00FF & (bal + register_y));
    4eac:	4a10      	ldr	r2, [pc, #64]	; (4ef0 <opcode_0xB7()+0x64>)
    4eae:	4b11      	ldr	r3, [pc, #68]	; (4ef4 <opcode_0xB7()+0x68>)
    return read_byte(effective_address, false);
    4eb0:	2100      	movs	r1, #0
    4eb2:	7812      	ldrb	r2, [r2, #0]
    4eb4:	18a0      	adds	r0, r4, r2
    4eb6:	b2c0      	uxtb	r0, r0
    effective_address = (0x00FF & (bal + register_y));
    4eb8:	8018      	strh	r0, [r3, #0]
    return read_byte(effective_address, false);
    4eba:	f7fb fab3 	bl	424 <read_byte(unsigned short, bool)>
    register_a = Fetch_ZeroPage_Y();
    4ebe:	4a0e      	ldr	r2, [pc, #56]	; (4ef8 <opcode_0xB7()+0x6c>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ec0:	0601      	lsls	r1, r0, #24
    register_x = register_a;
    4ec2:	4b0e      	ldr	r3, [pc, #56]	; (4efc <opcode_0xB7()+0x70>)
    register_a = Fetch_ZeroPage_Y();
    4ec4:	7010      	strb	r0, [r2, #0]
    4ec6:	4a0e      	ldr	r2, [pc, #56]	; (4f00 <opcode_0xB7()+0x74>)
    register_x = register_a;
    4ec8:	7018      	strb	r0, [r3, #0]
    4eca:	7813      	ldrb	r3, [r2, #0]
    4ecc:	d407      	bmi.n	4ede <opcode_0xB7()+0x52>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ed2:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4ed4:	b928      	cbnz	r0, 4ee2 <opcode_0xB7()+0x56>
    4ed6:	f043 0302 	orr.w	r3, r3, #2
    return;
    4eda:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xB7 - LAX - ZeroPage , Y
    4edc:	bd10      	pop	{r4, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4ee2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ee6:	7013      	strb	r3, [r2, #0]
    4ee8:	bd10      	pop	{r4, pc}
    4eea:	bf00      	nop
    4eec:	2001508c 	.word	0x2001508c
    4ef0:	200150a5 	.word	0x200150a5
    4ef4:	2001508a 	.word	0x2001508a
    4ef8:	200150a3 	.word	0x200150a3
    4efc:	200150a4 	.word	0x200150a4
    4f00:	200047c0 	.word	0x200047c0

00004f04 <opcode_0xA3()>:
void opcode_0xA3() {
    4f04:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_X();
    4f06:	f7fb fe7d 	bl	c04 <Fetch_Indexed_Indirect_X()>
    4f0a:	4a0b      	ldr	r2, [pc, #44]	; (4f38 <opcode_0xA3()+0x34>)
    register_x = register_a;
    4f0c:	4b0b      	ldr	r3, [pc, #44]	; (4f3c <opcode_0xA3()+0x38>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f0e:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Indexed_Indirect_X();
    4f10:	7010      	strb	r0, [r2, #0]
    4f12:	4a0b      	ldr	r2, [pc, #44]	; (4f40 <opcode_0xA3()+0x3c>)
    register_x = register_a;
    4f14:	7018      	strb	r0, [r3, #0]
    4f16:	7813      	ldrb	r3, [r2, #0]
    4f18:	d407      	bmi.n	4f2a <opcode_0xA3()+0x26>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f1e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4f20:	b928      	cbnz	r0, 4f2e <opcode_0xA3()+0x2a>
    4f22:	f043 0302 	orr.w	r3, r3, #2
    return;
    4f26:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xA3 - LAX - Indexed Indirect X
    4f28:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4f2e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4f32:	7013      	strb	r3, [r2, #0]
    4f34:	bd08      	pop	{r3, pc}
    4f36:	bf00      	nop
    4f38:	200150a3 	.word	0x200150a3
    4f3c:	200150a4 	.word	0x200150a4
    4f40:	200047c0 	.word	0x200047c0

00004f44 <opcode_0xB3()>:
void opcode_0xB3() {
    4f44:	b508      	push	{r3, lr}
    register_a = Fetch_Indexed_Indirect_Y(1);
    4f46:	2001      	movs	r0, #1
    4f48:	f7fb fe86 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    4f4c:	4a0a      	ldr	r2, [pc, #40]	; (4f78 <opcode_0xB3()+0x34>)
    register_x = register_a;
    4f4e:	4b0b      	ldr	r3, [pc, #44]	; (4f7c <opcode_0xB3()+0x38>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f50:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Indexed_Indirect_Y(1);
    4f52:	7010      	strb	r0, [r2, #0]
    4f54:	4a0a      	ldr	r2, [pc, #40]	; (4f80 <opcode_0xB3()+0x3c>)
    register_x = register_a;
    4f56:	7018      	strb	r0, [r3, #0]
    4f58:	7813      	ldrb	r3, [r2, #0]
    4f5a:	d407      	bmi.n	4f6c <opcode_0xB3()+0x28>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f60:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4f62:	b928      	cbnz	r0, 4f70 <opcode_0xB3()+0x2c>
    4f64:	f043 0302 	orr.w	r3, r3, #2
    return;
    4f68:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xB3 - LAX - Indirect Indexed  Y
    4f6a:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4f70:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4f74:	7013      	strb	r3, [r2, #0]
    4f76:	bd08      	pop	{r3, pc}
    4f78:	200150a3 	.word	0x200150a3
    4f7c:	200150a4 	.word	0x200150a4
    4f80:	200047c0 	.word	0x200047c0

00004f84 <opcode_0xAF()>:
void opcode_0xAF() {
    4f84:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute();
    4f86:	f7fb fdbb 	bl	b00 <Fetch_Absolute()>
    4f8a:	4a0b      	ldr	r2, [pc, #44]	; (4fb8 <opcode_0xAF()+0x34>)
    register_x = register_a;
    4f8c:	4b0b      	ldr	r3, [pc, #44]	; (4fbc <opcode_0xAF()+0x38>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4f8e:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Absolute();
    4f90:	7010      	strb	r0, [r2, #0]
    4f92:	4a0b      	ldr	r2, [pc, #44]	; (4fc0 <opcode_0xAF()+0x3c>)
    register_x = register_a;
    4f94:	7018      	strb	r0, [r3, #0]
    4f96:	7813      	ldrb	r3, [r2, #0]
    4f98:	d407      	bmi.n	4faa <opcode_0xAF()+0x26>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4f9e:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4fa0:	b928      	cbnz	r0, 4fae <opcode_0xAF()+0x2a>
    4fa2:	f043 0302 	orr.w	r3, r3, #2
    return;
    4fa6:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xAF - LAX - Absolute
    4fa8:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4fae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4fb2:	7013      	strb	r3, [r2, #0]
    4fb4:	bd08      	pop	{r3, pc}
    4fb6:	bf00      	nop
    4fb8:	200150a3 	.word	0x200150a3
    4fbc:	200150a4 	.word	0x200150a4
    4fc0:	200047c0 	.word	0x200047c0

00004fc4 <opcode_0xBF()>:
void opcode_0xBF() {
    4fc4:	b508      	push	{r3, lr}
    register_a = Fetch_Absolute_Y(1);
    4fc6:	2001      	movs	r0, #1
    4fc8:	f7fb fdea 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    4fcc:	4a0a      	ldr	r2, [pc, #40]	; (4ff8 <opcode_0xBF()+0x34>)
    register_x = register_a;
    4fce:	4b0b      	ldr	r3, [pc, #44]	; (4ffc <opcode_0xBF()+0x38>)
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4fd0:	0601      	lsls	r1, r0, #24
    register_a = Fetch_Absolute_Y(1);
    4fd2:	7010      	strb	r0, [r2, #0]
    4fd4:	4a0a      	ldr	r2, [pc, #40]	; (5000 <opcode_0xBF()+0x3c>)
    register_x = register_a;
    4fd6:	7018      	strb	r0, [r3, #0]
    4fd8:	7813      	ldrb	r3, [r2, #0]
    4fda:	d407      	bmi.n	4fec <opcode_0xBF()+0x28>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    4fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4fe0:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    4fe2:	b928      	cbnz	r0, 4ff0 <opcode_0xBF()+0x2c>
    4fe4:	f043 0302 	orr.w	r3, r3, #2
    return;
    4fe8:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xBF - LAX - Absolute , Y
    4fea:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    4fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    4ff0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4ff4:	7013      	strb	r3, [r2, #0]
    4ff6:	bd08      	pop	{r3, pc}
    4ff8:	200150a3 	.word	0x200150a3
    4ffc:	200150a4 	.word	0x200150a4
    5000:	200047c0 	.word	0x200047c0

00005004 <opcode_0xC7()>:

// --------------------------------------------------------------------------------------------------
// Decrement the contents of a memory location and then compare the result with the A register.
// --------------------------------------------------------------------------------------------------
void opcode_0xC7() {
    5004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    register_pc++;
    5006:	4b23      	ldr	r3, [pc, #140]	; (5094 <opcode_0xC7()+0x90>)
    return read_byte(register_pc, false);
    5008:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    500a:	4d23      	ldr	r5, [pc, #140]	; (5098 <opcode_0xC7()+0x94>)
    register_pc++;
    500c:	8818      	ldrh	r0, [r3, #0]
    global_temp = local_data;
    500e:	4f23      	ldr	r7, [pc, #140]	; (509c <opcode_0xC7()+0x98>)
    5010:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5012:	4e23      	ldr	r6, [pc, #140]	; (50a0 <opcode_0xC7()+0x9c>)
    register_pc++;
    5014:	b280      	uxth	r0, r0
    5016:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    5018:	f7fb fa04 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    501c:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    501e:	2100      	movs	r1, #0
    effective_address = Fetch_Immediate();
    5020:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    5022:	f7fb f9ff 	bl	424 <read_byte(unsigned short, bool)>
    local_data = local_data - 1;
    5026:	3801      	subs	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5028:	7833      	ldrb	r3, [r6, #0]
    502a:	b2c4      	uxtb	r4, r0
    502c:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    502e:	703c      	strb	r4, [r7, #0]
    5030:	d425      	bmi.n	507e <opcode_0xC7()+0x7a>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5036:	7033      	strb	r3, [r6, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5038:	bb1c      	cbnz	r4, 5082 <opcode_0xC7()+0x7e>
    503a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    503e:	4621      	mov	r1, r4
    5040:	8828      	ldrh	r0, [r5, #0]
    5042:	7033      	strb	r3, [r6, #0]
    5044:	f7fb fbaa 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5048:	4621      	mov	r1, r4
    504a:	8828      	ldrh	r0, [r5, #0]
    504c:	f7fb fba6 	bl	79c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5050:	4b14      	ldr	r3, [pc, #80]	; (50a4 <opcode_0xC7()+0xa0>)
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage()));
    Calculate_CMP(global_temp);
    5052:	7839      	ldrb	r1, [r7, #0]
    temp = register_a - local_data;
    5054:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5056:	7833      	ldrb	r3, [r6, #0]
    5058:	4291      	cmp	r1, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    505a:	eba2 0201 	sub.w	r2, r2, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    505e:	bf94      	ite	ls
    5060:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5064:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5068:	b2d1      	uxtb	r1, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    506a:	0612      	lsls	r2, r2, #24
    506c:	d40c      	bmi.n	5088 <opcode_0xC7()+0x84>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    506e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5072:	7033      	strb	r3, [r6, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5074:	b951      	cbnz	r1, 508c <opcode_0xC7()+0x88>
    5076:	f043 0302 	orr.w	r3, r3, #2
    return;
    507a:	7033      	strb	r3, [r6, #0]
    return;
} // 0xC7 - DCP - ZeroPage
    507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    507e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5082:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5086:	e7da      	b.n	503e <opcode_0xC7()+0x3a>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    508c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5090:	7033      	strb	r3, [r6, #0]
    5092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5094:	2001508c 	.word	0x2001508c
    5098:	2001508a 	.word	0x2001508a
    509c:	200150a0 	.word	0x200150a0
    50a0:	200047c0 	.word	0x200047c0
    50a4:	200150a3 	.word	0x200150a3

000050a8 <opcode_0xD7()>:
void opcode_0xD7() {
    50a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_ZeroPage_X()));
    50aa:	f7fb fce9 	bl	a80 <Fetch_ZeroPage_X()>
    local_data = local_data - 1;
    50ae:	3801      	subs	r0, #1
    global_temp = local_data;
    50b0:	4e1c      	ldr	r6, [pc, #112]	; (5124 <opcode_0xD7()+0x7c>)
    local_data = local_data - 1;
    50b2:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    50b4:	4d1c      	ldr	r5, [pc, #112]	; (5128 <opcode_0xD7()+0x80>)
    50b6:	0621      	lsls	r1, r4, #24
    50b8:	782b      	ldrb	r3, [r5, #0]
    global_temp = local_data;
    50ba:	7034      	strb	r4, [r6, #0]
    50bc:	d426      	bmi.n	510c <opcode_0xD7()+0x64>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    50be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    50c2:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    50c4:	bb24      	cbnz	r4, 5110 <opcode_0xD7()+0x68>
    50c6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    50ca:	4f18      	ldr	r7, [pc, #96]	; (512c <opcode_0xD7()+0x84>)
    50cc:	4621      	mov	r1, r4
    50ce:	702b      	strb	r3, [r5, #0]
    50d0:	8838      	ldrh	r0, [r7, #0]
    50d2:	f7fb fb63 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    50d6:	4621      	mov	r1, r4
    50d8:	8838      	ldrh	r0, [r7, #0]
    50da:	f7fb fb5f 	bl	79c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    50de:	4b14      	ldr	r3, [pc, #80]	; (5130 <opcode_0xD7()+0x88>)
    Calculate_CMP(global_temp);
    50e0:	7831      	ldrb	r1, [r6, #0]
    temp = register_a - local_data;
    50e2:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    50e4:	782b      	ldrb	r3, [r5, #0]
    50e6:	4291      	cmp	r1, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    50e8:	eba2 0201 	sub.w	r2, r2, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    50ec:	bf94      	ite	ls
    50ee:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    50f2:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    50f6:	b2d1      	uxtb	r1, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    50f8:	0612      	lsls	r2, r2, #24
    50fa:	d40c      	bmi.n	5116 <opcode_0xD7()+0x6e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    50fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5100:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5102:	b951      	cbnz	r1, 511a <opcode_0xD7()+0x72>
    5104:	f043 0302 	orr.w	r3, r3, #2
    return;
    5108:	702b      	strb	r3, [r5, #0]
    return;
} // 0xD7 - DCP - ZeroPage , X
    510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    510c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5110:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5114:	e7d9      	b.n	50ca <opcode_0xD7()+0x22>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    511a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    511e:	702b      	strb	r3, [r5, #0]
    5120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5122:	bf00      	nop
    5124:	200150a0 	.word	0x200150a0
    5128:	200047c0 	.word	0x200047c0
    512c:	2001508a 	.word	0x2001508a
    5130:	200150a3 	.word	0x200150a3

00005134 <opcode_0xC3()>:
void opcode_0xC3() {
    5134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_X()));
    5136:	f7fb fd65 	bl	c04 <Fetch_Indexed_Indirect_X()>
    local_data = local_data - 1;
    513a:	3801      	subs	r0, #1
    global_temp = local_data;
    513c:	4e1c      	ldr	r6, [pc, #112]	; (51b0 <opcode_0xC3()+0x7c>)
    local_data = local_data - 1;
    513e:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5140:	4d1c      	ldr	r5, [pc, #112]	; (51b4 <opcode_0xC3()+0x80>)
    5142:	0621      	lsls	r1, r4, #24
    5144:	782b      	ldrb	r3, [r5, #0]
    global_temp = local_data;
    5146:	7034      	strb	r4, [r6, #0]
    5148:	d426      	bmi.n	5198 <opcode_0xC3()+0x64>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    514a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    514e:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5150:	bb24      	cbnz	r4, 519c <opcode_0xC3()+0x68>
    5152:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5156:	4f18      	ldr	r7, [pc, #96]	; (51b8 <opcode_0xC3()+0x84>)
    5158:	4621      	mov	r1, r4
    515a:	702b      	strb	r3, [r5, #0]
    515c:	8838      	ldrh	r0, [r7, #0]
    515e:	f7fb fb1d 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5162:	4621      	mov	r1, r4
    5164:	8838      	ldrh	r0, [r7, #0]
    5166:	f7fb fb19 	bl	79c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    516a:	4b14      	ldr	r3, [pc, #80]	; (51bc <opcode_0xC3()+0x88>)
    Calculate_CMP(global_temp);
    516c:	7831      	ldrb	r1, [r6, #0]
    temp = register_a - local_data;
    516e:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5170:	782b      	ldrb	r3, [r5, #0]
    5172:	4291      	cmp	r1, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5174:	eba2 0201 	sub.w	r2, r2, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5178:	bf94      	ite	ls
    517a:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    517e:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5182:	b2d1      	uxtb	r1, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5184:	0612      	lsls	r2, r2, #24
    5186:	d40c      	bmi.n	51a2 <opcode_0xC3()+0x6e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    518c:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    518e:	b951      	cbnz	r1, 51a6 <opcode_0xC3()+0x72>
    5190:	f043 0302 	orr.w	r3, r3, #2
    return;
    5194:	702b      	strb	r3, [r5, #0]
    return;
} // 0xC3 - DCP - Indexed Indirect X
    5196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    519c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    51a0:	e7d9      	b.n	5156 <opcode_0xC3()+0x22>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    51a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    51a6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    51aa:	702b      	strb	r3, [r5, #0]
    51ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51ae:	bf00      	nop
    51b0:	200150a0 	.word	0x200150a0
    51b4:	200047c0 	.word	0x200047c0
    51b8:	2001508a 	.word	0x2001508a
    51bc:	200150a3 	.word	0x200150a3

000051c0 <opcode_0xD3()>:
void opcode_0xD3() {
    51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    51c2:	2000      	movs	r0, #0
    global_temp = local_data;
    51c4:	4e1d      	ldr	r6, [pc, #116]	; (523c <opcode_0xD3()+0x7c>)
    Double_WriteBack(Calculate_DEC(Fetch_Indexed_Indirect_Y(0)));
    51c6:	f7fb fd47 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data - 1;
    51ca:	3801      	subs	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    51cc:	4d1c      	ldr	r5, [pc, #112]	; (5240 <opcode_0xD3()+0x80>)
    51ce:	b2c4      	uxtb	r4, r0
    51d0:	782b      	ldrb	r3, [r5, #0]
    51d2:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    51d4:	7034      	strb	r4, [r6, #0]
    51d6:	d426      	bmi.n	5226 <opcode_0xD3()+0x66>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    51d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    51dc:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    51de:	bb24      	cbnz	r4, 522a <opcode_0xD3()+0x6a>
    51e0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    51e4:	4f17      	ldr	r7, [pc, #92]	; (5244 <opcode_0xD3()+0x84>)
    51e6:	4621      	mov	r1, r4
    51e8:	702b      	strb	r3, [r5, #0]
    51ea:	8838      	ldrh	r0, [r7, #0]
    51ec:	f7fb fad6 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    51f0:	4621      	mov	r1, r4
    51f2:	8838      	ldrh	r0, [r7, #0]
    51f4:	f7fb fad2 	bl	79c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    51f8:	4b13      	ldr	r3, [pc, #76]	; (5248 <opcode_0xD3()+0x88>)
    Calculate_CMP(global_temp);
    51fa:	7831      	ldrb	r1, [r6, #0]
    temp = register_a - local_data;
    51fc:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    51fe:	782b      	ldrb	r3, [r5, #0]
    5200:	4291      	cmp	r1, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    5202:	eba2 0201 	sub.w	r2, r2, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5206:	bf94      	ite	ls
    5208:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    520c:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5210:	b2d1      	uxtb	r1, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5212:	0612      	lsls	r2, r2, #24
    5214:	d40c      	bmi.n	5230 <opcode_0xD3()+0x70>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    521a:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    521c:	b951      	cbnz	r1, 5234 <opcode_0xD3()+0x74>
    521e:	f043 0302 	orr.w	r3, r3, #2
    return;
    5222:	702b      	strb	r3, [r5, #0]
    return;
} // 0xD3 - DCP - Indirect Indexed  Y
    5224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    522a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    522e:	e7d9      	b.n	51e4 <opcode_0xD3()+0x24>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5234:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5238:	702b      	strb	r3, [r5, #0]
    523a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    523c:	200150a0 	.word	0x200150a0
    5240:	200047c0 	.word	0x200047c0
    5244:	2001508a 	.word	0x2001508a
    5248:	200150a3 	.word	0x200150a3

0000524c <opcode_0xCF()>:
void opcode_0xCF() {
    524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute()));
    524e:	f7fb fc57 	bl	b00 <Fetch_Absolute()>
    local_data = local_data - 1;
    5252:	3801      	subs	r0, #1
    global_temp = local_data;
    5254:	4e1c      	ldr	r6, [pc, #112]	; (52c8 <opcode_0xCF()+0x7c>)
    local_data = local_data - 1;
    5256:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5258:	4d1c      	ldr	r5, [pc, #112]	; (52cc <opcode_0xCF()+0x80>)
    525a:	0621      	lsls	r1, r4, #24
    525c:	782b      	ldrb	r3, [r5, #0]
    global_temp = local_data;
    525e:	7034      	strb	r4, [r6, #0]
    5260:	d426      	bmi.n	52b0 <opcode_0xCF()+0x64>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5266:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5268:	bb24      	cbnz	r4, 52b4 <opcode_0xCF()+0x68>
    526a:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    526e:	4f18      	ldr	r7, [pc, #96]	; (52d0 <opcode_0xCF()+0x84>)
    5270:	4621      	mov	r1, r4
    5272:	702b      	strb	r3, [r5, #0]
    5274:	8838      	ldrh	r0, [r7, #0]
    5276:	f7fb fa91 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    527a:	4621      	mov	r1, r4
    527c:	8838      	ldrh	r0, [r7, #0]
    527e:	f7fb fa8d 	bl	79c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5282:	4b14      	ldr	r3, [pc, #80]	; (52d4 <opcode_0xCF()+0x88>)
    Calculate_CMP(global_temp);
    5284:	7831      	ldrb	r1, [r6, #0]
    temp = register_a - local_data;
    5286:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5288:	782b      	ldrb	r3, [r5, #0]
    528a:	4291      	cmp	r1, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    528c:	eba2 0201 	sub.w	r2, r2, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5290:	bf94      	ite	ls
    5292:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5296:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    529a:	b2d1      	uxtb	r1, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    529c:	0612      	lsls	r2, r2, #24
    529e:	d40c      	bmi.n	52ba <opcode_0xCF()+0x6e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    52a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    52a4:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    52a6:	b951      	cbnz	r1, 52be <opcode_0xCF()+0x72>
    52a8:	f043 0302 	orr.w	r3, r3, #2
    return;
    52ac:	702b      	strb	r3, [r5, #0]
    return;
} // 0xCF - DCP - Absolute
    52ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    52b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    52b4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    52b8:	e7d9      	b.n	526e <opcode_0xCF()+0x22>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    52ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    52be:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    52c2:	702b      	strb	r3, [r5, #0]
    52c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52c6:	bf00      	nop
    52c8:	200150a0 	.word	0x200150a0
    52cc:	200047c0 	.word	0x200047c0
    52d0:	2001508a 	.word	0x2001508a
    52d4:	200150a3 	.word	0x200150a3

000052d8 <opcode_0xDF()>:
void opcode_0xDF() {
    52d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    52da:	2000      	movs	r0, #0
    global_temp = local_data;
    52dc:	4e1d      	ldr	r6, [pc, #116]	; (5354 <opcode_0xDF()+0x7c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_X(0)));
    52de:	f7fb fc2d 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data - 1;
    52e2:	3801      	subs	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    52e4:	4d1c      	ldr	r5, [pc, #112]	; (5358 <opcode_0xDF()+0x80>)
    52e6:	b2c4      	uxtb	r4, r0
    52e8:	782b      	ldrb	r3, [r5, #0]
    52ea:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    52ec:	7034      	strb	r4, [r6, #0]
    52ee:	d426      	bmi.n	533e <opcode_0xDF()+0x66>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    52f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    52f4:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    52f6:	bb24      	cbnz	r4, 5342 <opcode_0xDF()+0x6a>
    52f8:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    52fc:	4f17      	ldr	r7, [pc, #92]	; (535c <opcode_0xDF()+0x84>)
    52fe:	4621      	mov	r1, r4
    5300:	702b      	strb	r3, [r5, #0]
    5302:	8838      	ldrh	r0, [r7, #0]
    5304:	f7fb fa4a 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5308:	4621      	mov	r1, r4
    530a:	8838      	ldrh	r0, [r7, #0]
    530c:	f7fb fa46 	bl	79c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    5310:	4b13      	ldr	r3, [pc, #76]	; (5360 <opcode_0xDF()+0x88>)
    Calculate_CMP(global_temp);
    5312:	7831      	ldrb	r1, [r6, #0]
    temp = register_a - local_data;
    5314:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    5316:	782b      	ldrb	r3, [r5, #0]
    5318:	4291      	cmp	r1, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    531a:	eba2 0201 	sub.w	r2, r2, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    531e:	bf94      	ite	ls
    5320:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5324:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    5328:	b2d1      	uxtb	r1, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    532a:	0612      	lsls	r2, r2, #24
    532c:	d40c      	bmi.n	5348 <opcode_0xDF()+0x70>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    532e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5332:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5334:	b951      	cbnz	r1, 534c <opcode_0xDF()+0x74>
    5336:	f043 0302 	orr.w	r3, r3, #2
    return;
    533a:	702b      	strb	r3, [r5, #0]
    return;
} // 0xDF - DCP - Absolute , X
    533c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    533e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5342:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5346:	e7d9      	b.n	52fc <opcode_0xDF()+0x24>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    534c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5350:	702b      	strb	r3, [r5, #0]
    5352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5354:	200150a0 	.word	0x200150a0
    5358:	200047c0 	.word	0x200047c0
    535c:	2001508a 	.word	0x2001508a
    5360:	200150a3 	.word	0x200150a3

00005364 <opcode_0xDB()>:
void opcode_0xDB() {
    5364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    5366:	2000      	movs	r0, #0
    global_temp = local_data;
    5368:	4e1d      	ldr	r6, [pc, #116]	; (53e0 <opcode_0xDB()+0x7c>)
    Double_WriteBack(Calculate_DEC(Fetch_Absolute_Y(0)));
    536a:	f7fb fc19 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data - 1;
    536e:	3801      	subs	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5370:	4d1c      	ldr	r5, [pc, #112]	; (53e4 <opcode_0xDB()+0x80>)
    5372:	b2c4      	uxtb	r4, r0
    5374:	782b      	ldrb	r3, [r5, #0]
    5376:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5378:	7034      	strb	r4, [r6, #0]
    537a:	d426      	bmi.n	53ca <opcode_0xDB()+0x66>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    537c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5380:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5382:	bb24      	cbnz	r4, 53ce <opcode_0xDB()+0x6a>
    5384:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5388:	4f17      	ldr	r7, [pc, #92]	; (53e8 <opcode_0xDB()+0x84>)
    538a:	4621      	mov	r1, r4
    538c:	702b      	strb	r3, [r5, #0]
    538e:	8838      	ldrh	r0, [r7, #0]
    5390:	f7fb fa04 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5394:	4621      	mov	r1, r4
    5396:	8838      	ldrh	r0, [r7, #0]
    5398:	f7fb fa00 	bl	79c <write_byte(unsigned short, unsigned char)>
    temp = register_a - local_data;
    539c:	4b13      	ldr	r3, [pc, #76]	; (53ec <opcode_0xDB()+0x88>)
    Calculate_CMP(global_temp);
    539e:	7831      	ldrb	r1, [r6, #0]
    temp = register_a - local_data;
    53a0:	781a      	ldrb	r2, [r3, #0]
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    53a2:	782b      	ldrb	r3, [r5, #0]
    53a4:	4291      	cmp	r1, r2
    Calc_Flags_NEGATIVE_ZERO(temp);
    53a6:	eba2 0201 	sub.w	r2, r2, r1
    if (register_a >= local_data) register_flags = register_flags | 0x01; // Set the C flag
    53aa:	bf94      	ite	ls
    53ac:	f043 0301 	orrls.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    53b0:	f003 03fe 	andhi.w	r3, r3, #254	; 0xfe
    Calc_Flags_NEGATIVE_ZERO(temp);
    53b4:	b2d1      	uxtb	r1, r2
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    53b6:	0612      	lsls	r2, r2, #24
    53b8:	d40c      	bmi.n	53d4 <opcode_0xDB()+0x70>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    53ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    53be:	702b      	strb	r3, [r5, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    53c0:	b951      	cbnz	r1, 53d8 <opcode_0xDB()+0x74>
    53c2:	f043 0302 	orr.w	r3, r3, #2
    return;
    53c6:	702b      	strb	r3, [r5, #0]
    return;
} // 0xDB - DCP - Absolute , Y
    53c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    53ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    53ce:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    53d2:	e7d9      	b.n	5388 <opcode_0xDB()+0x24>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    53d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    53d8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    53dc:	702b      	strb	r3, [r5, #0]
    53de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53e0:	200150a0 	.word	0x200150a0
    53e4:	200047c0 	.word	0x200047c0
    53e8:	2001508a 	.word	0x2001508a
    53ec:	200150a3 	.word	0x200150a3

000053f0 <opcode_0xE7()>:
    register_pc++;
    53f0:	4b17      	ldr	r3, [pc, #92]	; (5450 <opcode_0xE7()+0x60>)
    return read_byte(register_pc, false);
    53f2:	2100      	movs	r1, #0
    register_pc++;
    53f4:	8818      	ldrh	r0, [r3, #0]
    53f6:	3001      	adds	r0, #1
    53f8:	b280      	uxth	r0, r0

// --------------------------------------------------------------------------------------------------
// ISC - Increase memory by one, then subtract memory from accumulator (with borrow).
// --------------------------------------------------------------------------------------------------
void opcode_0xE7() {
    53fa:	b570      	push	{r4, r5, r6, lr}
    53fc:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    53fe:	f7fb f811 	bl	424 <read_byte(unsigned short, bool)>
    effective_address = Fetch_Immediate();
    5402:	4d14      	ldr	r5, [pc, #80]	; (5454 <opcode_0xE7()+0x64>)
    5404:	b280      	uxth	r0, r0
    return read_byte(effective_address, false);
    5406:	2100      	movs	r1, #0
    global_temp = local_data;
    5408:	4e13      	ldr	r6, [pc, #76]	; (5458 <opcode_0xE7()+0x68>)
    effective_address = Fetch_Immediate();
    540a:	8028      	strh	r0, [r5, #0]
    return read_byte(effective_address, false);
    540c:	f7fb f80a 	bl	424 <read_byte(unsigned short, bool)>
    local_data = local_data + 1;
    5410:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5412:	4a12      	ldr	r2, [pc, #72]	; (545c <opcode_0xE7()+0x6c>)
    5414:	b2c4      	uxtb	r4, r0
    5416:	7813      	ldrb	r3, [r2, #0]
    5418:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    541a:	7034      	strb	r4, [r6, #0]
    541c:	d413      	bmi.n	5446 <opcode_0xE7()+0x56>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    541e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5422:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5424:	b98c      	cbnz	r4, 544a <opcode_0xE7()+0x5a>
    5426:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    542a:	8828      	ldrh	r0, [r5, #0]
    542c:	4621      	mov	r1, r4
    542e:	7013      	strb	r3, [r2, #0]
    5430:	f7fb f9b4 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5434:	8828      	ldrh	r0, [r5, #0]
    5436:	4621      	mov	r1, r4
    5438:	f7fb f9b0 	bl	79c <write_byte(unsigned short, unsigned char)>
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage()));
    Calculate_SBC(global_temp);
    543c:	7830      	ldrb	r0, [r6, #0]
    return;
} // 0xE7 - ISC - ZeroPage
    543e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_SBC(global_temp);
    5442:	f7fc ba4d 	b.w	18e0 <Calculate_SBC(unsigned short)>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    544a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    544e:	e7ec      	b.n	542a <opcode_0xE7()+0x3a>
    5450:	2001508c 	.word	0x2001508c
    5454:	2001508a 	.word	0x2001508a
    5458:	200150a0 	.word	0x200150a0
    545c:	200047c0 	.word	0x200047c0

00005460 <opcode_0xF7()>:
void opcode_0xF7() {
    5460:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_ZeroPage_X()));
    5462:	f7fb fb0d 	bl	a80 <Fetch_ZeroPage_X()>
    local_data = local_data + 1;
    5466:	3001      	adds	r0, #1
    global_temp = local_data;
    5468:	4d10      	ldr	r5, [pc, #64]	; (54ac <opcode_0xF7()+0x4c>)
    local_data = local_data + 1;
    546a:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    546c:	4a10      	ldr	r2, [pc, #64]	; (54b0 <opcode_0xF7()+0x50>)
    546e:	0621      	lsls	r1, r4, #24
    5470:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    5472:	702c      	strb	r4, [r5, #0]
    5474:	d414      	bmi.n	54a0 <opcode_0xF7()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    547a:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    547c:	b994      	cbnz	r4, 54a4 <opcode_0xF7()+0x44>
    547e:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5482:	4e0c      	ldr	r6, [pc, #48]	; (54b4 <opcode_0xF7()+0x54>)
    5484:	4621      	mov	r1, r4
    5486:	7013      	strb	r3, [r2, #0]
    5488:	8830      	ldrh	r0, [r6, #0]
    548a:	f7fb f987 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    548e:	8830      	ldrh	r0, [r6, #0]
    5490:	4621      	mov	r1, r4
    5492:	f7fb f983 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5496:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0xF7 - ISC - ZeroPage , X
    5498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_SBC(global_temp);
    549c:	f7fc ba20 	b.w	18e0 <Calculate_SBC(unsigned short)>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    54a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    54a4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    54a8:	e7eb      	b.n	5482 <opcode_0xF7()+0x22>
    54aa:	bf00      	nop
    54ac:	200150a0 	.word	0x200150a0
    54b0:	200047c0 	.word	0x200047c0
    54b4:	2001508a 	.word	0x2001508a

000054b8 <opcode_0xE3()>:
void opcode_0xE3() {
    54b8:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_X()));
    54ba:	f7fb fba3 	bl	c04 <Fetch_Indexed_Indirect_X()>
    local_data = local_data + 1;
    54be:	3001      	adds	r0, #1
    global_temp = local_data;
    54c0:	4d10      	ldr	r5, [pc, #64]	; (5504 <opcode_0xE3()+0x4c>)
    local_data = local_data + 1;
    54c2:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    54c4:	4a10      	ldr	r2, [pc, #64]	; (5508 <opcode_0xE3()+0x50>)
    54c6:	0621      	lsls	r1, r4, #24
    54c8:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    54ca:	702c      	strb	r4, [r5, #0]
    54cc:	d414      	bmi.n	54f8 <opcode_0xE3()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    54ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    54d2:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    54d4:	b994      	cbnz	r4, 54fc <opcode_0xE3()+0x44>
    54d6:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    54da:	4e0c      	ldr	r6, [pc, #48]	; (550c <opcode_0xE3()+0x54>)
    54dc:	4621      	mov	r1, r4
    54de:	7013      	strb	r3, [r2, #0]
    54e0:	8830      	ldrh	r0, [r6, #0]
    54e2:	f7fb f95b 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    54e6:	8830      	ldrh	r0, [r6, #0]
    54e8:	4621      	mov	r1, r4
    54ea:	f7fb f957 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    54ee:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0xE3 - ISC - Indexed Indirect X
    54f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_SBC(global_temp);
    54f4:	f7fc b9f4 	b.w	18e0 <Calculate_SBC(unsigned short)>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    54f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    54fc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5500:	e7eb      	b.n	54da <opcode_0xE3()+0x22>
    5502:	bf00      	nop
    5504:	200150a0 	.word	0x200150a0
    5508:	200047c0 	.word	0x200047c0
    550c:	2001508a 	.word	0x2001508a

00005510 <opcode_0xF3()>:
void opcode_0xF3() {
    5510:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    5512:	2000      	movs	r0, #0
    global_temp = local_data;
    5514:	4d11      	ldr	r5, [pc, #68]	; (555c <opcode_0xF3()+0x4c>)
    Double_WriteBack(Calculate_INC(Fetch_Indexed_Indirect_Y(0)));
    5516:	f7fb fb9f 	bl	c58 <Fetch_Indexed_Indirect_Y(unsigned char)>
    local_data = local_data + 1;
    551a:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    551c:	4a10      	ldr	r2, [pc, #64]	; (5560 <opcode_0xF3()+0x50>)
    551e:	b2c4      	uxtb	r4, r0
    5520:	7813      	ldrb	r3, [r2, #0]
    5522:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    5524:	702c      	strb	r4, [r5, #0]
    5526:	d414      	bmi.n	5552 <opcode_0xF3()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    552c:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    552e:	b994      	cbnz	r4, 5556 <opcode_0xF3()+0x46>
    5530:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    5534:	4e0b      	ldr	r6, [pc, #44]	; (5564 <opcode_0xF3()+0x54>)
    5536:	4621      	mov	r1, r4
    5538:	7013      	strb	r3, [r2, #0]
    553a:	8830      	ldrh	r0, [r6, #0]
    553c:	f7fb f92e 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5540:	8830      	ldrh	r0, [r6, #0]
    5542:	4621      	mov	r1, r4
    5544:	f7fb f92a 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5548:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0xF3 - ISC - Indirect Indexed  Y
    554a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_SBC(global_temp);
    554e:	f7fc b9c7 	b.w	18e0 <Calculate_SBC(unsigned short)>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5556:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    555a:	e7eb      	b.n	5534 <opcode_0xF3()+0x24>
    555c:	200150a0 	.word	0x200150a0
    5560:	200047c0 	.word	0x200047c0
    5564:	2001508a 	.word	0x2001508a

00005568 <opcode_0xEF()>:
void opcode_0xEF() {
    5568:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute()));
    556a:	f7fb fac9 	bl	b00 <Fetch_Absolute()>
    local_data = local_data + 1;
    556e:	3001      	adds	r0, #1
    global_temp = local_data;
    5570:	4d10      	ldr	r5, [pc, #64]	; (55b4 <opcode_0xEF()+0x4c>)
    local_data = local_data + 1;
    5572:	b2c4      	uxtb	r4, r0
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5574:	4a10      	ldr	r2, [pc, #64]	; (55b8 <opcode_0xEF()+0x50>)
    5576:	0621      	lsls	r1, r4, #24
    5578:	7813      	ldrb	r3, [r2, #0]
    global_temp = local_data;
    557a:	702c      	strb	r4, [r5, #0]
    557c:	d414      	bmi.n	55a8 <opcode_0xEF()+0x40>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    557e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5582:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5584:	b994      	cbnz	r4, 55ac <opcode_0xEF()+0x44>
    5586:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    558a:	4e0c      	ldr	r6, [pc, #48]	; (55bc <opcode_0xEF()+0x54>)
    558c:	4621      	mov	r1, r4
    558e:	7013      	strb	r3, [r2, #0]
    5590:	8830      	ldrh	r0, [r6, #0]
    5592:	f7fb f903 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5596:	8830      	ldrh	r0, [r6, #0]
    5598:	4621      	mov	r1, r4
    559a:	f7fb f8ff 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    559e:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0xEF - ISC - Absolute
    55a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_SBC(global_temp);
    55a4:	f7fc b99c 	b.w	18e0 <Calculate_SBC(unsigned short)>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    55a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    55ac:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    55b0:	e7eb      	b.n	558a <opcode_0xEF()+0x22>
    55b2:	bf00      	nop
    55b4:	200150a0 	.word	0x200150a0
    55b8:	200047c0 	.word	0x200047c0
    55bc:	2001508a 	.word	0x2001508a

000055c0 <opcode_0xFF()>:
void opcode_0xFF() {
    55c0:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    55c2:	2000      	movs	r0, #0
    global_temp = local_data;
    55c4:	4d11      	ldr	r5, [pc, #68]	; (560c <opcode_0xFF()+0x4c>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_X(0)));
    55c6:	f7fb fab9 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    local_data = local_data + 1;
    55ca:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    55cc:	4a10      	ldr	r2, [pc, #64]	; (5610 <opcode_0xFF()+0x50>)
    55ce:	b2c4      	uxtb	r4, r0
    55d0:	7813      	ldrb	r3, [r2, #0]
    55d2:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    55d4:	702c      	strb	r4, [r5, #0]
    55d6:	d414      	bmi.n	5602 <opcode_0xFF()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    55d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    55dc:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    55de:	b994      	cbnz	r4, 5606 <opcode_0xFF()+0x46>
    55e0:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    55e4:	4e0b      	ldr	r6, [pc, #44]	; (5614 <opcode_0xFF()+0x54>)
    55e6:	4621      	mov	r1, r4
    55e8:	7013      	strb	r3, [r2, #0]
    55ea:	8830      	ldrh	r0, [r6, #0]
    55ec:	f7fb f8d6 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    55f0:	8830      	ldrh	r0, [r6, #0]
    55f2:	4621      	mov	r1, r4
    55f4:	f7fb f8d2 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    55f8:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0xFF - ISC - Absolute , X
    55fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_SBC(global_temp);
    55fe:	f7fc b96f 	b.w	18e0 <Calculate_SBC(unsigned short)>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    5606:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    560a:	e7eb      	b.n	55e4 <opcode_0xFF()+0x24>
    560c:	200150a0 	.word	0x200150a0
    5610:	200047c0 	.word	0x200047c0
    5614:	2001508a 	.word	0x2001508a

00005618 <opcode_0xFB()>:
void opcode_0xFB() {
    5618:	b570      	push	{r4, r5, r6, lr}
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    561a:	2000      	movs	r0, #0
    global_temp = local_data;
    561c:	4d11      	ldr	r5, [pc, #68]	; (5664 <opcode_0xFB()+0x4c>)
    Double_WriteBack(Calculate_INC(Fetch_Absolute_Y(0)));
    561e:	f7fb fabf 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    local_data = local_data + 1;
    5622:	3001      	adds	r0, #1
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5624:	4a10      	ldr	r2, [pc, #64]	; (5668 <opcode_0xFB()+0x50>)
    5626:	b2c4      	uxtb	r4, r0
    5628:	7813      	ldrb	r3, [r2, #0]
    562a:	0621      	lsls	r1, r4, #24
    global_temp = local_data;
    562c:	702c      	strb	r4, [r5, #0]
    562e:	d414      	bmi.n	565a <opcode_0xFB()+0x42>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5634:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5636:	b994      	cbnz	r4, 565e <opcode_0xFB()+0x46>
    5638:	f043 0302 	orr.w	r3, r3, #2
    write_byte(effective_address, local_data);
    563c:	4e0b      	ldr	r6, [pc, #44]	; (566c <opcode_0xFB()+0x54>)
    563e:	4621      	mov	r1, r4
    5640:	7013      	strb	r3, [r2, #0]
    5642:	8830      	ldrh	r0, [r6, #0]
    5644:	f7fb f8aa 	bl	79c <write_byte(unsigned short, unsigned char)>
    write_byte(effective_address, local_data);
    5648:	8830      	ldrh	r0, [r6, #0]
    564a:	4621      	mov	r1, r4
    564c:	f7fb f8a6 	bl	79c <write_byte(unsigned short, unsigned char)>
    Calculate_SBC(global_temp);
    5650:	7828      	ldrb	r0, [r5, #0]
    return;
} // 0xFB - ISC - Absolute , Y
    5652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Calculate_SBC(global_temp);
    5656:	f7fc b943 	b.w	18e0 <Calculate_SBC(unsigned short)>
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    565a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    565e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5662:	e7eb      	b.n	563c <opcode_0xFB()+0x24>
    5664:	200150a0 	.word	0x200150a0
    5668:	200047c0 	.word	0x200047c0
    566c:	2001508a 	.word	0x2001508a

00005670 <opcode_0x0B()>:
    else register_flags = register_flags & 0xFE; // Clear the C flag

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
void opcode_0x0B() {
    5670:	b508      	push	{r3, lr}
    register_pc++;
    5672:	4b0f      	ldr	r3, [pc, #60]	; (56b0 <opcode_0x0B()+0x40>)
    return read_byte(register_pc, false);
    5674:	2100      	movs	r1, #0
    register_pc++;
    5676:	8818      	ldrh	r0, [r3, #0]
    5678:	3001      	adds	r0, #1
    567a:	b280      	uxth	r0, r0
    567c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    567e:	f7fa fed1 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    5682:	4b0c      	ldr	r3, [pc, #48]	; (56b4 <opcode_0x0B()+0x44>)
    5684:	781a      	ldrb	r2, [r3, #0]
    5686:	4010      	ands	r0, r2
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5688:	4a0b      	ldr	r2, [pc, #44]	; (56b8 <opcode_0x0B()+0x48>)
    568a:	0601      	lsls	r1, r0, #24
    register_a = register_a & local_data;
    568c:	7018      	strb	r0, [r3, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    568e:	7813      	ldrb	r3, [r2, #0]
    if ((0x80 & register_a) == 0x80) register_flags = register_flags | 0x01; // Set the C flag
    5690:	d407      	bmi.n	56a2 <opcode_0x0B()+0x32>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5692:	f003 037e 	and.w	r3, r3, #126	; 0x7e
    5696:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    5698:	b928      	cbnz	r0, 56a6 <opcode_0x0B()+0x36>
    569a:	f043 0302 	orr.w	r3, r3, #2
    return;
    569e:	7013      	strb	r3, [r2, #0]
    Calculate_ANC(Fetch_Immediate());
    return;
} // 0x0B - ANC - Immediate
    56a0:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    56a2:	f043 0381 	orr.w	r3, r3, #129	; 0x81
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    56a6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    56aa:	7013      	strb	r3, [r2, #0]
    56ac:	bd08      	pop	{r3, pc}
    56ae:	bf00      	nop
    56b0:	2001508c 	.word	0x2001508c
    56b4:	200150a3 	.word	0x200150a3
    56b8:	200047c0 	.word	0x200047c0

000056bc <opcode_0x4B()>:
    register_a = (0x7F & (register_a >> 1));

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
void opcode_0x4B() {
    56bc:	b508      	push	{r3, lr}
    register_pc++;
    56be:	4b11      	ldr	r3, [pc, #68]	; (5704 <opcode_0x4B()+0x48>)
    return read_byte(register_pc, false);
    56c0:	2100      	movs	r1, #0
    register_pc++;
    56c2:	8818      	ldrh	r0, [r3, #0]
    56c4:	3001      	adds	r0, #1
    56c6:	b280      	uxth	r0, r0
    56c8:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    56ca:	f7fa feab 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    56ce:	490e      	ldr	r1, [pc, #56]	; (5708 <opcode_0x4B()+0x4c>)
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    56d0:	4a0e      	ldr	r2, [pc, #56]	; (570c <opcode_0x4B()+0x50>)
    register_a = register_a & local_data;
    56d2:	780b      	ldrb	r3, [r1, #0]
    56d4:	4018      	ands	r0, r3
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    56d6:	7813      	ldrb	r3, [r2, #0]
    56d8:	f010 0f01 	tst.w	r0, #1
    register_a = (0x7F & (register_a >> 1));
    56dc:	ea4f 0050 	mov.w	r0, r0, lsr #1
    if ((0x01 & register_a) == 0x01) register_flags = register_flags | 0x01; // Set the C flag
    56e0:	bf14      	ite	ne
    56e2:	f043 0301 	orrne.w	r3, r3, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag
    56e6:	f003 03fe 	andeq.w	r3, r3, #254	; 0xfe
    register_a = (0x7F & (register_a >> 1));
    56ea:	7008      	strb	r0, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    56ec:	b928      	cbnz	r0, 56fa <opcode_0x4B()+0x3e>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    56ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    56f2:	f043 0302 	orr.w	r3, r3, #2
    return;
    56f6:	7013      	strb	r3, [r2, #0]
    Calculate_ALR(Fetch_Immediate());
    return;
} // 0x4B - ALR - Immediate
    56f8:	bd08      	pop	{r3, pc}
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    56fa:	f003 037d 	and.w	r3, r3, #125	; 0x7d
    56fe:	7013      	strb	r3, [r2, #0]
    5700:	bd08      	pop	{r3, pc}
    5702:	bf00      	nop
    5704:	2001508c 	.word	0x2001508c
    5708:	200150a3 	.word	0x200150a3
    570c:	200047c0 	.word	0x200047c0

00005710 <opcode_0x6B()>:
    } // Set the C flag 

    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
}
void opcode_0x6B() {
    5710:	b508      	push	{r3, lr}
    register_pc++;
    5712:	4b10      	ldr	r3, [pc, #64]	; (5754 <opcode_0x6B()+0x44>)
    return read_byte(register_pc, false);
    5714:	2100      	movs	r1, #0
    register_pc++;
    5716:	8818      	ldrh	r0, [r3, #0]
    5718:	3001      	adds	r0, #1
    571a:	b280      	uxth	r0, r0
    571c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    571e:	f7fa fe81 	bl	424 <read_byte(unsigned short, bool)>
    register_a = register_a & local_data;
    5722:	490d      	ldr	r1, [pc, #52]	; (5758 <opcode_0x6B()+0x48>)
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    5724:	4a0d      	ldr	r2, [pc, #52]	; (575c <opcode_0x6B()+0x4c>)
    register_a = register_a & local_data;
    5726:	f891 c000 	ldrb.w	ip, [r1]
    register_flags = register_flags & 0xBE; // Pre-clear the C and V flags   
    572a:	7813      	ldrb	r3, [r2, #0]
    register_a = (0x7F & (register_a >> 1));
    572c:	ea00 000c 	and.w	r0, r0, ip
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5730:	f003 033e 	and.w	r3, r3, #62	; 0x3e
    5734:	0840      	lsrs	r0, r0, #1
    5736:	7008      	strb	r0, [r1, #0]
    if ((0xC0 & register_a) == 0x40) {
    5738:	f000 0140 	and.w	r1, r0, #64	; 0x40
    573c:	b921      	cbnz	r1, 5748 <opcode_0x6B()+0x38>
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    573e:	b928      	cbnz	r0, 574c <opcode_0x6B()+0x3c>
    5740:	f043 0302 	orr.w	r3, r3, #2
    return;
    5744:	7013      	strb	r3, [r2, #0]
    Calculate_ARR(Fetch_Immediate());
    return;
} // 0x6B - ARR - Immediate
    5746:	bd08      	pop	{r3, pc}
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    574c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
    5750:	7013      	strb	r3, [r2, #0]
    5752:	bd08      	pop	{r3, pc}
    5754:	2001508c 	.word	0x2001508c
    5758:	200150a3 	.word	0x200150a3
    575c:	200047c0 	.word	0x200047c0

00005760 <opcode_0xCB()>:
    register_x = (0xFF & register_x);
    Calc_Flags_NEGATIVE_ZERO(register_x);

    return;
}
void opcode_0xCB() {
    5760:	b508      	push	{r3, lr}
    register_pc++;
    5762:	4b14      	ldr	r3, [pc, #80]	; (57b4 <opcode_0xCB()+0x54>)
    return read_byte(register_pc, false);
    5764:	2100      	movs	r1, #0
    register_pc++;
    5766:	8818      	ldrh	r0, [r3, #0]
    5768:	3001      	adds	r0, #1
    576a:	b280      	uxth	r0, r0
    576c:	8018      	strh	r0, [r3, #0]
    return read_byte(register_pc, false);
    576e:	f7fa fe59 	bl	424 <read_byte(unsigned short, bool)>
    register_x = register_a & register_x;
    5772:	4a11      	ldr	r2, [pc, #68]	; (57b8 <opcode_0xCB()+0x58>)
    5774:	4b11      	ldr	r3, [pc, #68]	; (57bc <opcode_0xCB()+0x5c>)
    5776:	7811      	ldrb	r1, [r2, #0]
    5778:	781b      	ldrb	r3, [r3, #0]
    577a:	400b      	ands	r3, r1
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    577c:	4910      	ldr	r1, [pc, #64]	; (57c0 <opcode_0xCB()+0x60>)
    register_x = register_x - local_data;
    577e:	1a1b      	subs	r3, r3, r0
    5780:	b2db      	uxtb	r3, r3
    signed_total = (int16_t) register_x - (int16_t)(local_data);
    5782:	1a18      	subs	r0, r3, r0
    register_x = register_x - local_data;
    5784:	7013      	strb	r3, [r2, #0]
    if (signed_total >= 0) register_flags = register_flags | 0x01; // Set the C flag
    5786:	780a      	ldrb	r2, [r1, #0]
    5788:	0400      	lsls	r0, r0, #16
    578a:	bf54      	ite	pl
    578c:	f042 0201 	orrpl.w	r2, r2, #1
    else register_flags = register_flags & 0xFE; // Clear the C flag  
    5790:	f002 02fe 	andmi.w	r2, r2, #254	; 0xfe
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    5794:	0618      	lsls	r0, r3, #24
    5796:	d407      	bmi.n	57a8 <opcode_0xCB()+0x48>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    5798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    579c:	700a      	strb	r2, [r1, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    579e:	b92b      	cbnz	r3, 57ac <opcode_0xCB()+0x4c>
    57a0:	f042 0202 	orr.w	r2, r2, #2
    return;
    57a4:	700a      	strb	r2, [r1, #0]
    Calculate_SBX(Fetch_Immediate());
    return;
} // 0xCB - SBX - Immediate
    57a6:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    57a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    57ac:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    57b0:	700a      	strb	r2, [r1, #0]
    57b2:	bd08      	pop	{r3, pc}
    57b4:	2001508c 	.word	0x2001508c
    57b8:	200150a4 	.word	0x200150a4
    57bc:	200150a3 	.word	0x200150a3
    57c0:	200047c0 	.word	0x200047c0

000057c4 <opcode_0xBB()>:

// --------------------------------------------------------------------------------------------------
// LAS - AND memory with stack pointer, transfer result to accumulator, X register and stack pointer.
// --------------------------------------------------------------------------------------------------
void opcode_0xBB() {
    57c4:	b508      	push	{r3, lr}
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    57c6:	2001      	movs	r0, #1
    57c8:	f7fb f9ea 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    57cc:	4b0d      	ldr	r3, [pc, #52]	; (5804 <opcode_0xBB()+0x40>)
    register_a = register_sp;
    57ce:	490e      	ldr	r1, [pc, #56]	; (5808 <opcode_0xBB()+0x44>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    57d0:	f893 c000 	ldrb.w	ip, [r3]
    register_x = register_sp;
    57d4:	4a0d      	ldr	r2, [pc, #52]	; (580c <opcode_0xBB()+0x48>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    57d6:	ea00 000c 	and.w	r0, r0, ip
    register_x = register_sp;
    57da:	7010      	strb	r0, [r2, #0]
    register_a = register_sp;
    57dc:	7008      	strb	r0, [r1, #0]
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    57de:	0601      	lsls	r1, r0, #24
    57e0:	4a0b      	ldr	r2, [pc, #44]	; (5810 <opcode_0xBB()+0x4c>)
    register_sp = (register_sp & Fetch_Absolute_Y(1));
    57e2:	7018      	strb	r0, [r3, #0]
    57e4:	7813      	ldrb	r3, [r2, #0]
    57e6:	d407      	bmi.n	57f8 <opcode_0xBB()+0x34>
    else register_flags = register_flags & 0x7F; // Clear the N flag
    57e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    57ec:	7013      	strb	r3, [r2, #0]
    if (local_data == 0) register_flags = register_flags | 0x02; // Set the Z flag
    57ee:	b928      	cbnz	r0, 57fc <opcode_0xBB()+0x38>
    57f0:	f043 0302 	orr.w	r3, r3, #2
    return;
    57f4:	7013      	strb	r3, [r2, #0]
    Begin_Fetch_Next_Opcode();
    Calc_Flags_NEGATIVE_ZERO(register_a);
    return;
} // 0xBB - LAS - Absolute , Y
    57f6:	bd08      	pop	{r3, pc}
    if (0x80 & local_data) register_flags = register_flags | 0x80; // Set the N flag
    57f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    else register_flags = register_flags & 0xFD; // Clear the Z flag 
    57fc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    5800:	7013      	strb	r3, [r2, #0]
    5802:	bd08      	pop	{r3, pc}
    5804:	200047c1 	.word	0x200047c1
    5808:	200150a3 	.word	0x200150a3
    580c:	200150a4 	.word	0x200150a4
    5810:	200047c0 	.word	0x200047c0

00005814 <display_registers()>:
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    5814:	4916      	ldr	r1, [pc, #88]	; (5870 <display_registers()+0x5c>)
    5816:	4b17      	ldr	r3, [pc, #92]	; (5874 <display_registers()+0x60>)
    5818:	4a17      	ldr	r2, [pc, #92]	; (5878 <display_registers()+0x64>)
void display_registers() {
    581a:	b510      	push	{r4, lr}
    581c:	b08a      	sub	sp, #40	; 0x28
    sprintf(buf, "Registers:  A=%02X, X=%02X, Y=%02X", register_a, register_x, register_y);
    581e:	7808      	ldrb	r0, [r1, #0]
    5820:	781b      	ldrb	r3, [r3, #0]
    5822:	7812      	ldrb	r2, [r2, #0]
    5824:	4915      	ldr	r1, [pc, #84]	; (587c <display_registers()+0x68>)
    5826:	9000      	str	r0, [sp, #0]
    5828:	a802      	add	r0, sp, #8
    582a:	f004 f899 	bl	9960 <sprintf>
    582e:	4c14      	ldr	r4, [pc, #80]	; (5880 <display_registers()+0x6c>)
							  return write((const uint8_t *)str, strlen(str)); }
    5830:	a802      	add	r0, sp, #8
    5832:	f004 fce5 	bl	a200 <strlen>
    5836:	4601      	mov	r1, r0
    5838:	a802      	add	r0, sp, #8
    583a:	f002 fd8b 	bl	8354 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    583e:	4620      	mov	r0, r4
    5840:	f001 f904 	bl	6a4c <Print::println()>
    sprintf(buf, "            PC=%04X, SP=%04X", register_pc, register_sp_fixed);
    5844:	4b0f      	ldr	r3, [pc, #60]	; (5884 <display_registers()+0x70>)
    5846:	4a10      	ldr	r2, [pc, #64]	; (5888 <display_registers()+0x74>)
    5848:	a802      	add	r0, sp, #8
    584a:	781b      	ldrb	r3, [r3, #0]
    584c:	8812      	ldrh	r2, [r2, #0]
    584e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5852:	490e      	ldr	r1, [pc, #56]	; (588c <display_registers()+0x78>)
    5854:	f004 f884 	bl	9960 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    5858:	a802      	add	r0, sp, #8
    585a:	f004 fcd1 	bl	a200 <strlen>
    585e:	4601      	mov	r1, r0
    5860:	a802      	add	r0, sp, #8
    5862:	f002 fd77 	bl	8354 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5866:	4620      	mov	r0, r4
    5868:	f001 f8f0 	bl	6a4c <Print::println()>
}
    586c:	b00a      	add	sp, #40	; 0x28
    586e:	bd10      	pop	{r4, pc}
    5870:	200150a5 	.word	0x200150a5
    5874:	200150a4 	.word	0x200150a4
    5878:	200150a3 	.word	0x200150a3
    587c:	20000838 	.word	0x20000838
    5880:	200041b0 	.word	0x200041b0
    5884:	200047c1 	.word	0x200047c1
    5888:	2001508c 	.word	0x2001508c
    588c:	2000085c 	.word	0x2000085c

00005890 <display_info()>:
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    5890:	490c      	ldr	r1, [pc, #48]	; (58c4 <display_info()+0x34>)
    5892:	4b0d      	ldr	r3, [pc, #52]	; (58c8 <display_info()+0x38>)
    5894:	6808      	ldr	r0, [r1, #0]
    5896:	4a0d      	ldr	r2, [pc, #52]	; (58cc <display_info()+0x3c>)
    5898:	781b      	ldrb	r3, [r3, #0]
    589a:	7812      	ldrb	r2, [r2, #0]
    589c:	490c      	ldr	r1, [pc, #48]	; (58d0 <display_info()+0x40>)
void display_info() {
    589e:	b500      	push	{lr}
    58a0:	b093      	sub	sp, #76	; 0x4c
    sprintf(buf, "Run-mode = %d, Address-mode = %d\n\rBreakpoint = %04X", run_mode, addr_mode, breakpoint);
    58a2:	9000      	str	r0, [sp, #0]
    58a4:	a802      	add	r0, sp, #8
    58a6:	f004 f85b 	bl	9960 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    58aa:	a802      	add	r0, sp, #8
    58ac:	f004 fca8 	bl	a200 <strlen>
    58b0:	4601      	mov	r1, r0
    58b2:	a802      	add	r0, sp, #8
    58b4:	f002 fd4e 	bl	8354 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    58b8:	4806      	ldr	r0, [pc, #24]	; (58d4 <display_info()+0x44>)
    58ba:	f001 f8c7 	bl	6a4c <Print::println()>
}
    58be:	b013      	add	sp, #76	; 0x4c
    58c0:	f85d fb04 	ldr.w	pc, [sp], #4
    58c4:	20004fc8 	.word	0x20004fc8
    58c8:	20015098 	.word	0x20015098
    58cc:	200150a6 	.word	0x200150a6
    58d0:	20000398 	.word	0x20000398
    58d4:	200041b0 	.word	0x200041b0

000058d8 <get_command()>:
String get_command() {
    58d8:	b570      	push	{r4, r5, r6, lr}
    58da:	b084      	sub	sp, #16
    String s = "";
    58dc:	491c      	ldr	r1, [pc, #112]	; (5950 <get_command()+0x78>)
String get_command() {
    58de:	4605      	mov	r5, r0
    58e0:	4e1c      	ldr	r6, [pc, #112]	; (5954 <get_command()+0x7c>)
    String s = "";
    58e2:	4668      	mov	r0, sp
    58e4:	f001 f92e 	bl	6b44 <String::String(char const*)>
    58e8:	2103      	movs	r1, #3
    58ea:	481b      	ldr	r0, [pc, #108]	; (5958 <get_command()+0x80>)
    58ec:	f002 fd32 	bl	8354 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
    58f0:	f002 fcc6 	bl	8280 <usb_serial_available>
        if (Serial.available()) {
    58f4:	2800      	cmp	r0, #0
    58f6:	d0fb      	beq.n	58f0 <get_command()+0x18>
        virtual int read() { return usb_serial_getchar(); }
    58f8:	f002 fd06 	bl	8308 <usb_serial_getchar>
            switch(c) {
    58fc:	b2c4      	uxtb	r4, r0
    58fe:	2c08      	cmp	r4, #8
    5900:	d00e      	beq.n	5920 <get_command()+0x48>
    5902:	2c0d      	cmp	r4, #13
                    if (isprint(c)) {
    5904:	4620      	mov	r0, r4
            switch(c) {
    5906:	d016      	beq.n	5936 <get_command()+0x5e>
                    if (isprint(c)) {
    5908:	f003 ff2c 	bl	9764 <isprint>
    590c:	2800      	cmp	r0, #0
    590e:	d0ef      	beq.n	58f0 <get_command()+0x18>
	String & concat(char c)				{return append(c);}
    5910:	4621      	mov	r1, r4
    5912:	4668      	mov	r0, sp
    5914:	f001 f99a 	bl	6c4c <String::append(char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5918:	4620      	mov	r0, r4
    591a:	f002 fd05 	bl	8328 <usb_serial_putchar>
    591e:	e7e7      	b.n	58f0 <get_command()+0x18>
                    s.remove(s.length()-1,1);
    5920:	9902      	ldr	r1, [sp, #8]
    5922:	2201      	movs	r2, #1
    5924:	4668      	mov	r0, sp
    5926:	3901      	subs	r1, #1
    5928:	f001 fa5e 	bl	6de8 <String::remove(unsigned int, unsigned int)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    592c:	2103      	movs	r1, #3
    592e:	4630      	mov	r0, r6
    5930:	f002 fd10 	bl	8354 <usb_serial_write>
    5934:	e7dc      	b.n	58f0 <get_command()+0x18>
                    return(s.toLowerCase());
    5936:	4668      	mov	r0, sp
    5938:	f001 fa76 	bl	6e28 <String::toLowerCase()>
    593c:	4601      	mov	r1, r0
    593e:	4628      	mov	r0, r5
    5940:	f001 f8a6 	bl	6a90 <String::String(String const&)>
}
    5944:	4668      	mov	r0, sp
    5946:	f001 f8c1 	bl	6acc <String::~String()>
    594a:	4628      	mov	r0, r5
    594c:	b004      	add	sp, #16
    594e:	bd70      	pop	{r4, r5, r6, pc}
    5950:	2000047c 	.word	0x2000047c
    5954:	20000374 	.word	0x20000374
    5958:	20000370 	.word	0x20000370

0000595c <parse_next_arg(String&, String&)>:

String parse_next_arg(String &_src, String &remainder) {
    595c:	b570      	push	{r4, r5, r6, lr}
    595e:	460d      	mov	r5, r1
    5960:	b088      	sub	sp, #32
    String arg = "";
    5962:	4923      	ldr	r1, [pc, #140]	; (59f0 <parse_next_arg(String&, String&)+0x94>)
String parse_next_arg(String &_src, String &remainder) {
    5964:	4616      	mov	r6, r2
    5966:	4604      	mov	r4, r0
    String arg = "";
    5968:	f001 f8ec 	bl	6b44 <String::String(char const*)>

    String src = _src.trim();
    596c:	4628      	mov	r0, r5
    596e:	f001 fa6b 	bl	6e48 <String::trim()>
    5972:	4601      	mov	r1, r0
    5974:	4668      	mov	r0, sp
    5976:	f001 f88b 	bl	6a90 <String::String(String const&)>

    // zero-length means nothing to parse
    if (src.length()) {
    597a:	9b02      	ldr	r3, [sp, #8]
    597c:	b92b      	cbnz	r3, 598a <parse_next_arg(String&, String&)+0x2e>
    }

    // Serial.println("Result = "+arg+ ", remainder = "+remainder);

    return arg;
}
    597e:	4668      	mov	r0, sp
    5980:	f001 f8a4 	bl	6acc <String::~String()>
    5984:	4620      	mov	r0, r4
    5986:	b008      	add	sp, #32
    5988:	bd70      	pop	{r4, r5, r6, pc}
        int idx = src.indexOf(' ');
    598a:	2120      	movs	r1, #32
    598c:	4668      	mov	r0, sp
    598e:	f001 f9c3 	bl	6d18 <String::indexOf(char) const>
        if (idx>0) {
    5992:	1e05      	subs	r5, r0, #0
    5994:	dd1e      	ble.n	59d4 <parse_next_arg(String&, String&)+0x78>
            arg = src.substring(0, idx);
    5996:	462b      	mov	r3, r5
    5998:	2200      	movs	r2, #0
    599a:	4669      	mov	r1, sp
    599c:	a804      	add	r0, sp, #16
    599e:	f001 f9f7 	bl	6d90 <String::substring(unsigned int, unsigned int) const>
    59a2:	a904      	add	r1, sp, #16
    59a4:	4620      	mov	r0, r4
    59a6:	f001 f8e9 	bl	6b7c <String::operator=(String&&)>
    59aa:	a804      	add	r0, sp, #16
    59ac:	f001 f88e 	bl	6acc <String::~String()>
            remainder = src.substring(idx+1);
    59b0:	1c6a      	adds	r2, r5, #1
    59b2:	4669      	mov	r1, sp
    59b4:	a804      	add	r0, sp, #16
    59b6:	f001 f9bf 	bl	6d38 <String::substring(unsigned int) const>
    59ba:	a904      	add	r1, sp, #16
    59bc:	4630      	mov	r0, r6
    59be:	f001 f8dd 	bl	6b7c <String::operator=(String&&)>
    59c2:	a804      	add	r0, sp, #16
    59c4:	f001 f882 	bl	6acc <String::~String()>
}
    59c8:	4668      	mov	r0, sp
    59ca:	f001 f87f 	bl	6acc <String::~String()>
    59ce:	4620      	mov	r0, r4
    59d0:	b008      	add	sp, #32
    59d2:	bd70      	pop	{r4, r5, r6, pc}
            arg = src;
    59d4:	4669      	mov	r1, sp
    59d6:	4620      	mov	r0, r4
    59d8:	f001 f8c8 	bl	6b6c <String::operator=(String const&)>
            remainder = "";
    59dc:	4904      	ldr	r1, [pc, #16]	; (59f0 <parse_next_arg(String&, String&)+0x94>)
    59de:	4630      	mov	r0, r6
    59e0:	f001 f8e2 	bl	6ba8 <String::operator=(char const*)>
}
    59e4:	4668      	mov	r0, sp
    59e6:	f001 f871 	bl	6acc <String::~String()>
    59ea:	4620      	mov	r0, r4
    59ec:	b008      	add	sp, #32
    59ee:	bd70      	pop	{r4, r5, r6, pc}
    59f0:	2000047c 	.word	0x2000047c

000059f4 <process_command(String)>:


void(* resetFunc) (void) = 0;//declare reset function at address 0

ENUM_RUN_MODE process_command(String input) {
    59f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59f8:	b09d      	sub	sp, #116	; 0x74
    59fa:	4604      	mov	r4, r0

	//
	//  All commands are of the form: <2-char command>( <arg> (<arg> ...))
	//

    String remainder = "";
    59fc:	499c      	ldr	r1, [pc, #624]	; (5c70 <process_command(String)+0x27c>)
    59fe:	4668      	mov	r0, sp
    5a00:	f001 f8a0 	bl	6b44 <String::String(char const*)>
    String cmd  = parse_next_arg(input, remainder);
    5a04:	466a      	mov	r2, sp
    5a06:	4621      	mov	r1, r4
    5a08:	a804      	add	r0, sp, #16
    5a0a:	f7ff ffa7 	bl	595c <parse_next_arg(String&, String&)>
    String arg1 = parse_next_arg(remainder, remainder);
    5a0e:	466a      	mov	r2, sp
    5a10:	4669      	mov	r1, sp
    5a12:	a808      	add	r0, sp, #32
    5a14:	f7ff ffa2 	bl	595c <parse_next_arg(String&, String&)>
    String arg2 = parse_next_arg(remainder, remainder);
    5a18:	466a      	mov	r2, sp
    5a1a:	4669      	mov	r1, sp
    5a1c:	a80c      	add	r0, sp, #48	; 0x30
    5a1e:	f7ff ff9d 	bl	595c <parse_next_arg(String&, String&)>

    word cmd_int = command_int(cmd);
    5a22:	2100      	movs	r1, #0
    5a24:	a804      	add	r0, sp, #16
    5a26:	f001 f94d 	bl	6cc4 <String::operator[](unsigned int)>
    5a2a:	7805      	ldrb	r5, [r0, #0]
    5a2c:	2101      	movs	r1, #1
    5a2e:	a804      	add	r0, sp, #16
    5a30:	f001 f948 	bl	6cc4 <String::operator[](unsigned int)>
    5a34:	7803      	ldrb	r3, [r0, #0]
    5a36:	022d      	lsls	r5, r5, #8
        char buf[32];
        sprintf(buf, "Command-int = %04X", cmd_int);
        Serial.println(buf);
    }

    switch (cmd_int) {
    5a38:	f646 5264 	movw	r2, #28004	; 0x6d64
    word cmd_int = command_int(cmd);
    5a3c:	442b      	add	r3, r5
    switch (cmd_int) {
    5a3e:	4293      	cmp	r3, r2
    5a40:	f000 8228 	beq.w	5e94 <process_command(String)+0x4a0>
    5a44:	d858      	bhi.n	5af8 <process_command(String)+0x104>
    5a46:	f246 4272 	movw	r2, #25714	; 0x6472
    5a4a:	4293      	cmp	r3, r2
    5a4c:	f000 80bf 	beq.w	5bce <process_command(String)+0x1da>
    5a50:	d935      	bls.n	5abe <process_command(String)+0xca>
    5a52:	f5b3 4fd0 	cmp.w	r3, #26624	; 0x6800
    5a56:	f000 81a7 	beq.w	5da8 <process_command(String)+0x3b4>
    5a5a:	f646 126e 	movw	r2, #26990	; 0x696e
    5a5e:	4293      	cmp	r3, r2
    5a60:	d116      	bne.n	5a90 <process_command(String)+0x9c>
            display_registers();
            run_mode = WAITING;          
            break;

        case CMD_IN:
            display_registers();
    5a62:	f7ff fed7 	bl	5814 <display_registers()>
            display_info();
            run_mode = WAITING;
    5a66:	2400      	movs	r4, #0
            display_info();
    5a68:	f7ff ff12 	bl	5890 <display_info()>
            run_mode = WAITING;
    5a6c:	4b81      	ldr	r3, [pc, #516]	; (5c74 <process_command(String)+0x280>)
    5a6e:	701c      	strb	r4, [r3, #0]
            run_mode = WAITING;
            break;
    }

    return(run_mode);
}
    5a70:	a80c      	add	r0, sp, #48	; 0x30
    5a72:	f001 f82b 	bl	6acc <String::~String()>
    5a76:	a808      	add	r0, sp, #32
    5a78:	f001 f828 	bl	6acc <String::~String()>
    5a7c:	a804      	add	r0, sp, #16
    5a7e:	f001 f825 	bl	6acc <String::~String()>
    5a82:	4668      	mov	r0, sp
    5a84:	f001 f822 	bl	6acc <String::~String()>
    5a88:	4620      	mov	r0, r4
    5a8a:	b01d      	add	sp, #116	; 0x74
    5a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch (cmd_int) {
    5a90:	f246 726f 	movw	r2, #26479	; 0x676f
    5a94:	4293      	cmp	r3, r2
    5a96:	f040 81ce 	bne.w	5e36 <process_command(String)+0x442>
            run_mode = RUNNING;
    5a9a:	4d76      	ldr	r5, [pc, #472]	; (5c74 <process_command(String)+0x280>)
    5a9c:	2402      	movs	r4, #2
            if (arg1.length()) {
    5a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            run_mode = RUNNING;
    5aa0:	702c      	strb	r4, [r5, #0]
            if (arg1.length()) {
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d0e4      	beq.n	5a70 <process_command(String)+0x7c>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    5aa6:	9808      	ldr	r0, [sp, #32]
    5aa8:	2800      	cmp	r0, #0
    5aaa:	f000 8253 	beq.w	5f54 <process_command(String)+0x560>
                register_pc = strtoul(arg1.c_str(), 0, 16);
    5aae:	2210      	movs	r2, #16
    5ab0:	2100      	movs	r1, #0
    5ab2:	f003 fe43 	bl	973c <strtoul>
    5ab6:	4b70      	ldr	r3, [pc, #448]	; (5c78 <process_command(String)+0x284>)
    return(run_mode);
    5ab8:	782c      	ldrb	r4, [r5, #0]
                register_pc = strtoul(arg1.c_str(), 0, 16);
    5aba:	8018      	strh	r0, [r3, #0]
    5abc:	e7d8      	b.n	5a70 <process_command(String)+0x7c>
    switch (cmd_int) {
    5abe:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    5ac2:	f000 8171 	beq.w	5da8 <process_command(String)+0x3b4>
    5ac6:	f246 226b 	movw	r2, #25195	; 0x626b
    5aca:	4293      	cmp	r3, r2
    5acc:	d15f      	bne.n	5b8e <process_command(String)+0x19a>
    5ace:	9808      	ldr	r0, [sp, #32]
    5ad0:	2800      	cmp	r0, #0
    5ad2:	f000 8220 	beq.w	5f16 <process_command(String)+0x522>
                word addr = strtoul(arg1.c_str(), 0, 16);
    5ad6:	2210      	movs	r2, #16
    5ad8:	2100      	movs	r1, #0
    5ada:	f003 fe2f 	bl	973c <strtoul>
                breakpoint = addr;
    5ade:	4b67      	ldr	r3, [pc, #412]	; (5c7c <process_command(String)+0x288>)
    5ae0:	6018      	str	r0, [r3, #0]
    5ae2:	2102      	movs	r1, #2
    5ae4:	4866      	ldr	r0, [pc, #408]	; (5c80 <process_command(String)+0x28c>)
    5ae6:	f002 fc35 	bl	8354 <usb_serial_write>
    5aea:	4866      	ldr	r0, [pc, #408]	; (5c84 <process_command(String)+0x290>)
    5aec:	f000 ffae 	bl	6a4c <Print::println()>
            run_mode = WAITING;
    5af0:	4b60      	ldr	r3, [pc, #384]	; (5c74 <process_command(String)+0x280>)
    5af2:	2400      	movs	r4, #0
    5af4:	701c      	strb	r4, [r3, #0]
            break;
    5af6:	e7bb      	b.n	5a70 <process_command(String)+0x7c>
    switch (cmd_int) {
    5af8:	f247 3273 	movw	r2, #29555	; 0x7373
    5afc:	4293      	cmp	r3, r2
    5afe:	f000 81c5 	beq.w	5e8c <process_command(String)+0x498>
    5b02:	d94a      	bls.n	5b9a <process_command(String)+0x1a6>
    5b04:	f247 4274 	movw	r2, #29812	; 0x7474
    5b08:	4293      	cmp	r3, r2
    5b0a:	f000 80ca 	beq.w	5ca2 <process_command(String)+0x2ae>
    5b0e:	f247 7272 	movw	r2, #30578	; 0x7772
    5b12:	4293      	cmp	r3, r2
    5b14:	f040 818f 	bne.w	5e36 <process_command(String)+0x442>
    5b18:	9808      	ldr	r0, [sp, #32]
    5b1a:	2800      	cmp	r0, #0
    5b1c:	f000 81f9 	beq.w	5f12 <process_command(String)+0x51e>
                word addr = strtoul(arg1.c_str(), 0, 16);
    5b20:	2210      	movs	r2, #16
    5b22:	2100      	movs	r1, #0
    5b24:	f003 fe0a 	bl	973c <strtoul>
    5b28:	4605      	mov	r5, r0
    5b2a:	980c      	ldr	r0, [sp, #48]	; 0x30
    5b2c:	2800      	cmp	r0, #0
    5b2e:	f000 8207 	beq.w	5f40 <process_command(String)+0x54c>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5b32:	f04f 4484 	mov.w	r4, #1107296256	; 0x42000000
    5b36:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
                byte data = strtoul(arg2.c_str(), 0, 16);
    5b3a:	2210      	movs	r2, #16
    5b3c:	2100      	movs	r1, #0
    5b3e:	f003 fdfd 	bl	973c <strtoul>
    5b42:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
                write_byte(addr, data);
    5b46:	b2c1      	uxtb	r1, r0
    5b48:	b2a8      	uxth	r0, r5
    5b4a:	f7fa fe27 	bl	79c <write_byte(unsigned short, unsigned char)>
                while (remainder.length()) {
    5b4e:	9b02      	ldr	r3, [sp, #8]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    5b50:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    5b54:	2b00      	cmp	r3, #0
    5b56:	d0c4      	beq.n	5ae2 <process_command(String)+0xee>
    5b58:	ac14      	add	r4, sp, #80	; 0x50
    5b5a:	4e4b      	ldr	r6, [pc, #300]	; (5c88 <process_command(String)+0x294>)
                    String d = parse_next_arg(remainder, remainder);
    5b5c:	466a      	mov	r2, sp
    5b5e:	4669      	mov	r1, sp
    5b60:	4620      	mov	r0, r4
                    write_byte(++addr, data);
    5b62:	3501      	adds	r5, #1
                    String d = parse_next_arg(remainder, remainder);
    5b64:	f7ff fefa 	bl	595c <parse_next_arg(String&, String&)>
    5b68:	9814      	ldr	r0, [sp, #80]	; 0x50
                    data = strtoul(d.c_str(), 0, 16);
    5b6a:	2210      	movs	r2, #16
    5b6c:	2100      	movs	r1, #0
    5b6e:	2800      	cmp	r0, #0
    5b70:	bf08      	it	eq
    5b72:	4630      	moveq	r0, r6
    5b74:	f003 fde2 	bl	973c <strtoul>
                    write_byte(++addr, data);
    5b78:	b2c1      	uxtb	r1, r0
    5b7a:	b2a8      	uxth	r0, r5
    5b7c:	f7fa fe0e 	bl	79c <write_byte(unsigned short, unsigned char)>
                }
    5b80:	4620      	mov	r0, r4
    5b82:	f000 ffa3 	bl	6acc <String::~String()>
                while (remainder.length()) {
    5b86:	9b02      	ldr	r3, [sp, #8]
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d1e7      	bne.n	5b5c <process_command(String)+0x168>
    5b8c:	e7a9      	b.n	5ae2 <process_command(String)+0xee>
    switch (cmd_int) {
    5b8e:	2b00      	cmp	r3, #0
    5b90:	f040 8151 	bne.w	5e36 <process_command(String)+0x442>
    return(run_mode);
    5b94:	4b37      	ldr	r3, [pc, #220]	; (5c74 <process_command(String)+0x280>)
    5b96:	781c      	ldrb	r4, [r3, #0]
}
    5b98:	e76a      	b.n	5a70 <process_command(String)+0x7c>
    switch (cmd_int) {
    5b9a:	f247 2273 	movw	r2, #29299	; 0x7273
    5b9e:	4293      	cmp	r3, r2
    5ba0:	d07c      	beq.n	5c9c <process_command(String)+0x2a8>
    5ba2:	f247 3272 	movw	r2, #29554	; 0x7372
    5ba6:	4293      	cmp	r3, r2
    5ba8:	d117      	bne.n	5bda <process_command(String)+0x1e6>
    5baa:	980c      	ldr	r0, [sp, #48]	; 0x30
    5bac:	2800      	cmp	r0, #0
    5bae:	f000 81b6 	beq.w	5f1e <process_command(String)+0x52a>
                word value = strtoul(arg2.c_str(), 0, 16);
    5bb2:	2100      	movs	r1, #0
    5bb4:	2210      	movs	r2, #16
    5bb6:	f003 fdc1 	bl	973c <strtoul>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    5bba:	4934      	ldr	r1, [pc, #208]	; (5c8c <process_command(String)+0x298>)
    5bbc:	4604      	mov	r4, r0
    5bbe:	a808      	add	r0, sp, #32
    5bc0:	f001 f86a 	bl	6c98 <String::equals(char const*) const>
                if (arg1=="pc") {
    5bc4:	2800      	cmp	r0, #0
    5bc6:	f000 8172 	beq.w	5eae <process_command(String)+0x4ba>
                    register_pc = value & 0xFFFF;
    5bca:	4b2b      	ldr	r3, [pc, #172]	; (5c78 <process_command(String)+0x284>)
    5bcc:	801c      	strh	r4, [r3, #0]
            display_registers();
    5bce:	f7ff fe21 	bl	5814 <display_registers()>
            run_mode = WAITING;          
    5bd2:	2400      	movs	r4, #0
    5bd4:	4b27      	ldr	r3, [pc, #156]	; (5c74 <process_command(String)+0x280>)
    5bd6:	701c      	strb	r4, [r3, #0]
            break;
    5bd8:	e74a      	b.n	5a70 <process_command(String)+0x7c>
    switch (cmd_int) {
    5bda:	f247 2264 	movw	r2, #29284	; 0x7264
    5bde:	4293      	cmp	r3, r2
    5be0:	f040 8129 	bne.w	5e36 <process_command(String)+0x442>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    5be4:	9808      	ldr	r0, [sp, #32]
    5be6:	2800      	cmp	r0, #0
    5be8:	f000 8197 	beq.w	5f1a <process_command(String)+0x526>
                word addr = strtoul(arg1.c_str(), 0, 16);
    5bec:	2210      	movs	r2, #16
    5bee:	2100      	movs	r1, #0
    5bf0:	f003 fda4 	bl	973c <strtoul>
                if (arg2.length()) {
    5bf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                word addr = strtoul(arg1.c_str(), 0, 16);
    5bf6:	4606      	mov	r6, r0
                sprintf(s,"[%04X] = ", addr);
    5bf8:	ac14      	add	r4, sp, #80	; 0x50
                if (arg2.length()) {
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	f040 8160 	bne.w	5ec0 <process_command(String)+0x4cc>
                sprintf(s,"[%04X] = ", addr);
    5c00:	4602      	mov	r2, r0
    5c02:	4923      	ldr	r1, [pc, #140]	; (5c90 <process_command(String)+0x29c>)
    5c04:	4620      	mov	r0, r4
                byte count = 1;
    5c06:	f04f 0901 	mov.w	r9, #1
                sprintf(s,"[%04X] = ", addr);
    5c0a:	f003 fea9 	bl	9960 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    5c0e:	4620      	mov	r0, r4
    5c10:	f004 faf6 	bl	a200 <strlen>
    5c14:	4601      	mov	r1, r0
    5c16:	4620      	mov	r0, r4
    5c18:	f002 fb9c 	bl	8354 <usb_serial_write>
                byte count = 1;
    5c1c:	2500      	movs	r5, #0
                        sprintf(s,"\n\r[%04X] = ", addr);
    5c1e:	f8df b074 	ldr.w	fp, [pc, #116]	; 5c94 <process_command(String)+0x2a0>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5c22:	f04f 4884 	mov.w	r8, #1107296256	; 0x42000000
                    sprintf(s, "%02X ", data);
    5c26:	f8df a070 	ldr.w	sl, [pc, #112]	; 5c98 <process_command(String)+0x2a4>
    5c2a:	462b      	mov	r3, r5
                    if ((i != 0) && (i % 8 == 0)) {
    5c2c:	b115      	cbz	r5, 5c34 <process_command(String)+0x240>
    5c2e:	075b      	lsls	r3, r3, #29
    5c30:	f000 8177 	beq.w	5f22 <process_command(String)+0x52e>
    5c34:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
                    byte data = read_byte(addr++, false);
    5c38:	2100      	movs	r1, #0
    5c3a:	b2b0      	uxth	r0, r6
                for (byte i=0; i<count; i++) {
    5c3c:	3501      	adds	r5, #1
    5c3e:	f8c8 7084 	str.w	r7, [r8, #132]	; 0x84
    5c42:	3601      	adds	r6, #1
                    byte data = read_byte(addr++, false);
    5c44:	f7fa fbee 	bl	424 <read_byte(unsigned short, bool)>
                    sprintf(s, "%02X ", data);
    5c48:	4651      	mov	r1, sl
                    byte data = read_byte(addr++, false);
    5c4a:	4602      	mov	r2, r0
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    5c4c:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
                    sprintf(s, "%02X ", data);
    5c50:	4620      	mov	r0, r4
    5c52:	f003 fe85 	bl	9960 <sprintf>
    5c56:	4620      	mov	r0, r4
    5c58:	f004 fad2 	bl	a200 <strlen>
    5c5c:	4601      	mov	r1, r0
    5c5e:	4620      	mov	r0, r4
    5c60:	f002 fb78 	bl	8354 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    5c64:	b2eb      	uxtb	r3, r5
    5c66:	454b      	cmp	r3, r9
    5c68:	d3e0      	bcc.n	5c2c <process_command(String)+0x238>
    5c6a:	2100      	movs	r1, #0
    5c6c:	4800      	ldr	r0, [pc, #0]	; (5c70 <process_command(String)+0x27c>)
    5c6e:	e73a      	b.n	5ae6 <process_command(String)+0xf2>
    5c70:	2000047c 	.word	0x2000047c
    5c74:	200150a6 	.word	0x200150a6
    5c78:	2001508c 	.word	0x2001508c
    5c7c:	20004fc8 	.word	0x20004fc8
    5c80:	200007ec 	.word	0x200007ec
    5c84:	200041b0 	.word	0x200041b0
    5c88:	20001084 	.word	0x20001084
    5c8c:	200007a0 	.word	0x200007a0
    5c90:	200007f0 	.word	0x200007f0
    5c94:	200007fc 	.word	0x200007fc
    5c98:	20000808 	.word	0x20000808
            resetFunc(); // Reset the ICE
    5c9c:	4bb5      	ldr	r3, [pc, #724]	; (5f74 <process_command(String)+0x580>)
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	4798      	blx	r3
    if (debug_mode)
    5ca2:	4bb5      	ldr	r3, [pc, #724]	; (5f78 <process_command(String)+0x584>)
    5ca4:	781b      	ldrb	r3, [r3, #0]
    5ca6:	2b00      	cmp	r3, #0
    5ca8:	d177      	bne.n	5d9a <process_command(String)+0x3a6>
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    5caa:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5cae:	6813      	ldr	r3, [r2, #0]
    5cb0:	04de      	lsls	r6, r3, #19
    5cb2:	d4fc      	bmi.n	5cae <process_command(String)+0x2ba>
    while (CLK0) {}      // Wait for CLK0 to become low
    5cb4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5cb8:	6813      	ldr	r3, [r2, #0]
    5cba:	04dd      	lsls	r5, r3, #19
    5cbc:	d5fc      	bpl.n	5cb8 <process_command(String)+0x2c4>
        GPIO6_data_d1 = GPIO6_DR;
    5cbe:	f04f 4084 	mov.w	r0, #1107296256	; 0x42000000
    5cc2:	6803      	ldr	r3, [r0, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    5cc4:	04dc      	lsls	r4, r3, #19
    5cc6:	d5fc      	bpl.n	5cc2 <process_command(String)+0x2ce>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    5cc8:	0d1c      	lsrs	r4, r3, #20
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    5cca:	f3c3 4681 	ubfx	r6, r3, #18, #2
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    5cce:	0ada      	lsrs	r2, r3, #11
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    5cd0:	0b5d      	lsrs	r5, r3, #13
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    5cd2:	f004 01c0 	and.w	r1, r4, #192	; 0xc0
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    5cd6:	f002 0220 	and.w	r2, r2, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    5cda:	f004 0401 	and.w	r4, r4, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5cde:	430a      	orrs	r2, r1
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    5ce0:	f005 0110 	and.w	r1, r5, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    5ce4:	f005 0501 	and.w	r5, r5, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5ce8:	430a      	orrs	r2, r1
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    5cea:	0cd9      	lsrs	r1, r3, #19
    5cec:	f001 0108 	and.w	r1, r1, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5cf0:	430a      	orrs	r2, r1
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    5cf2:	0d59      	lsrs	r1, r3, #21
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    5cf4:	f3c3 7380 	ubfx	r3, r3, #30, #1
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    5cf8:	f001 0704 	and.w	r7, r1, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    5cfc:	f001 0c01 	and.w	ip, r1, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5d00:	499e      	ldr	r1, [pc, #632]	; (5f7c <process_command(String)+0x588>)
    5d02:	433a      	orrs	r2, r7
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    5d04:	4f9e      	ldr	r7, [pc, #632]	; (5f80 <process_command(String)+0x58c>)
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5d06:	4332      	orrs	r2, r6
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    5d08:	4e9e      	ldr	r6, [pc, #632]	; (5f84 <process_command(String)+0x590>)
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    5d0a:	703c      	strb	r4, [r7, #0]
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    5d0c:	7035      	strb	r5, [r6, #0]
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    5d0e:	4d9e      	ldr	r5, [pc, #632]	; (5f88 <process_command(String)+0x594>)
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5d10:	700a      	strb	r2, [r1, #0]
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    5d12:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    5d16:	702b      	strb	r3, [r5, #0]
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5d18:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    5d1c:	4c9b      	ldr	r4, [pc, #620]	; (5f8c <process_command(String)+0x598>)
    5d1e:	f884 c000 	strb.w	ip, [r4]
    5d22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    while (! CLK0) {}    // If CLK0 is already low, wait for it to become high
    5d26:	6813      	ldr	r3, [r2, #0]
    5d28:	04d8      	lsls	r0, r3, #19
    5d2a:	d4fc      	bmi.n	5d26 <process_command(String)+0x332>
    while (CLK0) {}      // Wait for CLK0 to become low
    5d2c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5d30:	6813      	ldr	r3, [r2, #0]
    5d32:	04db      	lsls	r3, r3, #19
    5d34:	d5fc      	bpl.n	5d30 <process_command(String)+0x33c>
        GPIO6_data_d1 = GPIO6_DR;
    5d36:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
    5d3a:	6813      	ldr	r3, [r2, #0]
    } while (((GPIO6_data_d1 >> 12) & 0x1) == 0); // This method needed to support Apple-II+ DRAM read data setup time
    5d3c:	04d8      	lsls	r0, r3, #19
    5d3e:	d5fc      	bpl.n	5d3a <process_command(String)+0x346>
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    5d40:	ea4f 5c13 	mov.w	ip, r3, lsr #20
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    5d44:	0b58      	lsrs	r0, r3, #13
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    5d46:	0ada      	lsrs	r2, r3, #11
    d76 = (GPIO6_data & 0x0C000000) >> 20; // Teensy 4.1 Pin-20  GPIO6_DR[27:26]  D7:D6
    5d48:	f00c 0ec0 	and.w	lr, ip, #192	; 0xc0
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    5d4c:	f00c 0c01 	and.w	ip, ip, #1
    d5 = (GPIO6_data & 0x00010000) >> 11; // Teensy 4.1 Pin-19  GPIO6_DR[16]     D5
    5d50:	f002 0220 	and.w	r2, r2, #32
    direct_reset = (GPIO6_data & 0x00100000) >> 20; // Teensy 4.1 Pin-40  GPIO6_DR[20]     RESET
    5d54:	f887 c000 	strb.w	ip, [r7]
    d4 = (GPIO6_data & 0x00020000) >> 13; // Teensy 4.1 Pin-18  GPIO6_DR[17]     D4
    5d58:	f000 0710 	and.w	r7, r0, #16
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    5d5c:	f000 0001 	and.w	r0, r0, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5d60:	ea42 020e 	orr.w	r2, r2, lr
    direct_irq = (GPIO6_data & 0x00002000) >> 13; // Teensy 4.1 Pin-25  GPIO6_DR[13]     IRQ
    5d64:	7030      	strb	r0, [r6, #0]
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    5d66:	0cd8      	lsrs	r0, r3, #19
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5d68:	433a      	orrs	r2, r7
    d10 = (GPIO6_data & 0x000C0000) >> 18; // Teensy 4.1 Pin-14  GPIO6_DR[19:18]  D1:D0
    5d6a:	f3c3 4681 	ubfx	r6, r3, #18, #2
    d3 = (GPIO6_data & 0x00400000) >> 19; // Teensy 4.1 Pin-17  GPIO6_DR[22]     D3
    5d6e:	f000 0008 	and.w	r0, r0, #8
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5d72:	4302      	orrs	r2, r0
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    5d74:	0d58      	lsrs	r0, r3, #21
    direct_ready_n = (GPIO6_data & 0x40000000) >> 30; // Teensy 4.1 Pin-26  GPIO6_DR[30]     READY
    5d76:	f3c3 7380 	ubfx	r3, r3, #30, #1
    5d7a:	702b      	strb	r3, [r5, #0]
    d2 = (GPIO6_data & 0x00800000) >> 21; // Teensy 4.1 Pin-16  GPIO6_DR[23]     D2
    5d7c:	f000 0304 	and.w	r3, r0, #4
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    5d80:	f000 0001 	and.w	r0, r0, #1
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5d84:	4313      	orrs	r3, r2
    direct_nmi = (GPIO6_data & 0x00200000) >> 21; // Teensy 4.1 Pin-41  GPIO6_DR[21]     NMI
    5d86:	7020      	strb	r0, [r4, #0]
    direct_datain = d76 | d5 | d4 | d3 | d2 | d10;
    5d88:	4333      	orrs	r3, r6
    5d8a:	700b      	strb	r3, [r1, #0]
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    5d8c:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5d90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    5d98:	e6fc      	b.n	5b94 <process_command(String)+0x1a0>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    5d9a:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    5d9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    5da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    if (debug_mode)
    5da6:	e7f1      	b.n	5d8c <process_command(String)+0x398>
            Serial.println(String("Available Commands:\n\r")+
    5da8:	4979      	ldr	r1, [pc, #484]	; (5f90 <process_command(String)+0x59c>)
    5daa:	a810      	add	r0, sp, #64	; 0x40
    5dac:	f000 feca 	bl	6b44 <String::String(char const*)>
	StringSumHelper(const String &s) : String(s) {}
    5db0:	a910      	add	r1, sp, #64	; 0x40
    5db2:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    5db4:	2400      	movs	r4, #0
    5db6:	f000 fe6b 	bl	6a90 <String::String(String const&)>
                           "    IN                      Information about ICE state\n\r"+
    5dba:	4976      	ldr	r1, [pc, #472]	; (5f94 <process_command(String)+0x5a0>)
    5dbc:	a814      	add	r0, sp, #80	; 0x50
    5dbe:	f000 ff5d 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    MD <mode>               Set memory addressing mode (0-3 see below)\n\r"+
    5dc2:	4975      	ldr	r1, [pc, #468]	; (5f98 <process_command(String)+0x5a4>)
    5dc4:	f000 ff5a 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    DR                      Dump registers\n\r"+
    5dc8:	4974      	ldr	r1, [pc, #464]	; (5f9c <process_command(String)+0x5a8>)
    5dca:	f000 ff57 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    SS                      Single-step execution\n\r"+
    5dce:	4974      	ldr	r1, [pc, #464]	; (5fa0 <process_command(String)+0x5ac>)
    5dd0:	f000 ff54 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    GO (<address>)          Begin execution (at optional address)\n\r"+
    5dd4:	4973      	ldr	r1, [pc, #460]	; (5fa4 <process_command(String)+0x5b0>)
    5dd6:	f000 ff51 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    BK <address>            Set execution breakpoint\n\r"+
    5dda:	4973      	ldr	r1, [pc, #460]	; (5fa8 <process_command(String)+0x5b4>)
    5ddc:	f000 ff4e 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    SR <reg> <value>        Set register (PC, A, X, Y) to value\n\r"+
    5de0:	4972      	ldr	r1, [pc, #456]	; (5fac <process_command(String)+0x5b8>)
    5de2:	f000 ff4b 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    RD <address> (<count>)  Read from memory address, displays <count> values\n\r"+
    5de6:	4972      	ldr	r1, [pc, #456]	; (5fb0 <process_command(String)+0x5bc>)
    5de8:	f000 ff48 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    WR <address> <value>    Write value to memory address\n\r"+
    5dec:	4971      	ldr	r1, [pc, #452]	; (5fb4 <process_command(String)+0x5c0>)
    5dee:	f000 ff45 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "\n"+
    5df2:	4971      	ldr	r1, [pc, #452]	; (5fb8 <process_command(String)+0x5c4>)
    5df4:	f000 ff42 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "    Addressing Modes:\n\r"+
    5df8:	4970      	ldr	r1, [pc, #448]	; (5fbc <process_command(String)+0x5c8>)
    5dfa:	f000 ff3f 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "       0 - All exernal memory accesses\n\r"+
    5dfe:	4970      	ldr	r1, [pc, #448]	; (5fc0 <process_command(String)+0x5cc>)
    5e00:	f000 ff3c 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "       1 - Reads use cycle accurate internal memory and writes pass through to motherboard\n\r"+
    5e04:	496f      	ldr	r1, [pc, #444]	; (5fc4 <process_command(String)+0x5d0>)
    5e06:	f000 ff39 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "       2 - Reads accelerated using internal memory and writes pass through to motherboard\n\r"+
    5e0a:	496f      	ldr	r1, [pc, #444]	; (5fc8 <process_command(String)+0x5d4>)
    5e0c:	f000 ff36 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
                           "       3 - All read and write accesses use accelerated internal memory\n\r");
    5e10:	496e      	ldr	r1, [pc, #440]	; (5fcc <process_command(String)+0x5d8>)
    5e12:	f000 ff33 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
    5e16:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    5e18:	486d      	ldr	r0, [pc, #436]	; (5fd0 <process_command(String)+0x5dc>)
    5e1a:	f000 fdf1 	bl	6a00 <Print::print(String const&)>
    5e1e:	486c      	ldr	r0, [pc, #432]	; (5fd0 <process_command(String)+0x5dc>)
    5e20:	f000 fe14 	bl	6a4c <Print::println()>
class StringSumHelper : public String
    5e24:	a814      	add	r0, sp, #80	; 0x50
    5e26:	f000 fe51 	bl	6acc <String::~String()>
            Serial.println(String("Available Commands:\n\r")+
    5e2a:	a810      	add	r0, sp, #64	; 0x40
    5e2c:	f000 fe4e 	bl	6acc <String::~String()>
            run_mode = WAITING;
    5e30:	4b68      	ldr	r3, [pc, #416]	; (5fd4 <process_command(String)+0x5e0>)
    5e32:	701c      	strb	r4, [r3, #0]
            break;
    5e34:	e61c      	b.n	5a70 <process_command(String)+0x7c>
	StringSumHelper(const char *p) : String(p) {}
    5e36:	4968      	ldr	r1, [pc, #416]	; (5fd8 <process_command(String)+0x5e4>)
    5e38:	a814      	add	r0, sp, #80	; 0x50
    5e3a:	f000 fe83 	bl	6b44 <String::String(char const*)>
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    5e3e:	4621      	mov	r1, r4
    5e40:	a814      	add	r0, sp, #80	; 0x50
            run_mode = WAITING;
    5e42:	2400      	movs	r4, #0
            Serial.println("\n\nERROR: Can't parse command: \"" + input + "\" ("+cmd+", "+arg1+", "+arg2+")");
    5e44:	f000 ff12 	bl	6c6c <operator+(StringSumHelper const&, String const&)>
    5e48:	4964      	ldr	r1, [pc, #400]	; (5fdc <process_command(String)+0x5e8>)
    5e4a:	f000 ff17 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
    5e4e:	a904      	add	r1, sp, #16
    5e50:	f000 ff0c 	bl	6c6c <operator+(StringSumHelper const&, String const&)>
    5e54:	4962      	ldr	r1, [pc, #392]	; (5fe0 <process_command(String)+0x5ec>)
    5e56:	f000 ff11 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
    5e5a:	a908      	add	r1, sp, #32
    5e5c:	f000 ff06 	bl	6c6c <operator+(StringSumHelper const&, String const&)>
    5e60:	495f      	ldr	r1, [pc, #380]	; (5fe0 <process_command(String)+0x5ec>)
    5e62:	f000 ff0b 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
    5e66:	a90c      	add	r1, sp, #48	; 0x30
    5e68:	f000 ff00 	bl	6c6c <operator+(StringSumHelper const&, String const&)>
    5e6c:	495d      	ldr	r1, [pc, #372]	; (5fe4 <process_command(String)+0x5f0>)
    5e6e:	f000 ff05 	bl	6c7c <operator+(StringSumHelper const&, char const*)>
    5e72:	4601      	mov	r1, r0
    5e74:	4856      	ldr	r0, [pc, #344]	; (5fd0 <process_command(String)+0x5dc>)
    5e76:	f000 fdc3 	bl	6a00 <Print::print(String const&)>
    5e7a:	4855      	ldr	r0, [pc, #340]	; (5fd0 <process_command(String)+0x5dc>)
    5e7c:	f000 fde6 	bl	6a4c <Print::println()>
class StringSumHelper : public String
    5e80:	a814      	add	r0, sp, #80	; 0x50
    5e82:	f000 fe23 	bl	6acc <String::~String()>
            run_mode = WAITING;
    5e86:	4b53      	ldr	r3, [pc, #332]	; (5fd4 <process_command(String)+0x5e0>)
    5e88:	701c      	strb	r4, [r3, #0]
            break;
    5e8a:	e5f1      	b.n	5a70 <process_command(String)+0x7c>
            run_mode = SINGLE_STEP;
    5e8c:	4b51      	ldr	r3, [pc, #324]	; (5fd4 <process_command(String)+0x5e0>)
    5e8e:	2401      	movs	r4, #1
    5e90:	701c      	strb	r4, [r3, #0]
            break;
    5e92:	e5ed      	b.n	5a70 <process_command(String)+0x7c>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    5e94:	9808      	ldr	r0, [sp, #32]
    5e96:	2800      	cmp	r0, #0
    5e98:	d050      	beq.n	5f3c <process_command(String)+0x548>
                byte a_mode = strtoul(arg1.c_str(), 0, 10);
    5e9a:	220a      	movs	r2, #10
    5e9c:	2100      	movs	r1, #0
    5e9e:	f003 fc4d 	bl	973c <strtoul>
    5ea2:	b2c0      	uxtb	r0, r0
                if (a_mode < 4)
    5ea4:	2803      	cmp	r0, #3
    5ea6:	d821      	bhi.n	5eec <process_command(String)+0x4f8>
                    addr_mode = (ADDR_MODE)a_mode;
    5ea8:	4b4f      	ldr	r3, [pc, #316]	; (5fe8 <process_command(String)+0x5f4>)
    5eaa:	7018      	strb	r0, [r3, #0]
    5eac:	e620      	b.n	5af0 <process_command(String)+0xfc>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    5eae:	494f      	ldr	r1, [pc, #316]	; (5fec <process_command(String)+0x5f8>)
    5eb0:	a808      	add	r0, sp, #32
    5eb2:	f000 fef1 	bl	6c98 <String::equals(char const*) const>
                else if (arg1=="a") {
    5eb6:	2800      	cmp	r0, #0
    5eb8:	d044      	beq.n	5f44 <process_command(String)+0x550>
                    register_a = value & 0xFF;
    5eba:	4b4d      	ldr	r3, [pc, #308]	; (5ff0 <process_command(String)+0x5fc>)
    5ebc:	701c      	strb	r4, [r3, #0]
    5ebe:	e686      	b.n	5bce <process_command(String)+0x1da>
                    count = arg2.toInt() & 0xFF;
    5ec0:	a80c      	add	r0, sp, #48	; 0x30
    5ec2:	f000 ffed 	bl	6ea0 <String::toInt() const>
                sprintf(s,"[%04X] = ", addr);
    5ec6:	494b      	ldr	r1, [pc, #300]	; (5ff4 <process_command(String)+0x600>)
                    count = arg2.toInt() & 0xFF;
    5ec8:	fa5f f980 	uxtb.w	r9, r0
                sprintf(s,"[%04X] = ", addr);
    5ecc:	4632      	mov	r2, r6
    5ece:	4620      	mov	r0, r4
    5ed0:	f003 fd46 	bl	9960 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    5ed4:	4620      	mov	r0, r4
    5ed6:	f004 f993 	bl	a200 <strlen>
    5eda:	4601      	mov	r1, r0
    5edc:	4620      	mov	r0, r4
    5ede:	f002 fa39 	bl	8354 <usb_serial_write>
                for (byte i=0; i<count; i++) {
    5ee2:	f1b9 0f00 	cmp.w	r9, #0
    5ee6:	f47f ae99 	bne.w	5c1c <process_command(String)+0x228>
    5eea:	e6be      	b.n	5c6a <process_command(String)+0x276>
	StringSumHelper(const char *p) : String(p) {}
    5eec:	4942      	ldr	r1, [pc, #264]	; (5ff8 <process_command(String)+0x604>)
    5eee:	a814      	add	r0, sp, #80	; 0x50
    5ef0:	f000 fe28 	bl	6b44 <String::String(char const*)>
                    Serial.println("MD error. Illegal argument: "+arg1);
    5ef4:	a908      	add	r1, sp, #32
    5ef6:	a814      	add	r0, sp, #80	; 0x50
    5ef8:	f000 feb8 	bl	6c6c <operator+(StringSumHelper const&, String const&)>
    5efc:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    5efe:	4834      	ldr	r0, [pc, #208]	; (5fd0 <process_command(String)+0x5dc>)
    5f00:	f000 fd7e 	bl	6a00 <Print::print(String const&)>
    5f04:	4832      	ldr	r0, [pc, #200]	; (5fd0 <process_command(String)+0x5dc>)
    5f06:	f000 fda1 	bl	6a4c <Print::println()>
class StringSumHelper : public String
    5f0a:	a814      	add	r0, sp, #80	; 0x50
    5f0c:	f000 fdde 	bl	6acc <String::~String()>
            run_mode = WAITING;
    5f10:	e5ee      	b.n	5af0 <process_command(String)+0xfc>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    5f12:	483a      	ldr	r0, [pc, #232]	; (5ffc <process_command(String)+0x608>)
    5f14:	e604      	b.n	5b20 <process_command(String)+0x12c>
    5f16:	4839      	ldr	r0, [pc, #228]	; (5ffc <process_command(String)+0x608>)
    5f18:	e5dd      	b.n	5ad6 <process_command(String)+0xe2>
    5f1a:	4838      	ldr	r0, [pc, #224]	; (5ffc <process_command(String)+0x608>)
    5f1c:	e666      	b.n	5bec <process_command(String)+0x1f8>
    5f1e:	4837      	ldr	r0, [pc, #220]	; (5ffc <process_command(String)+0x608>)
    5f20:	e647      	b.n	5bb2 <process_command(String)+0x1be>
                        sprintf(s,"\n\r[%04X] = ", addr);
    5f22:	4659      	mov	r1, fp
    5f24:	4632      	mov	r2, r6
    5f26:	4620      	mov	r0, r4
    5f28:	f003 fd1a 	bl	9960 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    5f2c:	4620      	mov	r0, r4
    5f2e:	f004 f967 	bl	a200 <strlen>
    5f32:	4601      	mov	r1, r0
    5f34:	4620      	mov	r0, r4
    5f36:	f002 fa0d 	bl	8354 <usb_serial_write>
    5f3a:	e67b      	b.n	5c34 <process_command(String)+0x240>
    5f3c:	482f      	ldr	r0, [pc, #188]	; (5ffc <process_command(String)+0x608>)
    5f3e:	e7ac      	b.n	5e9a <process_command(String)+0x4a6>
    5f40:	482e      	ldr	r0, [pc, #184]	; (5ffc <process_command(String)+0x608>)
    5f42:	e5f6      	b.n	5b32 <process_command(String)+0x13e>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    5f44:	492e      	ldr	r1, [pc, #184]	; (6000 <process_command(String)+0x60c>)
    5f46:	a808      	add	r0, sp, #32
    5f48:	f000 fea6 	bl	6c98 <String::equals(char const*) const>
                else if (arg1=="x") {
    5f4c:	b120      	cbz	r0, 5f58 <process_command(String)+0x564>
                    register_x = value & 0xFF;
    5f4e:	4b2d      	ldr	r3, [pc, #180]	; (6004 <process_command(String)+0x610>)
    5f50:	701c      	strb	r4, [r3, #0]
    5f52:	e63c      	b.n	5bce <process_command(String)+0x1da>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    5f54:	4829      	ldr	r0, [pc, #164]	; (5ffc <process_command(String)+0x608>)
    5f56:	e5aa      	b.n	5aae <process_command(String)+0xba>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    5f58:	492b      	ldr	r1, [pc, #172]	; (6008 <process_command(String)+0x614>)
    5f5a:	a808      	add	r0, sp, #32
    5f5c:	f000 fe9c 	bl	6c98 <String::equals(char const*) const>
                else if (arg1=="y") {
    5f60:	b110      	cbz	r0, 5f68 <process_command(String)+0x574>
                    register_y = value & 0xFF;
    5f62:	4b2a      	ldr	r3, [pc, #168]	; (600c <process_command(String)+0x618>)
    5f64:	701c      	strb	r4, [r3, #0]
    5f66:	e632      	b.n	5bce <process_command(String)+0x1da>
                    Serial.println("ERROR: unknown register identifier (options: pc, a, x, y)");
    5f68:	4929      	ldr	r1, [pc, #164]	; (6010 <process_command(String)+0x61c>)
    5f6a:	4819      	ldr	r0, [pc, #100]	; (5fd0 <process_command(String)+0x5dc>)
    5f6c:	f7fa f87c 	bl	68 <Print::println(char const*) [clone .isra.0]>
    5f70:	e62d      	b.n	5bce <process_command(String)+0x1da>
    5f72:	bf00      	nop
    5f74:	20015020 	.word	0x20015020
    5f78:	200047be 	.word	0x200047be
    5f7c:	2001509a 	.word	0x2001509a
    5f80:	2001509e 	.word	0x2001509e
    5f84:	2001509b 	.word	0x2001509b
    5f88:	2001509d 	.word	0x2001509d
    5f8c:	2001509c 	.word	0x2001509c
    5f90:	200003e0 	.word	0x200003e0
    5f94:	200003f8 	.word	0x200003f8
    5f98:	20000434 	.word	0x20000434
    5f9c:	20000480 	.word	0x20000480
    5fa0:	200004b0 	.word	0x200004b0
    5fa4:	200004e4 	.word	0x200004e4
    5fa8:	20000528 	.word	0x20000528
    5fac:	20000560 	.word	0x20000560
    5fb0:	200005a4 	.word	0x200005a4
    5fb4:	200005f4 	.word	0x200005f4
    5fb8:	20000630 	.word	0x20000630
    5fbc:	20000634 	.word	0x20000634
    5fc0:	2000064c 	.word	0x2000064c
    5fc4:	20000678 	.word	0x20000678
    5fc8:	200006d8 	.word	0x200006d8
    5fcc:	20000734 	.word	0x20000734
    5fd0:	200041b0 	.word	0x200041b0
    5fd4:	200150a6 	.word	0x200150a6
    5fd8:	20000810 	.word	0x20000810
    5fdc:	20000830 	.word	0x20000830
    5fe0:	20000834 	.word	0x20000834
    5fe4:	200007e8 	.word	0x200007e8
    5fe8:	20015098 	.word	0x20015098
    5fec:	200007a4 	.word	0x200007a4
    5ff0:	200150a3 	.word	0x200150a3
    5ff4:	200007f0 	.word	0x200007f0
    5ff8:	20000780 	.word	0x20000780
    5ffc:	20001084 	.word	0x20001084
    6000:	200007a8 	.word	0x200007a8
    6004:	200150a4 	.word	0x200150a4
    6008:	200007ac 	.word	0x200007ac
    600c:	200150a5 	.word	0x200150a5
    6010:	200007b0 	.word	0x200007b0

00006014 <loop>:
// -------------------------------------------------
//
// Main loop 
//
// -------------------------------------------------
void loop() {
    6014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    // Give Teensy 4.1 a moment
    delay(50);
    6018:	2032      	movs	r0, #50	; 0x32
void loop() {
    601a:	b08d      	sub	sp, #52	; 0x34
    delay(50);
    601c:	f000 ff46 	bl	6eac <delay>
    sample_at_CLK_rising_edge();
    6020:	4e50      	ldr	r6, [pc, #320]	; (6164 <loop+0x150>)
    6022:	f7fa f9af 	bl	384 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    6026:	f8df 8164 	ldr.w	r8, [pc, #356]	; 618c <loop+0x178>
    602a:	f7fa f9ab 	bl	384 <sample_at_CLK_rising_edge()>
    sample_at_CLK_rising_edge();
    602e:	4c4e      	ldr	r4, [pc, #312]	; (6168 <loop+0x154>)
    6030:	f7fa f9a8 	bl	384 <sample_at_CLK_rising_edge()>

    reset_sequence();
    6034:	f8df b150 	ldr.w	fp, [pc, #336]	; 6188 <loop+0x174>
    6038:	f7fa ff70 	bl	f1c <reset_sequence()>

    while (1) {

        if (direct_reset == 1) reset_sequence();
    603c:	4b4b      	ldr	r3, [pc, #300]	; (616c <loop+0x158>)
    sprintf(buffer, "PC:%04X - %02X", pc, opcode);
    603e:	f8df a150 	ldr.w	sl, [pc, #336]	; 6190 <loop+0x17c>
        if (direct_reset == 1) reset_sequence();
    6042:	781b      	ldrb	r3, [r3, #0]
	size_t println(const char s[])			{ return print(s) + println(); }
    6044:	4d4a      	ldr	r5, [pc, #296]	; (6170 <loop+0x15c>)
    6046:	2b01      	cmp	r3, #1
    6048:	f000 81c0 	beq.w	63cc <loop+0x3b8>

        // Poll for NMI and IRQ
        //
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    604c:	4b49      	ldr	r3, [pc, #292]	; (6174 <loop+0x160>)
    604e:	781b      	ldrb	r3, [r3, #0]
    6050:	2b00      	cmp	r3, #0
    6052:	f040 8083 	bne.w	615c <loop+0x148>
    6056:	4b48      	ldr	r3, [pc, #288]	; (6178 <loop+0x164>)
    6058:	781b      	ldrb	r3, [r3, #0]
    605a:	2b01      	cmp	r3, #1
    605c:	d07c      	beq.n	6158 <loop+0x144>
        nmi_n_old = direct_nmi;
    605e:	4a45      	ldr	r2, [pc, #276]	; (6174 <loop+0x160>)
    6060:	7013      	strb	r3, [r2, #0]
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    6062:	4b46      	ldr	r3, [pc, #280]	; (617c <loop+0x168>)
    6064:	781b      	ldrb	r3, [r3, #0]
    6066:	2b01      	cmp	r3, #1
    6068:	f000 81c1 	beq.w	63ee <loop+0x3da>

//        next_instruction = finish_read_byte();
        next_instruction = read_byte(register_pc, false);
    606c:	2100      	movs	r1, #0
    606e:	8830      	ldrh	r0, [r6, #0]
    6070:	f7fa f9d8 	bl	424 <read_byte(unsigned short, bool)>

        //============================================================================
        //  ICE interface code
        //
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    6074:	4a42      	ldr	r2, [pc, #264]	; (6180 <loop+0x16c>)
        next_instruction = read_byte(register_pc, false);
    6076:	4603      	mov	r3, r0
    6078:	f888 0000 	strb.w	r0, [r8]
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    607c:	6812      	ldr	r2, [r2, #0]
    607e:	2a00      	cmp	r2, #0
    6080:	f000 8088 	beq.w	6194 <loop+0x180>
    6084:	7821      	ldrb	r1, [r4, #0]
    6086:	f8b6 9000 	ldrh.w	r9, [r6]
    608a:	2902      	cmp	r1, #2
    608c:	f000 81b8 	beq.w	6400 <loop+0x3ec>
void loop() {
    6090:	464a      	mov	r2, r9
    6092:	4f3c      	ldr	r7, [pc, #240]	; (6184 <loop+0x170>)
    6094:	e032      	b.n	60fc <loop+0xe8>
    6096:	f002 f95d 	bl	8354 <usb_serial_write>
    609a:	4628      	mov	r0, r5
    609c:	f000 fcd6 	bl	6a4c <Print::println()>
                    Serial.println(last_command);
                    run_mode = process_command(last_command);
                }
                else {
                    Serial.println(" ");
                    run_mode = process_command(c);
    60a0:	4669      	mov	r1, sp
    60a2:	a804      	add	r0, sp, #16
    60a4:	f000 fcf4 	bl	6a90 <String::String(String const&)>
    60a8:	a804      	add	r0, sp, #16
    60aa:	f7ff fca3 	bl	59f4 <process_command(String)>
    60ae:	4603      	mov	r3, r0
    60b0:	a804      	add	r0, sp, #16
    60b2:	7023      	strb	r3, [r4, #0]
    60b4:	f000 fd0a 	bl	6acc <String::~String()>
                    last_command = c;
    60b8:	4669      	mov	r1, sp
    60ba:	4833      	ldr	r0, [pc, #204]	; (6188 <loop+0x174>)
    60bc:	f000 fd56 	bl	6b6c <String::operator=(String const&)>
    60c0:	2101      	movs	r1, #1
    60c2:	4638      	mov	r0, r7
    60c4:	f002 f946 	bl	8354 <usb_serial_write>
    60c8:	4628      	mov	r0, r5
    60ca:	f000 fcbf 	bl	6a4c <Print::println()>
                }

                Serial.println(" ");

                //  Update the next_instruction, as PC or memory may have changed
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    60ce:	7823      	ldrb	r3, [r4, #0]
    60d0:	2b02      	cmp	r3, #2
    60d2:	d009      	beq.n	60e8 <loop+0xd4>
    60d4:	8830      	ldrh	r0, [r6, #0]
                    next_instruction = read_byte(register_pc, false);
    60d6:	2100      	movs	r1, #0
                if ((run_mode != RUNNING) && (register_pc != temp_pc)) {
    60d8:	4548      	cmp	r0, r9
    60da:	d005      	beq.n	60e8 <loop+0xd4>
                    next_instruction = read_byte(register_pc, false);
    60dc:	f7fa f9a2 	bl	424 <read_byte(unsigned short, bool)>
                    temp_pc = register_pc;
    60e0:	f8b6 9000 	ldrh.w	r9, [r6]
                    next_instruction = read_byte(register_pc, false);
    60e4:	f888 0000 	strb.w	r0, [r8]
                }
            } while (run_mode == WAITING);
    60e8:	4668      	mov	r0, sp
    60ea:	f000 fcef 	bl	6acc <String::~String()>
    60ee:	7823      	ldrb	r3, [r4, #0]
    60f0:	2b00      	cmp	r3, #0
    60f2:	f040 8171 	bne.w	63d8 <loop+0x3c4>
                display_next_instruction(register_pc, next_instruction);
    60f6:	8832      	ldrh	r2, [r6, #0]

        // For SS mode, turn on the SYNC signal for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
            digitalWriteFast(PIN_SYNC, 0x1);

        switch (next_instruction) {
    60f8:	f898 3000 	ldrb.w	r3, [r8]
    sprintf(buffer, "PC:%04X - %02X", pc, opcode);
    60fc:	4651      	mov	r1, sl
    60fe:	a804      	add	r0, sp, #16
    6100:	f003 fc2e 	bl	9960 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6104:	a804      	add	r0, sp, #16
    6106:	f004 f87b 	bl	a200 <strlen>
    610a:	4601      	mov	r1, r0
    610c:	a804      	add	r0, sp, #16
    610e:	f002 f921 	bl	8354 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6112:	4628      	mov	r0, r5
    6114:	f000 fc9a 	bl	6a4c <Print::println()>
                String c = get_command();
    6118:	4668      	mov	r0, sp
    611a:	f7ff fbdd 	bl	58d8 <get_command()>
                if (c.length() == 0 && last_command.length() != 0) {
    611e:	9b02      	ldr	r3, [sp, #8]
    6120:	2101      	movs	r1, #1
    6122:	4638      	mov	r0, r7
    6124:	2b00      	cmp	r3, #0
    6126:	d1b6      	bne.n	6096 <loop+0x82>
    6128:	f8db 3008 	ldr.w	r3, [fp, #8]
    612c:	2b00      	cmp	r3, #0
    612e:	d0b2      	beq.n	6096 <loop+0x82>
	size_t println(const String &s)			{ return print(s) + println(); }
    6130:	4915      	ldr	r1, [pc, #84]	; (6188 <loop+0x174>)
    6132:	4628      	mov	r0, r5
    6134:	f000 fc64 	bl	6a00 <Print::print(String const&)>
    6138:	4628      	mov	r0, r5
    613a:	f000 fc87 	bl	6a4c <Print::println()>
                    run_mode = process_command(last_command);
    613e:	4912      	ldr	r1, [pc, #72]	; (6188 <loop+0x174>)
    6140:	a804      	add	r0, sp, #16
    6142:	f000 fca5 	bl	6a90 <String::String(String const&)>
    6146:	a804      	add	r0, sp, #16
    6148:	f7ff fc54 	bl	59f4 <process_command(String)>
    614c:	4603      	mov	r3, r0
    614e:	a804      	add	r0, sp, #16
    6150:	7023      	strb	r3, [r4, #0]
    6152:	f000 fcbb 	bl	6acc <String::~String()>
    6156:	e7b3      	b.n	60c0 <loop+0xac>
        if (nmi_n_old == 0 && direct_nmi == 1) nmi_handler();
    6158:	f7fa ffcc 	bl	10f4 <nmi_handler()>
        nmi_n_old = direct_nmi;
    615c:	4b06      	ldr	r3, [pc, #24]	; (6178 <loop+0x164>)
    615e:	781b      	ldrb	r3, [r3, #0]
    6160:	e77d      	b.n	605e <loop+0x4a>
    6162:	bf00      	nop
    6164:	2001508c 	.word	0x2001508c
    6168:	200150a6 	.word	0x200150a6
    616c:	2001509e 	.word	0x2001509e
    6170:	200041b0 	.word	0x200041b0
    6174:	200047bf 	.word	0x200047bf
    6178:	2001509c 	.word	0x2001509c
    617c:	2001509b 	.word	0x2001509b
    6180:	20004fc8 	.word	0x20004fc8
    6184:	200007f8 	.word	0x200007f8
    6188:	20014ff0 	.word	0x20014ff0
    618c:	200150a2 	.word	0x200150a2
    6190:	2000087c 	.word	0x2000087c
        if (run_mode != RUNNING) {
    6194:	7822      	ldrb	r2, [r4, #0]
    6196:	2a02      	cmp	r2, #2
    6198:	f040 8139 	bne.w	640e <loop+0x3fa>
        switch (next_instruction) {
    619c:	2bff      	cmp	r3, #255	; 0xff
    619e:	f200 8405 	bhi.w	69ac <loop+0x998>
    61a2:	e8df f013 	tbh	[pc, r3, lsl #1]
    61a6:	0273      	.short	0x0273
    61a8:	02830277 	.word	0x02830277
    61ac:	013e0291 	.word	0x013e0291
    61b0:	027a03ac 	.word	0x027a03ac
    61b4:	026d026a 	.word	0x026d026a
    61b8:	02a90267 	.word	0x02a90267
    61bc:	027d0145 	.word	0x027d0145
    61c0:	02c40280 	.word	0x02c40280
    61c4:	02ca02c7 	.word	0x02ca02c7
    61c8:	02b802cd 	.word	0x02b802cd
    61cc:	013b02bb 	.word	0x013b02bb
    61d0:	02ac02be 	.word	0x02ac02be
    61d4:	02b202af 	.word	0x02b202af
    61d8:	011602b5 	.word	0x011602b5
    61dc:	013702c1 	.word	0x013702c1
    61e0:	014e014b 	.word	0x014e014b
    61e4:	01540151 	.word	0x01540151
    61e8:	015a0157 	.word	0x015a0157
    61ec:	0160015d 	.word	0x0160015d
    61f0:	01660163 	.word	0x01660163
    61f4:	016c0169 	.word	0x016c0169
    61f8:	0172016f 	.word	0x0172016f
    61fc:	01750145 	.word	0x01750145
    6200:	017b0178 	.word	0x017b0178
    6204:	0181017e 	.word	0x0181017e
    6208:	01870184 	.word	0x01870184
    620c:	013b018a 	.word	0x013b018a
    6210:	0190018d 	.word	0x0190018d
    6214:	01960193 	.word	0x01960193
    6218:	01160199 	.word	0x01160199
    621c:	0137019c 	.word	0x0137019c
    6220:	01a2019f 	.word	0x01a2019f
    6224:	01a801a5 	.word	0x01a801a5
    6228:	01ae01ab 	.word	0x01ae01ab
    622c:	013e01b1 	.word	0x013e01b1
    6230:	01b701b4 	.word	0x01b701b4
    6234:	01bd01ba 	.word	0x01bd01ba
    6238:	01c301c0 	.word	0x01c301c0
    623c:	01c901c6 	.word	0x01c901c6
    6240:	01cf01cc 	.word	0x01cf01cc
    6244:	01d501d2 	.word	0x01d501d2
    6248:	01db01d8 	.word	0x01db01d8
    624c:	013b01de 	.word	0x013b01de
    6250:	01e401e1 	.word	0x01e401e1
    6254:	01ea01e7 	.word	0x01ea01e7
    6258:	011601ed 	.word	0x011601ed
    625c:	013701f0 	.word	0x013701f0
    6260:	01f601f3 	.word	0x01f601f3
    6264:	01fc01f9 	.word	0x01fc01f9
    6268:	020201ff 	.word	0x020201ff
    626c:	013e0205 	.word	0x013e0205
    6270:	020b0208 	.word	0x020b0208
    6274:	0211020e 	.word	0x0211020e
    6278:	02170214 	.word	0x02170214
    627c:	021d021a 	.word	0x021d021a
    6280:	02230220 	.word	0x02230220
    6284:	02290226 	.word	0x02290226
    6288:	022f022c 	.word	0x022f022c
    628c:	013b0232 	.word	0x013b0232
    6290:	02380235 	.word	0x02380235
    6294:	023e023b 	.word	0x023e023b
    6298:	01160241 	.word	0x01160241
    629c:	01370244 	.word	0x01370244
    62a0:	024a0247 	.word	0x024a0247
    62a4:	0100024d 	.word	0x0100024d
    62a8:	01000250 	.word	0x01000250
    62ac:	02580255 	.word	0x02580255
    62b0:	0262025d 	.word	0x0262025d
    62b4:	03330330 	.word	0x03330330
    62b8:	03360100 	.word	0x03360100
    62bc:	03390100 	.word	0x03390100
    62c0:	03750370 	.word	0x03750370
    62c4:	037d037a 	.word	0x037d037a
    62c8:	03850380 	.word	0x03850380
    62cc:	038b0388 	.word	0x038b0388
    62d0:	03950390 	.word	0x03950390
    62d4:	039d039a 	.word	0x039d039a
    62d8:	03a503a0 	.word	0x03a503a0
    62dc:	03a80141 	.word	0x03a80141
    62e0:	0141033e 	.word	0x0141033e
    62e4:	03430141 	.word	0x03430141
    62e8:	03490346 	.word	0x03490346
    62ec:	034f034c 	.word	0x034f034c
    62f0:	03550352 	.word	0x03550352
    62f4:	035b0358 	.word	0x035b0358
    62f8:	0361035e 	.word	0x0361035e
    62fc:	03640100 	.word	0x03640100
    6300:	036a0367 	.word	0x036a0367
    6304:	03af036d 	.word	0x03af036d
    6308:	03b503b2 	.word	0x03b503b2
    630c:	03bb03b8 	.word	0x03bb03b8
    6310:	03c103be 	.word	0x03c103be
    6314:	03c703c4 	.word	0x03c703c4
    6318:	03cd03ca 	.word	0x03cd03ca
    631c:	03d303d0 	.word	0x03d303d0
    6320:	03d903d6 	.word	0x03d903d6
    6324:	03df03dc 	.word	0x03df03dc
    6328:	010003e2 	.word	0x010003e2
    632c:	03e803e5 	.word	0x03e803e5
    6330:	03ee03eb 	.word	0x03ee03eb
    6334:	03f403f1 	.word	0x03f403f1
    6338:	03fa03f7 	.word	0x03fa03f7
    633c:	040003fd 	.word	0x040003fd
    6340:	02d302d0 	.word	0x02d302d0
    6344:	02d902d6 	.word	0x02d902d6
    6348:	02df02dc 	.word	0x02df02dc
    634c:	013b02e2 	.word	0x013b02e2
    6350:	02e802e5 	.word	0x02e802e5
    6354:	02ee02eb 	.word	0x02ee02eb
    6358:	011602f1 	.word	0x011602f1
    635c:	013702f4 	.word	0x013702f4
    6360:	02fa02f7 	.word	0x02fa02f7
    6364:	030002fd 	.word	0x030002fd
    6368:	01000303 	.word	0x01000303
    636c:	03090306 	.word	0x03090306
    6370:	03270324 	.word	0x03270324
    6374:	032d032a 	.word	0x032d032a
    6378:	01160148 	.word	0x01160148
    637c:	02a60148 	.word	0x02a60148
    6380:	02a302a0 	.word	0x02a302a0
    6384:	030f030c 	.word	0x030f030c
    6388:	03150312 	.word	0x03150312
    638c:	013b0318 	.word	0x013b0318
    6390:	031e031b 	.word	0x031e031b
    6394:	02940321 	.word	0x02940321
    6398:	01160297 	.word	0x01160297
    639c:	0137029a 	.word	0x0137029a
    63a0:	0403029d 	.word	0x0403029d
    63a4:	0270      	.short	0x0270

// --------------------------------------------------------------------------------------------------
// NOP - Fetch Immediate
// --------------------------------------------------------------------------------------------------
void opcode_0x80() {
    Fetch_Immediate();
    63a6:	f7fa fb4b 	bl	a40 <Fetch_Immediate()>
            run_mode = WAITING;
            break;
        }

        // For SS mode, turn off the SYNC signal after for EVERY INSTRUCTION
        if (run_mode == SINGLE_STEP)
    63aa:	7823      	ldrb	r3, [r4, #0]
    63ac:	2b01      	cmp	r3, #1
    63ae:	d105      	bne.n	63bc <loop+0x3a8>
				CORE_PIN39_PORTCLEAR = CORE_PIN39_BITMASK;
    63b0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    63b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    63b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            digitalWriteFast(PIN_SYNC, 0);

        register_pc++;
    63bc:	8833      	ldrh	r3, [r6, #0]
    63be:	3301      	adds	r3, #1
    63c0:	8033      	strh	r3, [r6, #0]
        if (direct_reset == 1) reset_sequence();
    63c2:	4bbc      	ldr	r3, [pc, #752]	; (66b4 <loop+0x6a0>)
    63c4:	781b      	ldrb	r3, [r3, #0]
    63c6:	2b01      	cmp	r3, #1
    63c8:	f47f ae40 	bne.w	604c <loop+0x38>
    63cc:	f7fa fda6 	bl	f1c <reset_sequence()>
    63d0:	e63c      	b.n	604c <loop+0x38>
            opcode_0xEA();
    63d2:	f7fb fb5b 	bl	1a8c <opcode_0xEA()>
            break; // NOP
    63d6:	e7e8      	b.n	63aa <loop+0x396>
        if (run_mode == SINGLE_STEP)
    63d8:	2b01      	cmp	r3, #1
    63da:	d105      	bne.n	63e8 <loop+0x3d4>
				CORE_PIN39_PORTSET = CORE_PIN39_BITMASK;
    63dc:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    63e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    63e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        switch (next_instruction) {
    63e8:	f898 3000 	ldrb.w	r3, [r8]
}
    63ec:	e6d6      	b.n	619c <loop+0x188>
        if (direct_irq == 0x1 && (flag_i) == 0x0) irq_handler(0x0);
    63ee:	4bb2      	ldr	r3, [pc, #712]	; (66b8 <loop+0x6a4>)
    63f0:	7818      	ldrb	r0, [r3, #0]
    63f2:	f010 0004 	ands.w	r0, r0, #4
    63f6:	f47f ae39 	bne.w	606c <loop+0x58>
    63fa:	f7fa ffad 	bl	1358 <irq_handler(unsigned char)>
    63fe:	e635      	b.n	606c <loop+0x58>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    6400:	454a      	cmp	r2, r9
    6402:	f47f aecb 	bne.w	619c <loop+0x188>
            run_mode = WAITING;
    6406:	f04f 0200 	mov.w	r2, #0
    640a:	7022      	strb	r2, [r4, #0]
    640c:	e640      	b.n	6090 <loop+0x7c>
        if (breakpoint && (run_mode==RUNNING) && (register_pc==breakpoint)) {
    640e:	f8b6 9000 	ldrh.w	r9, [r6]
    6412:	e63d      	b.n	6090 <loop+0x7c>

// --------------------------------------------------------------------------------------------------
// NOP - Fetch Absolute , X
// --------------------------------------------------------------------------------------------------
void opcode_0x1C() {
    Fetch_Absolute_X(1);
    6414:	2001      	movs	r0, #1
    6416:	f7fa fb91 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
    641a:	e7c6      	b.n	63aa <loop+0x396>
    Fetch_ZeroPage_X();
    641c:	f7fa fb30 	bl	a80 <Fetch_ZeroPage_X()>
    return;
    6420:	e7c3      	b.n	63aa <loop+0x396>
    Fetch_ZeroPage();
    6422:	f7fa fb19 	bl	a58 <Fetch_ZeroPage()>
    return;
    6426:	e7c0      	b.n	63aa <loop+0x396>
    Fetch_Absolute_X(0);
    Begin_Fetch_Next_Opcode();
    return;
} // 0x9C - SHY - Absolute , X - Implelented here as a size 3 NOP
void opcode_0x9B() {
    Fetch_Absolute_Y(0);
    6428:	2000      	movs	r0, #0
    642a:	f7fa fbb9 	bl	ba0 <Fetch_Absolute_Y(unsigned char)>
    Begin_Fetch_Next_Opcode();
    return;
    642e:	e7bc      	b.n	63aa <loop+0x396>
            opcode_0x0B();
    6430:	f7ff f91e 	bl	5670 <opcode_0x0B()>
            break; // ANC - Immediate
    6434:	e7b9      	b.n	63aa <loop+0x396>
            opcode_0xE9();
    6436:	f7fb facb 	bl	19d0 <opcode_0xE9()>
            break; // SBC - Immediate
    643a:	e7b6      	b.n	63aa <loop+0x396>
            opcode_0x1D();
    643c:	f7fb ff40 	bl	22c0 <opcode_0x1D()>
            break; // OR - Absolute,X
    6440:	e7b3      	b.n	63aa <loop+0x396>
            opcode_0x1E();
    6442:	f7fc fe43 	bl	30cc <opcode_0x1E()>
            break; // ASL A - Arithmetic Shift Left - Absolute , X
    6446:	e7b0      	b.n	63aa <loop+0x396>
            opcode_0x1F();
    6448:	f7fe f828 	bl	449c <opcode_0x1F()>
            break; // SLO - Absolute , X
    644c:	e7ad      	b.n	63aa <loop+0x396>
            opcode_0x20();
    644e:	f7fd fcb9 	bl	3dc4 <opcode_0x20()>
            break; // JSR - Jump to Subroutine
    6452:	e7aa      	b.n	63aa <loop+0x396>
            opcode_0x21();
    6454:	f7fb fe68 	bl	2128 <opcode_0x21()>
            break; // AND - Indexed Indirect
    6458:	e7a7      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    645a:	f7fa faf1 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    645e:	e7fe      	b.n	645e <loop+0x44a>
            opcode_0x23();
    6460:	f7fe f8fa 	bl	4658 <opcode_0x23()>
            break; // RLA - Indexed Indirect X
    6464:	e7a1      	b.n	63aa <loop+0x396>
            opcode_0x24();
    6466:	f7fc fb13 	bl	2a90 <opcode_0x24()>
            break; // BIT - ZeroPage
    646a:	e79e      	b.n	63aa <loop+0x396>
            opcode_0x25();
    646c:	f7fb fdb6 	bl	1fdc <opcode_0x25()>
            break; // AND - ZeroPage
    6470:	e79b      	b.n	63aa <loop+0x396>
            opcode_0x26();
    6472:	f7fd f8f7 	bl	3664 <opcode_0x26()>
            break; // ROL - Rotate Left - ZeroPage
    6476:	e798      	b.n	63aa <loop+0x396>
            opcode_0x27();
    6478:	f7fe f878 	bl	456c <opcode_0x27()>
            break; // RLA - ZeroPage
    647c:	e795      	b.n	63aa <loop+0x396>
            opcode_0x28();
    647e:	f7fb fd2f 	bl	1ee0 <opcode_0x28()>
            break; // PLP - Pop processor status from the stack
    6482:	e792      	b.n	63aa <loop+0x396>
            opcode_0x29();
    6484:	f7fb fd84 	bl	1f90 <opcode_0x29()>
            break; // AND - Immediate
    6488:	e78f      	b.n	63aa <loop+0x396>
            opcode_0x2A();
    648a:	f7fb f927 	bl	16dc <opcode_0x2A()>
            break; // ROL A
    648e:	e78c      	b.n	63aa <loop+0x396>
            opcode_0x2C();
    6490:	f7fc fb2a 	bl	2ae8 <opcode_0x2C()>
            break; // BIT - Absolute
    6494:	e789      	b.n	63aa <loop+0x396>
            opcode_0x2D();
    6496:	f7fb fded 	bl	2074 <opcode_0x2D()>
            break; // AND - Absolute
    649a:	e786      	b.n	63aa <loop+0x396>
            opcode_0x2E();
    649c:	f7fd f94a 	bl	3734 <opcode_0x2E()>
            break; // ROL - Rotate Left - Absolute
    64a0:	e783      	b.n	63aa <loop+0x396>
            opcode_0x2F();
    64a2:	f7fe f941 	bl	4728 <opcode_0x2F()>
            break; // RLA - Absolute
    64a6:	e780      	b.n	63aa <loop+0x396>
            opcode_0x30();
    64a8:	f7fd faea 	bl	3a80 <opcode_0x30()>
            break; // BMI - Branch on Minus (N Flag Set)
    64ac:	e77d      	b.n	63aa <loop+0x396>
            opcode_0x31();
    64ae:	f7fb fe59 	bl	2164 <opcode_0x31()>
            break; // AND - Indirect Indexed
    64b2:	e77a      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    64b4:	f7fa fac4 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    64b8:	e7fe      	b.n	64b8 <loop+0x4a4>
            opcode_0x33();
    64ba:	f7fe f901 	bl	46c0 <opcode_0x33()>
            break; // RLA - Indirect Indexed  Y
    64be:	e774      	b.n	63aa <loop+0x396>
            opcode_0x35();
    64c0:	f7fb fdba 	bl	2038 <opcode_0x35()>
            break; // AND - ZeroPage,X
    64c4:	e771      	b.n	63aa <loop+0x396>
            opcode_0x36();
    64c6:	f7fd f907 	bl	36d8 <opcode_0x36()>
            break; // ROL - Rotate Left - ZeroPage , X
    64ca:	e76e      	b.n	63aa <loop+0x396>
            opcode_0x37();
    64cc:	f7fe f890 	bl	45f0 <opcode_0x37()>
            break; // RLA - ZeroPage , X
    64d0:	e76b      	b.n	63aa <loop+0x396>
            opcode_0x38();
    64d2:	f7fb fb2f 	bl	1b34 <opcode_0x38()>
            break; // SEC
    64d6:	e768      	b.n	63aa <loop+0x396>
            opcode_0x39();
    64d8:	f7fb fe08 	bl	20ec <opcode_0x39()>
            break; // AND - Absolute,Y
    64dc:	e765      	b.n	63aa <loop+0x396>
            opcode_0x3B();
    64de:	f7fe f98b 	bl	47f8 <opcode_0x3B()>
            break; // RLA - Absolute , Y
    64e2:	e762      	b.n	63aa <loop+0x396>
            opcode_0x3D();
    64e4:	f7fb fde4 	bl	20b0 <opcode_0x3D()>
            break; // AND - Absolute,X
    64e8:	e75f      	b.n	63aa <loop+0x396>
            opcode_0x3E();
    64ea:	f7fd f951 	bl	3790 <opcode_0x3E()>
            break; // ROL - Rotate Left - Absolute , X
    64ee:	e75c      	b.n	63aa <loop+0x396>
            opcode_0x3F();
    64f0:	f7fe f94e 	bl	4790 <opcode_0x3F()>
            break; // RLA - Absolute , X
    64f4:	e759      	b.n	63aa <loop+0x396>
            opcode_0x40();
    64f6:	f7fd fd2f 	bl	3f58 <opcode_0x40()>
            break; // RTI - Return from Interrupt
    64fa:	e756      	b.n	63aa <loop+0x396>
            opcode_0x41();
    64fc:	f7fc f82e 	bl	255c <opcode_0x41()>
            break; // EOR - Indexed Indirect X
    6500:	e753      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    6502:	f7fa fa9d 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    6506:	e7fe      	b.n	6506 <loop+0x4f2>
            opcode_0x43();
    6508:	f7fe fa16 	bl	4938 <opcode_0x43()>
            break; // SRE - Indexed Indirect X
    650c:	e74d      	b.n	63aa <loop+0x396>
            opcode_0x45();
    650e:	f7fb ff7b 	bl	2408 <opcode_0x45()>
            break; // EOR - ZeroPage
    6512:	e74a      	b.n	63aa <loop+0x396>
            opcode_0x46();
    6514:	f7fc ff36 	bl	3384 <opcode_0x46()>
            break; // LSR - Logical Shift Right - ZeroPage
    6518:	e747      	b.n	63aa <loop+0x396>
            opcode_0x47();
    651a:	f7fe f9a1 	bl	4860 <opcode_0x47()>
            break; // SRE - ZeroPage
    651e:	e744      	b.n	63aa <loop+0x396>
            opcode_0x48();
    6520:	f7fb fcc4 	bl	1eac <opcode_0x48()>
            break; // PHA - Push Accumulator to the stack
    6524:	e741      	b.n	63aa <loop+0x396>
            opcode_0x49();
    6526:	f7fb ff49 	bl	23bc <opcode_0x49()>
            break; // EOR - Immediate
    652a:	e73e      	b.n	63aa <loop+0x396>
            opcode_0x4A();
    652c:	f7fb f884 	bl	1638 <opcode_0x4A()>
            break; // LSR A
    6530:	e73b      	b.n	63aa <loop+0x396>
            opcode_0x4B();
    6532:	f7ff f8c3 	bl	56bc <opcode_0x4B()>
            break; // ALR - Immediate
    6536:	e738      	b.n	63aa <loop+0x396>
            opcode_0x4C();
    6538:	f7fd fad0 	bl	3adc <opcode_0x4C()>
            break; // JMP - Jump Absolute
    653c:	e735      	b.n	63aa <loop+0x396>
            opcode_0x4D();
    653e:	f7fb ffaf 	bl	24a0 <opcode_0x4D()>
            break; // EOR - Absolute
    6542:	e732      	b.n	63aa <loop+0x396>
            opcode_0x4E();
    6544:	f7fc ff78 	bl	3438 <opcode_0x4E()>
            break; // LSR - Logical Shift Right - Absolute
    6548:	e72f      	b.n	63aa <loop+0x396>
            opcode_0x4F();
    654a:	f7fe fa55 	bl	49f8 <opcode_0x4F()>
            break; // SRE - Absolute
    654e:	e72c      	b.n	63aa <loop+0x396>
            opcode_0x50();
    6550:	f7fd fa80 	bl	3a54 <opcode_0x50()>
            break; // BVC - Branch on Overflow Clear
    6554:	e729      	b.n	63aa <loop+0x396>
            opcode_0x51();
    6556:	f7fc f81f 	bl	2598 <opcode_0x51()>
            break; // EOR - Indirect Indexed  Y
    655a:	e726      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    655c:	f7fa fa70 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    6560:	e7fe      	b.n	6560 <loop+0x54c>
            opcode_0x53();
    6562:	f7fe fa19 	bl	4998 <opcode_0x53()>
            break; // SRE - Indirect Indexed  Y
    6566:	e720      	b.n	63aa <loop+0x396>
            opcode_0x55();
    6568:	f7fb ff7c 	bl	2464 <opcode_0x55()>
            break; // EOR - ZeroPage,X
    656c:	e71d      	b.n	63aa <loop+0x396>
            opcode_0x56();
    656e:	f7fc ff3d 	bl	33ec <opcode_0x56()>
            break; // LSR - Logical Shift Right - ZeroPage , X
    6572:	e71a      	b.n	63aa <loop+0x396>
            opcode_0x57();
    6574:	f7fe f9b0 	bl	48d8 <opcode_0x57()>
            break; // SRE - ZeroPage , X
    6578:	e717      	b.n	63aa <loop+0x396>
            opcode_0x58();
    657a:	f7fb fab7 	bl	1aec <opcode_0x58()>
            break; // CLI
    657e:	e714      	b.n	63aa <loop+0x396>
            opcode_0x59();
    6580:	f7fb ffcc 	bl	251c <opcode_0x59()>
            break; // EOR - Absolute,Y
    6584:	e711      	b.n	63aa <loop+0x396>
            opcode_0x5B();
    6586:	f7fe fa97 	bl	4ab8 <opcode_0x5B()>
            break; // RE - Absolute , Y
    658a:	e70e      	b.n	63aa <loop+0x396>
            opcode_0x5D();
    658c:	f7fb ffa6 	bl	24dc <opcode_0x5D()>
            break; // EOR - Absolute,X
    6590:	e70b      	b.n	63aa <loop+0x396>
            opcode_0x5E();
    6592:	f7fc ff77 	bl	3484 <opcode_0x5E()>
            break; // LSR - Logical Shift Right - Absolute , X
    6596:	e708      	b.n	63aa <loop+0x396>
            opcode_0x5F();
    6598:	f7fe fa5e 	bl	4a58 <opcode_0x5F()>
            break; // SRE - Absolute , X
    659c:	e705      	b.n	63aa <loop+0x396>
            opcode_0x60();
    659e:	f7fd fdab 	bl	40f8 <opcode_0x60()>
            break; // RTS - Return from Subroutine
    65a2:	e702      	b.n	63aa <loop+0x396>
            opcode_0x61();
    65a4:	f7fb f98a 	bl	18bc <opcode_0x61()>
            break; // ADC - Indexed Indirect X
    65a8:	e6ff      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    65aa:	f7fa fa49 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    65ae:	e7fe      	b.n	65ae <loop+0x59a>
            opcode_0x63();
    65b0:	f7fe fb08 	bl	4bc4 <opcode_0x63()>
            break; // RRA - Indexed Indirect X
    65b4:	e6f9      	b.n	63aa <loop+0x396>
            opcode_0x65();
    65b6:	f7fb f945 	bl	1844 <opcode_0x65()>
            break; // ADC - ZeroPage
    65ba:	e6f6      	b.n	63aa <loop+0x396>
            opcode_0x66();
    65bc:	f7fc ff8a 	bl	34d4 <opcode_0x66()>
            break; // ROR - Rotate Right - ZeroPage
    65c0:	e6f3      	b.n	63aa <loop+0x396>
            opcode_0x67();
    65c2:	f7fe faa9 	bl	4b18 <opcode_0x67()>
            break; // RRA - ZeroPage
    65c6:	e6f0      	b.n	63aa <loop+0x396>
            opcode_0x68();
    65c8:	f7fb fcae 	bl	1f28 <opcode_0x68()>
            break; // PLA - Pop Accumulator from the stack
    65cc:	e6ed      	b.n	63aa <loop+0x396>
            opcode_0x69();
    65ce:	f7fb f929 	bl	1824 <opcode_0x69()>
            break; // ADC - Immediate
    65d2:	e6ea      	b.n	63aa <loop+0x396>
            opcode_0x6A();
    65d4:	f7fb f856 	bl	1684 <opcode_0x6A()>
            break; // ROR A
    65d8:	e6e7      	b.n	63aa <loop+0x396>
            opcode_0x6B();
    65da:	f7ff f899 	bl	5710 <opcode_0x6B()>
            break; // ARR - Immediate
    65de:	e6e4      	b.n	63aa <loop+0x396>
            opcode_0x6C();
    65e0:	f7fd fb2e 	bl	3c40 <opcode_0x6C()>
            break; // JMP - Jump Indirect
    65e4:	e6e1      	b.n	63aa <loop+0x396>
            opcode_0x6D();
    65e6:	f7fb f94d 	bl	1884 <opcode_0x6D()>
            break; // ADC - Absolute
    65ea:	e6de      	b.n	63aa <loop+0x396>
            opcode_0x6E();
    65ec:	f7fc ffdc 	bl	35a8 <opcode_0x6E()>
            break; // ROR - Rotate Right - Absolute
    65f0:	e6db      	b.n	63aa <loop+0x396>
            opcode_0x6F();
    65f2:	f7fe fb31 	bl	4c58 <opcode_0x6F()>
            break; // RRA - Absolute
    65f6:	e6d8      	b.n	63aa <loop+0x396>
            opcode_0x70();
    65f8:	f7fd fa14 	bl	3a24 <opcode_0x70()>
            break; // BVS - Branch on Overflow Set
    65fc:	e6d5      	b.n	63aa <loop+0x396>
            opcode_0x71();
    65fe:	f7fb f965 	bl	18cc <opcode_0x71()>
            break; // ADC - Indirect Indexed  Y
    6602:	e6d2      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    6604:	f7fa fa1c 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    6608:	e7fe      	b.n	6608 <loop+0x5f4>
            opcode_0x73();
    660a:	f7fe faff 	bl	4c0c <opcode_0x73()>
            break; // RRA - Indirect Indexed  Y
    660e:	e6cc      	b.n	63aa <loop+0x396>
            opcode_0x75();
    6610:	f7fb f930 	bl	1874 <opcode_0x75()>
            break; // ADC - ZeroPage , X
    6614:	e6c9      	b.n	63aa <loop+0x396>
            opcode_0x76();
    6616:	f7fc ff99 	bl	354c <opcode_0x76()>
            break; // ROR - Rotate Right - ZeroPage , X
    661a:	e6c6      	b.n	63aa <loop+0x396>
            opcode_0x77();
    661c:	f7fe faae 	bl	4b7c <opcode_0x77()>
            break; // RRA - ZeroPage , X
    6620:	e6c3      	b.n	63aa <loop+0x396>
            opcode_0x78();
    6622:	f7fb fa99 	bl	1b58 <opcode_0x78()>
            break; // SEI
    6626:	e6c0      	b.n	63aa <loop+0x396>
            opcode_0x79();
    6628:	f7fb f93e 	bl	18a8 <opcode_0x79()>
            break; // ADC - Absolute , Y
    662c:	e6bd      	b.n	63aa <loop+0x396>
            opcode_0x7B();
    662e:	f7fe fb5d 	bl	4cec <opcode_0x7B()>
            break; // RRA - Absolute , Y
    6632:	e6ba      	b.n	63aa <loop+0x396>
            opcode_0x7D();
    6634:	f7fb f92e 	bl	1894 <opcode_0x7D()>
            break; // ADC - Absolute , X
    6638:	e6b7      	b.n	63aa <loop+0x396>
            opcode_0x7E();
    663a:	f7fc ffe3 	bl	3604 <opcode_0x7E()>
            break; // ROR - Rotate Right - Absolute , X
    663e:	e6b4      	b.n	63aa <loop+0x396>
            opcode_0x7F();
    6640:	f7fe fb2e 	bl	4ca0 <opcode_0x7F()>
            break; // RRA - Absolute , X
    6644:	e6b1      	b.n	63aa <loop+0x396>
    Write_Indexed_Indirect_X(register_a);
    6646:	4b1d      	ldr	r3, [pc, #116]	; (66bc <loop+0x6a8>)
    6648:	7818      	ldrb	r0, [r3, #0]
    664a:	f7fa fc0d 	bl	e68 <Write_Indexed_Indirect_X(unsigned char)>
    return;
    664e:	e6ac      	b.n	63aa <loop+0x396>
            opcode_0x83();
    6650:	f7fe fbb8 	bl	4dc4 <opcode_0x83()>
            break; // SAX - Indexed Indirect X
    6654:	e6a9      	b.n	63aa <loop+0x396>
    Write_ZeroPage(register_y);
    6656:	4b1a      	ldr	r3, [pc, #104]	; (66c0 <loop+0x6ac>)
    6658:	7818      	ldrb	r0, [r3, #0]
    665a:	f7fa fb31 	bl	cc0 <Write_ZeroPage(unsigned char)>
    return;
    665e:	e6a4      	b.n	63aa <loop+0x396>
    Write_ZeroPage(register_a);
    6660:	4b16      	ldr	r3, [pc, #88]	; (66bc <loop+0x6a8>)
    6662:	7818      	ldrb	r0, [r3, #0]
    6664:	f7fa fb2c 	bl	cc0 <Write_ZeroPage(unsigned char)>
    return;
    6668:	e69f      	b.n	63aa <loop+0x396>
    Write_ZeroPage(register_x);
    666a:	4b16      	ldr	r3, [pc, #88]	; (66c4 <loop+0x6b0>)
    666c:	7818      	ldrb	r0, [r3, #0]
    666e:	f7fa fb27 	bl	cc0 <Write_ZeroPage(unsigned char)>
    return;
    6672:	e69a      	b.n	63aa <loop+0x396>
            opcode_0x09();
    6674:	f7fb fd94 	bl	21a0 <opcode_0x09()>
            break; // OR - Immediate
    6678:	e697      	b.n	63aa <loop+0x396>
            opcode_0x07();
    667a:	f7fd fe05 	bl	4288 <opcode_0x07()>
            break; // SLO - ZeroPage
    667e:	e694      	b.n	63aa <loop+0x396>
            opcode_0x08();
    6680:	f7fb fbf8 	bl	1e74 <opcode_0x08()>
            break; // PHP - Push processor status to the stack
    6684:	e691      	b.n	63aa <loop+0x396>
            opcode_0xFF();
    6686:	f7fe ff9b 	bl	55c0 <opcode_0xFF()>
            break; // 
    668a:	e68e      	b.n	63aa <loop+0x396>
            irq_handler(0x1);
    668c:	2001      	movs	r0, #1
    668e:	f7fa fe63 	bl	1358 <irq_handler(unsigned char)>
            break; // BRK - Break
    6692:	e68a      	b.n	63aa <loop+0x396>
            opcode_0x01();
    6694:	f7fb fe54 	bl	2340 <opcode_0x01()>
            break; // OR - Indexed Indirect X
    6698:	e687      	b.n	63aa <loop+0x396>
            opcode_0x06();
    669a:	f7fc fc87 	bl	2fac <opcode_0x06()>
            break; // ASL A - Arithmetic Shift Left - ZeroPage
    669e:	e684      	b.n	63aa <loop+0x396>
    Fetch_Absolute();
    66a0:	f7fa fa2e 	bl	b00 <Fetch_Absolute()>
    return;
    66a4:	e681      	b.n	63aa <loop+0x396>
            opcode_0x0D();
    66a6:	f7fb fded 	bl	2284 <opcode_0x0D()>
            break; // OR - Absolute
    66aa:	e67e      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    66ac:	f7fa f9c8 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    66b0:	e7fe      	b.n	66b0 <loop+0x69c>
    66b2:	bf00      	nop
    66b4:	2001509e 	.word	0x2001509e
    66b8:	200047c0 	.word	0x200047c0
    66bc:	200150a3 	.word	0x200150a3
    66c0:	200150a5 	.word	0x200150a5
    66c4:	200150a4 	.word	0x200150a4
            opcode_0x03();
    66c8:	f7fd fe50 	bl	436c <opcode_0x03()>
            break; // SLO - Indexed Indirect X
    66cc:	e66d      	b.n	63aa <loop+0x396>
            opcode_0xF8();
    66ce:	f7fb fa55 	bl	1b7c <opcode_0xF8()>
            break; // SED
    66d2:	e66a      	b.n	63aa <loop+0x396>
            opcode_0xF9();
    66d4:	f7fb f9be 	bl	1a54 <opcode_0xF9()>
            break; // SBC - Absolute , Y
    66d8:	e667      	b.n	63aa <loop+0x396>
            opcode_0xFB();
    66da:	f7fe ff9d 	bl	5618 <opcode_0xFB()>
            break; // ISC - Absolute , Y
    66de:	e664      	b.n	63aa <loop+0x396>
            opcode_0xFD();
    66e0:	f7fb f9ae 	bl	1a40 <opcode_0xFD()>
            break; // SBC - Absolute , X
    66e4:	e661      	b.n	63aa <loop+0x396>
            opcode_0xED();
    66e6:	f7fb f9a3 	bl	1a30 <opcode_0xED()>
            break; // SBC - Absolute
    66ea:	e65e      	b.n	63aa <loop+0x396>
            opcode_0xEE();
    66ec:	f7fc fd76 	bl	31dc <opcode_0xEE()>
            break; // INC - Absolute
    66f0:	e65b      	b.n	63aa <loop+0x396>
            opcode_0xEC();
    66f2:	f7fc fbb3 	bl	2e5c <opcode_0xEC()>
            break; // CPX - Absolute
    66f6:	e658      	b.n	63aa <loop+0x396>
            opcode_0x0A();
    66f8:	f7fa ff72 	bl	15e0 <opcode_0x0A()>
            break; // ASL A
    66fc:	e655      	b.n	63aa <loop+0x396>
            opcode_0x16();
    66fe:	f7fc fc8d 	bl	301c <opcode_0x16()>
            break; // ASL A - Arithmetic Shift Left - ZeroPage , X
    6702:	e652      	b.n	63aa <loop+0x396>
            opcode_0x17();
    6704:	f7fd fe00 	bl	4308 <opcode_0x17()>
            break; // SLO - ZeroPage , X
    6708:	e64f      	b.n	63aa <loop+0x396>
            opcode_0x18();
    670a:	f7fb f9cb 	bl	1aa4 <opcode_0x18()>
            break; // CLC
    670e:	e64c      	b.n	63aa <loop+0x396>
            opcode_0x19();
    6710:	f7fb fdf6 	bl	2300 <opcode_0x19()>
            break; // OR - Absolute,Y
    6714:	e649      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    6716:	f7fa f993 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    671a:	e7fe      	b.n	671a <loop+0x706>
            opcode_0x13();
    671c:	f7fd fe58 	bl	43d0 <opcode_0x13()>
            break; // Indirect Indexed  Y
    6720:	e643      	b.n	63aa <loop+0x396>
            opcode_0x15();
    6722:	f7fb fd91 	bl	2248 <opcode_0x15()>
            break; // OR - ZeroPage,X
    6726:	e640      	b.n	63aa <loop+0x396>
            opcode_0x1B();
    6728:	f7fd feec 	bl	4504 <opcode_0x1B()>
            break; // SLO - Absolute , Y
    672c:	e63d      	b.n	63aa <loop+0x396>
            opcode_0x0E();
    672e:	f7fc fca1 	bl	3074 <opcode_0x0E()>
            break; // ASL A - Arithmetic Shift Left - Absolute
    6732:	e63a      	b.n	63aa <loop+0x396>
            opcode_0x0F();
    6734:	f7fd fe80 	bl	4438 <opcode_0x0F()>
            break; // SLO - Absolute
    6738:	e637      	b.n	63aa <loop+0x396>
            opcode_0x10();
    673a:	f7fd f9b7 	bl	3aac <opcode_0x10()>
            break; // BNE - Branch on Zero Clear
    673e:	e634      	b.n	63aa <loop+0x396>
            opcode_0x11();
    6740:	f7fb fe1c 	bl	237c <opcode_0x11()>
            break; // OR Indirect Indexed  Y
    6744:	e631      	b.n	63aa <loop+0x396>
            opcode_0xCD();
    6746:	f7fc fa6f 	bl	2c28 <opcode_0xCD()>
            break; // CMP - Absolute
    674a:	e62e      	b.n	63aa <loop+0x396>
            opcode_0xCE();
    674c:	f7fc fdca 	bl	32e4 <opcode_0xCE()>
            break; // DEC - Absolute
    6750:	e62b      	b.n	63aa <loop+0x396>
            opcode_0xCF();
    6752:	f7fe fd7b 	bl	524c <opcode_0xCF()>
            break; // DCP - Absolute
    6756:	e628      	b.n	63aa <loop+0x396>
            opcode_0xD0();
    6758:	f7fd f94e 	bl	39f8 <opcode_0xD0()>
            break; // BNE - Branch on Zero Clear
    675c:	e625      	b.n	63aa <loop+0x396>
            opcode_0xD1();
    675e:	f7fc faf7 	bl	2d50 <opcode_0xD1()>
            break; // CMP - Indirect Indexed  Y
    6762:	e622      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    6764:	f7fa f96c 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    6768:	e7fe      	b.n	6768 <loop+0x754>
            opcode_0xD3();
    676a:	f7fe fd29 	bl	51c0 <opcode_0xD3()>
            break; // DCP - Indirect Indexed  Y
    676e:	e61c      	b.n	63aa <loop+0x396>
            opcode_0xD5();
    6770:	f7fc fa36 	bl	2be0 <opcode_0xD5()>
            break; // CMP - ZeroPage , X
    6774:	e619      	b.n	63aa <loop+0x396>
            opcode_0xD6();
    6776:	f7fc fd8d 	bl	3294 <opcode_0xD6()>
            break; // DEC - ZeroPage , X
    677a:	e616      	b.n	63aa <loop+0x396>
            opcode_0xD7();
    677c:	f7fe fc94 	bl	50a8 <opcode_0xD7()>
            break; // DCP - ZeroPage , X
    6780:	e613      	b.n	63aa <loop+0x396>
            opcode_0xD8();
    6782:	f7fb f9a1 	bl	1ac8 <opcode_0xD8()>
            break; // CLD
    6786:	e610      	b.n	63aa <loop+0x396>
            opcode_0xD9();
    6788:	f7fc fa98 	bl	2cbc <opcode_0xD9()>
            break; // CMP - Absolute , Y
    678c:	e60d      	b.n	63aa <loop+0x396>
            opcode_0xDB();
    678e:	f7fe fde9 	bl	5364 <opcode_0xDB()>
            break; // DCP - Absolute , Y
    6792:	e60a      	b.n	63aa <loop+0x396>
            opcode_0xDD();
    6794:	f7fc fa6c 	bl	2c70 <opcode_0xDD()>
            break; // CMP - Absolute , X
    6798:	e607      	b.n	63aa <loop+0x396>
            opcode_0xDE();
    679a:	f7fc fdcb 	bl	3334 <opcode_0xDE()>
            break; // DEC - Absolute , X
    679e:	e604      	b.n	63aa <loop+0x396>
            opcode_0xDF();
    67a0:	f7fe fd9a 	bl	52d8 <opcode_0xDF()>
            break; // DCP - Absolute , X
    67a4:	e601      	b.n	63aa <loop+0x396>
            opcode_0xE0();
    67a6:	f7fc faf9 	bl	2d9c <opcode_0xE0()>
            break; // CPX - Immediate
    67aa:	e5fe      	b.n	63aa <loop+0x396>
            opcode_0xE1();
    67ac:	f7fb f95c 	bl	1a68 <opcode_0xE1()>
            break; // SBC - Indexed Indirect X
    67b0:	e5fb      	b.n	63aa <loop+0x396>
            opcode_0xE3();
    67b2:	f7fe fe81 	bl	54b8 <opcode_0xE3()>
            break; // ISC - Indexed Indirect X
    67b6:	e5f8      	b.n	63aa <loop+0x396>
            opcode_0xE4();
    67b8:	f7fc fb1c 	bl	2df4 <opcode_0xE4()>
            break; // CPX - ZeroPage
    67bc:	e5f5      	b.n	63aa <loop+0x396>
            opcode_0xEF();
    67be:	f7fe fed3 	bl	5568 <opcode_0xEF()>
            break; // ISC - Absolute
    67c2:	e5f2      	b.n	63aa <loop+0x396>
            opcode_0xF0();
    67c4:	f7fd f900 	bl	39c8 <opcode_0xF0()>
            break; // BEQ - Branch on Zero Set
    67c8:	e5ef      	b.n	63aa <loop+0x396>
            opcode_0xF1();
    67ca:	f7fb f955 	bl	1a78 <opcode_0xF1()>
            break; // SBC - Indirect Indexed  Y
    67ce:	e5ec      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    67d0:	f7fa f936 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    67d4:	e7fe      	b.n	67d4 <loop+0x7c0>
            opcode_0xF3();
    67d6:	f7fe fe9b 	bl	5510 <opcode_0xF3()>
            break; // ISC - Indirect Indexed  Y
    67da:	e5e6      	b.n	63aa <loop+0x396>
            opcode_0xF5();
    67dc:	f7fb f920 	bl	1a20 <opcode_0xF5()>
            break; // SBC - ZeroPage , X
    67e0:	e5e3      	b.n	63aa <loop+0x396>
            opcode_0xF6();
    67e2:	f7fc fcd3 	bl	318c <opcode_0xF6()>
            break; // INC - ZeroPage , X
    67e6:	e5e0      	b.n	63aa <loop+0x396>
            opcode_0xF7();
    67e8:	f7fe fe3a 	bl	5460 <opcode_0xF7()>
            break; // ISC - ZeroPage , X
    67ec:	e5dd      	b.n	63aa <loop+0x396>
            opcode_0xE5();
    67ee:	f7fb f8ff 	bl	19f0 <opcode_0xE5()>
            break; // SBC - ZeroPage
    67f2:	e5da      	b.n	63aa <loop+0x396>
            opcode_0xE6();
    67f4:	f7fc fc96 	bl	3124 <opcode_0xE6()>
            break; // INC - ZeroPage
    67f8:	e5d7      	b.n	63aa <loop+0x396>
            opcode_0xE7();
    67fa:	f7fe fdf9 	bl	53f0 <opcode_0xE7()>
            break; // ISC - ZeroPage
    67fe:	e5d4      	b.n	63aa <loop+0x396>
            opcode_0xE8();
    6800:	f7fb fa1a 	bl	1c38 <opcode_0xE8()>
            break; // INX
    6804:	e5d1      	b.n	63aa <loop+0x396>
            opcode_0x87();
    6806:	f7fe fa97 	bl	4d38 <opcode_0x87()>
            break; // SAX - ZeroPage
    680a:	e5ce      	b.n	63aa <loop+0x396>
            opcode_0x88();
    680c:	f7fb f9ee 	bl	1bec <opcode_0x88()>
            break; // DEY
    6810:	e5cb      	b.n	63aa <loop+0x396>
            opcode_0x8A();
    6812:	f7fb facf 	bl	1db4 <opcode_0x8A()>
            break; // TXA
    6816:	e5c8      	b.n	63aa <loop+0x396>
    Write_Absolute(register_y);
    6818:	4b68      	ldr	r3, [pc, #416]	; (69bc <loop+0x9a8>)
    681a:	7818      	ldrb	r0, [r3, #0]
    681c:	f7fa fa66 	bl	cec <Write_Absolute(unsigned char)>
    return;
    6820:	e5c3      	b.n	63aa <loop+0x396>
    Write_Absolute_X(register_a);
    6822:	4b67      	ldr	r3, [pc, #412]	; (69c0 <loop+0x9ac>)
    6824:	7818      	ldrb	r0, [r3, #0]
    6826:	f7fa fac1 	bl	dac <Write_Absolute_X(unsigned char)>
    return;
    682a:	e5be      	b.n	63aa <loop+0x396>
            opcode_0xA0();
    682c:	f7fc f88c 	bl	2948 <opcode_0xA0()>
            break; // LDY - Immediate
    6830:	e5bb      	b.n	63aa <loop+0x396>
            opcode_0xA1();
    6832:	f7fb ff91 	bl	2758 <opcode_0xA1()>
            break; // LDA - Indexed Indirect X
    6836:	e5b8      	b.n	63aa <loop+0x396>
            opcode_0xA2();
    6838:	f7fb ffc6 	bl	27c8 <opcode_0xA2()>
            break; // LDX - Immediate
    683c:	e5b5      	b.n	63aa <loop+0x396>
            opcode_0xA3();
    683e:	f7fe fb61 	bl	4f04 <opcode_0xA3()>
            break; // LAX - Indexed Indirect X
    6842:	e5b2      	b.n	63aa <loop+0x396>
            opcode_0xA4();
    6844:	f7fc f8a4 	bl	2990 <opcode_0xA4()>
            break; // LDY - ZeroPage
    6848:	e5af      	b.n	63aa <loop+0x396>
            opcode_0xA5();
    684a:	f7fb fee9 	bl	2620 <opcode_0xA5()>
            break; // LDA - ZeroPage
    684e:	e5ac      	b.n	63aa <loop+0x396>
            opcode_0xA6();
    6850:	f7fb ffde 	bl	2810 <opcode_0xA6()>
            break; // LDX - ZeroPage
    6854:	e5a9      	b.n	63aa <loop+0x396>
            opcode_0xA7();
    6856:	f7fe fae9 	bl	4e2c <opcode_0xA7()>
            break; // LAX - ZeroPage
    685a:	e5a6      	b.n	63aa <loop+0x396>
            opcode_0xA8();
    685c:	f7fb fa5e 	bl	1d1c <opcode_0xA8()>
            break; // TAY
    6860:	e5a3      	b.n	63aa <loop+0x396>
            opcode_0xA9();
    6862:	f7fb feb9 	bl	25d8 <opcode_0xA9()>
            break; // LDA - Immediate
    6866:	e5a0      	b.n	63aa <loop+0x396>
            opcode_0xAA();
    6868:	f7fb fa32 	bl	1cd0 <opcode_0xAA()>
            break; // TAX
    686c:	e59d      	b.n	63aa <loop+0x396>
            opcode_0xAC();
    686e:	f7fc f8d7 	bl	2a20 <opcode_0xAC()>
            break; // LDY - Absolute
    6872:	e59a      	b.n	63aa <loop+0x396>
            opcode_0xAD();
    6874:	f7fb ff1c 	bl	26b0 <opcode_0xAD()>
            break; // LDA - Absolute
    6878:	e597      	b.n	63aa <loop+0x396>
            opcode_0xAE();
    687a:	f7fc f82d 	bl	28d8 <opcode_0xAE()>
            break; // LDX - Absolute
    687e:	e594      	b.n	63aa <loop+0x396>
            opcode_0xAF();
    6880:	f7fe fb80 	bl	4f84 <opcode_0xAF()>
            break; // LAX - Absolute
    6884:	e591      	b.n	63aa <loop+0x396>
    Write_Absolute(register_a);
    6886:	4b4e      	ldr	r3, [pc, #312]	; (69c0 <loop+0x9ac>)
    6888:	7818      	ldrb	r0, [r3, #0]
    688a:	f7fa fa2f 	bl	cec <Write_Absolute(unsigned char)>
    return;
    688e:	e58c      	b.n	63aa <loop+0x396>
    Write_Absolute(register_x);
    6890:	4b4c      	ldr	r3, [pc, #304]	; (69c4 <loop+0x9b0>)
    6892:	7818      	ldrb	r0, [r3, #0]
    6894:	f7fa fa2a 	bl	cec <Write_Absolute(unsigned char)>
    return;
    6898:	e587      	b.n	63aa <loop+0x396>
            opcode_0x8F();
    689a:	f7fe fa9f 	bl	4ddc <opcode_0x8F()>
            break; // SAX - Absolute
    689e:	e584      	b.n	63aa <loop+0x396>
            opcode_0x90();
    68a0:	f7fd f87c 	bl	399c <opcode_0x90()>
            break; // BCC - Branch on Carry Clear
    68a4:	e581      	b.n	63aa <loop+0x396>
    Write_Indexed_Indirect_Y(register_a);
    68a6:	4b46      	ldr	r3, [pc, #280]	; (69c0 <loop+0x9ac>)
    68a8:	7818      	ldrb	r0, [r3, #0]
    68aa:	f7fa fb0b 	bl	ec4 <Write_Indexed_Indirect_Y(unsigned char)>
    return;
    68ae:	e57c      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    68b0:	f7fa f8c6 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    68b4:	e7fe      	b.n	68b4 <loop+0x8a0>
    Fetch_ZeroPage_Y();
    68b6:	f7fa f903 	bl	ac0 <Fetch_ZeroPage_Y()>
    return;
    68ba:	e576      	b.n	63aa <loop+0x396>
    Write_ZeroPage_X(register_y);
    68bc:	4b3f      	ldr	r3, [pc, #252]	; (69bc <loop+0x9a8>)
    68be:	7818      	ldrb	r0, [r3, #0]
    68c0:	f7fa fa34 	bl	d2c <Write_ZeroPage_X(unsigned char)>
    return;
    68c4:	e571      	b.n	63aa <loop+0x396>
    Write_ZeroPage_X(register_a);
    68c6:	4b3e      	ldr	r3, [pc, #248]	; (69c0 <loop+0x9ac>)
    68c8:	7818      	ldrb	r0, [r3, #0]
    68ca:	f7fa fa2f 	bl	d2c <Write_ZeroPage_X(unsigned char)>
    return;
    68ce:	e56c      	b.n	63aa <loop+0x396>
    Write_ZeroPage_Y(register_x);
    68d0:	4b3c      	ldr	r3, [pc, #240]	; (69c4 <loop+0x9b0>)
    68d2:	7818      	ldrb	r0, [r3, #0]
    68d4:	f7fa fa4a 	bl	d6c <Write_ZeroPage_Y(unsigned char)>
    return;
    68d8:	e567      	b.n	63aa <loop+0x396>
            opcode_0x97();
    68da:	f7fe fa4b 	bl	4d74 <opcode_0x97()>
            break; // SAX - ZeroPage , Y
    68de:	e564      	b.n	63aa <loop+0x396>
            opcode_0x98();
    68e0:	f7fb faa2 	bl	1e28 <opcode_0x98()>
            break; // TYA
    68e4:	e561      	b.n	63aa <loop+0x396>
    Write_Absolute_Y(register_a);
    68e6:	4b36      	ldr	r3, [pc, #216]	; (69c0 <loop+0x9ac>)
    68e8:	7818      	ldrb	r0, [r3, #0]
    68ea:	f7fa fa87 	bl	dfc <Write_Absolute_Y(unsigned char)>
    return;
    68ee:	e55c      	b.n	63aa <loop+0x396>
            opcode_0x9A();
    68f0:	f7fb fa86 	bl	1e00 <opcode_0x9A()>
            break; // TXS
    68f4:	e559      	b.n	63aa <loop+0x396>
    Fetch_Absolute_X(0);
    68f6:	2000      	movs	r0, #0
    68f8:	f7fa f920 	bl	b3c <Fetch_Absolute_X(unsigned char)>
    return;
    68fc:	e555      	b.n	63aa <loop+0x396>
            opcode_0x05();
    68fe:	f7fb fc75 	bl	21ec <opcode_0x05()>
            break; // OR ZeroPage
    6902:	e552      	b.n	63aa <loop+0x396>
            opcode_0xB0();
    6904:	f7fd f834 	bl	3970 <opcode_0xB0()>
            break; // BCS - Branch on Carry Set
    6908:	e54f      	b.n	63aa <loop+0x396>
            opcode_0xB1();
    690a:	f7fb ff41 	bl	2790 <opcode_0xB1()>
            break; // LDA - Indirect Indexed  Y
    690e:	e54c      	b.n	63aa <loop+0x396>
    Fetch_Immediate();
    6910:	f7fa f896 	bl	a40 <Fetch_Immediate()>
    while (1) {}
    6914:	e7fe      	b.n	6914 <loop+0x900>
            opcode_0xB3();
    6916:	f7fe fb15 	bl	4f44 <opcode_0xB3()>
            break; // LAX - Indirect Indexed  Y
    691a:	e546      	b.n	63aa <loop+0x396>
            opcode_0xB4();
    691c:	f7fc f864 	bl	29e8 <opcode_0xB4()>
            break; // LDY - ZeroPage , X
    6920:	e543      	b.n	63aa <loop+0x396>
            opcode_0xB5();
    6922:	f7fb fea9 	bl	2678 <opcode_0xB5()>
            break; // LDA - ZeroPage , X
    6926:	e540      	b.n	63aa <loop+0x396>
            opcode_0xB6();
    6928:	f7fb ff9e 	bl	2868 <opcode_0xB6()>
            break; // LDX - ZeroPage , Y
    692c:	e53d      	b.n	63aa <loop+0x396>
            opcode_0xB7();
    692e:	f7fe faad 	bl	4e8c <opcode_0xB7()>
            break; // LAX - ZeroPage , Y
    6932:	e53a      	b.n	63aa <loop+0x396>
            opcode_0xB8();
    6934:	f7fb f8ec 	bl	1b10 <opcode_0xB8()>
            break; // CLV
    6938:	e537      	b.n	63aa <loop+0x396>
            opcode_0xB9();
    693a:	f7fb fef1 	bl	2720 <opcode_0xB9()>
            break; // LDA - Absolute , Y
    693e:	e534      	b.n	63aa <loop+0x396>
            opcode_0xBA();
    6940:	f7fb fa12 	bl	1d68 <opcode_0xBA()>
            break; // TSX
    6944:	e531      	b.n	63aa <loop+0x396>
            opcode_0xBB();
    6946:	f7fe ff3d 	bl	57c4 <opcode_0xBB()>
            break; // LAS - Absolute , Y
    694a:	e52e      	b.n	63aa <loop+0x396>
            opcode_0xBC();
    694c:	f7fc f884 	bl	2a58 <opcode_0xBC()>
            break; // LDY - Absolute , X
    6950:	e52b      	b.n	63aa <loop+0x396>
            opcode_0xBD();
    6952:	f7fb fec9 	bl	26e8 <opcode_0xBD()>
            break; // LDA - Absolute , X
    6956:	e528      	b.n	63aa <loop+0x396>
            opcode_0xBE();
    6958:	f7fb ffda 	bl	2910 <opcode_0xBE()>
            break; // LDX - Absolute , Y
    695c:	e525      	b.n	63aa <loop+0x396>
            opcode_0xBF();
    695e:	f7fe fb31 	bl	4fc4 <opcode_0xBF()>
            break; // LAX - Absolute , Y
    6962:	e522      	b.n	63aa <loop+0x396>
            opcode_0xC0();
    6964:	f7fc fa9e 	bl	2ea4 <opcode_0xC0()>
            break; // CPY - Immediate
    6968:	e51f      	b.n	63aa <loop+0x396>
            opcode_0xC1();
    696a:	f7fc f9cd 	bl	2d08 <opcode_0xC1()>
            break; // CMP - Indexed Indirect X
    696e:	e51c      	b.n	63aa <loop+0x396>
            opcode_0xC3();
    6970:	f7fe fbe0 	bl	5134 <opcode_0xC3()>
            break; // DCP - Indexed Indirect X
    6974:	e519      	b.n	63aa <loop+0x396>
            opcode_0xC4();
    6976:	f7fc fac1 	bl	2efc <opcode_0xC4()>
            break; // CPY - ZeroPage
    697a:	e516      	b.n	63aa <loop+0x396>
            opcode_0xC5();
    697c:	f7fc f8fc 	bl	2b78 <opcode_0xC5()>
            break; // CMP - ZeroPage
    6980:	e513      	b.n	63aa <loop+0x396>
            opcode_0xC6();
    6982:	f7fc fc53 	bl	322c <opcode_0xC6()>
            break; // DEC - ZeroPage
    6986:	e510      	b.n	63aa <loop+0x396>
            opcode_0xC7();
    6988:	f7fe fb3c 	bl	5004 <opcode_0xC7()>
            break; // DCP - ZeroPage
    698c:	e50d      	b.n	63aa <loop+0x396>
            opcode_0xC8();
    698e:	f7fb f979 	bl	1c84 <opcode_0xC8()>
            break; // INY
    6992:	e50a      	b.n	63aa <loop+0x396>
            opcode_0xC9();
    6994:	f7fc f8c4 	bl	2b20 <opcode_0xC9()>
            break; // CMP - Immediate
    6998:	e507      	b.n	63aa <loop+0x396>
            opcode_0xCA();
    699a:	f7fb f901 	bl	1ba0 <opcode_0xCA()>
            break; // DEX
    699e:	e504      	b.n	63aa <loop+0x396>
            opcode_0xCB();
    69a0:	f7fe fede 	bl	5760 <opcode_0xCB()>
            break; // SBX - Immediate
    69a4:	e501      	b.n	63aa <loop+0x396>
            opcode_0xCC();
    69a6:	f7fc fadd 	bl	2f64 <opcode_0xCC()>
            break; // CPY - Absolute
    69aa:	e4fe      	b.n	63aa <loop+0x396>
            Serial.println("ERROR: Illegal instruction");
    69ac:	4906      	ldr	r1, [pc, #24]	; (69c8 <loop+0x9b4>)
    69ae:	4628      	mov	r0, r5
    69b0:	f7f9 fb5a 	bl	68 <Print::println(char const*) [clone .isra.0]>
            run_mode = WAITING;
    69b4:	f04f 0300 	mov.w	r3, #0
    69b8:	7023      	strb	r3, [r4, #0]
        if (run_mode == SINGLE_STEP)
    69ba:	e4ff      	b.n	63bc <loop+0x3a8>
    69bc:	200150a5 	.word	0x200150a5
    69c0:	200150a3 	.word	0x200150a3
    69c4:	200150a4 	.word	0x200150a4
    69c8:	20000eb0 	.word	0x20000eb0

000069cc <_GLOBAL__sub_I_register_flags>:

    }
}
    69cc:	b510      	push	{r4, lr}
String last_command = "";
    69ce:	4c06      	ldr	r4, [pc, #24]	; (69e8 <_GLOBAL__sub_I_register_flags+0x1c>)
    69d0:	4906      	ldr	r1, [pc, #24]	; (69ec <_GLOBAL__sub_I_register_flags+0x20>)
    69d2:	4620      	mov	r0, r4
    69d4:	f000 f8b6 	bl	6b44 <String::String(char const*)>
    69d8:	4620      	mov	r0, r4
    69da:	4a05      	ldr	r2, [pc, #20]	; (69f0 <_GLOBAL__sub_I_register_flags+0x24>)
    69dc:	4905      	ldr	r1, [pc, #20]	; (69f4 <_GLOBAL__sub_I_register_flags+0x28>)
}
    69de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
String last_command = "";
    69e2:	f002 b88d 	b.w	8b00 <__aeabi_atexit>
    69e6:	bf00      	nop
    69e8:	20014ff0 	.word	0x20014ff0
    69ec:	2000047c 	.word	0x2000047c
    69f0:	200041c8 	.word	0x200041c8
    69f4:	00006acd 	.word	0x00006acd

000069f8 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    69f8:	4608      	mov	r0, r1
    69fa:	f001 bc95 	b.w	8328 <usb_serial_putchar>
    69fe:	bf00      	nop

00006a00 <Print::print(String const&)>:
{
    6a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
    6a04:	688c      	ldr	r4, [r1, #8]
    6a06:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    6a08:	b1dc      	cbz	r4, 6a42 <Print::print(String const&)+0x42>
	unsigned int index = 0;
    6a0a:	2500      	movs	r5, #0
    6a0c:	4688      	mov	r8, r1
    6a0e:	4606      	mov	r6, r0
	size_t count = 0;
    6a10:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    6a12:	462b      	mov	r3, r5
    6a14:	2221      	movs	r2, #33	; 0x21
    6a16:	a901      	add	r1, sp, #4
    6a18:	4640      	mov	r0, r8
    6a1a:	f000 f961 	bl	6ce0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
    6a1e:	2c20      	cmp	r4, #32
    6a20:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
    6a22:	6833      	ldr	r3, [r6, #0]
    6a24:	bf28      	it	cs
    6a26:	2220      	movcs	r2, #32
    6a28:	a901      	add	r1, sp, #4
    6a2a:	4630      	mov	r0, r6
    6a2c:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
    6a2e:	1aa4      	subs	r4, r4, r2
		index += nbytes;
    6a30:	4415      	add	r5, r2
		count += write(buffer, nbytes);
    6a32:	4798      	blx	r3
    6a34:	4407      	add	r7, r0
	while (len > 0) {
    6a36:	2c00      	cmp	r4, #0
    6a38:	d1eb      	bne.n	6a12 <Print::print(String const&)+0x12>
}
    6a3a:	4638      	mov	r0, r7
    6a3c:	b00a      	add	sp, #40	; 0x28
    6a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    6a42:	4627      	mov	r7, r4
}
    6a44:	4638      	mov	r0, r7
    6a46:	b00a      	add	sp, #40	; 0x28
    6a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006a4c <Print::println()>:
{
    6a4c:	b500      	push	{lr}
	return write(buf, 2);
    6a4e:	6803      	ldr	r3, [r0, #0]
{
    6a50:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    6a52:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    6a56:	2202      	movs	r2, #2
    6a58:	a901      	add	r1, sp, #4
    6a5a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    6a5c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    6a60:	4798      	blx	r3
}
    6a62:	b003      	add	sp, #12
    6a64:	f85d fb04 	ldr.w	pc, [sp], #4

00006a68 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    6a68:	4b05      	ldr	r3, [pc, #20]	; (6a80 <_write+0x18>)
    6a6a:	2802      	cmp	r0, #2
    6a6c:	bf88      	it	hi
    6a6e:	4603      	movhi	r3, r0
{
    6a70:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    6a72:	681c      	ldr	r4, [r3, #0]
    6a74:	4618      	mov	r0, r3
    6a76:	6863      	ldr	r3, [r4, #4]
}
    6a78:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    6a7c:	4718      	bx	r3
    6a7e:	bf00      	nop
    6a80:	200041b0 	.word	0x200041b0

00006a84 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    6a84:	f001 bc40 	b.w	8308 <usb_serial_getchar>

00006a88 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    6a88:	f001 bbd8 	b.w	823c <usb_serial_peekchar>

00006a8c <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    6a8c:	6081      	str	r1, [r0, #8]
}
    6a8e:	4770      	bx	lr

00006a90 <String::String(String const&)>:
String::String(const String &value)
    6a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this == &rhs) return *this;
    6a92:	4288      	cmp	r0, r1
	buffer = NULL;
    6a94:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
    6a98:	4604      	mov	r4, r0
	len = 0;
    6a9a:	6085      	str	r5, [r0, #8]
	flags = 0;
    6a9c:	7305      	strb	r5, [r0, #12]
	capacity = 0;
    6a9e:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
    6aa2:	d002      	beq.n	6aaa <String::String(String const&)+0x1a>
    6aa4:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
    6aa6:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
    6aa8:	b90e      	cbnz	r6, 6aae <String::String(String const&)+0x1e>
}
    6aaa:	4620      	mov	r0, r4
    6aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6aae:	1c70      	adds	r0, r6, #1
    6ab0:	f002 f830 	bl	8b14 <malloc>
	if (newbuffer) {
    6ab4:	2800      	cmp	r0, #0
    6ab6:	d0f8      	beq.n	6aaa <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
    6ab8:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
    6aba:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
    6abc:	6020      	str	r0, [r4, #0]
	len = length;
    6abe:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
    6ac2:	f003 fb2b 	bl	a11c <strcpy>
}
    6ac6:	4620      	mov	r0, r4
    6ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6aca:	bf00      	nop

00006acc <String::~String()>:
String::~String()
    6acc:	b510      	push	{r4, lr}
    6ace:	4604      	mov	r4, r0
	free(buffer);
    6ad0:	6800      	ldr	r0, [r0, #0]
    6ad2:	f002 f827 	bl	8b24 <free>
}
    6ad6:	4620      	mov	r0, r4
    6ad8:	bd10      	pop	{r4, pc}
    6ada:	bf00      	nop

00006adc <String::copy(char const*, unsigned int)>:
{
    6adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ade:	4604      	mov	r4, r0
	if (length == 0) {
    6ae0:	4615      	mov	r5, r2
    6ae2:	b932      	cbnz	r2, 6af2 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    6ae4:	6803      	ldr	r3, [r0, #0]
    6ae6:	b103      	cbz	r3, 6aea <String::copy(char const*, unsigned int)+0xe>
    6ae8:	701a      	strb	r2, [r3, #0]
		len = 0;
    6aea:	2300      	movs	r3, #0
}
    6aec:	4620      	mov	r0, r4
		len = 0;
    6aee:	60a3      	str	r3, [r4, #8]
}
    6af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    6af2:	6843      	ldr	r3, [r0, #4]
    6af4:	460e      	mov	r6, r1
    6af6:	429a      	cmp	r2, r3
    6af8:	d91c      	bls.n	6b34 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6afa:	1c51      	adds	r1, r2, #1
    6afc:	6800      	ldr	r0, [r0, #0]
    6afe:	f002 fad5 	bl	90ac <realloc>
	if (newbuffer) {
    6b02:	4607      	mov	r7, r0
    6b04:	b160      	cbz	r0, 6b20 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    6b06:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    6b08:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
    6b0c:	b90b      	cbnz	r3, 6b12 <String::copy(char const*, unsigned int)+0x36>
    6b0e:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    6b10:	6827      	ldr	r7, [r4, #0]
    6b12:	4631      	mov	r1, r6
    6b14:	4638      	mov	r0, r7
	len = length;
    6b16:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    6b18:	f003 fb00 	bl	a11c <strcpy>
}
    6b1c:	4620      	mov	r0, r4
    6b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    6b20:	6820      	ldr	r0, [r4, #0]
    6b22:	b110      	cbz	r0, 6b2a <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    6b24:	f001 fffe 	bl	8b24 <free>
			buffer = NULL;
    6b28:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    6b2a:	2300      	movs	r3, #0
}
    6b2c:	4620      	mov	r0, r4
		len = capacity = 0;
    6b2e:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
    6b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    6b34:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
    6b36:	4631      	mov	r1, r6
	len = length;
    6b38:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    6b3a:	4638      	mov	r0, r7
    6b3c:	f003 faee 	bl	a11c <strcpy>
	return *this;
    6b40:	e7ec      	b.n	6b1c <String::copy(char const*, unsigned int)+0x40>
    6b42:	bf00      	nop

00006b44 <String::String(char const*)>:
String::String(const char *cstr)
    6b44:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    6b46:	2300      	movs	r3, #0
String::String(const char *cstr)
    6b48:	4604      	mov	r4, r0
	capacity = 0;
    6b4a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
    6b4e:	6083      	str	r3, [r0, #8]
	flags = 0;
    6b50:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    6b52:	b141      	cbz	r1, 6b66 <String::String(char const*)+0x22>
    6b54:	460d      	mov	r5, r1
    6b56:	4608      	mov	r0, r1
    6b58:	f003 fb52 	bl	a200 <strlen>
    6b5c:	4602      	mov	r2, r0
    6b5e:	4629      	mov	r1, r5
    6b60:	4620      	mov	r0, r4
    6b62:	f7ff ffbb 	bl	6adc <String::copy(char const*, unsigned int)>
}
    6b66:	4620      	mov	r0, r4
    6b68:	bd38      	pop	{r3, r4, r5, pc}
    6b6a:	bf00      	nop

00006b6c <String::operator=(String const&)>:
	if (this == &rhs) return *this;
    6b6c:	4281      	cmp	r1, r0
    6b6e:	d003      	beq.n	6b78 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
    6b70:	688a      	ldr	r2, [r1, #8]
    6b72:	6809      	ldr	r1, [r1, #0]
    6b74:	f7ff bfb2 	b.w	6adc <String::copy(char const*, unsigned int)>
}
    6b78:	4770      	bx	lr
    6b7a:	bf00      	nop

00006b7c <String::operator=(String&&)>:
	if (this != &rval) move(rval);
    6b7c:	4288      	cmp	r0, r1
{
    6b7e:	b538      	push	{r3, r4, r5, lr}
    6b80:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    6b82:	d00e      	beq.n	6ba2 <String::operator=(String&&)+0x26>
	if (buffer) free(buffer);
    6b84:	6800      	ldr	r0, [r0, #0]
    6b86:	460c      	mov	r4, r1
    6b88:	b108      	cbz	r0, 6b8e <String::operator=(String&&)+0x12>
    6b8a:	f001 ffcb 	bl	8b24 <free>
	len = rhs.len;
    6b8e:	68a0      	ldr	r0, [r4, #8]
	rhs.buffer = NULL;
    6b90:	2300      	movs	r3, #0
	capacity = rhs.capacity;
    6b92:	e9d4 1200 	ldrd	r1, r2, [r4]
	len = rhs.len;
    6b96:	60a8      	str	r0, [r5, #8]
	capacity = rhs.capacity;
    6b98:	e9c5 1200 	strd	r1, r2, [r5]
	rhs.capacity = 0;
    6b9c:	e9c4 3300 	strd	r3, r3, [r4]
	rhs.len = 0;
    6ba0:	60a3      	str	r3, [r4, #8]
}
    6ba2:	4628      	mov	r0, r5
    6ba4:	bd38      	pop	{r3, r4, r5, pc}
    6ba6:	bf00      	nop

00006ba8 <String::operator=(char const*)>:
{
    6ba8:	b538      	push	{r3, r4, r5, lr}
    6baa:	4605      	mov	r5, r0
	if (cstr) {
    6bac:	460c      	mov	r4, r1
    6bae:	b149      	cbz	r1, 6bc4 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
    6bb0:	4608      	mov	r0, r1
    6bb2:	f003 fb25 	bl	a200 <strlen>
    6bb6:	4621      	mov	r1, r4
    6bb8:	4602      	mov	r2, r0
    6bba:	4628      	mov	r0, r5
    6bbc:	f7ff ff8e 	bl	6adc <String::copy(char const*, unsigned int)>
}
    6bc0:	4628      	mov	r0, r5
    6bc2:	bd38      	pop	{r3, r4, r5, pc}
    6bc4:	4628      	mov	r0, r5
		len = 0;
    6bc6:	60a9      	str	r1, [r5, #8]
}
    6bc8:	bd38      	pop	{r3, r4, r5, pc}
    6bca:	bf00      	nop

00006bcc <String::append(char const*, unsigned int)>:
{
    6bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6bd0:	4604      	mov	r4, r0
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6bd2:	6800      	ldr	r0, [r0, #0]
{
    6bd4:	460d      	mov	r5, r1
    6bd6:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6bd8:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
    6bda:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    6bdc:	d809      	bhi.n	6bf2 <String::append(char const*, unsigned int)+0x26>
    6bde:	18c2      	adds	r2, r0, r3
    6be0:	4291      	cmp	r1, r2
    6be2:	d206      	bcs.n	6bf2 <String::append(char const*, unsigned int)+0x26>
		buffer_offset = (unsigned int)(cstr-buffer);
    6be4:	1a0f      	subs	r7, r1, r0
		self = true;
    6be6:	f04f 0901 	mov.w	r9, #1
	if (length == 0 || !reserve(newlen)) return *this;
    6bea:	b936      	cbnz	r6, 6bfa <String::append(char const*, unsigned int)+0x2e>
}
    6bec:	4620      	mov	r0, r4
    6bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
    6bf2:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
    6bf6:	2e00      	cmp	r6, #0
    6bf8:	d0f8      	beq.n	6bec <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
    6bfa:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
    6bfe:	6862      	ldr	r2, [r4, #4]
    6c00:	4590      	cmp	r8, r2
    6c02:	d90c      	bls.n	6c1e <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    6c04:	f108 0101 	add.w	r1, r8, #1
    6c08:	f002 fa50 	bl	90ac <realloc>
	if (newbuffer) {
    6c0c:	2800      	cmp	r0, #0
    6c0e:	d0ed      	beq.n	6bec <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
    6c10:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
    6c12:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
    6c16:	b913      	cbnz	r3, 6c1e <String::append(char const*, unsigned int)+0x52>
    6c18:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
    6c1a:	6820      	ldr	r0, [r4, #0]
    6c1c:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
    6c1e:	f1b9 0f00 	cmp.w	r9, #0
    6c22:	d108      	bne.n	6c36 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
    6c24:	4629      	mov	r1, r5
    6c26:	4418      	add	r0, r3
    6c28:	f003 fa78 	bl	a11c <strcpy>
}
    6c2c:	4620      	mov	r0, r4
	len = newlen;
    6c2e:	f8c4 8008 	str.w	r8, [r4, #8]
}
    6c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
    6c36:	4632      	mov	r2, r6
    6c38:	19c1      	adds	r1, r0, r7
    6c3a:	4418      	add	r0, r3
    6c3c:	f000 f9ca 	bl	6fd4 <memcpy>
		buffer[newlen] = 0;
    6c40:	6823      	ldr	r3, [r4, #0]
    6c42:	2200      	movs	r2, #0
    6c44:	f803 2008 	strb.w	r2, [r3, r8]
    6c48:	e7f0      	b.n	6c2c <String::append(char const*, unsigned int)+0x60>
    6c4a:	bf00      	nop

00006c4c <String::append(char)>:
{
    6c4c:	b510      	push	{r4, lr}
    6c4e:	b082      	sub	sp, #8
	buf[1] = 0;
    6c50:	2300      	movs	r3, #0
{
    6c52:	4604      	mov	r4, r0
	append(buf, 1);
    6c54:	2201      	movs	r2, #1
	buf[0] = c;
    6c56:	f88d 1004 	strb.w	r1, [sp, #4]
	append(buf, 1);
    6c5a:	a901      	add	r1, sp, #4
	buf[1] = 0;
    6c5c:	f88d 3005 	strb.w	r3, [sp, #5]
	append(buf, 1);
    6c60:	f7ff ffb4 	bl	6bcc <String::append(char const*, unsigned int)>
}
    6c64:	4620      	mov	r0, r4
    6c66:	b002      	add	sp, #8
    6c68:	bd10      	pop	{r4, pc}
    6c6a:	bf00      	nop

00006c6c <operator+(StringSumHelper const&, String const&)>:
{
    6c6c:	b510      	push	{r4, lr}
    6c6e:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
    6c70:	688a      	ldr	r2, [r1, #8]
    6c72:	6809      	ldr	r1, [r1, #0]
    6c74:	f7ff ffaa 	bl	6bcc <String::append(char const*, unsigned int)>
}
    6c78:	4620      	mov	r0, r4
    6c7a:	bd10      	pop	{r4, pc}

00006c7c <operator+(StringSumHelper const&, char const*)>:
{
    6c7c:	b538      	push	{r3, r4, r5, lr}
    6c7e:	4605      	mov	r5, r0
	if (cstr) a.append(cstr, strlen(cstr));
    6c80:	b141      	cbz	r1, 6c94 <operator+(StringSumHelper const&, char const*)+0x18>
    6c82:	460c      	mov	r4, r1
    6c84:	4608      	mov	r0, r1
    6c86:	f003 fabb 	bl	a200 <strlen>
    6c8a:	4602      	mov	r2, r0
    6c8c:	4621      	mov	r1, r4
    6c8e:	4628      	mov	r0, r5
    6c90:	f7ff ff9c 	bl	6bcc <String::append(char const*, unsigned int)>
}
    6c94:	4628      	mov	r0, r5
    6c96:	bd38      	pop	{r3, r4, r5, pc}

00006c98 <String::equals(char const*) const>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6c98:	6882      	ldr	r2, [r0, #8]
{
    6c9a:	b508      	push	{r3, lr}
    6c9c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6c9e:	b13a      	cbz	r2, 6cb0 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
    6ca0:	b161      	cbz	r1, 6cbc <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    6ca2:	6800      	ldr	r0, [r0, #0]
    6ca4:	f003 f8d0 	bl	9e48 <strcmp>
    6ca8:	fab0 f080 	clz	r0, r0
    6cac:	0940      	lsrs	r0, r0, #5
}
    6cae:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    6cb0:	b131      	cbz	r1, 6cc0 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    6cb2:	7818      	ldrb	r0, [r3, #0]
    6cb4:	fab0 f080 	clz	r0, r0
    6cb8:	0940      	lsrs	r0, r0, #5
}
    6cba:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
    6cbc:	6803      	ldr	r3, [r0, #0]
    6cbe:	e7f8      	b.n	6cb2 <String::equals(char const*) const+0x1a>
    6cc0:	2001      	movs	r0, #1
}
    6cc2:	bd08      	pop	{r3, pc}

00006cc4 <String::operator[](unsigned int)>:
	if (index >= len || !buffer) {
    6cc4:	6883      	ldr	r3, [r0, #8]
    6cc6:	428b      	cmp	r3, r1
    6cc8:	d903      	bls.n	6cd2 <String::operator[](unsigned int)+0xe>
    6cca:	6800      	ldr	r0, [r0, #0]
    6ccc:	b108      	cbz	r0, 6cd2 <String::operator[](unsigned int)+0xe>
	return buffer[index];
    6cce:	4408      	add	r0, r1
}
    6cd0:	4770      	bx	lr
		dummy_writable_char = 0;
    6cd2:	4b02      	ldr	r3, [pc, #8]	; (6cdc <String::operator[](unsigned int)+0x18>)
    6cd4:	2200      	movs	r2, #0
		return dummy_writable_char;
    6cd6:	4618      	mov	r0, r3
		dummy_writable_char = 0;
    6cd8:	701a      	strb	r2, [r3, #0]
		return dummy_writable_char;
    6cda:	4770      	bx	lr
    6cdc:	20015097 	.word	0x20015097

00006ce0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
    6ce0:	b1c2      	cbz	r2, 6d14 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
    6ce2:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
    6ce4:	fab1 f681 	clz	r6, r1
    6ce8:	460c      	mov	r4, r1
    6cea:	0976      	lsrs	r6, r6, #5
    6cec:	b119      	cbz	r1, 6cf6 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
    6cee:	6885      	ldr	r5, [r0, #8]
    6cf0:	429d      	cmp	r5, r3
    6cf2:	d801      	bhi.n	6cf8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
    6cf4:	700e      	strb	r6, [r1, #0]
}
    6cf6:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
    6cf8:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    6cfa:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    6cfe:	6801      	ldr	r1, [r0, #0]
    6d00:	4620      	mov	r0, r4
    6d02:	4565      	cmp	r5, ip
    6d04:	4419      	add	r1, r3
    6d06:	bf28      	it	cs
    6d08:	4665      	movcs	r5, ip
    6d0a:	462a      	mov	r2, r5
    6d0c:	f002 ffc2 	bl	9c94 <strncpy>
	buf[n] = 0;
    6d10:	5566      	strb	r6, [r4, r5]
}
    6d12:	bd70      	pop	{r4, r5, r6, pc}
    6d14:	4770      	bx	lr
    6d16:	bf00      	nop

00006d18 <String::indexOf(char) const>:
	if (fromIndex >= len) return -1;
    6d18:	6883      	ldr	r3, [r0, #8]
    6d1a:	b13b      	cbz	r3, 6d2c <String::indexOf(char) const+0x14>
{
    6d1c:	b510      	push	{r4, lr}
	const char* temp = strchr(buffer + fromIndex, ch);
    6d1e:	6804      	ldr	r4, [r0, #0]
    6d20:	4620      	mov	r0, r4
    6d22:	f002 ff51 	bl	9bc8 <strchr>
	if (temp == NULL) return -1;
    6d26:	b120      	cbz	r0, 6d32 <String::indexOf(char) const+0x1a>
	return temp - buffer;
    6d28:	1b00      	subs	r0, r0, r4
}
    6d2a:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
    6d2c:	f04f 30ff 	mov.w	r0, #4294967295
}
    6d30:	4770      	bx	lr
	if (fromIndex >= len) return -1;
    6d32:	f04f 30ff 	mov.w	r0, #4294967295
}
    6d36:	bd10      	pop	{r4, pc}

00006d38 <String::substring(unsigned int) const>:
{
    6d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return substring(left, len);
    6d3c:	688f      	ldr	r7, [r1, #8]
{
    6d3e:	460e      	mov	r6, r1
    6d40:	4604      	mov	r4, r0
	if (left > right) {
    6d42:	4297      	cmp	r7, r2
    6d44:	d202      	bcs.n	6d4c <String::substring(unsigned int) const+0x14>
    6d46:	4613      	mov	r3, r2
    6d48:	463a      	mov	r2, r7
    6d4a:	461f      	mov	r7, r3
	buffer = NULL;
    6d4c:	2300      	movs	r3, #0
	len = 0;
    6d4e:	60a3      	str	r3, [r4, #8]
	flags = 0;
    6d50:	7323      	strb	r3, [r4, #12]
	if (left > len) return out;
    6d52:	68b0      	ldr	r0, [r6, #8]
    6d54:	4290      	cmp	r0, r2
	capacity = 0;
    6d56:	e9c4 3300 	strd	r3, r3, [r4]
	if (left > len) return out;
    6d5a:	d314      	bcc.n	6d86 <String::substring(unsigned int) const+0x4e>
	if (right > len) right = len;
    6d5c:	4287      	cmp	r7, r0
	char temp = buffer[right];  // save the replaced character
    6d5e:	6831      	ldr	r1, [r6, #0]
    6d60:	bf28      	it	cs
    6d62:	4607      	movcs	r7, r0
    6d64:	f811 8007 	ldrb.w	r8, [r1, r7]
	buffer[right] = '\0';	
    6d68:	55cb      	strb	r3, [r1, r7]
	out = buffer + left;  // pointer arithmetic
    6d6a:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    6d6c:	189d      	adds	r5, r3, r2
    6d6e:	d00d      	beq.n	6d8c <String::substring(unsigned int) const+0x54>
		copy(cstr, strlen(cstr));
    6d70:	4628      	mov	r0, r5
    6d72:	f003 fa45 	bl	a200 <strlen>
    6d76:	4629      	mov	r1, r5
    6d78:	4602      	mov	r2, r0
    6d7a:	4620      	mov	r0, r4
    6d7c:	f7ff feae 	bl	6adc <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    6d80:	6833      	ldr	r3, [r6, #0]
    6d82:	f803 8007 	strb.w	r8, [r3, r7]
}
    6d86:	4620      	mov	r0, r4
    6d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    6d8c:	60a5      	str	r5, [r4, #8]
    6d8e:	e7f8      	b.n	6d82 <String::substring(unsigned int) const+0x4a>

00006d90 <String::substring(unsigned int, unsigned int) const>:
	if (left > right) {
    6d90:	429a      	cmp	r2, r3
{
    6d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d96:	4604      	mov	r4, r0
    6d98:	460e      	mov	r6, r1
	if (left > right) {
    6d9a:	d902      	bls.n	6da2 <String::substring(unsigned int, unsigned int) const+0x12>
    6d9c:	4611      	mov	r1, r2
    6d9e:	461a      	mov	r2, r3
    6da0:	460b      	mov	r3, r1
	buffer = NULL;
    6da2:	2000      	movs	r0, #0
	len = 0;
    6da4:	60a0      	str	r0, [r4, #8]
	flags = 0;
    6da6:	7320      	strb	r0, [r4, #12]
	if (left > len) return out;
    6da8:	68b7      	ldr	r7, [r6, #8]
    6daa:	4297      	cmp	r7, r2
	capacity = 0;
    6dac:	e9c4 0000 	strd	r0, r0, [r4]
	if (left > len) return out;
    6db0:	d314      	bcc.n	6ddc <String::substring(unsigned int, unsigned int) const+0x4c>
	if (right > len) right = len;
    6db2:	429f      	cmp	r7, r3
    6db4:	bf28      	it	cs
    6db6:	461f      	movcs	r7, r3
	char temp = buffer[right];  // save the replaced character
    6db8:	6833      	ldr	r3, [r6, #0]
    6dba:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    6dbe:	55d8      	strb	r0, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    6dc0:	6833      	ldr	r3, [r6, #0]
	if (cstr) {
    6dc2:	189d      	adds	r5, r3, r2
    6dc4:	d00d      	beq.n	6de2 <String::substring(unsigned int, unsigned int) const+0x52>
		copy(cstr, strlen(cstr));
    6dc6:	4628      	mov	r0, r5
    6dc8:	f003 fa1a 	bl	a200 <strlen>
    6dcc:	4629      	mov	r1, r5
    6dce:	4602      	mov	r2, r0
    6dd0:	4620      	mov	r0, r4
    6dd2:	f7ff fe83 	bl	6adc <String::copy(char const*, unsigned int)>
	buffer[right] = temp;  //restore character
    6dd6:	6833      	ldr	r3, [r6, #0]
    6dd8:	f803 8007 	strb.w	r8, [r3, r7]
}
    6ddc:	4620      	mov	r0, r4
    6dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
    6de2:	60a5      	str	r5, [r4, #8]
    6de4:	e7f8      	b.n	6dd8 <String::substring(unsigned int, unsigned int) const+0x48>
    6de6:	bf00      	nop

00006de8 <String::remove(unsigned int, unsigned int)>:
	}
	return *this;
}

String & String::remove(unsigned int index, unsigned int count)
{
    6de8:	b510      	push	{r4, lr}
    6dea:	4604      	mov	r4, r0
    6dec:	4608      	mov	r0, r1
	if (index < len && count > 0) {
    6dee:	68a1      	ldr	r1, [r4, #8]
    6df0:	b10a      	cbz	r2, 6df6 <String::remove(unsigned int, unsigned int)+0xe>
    6df2:	4281      	cmp	r1, r0
    6df4:	d801      	bhi.n	6dfa <String::remove(unsigned int, unsigned int)+0x12>
		len = len - count;
		memmove(buffer + index, buffer + index + count, len - index);
		buffer[len] = 0;
	}
	return *this;
}
    6df6:	4620      	mov	r0, r4
    6df8:	bd10      	pop	{r4, pc}
  		if (index + count > len) count = len - index;
    6dfa:	eb00 0c02 	add.w	ip, r0, r2
    6dfe:	4561      	cmp	r1, ip
    6e00:	d30e      	bcc.n	6e20 <String::remove(unsigned int, unsigned int)+0x38>
		len = len - count;
    6e02:	1a8b      	subs	r3, r1, r2
		memmove(buffer + index, buffer + index + count, len - index);
    6e04:	4661      	mov	r1, ip
    6e06:	1a1a      	subs	r2, r3, r0
		len = len - count;
    6e08:	60a3      	str	r3, [r4, #8]
		memmove(buffer + index, buffer + index + count, len - index);
    6e0a:	6823      	ldr	r3, [r4, #0]
    6e0c:	4419      	add	r1, r3
    6e0e:	4418      	add	r0, r3
    6e10:	f002 fe0c 	bl	9a2c <memmove>
		buffer[len] = 0;
    6e14:	6822      	ldr	r2, [r4, #0]
    6e16:	68a3      	ldr	r3, [r4, #8]
    6e18:	2100      	movs	r1, #0
}
    6e1a:	4620      	mov	r0, r4
		buffer[len] = 0;
    6e1c:	54d1      	strb	r1, [r2, r3]
}
    6e1e:	bd10      	pop	{r4, pc}
    6e20:	4603      	mov	r3, r0
    6e22:	2200      	movs	r2, #0
    6e24:	e7f0      	b.n	6e08 <String::remove(unsigned int, unsigned int)+0x20>
    6e26:	bf00      	nop

00006e28 <String::toLowerCase()>:

String & String::toLowerCase(void)
{
    6e28:	b538      	push	{r3, r4, r5, lr}
	if (!buffer) return *this;
    6e2a:	6804      	ldr	r4, [r0, #0]
{
    6e2c:	4605      	mov	r5, r0
	if (!buffer) return *this;
    6e2e:	b144      	cbz	r4, 6e42 <String::toLowerCase()+0x1a>
	for (char *p = buffer; *p; p++) {
    6e30:	7820      	ldrb	r0, [r4, #0]
    6e32:	b130      	cbz	r0, 6e42 <String::toLowerCase()+0x1a>
		*p = tolower(*p);
    6e34:	f002 fca6 	bl	9784 <tolower>
    6e38:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    6e3a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    6e3e:	2800      	cmp	r0, #0
    6e40:	d1f8      	bne.n	6e34 <String::toLowerCase()+0xc>
	}
	return *this;
}
    6e42:	4628      	mov	r0, r5
    6e44:	bd38      	pop	{r3, r4, r5, pc}
    6e46:	bf00      	nop

00006e48 <String::trim()>:
	}
	return *this;
}

String & String::trim(void)
{
    6e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!buffer || len == 0) return *this;
    6e4c:	6807      	ldr	r7, [r0, #0]
{
    6e4e:	4606      	mov	r6, r0
	if (!buffer || len == 0) return *this;
    6e50:	b1e7      	cbz	r7, 6e8c <String::trim()+0x44>
    6e52:	6884      	ldr	r4, [r0, #8]
    6e54:	b1d4      	cbz	r4, 6e8c <String::trim()+0x44>
    6e56:	46b8      	mov	r8, r7
    6e58:	4645      	mov	r5, r8
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    6e5a:	f818 0b01 	ldrb.w	r0, [r8], #1
    6e5e:	f002 fc89 	bl	9774 <isspace>
    6e62:	2800      	cmp	r0, #0
    6e64:	d1f8      	bne.n	6e58 <String::trim()+0x10>
	char *end = buffer + len - 1;
    6e66:	3c01      	subs	r4, #1
    6e68:	443c      	add	r4, r7
	while (isspace(*end) && end >= begin) end--;
    6e6a:	e002      	b.n	6e72 <String::trim()+0x2a>
    6e6c:	42a5      	cmp	r5, r4
    6e6e:	d805      	bhi.n	6e7c <String::trim()+0x34>
    6e70:	3c01      	subs	r4, #1
    6e72:	7820      	ldrb	r0, [r4, #0]
    6e74:	f002 fc7e 	bl	9774 <isspace>
    6e78:	2800      	cmp	r0, #0
    6e7a:	d1f7      	bne.n	6e6c <String::trim()+0x24>
	len = end + 1 - begin;
    6e7c:	1c62      	adds	r2, r4, #1
	if (begin > buffer) memcpy(buffer, begin, len);
    6e7e:	42af      	cmp	r7, r5
	len = end + 1 - begin;
    6e80:	eba2 0205 	sub.w	r2, r2, r5
    6e84:	60b2      	str	r2, [r6, #8]
	if (begin > buffer) memcpy(buffer, begin, len);
    6e86:	d304      	bcc.n	6e92 <String::trim()+0x4a>
	buffer[len] = 0;
    6e88:	2300      	movs	r3, #0
    6e8a:	54bb      	strb	r3, [r7, r2]
	return *this;
}
    6e8c:	4630      	mov	r0, r6
    6e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (begin > buffer) memcpy(buffer, begin, len);
    6e92:	4638      	mov	r0, r7
    6e94:	4629      	mov	r1, r5
    6e96:	f000 f89d 	bl	6fd4 <memcpy>
	buffer[len] = 0;
    6e9a:	6837      	ldr	r7, [r6, #0]
    6e9c:	68b2      	ldr	r2, [r6, #8]
    6e9e:	e7f3      	b.n	6e88 <String::trim()+0x40>

00006ea0 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    6ea0:	6800      	ldr	r0, [r0, #0]
    6ea2:	b108      	cbz	r0, 6ea8 <String::toInt() const+0x8>
    6ea4:	f001 be32 	b.w	8b0c <atol>
	return 0;
}
    6ea8:	4770      	bx	lr
    6eaa:	bf00      	nop

00006eac <delay>:
	if (msec == 0) return;
    6eac:	b900      	cbnz	r0, 6eb0 <delay+0x4>
    6eae:	4770      	bx	lr
{
    6eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    6eb4:	2101      	movs	r1, #1
    6eb6:	4681      	mov	r9, r0
    6eb8:	4c21      	ldr	r4, [pc, #132]	; (6f40 <delay+0x94>)
    6eba:	4d22      	ldr	r5, [pc, #136]	; (6f44 <delay+0x98>)
    6ebc:	4e22      	ldr	r6, [pc, #136]	; (6f48 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    6ebe:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    6ec2:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    6ec4:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    6ec6:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    6eca:	2b00      	cmp	r3, #0
    6ecc:	d1f7      	bne.n	6ebe <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    6ece:	491f      	ldr	r1, [pc, #124]	; (6f4c <delay+0xa0>)
    6ed0:	684b      	ldr	r3, [r1, #4]
	uint32_t usec = 1000*smc + frac;
    6ed2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    6ed6:	f8df a078 	ldr.w	sl, [pc, #120]	; 6f50 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    6eda:	1a1b      	subs	r3, r3, r0
    6edc:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    6ede:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    6ee2:	f8da 2000 	ldr.w	r2, [sl]
    6ee6:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    6eea:	455a      	cmp	r2, fp
    6eec:	bf94      	ite	ls
    6eee:	4490      	addls	r8, r2
    6ef0:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    6ef2:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    6ef6:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    6ef8:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    6efa:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    6efe:	2b00      	cmp	r3, #0
    6f00:	d1f7      	bne.n	6ef2 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    6f02:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    6f04:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    6f08:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    6f0a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    6f0e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    6f12:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    6f16:	bf94      	ite	ls
    6f18:	4462      	addls	r2, ip
    6f1a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    6f1e:	eba2 0208 	sub.w	r2, r2, r8
    6f22:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    6f26:	d306      	bcc.n	6f36 <delay+0x8a>
			if (--msec == 0) return;
    6f28:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    6f2c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    6f30:	d1df      	bne.n	6ef2 <delay+0x46>
}
    6f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    6f36:	f001 fa8b 	bl	8450 <yield>
		while ((micros() - start) >= 1000) {
    6f3a:	4904      	ldr	r1, [pc, #16]	; (6f4c <delay+0xa0>)
    6f3c:	e7d9      	b.n	6ef2 <delay+0x46>
    6f3e:	bf00      	nop
    6f40:	20015070 	.word	0x20015070
    6f44:	2001506c 	.word	0x2001506c
    6f48:	20015068 	.word	0x20015068
    6f4c:	e0001000 	.word	0xe0001000
    6f50:	20015064 	.word	0x20015064

00006f54 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    6f54:	2836      	cmp	r0, #54	; 0x36
    6f56:	d829      	bhi.n	6fac <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    6f58:	4b16      	ldr	r3, [pc, #88]	; (6fb4 <pinMode+0x60>)
    6f5a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6f5c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    6f5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    6f62:	589a      	ldr	r2, [r3, r2]
{
    6f64:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    6f66:	6853      	ldr	r3, [r2, #4]
    6f68:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6f6a:	d00e      	beq.n	6f8a <pinMode+0x36>
    6f6c:	2904      	cmp	r1, #4
    6f6e:	d00c      	beq.n	6f8a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    6f70:	ea23 0304 	bic.w	r3, r3, r4
    6f74:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    6f76:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    6f78:	b1a9      	cbz	r1, 6fa6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    6f7a:	2902      	cmp	r1, #2
    6f7c:	d017      	beq.n	6fae <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    6f7e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    6f80:	bf0c      	ite	eq
    6f82:	4a0d      	ldreq	r2, [pc, #52]	; (6fb8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    6f84:	4a0d      	ldrne	r2, [pc, #52]	; (6fbc <pinMode+0x68>)
    6f86:	601a      	str	r2, [r3, #0]
    6f88:	e007      	b.n	6f9a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    6f8a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    6f8c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    6f8e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    6f90:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    6f92:	d008      	beq.n	6fa6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    6f94:	f640 0238 	movw	r2, #2104	; 0x838
    6f98:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    6f9a:	6843      	ldr	r3, [r0, #4]
    6f9c:	2215      	movs	r2, #21
}
    6f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    6fa2:	601a      	str	r2, [r3, #0]
}
    6fa4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    6fa6:	2238      	movs	r2, #56	; 0x38
    6fa8:	601a      	str	r2, [r3, #0]
    6faa:	e7f6      	b.n	6f9a <pinMode+0x46>
    6fac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    6fae:	4a04      	ldr	r2, [pc, #16]	; (6fc0 <pinMode+0x6c>)
    6fb0:	601a      	str	r2, [r3, #0]
    6fb2:	e7f2      	b.n	6f9a <pinMode+0x46>
    6fb4:	20000b40 	.word	0x20000b40
    6fb8:	00013038 	.word	0x00013038
    6fbc:	00010038 	.word	0x00010038
    6fc0:	0001f038 	.word	0x0001f038

00006fc4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    6fc4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    6fc6:	f7f9 f881 	bl	cc <setup>
	while (1) {
		loop();
    6fca:	f7ff f823 	bl	6014 <loop>
		yield();
    6fce:	f001 fa3f 	bl	8450 <yield>
	while (1) {
    6fd2:	e7fa      	b.n	6fca <main+0x6>

00006fd4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    6fd4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    6fd6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    6fda:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    6fde:	d16d      	bne.n	70bc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    6fe0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    6fe2:	d341      	bcc.n	7068 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    6fe4:	f851 3b04 	ldr.w	r3, [r1], #4
    6fe8:	f840 3b04 	str.w	r3, [r0], #4
    6fec:	f851 3b04 	ldr.w	r3, [r1], #4
    6ff0:	f840 3b04 	str.w	r3, [r0], #4
    6ff4:	f851 3b04 	ldr.w	r3, [r1], #4
    6ff8:	f840 3b04 	str.w	r3, [r0], #4
    6ffc:	f851 3b04 	ldr.w	r3, [r1], #4
    7000:	f840 3b04 	str.w	r3, [r0], #4
    7004:	f851 3b04 	ldr.w	r3, [r1], #4
    7008:	f840 3b04 	str.w	r3, [r0], #4
    700c:	f851 3b04 	ldr.w	r3, [r1], #4
    7010:	f840 3b04 	str.w	r3, [r0], #4
    7014:	f851 3b04 	ldr.w	r3, [r1], #4
    7018:	f840 3b04 	str.w	r3, [r0], #4
    701c:	f851 3b04 	ldr.w	r3, [r1], #4
    7020:	f840 3b04 	str.w	r3, [r0], #4
    7024:	f851 3b04 	ldr.w	r3, [r1], #4
    7028:	f840 3b04 	str.w	r3, [r0], #4
    702c:	f851 3b04 	ldr.w	r3, [r1], #4
    7030:	f840 3b04 	str.w	r3, [r0], #4
    7034:	f851 3b04 	ldr.w	r3, [r1], #4
    7038:	f840 3b04 	str.w	r3, [r0], #4
    703c:	f851 3b04 	ldr.w	r3, [r1], #4
    7040:	f840 3b04 	str.w	r3, [r0], #4
    7044:	f851 3b04 	ldr.w	r3, [r1], #4
    7048:	f840 3b04 	str.w	r3, [r0], #4
    704c:	f851 3b04 	ldr.w	r3, [r1], #4
    7050:	f840 3b04 	str.w	r3, [r0], #4
    7054:	f851 3b04 	ldr.w	r3, [r1], #4
    7058:	f840 3b04 	str.w	r3, [r0], #4
    705c:	f851 3b04 	ldr.w	r3, [r1], #4
    7060:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    7064:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    7066:	d2bd      	bcs.n	6fe4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    7068:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    706a:	d311      	bcc.n	7090 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    706c:	f851 3b04 	ldr.w	r3, [r1], #4
    7070:	f840 3b04 	str.w	r3, [r0], #4
    7074:	f851 3b04 	ldr.w	r3, [r1], #4
    7078:	f840 3b04 	str.w	r3, [r0], #4
    707c:	f851 3b04 	ldr.w	r3, [r1], #4
    7080:	f840 3b04 	str.w	r3, [r0], #4
    7084:	f851 3b04 	ldr.w	r3, [r1], #4
    7088:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    708c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    708e:	d2ed      	bcs.n	706c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    7090:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    7092:	d305      	bcc.n	70a0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    7094:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    7098:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    709c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    709e:	d2f9      	bcs.n	7094 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    70a0:	3204      	adds	r2, #4
	beq	.Ldone
    70a2:	d008      	beq.n	70b6 <memcpy+0xe2>

	lsls	r2, r2, #31
    70a4:	07d2      	lsls	r2, r2, #31
	itt ne
    70a6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    70a8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    70ac:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    70b0:	d301      	bcc.n	70b6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    70b2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    70b4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    70b6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    70b8:	4770      	bx	lr
    70ba:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    70bc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    70be:	d313      	bcc.n	70e8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    70c0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    70c2:	d08d      	beq.n	6fe0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    70c4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    70c8:	d08a      	beq.n	6fe0 <memcpy+0xc>

	rsb	r3, #4
    70ca:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    70ce:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    70d0:	07db      	lsls	r3, r3, #31
	itt ne
    70d2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    70d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    70d8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    70dc:	d380      	bcc.n	6fe0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    70de:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    70e2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    70e6:	e77b      	b.n	6fe0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    70e8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    70ea:	d3d9      	bcc.n	70a0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    70ec:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    70ee:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    70f2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    70f6:	d2f9      	bcs.n	70ec <memcpy+0x118>

	ldrb	r3, [r1]
    70f8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    70fa:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    70fc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    70fe:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    7100:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    7102:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    7104:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    7106:	4770      	bx	lr

00007108 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    7108:	f101 3cff 	add.w	ip, r1, #4294967295
{
    710c:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    710e:	4666      	mov	r6, ip
	int i=0, j;
    7110:	2400      	movs	r4, #0
    7112:	e000      	b.n	7116 <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    7114:	3401      	adds	r4, #1
		digit = val % radix;
    7116:	fbb0 f5f2 	udiv	r5, r0, r2
    711a:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    711e:	2b09      	cmp	r3, #9
    7120:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    7124:	f103 0330 	add.w	r3, r3, #48	; 0x30
    7128:	fa5f fe8e 	uxtb.w	lr, lr
    712c:	bf98      	it	ls
    712e:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    7132:	4290      	cmp	r0, r2
		val /= radix;
    7134:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    7136:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    713a:	d2eb      	bcs.n	7114 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    713c:	1c63      	adds	r3, r4, #1
    713e:	2200      	movs	r2, #0
    7140:	18c8      	adds	r0, r1, r3
    7142:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    7144:	b17c      	cbz	r4, 7166 <ultoa+0x5e>
		t = buf[j];
    7146:	4662      	mov	r2, ip
    7148:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    714c:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    7150:	eba1 030c 	sub.w	r3, r1, ip
    7154:	3202      	adds	r2, #2
		buf[j] = buf[i];
    7156:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    715a:	3b01      	subs	r3, #1
    715c:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    715e:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    7160:	4423      	add	r3, r4
    7162:	429a      	cmp	r2, r3
    7164:	dbef      	blt.n	7146 <ultoa+0x3e>
	}
	return buf;
}
    7166:	4608      	mov	r0, r1
    7168:	bd70      	pop	{r4, r5, r6, pc}
    716a:	bf00      	nop

0000716c <unused_interrupt_vector>:
	__disable_irq();
    716c:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    716e:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    7172:	4c4f      	ldr	r4, [pc, #316]	; (72b0 <unused_interrupt_vector+0x144>)
    7174:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    7178:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
    717c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    7180:	4e4c      	ldr	r6, [pc, #304]	; (72b4 <unused_interrupt_vector+0x148>)
	while (p < end) {
    7182:	4d4d      	ldr	r5, [pc, #308]	; (72b8 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    7184:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    7188:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    718c:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    7190:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    7194:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    7198:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    719c:	6993      	ldr	r3, [r2, #24]
    719e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    71a2:	69d3      	ldr	r3, [r2, #28]
    71a4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    71a8:	f000 f8d0 	bl	734c <tempmonGetTemp>
    71ac:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    71b0:	f001 fc2a 	bl	8a08 <rtc_get>
	info->len = sizeof(*info) / 4;
    71b4:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    71b6:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    71ba:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    71be:	460b      	mov	r3, r1
    71c0:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    71c4:	493d      	ldr	r1, [pc, #244]	; (72bc <unused_interrupt_vector+0x150>)
		crc ^= *p++;
    71c6:	1d30      	adds	r0, r6, #4
    71c8:	405a      	eors	r2, r3
    71ca:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    71cc:	f002 0301 	and.w	r3, r2, #1
    71d0:	3c01      	subs	r4, #1
    71d2:	fb01 f303 	mul.w	r3, r1, r3
    71d6:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    71da:	d1f7      	bne.n	71cc <unused_interrupt_vector+0x60>
	while (p < end) {
    71dc:	42a8      	cmp	r0, r5
    71de:	d002      	beq.n	71e6 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
    71e0:	6873      	ldr	r3, [r6, #4]
    71e2:	4606      	mov	r6, r0
    71e4:	e7ef      	b.n	71c6 <unused_interrupt_vector+0x5a>
	info->crc = crc;
    71e6:	4b32      	ldr	r3, [pc, #200]	; (72b0 <unused_interrupt_vector+0x144>)
    71e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    71ec:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    71f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    71f4:	492f      	ldr	r1, [pc, #188]	; (72b4 <unused_interrupt_vector+0x148>)
    71f6:	4a32      	ldr	r2, [pc, #200]	; (72c0 <unused_interrupt_vector+0x154>)
    71f8:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    71fc:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    7200:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7204:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7208:	4a2e      	ldr	r2, [pc, #184]	; (72c4 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    720a:	2502      	movs	r5, #2
    720c:	482e      	ldr	r0, [pc, #184]	; (72c8 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    720e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7210:	492e      	ldr	r1, [pc, #184]	; (72cc <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    7212:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    7216:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    7218:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    721a:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    721c:	482c      	ldr	r0, [pc, #176]	; (72d0 <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    721e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    7222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7226:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    7228:	680b      	ldr	r3, [r1, #0]
    722a:	4283      	cmp	r3, r0
    722c:	d83d      	bhi.n	72aa <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
    722e:	4d26      	ldr	r5, [pc, #152]	; (72c8 <unused_interrupt_vector+0x15c>)
    7230:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    7232:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7236:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    723a:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    723c:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    723e:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    7242:	4924      	ldr	r1, [pc, #144]	; (72d4 <unused_interrupt_vector+0x168>)
    7244:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    7248:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    724c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    7250:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    7254:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    7258:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    725c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    7260:	e001      	b.n	7266 <unused_interrupt_vector+0xfa>
		usb_isr();
    7262:	f000 f965 	bl	7530 <usb_isr>
		if (PIT_TFLG0) {
    7266:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    726a:	2b00      	cmp	r3, #0
    726c:	d0f9      	beq.n	7262 <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
    726e:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    7270:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    7274:	2c4f      	cmp	r4, #79	; 0x4f
    7276:	d9f4      	bls.n	7262 <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7278:	4b17      	ldr	r3, [pc, #92]	; (72d8 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
    727a:	2002      	movs	r0, #2
    727c:	4917      	ldr	r1, [pc, #92]	; (72dc <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    727e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    7282:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    7286:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7288:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    728c:	b93b      	cbnz	r3, 729e <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
    728e:	4814      	ldr	r0, [pc, #80]	; (72e0 <unused_interrupt_vector+0x174>)
    7290:	4914      	ldr	r1, [pc, #80]	; (72e4 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7292:	4a0d      	ldr	r2, [pc, #52]	; (72c8 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
    7294:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    7296:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    729a:	2b00      	cmp	r3, #0
    729c:	d0fa      	beq.n	7294 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
    729e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    72a2:	4a11      	ldr	r2, [pc, #68]	; (72e8 <unused_interrupt_vector+0x17c>)
    72a4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    72a8:	e7fe      	b.n	72a8 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    72aa:	f001 f97d 	bl	85a8 <set_arm_clock>
    72ae:	e7be      	b.n	722e <unused_interrupt_vector+0xc2>
    72b0:	2027ff00 	.word	0x2027ff00
    72b4:	2027ff80 	.word	0x2027ff80
    72b8:	2027ffa8 	.word	0x2027ffa8
    72bc:	edb88320 	.word	0xedb88320
    72c0:	2027ffa0 	.word	0x2027ffa0
    72c4:	400fc000 	.word	0x400fc000
    72c8:	40084000 	.word	0x40084000
    72cc:	200041ac 	.word	0x200041ac
    72d0:	0bcd3d80 	.word	0x0bcd3d80
    72d4:	00249f00 	.word	0x00249f00
    72d8:	400d9000 	.word	0x400d9000
    72dc:	402e0000 	.word	0x402e0000
    72e0:	400f8000 	.word	0x400f8000
    72e4:	0bad00f1 	.word	0x0bad00f1
    72e8:	05fa0004 	.word	0x05fa0004

000072ec <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    72ec:	490a      	ldr	r1, [pc, #40]	; (7318 <_sbrk+0x2c>)
    72ee:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    72f0:	b138      	cbz	r0, 7302 <_sbrk+0x16>
{
    72f2:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    72f4:	1813      	adds	r3, r2, r0
    72f6:	4809      	ldr	r0, [pc, #36]	; (731c <_sbrk+0x30>)
    72f8:	4283      	cmp	r3, r0
    72fa:	d804      	bhi.n	7306 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    72fc:	4610      	mov	r0, r2
                __brkval = prev + incr;
    72fe:	600b      	str	r3, [r1, #0]
}
    7300:	bd08      	pop	{r3, pc}
    7302:	4610      	mov	r0, r2
    7304:	4770      	bx	lr
                        errno = ENOMEM;
    7306:	f002 fd63 	bl	9dd0 <__errno>
    730a:	230c      	movs	r3, #12
                        return (void *)-1;
    730c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    7310:	6003      	str	r3, [r0, #0]
}
    7312:	4610      	mov	r0, r2
    7314:	bd08      	pop	{r3, pc}
    7316:	bf00      	nop
    7318:	200041c4 	.word	0x200041c4
    731c:	20280000 	.word	0x20280000

00007320 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    7320:	2000      	movs	r0, #0
    7322:	4770      	bx	lr

00007324 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    7324:	f04f 30ff 	mov.w	r0, #4294967295
    7328:	4770      	bx	lr
    732a:	bf00      	nop

0000732c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    732c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    7330:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    7332:	604b      	str	r3, [r1, #4]
}
    7334:	4770      	bx	lr
    7336:	bf00      	nop

00007338 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    7338:	2001      	movs	r0, #1
    733a:	4770      	bx	lr

0000733c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    733c:	f04f 30ff 	mov.w	r0, #4294967295
    7340:	4770      	bx	lr
    7342:	bf00      	nop

00007344 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    7344:	bf30      	wfi
    7346:	e7fd      	b.n	7344 <abort>

00007348 <Panic_Temp_isr>:
  unused_interrupt_vector();
    7348:	f7ff bf10 	b.w	716c <unused_interrupt_vector>

0000734c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    734c:	4a12      	ldr	r2, [pc, #72]	; (7398 <tempmonGetTemp+0x4c>)
    734e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    7352:	075b      	lsls	r3, r3, #29
    7354:	d5fb      	bpl.n	734e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    7356:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    735a:	4810      	ldr	r0, [pc, #64]	; (739c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    735c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    7360:	490f      	ldr	r1, [pc, #60]	; (73a0 <tempmonGetTemp+0x54>)
    7362:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    7366:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    736a:	ed91 6a00 	vldr	s12, [r1]
    736e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    7372:	4a0c      	ldr	r2, [pc, #48]	; (73a4 <tempmonGetTemp+0x58>)
    7374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7378:	4b0b      	ldr	r3, [pc, #44]	; (73a8 <tempmonGetTemp+0x5c>)
    737a:	edd2 6a00 	vldr	s13, [r2]
    737e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    7382:	ed93 7a00 	vldr	s14, [r3]
    7386:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    738a:	ee67 7a86 	vmul.f32	s15, s15, s12
    738e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    7392:	ee37 0a40 	vsub.f32	s0, s14, s0
    7396:	4770      	bx	lr
    7398:	400d8100 	.word	0x400d8100
    739c:	20015054 	.word	0x20015054
    73a0:	2001505c 	.word	0x2001505c
    73a4:	20015060 	.word	0x20015060
    73a8:	20015058 	.word	0x20015058

000073ac <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    73ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    73ae:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    73b0:	b11b      	cbz	r3, 73ba <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    73b2:	6853      	ldr	r3, [r2, #4]
    73b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    73b8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    73ba:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    73bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    73be:	b33c      	cbz	r4, 7410 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    73c0:	4b1a      	ldr	r3, [pc, #104]	; (742c <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    73c2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    73c4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    73c8:	420c      	tst	r4, r1
    73ca:	d11d      	bne.n	7408 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    73cc:	4e18      	ldr	r6, [pc, #96]	; (7430 <schedule_transfer+0x84>)
    73ce:	6877      	ldr	r7, [r6, #4]
    73d0:	e004      	b.n	73dc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    73d2:	6874      	ldr	r4, [r6, #4]
    73d4:	1be4      	subs	r4, r4, r7
    73d6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    73da:	d20b      	bcs.n	73f4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    73dc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    73e0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    73e4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    73e8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    73ec:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    73f0:	0464      	lsls	r4, r4, #17
    73f2:	d5ee      	bpl.n	73d2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    73f4:	400d      	ands	r5, r1
    73f6:	d107      	bne.n	7408 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    73f8:	4c0c      	ldr	r4, [pc, #48]	; (742c <schedule_transfer+0x80>)
		endpoint->status = 0;
    73fa:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    73fe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7402:	430b      	orrs	r3, r1
    7404:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    7408:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    740a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    740c:	bcf0      	pop	{r4, r5, r6, r7}
    740e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    7410:	4d06      	ldr	r5, [pc, #24]	; (742c <schedule_transfer+0x80>)
	endpoint->status = 0;
    7412:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    7416:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    741a:	430b      	orrs	r3, r1
    741c:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    7420:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    7422:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    7424:	b662      	cpsie	i
}
    7426:	bcf0      	pop	{r4, r5, r6, r7}
    7428:	4770      	bx	lr
    742a:	bf00      	nop
    742c:	402e0000 	.word	0x402e0000
    7430:	e0001000 	.word	0xe0001000

00007434 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    7434:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    7436:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    7438:	b19d      	cbz	r5, 7462 <run_callbacks+0x2e>
    743a:	4606      	mov	r6, r0
    743c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    743e:	2400      	movs	r4, #0
    7440:	e003      	b.n	744a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    7442:	6812      	ldr	r2, [r2, #0]
		count++;
    7444:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    7446:	2a01      	cmp	r2, #1
    7448:	d00c      	beq.n	7464 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    744a:	6853      	ldr	r3, [r2, #4]
    744c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    7450:	d0f7      	beq.n	7442 <run_callbacks+0xe>
			ep->first_transfer = t;
    7452:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    7454:	b12c      	cbz	r4, 7462 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    7456:	4628      	mov	r0, r5
		ep->callback_function(first);
    7458:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    745a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    745c:	4798      	blx	r3
	while (count) {
    745e:	3c01      	subs	r4, #1
    7460:	d1f9      	bne.n	7456 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    7462:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    7464:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    7468:	e7f4      	b.n	7454 <run_callbacks+0x20>
    746a:	bf00      	nop

0000746c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    746c:	b430      	push	{r4, r5}
	if (len > 0) {
    746e:	b9d9      	cbnz	r1, 74a8 <endpoint0_transmit.constprop.0+0x3c>
    7470:	4c1f      	ldr	r4, [pc, #124]	; (74f0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    7472:	4b20      	ldr	r3, [pc, #128]	; (74f4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    7474:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7476:	4a20      	ldr	r2, [pc, #128]	; (74f8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    7478:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    747a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    747e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    7480:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    7482:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7486:	2480      	movs	r4, #128	; 0x80
    7488:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    748a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    748e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    7492:	481a      	ldr	r0, [pc, #104]	; (74fc <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    7494:	432b      	orrs	r3, r5
    7496:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    749a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    749c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    74a0:	2b00      	cmp	r3, #0
    74a2:	d1fb      	bne.n	749c <endpoint0_transmit.constprop.0+0x30>
}
    74a4:	bc30      	pop	{r4, r5}
    74a6:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    74a8:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    74aa:	4b15      	ldr	r3, [pc, #84]	; (7500 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    74ac:	4c10      	ldr	r4, [pc, #64]	; (74f0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    74ae:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    74b0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    74b4:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    74b6:	4a10      	ldr	r2, [pc, #64]	; (74f8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    74b8:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    74ba:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    74be:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    74c0:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    74c2:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    74c6:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    74c8:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    74ca:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    74ce:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    74d2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    74d4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    74d6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    74d8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    74da:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    74de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    74e2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    74e6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    74ea:	2b00      	cmp	r3, #0
    74ec:	d1fb      	bne.n	74e6 <endpoint0_transmit.constprop.0+0x7a>
    74ee:	e7c0      	b.n	7472 <endpoint0_transmit.constprop.0+0x6>
    74f0:	20000000 	.word	0x20000000
    74f4:	20004ac0 	.word	0x20004ac0
    74f8:	402e0000 	.word	0x402e0000
    74fc:	20004fd4 	.word	0x20004fd4
    7500:	20004ae0 	.word	0x20004ae0

00007504 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    7504:	4908      	ldr	r1, [pc, #32]	; (7528 <usb_stop_sof_interrupts+0x24>)
    7506:	2201      	movs	r2, #1
    7508:	780b      	ldrb	r3, [r1, #0]
    750a:	fa02 f000 	lsl.w	r0, r2, r0
    750e:	ea23 0000 	bic.w	r0, r3, r0
    7512:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    7514:	b930      	cbnz	r0, 7524 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    7516:	4a05      	ldr	r2, [pc, #20]	; (752c <usb_stop_sof_interrupts+0x28>)
    7518:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    751c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7520:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    7524:	4770      	bx	lr
    7526:	bf00      	nop
    7528:	200150aa 	.word	0x200150aa
    752c:	402e0000 	.word	0x402e0000

00007530 <usb_isr>:
{
    7530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    7534:	4c97      	ldr	r4, [pc, #604]	; (7794 <usb_isr+0x264>)
{
    7536:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    7538:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    753c:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    753e:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    7542:	d553      	bpl.n	75ec <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    7544:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    7548:	2a00      	cmp	r2, #0
    754a:	d04a      	beq.n	75e2 <usb_isr+0xb2>
    754c:	4e92      	ldr	r6, [pc, #584]	; (7798 <usb_isr+0x268>)
    754e:	f8df a260 	ldr.w	sl, [pc, #608]	; 77b0 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    7552:	f8df 9274 	ldr.w	r9, [pc, #628]	; 77c8 <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    7556:	f8df b274 	ldr.w	fp, [pc, #628]	; 77cc <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    755a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 77d0 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    755e:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    7562:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    7566:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    756a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    756e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    7572:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7576:	049d      	lsls	r5, r3, #18
    7578:	d5f5      	bpl.n	7566 <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    757a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    757e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    7582:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    7586:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    758a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    758e:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    7592:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    7596:	d1fa      	bne.n	758e <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    7598:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    759a:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    759c:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    75a0:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    75a4:	f000 81cf 	beq.w	7946 <usb_isr+0x416>
    75a8:	f200 80db 	bhi.w	7762 <usb_isr+0x232>
    75ac:	f240 3102 	movw	r1, #770	; 0x302
    75b0:	428b      	cmp	r3, r1
    75b2:	f000 81e7 	beq.w	7984 <usb_isr+0x454>
    75b6:	f200 809a 	bhi.w	76ee <usb_isr+0x1be>
    75ba:	2b82      	cmp	r3, #130	; 0x82
    75bc:	f000 81cb 	beq.w	7956 <usb_isr+0x426>
    75c0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    75c4:	f040 808a 	bne.w	76dc <usb_isr+0x1ac>
		if (endpoint > 7) break;
    75c8:	f010 0f78 	tst.w	r0, #120	; 0x78
    75cc:	b283      	uxth	r3, r0
    75ce:	f000 8203 	beq.w	79d8 <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    75d2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    75d6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    75da:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    75de:	2a00      	cmp	r2, #0
    75e0:	d1bd      	bne.n	755e <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    75e2:	4a6c      	ldr	r2, [pc, #432]	; (7794 <usb_isr+0x264>)
    75e4:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    75e8:	2b00      	cmp	r3, #0
    75ea:	d142      	bne.n	7672 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    75ec:	067e      	lsls	r6, r7, #25
    75ee:	d516      	bpl.n	761e <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    75f0:	4b68      	ldr	r3, [pc, #416]	; (7794 <usb_isr+0x264>)
    75f2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    75f6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    75fa:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    75fe:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    7602:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    7606:	2c00      	cmp	r4, #0
    7608:	d1fb      	bne.n	7602 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    760a:	f04f 32ff 	mov.w	r2, #4294967295
    760e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    7612:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    7616:	f000 fd29 	bl	806c <usb_serial_reset>
		endpointN_notify_mask = 0;
    761a:	4b60      	ldr	r3, [pc, #384]	; (779c <usb_isr+0x26c>)
    761c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    761e:	01fc      	lsls	r4, r7, #7
    7620:	d503      	bpl.n	762a <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    7622:	4b5f      	ldr	r3, [pc, #380]	; (77a0 <usb_isr+0x270>)
    7624:	681b      	ldr	r3, [r3, #0]
    7626:	b103      	cbz	r3, 762a <usb_isr+0xfa>
    7628:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    762a:	01b8      	lsls	r0, r7, #6
    762c:	d503      	bpl.n	7636 <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    762e:	4b5d      	ldr	r3, [pc, #372]	; (77a4 <usb_isr+0x274>)
    7630:	681b      	ldr	r3, [r3, #0]
    7632:	b103      	cbz	r3, 7636 <usb_isr+0x106>
    7634:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    7636:	0779      	lsls	r1, r7, #29
    7638:	d508      	bpl.n	764c <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    763a:	4b56      	ldr	r3, [pc, #344]	; (7794 <usb_isr+0x264>)
    763c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    7640:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    7644:	d047      	beq.n	76d6 <usb_isr+0x1a6>
			usb_high_speed = 1;
    7646:	4b58      	ldr	r3, [pc, #352]	; (77a8 <usb_isr+0x278>)
    7648:	2201      	movs	r2, #1
    764a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    764c:	4b51      	ldr	r3, [pc, #324]	; (7794 <usb_isr+0x264>)
    764e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    7652:	061a      	lsls	r2, r3, #24
    7654:	d50a      	bpl.n	766c <usb_isr+0x13c>
    7656:	063b      	lsls	r3, r7, #24
    7658:	d508      	bpl.n	766c <usb_isr+0x13c>
		if (usb_reboot_timer) {
    765a:	4a54      	ldr	r2, [pc, #336]	; (77ac <usb_isr+0x27c>)
    765c:	7813      	ldrb	r3, [r2, #0]
    765e:	b12b      	cbz	r3, 766c <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    7660:	3b01      	subs	r3, #1
    7662:	b2db      	uxtb	r3, r3
    7664:	7013      	strb	r3, [r2, #0]
    7666:	2b00      	cmp	r3, #0
    7668:	f000 8272 	beq.w	7b50 <usb_isr+0x620>
}
    766c:	b003      	add	sp, #12
    766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    7672:	494f      	ldr	r1, [pc, #316]	; (77b0 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    7674:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    7678:	6808      	ldr	r0, [r1, #0]
    767a:	4203      	tst	r3, r0
    767c:	f040 81d1 	bne.w	7a22 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    7680:	4a46      	ldr	r2, [pc, #280]	; (779c <usb_isr+0x26c>)
    7682:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    7684:	401c      	ands	r4, r3
    7686:	d0b1      	beq.n	75ec <usb_isr+0xbc>
				while (tx) {
    7688:	ea5f 4814 	movs.w	r8, r4, lsr #16
    768c:	d010      	beq.n	76b0 <usb_isr+0x180>
    768e:	4e42      	ldr	r6, [pc, #264]	; (7798 <usb_isr+0x268>)
					tx &= ~(1<<p);
    7690:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    7694:	fa98 f5a8 	rbit	r5, r8
    7698:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    769c:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    76a0:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    76a4:	3040      	adds	r0, #64	; 0x40
    76a6:	f7ff fec5 	bl	7434 <run_callbacks>
				while (tx) {
    76aa:	ea38 0805 	bics.w	r8, r8, r5
    76ae:	d1f1      	bne.n	7694 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    76b0:	b2a4      	uxth	r4, r4
				while(rx) {
    76b2:	2c00      	cmp	r4, #0
    76b4:	d09a      	beq.n	75ec <usb_isr+0xbc>
    76b6:	4e38      	ldr	r6, [pc, #224]	; (7798 <usb_isr+0x268>)
					rx &= ~(1<<p);
    76b8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    76bc:	fa94 f5a4 	rbit	r5, r4
    76c0:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    76c4:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    76c8:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    76cc:	f7ff feb2 	bl	7434 <run_callbacks>
				while(rx) {
    76d0:	43ac      	bics	r4, r5
    76d2:	d1f3      	bne.n	76bc <usb_isr+0x18c>
    76d4:	e78a      	b.n	75ec <usb_isr+0xbc>
			usb_high_speed = 0;
    76d6:	4a34      	ldr	r2, [pc, #208]	; (77a8 <usb_isr+0x278>)
    76d8:	7013      	strb	r3, [r2, #0]
    76da:	e7b7      	b.n	764c <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    76dc:	2b80      	cmp	r3, #128	; 0x80
    76de:	f47f af78 	bne.w	75d2 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    76e2:	4834      	ldr	r0, [pc, #208]	; (77b4 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    76e4:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    76e6:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    76e8:	f7ff fec0 	bl	746c <endpoint0_transmit.constprop.0>
		return;
    76ec:	e775      	b.n	75da <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    76ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    76f2:	f000 810b 	beq.w	790c <usb_isr+0x3dc>
    76f6:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    76fa:	2b01      	cmp	r3, #1
    76fc:	f63f af69 	bhi.w	75d2 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    7700:	4b2d      	ldr	r3, [pc, #180]	; (77b8 <usb_isr+0x288>)
    7702:	685d      	ldr	r5, [r3, #4]
    7704:	2d00      	cmp	r5, #0
    7706:	f43f af64 	beq.w	75d2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    770a:	fa1f fc8c 	uxth.w	ip, ip
    770e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    7712:	e004      	b.n	771e <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    7714:	691d      	ldr	r5, [r3, #16]
    7716:	330c      	adds	r3, #12
    7718:	2d00      	cmp	r5, #0
    771a:	f43f af5a 	beq.w	75d2 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    771e:	881a      	ldrh	r2, [r3, #0]
    7720:	4572      	cmp	r2, lr
    7722:	d1f7      	bne.n	7714 <usb_isr+0x1e4>
    7724:	885a      	ldrh	r2, [r3, #2]
    7726:	4562      	cmp	r2, ip
    7728:	d1f4      	bne.n	7714 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    772a:	ea4f 221e 	mov.w	r2, lr, lsr #8
    772e:	2a03      	cmp	r2, #3
    7730:	f000 81a5 	beq.w	7a7e <usb_isr+0x54e>
					datalen = list->length;
    7734:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    7736:	0c00      	lsrs	r0, r0, #16
    7738:	4282      	cmp	r2, r0
    773a:	bf28      	it	cs
    773c:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    773e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    7742:	f040 81a1 	bne.w	7a88 <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    7746:	4b18      	ldr	r3, [pc, #96]	; (77a8 <usb_isr+0x278>)
    7748:	491c      	ldr	r1, [pc, #112]	; (77bc <usb_isr+0x28c>)
    774a:	7818      	ldrb	r0, [r3, #0]
    774c:	4b1c      	ldr	r3, [pc, #112]	; (77c0 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    774e:	9201      	str	r2, [sp, #4]
    7750:	2800      	cmp	r0, #0
    7752:	bf18      	it	ne
    7754:	4619      	movne	r1, r3
    7756:	481b      	ldr	r0, [pc, #108]	; (77c4 <usb_isr+0x294>)
    7758:	f7ff fc3c 	bl	6fd4 <memcpy>
    775c:	4d19      	ldr	r5, [pc, #100]	; (77c4 <usb_isr+0x294>)
    775e:	9a01      	ldr	r2, [sp, #4]
    7760:	e1e1      	b.n	7b26 <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    7762:	f242 2121 	movw	r1, #8737	; 0x2221
    7766:	428b      	cmp	r3, r1
    7768:	d07c      	beq.n	7864 <usb_isr+0x334>
    776a:	d933      	bls.n	77d4 <usb_isr+0x2a4>
    776c:	f242 3121 	movw	r1, #8993	; 0x2321
    7770:	428b      	cmp	r3, r1
    7772:	f000 8081 	beq.w	7878 <usb_isr+0x348>
    7776:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    777a:	428b      	cmp	r3, r1
    777c:	f47f af29 	bne.w	75d2 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    7780:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    7784:	b283      	uxth	r3, r0
    7786:	f47f af24 	bne.w	75d2 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    778a:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    778e:	f363 0c0f 	bfi	ip, r3, #0, #16
    7792:	e7b5      	b.n	7700 <usb_isr+0x1d0>
    7794:	402e0000 	.word	0x402e0000
    7798:	20000000 	.word	0x20000000
    779c:	20004fd8 	.word	0x20004fd8
    77a0:	20015080 	.word	0x20015080
    77a4:	20015084 	.word	0x20015084
    77a8:	200150b0 	.word	0x200150b0
    77ac:	200150b1 	.word	0x200150b1
    77b0:	20004fd4 	.word	0x20004fd4
    77b4:	20015018 	.word	0x20015018
    77b8:	20000fe0 	.word	0x20000fe0
    77bc:	60001e84 	.word	0x60001e84
    77c0:	60001ee8 	.word	0x60001ee8
    77c4:	20200000 	.word	0x20200000
    77c8:	20004fcc 	.word	0x20004fcc
    77cc:	b8c6cf5d 	.word	0xb8c6cf5d
    77d0:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    77d4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    77d8:	d066      	beq.n	78a8 <usb_isr+0x378>
    77da:	f242 0121 	movw	r1, #8225	; 0x2021
    77de:	428b      	cmp	r3, r1
    77e0:	f47f aef7 	bne.w	75d2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    77e4:	0c03      	lsrs	r3, r0, #16
    77e6:	2b07      	cmp	r3, #7
    77e8:	f47f aef3 	bne.w	75d2 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    77ec:	4bb2      	ldr	r3, [pc, #712]	; (7ab8 <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    77ee:	49b3      	ldr	r1, [pc, #716]	; (7abc <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    77f0:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    77f2:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    77f4:	49b2      	ldr	r1, [pc, #712]	; (7ac0 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    77f6:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    77f8:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    77fc:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    7800:	2201      	movs	r2, #1
    7802:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    7804:	4aaf      	ldr	r2, [pc, #700]	; (7ac4 <usb_isr+0x594>)
    7806:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    7808:	4aaf      	ldr	r2, [pc, #700]	; (7ac8 <usb_isr+0x598>)
    780a:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    780c:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    7810:	f041 0101 	orr.w	r1, r1, #1
    7814:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7818:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    781c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    7820:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    7822:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    7824:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7828:	2b00      	cmp	r3, #0
    782a:	d1fb      	bne.n	7824 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    782c:	4aa7      	ldr	r2, [pc, #668]	; (7acc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    782e:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    7830:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    7832:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7834:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    7836:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7838:	f248 0380 	movw	r3, #32896	; 0x8080
    783c:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    783e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    7842:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7846:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    784a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    784e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    7852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7856:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    785a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    785e:	2b00      	cmp	r3, #0
    7860:	d1fb      	bne.n	785a <usb_isr+0x32a>
    7862:	e6ba      	b.n	75da <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    7864:	b280      	uxth	r0, r0
    7866:	b938      	cbnz	r0, 7878 <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    7868:	4b99      	ldr	r3, [pc, #612]	; (7ad0 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    786a:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    786e:	6819      	ldr	r1, [r3, #0]
    7870:	4b98      	ldr	r3, [pc, #608]	; (7ad4 <usb_isr+0x5a4>)
    7872:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    7874:	4b98      	ldr	r3, [pc, #608]	; (7ad8 <usb_isr+0x5a8>)
    7876:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    7878:	4b94      	ldr	r3, [pc, #592]	; (7acc <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    787a:	2200      	movs	r2, #0
    787c:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    787e:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    7880:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7882:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    7884:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7886:	2280      	movs	r2, #128	; 0x80
    7888:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    788a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    788e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7892:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    789a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    789e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    78a2:	2b00      	cmp	r3, #0
    78a4:	d1fb      	bne.n	789e <usb_isr+0x36e>
    78a6:	e698      	b.n	75da <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    78a8:	f3c2 4207 	ubfx	r2, r2, #16, #8
    78ac:	4b8b      	ldr	r3, [pc, #556]	; (7adc <usb_isr+0x5ac>)
    78ae:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    78b0:	4b8b      	ldr	r3, [pc, #556]	; (7ae0 <usb_isr+0x5b0>)
    78b2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    78b6:	4b8b      	ldr	r3, [pc, #556]	; (7ae4 <usb_isr+0x5b4>)
    78b8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    78bc:	4b8a      	ldr	r3, [pc, #552]	; (7ae8 <usb_isr+0x5b8>)
    78be:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    78c2:	f000 fbd5 	bl	8070 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    78c6:	2280      	movs	r2, #128	; 0x80
    78c8:	4629      	mov	r1, r5
    78ca:	4888      	ldr	r0, [pc, #544]	; (7aec <usb_isr+0x5bc>)
    78cc:	f002 f92a 	bl	9b24 <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    78d0:	4b87      	ldr	r3, [pc, #540]	; (7af0 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    78d2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    78d4:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    78d8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    78dc:	4b7b      	ldr	r3, [pc, #492]	; (7acc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    78de:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    78e0:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    78e2:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    78e4:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    78e6:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    78e8:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    78ea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    78ee:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    78f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    78f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    78fa:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    78fe:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    7902:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7906:	2b00      	cmp	r3, #0
    7908:	d1fb      	bne.n	7902 <usb_isr+0x3d2>
    790a:	e666      	b.n	75da <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    790c:	4b6f      	ldr	r3, [pc, #444]	; (7acc <usb_isr+0x59c>)
    790e:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    7910:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    7912:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7914:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    7916:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    7918:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    791a:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    791c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    7920:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7924:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    792c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    7930:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7934:	2b00      	cmp	r3, #0
    7936:	d1fb      	bne.n	7930 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    7938:	0c13      	lsrs	r3, r2, #16
    793a:	065b      	lsls	r3, r3, #25
    793c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    7940:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    7944:	e649      	b.n	75da <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    7946:	4b65      	ldr	r3, [pc, #404]	; (7adc <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    7948:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    794a:	486a      	ldr	r0, [pc, #424]	; (7af4 <usb_isr+0x5c4>)
    794c:	781b      	ldrb	r3, [r3, #0]
    794e:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    7950:	f7ff fd8c 	bl	746c <endpoint0_transmit.constprop.0>
		return;
    7954:	e641      	b.n	75da <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    7956:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    7958:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    795c:	f47f ae39 	bne.w	75d2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    7960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    7964:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    7968:	4a62      	ldr	r2, [pc, #392]	; (7af4 <usb_isr+0x5c4>)
    796a:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    796c:	0618      	lsls	r0, r3, #24
    796e:	f100 809e 	bmi.w	7aae <usb_isr+0x57e>
    7972:	07cb      	lsls	r3, r1, #31
    7974:	d501      	bpl.n	797a <usb_isr+0x44a>
			reply_buffer[0] = 1;
    7976:	2301      	movs	r3, #1
    7978:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    797a:	2102      	movs	r1, #2
    797c:	485d      	ldr	r0, [pc, #372]	; (7af4 <usb_isr+0x5c4>)
    797e:	f7ff fd75 	bl	746c <endpoint0_transmit.constprop.0>
		return;
    7982:	e62a      	b.n	75da <usb_isr+0xaa>
		if (endpoint > 7) break;
    7984:	f010 0f78 	tst.w	r0, #120	; 0x78
    7988:	b283      	uxth	r3, r0
    798a:	f47f ae22 	bne.w	75d2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    798e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    7992:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    7996:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    799a:	bf14      	ite	ne
    799c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    79a0:	f043 0301 	orreq.w	r3, r3, #1
    79a4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    79a8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    79aa:	4b48      	ldr	r3, [pc, #288]	; (7acc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    79ac:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    79ae:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    79b0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    79b2:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    79b4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    79b6:	2280      	movs	r2, #128	; 0x80
    79b8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    79ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    79be:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    79c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    79c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    79ca:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    79ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    79d2:	2b00      	cmp	r3, #0
    79d4:	d1fb      	bne.n	79ce <usb_isr+0x49e>
    79d6:	e600      	b.n	75da <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    79d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    79dc:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    79e0:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    79e4:	bf14      	ite	ne
    79e6:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    79ea:	f023 0301 	biceq.w	r3, r3, #1
    79ee:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    79f2:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    79f4:	4b35      	ldr	r3, [pc, #212]	; (7acc <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    79f6:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    79f8:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    79fa:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    79fc:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    79fe:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    7a00:	2280      	movs	r2, #128	; 0x80
    7a02:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    7a04:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    7a08:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    7a0c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7a14:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    7a18:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    7a1c:	2b00      	cmp	r3, #0
    7a1e:	d1fb      	bne.n	7a18 <usb_isr+0x4e8>
    7a20:	e5db      	b.n	75da <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    7a22:	2000      	movs	r0, #0
    7a24:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    7a26:	4926      	ldr	r1, [pc, #152]	; (7ac0 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7a28:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    7a2a:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    7a2c:	f242 0121 	movw	r1, #8225	; 0x2021
    7a30:	428c      	cmp	r4, r1
    7a32:	f47f ae25 	bne.w	7680 <usb_isr+0x150>
    7a36:	b280      	uxth	r0, r0
    7a38:	2800      	cmp	r0, #0
    7a3a:	f47f ae21 	bne.w	7680 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    7a3e:	492e      	ldr	r1, [pc, #184]	; (7af8 <usb_isr+0x5c8>)
    7a40:	4c2e      	ldr	r4, [pc, #184]	; (7afc <usb_isr+0x5cc>)
    7a42:	c903      	ldmia	r1, {r0, r1}
    7a44:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    7a46:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    7a48:	ea4f 4111 	mov.w	r1, r1, lsr #16
    7a4c:	6020      	str	r0, [r4, #0]
    7a4e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    7a50:	f47f ae16 	bne.w	7680 <usb_isr+0x150>
	__disable_irq();
    7a54:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    7a56:	482a      	ldr	r0, [pc, #168]	; (7b00 <usb_isr+0x5d0>)
    7a58:	7801      	ldrb	r1, [r0, #0]
    7a5a:	f041 0108 	orr.w	r1, r1, #8
    7a5e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    7a60:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    7a64:	060d      	lsls	r5, r1, #24
    7a66:	d405      	bmi.n	7a74 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    7a68:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    7a6a:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    7a6c:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    7a70:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    7a74:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    7a76:	4a23      	ldr	r2, [pc, #140]	; (7b04 <usb_isr+0x5d4>)
    7a78:	2150      	movs	r1, #80	; 0x50
    7a7a:	7011      	strb	r1, [r2, #0]
    7a7c:	e600      	b.n	7680 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    7a7e:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    7a80:	782a      	ldrb	r2, [r5, #0]
    7a82:	4282      	cmp	r2, r0
    7a84:	bf28      	it	cs
    7a86:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    7a88:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    7a8c:	d144      	bne.n	7b18 <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    7a8e:	4b1e      	ldr	r3, [pc, #120]	; (7b08 <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    7a90:	4d1e      	ldr	r5, [pc, #120]	; (7b0c <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    7a92:	7818      	ldrb	r0, [r3, #0]
    7a94:	491e      	ldr	r1, [pc, #120]	; (7b10 <usb_isr+0x5e0>)
    7a96:	4b1f      	ldr	r3, [pc, #124]	; (7b14 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    7a98:	9201      	str	r2, [sp, #4]
    7a9a:	2800      	cmp	r0, #0
    7a9c:	bf18      	it	ne
    7a9e:	4619      	movne	r1, r3
    7aa0:	4628      	mov	r0, r5
    7aa2:	f7ff fa97 	bl	6fd4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    7aa6:	2307      	movs	r3, #7
    7aa8:	706b      	strb	r3, [r5, #1]
    7aaa:	9a01      	ldr	r2, [sp, #4]
    7aac:	e03b      	b.n	7b26 <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    7aae:	03c9      	lsls	r1, r1, #15
    7ab0:	f53f af61 	bmi.w	7976 <usb_isr+0x446>
    7ab4:	e761      	b.n	797a <usb_isr+0x44a>
    7ab6:	bf00      	nop
    7ab8:	20004ae0 	.word	0x20004ae0
    7abc:	20005fcc 	.word	0x20005fcc
    7ac0:	20004c80 	.word	0x20004c80
    7ac4:	00070080 	.word	0x00070080
    7ac8:	20006fcc 	.word	0x20006fcc
    7acc:	20004ac0 	.word	0x20004ac0
    7ad0:	2001506c 	.word	0x2001506c
    7ad4:	2001507c 	.word	0x2001507c
    7ad8:	200150ae 	.word	0x200150ae
    7adc:	200150af 	.word	0x200150af
    7ae0:	00cc0002 	.word	0x00cc0002
    7ae4:	000200c8 	.word	0x000200c8
    7ae8:	00c80002 	.word	0x00c80002
    7aec:	20000080 	.word	0x20000080
    7af0:	74d59319 	.word	0x74d59319
    7af4:	20015018 	.word	0x20015018
    7af8:	20004fcc 	.word	0x20004fcc
    7afc:	20015074 	.word	0x20015074
    7b00:	200150aa 	.word	0x200150aa
    7b04:	200150b1 	.word	0x200150b1
    7b08:	200150b0 	.word	0x200150b0
    7b0c:	20200000 	.word	0x20200000
    7b10:	60001ee8 	.word	0x60001ee8
    7b14:	60001e84 	.word	0x60001e84
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    7b18:	4629      	mov	r1, r5
    7b1a:	4d10      	ldr	r5, [pc, #64]	; (7b5c <usb_isr+0x62c>)
    7b1c:	9201      	str	r2, [sp, #4]
    7b1e:	4628      	mov	r0, r5
    7b20:	f7ff fa58 	bl	6fd4 <memcpy>
    7b24:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    7b26:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    7b2a:	4415      	add	r5, r2
	asm("dsb");
    7b2c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7b30:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7b34:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    7b38:	3320      	adds	r3, #32
	} while (location < end_addr);
    7b3a:	429d      	cmp	r5, r3
    7b3c:	d8fa      	bhi.n	7b34 <usb_isr+0x604>
	asm("dsb");
    7b3e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7b42:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    7b46:	4805      	ldr	r0, [pc, #20]	; (7b5c <usb_isr+0x62c>)
    7b48:	4611      	mov	r1, r2
    7b4a:	f7ff fc8f 	bl	746c <endpoint0_transmit.constprop.0>
				return;
    7b4e:	e544      	b.n	75da <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    7b50:	2003      	movs	r0, #3
    7b52:	f7ff fcd7 	bl	7504 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    7b56:	f007 fcf3 	bl	f540 <___reboot_Teensyduino__veneer>
    7b5a:	bf00      	nop
    7b5c:	20200000 	.word	0x20200000

00007b60 <usb_config_rx>:
{
    7b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b64:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7b66:	1e83      	subs	r3, r0, #2
    7b68:	2b02      	cmp	r3, #2
    7b6a:	d901      	bls.n	7b70 <usb_config_rx+0x10>
}
    7b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    7b70:	f8df 904c 	ldr.w	r9, [pc, #76]	; 7bc0 <usb_config_rx+0x60>
    7b74:	4615      	mov	r5, r2
    7b76:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    7b78:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    7b7a:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    7b7e:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    7b80:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    7b84:	2100      	movs	r1, #0
    7b86:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7b8a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    7b8c:	f001 ffca 	bl	9b24 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7b90:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    7b94:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7b96:	0952      	lsrs	r2, r2, #5
    7b98:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    7b9c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    7ba0:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    7ba4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    7ba8:	2f00      	cmp	r7, #0
    7baa:	d0df      	beq.n	7b6c <usb_config_rx+0xc>
    7bac:	4a03      	ldr	r2, [pc, #12]	; (7bbc <usb_config_rx+0x5c>)
    7bae:	40b3      	lsls	r3, r6
    7bb0:	6811      	ldr	r1, [r2, #0]
    7bb2:	430b      	orrs	r3, r1
    7bb4:	6013      	str	r3, [r2, #0]
}
    7bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7bba:	bf00      	nop
    7bbc:	20004fd8 	.word	0x20004fd8
    7bc0:	20000000 	.word	0x20000000

00007bc4 <usb_config_tx>:
{
    7bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7bc8:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    7bca:	1e81      	subs	r1, r0, #2
    7bcc:	2902      	cmp	r1, #2
    7bce:	d901      	bls.n	7bd4 <usb_config_tx+0x10>
}
    7bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    7bd4:	01c7      	lsls	r7, r0, #7
    7bd6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 7c24 <usb_config_tx+0x60>
    7bda:	4692      	mov	sl, r2
    7bdc:	4604      	mov	r4, r0
    7bde:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    7be0:	223c      	movs	r2, #60	; 0x3c
    7be2:	2100      	movs	r1, #0
    7be4:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    7be6:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7bea:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    7bec:	f108 0004 	add.w	r0, r8, #4
    7bf0:	f001 ff98 	bl	9b24 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    7bf4:	faba f28a 	clz	r2, sl
    7bf8:	0952      	lsrs	r2, r2, #5
    7bfa:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    7bfe:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    7c02:	2201      	movs	r2, #1
	qh->callback_function = callback;
    7c04:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    7c08:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    7c0c:	2e00      	cmp	r6, #0
    7c0e:	d0df      	beq.n	7bd0 <usb_config_tx+0xc>
    7c10:	4b03      	ldr	r3, [pc, #12]	; (7c20 <usb_config_tx+0x5c>)
    7c12:	3410      	adds	r4, #16
    7c14:	6819      	ldr	r1, [r3, #0]
    7c16:	40a2      	lsls	r2, r4
    7c18:	430a      	orrs	r2, r1
    7c1a:	601a      	str	r2, [r3, #0]
}
    7c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7c20:	20004fd8 	.word	0x20004fd8
    7c24:	20000000 	.word	0x20000000

00007c28 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    7c28:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    7c2a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    7c2c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    7c2e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    7c32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    7c36:	b410      	push	{r4}
	transfer->next = 1;
    7c38:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    7c3a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    7c3c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    7c40:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    7c42:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    7c46:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    7c4a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    7c4c:	6181      	str	r1, [r0, #24]
}
    7c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    7c52:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    7c56:	4770      	bx	lr

00007c58 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7c58:	1e83      	subs	r3, r0, #2
{
    7c5a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7c5c:	2b02      	cmp	r3, #2
    7c5e:	d900      	bls.n	7c62 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    7c60:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    7c62:	4b06      	ldr	r3, [pc, #24]	; (7c7c <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    7c64:	f100 0110 	add.w	r1, r0, #16
    7c68:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    7c6c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    7c70:	fa0c f101 	lsl.w	r1, ip, r1
    7c74:	3040      	adds	r0, #64	; 0x40
    7c76:	f7ff bb99 	b.w	73ac <schedule_transfer>
    7c7a:	bf00      	nop
    7c7c:	20000000 	.word	0x20000000

00007c80 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7c80:	1e83      	subs	r3, r0, #2
{
    7c82:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    7c84:	2b02      	cmp	r3, #2
    7c86:	d900      	bls.n	7c8a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    7c88:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    7c8a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    7c8c:	4b02      	ldr	r3, [pc, #8]	; (7c98 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    7c8e:	4081      	lsls	r1, r0
    7c90:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    7c94:	f7ff bb8a 	b.w	73ac <schedule_transfer>
    7c98:	20000000 	.word	0x20000000

00007c9c <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    7c9c:	6840      	ldr	r0, [r0, #4]
#endif
}
    7c9e:	4770      	bx	lr

00007ca0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    7ca0:	4a12      	ldr	r2, [pc, #72]	; (7cec <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    7ca2:	4b13      	ldr	r3, [pc, #76]	; (7cf0 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    7ca4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    7ca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    7cac:	4298      	cmp	r0, r3
{
    7cae:	b510      	push	{r4, lr}
    7cb0:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    7cb2:	d202      	bcs.n	7cba <usb_init_serialnumber+0x1a>
    7cb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7cb8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    7cba:	4c0e      	ldr	r4, [pc, #56]	; (7cf4 <usb_init_serialnumber+0x54>)
    7cbc:	a901      	add	r1, sp, #4
    7cbe:	220a      	movs	r2, #10
    7cc0:	f7ff fa22 	bl	7108 <ultoa>
	for (i=0; i<10; i++) {
    7cc4:	a901      	add	r1, sp, #4
    7cc6:	2300      	movs	r3, #0
    7cc8:	4620      	mov	r0, r4
		char c = buf[i];
    7cca:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    7cce:	3301      	adds	r3, #1
		if (!c) break;
    7cd0:	b13a      	cbz	r2, 7ce2 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    7cd2:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    7cd4:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    7cd8:	d1f7      	bne.n	7cca <usb_init_serialnumber+0x2a>
    7cda:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    7cdc:	7023      	strb	r3, [r4, #0]
}
    7cde:	b004      	add	sp, #16
    7ce0:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    7ce2:	005b      	lsls	r3, r3, #1
    7ce4:	b2db      	uxtb	r3, r3
    7ce6:	7023      	strb	r3, [r4, #0]
}
    7ce8:	b004      	add	sp, #16
    7cea:	bd10      	pop	{r4, pc}
    7cec:	401f4400 	.word	0x401f4400
    7cf0:	00989680 	.word	0x00989680
    7cf4:	200047a8 	.word	0x200047a8

00007cf8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    7cf8:	f000 bace 	b.w	8298 <usb_serial_flush_input>

00007cfc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    7cfc:	f000 bac0 	b.w	8280 <usb_serial_available>

00007d00 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    7d00:	f000 bb5c 	b.w	83bc <usb_serial_flush_output>

00007d04 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    7d04:	f000 bb32 	b.w	836c <usb_serial_write_buffer_free>

00007d08 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7d08:	4608      	mov	r0, r1
    7d0a:	4611      	mov	r1, r2
    7d0c:	f000 bb22 	b.w	8354 <usb_serial_write>

00007d10 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    7d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    7d12:	4c14      	ldr	r4, [pc, #80]	; (7d64 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    7d14:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    7d18:	4e13      	ldr	r6, [pc, #76]	; (7d68 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    7d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    7d1e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    7d22:	4f12      	ldr	r7, [pc, #72]	; (7d6c <rx_queue_transfer+0x5c>)
    7d24:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    7d28:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    7d2a:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    7d2e:	4621      	mov	r1, r4
    7d30:	883a      	ldrh	r2, [r7, #0]
    7d32:	4630      	mov	r0, r6
    7d34:	f7ff ff78 	bl	7c28 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    7d38:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    7d3a:	4423      	add	r3, r4
	asm("dsb");
    7d3c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    7d40:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    7d44:	3420      	adds	r4, #32
	} while (location < end_addr);
    7d46:	42a3      	cmp	r3, r4
    7d48:	d8fa      	bhi.n	7d40 <rx_queue_transfer+0x30>
	asm("dsb");
    7d4a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7d4e:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    7d52:	2003      	movs	r0, #3
    7d54:	4631      	mov	r1, r6
    7d56:	f7ff ff93 	bl	7c80 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    7d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    7d5e:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    7d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d64:	20200080 	.word	0x20200080
    7d68:	20004b00 	.word	0x20004b00
    7d6c:	2001508e 	.word	0x2001508e

00007d70 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    7d70:	4b24      	ldr	r3, [pc, #144]	; (7e04 <rx_event+0x94>)
{
    7d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    7d76:	881c      	ldrh	r4, [r3, #0]
    7d78:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    7d7a:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    7d7c:	f3c3 430e 	ubfx	r3, r3, #16, #15
    7d80:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    7d82:	2c00      	cmp	r4, #0
    7d84:	dd24      	ble.n	7dd0 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    7d86:	4920      	ldr	r1, [pc, #128]	; (7e08 <rx_event+0x98>)
		if (head != rx_tail) {
    7d88:	4820      	ldr	r0, [pc, #128]	; (7e0c <rx_event+0x9c>)
		uint32_t head = rx_head;
    7d8a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    7d8c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    7d8e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    7d90:	4e1f      	ldr	r6, [pc, #124]	; (7e10 <rx_event+0xa0>)
		if (head != rx_tail) {
    7d92:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    7d94:	481f      	ldr	r0, [pc, #124]	; (7e14 <rx_event+0xa4>)
		if (head != rx_tail) {
    7d96:	d007      	beq.n	7da8 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    7d98:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    7d9c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    7da0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    7da4:	4294      	cmp	r4, r2
    7da6:	d918      	bls.n	7dda <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    7da8:	3301      	adds	r3, #1
		rx_index[i] = 0;
    7daa:	2200      	movs	r2, #0
		rx_count[i] = len;
    7dac:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    7db0:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    7db2:	4e19      	ldr	r6, [pc, #100]	; (7e18 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    7db4:	bf88      	it	hi
    7db6:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    7db8:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    7dbc:	bf98      	it	ls
    7dbe:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    7dc0:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    7dc2:	4b16      	ldr	r3, [pc, #88]	; (7e1c <rx_event+0xac>)
		rx_head = head;
    7dc4:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    7dc6:	681a      	ldr	r2, [r3, #0]
    7dc8:	4414      	add	r4, r2
    7dca:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    7dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    7dd0:	4628      	mov	r0, r5
}
    7dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    7dd6:	f7ff bf9b 	b.w	7d10 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    7dda:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    7dde:	4910      	ldr	r1, [pc, #64]	; (7e20 <rx_event+0xb0>)
    7de0:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    7de2:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    7de4:	4408      	add	r0, r1
    7de6:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    7dea:	f7ff f8f3 	bl	6fd4 <memcpy>
				rx_available += len;
    7dee:	4a0b      	ldr	r2, [pc, #44]	; (7e1c <rx_event+0xac>)
				rx_queue_transfer(i);
    7df0:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    7df2:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    7df6:	6813      	ldr	r3, [r2, #0]
    7df8:	4423      	add	r3, r4
}
    7dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    7dfe:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    7e00:	f7ff bf86 	b.w	7d10 <rx_queue_transfer>
    7e04:	2001508e 	.word	0x2001508e
    7e08:	200150a8 	.word	0x200150a8
    7e0c:	200150a9 	.word	0x200150a9
    7e10:	20015028 	.word	0x20015028
    7e14:	20015048 	.word	0x20015048
    7e18:	20015038 	.word	0x20015038
    7e1c:	20015024 	.word	0x20015024
    7e20:	20200080 	.word	0x20200080

00007e24 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    7e24:	4b1d      	ldr	r3, [pc, #116]	; (7e9c <usb_serial_flush_callback+0x78>)
    7e26:	781a      	ldrb	r2, [r3, #0]
    7e28:	2a00      	cmp	r2, #0
    7e2a:	d136      	bne.n	7e9a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    7e2c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    7e30:	4a1b      	ldr	r2, [pc, #108]	; (7ea0 <usb_serial_flush_callback+0x7c>)
    7e32:	7812      	ldrb	r2, [r2, #0]
    7e34:	b38a      	cbz	r2, 7e9a <usb_serial_flush_callback+0x76>
{
    7e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    7e3a:	4d1a      	ldr	r5, [pc, #104]	; (7ea4 <usb_serial_flush_callback+0x80>)
    7e3c:	882a      	ldrh	r2, [r5, #0]
    7e3e:	b352      	cbz	r2, 7e96 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    7e40:	4e19      	ldr	r6, [pc, #100]	; (7ea8 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    7e42:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    7e46:	4f19      	ldr	r7, [pc, #100]	; (7eac <usb_serial_flush_callback+0x88>)
    7e48:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7e4a:	4c19      	ldr	r4, [pc, #100]	; (7eb0 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    7e4c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7e50:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    7e54:	4642      	mov	r2, r8
    7e56:	4638      	mov	r0, r7
    7e58:	4621      	mov	r1, r4
    7e5a:	f7ff fee5 	bl	7c28 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    7e5e:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    7e62:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    7e66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7e6a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    7e6e:	3420      	adds	r4, #32
	} while (location < end_addr);
    7e70:	42a2      	cmp	r2, r4
    7e72:	d8fa      	bhi.n	7e6a <usb_serial_flush_callback+0x46>
	asm("dsb");
    7e74:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7e78:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    7e7c:	2004      	movs	r0, #4
    7e7e:	4639      	mov	r1, r7
    7e80:	f7ff feea 	bl	7c58 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    7e84:	7833      	ldrb	r3, [r6, #0]
    7e86:	3301      	adds	r3, #1
    7e88:	b2db      	uxtb	r3, r3
    7e8a:	2b03      	cmp	r3, #3
    7e8c:	bf88      	it	hi
    7e8e:	2300      	movhi	r3, #0
    7e90:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    7e92:	2300      	movs	r3, #0
    7e94:	802b      	strh	r3, [r5, #0]
}
    7e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e9a:	4770      	bx	lr
    7e9c:	200150ad 	.word	0x200150ad
    7ea0:	200150af 	.word	0x200150af
    7ea4:	20015090 	.word	0x20015090
    7ea8:	200150ac 	.word	0x200150ac
    7eac:	20004c00 	.word	0x20004c00
    7eb0:	20201080 	.word	0x20201080

00007eb4 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    7eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7eb8:	b085      	sub	sp, #20
	while (size > 0) {
    7eba:	e9cd 1001 	strd	r1, r0, [sp, #4]
    7ebe:	2900      	cmp	r1, #0
    7ec0:	f000 80bf 	beq.w	8042 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    7ec4:	2300      	movs	r3, #0
    7ec6:	4c60      	ldr	r4, [pc, #384]	; (8048 <usb_serial_write.part.0+0x194>)
    7ec8:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8064 <usb_serial_write.part.0+0x1b0>
    7ecc:	f8df a198 	ldr.w	sl, [pc, #408]	; 8068 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    7ed0:	4f5e      	ldr	r7, [pc, #376]	; (804c <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    7ed2:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    7ed4:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    7ed6:	4a5e      	ldr	r2, [pc, #376]	; (8050 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    7ed8:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    7eda:	4b5e      	ldr	r3, [pc, #376]	; (8054 <usb_serial_write.part.0+0x1a0>)
    7edc:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    7ede:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    7ee2:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	f040 80a7 	bne.w	803a <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    7eec:	461e      	mov	r6, r3
		int waiting=0;
    7eee:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    7ef0:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    7ef2:	4648      	mov	r0, r9
    7ef4:	f7ff fed2 	bl	7c9c <usb_transfer_status>
			if (!(status & 0x80)) {
    7ef8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    7efc:	f000 808c 	beq.w	8018 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    7f00:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    7f04:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    7f08:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    7f0c:	b905      	cbnz	r5, 7f10 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    7f0e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    7f10:	2b00      	cmp	r3, #0
    7f12:	d17d      	bne.n	8010 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    7f14:	683b      	ldr	r3, [r7, #0]
    7f16:	1b9b      	subs	r3, r3, r6
    7f18:	2b78      	cmp	r3, #120	; 0x78
    7f1a:	f200 8087 	bhi.w	802c <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    7f1e:	4b4e      	ldr	r3, [pc, #312]	; (8058 <usb_serial_write.part.0+0x1a4>)
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	2b00      	cmp	r3, #0
    7f24:	d074      	beq.n	8010 <usb_serial_write.part.0+0x15c>
			yield();
    7f26:	f000 fa93 	bl	8450 <yield>
			tx_noautoflush = 1;
    7f2a:	2201      	movs	r2, #1
		while (!tx_available) {
    7f2c:	f8b8 3000 	ldrh.w	r3, [r8]
    7f30:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    7f32:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    7f34:	2b00      	cmp	r3, #0
    7f36:	d0dc      	beq.n	7ef2 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    7f38:	4a46      	ldr	r2, [pc, #280]	; (8054 <usb_serial_write.part.0+0x1a0>)
    7f3a:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    7f3e:	7811      	ldrb	r1, [r2, #0]
    7f40:	461a      	mov	r2, r3
    7f42:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    7f46:	4d45      	ldr	r5, [pc, #276]	; (805c <usb_serial_write.part.0+0x1a8>)
    7f48:	02c9      	lsls	r1, r1, #11
    7f4a:	4428      	add	r0, r5
		if (size >= tx_available) {
    7f4c:	9d01      	ldr	r5, [sp, #4]
    7f4e:	4295      	cmp	r5, r2
    7f50:	d217      	bcs.n	7f82 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    7f52:	9303      	str	r3, [sp, #12]
    7f54:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    7f58:	462a      	mov	r2, r5
    7f5a:	f7ff f83b 	bl	6fd4 <memcpy>
			tx_available -= size;
    7f5e:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    7f60:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    7f64:	1b5b      	subs	r3, r3, r5
    7f66:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    7f6a:	4b3d      	ldr	r3, [pc, #244]	; (8060 <usb_serial_write.part.0+0x1ac>)
    7f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    7f70:	f3bf 8f4f 	dsb	sy
			sent += size;
    7f74:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    7f76:	2300      	movs	r3, #0
			sent += size;
    7f78:	4428      	add	r0, r5
		tx_noautoflush = 0;
    7f7a:	7023      	strb	r3, [r4, #0]
}
    7f7c:	b005      	add	sp, #20
    7f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    7f82:	4b36      	ldr	r3, [pc, #216]	; (805c <usb_serial_write.part.0+0x1a8>)
    7f84:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    7f86:	9902      	ldr	r1, [sp, #8]
    7f88:	f7ff f824 	bl	6fd4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    7f8c:	2300      	movs	r3, #0
    7f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7f92:	4629      	mov	r1, r5
    7f94:	4648      	mov	r0, r9
    7f96:	f7ff fe47 	bl	7c28 <usb_prepare_transfer>
	asm("dsb");
    7f9a:	f3bf 8f4f 	dsb	sy
    7f9e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    7fa2:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    7fa6:	4293      	cmp	r3, r2
    7fa8:	bf34      	ite	cc
    7faa:	2301      	movcc	r3, #1
    7fac:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    7fae:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    7fb2:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    7fb6:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    7fba:	3520      	adds	r5, #32
	} while (location < end_addr);
    7fbc:	42ab      	cmp	r3, r5
    7fbe:	d1fa      	bne.n	7fb6 <usb_serial_write.part.0+0x102>
	asm("dsb");
    7fc0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    7fc4:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    7fc8:	2004      	movs	r0, #4
    7fca:	4649      	mov	r1, r9
    7fcc:	f7ff fe44 	bl	7c58 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    7fd0:	4a20      	ldr	r2, [pc, #128]	; (8054 <usb_serial_write.part.0+0x1a0>)
    7fd2:	7813      	ldrb	r3, [r2, #0]
    7fd4:	3301      	adds	r3, #1
    7fd6:	b2db      	uxtb	r3, r3
    7fd8:	2b03      	cmp	r3, #3
    7fda:	bf84      	itt	hi
    7fdc:	2300      	movhi	r3, #0
    7fde:	4a1d      	ldrhi	r2, [pc, #116]	; (8054 <usb_serial_write.part.0+0x1a0>)
    7fe0:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    7fe2:	f8b8 3000 	ldrh.w	r3, [r8]
    7fe6:	9a01      	ldr	r2, [sp, #4]
    7fe8:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    7fea:	9a00      	ldr	r2, [sp, #0]
    7fec:	441a      	add	r2, r3
			size -= tx_available;
    7fee:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    7ff0:	9200      	str	r2, [sp, #0]
			data += tx_available;
    7ff2:	9a02      	ldr	r2, [sp, #8]
    7ff4:	441a      	add	r2, r3
			tx_available = 0;
    7ff6:	2300      	movs	r3, #0
			data += tx_available;
    7ff8:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    7ffa:	4a19      	ldr	r2, [pc, #100]	; (8060 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    7ffc:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    8000:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    8004:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    8008:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    800a:	2900      	cmp	r1, #0
    800c:	f47f af62 	bne.w	7ed4 <usb_serial_write.part.0+0x20>
	return sent;
    8010:	9800      	ldr	r0, [sp, #0]
}
    8012:	b005      	add	sp, #20
    8014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    8018:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    801c:	4b0d      	ldr	r3, [pc, #52]	; (8054 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    801e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8022:	7819      	ldrb	r1, [r3, #0]
				break;
    8024:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    8026:	f8a8 2000 	strh.w	r2, [r8]
				break;
    802a:	e78a      	b.n	7f42 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    802c:	2301      	movs	r3, #1
				return sent;
    802e:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    8030:	f88a 3000 	strb.w	r3, [sl]
}
    8034:	b005      	add	sp, #20
    8036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    803a:	461a      	mov	r2, r3
    803c:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    8040:	e77f      	b.n	7f42 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    8042:	9801      	ldr	r0, [sp, #4]
	return sent;
    8044:	e7e5      	b.n	8012 <usb_serial_write.part.0+0x15e>
    8046:	bf00      	nop
    8048:	200150ad 	.word	0x200150ad
    804c:	2001506c 	.word	0x2001506c
    8050:	20004c00 	.word	0x20004c00
    8054:	200150ac 	.word	0x200150ac
    8058:	200150af 	.word	0x200150af
    805c:	20201080 	.word	0x20201080
    8060:	402e0000 	.word	0x402e0000
    8064:	20015090 	.word	0x20015090
    8068:	200150ab 	.word	0x200150ab

0000806c <usb_serial_reset>:
}
    806c:	4770      	bx	lr
    806e:	bf00      	nop

00008070 <usb_serial_configure>:
	if (usb_high_speed) {
    8070:	4b2a      	ldr	r3, [pc, #168]	; (811c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8072:	2100      	movs	r1, #0
    8074:	2280      	movs	r2, #128	; 0x80
    8076:	482a      	ldr	r0, [pc, #168]	; (8120 <usb_serial_configure+0xb0>)
{
    8078:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    807a:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    807c:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    807e:	4d29      	ldr	r5, [pc, #164]	; (8124 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
    8080:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    8082:	4e29      	ldr	r6, [pc, #164]	; (8128 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
    8084:	bf0c      	ite	eq
    8086:	2340      	moveq	r3, #64	; 0x40
    8088:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    808c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    808e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8090:	f001 fd48 	bl	9b24 <memset>
	tx_head = 0;
    8094:	4a25      	ldr	r2, [pc, #148]	; (812c <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8096:	4621      	mov	r1, r4
	tx_available = 0;
    8098:	4b25      	ldr	r3, [pc, #148]	; (8130 <usb_serial_configure+0xc0>)
	tx_head = 0;
    809a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    809c:	f44f 7280 	mov.w	r2, #256	; 0x100
    80a0:	4824      	ldr	r0, [pc, #144]	; (8134 <usb_serial_configure+0xc4>)
	tx_available = 0;
    80a2:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    80a4:	f001 fd3e 	bl	9b24 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    80a8:	4a23      	ldr	r2, [pc, #140]	; (8138 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    80aa:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    80ac:	4b23      	ldr	r3, [pc, #140]	; (813c <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    80ae:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    80b0:	e9c2 4400 	strd	r4, r4, [r2]
    80b4:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    80b8:	4a21      	ldr	r2, [pc, #132]	; (8140 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
    80ba:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    80be:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    80c0:	4a20      	ldr	r2, [pc, #128]	; (8144 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
    80c2:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    80c6:	4b20      	ldr	r3, [pc, #128]	; (8148 <usb_serial_configure+0xd8>)
    80c8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    80ca:	4623      	mov	r3, r4
	rx_available = 0;
    80cc:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    80ce:	4622      	mov	r2, r4
    80d0:	f7ff fd78 	bl	7bc4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    80d4:	4622      	mov	r2, r4
    80d6:	8831      	ldrh	r1, [r6, #0]
    80d8:	2003      	movs	r0, #3
    80da:	4b1c      	ldr	r3, [pc, #112]	; (814c <usb_serial_configure+0xdc>)
    80dc:	f7ff fd40 	bl	7b60 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    80e0:	4623      	mov	r3, r4
    80e2:	2201      	movs	r2, #1
    80e4:	8829      	ldrh	r1, [r5, #0]
    80e6:	2004      	movs	r0, #4
    80e8:	f7ff fd6c 	bl	7bc4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    80ec:	4620      	mov	r0, r4
    80ee:	3401      	adds	r4, #1
    80f0:	f7ff fe0e 	bl	7d10 <rx_queue_transfer>
    80f4:	2c08      	cmp	r4, #8
    80f6:	d1f9      	bne.n	80ec <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    80f8:	4b15      	ldr	r3, [pc, #84]	; (8150 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
    80fa:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    80fc:	4815      	ldr	r0, [pc, #84]	; (8154 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
    80fe:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
    8100:	4c15      	ldr	r4, [pc, #84]	; (8158 <usb_serial_configure+0xe8>)
    8102:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    8104:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    810c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    8110:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    8114:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
    8118:	bd70      	pop	{r4, r5, r6, pc}
    811a:	bf00      	nop
    811c:	200150b0 	.word	0x200150b0
    8120:	20004c00 	.word	0x20004c00
    8124:	20015092 	.word	0x20015092
    8128:	2001508e 	.word	0x2001508e
    812c:	200150ac 	.word	0x200150ac
    8130:	20015090 	.word	0x20015090
    8134:	20004b00 	.word	0x20004b00
    8138:	20015028 	.word	0x20015028
    813c:	20015038 	.word	0x20015038
    8140:	200150a8 	.word	0x200150a8
    8144:	20015024 	.word	0x20015024
    8148:	200150a9 	.word	0x200150a9
    814c:	00007d71 	.word	0x00007d71
    8150:	402e0000 	.word	0x402e0000
    8154:	20015080 	.word	0x20015080
    8158:	00007e25 	.word	0x00007e25

0000815c <usb_serial_read>:
{
    815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8160:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8164:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    8168:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8234 <usb_serial_read+0xd8>
{
    816c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    816e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    8172:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    8174:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    8178:	2900      	cmp	r1, #0
    817a:	d04f      	beq.n	821c <usb_serial_read+0xc0>
    817c:	4680      	mov	r8, r0
    817e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    8180:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    8182:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8238 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    8186:	4b26      	ldr	r3, [pc, #152]	; (8220 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    8188:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    818c:	4925      	ldr	r1, [pc, #148]	; (8224 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    818e:	781b      	ldrb	r3, [r3, #0]
    8190:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    8192:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    8196:	d03f      	beq.n	8218 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    8198:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    819a:	4b23      	ldr	r3, [pc, #140]	; (8228 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    819c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    819e:	bf28      	it	cs
    81a0:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    81a2:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    81a4:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    81a8:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    81ac:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    81ae:	4b1f      	ldr	r3, [pc, #124]	; (822c <usb_serial_read+0xd0>)
    81b0:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    81b4:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    81b8:	42aa      	cmp	r2, r5
    81ba:	d21c      	bcs.n	81f6 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    81bc:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    81c0:	4918      	ldr	r1, [pc, #96]	; (8224 <usb_serial_read+0xc8>)
			rx_available -= len;
    81c2:	4c1b      	ldr	r4, [pc, #108]	; (8230 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    81c4:	4461      	add	r1, ip
    81c6:	9201      	str	r2, [sp, #4]
    81c8:	f7fe ff04 	bl	6fd4 <memcpy>
			rx_available -= len;
    81cc:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    81ce:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    81d2:	4658      	mov	r0, fp
			rx_index[i] += len;
    81d4:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    81d6:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    81da:	442a      	add	r2, r5
			rx_available -= len;
    81dc:	4439      	add	r1, r7
			rx_index[i] += len;
    81de:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    81e2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    81e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    81e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    81ec:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    81f0:	b003      	add	sp, #12
    81f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    81f6:	462a      	mov	r2, r5
			count += avail;
    81f8:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    81fa:	f7fe feeb 	bl	6fd4 <memcpy>
			rx_available -= avail;
    81fe:	490c      	ldr	r1, [pc, #48]	; (8230 <usb_serial_read+0xd4>)
			rx_tail = tail;
    8200:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    8202:	4630      	mov	r0, r6
			rx_available -= avail;
    8204:	680a      	ldr	r2, [r1, #0]
			p += avail;
    8206:	44a8      	add	r8, r5
			rx_available -= avail;
    8208:	1b52      	subs	r2, r2, r5
    820a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    820c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    8210:	f7ff fd7e 	bl	7d10 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    8214:	45bb      	cmp	fp, r7
    8216:	d8b6      	bhi.n	8186 <usb_serial_read+0x2a>
	return count;
    8218:	4638      	mov	r0, r7
    821a:	e7e3      	b.n	81e4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    821c:	4608      	mov	r0, r1
    821e:	e7e1      	b.n	81e4 <usb_serial_read+0x88>
    8220:	200150a8 	.word	0x200150a8
    8224:	20200080 	.word	0x20200080
    8228:	20015048 	.word	0x20015048
    822c:	20015028 	.word	0x20015028
    8230:	20015024 	.word	0x20015024
    8234:	200150a9 	.word	0x200150a9
    8238:	20015038 	.word	0x20015038

0000823c <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    823c:	4b0b      	ldr	r3, [pc, #44]	; (826c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    823e:	4a0c      	ldr	r2, [pc, #48]	; (8270 <usb_serial_peekchar+0x34>)
    8240:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    8242:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    8244:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    8246:	428a      	cmp	r2, r1
    8248:	d00d      	beq.n	8266 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    824a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    824c:	4809      	ldr	r0, [pc, #36]	; (8274 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    824e:	4a0a      	ldr	r2, [pc, #40]	; (8278 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    8250:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8252:	490a      	ldr	r1, [pc, #40]	; (827c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    8254:	bf28      	it	cs
    8256:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8258:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    825a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    825e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    8262:	5c58      	ldrb	r0, [r3, r1]
    8264:	4770      	bx	lr
	if (tail == rx_head) return -1;
    8266:	f04f 30ff 	mov.w	r0, #4294967295
}
    826a:	4770      	bx	lr
    826c:	200150a8 	.word	0x200150a8
    8270:	200150a9 	.word	0x200150a9
    8274:	20015048 	.word	0x20015048
    8278:	20200080 	.word	0x20200080
    827c:	20015038 	.word	0x20015038

00008280 <usb_serial_available>:
	uint32_t n = rx_available;
    8280:	4b04      	ldr	r3, [pc, #16]	; (8294 <usb_serial_available+0x14>)
{
    8282:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    8284:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    8286:	b10c      	cbz	r4, 828c <usb_serial_available+0xc>
}
    8288:	4620      	mov	r0, r4
    828a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    828c:	f000 f8e0 	bl	8450 <yield>
}
    8290:	4620      	mov	r0, r4
    8292:	bd10      	pop	{r4, pc}
    8294:	20015024 	.word	0x20015024

00008298 <usb_serial_flush_input>:
{
    8298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    829c:	4e14      	ldr	r6, [pc, #80]	; (82f0 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    829e:	4d15      	ldr	r5, [pc, #84]	; (82f4 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    82a0:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    82a2:	782a      	ldrb	r2, [r5, #0]
    82a4:	4293      	cmp	r3, r2
    82a6:	d021      	beq.n	82ec <usb_serial_flush_input+0x54>
    82a8:	b2dc      	uxtb	r4, r3
    82aa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 82fc <usb_serial_flush_input+0x64>
    82ae:	f8df b050 	ldr.w	fp, [pc, #80]	; 8300 <usb_serial_flush_input+0x68>
    82b2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8304 <usb_serial_flush_input+0x6c>
    82b6:	4f10      	ldr	r7, [pc, #64]	; (82f8 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    82b8:	3401      	adds	r4, #1
    82ba:	2c08      	cmp	r4, #8
		rx_tail = tail;
    82bc:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    82c0:	d901      	bls.n	82c6 <usb_serial_flush_input+0x2e>
    82c2:	2400      	movs	r4, #0
    82c4:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    82c6:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    82ca:	f8db 3000 	ldr.w	r3, [fp]
    82ce:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    82d2:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    82d6:	1a52      	subs	r2, r2, r1
    82d8:	1a9b      	subs	r3, r3, r2
    82da:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    82de:	f7ff fd17 	bl	7d10 <rx_queue_transfer>
		rx_tail = tail;
    82e2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    82e6:	782b      	ldrb	r3, [r5, #0]
    82e8:	42a3      	cmp	r3, r4
    82ea:	d1e5      	bne.n	82b8 <usb_serial_flush_input+0x20>
}
    82ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    82f0:	200150a9 	.word	0x200150a9
    82f4:	200150a8 	.word	0x200150a8
    82f8:	20015038 	.word	0x20015038
    82fc:	20015048 	.word	0x20015048
    8300:	20015024 	.word	0x20015024
    8304:	20015028 	.word	0x20015028

00008308 <usb_serial_getchar>:
{
    8308:	b500      	push	{lr}
    830a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    830c:	2101      	movs	r1, #1
    830e:	f10d 0007 	add.w	r0, sp, #7
    8312:	f7ff ff23 	bl	815c <usb_serial_read>
    8316:	b120      	cbz	r0, 8322 <usb_serial_getchar+0x1a>
    8318:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    831c:	b003      	add	sp, #12
    831e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    8322:	f04f 30ff 	mov.w	r0, #4294967295
    8326:	e7f9      	b.n	831c <usb_serial_getchar+0x14>

00008328 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <usb_serial_putchar+0x28>)
{
    832a:	b500      	push	{lr}
    832c:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    832e:	781b      	ldrb	r3, [r3, #0]
{
    8330:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    8334:	b13b      	cbz	r3, 8346 <usb_serial_putchar+0x1e>
    8336:	2101      	movs	r1, #1
    8338:	f10d 0007 	add.w	r0, sp, #7
    833c:	f7ff fdba 	bl	7eb4 <usb_serial_write.part.0>
}
    8340:	b003      	add	sp, #12
    8342:	f85d fb04 	ldr.w	pc, [sp], #4
    8346:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    834a:	b003      	add	sp, #12
    834c:	f85d fb04 	ldr.w	pc, [sp], #4
    8350:	200150af 	.word	0x200150af

00008354 <usb_serial_write>:
	if (!usb_configuration) return 0;
    8354:	4b04      	ldr	r3, [pc, #16]	; (8368 <usb_serial_write+0x14>)
    8356:	781b      	ldrb	r3, [r3, #0]
    8358:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    835c:	b10b      	cbz	r3, 8362 <usb_serial_write+0xe>
    835e:	f7ff bda9 	b.w	7eb4 <usb_serial_write.part.0>
}
    8362:	4610      	mov	r0, r2
    8364:	4770      	bx	lr
    8366:	bf00      	nop
    8368:	200150af 	.word	0x200150af

0000836c <usb_serial_write_buffer_free>:
{
    836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    8370:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    8372:	f8df 8044 	ldr.w	r8, [pc, #68]	; 83b8 <usb_serial_write_buffer_free+0x4c>
    8376:	2301      	movs	r3, #1
    8378:	4d0d      	ldr	r5, [pc, #52]	; (83b0 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    837a:	4627      	mov	r7, r4
    837c:	4e0d      	ldr	r6, [pc, #52]	; (83b4 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    837e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    8382:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8384:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    8386:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    8388:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    838a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    838e:	d005      	beq.n	839c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8390:	f7ff fc84 	bl	7c9c <usb_transfer_status>
    8394:	0603      	lsls	r3, r0, #24
    8396:	bf58      	it	pl
    8398:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    839c:	2c04      	cmp	r4, #4
    839e:	d1f0      	bne.n	8382 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    83a0:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    83a4:	2300      	movs	r3, #0
}
    83a6:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    83a8:	f888 3000 	strb.w	r3, [r8]
}
    83ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83b0:	20004c00 	.word	0x20004c00
    83b4:	200150ac 	.word	0x200150ac
    83b8:	200150ad 	.word	0x200150ad

000083bc <usb_serial_flush_output>:
{
    83bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    83c0:	4b1d      	ldr	r3, [pc, #116]	; (8438 <usb_serial_flush_output+0x7c>)
    83c2:	781b      	ldrb	r3, [r3, #0]
    83c4:	b113      	cbz	r3, 83cc <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    83c6:	4d1d      	ldr	r5, [pc, #116]	; (843c <usb_serial_flush_output+0x80>)
    83c8:	882a      	ldrh	r2, [r5, #0]
    83ca:	b90a      	cbnz	r2, 83d0 <usb_serial_flush_output+0x14>
}
    83cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    83d0:	4e1b      	ldr	r6, [pc, #108]	; (8440 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    83d2:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    83d6:	491b      	ldr	r1, [pc, #108]	; (8444 <usb_serial_flush_output+0x88>)
    83d8:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    83da:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    83dc:	4c1a      	ldr	r4, [pc, #104]	; (8448 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    83de:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    83e2:	4f1a      	ldr	r7, [pc, #104]	; (844c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    83e4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    83e8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    83ea:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    83ec:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    83ee:	4621      	mov	r1, r4
    83f0:	2300      	movs	r3, #0
    83f2:	f7ff fc19 	bl	7c28 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    83f6:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    83fa:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    83fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8402:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    8406:	3420      	adds	r4, #32
	} while (location < end_addr);
    8408:	42a2      	cmp	r2, r4
    840a:	d8fa      	bhi.n	8402 <usb_serial_flush_output+0x46>
	asm("dsb");
    840c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    8410:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8414:	2004      	movs	r0, #4
    8416:	4641      	mov	r1, r8
    8418:	f7ff fc1e 	bl	7c58 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    841c:	7833      	ldrb	r3, [r6, #0]
    841e:	3301      	adds	r3, #1
    8420:	b2db      	uxtb	r3, r3
    8422:	2b03      	cmp	r3, #3
    8424:	bf88      	it	hi
    8426:	2300      	movhi	r3, #0
    8428:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    842a:	2300      	movs	r3, #0
    842c:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    842e:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    8432:	703b      	strb	r3, [r7, #0]
}
    8434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8438:	200150af 	.word	0x200150af
    843c:	20015090 	.word	0x20015090
    8440:	200150ac 	.word	0x200150ac
    8444:	20004c00 	.word	0x20004c00
    8448:	20201080 	.word	0x20201080
    844c:	200150ad 	.word	0x200150ad

00008450 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    8450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    8454:	4e32      	ldr	r6, [pc, #200]	; (8520 <yield+0xd0>)
    8456:	7833      	ldrb	r3, [r6, #0]
    8458:	b163      	cbz	r3, 8474 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    845a:	4f32      	ldr	r7, [pc, #200]	; (8524 <yield+0xd4>)
    845c:	783a      	ldrb	r2, [r7, #0]
    845e:	b94a      	cbnz	r2, 8474 <yield+0x24>
	running = 1;
    8460:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    8462:	07d9      	lsls	r1, r3, #31
	running = 1;
    8464:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    8466:	d444      	bmi.n	84f2 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    8468:	079a      	lsls	r2, r3, #30
    846a:	d426      	bmi.n	84ba <yield+0x6a>

	running = 0;
    846c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    846e:	075b      	lsls	r3, r3, #29
	running = 0;
    8470:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    8472:	d401      	bmi.n	8478 <yield+0x28>
	
};
    8474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    8478:	4b2b      	ldr	r3, [pc, #172]	; (8528 <yield+0xd8>)
    847a:	681a      	ldr	r2, [r3, #0]
    847c:	2a00      	cmp	r2, #0
    847e:	d0f9      	beq.n	8474 <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    8480:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    8484:	2a00      	cmp	r2, #0
    8486:	d1f5      	bne.n	8474 <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8488:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    848c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    848e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    8490:	2800      	cmp	r0, #0
    8492:	d03b      	beq.n	850c <yield+0xbc>
		if (runningFromYield) {
    8494:	4c25      	ldr	r4, [pc, #148]	; (852c <yield+0xdc>)
    8496:	7821      	ldrb	r1, [r4, #0]
    8498:	2900      	cmp	r1, #0
    849a:	d137      	bne.n	850c <yield+0xbc>
		runningFromYield = true;
    849c:	2201      	movs	r2, #1
    849e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    84a0:	6942      	ldr	r2, [r0, #20]
    84a2:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    84a4:	2a00      	cmp	r2, #0
    84a6:	d038      	beq.n	851a <yield+0xca>
			firstYield->_prev = nullptr;
    84a8:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    84aa:	b905      	cbnz	r5, 84ae <yield+0x5e>
    84ac:	b662      	cpsie	i
		first->_triggered = false;
    84ae:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    84b0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    84b2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    84b4:	4798      	blx	r3
		runningFromYield = false;
    84b6:	7025      	strb	r5, [r4, #0]
    84b8:	e7dc      	b.n	8474 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    84ba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8538 <yield+0xe8>
    84be:	f898 2000 	ldrb.w	r2, [r8]
    84c2:	2a00      	cmp	r2, #0
    84c4:	d0d2      	beq.n	846c <yield+0x1c>
    84c6:	2500      	movs	r5, #0
    84c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 853c <yield+0xec>
    84cc:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    84ce:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    84d2:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    84d4:	6823      	ldr	r3, [r4, #0]
    84d6:	4620      	mov	r0, r4
    84d8:	691b      	ldr	r3, [r3, #16]
    84da:	4798      	blx	r3
    84dc:	b110      	cbz	r0, 84e4 <yield+0x94>
    84de:	6963      	ldr	r3, [r4, #20]
    84e0:	689b      	ldr	r3, [r3, #8]
    84e2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    84e4:	f898 2000 	ldrb.w	r2, [r8]
    84e8:	b2eb      	uxtb	r3, r5
    84ea:	429a      	cmp	r2, r3
    84ec:	d8ef      	bhi.n	84ce <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    84ee:	7833      	ldrb	r3, [r6, #0]
    84f0:	e7bc      	b.n	846c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    84f2:	f7ff fec5 	bl	8280 <usb_serial_available>
		if (Serial.available()) serialEvent();
    84f6:	b968      	cbnz	r0, 8514 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    84f8:	4b0d      	ldr	r3, [pc, #52]	; (8530 <yield+0xe0>)
    84fa:	781b      	ldrb	r3, [r3, #0]
    84fc:	b90b      	cbnz	r3, 8502 <yield+0xb2>
    84fe:	7833      	ldrb	r3, [r6, #0]
    8500:	e7b2      	b.n	8468 <yield+0x18>
    8502:	7833      	ldrb	r3, [r6, #0]
    8504:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    8508:	7033      	strb	r3, [r6, #0]
    850a:	e7ad      	b.n	8468 <yield+0x18>
		if (doit) __enable_irq();
    850c:	2d00      	cmp	r5, #0
    850e:	d1b1      	bne.n	8474 <yield+0x24>
    8510:	b662      	cpsie	i
    8512:	e7af      	b.n	8474 <yield+0x24>
		if (Serial.available()) serialEvent();
    8514:	f000 fa8a 	bl	8a2c <serialEvent()>
    8518:	e7ee      	b.n	84f8 <yield+0xa8>
			lastYield = nullptr;
    851a:	4b06      	ldr	r3, [pc, #24]	; (8534 <yield+0xe4>)
    851c:	601a      	str	r2, [r3, #0]
    851e:	e7c4      	b.n	84aa <yield+0x5a>
    8520:	200047c2 	.word	0x200047c2
    8524:	20015096 	.word	0x20015096
    8528:	20004c88 	.word	0x20004c88
    852c:	20015094 	.word	0x20015094
    8530:	60001f58 	.word	0x60001f58
    8534:	20004c94 	.word	0x20004c94
    8538:	20015095 	.word	0x20015095
    853c:	20004c98 	.word	0x20004c98

00008540 <EventResponder::runFromInterrupt()>:
{
    8540:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8542:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8546:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    8548:	4c0c      	ldr	r4, [pc, #48]	; (857c <EventResponder::runFromInterrupt()+0x3c>)
    854a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    854c:	b180      	cbz	r0, 8570 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    854e:	4e0c      	ldr	r6, [pc, #48]	; (8580 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    8550:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    8552:	6943      	ldr	r3, [r0, #20]
    8554:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    8556:	b173      	cbz	r3, 8576 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    8558:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    855a:	b902      	cbnz	r2, 855e <EventResponder::runFromInterrupt()+0x1e>
    855c:	b662      	cpsie	i
			(*(first->_function))(*first);
    855e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    8560:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    8562:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8564:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8568:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    856a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    856c:	2800      	cmp	r0, #0
    856e:	d1f0      	bne.n	8552 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    8570:	b902      	cbnz	r2, 8574 <EventResponder::runFromInterrupt()+0x34>
    8572:	b662      	cpsie	i
}
    8574:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    8576:	6033      	str	r3, [r6, #0]
    8578:	e7ef      	b.n	855a <EventResponder::runFromInterrupt()+0x1a>
    857a:	bf00      	nop
    857c:	20004c90 	.word	0x20004c90
    8580:	20004c8c 	.word	0x20004c8c

00008584 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    8584:	f7ff bfdc 	b.w	8540 <EventResponder::runFromInterrupt()>

00008588 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    8588:	4904      	ldr	r1, [pc, #16]	; (859c <systick_isr+0x14>)
	systick_millis_count++;
    858a:	4a05      	ldr	r2, [pc, #20]	; (85a0 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    858c:	6849      	ldr	r1, [r1, #4]
    858e:	4b05      	ldr	r3, [pc, #20]	; (85a4 <systick_isr+0x1c>)
    8590:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    8592:	6813      	ldr	r3, [r2, #0]
    8594:	3301      	adds	r3, #1
    8596:	6013      	str	r3, [r2, #0]
}
    8598:	4770      	bx	lr
    859a:	bf00      	nop
    859c:	e0001000 	.word	0xe0001000
    85a0:	2001506c 	.word	0x2001506c
    85a4:	20015068 	.word	0x20015068

000085a8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    85a8:	49a2      	ldr	r1, [pc, #648]	; (8834 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    85aa:	4ba3      	ldr	r3, [pc, #652]	; (8838 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    85ac:	4288      	cmp	r0, r1
{
    85ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    85b2:	4ca2      	ldr	r4, [pc, #648]	; (883c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    85b4:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    85b6:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    85b8:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    85bc:	d91b      	bls.n	85f6 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    85be:	4ba0      	ldr	r3, [pc, #640]	; (8840 <set_arm_clock+0x298>)
    85c0:	4298      	cmp	r0, r3
    85c2:	f240 8102 	bls.w	87ca <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    85c6:	1ac3      	subs	r3, r0, r3
    85c8:	499e      	ldr	r1, [pc, #632]	; (8844 <set_arm_clock+0x29c>)
    85ca:	0a1b      	lsrs	r3, r3, #8
    85cc:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    85d0:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    85d4:	09db      	lsrs	r3, r3, #7
    85d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    85da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    85de:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    85e2:	428b      	cmp	r3, r1
    85e4:	bf28      	it	cs
    85e6:	460b      	movcs	r3, r1
    85e8:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    85ec:	4b96      	ldr	r3, [pc, #600]	; (8848 <set_arm_clock+0x2a0>)
    85ee:	fba3 3707 	umull	r3, r7, r3, r7
    85f2:	08ff      	lsrs	r7, r7, #3
    85f4:	e004      	b.n	8600 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    85f6:	4f95      	ldr	r7, [pc, #596]	; (884c <set_arm_clock+0x2a4>)
    85f8:	42b8      	cmp	r0, r7
    85fa:	bf8c      	ite	hi
    85fc:	270e      	movhi	r7, #14
    85fe:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8600:	498d      	ldr	r1, [pc, #564]	; (8838 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8602:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8606:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    860a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    860c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    8610:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8614:	d20c      	bcs.n	8630 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8616:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    861a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    861e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    8622:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8626:	680b      	ldr	r3, [r1, #0]
    8628:	2b00      	cmp	r3, #0
    862a:	dafc      	bge.n	8626 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    862c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    8630:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    8634:	d124      	bne.n	8680 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    8636:	4986      	ldr	r1, [pc, #536]	; (8850 <set_arm_clock+0x2a8>)
    8638:	690c      	ldr	r4, [r1, #16]
    863a:	4986      	ldr	r1, [pc, #536]	; (8854 <set_arm_clock+0x2ac>)
    863c:	43a1      	bics	r1, r4
    863e:	f000 80ea 	beq.w	8816 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    8642:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    8646:	4634      	mov	r4, r6
    8648:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    864c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    8650:	d004      	beq.n	865c <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    8652:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8656:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    8658:	4b77      	ldr	r3, [pc, #476]	; (8838 <set_arm_clock+0x290>)
    865a:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    865c:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    8660:	d007      	beq.n	8672 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    8662:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    8666:	4974      	ldr	r1, [pc, #464]	; (8838 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    8668:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    866a:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    866c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    866e:	071a      	lsls	r2, r3, #28
    8670:	d4fc      	bmi.n	866c <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    8672:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    8676:	4a70      	ldr	r2, [pc, #448]	; (8838 <set_arm_clock+0x290>)
    8678:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    867a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    867c:	069b      	lsls	r3, r3, #26
    867e:	d4fc      	bmi.n	867a <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    8680:	4c75      	ldr	r4, [pc, #468]	; (8858 <set_arm_clock+0x2b0>)
    8682:	42a0      	cmp	r0, r4
    8684:	f200 80ce 	bhi.w	8824 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    8688:	f04f 0c01 	mov.w	ip, #1
    868c:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    868e:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    8690:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    8694:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    8698:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    869c:	42a2      	cmp	r2, r4
    869e:	d818      	bhi.n	86d2 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    86a0:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    86a4:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    86a8:	f040 808d 	bne.w	87c6 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    86ac:	f1bc 0f04 	cmp.w	ip, #4
    86b0:	f200 8091 	bhi.w	87d6 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    86b4:	180a      	adds	r2, r1, r0
    86b6:	42a2      	cmp	r2, r4
    86b8:	f200 80a4 	bhi.w	8804 <set_arm_clock+0x25c>
    86bc:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    86c0:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    86c2:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    86c6:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    86ca:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    86ce:	42a2      	cmp	r2, r4
    86d0:	d9e6      	bls.n	86a0 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    86d2:	f10c 31ff 	add.w	r1, ip, #4294967295
    86d6:	028c      	lsls	r4, r1, #10
    86d8:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    86dc:	485f      	ldr	r0, [pc, #380]	; (885c <set_arm_clock+0x2b4>)
    86de:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    86e0:	4a5f      	ldr	r2, [pc, #380]	; (8860 <set_arm_clock+0x2b8>)
    86e2:	4290      	cmp	r0, r2
    86e4:	d97f      	bls.n	87e6 <set_arm_clock+0x23e>
    86e6:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 888c <set_arm_clock+0x2e4>
    86ea:	226c      	movs	r2, #108	; 0x6c
    86ec:	485d      	ldr	r0, [pc, #372]	; (8864 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    86ee:	4d58      	ldr	r5, [pc, #352]	; (8850 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    86f0:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    86f4:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    86f8:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    86fc:	f8df c190 	ldr.w	ip, [pc, #400]	; 8890 <set_arm_clock+0x2e8>
    8700:	ea0e 0c0c 	and.w	ip, lr, ip
    8704:	45d4      	cmp	ip, sl
    8706:	d009      	beq.n	871c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    8708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    870c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    8710:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    8714:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8716:	682a      	ldr	r2, [r5, #0]
    8718:	2a00      	cmp	r2, #0
    871a:	dafc      	bge.n	8716 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    871c:	4a46      	ldr	r2, [pc, #280]	; (8838 <set_arm_clock+0x290>)
    871e:	6915      	ldr	r5, [r2, #16]
    8720:	f005 0507 	and.w	r5, r5, #7
    8724:	429d      	cmp	r5, r3
    8726:	d003      	beq.n	8730 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8728:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    872a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    872c:	03dd      	lsls	r5, r3, #15
    872e:	d4fc      	bmi.n	872a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8730:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    8734:	d009      	beq.n	874a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    8736:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    873a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    873e:	4a3e      	ldr	r2, [pc, #248]	; (8838 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8740:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    8742:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8744:	6c93      	ldr	r3, [r2, #72]	; 0x48
    8746:	0799      	lsls	r1, r3, #30
    8748:	d4fc      	bmi.n	8744 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    874a:	4947      	ldr	r1, [pc, #284]	; (8868 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    874c:	4a47      	ldr	r2, [pc, #284]	; (886c <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    874e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    8750:	4291      	cmp	r1, r2
    8752:	d83c      	bhi.n	87ce <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    8754:	4b46      	ldr	r3, [pc, #280]	; (8870 <set_arm_clock+0x2c8>)
    8756:	09c9      	lsrs	r1, r1, #7
    8758:	fba3 3101 	umull	r3, r1, r3, r1
    875c:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    875e:	1e4b      	subs	r3, r1, #1
    8760:	021b      	lsls	r3, r3, #8
    8762:	ea86 0203 	eor.w	r2, r6, r3
    8766:	f412 7f40 	tst.w	r2, #768	; 0x300
    876a:	d006      	beq.n	877a <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    876c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8770:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    8774:	4a30      	ldr	r2, [pc, #192]	; (8838 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8776:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    8778:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    877a:	4a2f      	ldr	r2, [pc, #188]	; (8838 <set_arm_clock+0x290>)
    877c:	6953      	ldr	r3, [r2, #20]
    877e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    8782:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8784:	6c93      	ldr	r3, [r2, #72]	; 0x48
    8786:	069b      	lsls	r3, r3, #26
    8788:	d4fc      	bmi.n	8784 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    878a:	4b3a      	ldr	r3, [pc, #232]	; (8874 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    878c:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    878e:	fba3 2300 	umull	r2, r3, r3, r0
    8792:	f04f 32ff 	mov.w	r2, #4294967295
    8796:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    879a:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    879e:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    87a2:	4a35      	ldr	r2, [pc, #212]	; (8878 <set_arm_clock+0x2d0>)
    87a4:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    87a6:	4a35      	ldr	r2, [pc, #212]	; (887c <set_arm_clock+0x2d4>)
    87a8:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    87aa:	4a35      	ldr	r2, [pc, #212]	; (8880 <set_arm_clock+0x2d8>)
    87ac:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    87ae:	d208      	bcs.n	87c2 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    87b0:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    87b4:	4a21      	ldr	r2, [pc, #132]	; (883c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    87b6:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    87ba:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    87bc:	6813      	ldr	r3, [r2, #0]
    87be:	2b00      	cmp	r3, #0
    87c0:	dafc      	bge.n	87bc <set_arm_clock+0x214>
	}

	return frequency;
}
    87c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87c6:	4673      	mov	r3, lr
    87c8:	e762      	b.n	8690 <set_arm_clock+0xe8>
    87ca:	2712      	movs	r7, #18
    87cc:	e718      	b.n	8600 <set_arm_clock+0x58>
    87ce:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    87d2:	2104      	movs	r1, #4
    87d4:	e7c5      	b.n	8762 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    87d6:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    87da:	4820      	ldr	r0, [pc, #128]	; (885c <set_arm_clock+0x2b4>)
    87dc:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    87de:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    87e0:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    87e2:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    87e6:	4a27      	ldr	r2, [pc, #156]	; (8884 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    87e8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8894 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    87ec:	fba2 2000 	umull	r2, r0, r2, r0
    87f0:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    87f2:	4825      	ldr	r0, [pc, #148]	; (8888 <set_arm_clock+0x2e0>)
    87f4:	2a36      	cmp	r2, #54	; 0x36
    87f6:	bf38      	it	cc
    87f8:	2236      	movcc	r2, #54	; 0x36
    87fa:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    87fe:	ea42 0a0a 	orr.w	sl, r2, sl
    8802:	e774      	b.n	86ee <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8804:	ea4f 248c 	mov.w	r4, ip, lsl #10
    8808:	2300      	movs	r3, #0
    880a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    880e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    8812:	46ac      	mov	ip, r5
    8814:	e762      	b.n	86dc <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    8816:	461d      	mov	r5, r3
    8818:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    881c:	4611      	mov	r1, r2
    881e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    8822:	e713      	b.n	864c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    8824:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    8826:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    882a:	4602      	mov	r2, r0
    882c:	4631      	mov	r1, r6
    882e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    8830:	46e6      	mov	lr, ip
    8832:	e753      	b.n	86dc <set_arm_clock+0x134>
    8834:	1f78a400 	.word	0x1f78a400
    8838:	400fc000 	.word	0x400fc000
    883c:	40080000 	.word	0x40080000
    8840:	23c34600 	.word	0x23c34600
    8844:	004cb223 	.word	0x004cb223
    8848:	51eb851f 	.word	0x51eb851f
    884c:	016e3600 	.word	0x016e3600
    8850:	400d8000 	.word	0x400d8000
    8854:	80003040 	.word	0x80003040
    8858:	269fb1ff 	.word	0x269fb1ff
    885c:	005b8d80 	.word	0x005b8d80
    8860:	4df67eff 	.word	0x4df67eff
    8864:	4d3f6400 	.word	0x4d3f6400
    8868:	08f0d17f 	.word	0x08f0d17f
    886c:	2cb4177f 	.word	0x2cb4177f
    8870:	00e5109f 	.word	0x00e5109f
    8874:	431bde83 	.word	0x431bde83
    8878:	200041ac 	.word	0x200041ac
    887c:	200041a8 	.word	0x200041a8
    8880:	20015064 	.word	0x20015064
    8884:	165e9f81 	.word	0x165e9f81
    8888:	00b71b00 	.word	0x00b71b00
    888c:	8000206c 	.word	0x8000206c
    8890:	8001307f 	.word	0x8001307f
    8894:	80002000 	.word	0x80002000

00008898 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    8898:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    889a:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    889c:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    88a0:	4619      	mov	r1, r3
{
    88a2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    88a4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    88a8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    88ac:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    88b0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    88b4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    88b8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    88ba:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    88be:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    88c2:	b29b      	uxth	r3, r3
    88c4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    88c8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    88cc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    88d0:	3101      	adds	r1, #1
    88d2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    88d6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    88d8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    88da:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    88de:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    88e0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    88e2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    88e4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    88e6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    88ea:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    88ec:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    88ee:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    88f0:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    88f2:	d1eb      	bne.n	88cc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    88f4:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    88f8:	b29b      	uxth	r3, r3
    88fa:	f043 030f 	orr.w	r3, r3, #15
    88fe:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    8902:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    8906:	b29b      	uxth	r3, r3
    8908:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    890c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    8910:	bd10      	pop	{r4, pc}
    8912:	bf00      	nop

00008914 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    8914:	4b37      	ldr	r3, [pc, #220]	; (89f4 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    8916:	4a38      	ldr	r2, [pc, #224]	; (89f8 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    8918:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    891a:	4838      	ldr	r0, [pc, #224]	; (89fc <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    891c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    8920:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    8922:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    8924:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    8928:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    892c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8930:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    8934:	430a      	orrs	r2, r1
    8936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    893a:	f7ff ffad 	bl	8898 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    893e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    8942:	f7ff ffa9 	bl	8898 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    8946:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    894a:	f7ff ffa5 	bl	8898 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    894e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    8952:	f7ff ffa1 	bl	8898 <flexpwm_init>
	for (i=0; i < 4; i++) {
    8956:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    8958:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    895c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    8960:	4611      	mov	r1, r2
    8962:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    8966:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    896a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    896c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    896e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    8970:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    8972:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    8976:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8978:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    897a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    897e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8980:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    8982:	d1ee      	bne.n	8962 <pwm_init+0x4e>
    8984:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    8986:	481e      	ldr	r0, [pc, #120]	; (8a00 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    8988:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    898c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    8990:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    8992:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    8996:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    899a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    899e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    89a2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    89a4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    89a6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    89a8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    89aa:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    89ae:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    89b0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    89b2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    89b6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    89b8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    89ba:	d1ee      	bne.n	899a <pwm_init+0x86>
    89bc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    89be:	4811      	ldr	r0, [pc, #68]	; (8a04 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    89c0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    89c2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    89c6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    89c8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    89cc:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    89d0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    89d4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    89d8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    89da:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    89dc:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    89de:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    89e0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    89e2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    89e4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    89e6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    89ea:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    89ec:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    89f0:	d1ee      	bne.n	89d0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    89f2:	bd70      	pop	{r4, r5, r6, pc}
    89f4:	400fc000 	.word	0x400fc000
    89f8:	fc030000 	.word	0xfc030000
    89fc:	403dc000 	.word	0x403dc000
    8a00:	401e0000 	.word	0x401e0000
    8a04:	401e4000 	.word	0x401e4000

00008a08 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    8a08:	4a07      	ldr	r2, [pc, #28]	; (8a28 <rtc_get+0x20>)
    8a0a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    8a0c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    8a0e:	4619      	mov	r1, r3
    8a10:	4684      	mov	ip, r0
    8a12:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    8a14:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    8a16:	4299      	cmp	r1, r3
    8a18:	d1f9      	bne.n	8a0e <rtc_get+0x6>
    8a1a:	4584      	cmp	ip, r0
    8a1c:	d1f7      	bne.n	8a0e <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    8a1e:	0bdb      	lsrs	r3, r3, #15
}
    8a20:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    8a24:	4770      	bx	lr
    8a26:	bf00      	nop
    8a28:	400d4000 	.word	0x400d4000

00008a2c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    8a2c:	4770      	bx	lr
    8a2e:	bf00      	nop

00008a30 <sm_align_pool>:
{
    8a30:	b508      	push	{r3, lr}
	x = spool->pool_size % HEADER_SZ;
    8a32:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    8a36:	b15b      	cbz	r3, 8a50 <sm_align_pool+0x20>
    8a38:	b1ba      	cbz	r2, 8a6a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    8a3a:	4b0f      	ldr	r3, [pc, #60]	; (8a78 <sm_align_pool+0x48>)
    8a3c:	fba3 1302 	umull	r1, r3, r3, r2
    8a40:	08db      	lsrs	r3, r3, #3
    8a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8a46:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    8a4a:	d10a      	bne.n	8a62 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    8a4c:	2001      	movs	r0, #1
}
    8a4e:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    8a50:	4b09      	ldr	r3, [pc, #36]	; (8a78 <sm_align_pool+0x48>)
    8a52:	fba3 1302 	umull	r1, r3, r3, r2
    8a56:	08db      	lsrs	r3, r3, #3
    8a58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    8a5c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    8a60:	d001      	beq.n	8a66 <sm_align_pool+0x36>
    8a62:	1ad2      	subs	r2, r2, r3
    8a64:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    8a66:	2af0      	cmp	r2, #240	; 0xf0
    8a68:	d8f0      	bhi.n	8a4c <sm_align_pool+0x1c>
		errno = ENOSPC;
    8a6a:	f001 f9b1 	bl	9dd0 <__errno>
    8a6e:	221c      	movs	r2, #28
    8a70:	4603      	mov	r3, r0
    8a72:	2000      	movs	r0, #0
    8a74:	601a      	str	r2, [r3, #0]
}
    8a76:	bd08      	pop	{r3, pc}
    8a78:	aaaaaaab 	.word	0xaaaaaaab

00008a7c <sm_set_pool>:
{
    8a7c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    8a7e:	4604      	mov	r4, r0
    8a80:	b338      	cbz	r0, 8ad2 <sm_set_pool+0x56>
	if (!new_pool || !new_pool_size) {
    8a82:	b119      	cbz	r1, 8a8c <sm_set_pool+0x10>
    8a84:	fab2 f682 	clz	r6, r2
    8a88:	0976      	lsrs	r6, r6, #5
    8a8a:	b9a2      	cbnz	r2, 8ab6 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    8a8c:	6820      	ldr	r0, [r4, #0]
    8a8e:	b300      	cbz	r0, 8ad2 <sm_set_pool+0x56>
    8a90:	6862      	ldr	r2, [r4, #4]
    8a92:	b1f2      	cbz	r2, 8ad2 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    8a94:	4b18      	ldr	r3, [pc, #96]	; (8af8 <sm_set_pool+0x7c>)
    8a96:	4919      	ldr	r1, [pc, #100]	; (8afc <sm_set_pool+0x80>)
    8a98:	fb02 f303 	mul.w	r3, r2, r3
    8a9c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    8aa0:	d317      	bcc.n	8ad2 <sm_set_pool+0x56>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    8aa2:	68a3      	ldr	r3, [r4, #8]
    8aa4:	b9e3      	cbnz	r3, 8ae0 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    8aa6:	2200      	movs	r2, #0
			return 1;
    8aa8:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    8aaa:	6022      	str	r2, [r4, #0]
    8aac:	6062      	str	r2, [r4, #4]
    8aae:	60a2      	str	r2, [r4, #8]
    8ab0:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    8ab2:	4618      	mov	r0, r3
    8ab4:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    8ab6:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    8ab8:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    8aba:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    8abe:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    8ac0:	f7ff ffb6 	bl	8a30 <sm_align_pool>
    8ac4:	4603      	mov	r3, r0
    8ac6:	2800      	cmp	r0, #0
    8ac8:	d0f3      	beq.n	8ab2 <sm_set_pool+0x36>
	if (do_zero) {
    8aca:	b96d      	cbnz	r5, 8ae8 <sm_set_pool+0x6c>
	return 1;
    8acc:	2301      	movs	r3, #1
}
    8ace:	4618      	mov	r0, r3
    8ad0:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    8ad2:	f001 f97d 	bl	9dd0 <__errno>
    8ad6:	2216      	movs	r2, #22
		return 0;
    8ad8:	2300      	movs	r3, #0
		errno = EINVAL;
    8ada:	6002      	str	r2, [r0, #0]
}
    8adc:	4618      	mov	r0, r3
    8ade:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    8ae0:	2100      	movs	r1, #0
    8ae2:	f001 f81f 	bl	9b24 <memset>
    8ae6:	e7de      	b.n	8aa6 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    8ae8:	6862      	ldr	r2, [r4, #4]
    8aea:	4631      	mov	r1, r6
    8aec:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    8aee:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    8af0:	f001 f818 	bl	9b24 <memset>
	return 1;
    8af4:	2301      	movs	r3, #1
    8af6:	e7dc      	b.n	8ab2 <sm_set_pool+0x36>
    8af8:	aaaaaaab 	.word	0xaaaaaaab
    8afc:	15555555 	.word	0x15555555

00008b00 <__aeabi_atexit>:
    8b00:	4603      	mov	r3, r0
    8b02:	4608      	mov	r0, r1
    8b04:	4619      	mov	r1, r3
    8b06:	f000 be27 	b.w	9758 <__cxa_atexit>
    8b0a:	bf00      	nop

00008b0c <atol>:
    8b0c:	220a      	movs	r2, #10
    8b0e:	2100      	movs	r1, #0
    8b10:	f000 bd66 	b.w	95e0 <strtol>

00008b14 <malloc>:
    8b14:	4b02      	ldr	r3, [pc, #8]	; (8b20 <malloc+0xc>)
    8b16:	4601      	mov	r1, r0
    8b18:	6818      	ldr	r0, [r3, #0]
    8b1a:	f000 b80b 	b.w	8b34 <_malloc_r>
    8b1e:	bf00      	nop
    8b20:	20004754 	.word	0x20004754

00008b24 <free>:
    8b24:	4b02      	ldr	r3, [pc, #8]	; (8b30 <free+0xc>)
    8b26:	4601      	mov	r1, r0
    8b28:	6818      	ldr	r0, [r3, #0]
    8b2a:	f001 bc6b 	b.w	a404 <_free_r>
    8b2e:	bf00      	nop
    8b30:	20004754 	.word	0x20004754

00008b34 <_malloc_r>:
    8b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b38:	f101 060b 	add.w	r6, r1, #11
    8b3c:	2e16      	cmp	r6, #22
    8b3e:	b083      	sub	sp, #12
    8b40:	4604      	mov	r4, r0
    8b42:	d824      	bhi.n	8b8e <_malloc_r+0x5a>
    8b44:	2910      	cmp	r1, #16
    8b46:	f200 80ba 	bhi.w	8cbe <_malloc_r+0x18a>
    8b4a:	f000 faa3 	bl	9094 <__malloc_lock>
    8b4e:	2610      	movs	r6, #16
    8b50:	2218      	movs	r2, #24
    8b52:	2002      	movs	r0, #2
    8b54:	4fb5      	ldr	r7, [pc, #724]	; (8e2c <_malloc_r+0x2f8>)
    8b56:	443a      	add	r2, r7
    8b58:	f1a2 0108 	sub.w	r1, r2, #8
    8b5c:	6853      	ldr	r3, [r2, #4]
    8b5e:	428b      	cmp	r3, r1
    8b60:	f000 80ba 	beq.w	8cd8 <_malloc_r+0x1a4>
    8b64:	685a      	ldr	r2, [r3, #4]
    8b66:	68d9      	ldr	r1, [r3, #12]
    8b68:	f022 0203 	bic.w	r2, r2, #3
    8b6c:	441a      	add	r2, r3
    8b6e:	689d      	ldr	r5, [r3, #8]
    8b70:	60e9      	str	r1, [r5, #12]
    8b72:	608d      	str	r5, [r1, #8]
    8b74:	6851      	ldr	r1, [r2, #4]
    8b76:	f041 0101 	orr.w	r1, r1, #1
    8b7a:	4620      	mov	r0, r4
    8b7c:	6051      	str	r1, [r2, #4]
    8b7e:	f103 0508 	add.w	r5, r3, #8
    8b82:	f000 fa8d 	bl	90a0 <__malloc_unlock>
    8b86:	4628      	mov	r0, r5
    8b88:	b003      	add	sp, #12
    8b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b8e:	f036 0607 	bics.w	r6, r6, #7
    8b92:	f100 8094 	bmi.w	8cbe <_malloc_r+0x18a>
    8b96:	42b1      	cmp	r1, r6
    8b98:	f200 8091 	bhi.w	8cbe <_malloc_r+0x18a>
    8b9c:	f000 fa7a 	bl	9094 <__malloc_lock>
    8ba0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    8ba4:	f0c0 819a 	bcc.w	8edc <_malloc_r+0x3a8>
    8ba8:	0a73      	lsrs	r3, r6, #9
    8baa:	f000 808f 	beq.w	8ccc <_malloc_r+0x198>
    8bae:	2b04      	cmp	r3, #4
    8bb0:	f200 816f 	bhi.w	8e92 <_malloc_r+0x35e>
    8bb4:	09b3      	lsrs	r3, r6, #6
    8bb6:	f103 0039 	add.w	r0, r3, #57	; 0x39
    8bba:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    8bbe:	00c3      	lsls	r3, r0, #3
    8bc0:	4f9a      	ldr	r7, [pc, #616]	; (8e2c <_malloc_r+0x2f8>)
    8bc2:	443b      	add	r3, r7
    8bc4:	f1a3 0508 	sub.w	r5, r3, #8
    8bc8:	685b      	ldr	r3, [r3, #4]
    8bca:	429d      	cmp	r5, r3
    8bcc:	d106      	bne.n	8bdc <_malloc_r+0xa8>
    8bce:	e00c      	b.n	8bea <_malloc_r+0xb6>
    8bd0:	2900      	cmp	r1, #0
    8bd2:	f280 8127 	bge.w	8e24 <_malloc_r+0x2f0>
    8bd6:	68db      	ldr	r3, [r3, #12]
    8bd8:	429d      	cmp	r5, r3
    8bda:	d006      	beq.n	8bea <_malloc_r+0xb6>
    8bdc:	685a      	ldr	r2, [r3, #4]
    8bde:	f022 0203 	bic.w	r2, r2, #3
    8be2:	1b91      	subs	r1, r2, r6
    8be4:	290f      	cmp	r1, #15
    8be6:	ddf3      	ble.n	8bd0 <_malloc_r+0x9c>
    8be8:	4660      	mov	r0, ip
    8bea:	693d      	ldr	r5, [r7, #16]
    8bec:	f8df c250 	ldr.w	ip, [pc, #592]	; 8e40 <_malloc_r+0x30c>
    8bf0:	4565      	cmp	r5, ip
    8bf2:	d07c      	beq.n	8cee <_malloc_r+0x1ba>
    8bf4:	686a      	ldr	r2, [r5, #4]
    8bf6:	f022 0203 	bic.w	r2, r2, #3
    8bfa:	1b93      	subs	r3, r2, r6
    8bfc:	2b0f      	cmp	r3, #15
    8bfe:	f300 817b 	bgt.w	8ef8 <_malloc_r+0x3c4>
    8c02:	2b00      	cmp	r3, #0
    8c04:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    8c08:	f280 816c 	bge.w	8ee4 <_malloc_r+0x3b0>
    8c0c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    8c10:	f080 811a 	bcs.w	8e48 <_malloc_r+0x314>
    8c14:	08d3      	lsrs	r3, r2, #3
    8c16:	6879      	ldr	r1, [r7, #4]
    8c18:	3301      	adds	r3, #1
    8c1a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    8c1e:	2201      	movs	r2, #1
    8c20:	fa02 f20e 	lsl.w	r2, r2, lr
    8c24:	430a      	orrs	r2, r1
    8c26:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    8c2a:	f8c5 e008 	str.w	lr, [r5, #8]
    8c2e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    8c32:	3908      	subs	r1, #8
    8c34:	60e9      	str	r1, [r5, #12]
    8c36:	607a      	str	r2, [r7, #4]
    8c38:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    8c3c:	f8ce 500c 	str.w	r5, [lr, #12]
    8c40:	1083      	asrs	r3, r0, #2
    8c42:	2101      	movs	r1, #1
    8c44:	4099      	lsls	r1, r3
    8c46:	4291      	cmp	r1, r2
    8c48:	d857      	bhi.n	8cfa <_malloc_r+0x1c6>
    8c4a:	4211      	tst	r1, r2
    8c4c:	d106      	bne.n	8c5c <_malloc_r+0x128>
    8c4e:	f020 0003 	bic.w	r0, r0, #3
    8c52:	0049      	lsls	r1, r1, #1
    8c54:	4211      	tst	r1, r2
    8c56:	f100 0004 	add.w	r0, r0, #4
    8c5a:	d0fa      	beq.n	8c52 <_malloc_r+0x11e>
    8c5c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    8c60:	464d      	mov	r5, r9
    8c62:	4686      	mov	lr, r0
    8c64:	f8d5 800c 	ldr.w	r8, [r5, #12]
    8c68:	4545      	cmp	r5, r8
    8c6a:	d108      	bne.n	8c7e <_malloc_r+0x14a>
    8c6c:	e11d      	b.n	8eaa <_malloc_r+0x376>
    8c6e:	2b00      	cmp	r3, #0
    8c70:	f280 8124 	bge.w	8ebc <_malloc_r+0x388>
    8c74:	f8d8 800c 	ldr.w	r8, [r8, #12]
    8c78:	4545      	cmp	r5, r8
    8c7a:	f000 8116 	beq.w	8eaa <_malloc_r+0x376>
    8c7e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    8c82:	f022 0203 	bic.w	r2, r2, #3
    8c86:	1b93      	subs	r3, r2, r6
    8c88:	2b0f      	cmp	r3, #15
    8c8a:	ddf0      	ble.n	8c6e <_malloc_r+0x13a>
    8c8c:	4620      	mov	r0, r4
    8c8e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    8c92:	eb08 0106 	add.w	r1, r8, r6
    8c96:	f046 0601 	orr.w	r6, r6, #1
    8c9a:	f8c8 6004 	str.w	r6, [r8, #4]
    8c9e:	60ec      	str	r4, [r5, #12]
    8ca0:	60a5      	str	r5, [r4, #8]
    8ca2:	f043 0401 	orr.w	r4, r3, #1
    8ca6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    8caa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    8cae:	604c      	str	r4, [r1, #4]
    8cb0:	f848 3002 	str.w	r3, [r8, r2]
    8cb4:	f000 f9f4 	bl	90a0 <__malloc_unlock>
    8cb8:	f108 0508 	add.w	r5, r8, #8
    8cbc:	e002      	b.n	8cc4 <_malloc_r+0x190>
    8cbe:	230c      	movs	r3, #12
    8cc0:	6023      	str	r3, [r4, #0]
    8cc2:	2500      	movs	r5, #0
    8cc4:	4628      	mov	r0, r5
    8cc6:	b003      	add	sp, #12
    8cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
    8cd0:	2040      	movs	r0, #64	; 0x40
    8cd2:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    8cd6:	e773      	b.n	8bc0 <_malloc_r+0x8c>
    8cd8:	68d3      	ldr	r3, [r2, #12]
    8cda:	429a      	cmp	r2, r3
    8cdc:	bf08      	it	eq
    8cde:	3002      	addeq	r0, #2
    8ce0:	f47f af40 	bne.w	8b64 <_malloc_r+0x30>
    8ce4:	693d      	ldr	r5, [r7, #16]
    8ce6:	f8df c158 	ldr.w	ip, [pc, #344]	; 8e40 <_malloc_r+0x30c>
    8cea:	4565      	cmp	r5, ip
    8cec:	d182      	bne.n	8bf4 <_malloc_r+0xc0>
    8cee:	687a      	ldr	r2, [r7, #4]
    8cf0:	1083      	asrs	r3, r0, #2
    8cf2:	2101      	movs	r1, #1
    8cf4:	4099      	lsls	r1, r3
    8cf6:	4291      	cmp	r1, r2
    8cf8:	d9a7      	bls.n	8c4a <_malloc_r+0x116>
    8cfa:	68bd      	ldr	r5, [r7, #8]
    8cfc:	686b      	ldr	r3, [r5, #4]
    8cfe:	f023 0903 	bic.w	r9, r3, #3
    8d02:	454e      	cmp	r6, r9
    8d04:	d803      	bhi.n	8d0e <_malloc_r+0x1da>
    8d06:	eba9 0306 	sub.w	r3, r9, r6
    8d0a:	2b0f      	cmp	r3, #15
    8d0c:	dc7a      	bgt.n	8e04 <_malloc_r+0x2d0>
    8d0e:	f8df b134 	ldr.w	fp, [pc, #308]	; 8e44 <_malloc_r+0x310>
    8d12:	4b47      	ldr	r3, [pc, #284]	; (8e30 <_malloc_r+0x2fc>)
    8d14:	f8db 2000 	ldr.w	r2, [fp]
    8d18:	681b      	ldr	r3, [r3, #0]
    8d1a:	3201      	adds	r2, #1
    8d1c:	4433      	add	r3, r6
    8d1e:	eb05 0a09 	add.w	sl, r5, r9
    8d22:	f000 8133 	beq.w	8f8c <_malloc_r+0x458>
    8d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    8d2a:	330f      	adds	r3, #15
    8d2c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    8d30:	f028 080f 	bic.w	r8, r8, #15
    8d34:	4641      	mov	r1, r8
    8d36:	4620      	mov	r0, r4
    8d38:	f001 f822 	bl	9d80 <_sbrk_r>
    8d3c:	1c41      	adds	r1, r0, #1
    8d3e:	4602      	mov	r2, r0
    8d40:	f000 80f3 	beq.w	8f2a <_malloc_r+0x3f6>
    8d44:	4582      	cmp	sl, r0
    8d46:	f200 80ee 	bhi.w	8f26 <_malloc_r+0x3f2>
    8d4a:	4b3a      	ldr	r3, [pc, #232]	; (8e34 <_malloc_r+0x300>)
    8d4c:	6819      	ldr	r1, [r3, #0]
    8d4e:	4441      	add	r1, r8
    8d50:	6019      	str	r1, [r3, #0]
    8d52:	4608      	mov	r0, r1
    8d54:	f000 814e 	beq.w	8ff4 <_malloc_r+0x4c0>
    8d58:	f8db 1000 	ldr.w	r1, [fp]
    8d5c:	9301      	str	r3, [sp, #4]
    8d5e:	3101      	adds	r1, #1
    8d60:	bf1b      	ittet	ne
    8d62:	eba2 010a 	subne.w	r1, r2, sl
    8d66:	1809      	addne	r1, r1, r0
    8d68:	f8cb 2000 	streq.w	r2, [fp]
    8d6c:	6019      	strne	r1, [r3, #0]
    8d6e:	f012 0b07 	ands.w	fp, r2, #7
    8d72:	f000 8117 	beq.w	8fa4 <_malloc_r+0x470>
    8d76:	f1cb 0108 	rsb	r1, fp, #8
    8d7a:	440a      	add	r2, r1
    8d7c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    8d80:	4490      	add	r8, r2
    8d82:	3108      	adds	r1, #8
    8d84:	eba1 0108 	sub.w	r1, r1, r8
    8d88:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    8d8c:	4651      	mov	r1, sl
    8d8e:	4620      	mov	r0, r4
    8d90:	9200      	str	r2, [sp, #0]
    8d92:	f000 fff5 	bl	9d80 <_sbrk_r>
    8d96:	1c42      	adds	r2, r0, #1
    8d98:	e9dd 2300 	ldrd	r2, r3, [sp]
    8d9c:	f000 814f 	beq.w	903e <_malloc_r+0x50a>
    8da0:	1a80      	subs	r0, r0, r2
    8da2:	eb00 080a 	add.w	r8, r0, sl
    8da6:	6819      	ldr	r1, [r3, #0]
    8da8:	60ba      	str	r2, [r7, #8]
    8daa:	f048 0001 	orr.w	r0, r8, #1
    8dae:	4451      	add	r1, sl
    8db0:	42bd      	cmp	r5, r7
    8db2:	6050      	str	r0, [r2, #4]
    8db4:	6019      	str	r1, [r3, #0]
    8db6:	f000 8129 	beq.w	900c <_malloc_r+0x4d8>
    8dba:	f1b9 0f0f 	cmp.w	r9, #15
    8dbe:	f240 8127 	bls.w	9010 <_malloc_r+0x4dc>
    8dc2:	6868      	ldr	r0, [r5, #4]
    8dc4:	f1a9 0c0c 	sub.w	ip, r9, #12
    8dc8:	f02c 0c07 	bic.w	ip, ip, #7
    8dcc:	f000 0001 	and.w	r0, r0, #1
    8dd0:	ea40 000c 	orr.w	r0, r0, ip
    8dd4:	6068      	str	r0, [r5, #4]
    8dd6:	f04f 0e05 	mov.w	lr, #5
    8dda:	eb05 000c 	add.w	r0, r5, ip
    8dde:	f1bc 0f0f 	cmp.w	ip, #15
    8de2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    8de6:	f200 8132 	bhi.w	904e <_malloc_r+0x51a>
    8dea:	6850      	ldr	r0, [r2, #4]
    8dec:	4615      	mov	r5, r2
    8dee:	4b12      	ldr	r3, [pc, #72]	; (8e38 <_malloc_r+0x304>)
    8df0:	681a      	ldr	r2, [r3, #0]
    8df2:	428a      	cmp	r2, r1
    8df4:	bf38      	it	cc
    8df6:	6019      	strcc	r1, [r3, #0]
    8df8:	4b10      	ldr	r3, [pc, #64]	; (8e3c <_malloc_r+0x308>)
    8dfa:	681a      	ldr	r2, [r3, #0]
    8dfc:	428a      	cmp	r2, r1
    8dfe:	bf38      	it	cc
    8e00:	6019      	strcc	r1, [r3, #0]
    8e02:	e094      	b.n	8f2e <_malloc_r+0x3fa>
    8e04:	19aa      	adds	r2, r5, r6
    8e06:	f043 0301 	orr.w	r3, r3, #1
    8e0a:	f046 0601 	orr.w	r6, r6, #1
    8e0e:	606e      	str	r6, [r5, #4]
    8e10:	4620      	mov	r0, r4
    8e12:	60ba      	str	r2, [r7, #8]
    8e14:	6053      	str	r3, [r2, #4]
    8e16:	f000 f943 	bl	90a0 <__malloc_unlock>
    8e1a:	3508      	adds	r5, #8
    8e1c:	4628      	mov	r0, r5
    8e1e:	b003      	add	sp, #12
    8e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e24:	68d9      	ldr	r1, [r3, #12]
    8e26:	441a      	add	r2, r3
    8e28:	e6a1      	b.n	8b6e <_malloc_r+0x3a>
    8e2a:	bf00      	nop
    8e2c:	20004338 	.word	0x20004338
    8e30:	20004e88 	.word	0x20004e88
    8e34:	20004e58 	.word	0x20004e58
    8e38:	20004e80 	.word	0x20004e80
    8e3c:	20004e84 	.word	0x20004e84
    8e40:	20004340 	.word	0x20004340
    8e44:	20004740 	.word	0x20004740
    8e48:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    8e4c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    8e50:	d363      	bcc.n	8f1a <_malloc_r+0x3e6>
    8e52:	2b14      	cmp	r3, #20
    8e54:	f200 80b7 	bhi.w	8fc6 <_malloc_r+0x492>
    8e58:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    8e5c:	00c9      	lsls	r1, r1, #3
    8e5e:	335b      	adds	r3, #91	; 0x5b
    8e60:	eb07 0e01 	add.w	lr, r7, r1
    8e64:	5879      	ldr	r1, [r7, r1]
    8e66:	f1ae 0e08 	sub.w	lr, lr, #8
    8e6a:	458e      	cmp	lr, r1
    8e6c:	f000 8091 	beq.w	8f92 <_malloc_r+0x45e>
    8e70:	684b      	ldr	r3, [r1, #4]
    8e72:	f023 0303 	bic.w	r3, r3, #3
    8e76:	4293      	cmp	r3, r2
    8e78:	d902      	bls.n	8e80 <_malloc_r+0x34c>
    8e7a:	6889      	ldr	r1, [r1, #8]
    8e7c:	458e      	cmp	lr, r1
    8e7e:	d1f7      	bne.n	8e70 <_malloc_r+0x33c>
    8e80:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    8e84:	687a      	ldr	r2, [r7, #4]
    8e86:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    8e8a:	f8ce 5008 	str.w	r5, [lr, #8]
    8e8e:	60cd      	str	r5, [r1, #12]
    8e90:	e6d6      	b.n	8c40 <_malloc_r+0x10c>
    8e92:	2b14      	cmp	r3, #20
    8e94:	d959      	bls.n	8f4a <_malloc_r+0x416>
    8e96:	2b54      	cmp	r3, #84	; 0x54
    8e98:	f200 809d 	bhi.w	8fd6 <_malloc_r+0x4a2>
    8e9c:	0b33      	lsrs	r3, r6, #12
    8e9e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    8ea2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    8ea6:	00c3      	lsls	r3, r0, #3
    8ea8:	e68a      	b.n	8bc0 <_malloc_r+0x8c>
    8eaa:	f10e 0e01 	add.w	lr, lr, #1
    8eae:	f01e 0f03 	tst.w	lr, #3
    8eb2:	f105 0508 	add.w	r5, r5, #8
    8eb6:	f47f aed5 	bne.w	8c64 <_malloc_r+0x130>
    8eba:	e051      	b.n	8f60 <_malloc_r+0x42c>
    8ebc:	4442      	add	r2, r8
    8ebe:	4645      	mov	r5, r8
    8ec0:	6853      	ldr	r3, [r2, #4]
    8ec2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    8ec6:	f043 0301 	orr.w	r3, r3, #1
    8eca:	6053      	str	r3, [r2, #4]
    8ecc:	f855 3f08 	ldr.w	r3, [r5, #8]!
    8ed0:	4620      	mov	r0, r4
    8ed2:	60d9      	str	r1, [r3, #12]
    8ed4:	608b      	str	r3, [r1, #8]
    8ed6:	f000 f8e3 	bl	90a0 <__malloc_unlock>
    8eda:	e6f3      	b.n	8cc4 <_malloc_r+0x190>
    8edc:	08f0      	lsrs	r0, r6, #3
    8ede:	f106 0208 	add.w	r2, r6, #8
    8ee2:	e637      	b.n	8b54 <_malloc_r+0x20>
    8ee4:	442a      	add	r2, r5
    8ee6:	4620      	mov	r0, r4
    8ee8:	6853      	ldr	r3, [r2, #4]
    8eea:	f043 0301 	orr.w	r3, r3, #1
    8eee:	6053      	str	r3, [r2, #4]
    8ef0:	3508      	adds	r5, #8
    8ef2:	f000 f8d5 	bl	90a0 <__malloc_unlock>
    8ef6:	e6e5      	b.n	8cc4 <_malloc_r+0x190>
    8ef8:	19a9      	adds	r1, r5, r6
    8efa:	4620      	mov	r0, r4
    8efc:	f046 0601 	orr.w	r6, r6, #1
    8f00:	f043 0401 	orr.w	r4, r3, #1
    8f04:	606e      	str	r6, [r5, #4]
    8f06:	e9c7 1104 	strd	r1, r1, [r7, #16]
    8f0a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    8f0e:	604c      	str	r4, [r1, #4]
    8f10:	50ab      	str	r3, [r5, r2]
    8f12:	f000 f8c5 	bl	90a0 <__malloc_unlock>
    8f16:	3508      	adds	r5, #8
    8f18:	e6d4      	b.n	8cc4 <_malloc_r+0x190>
    8f1a:	0993      	lsrs	r3, r2, #6
    8f1c:	f103 0139 	add.w	r1, r3, #57	; 0x39
    8f20:	00c9      	lsls	r1, r1, #3
    8f22:	3338      	adds	r3, #56	; 0x38
    8f24:	e79c      	b.n	8e60 <_malloc_r+0x32c>
    8f26:	42bd      	cmp	r5, r7
    8f28:	d05f      	beq.n	8fea <_malloc_r+0x4b6>
    8f2a:	68bd      	ldr	r5, [r7, #8]
    8f2c:	6868      	ldr	r0, [r5, #4]
    8f2e:	f020 0803 	bic.w	r8, r0, #3
    8f32:	4546      	cmp	r6, r8
    8f34:	eba8 0306 	sub.w	r3, r8, r6
    8f38:	d802      	bhi.n	8f40 <_malloc_r+0x40c>
    8f3a:	2b0f      	cmp	r3, #15
    8f3c:	f73f af62 	bgt.w	8e04 <_malloc_r+0x2d0>
    8f40:	4620      	mov	r0, r4
    8f42:	f000 f8ad 	bl	90a0 <__malloc_unlock>
    8f46:	2500      	movs	r5, #0
    8f48:	e6bc      	b.n	8cc4 <_malloc_r+0x190>
    8f4a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    8f4e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    8f52:	00c3      	lsls	r3, r0, #3
    8f54:	e634      	b.n	8bc0 <_malloc_r+0x8c>
    8f56:	f859 3908 	ldr.w	r3, [r9], #-8
    8f5a:	454b      	cmp	r3, r9
    8f5c:	f040 8096 	bne.w	908c <_malloc_r+0x558>
    8f60:	f010 0f03 	tst.w	r0, #3
    8f64:	f100 30ff 	add.w	r0, r0, #4294967295
    8f68:	d1f5      	bne.n	8f56 <_malloc_r+0x422>
    8f6a:	687b      	ldr	r3, [r7, #4]
    8f6c:	ea23 0301 	bic.w	r3, r3, r1
    8f70:	607b      	str	r3, [r7, #4]
    8f72:	0049      	lsls	r1, r1, #1
    8f74:	4299      	cmp	r1, r3
    8f76:	f63f aec0 	bhi.w	8cfa <_malloc_r+0x1c6>
    8f7a:	b919      	cbnz	r1, 8f84 <_malloc_r+0x450>
    8f7c:	e6bd      	b.n	8cfa <_malloc_r+0x1c6>
    8f7e:	0049      	lsls	r1, r1, #1
    8f80:	f10e 0e04 	add.w	lr, lr, #4
    8f84:	4219      	tst	r1, r3
    8f86:	d0fa      	beq.n	8f7e <_malloc_r+0x44a>
    8f88:	4670      	mov	r0, lr
    8f8a:	e667      	b.n	8c5c <_malloc_r+0x128>
    8f8c:	f103 0810 	add.w	r8, r3, #16
    8f90:	e6d0      	b.n	8d34 <_malloc_r+0x200>
    8f92:	109a      	asrs	r2, r3, #2
    8f94:	f04f 0801 	mov.w	r8, #1
    8f98:	687b      	ldr	r3, [r7, #4]
    8f9a:	fa08 f202 	lsl.w	r2, r8, r2
    8f9e:	431a      	orrs	r2, r3
    8fa0:	607a      	str	r2, [r7, #4]
    8fa2:	e770      	b.n	8e86 <_malloc_r+0x352>
    8fa4:	eb02 0108 	add.w	r1, r2, r8
    8fa8:	4249      	negs	r1, r1
    8faa:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    8fae:	4651      	mov	r1, sl
    8fb0:	4620      	mov	r0, r4
    8fb2:	9200      	str	r2, [sp, #0]
    8fb4:	f000 fee4 	bl	9d80 <_sbrk_r>
    8fb8:	1c43      	adds	r3, r0, #1
    8fba:	e9dd 2300 	ldrd	r2, r3, [sp]
    8fbe:	f47f aeef 	bne.w	8da0 <_malloc_r+0x26c>
    8fc2:	46da      	mov	sl, fp
    8fc4:	e6ef      	b.n	8da6 <_malloc_r+0x272>
    8fc6:	2b54      	cmp	r3, #84	; 0x54
    8fc8:	d825      	bhi.n	9016 <_malloc_r+0x4e2>
    8fca:	0b13      	lsrs	r3, r2, #12
    8fcc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    8fd0:	00c9      	lsls	r1, r1, #3
    8fd2:	336e      	adds	r3, #110	; 0x6e
    8fd4:	e744      	b.n	8e60 <_malloc_r+0x32c>
    8fd6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    8fda:	d825      	bhi.n	9028 <_malloc_r+0x4f4>
    8fdc:	0bf3      	lsrs	r3, r6, #15
    8fde:	f103 0078 	add.w	r0, r3, #120	; 0x78
    8fe2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    8fe6:	00c3      	lsls	r3, r0, #3
    8fe8:	e5ea      	b.n	8bc0 <_malloc_r+0x8c>
    8fea:	4b29      	ldr	r3, [pc, #164]	; (9090 <_malloc_r+0x55c>)
    8fec:	6818      	ldr	r0, [r3, #0]
    8fee:	4440      	add	r0, r8
    8ff0:	6018      	str	r0, [r3, #0]
    8ff2:	e6b1      	b.n	8d58 <_malloc_r+0x224>
    8ff4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    8ff8:	f1bc 0f00 	cmp.w	ip, #0
    8ffc:	f47f aeac 	bne.w	8d58 <_malloc_r+0x224>
    9000:	68bd      	ldr	r5, [r7, #8]
    9002:	44c8      	add	r8, r9
    9004:	f048 0001 	orr.w	r0, r8, #1
    9008:	6068      	str	r0, [r5, #4]
    900a:	e6f0      	b.n	8dee <_malloc_r+0x2ba>
    900c:	4615      	mov	r5, r2
    900e:	e6ee      	b.n	8dee <_malloc_r+0x2ba>
    9010:	2301      	movs	r3, #1
    9012:	6053      	str	r3, [r2, #4]
    9014:	e794      	b.n	8f40 <_malloc_r+0x40c>
    9016:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    901a:	d823      	bhi.n	9064 <_malloc_r+0x530>
    901c:	0bd3      	lsrs	r3, r2, #15
    901e:	f103 0178 	add.w	r1, r3, #120	; 0x78
    9022:	00c9      	lsls	r1, r1, #3
    9024:	3377      	adds	r3, #119	; 0x77
    9026:	e71b      	b.n	8e60 <_malloc_r+0x32c>
    9028:	f240 5254 	movw	r2, #1364	; 0x554
    902c:	4293      	cmp	r3, r2
    902e:	d823      	bhi.n	9078 <_malloc_r+0x544>
    9030:	0cb3      	lsrs	r3, r6, #18
    9032:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    9036:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    903a:	00c3      	lsls	r3, r0, #3
    903c:	e5c0      	b.n	8bc0 <_malloc_r+0x8c>
    903e:	f1ab 0b08 	sub.w	fp, fp, #8
    9042:	44d8      	add	r8, fp
    9044:	eba8 0802 	sub.w	r8, r8, r2
    9048:	f04f 0a00 	mov.w	sl, #0
    904c:	e6ab      	b.n	8da6 <_malloc_r+0x272>
    904e:	f105 0108 	add.w	r1, r5, #8
    9052:	4620      	mov	r0, r4
    9054:	9300      	str	r3, [sp, #0]
    9056:	f001 f9d5 	bl	a404 <_free_r>
    905a:	68bd      	ldr	r5, [r7, #8]
    905c:	9b00      	ldr	r3, [sp, #0]
    905e:	6868      	ldr	r0, [r5, #4]
    9060:	6819      	ldr	r1, [r3, #0]
    9062:	e6c4      	b.n	8dee <_malloc_r+0x2ba>
    9064:	f240 5154 	movw	r1, #1364	; 0x554
    9068:	428b      	cmp	r3, r1
    906a:	d80b      	bhi.n	9084 <_malloc_r+0x550>
    906c:	0c93      	lsrs	r3, r2, #18
    906e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    9072:	00c9      	lsls	r1, r1, #3
    9074:	337c      	adds	r3, #124	; 0x7c
    9076:	e6f3      	b.n	8e60 <_malloc_r+0x32c>
    9078:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    907c:	207f      	movs	r0, #127	; 0x7f
    907e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    9082:	e59d      	b.n	8bc0 <_malloc_r+0x8c>
    9084:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    9088:	237e      	movs	r3, #126	; 0x7e
    908a:	e6e9      	b.n	8e60 <_malloc_r+0x32c>
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	e770      	b.n	8f72 <_malloc_r+0x43e>
    9090:	20004e58 	.word	0x20004e58

00009094 <__malloc_lock>:
    9094:	4801      	ldr	r0, [pc, #4]	; (909c <__malloc_lock+0x8>)
    9096:	f000 bec9 	b.w	9e2c <__retarget_lock_acquire_recursive>
    909a:	bf00      	nop
    909c:	20004e50 	.word	0x20004e50

000090a0 <__malloc_unlock>:
    90a0:	4801      	ldr	r0, [pc, #4]	; (90a8 <__malloc_unlock+0x8>)
    90a2:	f000 bec5 	b.w	9e30 <__retarget_lock_release_recursive>
    90a6:	bf00      	nop
    90a8:	20004e50 	.word	0x20004e50

000090ac <realloc>:
    90ac:	b410      	push	{r4}
    90ae:	4c04      	ldr	r4, [pc, #16]	; (90c0 <realloc+0x14>)
    90b0:	4603      	mov	r3, r0
    90b2:	460a      	mov	r2, r1
    90b4:	6820      	ldr	r0, [r4, #0]
    90b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    90ba:	4619      	mov	r1, r3
    90bc:	f000 b802 	b.w	90c4 <_realloc_r>
    90c0:	20004754 	.word	0x20004754

000090c4 <_realloc_r>:
    90c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90c8:	4617      	mov	r7, r2
    90ca:	2900      	cmp	r1, #0
    90cc:	f000 8098 	beq.w	9200 <_realloc_r+0x13c>
    90d0:	460c      	mov	r4, r1
    90d2:	f107 050b 	add.w	r5, r7, #11
    90d6:	4680      	mov	r8, r0
    90d8:	f7ff ffdc 	bl	9094 <__malloc_lock>
    90dc:	2d16      	cmp	r5, #22
    90de:	f854 1c04 	ldr.w	r1, [r4, #-4]
    90e2:	d85b      	bhi.n	919c <_realloc_r+0xd8>
    90e4:	2510      	movs	r5, #16
    90e6:	462a      	mov	r2, r5
    90e8:	42af      	cmp	r7, r5
    90ea:	d85c      	bhi.n	91a6 <_realloc_r+0xe2>
    90ec:	f021 0603 	bic.w	r6, r1, #3
    90f0:	4296      	cmp	r6, r2
    90f2:	f1a4 0908 	sub.w	r9, r4, #8
    90f6:	da62      	bge.n	91be <_realloc_r+0xfa>
    90f8:	4bbc      	ldr	r3, [pc, #752]	; (93ec <_realloc_r+0x328>)
    90fa:	f8d3 c008 	ldr.w	ip, [r3, #8]
    90fe:	eb09 0006 	add.w	r0, r9, r6
    9102:	4584      	cmp	ip, r0
    9104:	f000 8097 	beq.w	9236 <_realloc_r+0x172>
    9108:	f8d0 c004 	ldr.w	ip, [r0, #4]
    910c:	f02c 0301 	bic.w	r3, ip, #1
    9110:	4403      	add	r3, r0
    9112:	685b      	ldr	r3, [r3, #4]
    9114:	07db      	lsls	r3, r3, #31
    9116:	d468      	bmi.n	91ea <_realloc_r+0x126>
    9118:	f02c 0c03 	bic.w	ip, ip, #3
    911c:	eb06 030c 	add.w	r3, r6, ip
    9120:	4293      	cmp	r3, r2
    9122:	da47      	bge.n	91b4 <_realloc_r+0xf0>
    9124:	07cb      	lsls	r3, r1, #31
    9126:	d410      	bmi.n	914a <_realloc_r+0x86>
    9128:	f854 3c08 	ldr.w	r3, [r4, #-8]
    912c:	eba9 0a03 	sub.w	sl, r9, r3
    9130:	f8da 3004 	ldr.w	r3, [sl, #4]
    9134:	f023 0103 	bic.w	r1, r3, #3
    9138:	448c      	add	ip, r1
    913a:	44b4      	add	ip, r6
    913c:	4594      	cmp	ip, r2
    913e:	f280 8111 	bge.w	9364 <_realloc_r+0x2a0>
    9142:	1873      	adds	r3, r6, r1
    9144:	4293      	cmp	r3, r2
    9146:	f280 80e8 	bge.w	931a <_realloc_r+0x256>
    914a:	4639      	mov	r1, r7
    914c:	4640      	mov	r0, r8
    914e:	f7ff fcf1 	bl	8b34 <_malloc_r>
    9152:	4607      	mov	r7, r0
    9154:	b1e0      	cbz	r0, 9190 <_realloc_r+0xcc>
    9156:	f854 3c04 	ldr.w	r3, [r4, #-4]
    915a:	f023 0301 	bic.w	r3, r3, #1
    915e:	444b      	add	r3, r9
    9160:	f1a0 0208 	sub.w	r2, r0, #8
    9164:	4293      	cmp	r3, r2
    9166:	f000 80d2 	beq.w	930e <_realloc_r+0x24a>
    916a:	1f32      	subs	r2, r6, #4
    916c:	2a24      	cmp	r2, #36	; 0x24
    916e:	f200 80f5 	bhi.w	935c <_realloc_r+0x298>
    9172:	2a13      	cmp	r2, #19
    9174:	f200 80ac 	bhi.w	92d0 <_realloc_r+0x20c>
    9178:	4603      	mov	r3, r0
    917a:	4622      	mov	r2, r4
    917c:	6811      	ldr	r1, [r2, #0]
    917e:	6019      	str	r1, [r3, #0]
    9180:	6851      	ldr	r1, [r2, #4]
    9182:	6059      	str	r1, [r3, #4]
    9184:	6892      	ldr	r2, [r2, #8]
    9186:	609a      	str	r2, [r3, #8]
    9188:	4621      	mov	r1, r4
    918a:	4640      	mov	r0, r8
    918c:	f001 f93a 	bl	a404 <_free_r>
    9190:	4640      	mov	r0, r8
    9192:	f7ff ff85 	bl	90a0 <__malloc_unlock>
    9196:	4638      	mov	r0, r7
    9198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    919c:	f025 0507 	bic.w	r5, r5, #7
    91a0:	2d00      	cmp	r5, #0
    91a2:	462a      	mov	r2, r5
    91a4:	daa0      	bge.n	90e8 <_realloc_r+0x24>
    91a6:	230c      	movs	r3, #12
    91a8:	f8c8 3000 	str.w	r3, [r8]
    91ac:	2700      	movs	r7, #0
    91ae:	4638      	mov	r0, r7
    91b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91b4:	461e      	mov	r6, r3
    91b6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    91ba:	60d3      	str	r3, [r2, #12]
    91bc:	609a      	str	r2, [r3, #8]
    91be:	1b73      	subs	r3, r6, r5
    91c0:	2b0f      	cmp	r3, #15
    91c2:	d822      	bhi.n	920a <_realloc_r+0x146>
    91c4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    91c8:	f003 0301 	and.w	r3, r3, #1
    91cc:	4333      	orrs	r3, r6
    91ce:	444e      	add	r6, r9
    91d0:	f8c9 3004 	str.w	r3, [r9, #4]
    91d4:	6873      	ldr	r3, [r6, #4]
    91d6:	f043 0301 	orr.w	r3, r3, #1
    91da:	6073      	str	r3, [r6, #4]
    91dc:	4640      	mov	r0, r8
    91de:	4627      	mov	r7, r4
    91e0:	f7ff ff5e 	bl	90a0 <__malloc_unlock>
    91e4:	4638      	mov	r0, r7
    91e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91ea:	07c9      	lsls	r1, r1, #31
    91ec:	d4ad      	bmi.n	914a <_realloc_r+0x86>
    91ee:	f854 3c08 	ldr.w	r3, [r4, #-8]
    91f2:	eba9 0a03 	sub.w	sl, r9, r3
    91f6:	f8da 1004 	ldr.w	r1, [sl, #4]
    91fa:	f021 0103 	bic.w	r1, r1, #3
    91fe:	e7a0      	b.n	9142 <_realloc_r+0x7e>
    9200:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9204:	4611      	mov	r1, r2
    9206:	f7ff bc95 	b.w	8b34 <_malloc_r>
    920a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    920e:	eb09 0105 	add.w	r1, r9, r5
    9212:	f002 0201 	and.w	r2, r2, #1
    9216:	444e      	add	r6, r9
    9218:	f043 0301 	orr.w	r3, r3, #1
    921c:	432a      	orrs	r2, r5
    921e:	f8c9 2004 	str.w	r2, [r9, #4]
    9222:	604b      	str	r3, [r1, #4]
    9224:	6873      	ldr	r3, [r6, #4]
    9226:	f043 0301 	orr.w	r3, r3, #1
    922a:	3108      	adds	r1, #8
    922c:	6073      	str	r3, [r6, #4]
    922e:	4640      	mov	r0, r8
    9230:	f001 f8e8 	bl	a404 <_free_r>
    9234:	e7d2      	b.n	91dc <_realloc_r+0x118>
    9236:	f8dc 0004 	ldr.w	r0, [ip, #4]
    923a:	f020 0b03 	bic.w	fp, r0, #3
    923e:	eb06 0c0b 	add.w	ip, r6, fp
    9242:	f105 0010 	add.w	r0, r5, #16
    9246:	4584      	cmp	ip, r0
    9248:	da4d      	bge.n	92e6 <_realloc_r+0x222>
    924a:	07c9      	lsls	r1, r1, #31
    924c:	f53f af7d 	bmi.w	914a <_realloc_r+0x86>
    9250:	f854 1c08 	ldr.w	r1, [r4, #-8]
    9254:	eba9 0a01 	sub.w	sl, r9, r1
    9258:	f8da 1004 	ldr.w	r1, [sl, #4]
    925c:	f021 0103 	bic.w	r1, r1, #3
    9260:	448b      	add	fp, r1
    9262:	44b3      	add	fp, r6
    9264:	4558      	cmp	r0, fp
    9266:	f73f af6c 	bgt.w	9142 <_realloc_r+0x7e>
    926a:	4657      	mov	r7, sl
    926c:	f8da 100c 	ldr.w	r1, [sl, #12]
    9270:	f857 0f08 	ldr.w	r0, [r7, #8]!
    9274:	1f32      	subs	r2, r6, #4
    9276:	2a24      	cmp	r2, #36	; 0x24
    9278:	60c1      	str	r1, [r0, #12]
    927a:	6088      	str	r0, [r1, #8]
    927c:	f200 80db 	bhi.w	9436 <_realloc_r+0x372>
    9280:	2a13      	cmp	r2, #19
    9282:	f240 80d6 	bls.w	9432 <_realloc_r+0x36e>
    9286:	6821      	ldr	r1, [r4, #0]
    9288:	f8ca 1008 	str.w	r1, [sl, #8]
    928c:	6861      	ldr	r1, [r4, #4]
    928e:	f8ca 100c 	str.w	r1, [sl, #12]
    9292:	2a1b      	cmp	r2, #27
    9294:	f200 80df 	bhi.w	9456 <_realloc_r+0x392>
    9298:	3408      	adds	r4, #8
    929a:	f10a 0210 	add.w	r2, sl, #16
    929e:	6821      	ldr	r1, [r4, #0]
    92a0:	6011      	str	r1, [r2, #0]
    92a2:	6861      	ldr	r1, [r4, #4]
    92a4:	6051      	str	r1, [r2, #4]
    92a6:	68a1      	ldr	r1, [r4, #8]
    92a8:	6091      	str	r1, [r2, #8]
    92aa:	eb0a 0105 	add.w	r1, sl, r5
    92ae:	ebab 0205 	sub.w	r2, fp, r5
    92b2:	f042 0201 	orr.w	r2, r2, #1
    92b6:	6099      	str	r1, [r3, #8]
    92b8:	604a      	str	r2, [r1, #4]
    92ba:	f8da 3004 	ldr.w	r3, [sl, #4]
    92be:	f003 0301 	and.w	r3, r3, #1
    92c2:	432b      	orrs	r3, r5
    92c4:	4640      	mov	r0, r8
    92c6:	f8ca 3004 	str.w	r3, [sl, #4]
    92ca:	f7ff fee9 	bl	90a0 <__malloc_unlock>
    92ce:	e76e      	b.n	91ae <_realloc_r+0xea>
    92d0:	6823      	ldr	r3, [r4, #0]
    92d2:	6003      	str	r3, [r0, #0]
    92d4:	6863      	ldr	r3, [r4, #4]
    92d6:	6043      	str	r3, [r0, #4]
    92d8:	2a1b      	cmp	r2, #27
    92da:	d868      	bhi.n	93ae <_realloc_r+0x2ea>
    92dc:	f104 0208 	add.w	r2, r4, #8
    92e0:	f100 0308 	add.w	r3, r0, #8
    92e4:	e74a      	b.n	917c <_realloc_r+0xb8>
    92e6:	eb09 0205 	add.w	r2, r9, r5
    92ea:	609a      	str	r2, [r3, #8]
    92ec:	ebac 0305 	sub.w	r3, ip, r5
    92f0:	f043 0301 	orr.w	r3, r3, #1
    92f4:	6053      	str	r3, [r2, #4]
    92f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    92fa:	f003 0301 	and.w	r3, r3, #1
    92fe:	432b      	orrs	r3, r5
    9300:	4640      	mov	r0, r8
    9302:	f844 3c04 	str.w	r3, [r4, #-4]
    9306:	f7ff fecb 	bl	90a0 <__malloc_unlock>
    930a:	4627      	mov	r7, r4
    930c:	e74f      	b.n	91ae <_realloc_r+0xea>
    930e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    9312:	f023 0303 	bic.w	r3, r3, #3
    9316:	441e      	add	r6, r3
    9318:	e751      	b.n	91be <_realloc_r+0xfa>
    931a:	4657      	mov	r7, sl
    931c:	f8da 100c 	ldr.w	r1, [sl, #12]
    9320:	f857 0f08 	ldr.w	r0, [r7, #8]!
    9324:	1f32      	subs	r2, r6, #4
    9326:	2a24      	cmp	r2, #36	; 0x24
    9328:	60c1      	str	r1, [r0, #12]
    932a:	6088      	str	r0, [r1, #8]
    932c:	d84c      	bhi.n	93c8 <_realloc_r+0x304>
    932e:	2a13      	cmp	r2, #19
    9330:	d948      	bls.n	93c4 <_realloc_r+0x300>
    9332:	6821      	ldr	r1, [r4, #0]
    9334:	f8ca 1008 	str.w	r1, [sl, #8]
    9338:	6861      	ldr	r1, [r4, #4]
    933a:	f8ca 100c 	str.w	r1, [sl, #12]
    933e:	2a1b      	cmp	r2, #27
    9340:	d856      	bhi.n	93f0 <_realloc_r+0x32c>
    9342:	3408      	adds	r4, #8
    9344:	f10a 0210 	add.w	r2, sl, #16
    9348:	461e      	mov	r6, r3
    934a:	6823      	ldr	r3, [r4, #0]
    934c:	6013      	str	r3, [r2, #0]
    934e:	6863      	ldr	r3, [r4, #4]
    9350:	6053      	str	r3, [r2, #4]
    9352:	68a3      	ldr	r3, [r4, #8]
    9354:	6093      	str	r3, [r2, #8]
    9356:	46d1      	mov	r9, sl
    9358:	463c      	mov	r4, r7
    935a:	e730      	b.n	91be <_realloc_r+0xfa>
    935c:	4621      	mov	r1, r4
    935e:	f000 fb65 	bl	9a2c <memmove>
    9362:	e711      	b.n	9188 <_realloc_r+0xc4>
    9364:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    9368:	4657      	mov	r7, sl
    936a:	60cb      	str	r3, [r1, #12]
    936c:	6099      	str	r1, [r3, #8]
    936e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    9372:	f8da 300c 	ldr.w	r3, [sl, #12]
    9376:	60cb      	str	r3, [r1, #12]
    9378:	1f32      	subs	r2, r6, #4
    937a:	2a24      	cmp	r2, #36	; 0x24
    937c:	6099      	str	r1, [r3, #8]
    937e:	d82d      	bhi.n	93dc <_realloc_r+0x318>
    9380:	2a13      	cmp	r2, #19
    9382:	d929      	bls.n	93d8 <_realloc_r+0x314>
    9384:	6823      	ldr	r3, [r4, #0]
    9386:	f8ca 3008 	str.w	r3, [sl, #8]
    938a:	6863      	ldr	r3, [r4, #4]
    938c:	f8ca 300c 	str.w	r3, [sl, #12]
    9390:	2a1b      	cmp	r2, #27
    9392:	d842      	bhi.n	941a <_realloc_r+0x356>
    9394:	3408      	adds	r4, #8
    9396:	f10a 0310 	add.w	r3, sl, #16
    939a:	6822      	ldr	r2, [r4, #0]
    939c:	601a      	str	r2, [r3, #0]
    939e:	6862      	ldr	r2, [r4, #4]
    93a0:	605a      	str	r2, [r3, #4]
    93a2:	68a2      	ldr	r2, [r4, #8]
    93a4:	609a      	str	r2, [r3, #8]
    93a6:	4666      	mov	r6, ip
    93a8:	46d1      	mov	r9, sl
    93aa:	463c      	mov	r4, r7
    93ac:	e707      	b.n	91be <_realloc_r+0xfa>
    93ae:	68a3      	ldr	r3, [r4, #8]
    93b0:	6083      	str	r3, [r0, #8]
    93b2:	68e3      	ldr	r3, [r4, #12]
    93b4:	60c3      	str	r3, [r0, #12]
    93b6:	2a24      	cmp	r2, #36	; 0x24
    93b8:	d026      	beq.n	9408 <_realloc_r+0x344>
    93ba:	f104 0210 	add.w	r2, r4, #16
    93be:	f100 0310 	add.w	r3, r0, #16
    93c2:	e6db      	b.n	917c <_realloc_r+0xb8>
    93c4:	463a      	mov	r2, r7
    93c6:	e7bf      	b.n	9348 <_realloc_r+0x284>
    93c8:	4621      	mov	r1, r4
    93ca:	4638      	mov	r0, r7
    93cc:	461e      	mov	r6, r3
    93ce:	46d1      	mov	r9, sl
    93d0:	f000 fb2c 	bl	9a2c <memmove>
    93d4:	463c      	mov	r4, r7
    93d6:	e6f2      	b.n	91be <_realloc_r+0xfa>
    93d8:	463b      	mov	r3, r7
    93da:	e7de      	b.n	939a <_realloc_r+0x2d6>
    93dc:	4621      	mov	r1, r4
    93de:	4638      	mov	r0, r7
    93e0:	4666      	mov	r6, ip
    93e2:	46d1      	mov	r9, sl
    93e4:	f000 fb22 	bl	9a2c <memmove>
    93e8:	463c      	mov	r4, r7
    93ea:	e6e8      	b.n	91be <_realloc_r+0xfa>
    93ec:	20004338 	.word	0x20004338
    93f0:	68a1      	ldr	r1, [r4, #8]
    93f2:	f8ca 1010 	str.w	r1, [sl, #16]
    93f6:	68e1      	ldr	r1, [r4, #12]
    93f8:	f8ca 1014 	str.w	r1, [sl, #20]
    93fc:	2a24      	cmp	r2, #36	; 0x24
    93fe:	d020      	beq.n	9442 <_realloc_r+0x37e>
    9400:	3410      	adds	r4, #16
    9402:	f10a 0218 	add.w	r2, sl, #24
    9406:	e79f      	b.n	9348 <_realloc_r+0x284>
    9408:	6923      	ldr	r3, [r4, #16]
    940a:	6103      	str	r3, [r0, #16]
    940c:	6961      	ldr	r1, [r4, #20]
    940e:	6141      	str	r1, [r0, #20]
    9410:	f104 0218 	add.w	r2, r4, #24
    9414:	f100 0318 	add.w	r3, r0, #24
    9418:	e6b0      	b.n	917c <_realloc_r+0xb8>
    941a:	68a3      	ldr	r3, [r4, #8]
    941c:	f8ca 3010 	str.w	r3, [sl, #16]
    9420:	68e3      	ldr	r3, [r4, #12]
    9422:	f8ca 3014 	str.w	r3, [sl, #20]
    9426:	2a24      	cmp	r2, #36	; 0x24
    9428:	d021      	beq.n	946e <_realloc_r+0x3aa>
    942a:	3410      	adds	r4, #16
    942c:	f10a 0318 	add.w	r3, sl, #24
    9430:	e7b3      	b.n	939a <_realloc_r+0x2d6>
    9432:	463a      	mov	r2, r7
    9434:	e733      	b.n	929e <_realloc_r+0x1da>
    9436:	4621      	mov	r1, r4
    9438:	4638      	mov	r0, r7
    943a:	f000 faf7 	bl	9a2c <memmove>
    943e:	4b16      	ldr	r3, [pc, #88]	; (9498 <_realloc_r+0x3d4>)
    9440:	e733      	b.n	92aa <_realloc_r+0x1e6>
    9442:	6922      	ldr	r2, [r4, #16]
    9444:	f8ca 2018 	str.w	r2, [sl, #24]
    9448:	6962      	ldr	r2, [r4, #20]
    944a:	f8ca 201c 	str.w	r2, [sl, #28]
    944e:	3418      	adds	r4, #24
    9450:	f10a 0220 	add.w	r2, sl, #32
    9454:	e778      	b.n	9348 <_realloc_r+0x284>
    9456:	68a1      	ldr	r1, [r4, #8]
    9458:	f8ca 1010 	str.w	r1, [sl, #16]
    945c:	68e1      	ldr	r1, [r4, #12]
    945e:	f8ca 1014 	str.w	r1, [sl, #20]
    9462:	2a24      	cmp	r2, #36	; 0x24
    9464:	d00d      	beq.n	9482 <_realloc_r+0x3be>
    9466:	3410      	adds	r4, #16
    9468:	f10a 0218 	add.w	r2, sl, #24
    946c:	e717      	b.n	929e <_realloc_r+0x1da>
    946e:	6923      	ldr	r3, [r4, #16]
    9470:	f8ca 3018 	str.w	r3, [sl, #24]
    9474:	6963      	ldr	r3, [r4, #20]
    9476:	f8ca 301c 	str.w	r3, [sl, #28]
    947a:	3418      	adds	r4, #24
    947c:	f10a 0320 	add.w	r3, sl, #32
    9480:	e78b      	b.n	939a <_realloc_r+0x2d6>
    9482:	6922      	ldr	r2, [r4, #16]
    9484:	f8ca 2018 	str.w	r2, [sl, #24]
    9488:	6962      	ldr	r2, [r4, #20]
    948a:	f8ca 201c 	str.w	r2, [sl, #28]
    948e:	3418      	adds	r4, #24
    9490:	f10a 0220 	add.w	r2, sl, #32
    9494:	e703      	b.n	929e <_realloc_r+0x1da>
    9496:	bf00      	nop
    9498:	20004338 	.word	0x20004338

0000949c <_strtol_l.constprop.0>:
    949c:	2b01      	cmp	r3, #1
    949e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    94a2:	d040      	beq.n	9526 <_strtol_l.constprop.0+0x8a>
    94a4:	2b24      	cmp	r3, #36	; 0x24
    94a6:	4698      	mov	r8, r3
    94a8:	d83d      	bhi.n	9526 <_strtol_l.constprop.0+0x8a>
    94aa:	4d4c      	ldr	r5, [pc, #304]	; (95dc <_strtol_l.constprop.0+0x140>)
    94ac:	468e      	mov	lr, r1
    94ae:	4676      	mov	r6, lr
    94b0:	f81e bb01 	ldrb.w	fp, [lr], #1
    94b4:	f815 400b 	ldrb.w	r4, [r5, fp]
    94b8:	f014 0408 	ands.w	r4, r4, #8
    94bc:	d1f7      	bne.n	94ae <_strtol_l.constprop.0+0x12>
    94be:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
    94c2:	d072      	beq.n	95aa <_strtol_l.constprop.0+0x10e>
    94c4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
    94c8:	bf08      	it	eq
    94ca:	f89e b000 	ldrbeq.w	fp, [lr]
    94ce:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
    94d2:	bf08      	it	eq
    94d4:	f106 0e02 	addeq.w	lr, r6, #2
    94d8:	2b00      	cmp	r3, #0
    94da:	d042      	beq.n	9562 <_strtol_l.constprop.0+0xc6>
    94dc:	2b10      	cmp	r3, #16
    94de:	d057      	beq.n	9590 <_strtol_l.constprop.0+0xf4>
    94e0:	fbb9 f7f8 	udiv	r7, r9, r8
    94e4:	2500      	movs	r5, #0
    94e6:	462e      	mov	r6, r5
    94e8:	fb08 9a17 	mls	sl, r8, r7, r9
    94ec:	e005      	b.n	94fa <_strtol_l.constprop.0+0x5e>
    94ee:	d033      	beq.n	9558 <_strtol_l.constprop.0+0xbc>
    94f0:	fb08 c606 	mla	r6, r8, r6, ip
    94f4:	2501      	movs	r5, #1
    94f6:	f81e bb01 	ldrb.w	fp, [lr], #1
    94fa:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
    94fe:	f1bc 0f09 	cmp.w	ip, #9
    9502:	d906      	bls.n	9512 <_strtol_l.constprop.0+0x76>
    9504:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
    9508:	f1bc 0f19 	cmp.w	ip, #25
    950c:	d812      	bhi.n	9534 <_strtol_l.constprop.0+0x98>
    950e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
    9512:	4563      	cmp	r3, ip
    9514:	dd17      	ble.n	9546 <_strtol_l.constprop.0+0xaa>
    9516:	f1b5 3fff 	cmp.w	r5, #4294967295
    951a:	d0ec      	beq.n	94f6 <_strtol_l.constprop.0+0x5a>
    951c:	42b7      	cmp	r7, r6
    951e:	d2e6      	bcs.n	94ee <_strtol_l.constprop.0+0x52>
    9520:	f04f 35ff 	mov.w	r5, #4294967295
    9524:	e7e7      	b.n	94f6 <_strtol_l.constprop.0+0x5a>
    9526:	f000 fc53 	bl	9dd0 <__errno>
    952a:	2316      	movs	r3, #22
    952c:	6003      	str	r3, [r0, #0]
    952e:	2000      	movs	r0, #0
    9530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9534:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
    9538:	f1bc 0f19 	cmp.w	ip, #25
    953c:	d803      	bhi.n	9546 <_strtol_l.constprop.0+0xaa>
    953e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
    9542:	4563      	cmp	r3, ip
    9544:	dce7      	bgt.n	9516 <_strtol_l.constprop.0+0x7a>
    9546:	1c6b      	adds	r3, r5, #1
    9548:	d027      	beq.n	959a <_strtol_l.constprop.0+0xfe>
    954a:	b98c      	cbnz	r4, 9570 <_strtol_l.constprop.0+0xd4>
    954c:	b10a      	cbz	r2, 9552 <_strtol_l.constprop.0+0xb6>
    954e:	bba5      	cbnz	r5, 95ba <_strtol_l.constprop.0+0x11e>
    9550:	6011      	str	r1, [r2, #0]
    9552:	4630      	mov	r0, r6
    9554:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9558:	45e2      	cmp	sl, ip
    955a:	dac9      	bge.n	94f0 <_strtol_l.constprop.0+0x54>
    955c:	f04f 35ff 	mov.w	r5, #4294967295
    9560:	e7c9      	b.n	94f6 <_strtol_l.constprop.0+0x5a>
    9562:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    9566:	d005      	beq.n	9574 <_strtol_l.constprop.0+0xd8>
    9568:	f04f 080a 	mov.w	r8, #10
    956c:	4643      	mov	r3, r8
    956e:	e7b7      	b.n	94e0 <_strtol_l.constprop.0+0x44>
    9570:	4276      	negs	r6, r6
    9572:	e7eb      	b.n	954c <_strtol_l.constprop.0+0xb0>
    9574:	f89e 3000 	ldrb.w	r3, [lr]
    9578:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    957c:	2b58      	cmp	r3, #88	; 0x58
    957e:	d121      	bne.n	95c4 <_strtol_l.constprop.0+0x128>
    9580:	f04f 0810 	mov.w	r8, #16
    9584:	f89e b001 	ldrb.w	fp, [lr, #1]
    9588:	4643      	mov	r3, r8
    958a:	f10e 0e02 	add.w	lr, lr, #2
    958e:	e7a7      	b.n	94e0 <_strtol_l.constprop.0+0x44>
    9590:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
    9594:	d01a      	beq.n	95cc <_strtol_l.constprop.0+0x130>
    9596:	4698      	mov	r8, r3
    9598:	e7a2      	b.n	94e0 <_strtol_l.constprop.0+0x44>
    959a:	2322      	movs	r3, #34	; 0x22
    959c:	6003      	str	r3, [r0, #0]
    959e:	b172      	cbz	r2, 95be <_strtol_l.constprop.0+0x122>
    95a0:	f10e 31ff 	add.w	r1, lr, #4294967295
    95a4:	464e      	mov	r6, r9
    95a6:	6011      	str	r1, [r2, #0]
    95a8:	e7d3      	b.n	9552 <_strtol_l.constprop.0+0xb6>
    95aa:	f89e b000 	ldrb.w	fp, [lr]
    95ae:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
    95b2:	f106 0e02 	add.w	lr, r6, #2
    95b6:	2401      	movs	r4, #1
    95b8:	e78e      	b.n	94d8 <_strtol_l.constprop.0+0x3c>
    95ba:	46b1      	mov	r9, r6
    95bc:	e7f0      	b.n	95a0 <_strtol_l.constprop.0+0x104>
    95be:	464e      	mov	r6, r9
    95c0:	4630      	mov	r0, r6
    95c2:	e7c7      	b.n	9554 <_strtol_l.constprop.0+0xb8>
    95c4:	f04f 0808 	mov.w	r8, #8
    95c8:	4643      	mov	r3, r8
    95ca:	e789      	b.n	94e0 <_strtol_l.constprop.0+0x44>
    95cc:	f89e 5000 	ldrb.w	r5, [lr]
    95d0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
    95d4:	2d58      	cmp	r5, #88	; 0x58
    95d6:	d0d3      	beq.n	9580 <_strtol_l.constprop.0+0xe4>
    95d8:	4698      	mov	r8, r3
    95da:	e781      	b.n	94e0 <_strtol_l.constprop.0+0x44>
    95dc:	2000096d 	.word	0x2000096d

000095e0 <strtol>:
    95e0:	b410      	push	{r4}
    95e2:	4c05      	ldr	r4, [pc, #20]	; (95f8 <strtol+0x18>)
    95e4:	4684      	mov	ip, r0
    95e6:	4613      	mov	r3, r2
    95e8:	6820      	ldr	r0, [r4, #0]
    95ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    95ee:	460a      	mov	r2, r1
    95f0:	4661      	mov	r1, ip
    95f2:	f7ff bf53 	b.w	949c <_strtol_l.constprop.0>
    95f6:	bf00      	nop
    95f8:	20004754 	.word	0x20004754

000095fc <_strtoul_l.constprop.0>:
    95fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9600:	4607      	mov	r7, r0
    9602:	484c      	ldr	r0, [pc, #304]	; (9734 <_strtoul_l.constprop.0+0x138>)
    9604:	460e      	mov	r6, r1
    9606:	4635      	mov	r5, r6
    9608:	f816 eb01 	ldrb.w	lr, [r6], #1
    960c:	f810 c00e 	ldrb.w	ip, [r0, lr]
    9610:	f01c 0c08 	ands.w	ip, ip, #8
    9614:	d1f7      	bne.n	9606 <_strtoul_l.constprop.0+0xa>
    9616:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
    961a:	d05a      	beq.n	96d2 <_strtoul_l.constprop.0+0xd6>
    961c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
    9620:	bf03      	ittte	eq
    9622:	f896 e000 	ldrbeq.w	lr, [r6]
    9626:	4664      	moveq	r4, ip
    9628:	1cae      	addeq	r6, r5, #2
    962a:	4664      	movne	r4, ip
    962c:	b15b      	cbz	r3, 9646 <_strtoul_l.constprop.0+0x4a>
    962e:	2b10      	cmp	r3, #16
    9630:	d054      	beq.n	96dc <_strtoul_l.constprop.0+0xe0>
    9632:	f04f 38ff 	mov.w	r8, #4294967295
    9636:	fbb8 f8f3 	udiv	r8, r8, r3
    963a:	fb03 fa08 	mul.w	sl, r3, r8
    963e:	ea6f 0a0a 	mvn.w	sl, sl
    9642:	4699      	mov	r9, r3
    9644:	e008      	b.n	9658 <_strtoul_l.constprop.0+0x5c>
    9646:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    964a:	d05a      	beq.n	9702 <_strtoul_l.constprop.0+0x106>
    964c:	230a      	movs	r3, #10
    964e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 9738 <_strtoul_l.constprop.0+0x13c>
    9652:	f04f 0a05 	mov.w	sl, #5
    9656:	4699      	mov	r9, r3
    9658:	2500      	movs	r5, #0
    965a:	4628      	mov	r0, r5
    965c:	e005      	b.n	966a <_strtoul_l.constprop.0+0x6e>
    965e:	d02c      	beq.n	96ba <_strtoul_l.constprop.0+0xbe>
    9660:	fb09 c000 	mla	r0, r9, r0, ip
    9664:	2501      	movs	r5, #1
    9666:	f816 eb01 	ldrb.w	lr, [r6], #1
    966a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
    966e:	f1bc 0f09 	cmp.w	ip, #9
    9672:	d906      	bls.n	9682 <_strtoul_l.constprop.0+0x86>
    9674:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
    9678:	f1bc 0f19 	cmp.w	ip, #25
    967c:	d80b      	bhi.n	9696 <_strtoul_l.constprop.0+0x9a>
    967e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
    9682:	4563      	cmp	r3, ip
    9684:	dd10      	ble.n	96a8 <_strtoul_l.constprop.0+0xac>
    9686:	f1b5 3fff 	cmp.w	r5, #4294967295
    968a:	d0ec      	beq.n	9666 <_strtoul_l.constprop.0+0x6a>
    968c:	4540      	cmp	r0, r8
    968e:	d9e6      	bls.n	965e <_strtoul_l.constprop.0+0x62>
    9690:	f04f 35ff 	mov.w	r5, #4294967295
    9694:	e7e7      	b.n	9666 <_strtoul_l.constprop.0+0x6a>
    9696:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
    969a:	f1bc 0f19 	cmp.w	ip, #25
    969e:	d803      	bhi.n	96a8 <_strtoul_l.constprop.0+0xac>
    96a0:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
    96a4:	4563      	cmp	r3, ip
    96a6:	dcee      	bgt.n	9686 <_strtoul_l.constprop.0+0x8a>
    96a8:	1c6b      	adds	r3, r5, #1
    96aa:	d00b      	beq.n	96c4 <_strtoul_l.constprop.0+0xc8>
    96ac:	b104      	cbz	r4, 96b0 <_strtoul_l.constprop.0+0xb4>
    96ae:	4240      	negs	r0, r0
    96b0:	b10a      	cbz	r2, 96b6 <_strtoul_l.constprop.0+0xba>
    96b2:	b965      	cbnz	r5, 96ce <_strtoul_l.constprop.0+0xd2>
    96b4:	6011      	str	r1, [r2, #0]
    96b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    96ba:	45d4      	cmp	ip, sl
    96bc:	ddd0      	ble.n	9660 <_strtoul_l.constprop.0+0x64>
    96be:	f04f 35ff 	mov.w	r5, #4294967295
    96c2:	e7d0      	b.n	9666 <_strtoul_l.constprop.0+0x6a>
    96c4:	2322      	movs	r3, #34	; 0x22
    96c6:	603b      	str	r3, [r7, #0]
    96c8:	4628      	mov	r0, r5
    96ca:	2a00      	cmp	r2, #0
    96cc:	d0f3      	beq.n	96b6 <_strtoul_l.constprop.0+0xba>
    96ce:	1e71      	subs	r1, r6, #1
    96d0:	e7f0      	b.n	96b4 <_strtoul_l.constprop.0+0xb8>
    96d2:	f896 e000 	ldrb.w	lr, [r6]
    96d6:	2401      	movs	r4, #1
    96d8:	1cae      	adds	r6, r5, #2
    96da:	e7a7      	b.n	962c <_strtoul_l.constprop.0+0x30>
    96dc:	f1be 0f30 	cmp.w	lr, #48	; 0x30
    96e0:	d121      	bne.n	9726 <_strtoul_l.constprop.0+0x12a>
    96e2:	7830      	ldrb	r0, [r6, #0]
    96e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    96e8:	2858      	cmp	r0, #88	; 0x58
    96ea:	d116      	bne.n	971a <_strtoul_l.constprop.0+0x11e>
    96ec:	f04f 0910 	mov.w	r9, #16
    96f0:	f896 e001 	ldrb.w	lr, [r6, #1]
    96f4:	f04f 0a0f 	mov.w	sl, #15
    96f8:	3602      	adds	r6, #2
    96fa:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    96fe:	464b      	mov	r3, r9
    9700:	e7aa      	b.n	9658 <_strtoul_l.constprop.0+0x5c>
    9702:	7833      	ldrb	r3, [r6, #0]
    9704:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    9708:	2b58      	cmp	r3, #88	; 0x58
    970a:	d0ef      	beq.n	96ec <_strtoul_l.constprop.0+0xf0>
    970c:	2308      	movs	r3, #8
    970e:	f04f 0a07 	mov.w	sl, #7
    9712:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
    9716:	4699      	mov	r9, r3
    9718:	e79e      	b.n	9658 <_strtoul_l.constprop.0+0x5c>
    971a:	4699      	mov	r9, r3
    971c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    9720:	f04f 0a0f 	mov.w	sl, #15
    9724:	e798      	b.n	9658 <_strtoul_l.constprop.0+0x5c>
    9726:	f04f 0a0f 	mov.w	sl, #15
    972a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
    972e:	4699      	mov	r9, r3
    9730:	e792      	b.n	9658 <_strtoul_l.constprop.0+0x5c>
    9732:	bf00      	nop
    9734:	2000096d 	.word	0x2000096d
    9738:	19999999 	.word	0x19999999

0000973c <strtoul>:
    973c:	b410      	push	{r4}
    973e:	4c05      	ldr	r4, [pc, #20]	; (9754 <strtoul+0x18>)
    9740:	4684      	mov	ip, r0
    9742:	4613      	mov	r3, r2
    9744:	6820      	ldr	r0, [r4, #0]
    9746:	f85d 4b04 	ldr.w	r4, [sp], #4
    974a:	460a      	mov	r2, r1
    974c:	4661      	mov	r1, ip
    974e:	f7ff bf55 	b.w	95fc <_strtoul_l.constprop.0>
    9752:	bf00      	nop
    9754:	20004754 	.word	0x20004754

00009758 <__cxa_atexit>:
    9758:	4613      	mov	r3, r2
    975a:	460a      	mov	r2, r1
    975c:	4601      	mov	r1, r0
    975e:	2002      	movs	r0, #2
    9760:	f000 bdbc 	b.w	a2dc <__register_exitproc>

00009764 <isprint>:
    9764:	4b02      	ldr	r3, [pc, #8]	; (9770 <isprint+0xc>)
    9766:	4418      	add	r0, r3
    9768:	7840      	ldrb	r0, [r0, #1]
    976a:	f000 0097 	and.w	r0, r0, #151	; 0x97
    976e:	4770      	bx	lr
    9770:	2000096c 	.word	0x2000096c

00009774 <isspace>:
    9774:	4b02      	ldr	r3, [pc, #8]	; (9780 <isspace+0xc>)
    9776:	4418      	add	r0, r3
    9778:	7840      	ldrb	r0, [r0, #1]
    977a:	f000 0008 	and.w	r0, r0, #8
    977e:	4770      	bx	lr
    9780:	2000096c 	.word	0x2000096c

00009784 <tolower>:
    9784:	4b03      	ldr	r3, [pc, #12]	; (9794 <tolower+0x10>)
    9786:	5c1b      	ldrb	r3, [r3, r0]
    9788:	f003 0303 	and.w	r3, r3, #3
    978c:	2b01      	cmp	r3, #1
    978e:	bf08      	it	eq
    9790:	3020      	addeq	r0, #32
    9792:	4770      	bx	lr
    9794:	2000096d 	.word	0x2000096d

00009798 <stdio_exit_handler>:
    9798:	4a02      	ldr	r2, [pc, #8]	; (97a4 <stdio_exit_handler+0xc>)
    979a:	4903      	ldr	r1, [pc, #12]	; (97a8 <stdio_exit_handler+0x10>)
    979c:	4803      	ldr	r0, [pc, #12]	; (97ac <stdio_exit_handler+0x14>)
    979e:	f000 b8bb 	b.w	9918 <_fwalk_sglue>
    97a2:	bf00      	nop
    97a4:	20004748 	.word	0x20004748
    97a8:	0000c915 	.word	0x0000c915
    97ac:	20001088 	.word	0x20001088

000097b0 <cleanup_stdio>:
    97b0:	4b0c      	ldr	r3, [pc, #48]	; (97e4 <cleanup_stdio+0x34>)
    97b2:	6841      	ldr	r1, [r0, #4]
    97b4:	4299      	cmp	r1, r3
    97b6:	b510      	push	{r4, lr}
    97b8:	4604      	mov	r4, r0
    97ba:	d001      	beq.n	97c0 <cleanup_stdio+0x10>
    97bc:	f003 f8aa 	bl	c914 <_fclose_r>
    97c0:	68a1      	ldr	r1, [r4, #8]
    97c2:	4b09      	ldr	r3, [pc, #36]	; (97e8 <cleanup_stdio+0x38>)
    97c4:	4299      	cmp	r1, r3
    97c6:	d002      	beq.n	97ce <cleanup_stdio+0x1e>
    97c8:	4620      	mov	r0, r4
    97ca:	f003 f8a3 	bl	c914 <_fclose_r>
    97ce:	68e1      	ldr	r1, [r4, #12]
    97d0:	4b06      	ldr	r3, [pc, #24]	; (97ec <cleanup_stdio+0x3c>)
    97d2:	4299      	cmp	r1, r3
    97d4:	d004      	beq.n	97e0 <cleanup_stdio+0x30>
    97d6:	4620      	mov	r0, r4
    97d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97dc:	f003 b89a 	b.w	c914 <_fclose_r>
    97e0:	bd10      	pop	{r4, pc}
    97e2:	bf00      	nop
    97e4:	20004e8c 	.word	0x20004e8c
    97e8:	20004ef4 	.word	0x20004ef4
    97ec:	20004f5c 	.word	0x20004f5c

000097f0 <global_stdio_init.part.0>:
    97f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97f4:	4c2a      	ldr	r4, [pc, #168]	; (98a0 <global_stdio_init.part.0+0xb0>)
    97f6:	4b2b      	ldr	r3, [pc, #172]	; (98a4 <global_stdio_init.part.0+0xb4>)
    97f8:	482b      	ldr	r0, [pc, #172]	; (98a8 <global_stdio_init.part.0+0xb8>)
    97fa:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 98bc <global_stdio_init.part.0+0xcc>
    97fe:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 98c0 <global_stdio_init.part.0+0xd0>
    9802:	4f2a      	ldr	r7, [pc, #168]	; (98ac <global_stdio_init.part.0+0xbc>)
    9804:	6018      	str	r0, [r3, #0]
    9806:	2500      	movs	r5, #0
    9808:	2304      	movs	r3, #4
    980a:	2208      	movs	r2, #8
    980c:	4629      	mov	r1, r5
    980e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    9812:	4e27      	ldr	r6, [pc, #156]	; (98b0 <global_stdio_init.part.0+0xc0>)
    9814:	6665      	str	r5, [r4, #100]	; 0x64
    9816:	e9c4 5302 	strd	r5, r3, [r4, #8]
    981a:	e9c4 5500 	strd	r5, r5, [r4]
    981e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    9822:	61a5      	str	r5, [r4, #24]
    9824:	f000 f97e 	bl	9b24 <memset>
    9828:	4b22      	ldr	r3, [pc, #136]	; (98b4 <global_stdio_init.part.0+0xc4>)
    982a:	6763      	str	r3, [r4, #116]	; 0x74
    982c:	2208      	movs	r2, #8
    982e:	4629      	mov	r1, r5
    9830:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    9834:	e9c4 4907 	strd	r4, r9, [r4, #28]
    9838:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    983c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    9840:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    9844:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    9848:	6725      	str	r5, [r4, #112]	; 0x70
    984a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    984e:	62e6      	str	r6, [r4, #44]	; 0x2c
    9850:	f000 f968 	bl	9b24 <memset>
    9854:	4b18      	ldr	r3, [pc, #96]	; (98b8 <global_stdio_init.part.0+0xc8>)
    9856:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    985a:	4629      	mov	r1, r5
    985c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    9860:	2208      	movs	r2, #8
    9862:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    9866:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    986a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    986e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    9872:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    9876:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    987a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    987e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    9882:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    9886:	f000 f94d 	bl	9b24 <memset>
    988a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    988e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    9892:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    9896:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    989a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    989e:	bf00      	nop
    98a0:	20004e8c 	.word	0x20004e8c
    98a4:	20004fc4 	.word	0x20004fc4
    98a8:	00009799 	.word	0x00009799
    98ac:	00009a05 	.word	0x00009a05
    98b0:	00009a25 	.word	0x00009a25
    98b4:	00010009 	.word	0x00010009
    98b8:	00020012 	.word	0x00020012
    98bc:	000099a1 	.word	0x000099a1
    98c0:	000099c5 	.word	0x000099c5

000098c4 <__sinit>:
    98c4:	b510      	push	{r4, lr}
    98c6:	4604      	mov	r4, r0
    98c8:	480a      	ldr	r0, [pc, #40]	; (98f4 <__sinit+0x30>)
    98ca:	f000 faaf 	bl	9e2c <__retarget_lock_acquire_recursive>
    98ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
    98d0:	b923      	cbnz	r3, 98dc <__sinit+0x18>
    98d2:	4b09      	ldr	r3, [pc, #36]	; (98f8 <__sinit+0x34>)
    98d4:	4a09      	ldr	r2, [pc, #36]	; (98fc <__sinit+0x38>)
    98d6:	681b      	ldr	r3, [r3, #0]
    98d8:	6362      	str	r2, [r4, #52]	; 0x34
    98da:	b123      	cbz	r3, 98e6 <__sinit+0x22>
    98dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98e0:	4804      	ldr	r0, [pc, #16]	; (98f4 <__sinit+0x30>)
    98e2:	f000 baa5 	b.w	9e30 <__retarget_lock_release_recursive>
    98e6:	f7ff ff83 	bl	97f0 <global_stdio_init.part.0>
    98ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    98ee:	4801      	ldr	r0, [pc, #4]	; (98f4 <__sinit+0x30>)
    98f0:	f000 ba9e 	b.w	9e30 <__retarget_lock_release_recursive>
    98f4:	20004e54 	.word	0x20004e54
    98f8:	20004fc4 	.word	0x20004fc4
    98fc:	000097b1 	.word	0x000097b1

00009900 <__sfp_lock_acquire>:
    9900:	4801      	ldr	r0, [pc, #4]	; (9908 <__sfp_lock_acquire+0x8>)
    9902:	f000 ba93 	b.w	9e2c <__retarget_lock_acquire_recursive>
    9906:	bf00      	nop
    9908:	20004e54 	.word	0x20004e54

0000990c <__sfp_lock_release>:
    990c:	4801      	ldr	r0, [pc, #4]	; (9914 <__sfp_lock_release+0x8>)
    990e:	f000 ba8f 	b.w	9e30 <__retarget_lock_release_recursive>
    9912:	bf00      	nop
    9914:	20004e54 	.word	0x20004e54

00009918 <_fwalk_sglue>:
    9918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    991c:	4680      	mov	r8, r0
    991e:	460f      	mov	r7, r1
    9920:	4616      	mov	r6, r2
    9922:	f04f 0900 	mov.w	r9, #0
    9926:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    992a:	3d01      	subs	r5, #1
    992c:	d411      	bmi.n	9952 <_fwalk_sglue+0x3a>
    992e:	89a3      	ldrh	r3, [r4, #12]
    9930:	2b01      	cmp	r3, #1
    9932:	f105 35ff 	add.w	r5, r5, #4294967295
    9936:	d908      	bls.n	994a <_fwalk_sglue+0x32>
    9938:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    993c:	3301      	adds	r3, #1
    993e:	4621      	mov	r1, r4
    9940:	d003      	beq.n	994a <_fwalk_sglue+0x32>
    9942:	4640      	mov	r0, r8
    9944:	47b8      	blx	r7
    9946:	ea49 0900 	orr.w	r9, r9, r0
    994a:	1c6b      	adds	r3, r5, #1
    994c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    9950:	d1ed      	bne.n	992e <_fwalk_sglue+0x16>
    9952:	6836      	ldr	r6, [r6, #0]
    9954:	2e00      	cmp	r6, #0
    9956:	d1e6      	bne.n	9926 <_fwalk_sglue+0xe>
    9958:	4648      	mov	r0, r9
    995a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    995e:	bf00      	nop

00009960 <sprintf>:
    9960:	b40e      	push	{r1, r2, r3}
    9962:	b510      	push	{r4, lr}
    9964:	b09d      	sub	sp, #116	; 0x74
    9966:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    996a:	ab1f      	add	r3, sp, #124	; 0x7c
    996c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    9970:	9104      	str	r1, [sp, #16]
    9972:	4909      	ldr	r1, [pc, #36]	; (9998 <sprintf+0x38>)
    9974:	f853 2b04 	ldr.w	r2, [r3], #4
    9978:	9002      	str	r0, [sp, #8]
    997a:	4c08      	ldr	r4, [pc, #32]	; (999c <sprintf+0x3c>)
    997c:	6808      	ldr	r0, [r1, #0]
    997e:	9301      	str	r3, [sp, #4]
    9980:	a902      	add	r1, sp, #8
    9982:	9405      	str	r4, [sp, #20]
    9984:	f001 fa24 	bl	add0 <_svfprintf_r>
    9988:	9b02      	ldr	r3, [sp, #8]
    998a:	2200      	movs	r2, #0
    998c:	701a      	strb	r2, [r3, #0]
    998e:	b01d      	add	sp, #116	; 0x74
    9990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9994:	b003      	add	sp, #12
    9996:	4770      	bx	lr
    9998:	20004754 	.word	0x20004754
    999c:	ffff0208 	.word	0xffff0208

000099a0 <__sread>:
    99a0:	b510      	push	{r4, lr}
    99a2:	460c      	mov	r4, r1
    99a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    99a8:	f000 f9d4 	bl	9d54 <_read_r>
    99ac:	2800      	cmp	r0, #0
    99ae:	db03      	blt.n	99b8 <__sread+0x18>
    99b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    99b2:	4403      	add	r3, r0
    99b4:	6523      	str	r3, [r4, #80]	; 0x50
    99b6:	bd10      	pop	{r4, pc}
    99b8:	89a3      	ldrh	r3, [r4, #12]
    99ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    99be:	81a3      	strh	r3, [r4, #12]
    99c0:	bd10      	pop	{r4, pc}
    99c2:	bf00      	nop

000099c4 <__swrite>:
    99c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99c8:	460c      	mov	r4, r1
    99ca:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    99ce:	461f      	mov	r7, r3
    99d0:	05cb      	lsls	r3, r1, #23
    99d2:	4605      	mov	r5, r0
    99d4:	4616      	mov	r6, r2
    99d6:	d40b      	bmi.n	99f0 <__swrite+0x2c>
    99d8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    99dc:	81a1      	strh	r1, [r4, #12]
    99de:	463b      	mov	r3, r7
    99e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    99e4:	4632      	mov	r2, r6
    99e6:	4628      	mov	r0, r5
    99e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    99ec:	f000 b9da 	b.w	9da4 <_write_r>
    99f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    99f4:	2302      	movs	r3, #2
    99f6:	2200      	movs	r2, #0
    99f8:	f000 f996 	bl	9d28 <_lseek_r>
    99fc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    9a00:	e7ea      	b.n	99d8 <__swrite+0x14>
    9a02:	bf00      	nop

00009a04 <__sseek>:
    9a04:	b510      	push	{r4, lr}
    9a06:	460c      	mov	r4, r1
    9a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9a0c:	f000 f98c 	bl	9d28 <_lseek_r>
    9a10:	89a3      	ldrh	r3, [r4, #12]
    9a12:	1c42      	adds	r2, r0, #1
    9a14:	bf0e      	itee	eq
    9a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    9a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    9a1e:	6520      	strne	r0, [r4, #80]	; 0x50
    9a20:	81a3      	strh	r3, [r4, #12]
    9a22:	bd10      	pop	{r4, pc}

00009a24 <__sclose>:
    9a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    9a28:	f000 b96c 	b.w	9d04 <_close_r>

00009a2c <memmove>:
    9a2c:	4288      	cmp	r0, r1
    9a2e:	d90d      	bls.n	9a4c <memmove+0x20>
    9a30:	188b      	adds	r3, r1, r2
    9a32:	4283      	cmp	r3, r0
    9a34:	d90a      	bls.n	9a4c <memmove+0x20>
    9a36:	eb00 0c02 	add.w	ip, r0, r2
    9a3a:	b1ba      	cbz	r2, 9a6c <memmove+0x40>
    9a3c:	4662      	mov	r2, ip
    9a3e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    9a42:	f802 cd01 	strb.w	ip, [r2, #-1]!
    9a46:	4299      	cmp	r1, r3
    9a48:	d1f9      	bne.n	9a3e <memmove+0x12>
    9a4a:	4770      	bx	lr
    9a4c:	2a0f      	cmp	r2, #15
    9a4e:	d80e      	bhi.n	9a6e <memmove+0x42>
    9a50:	4603      	mov	r3, r0
    9a52:	f102 3cff 	add.w	ip, r2, #4294967295
    9a56:	b14a      	cbz	r2, 9a6c <memmove+0x40>
    9a58:	f10c 0c01 	add.w	ip, ip, #1
    9a5c:	3b01      	subs	r3, #1
    9a5e:	448c      	add	ip, r1
    9a60:	f811 2b01 	ldrb.w	r2, [r1], #1
    9a64:	f803 2f01 	strb.w	r2, [r3, #1]!
    9a68:	4561      	cmp	r1, ip
    9a6a:	d1f9      	bne.n	9a60 <memmove+0x34>
    9a6c:	4770      	bx	lr
    9a6e:	ea40 0301 	orr.w	r3, r0, r1
    9a72:	079b      	lsls	r3, r3, #30
    9a74:	d150      	bne.n	9b18 <memmove+0xec>
    9a76:	f1a2 0310 	sub.w	r3, r2, #16
    9a7a:	b570      	push	{r4, r5, r6, lr}
    9a7c:	f101 0c20 	add.w	ip, r1, #32
    9a80:	f023 050f 	bic.w	r5, r3, #15
    9a84:	f101 0e10 	add.w	lr, r1, #16
    9a88:	f100 0410 	add.w	r4, r0, #16
    9a8c:	44ac      	add	ip, r5
    9a8e:	091b      	lsrs	r3, r3, #4
    9a90:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    9a94:	f844 5c10 	str.w	r5, [r4, #-16]
    9a98:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    9a9c:	f844 5c0c 	str.w	r5, [r4, #-12]
    9aa0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    9aa4:	f844 5c08 	str.w	r5, [r4, #-8]
    9aa8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    9aac:	f844 5c04 	str.w	r5, [r4, #-4]
    9ab0:	f10e 0e10 	add.w	lr, lr, #16
    9ab4:	45e6      	cmp	lr, ip
    9ab6:	f104 0410 	add.w	r4, r4, #16
    9aba:	d1e9      	bne.n	9a90 <memmove+0x64>
    9abc:	3301      	adds	r3, #1
    9abe:	f012 0f0c 	tst.w	r2, #12
    9ac2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    9ac6:	f002 040f 	and.w	r4, r2, #15
    9aca:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    9ace:	d027      	beq.n	9b20 <memmove+0xf4>
    9ad0:	3c04      	subs	r4, #4
    9ad2:	f024 0603 	bic.w	r6, r4, #3
    9ad6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    9ada:	441e      	add	r6, r3
    9adc:	1f1c      	subs	r4, r3, #4
    9ade:	468e      	mov	lr, r1
    9ae0:	f85e 5b04 	ldr.w	r5, [lr], #4
    9ae4:	f844 5f04 	str.w	r5, [r4, #4]!
    9ae8:	42b4      	cmp	r4, r6
    9aea:	d1f9      	bne.n	9ae0 <memmove+0xb4>
    9aec:	f10c 0401 	add.w	r4, ip, #1
    9af0:	f002 0203 	and.w	r2, r2, #3
    9af4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    9af8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    9afc:	f102 3cff 	add.w	ip, r2, #4294967295
    9b00:	b14a      	cbz	r2, 9b16 <memmove+0xea>
    9b02:	f10c 0c01 	add.w	ip, ip, #1
    9b06:	3b01      	subs	r3, #1
    9b08:	448c      	add	ip, r1
    9b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
    9b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
    9b12:	4561      	cmp	r1, ip
    9b14:	d1f9      	bne.n	9b0a <memmove+0xde>
    9b16:	bd70      	pop	{r4, r5, r6, pc}
    9b18:	f102 3cff 	add.w	ip, r2, #4294967295
    9b1c:	4603      	mov	r3, r0
    9b1e:	e79b      	b.n	9a58 <memmove+0x2c>
    9b20:	4622      	mov	r2, r4
    9b22:	e7eb      	b.n	9afc <memmove+0xd0>

00009b24 <memset>:
    9b24:	0783      	lsls	r3, r0, #30
    9b26:	b530      	push	{r4, r5, lr}
    9b28:	d048      	beq.n	9bbc <memset+0x98>
    9b2a:	1e54      	subs	r4, r2, #1
    9b2c:	2a00      	cmp	r2, #0
    9b2e:	d03f      	beq.n	9bb0 <memset+0x8c>
    9b30:	b2ca      	uxtb	r2, r1
    9b32:	4603      	mov	r3, r0
    9b34:	e001      	b.n	9b3a <memset+0x16>
    9b36:	3c01      	subs	r4, #1
    9b38:	d33a      	bcc.n	9bb0 <memset+0x8c>
    9b3a:	f803 2b01 	strb.w	r2, [r3], #1
    9b3e:	079d      	lsls	r5, r3, #30
    9b40:	d1f9      	bne.n	9b36 <memset+0x12>
    9b42:	2c03      	cmp	r4, #3
    9b44:	d92d      	bls.n	9ba2 <memset+0x7e>
    9b46:	b2cd      	uxtb	r5, r1
    9b48:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    9b4c:	2c0f      	cmp	r4, #15
    9b4e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    9b52:	d936      	bls.n	9bc2 <memset+0x9e>
    9b54:	f1a4 0210 	sub.w	r2, r4, #16
    9b58:	f022 0c0f 	bic.w	ip, r2, #15
    9b5c:	f103 0e20 	add.w	lr, r3, #32
    9b60:	44e6      	add	lr, ip
    9b62:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    9b66:	f103 0210 	add.w	r2, r3, #16
    9b6a:	e942 5504 	strd	r5, r5, [r2, #-16]
    9b6e:	e942 5502 	strd	r5, r5, [r2, #-8]
    9b72:	3210      	adds	r2, #16
    9b74:	4572      	cmp	r2, lr
    9b76:	d1f8      	bne.n	9b6a <memset+0x46>
    9b78:	f10c 0201 	add.w	r2, ip, #1
    9b7c:	f014 0f0c 	tst.w	r4, #12
    9b80:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    9b84:	f004 0c0f 	and.w	ip, r4, #15
    9b88:	d013      	beq.n	9bb2 <memset+0x8e>
    9b8a:	f1ac 0304 	sub.w	r3, ip, #4
    9b8e:	f023 0303 	bic.w	r3, r3, #3
    9b92:	3304      	adds	r3, #4
    9b94:	4413      	add	r3, r2
    9b96:	f842 5b04 	str.w	r5, [r2], #4
    9b9a:	4293      	cmp	r3, r2
    9b9c:	d1fb      	bne.n	9b96 <memset+0x72>
    9b9e:	f00c 0403 	and.w	r4, ip, #3
    9ba2:	b12c      	cbz	r4, 9bb0 <memset+0x8c>
    9ba4:	b2c9      	uxtb	r1, r1
    9ba6:	441c      	add	r4, r3
    9ba8:	f803 1b01 	strb.w	r1, [r3], #1
    9bac:	429c      	cmp	r4, r3
    9bae:	d1fb      	bne.n	9ba8 <memset+0x84>
    9bb0:	bd30      	pop	{r4, r5, pc}
    9bb2:	4664      	mov	r4, ip
    9bb4:	4613      	mov	r3, r2
    9bb6:	2c00      	cmp	r4, #0
    9bb8:	d1f4      	bne.n	9ba4 <memset+0x80>
    9bba:	e7f9      	b.n	9bb0 <memset+0x8c>
    9bbc:	4603      	mov	r3, r0
    9bbe:	4614      	mov	r4, r2
    9bc0:	e7bf      	b.n	9b42 <memset+0x1e>
    9bc2:	461a      	mov	r2, r3
    9bc4:	46a4      	mov	ip, r4
    9bc6:	e7e0      	b.n	9b8a <memset+0x66>

00009bc8 <strchr>:
    9bc8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    9bcc:	4603      	mov	r3, r0
    9bce:	d044      	beq.n	9c5a <strchr+0x92>
    9bd0:	0782      	lsls	r2, r0, #30
    9bd2:	d132      	bne.n	9c3a <strchr+0x72>
    9bd4:	b510      	push	{r4, lr}
    9bd6:	6804      	ldr	r4, [r0, #0]
    9bd8:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
    9bdc:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
    9be0:	ea8e 0204 	eor.w	r2, lr, r4
    9be4:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    9be8:	ea23 0302 	bic.w	r3, r3, r2
    9bec:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    9bf0:	ea22 0204 	bic.w	r2, r2, r4
    9bf4:	4313      	orrs	r3, r2
    9bf6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    9bfa:	d10f      	bne.n	9c1c <strchr+0x54>
    9bfc:	f850 4f04 	ldr.w	r4, [r0, #4]!
    9c00:	ea84 0c0e 	eor.w	ip, r4, lr
    9c04:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
    9c08:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
    9c0c:	ea23 0304 	bic.w	r3, r3, r4
    9c10:	ea22 020c 	bic.w	r2, r2, ip
    9c14:	4313      	orrs	r3, r2
    9c16:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    9c1a:	d0ef      	beq.n	9bfc <strchr+0x34>
    9c1c:	7803      	ldrb	r3, [r0, #0]
    9c1e:	b923      	cbnz	r3, 9c2a <strchr+0x62>
    9c20:	e036      	b.n	9c90 <strchr+0xc8>
    9c22:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    9c26:	2b00      	cmp	r3, #0
    9c28:	d032      	beq.n	9c90 <strchr+0xc8>
    9c2a:	4299      	cmp	r1, r3
    9c2c:	d1f9      	bne.n	9c22 <strchr+0x5a>
    9c2e:	bd10      	pop	{r4, pc}
    9c30:	428a      	cmp	r2, r1
    9c32:	d011      	beq.n	9c58 <strchr+0x90>
    9c34:	079a      	lsls	r2, r3, #30
    9c36:	4618      	mov	r0, r3
    9c38:	d0cc      	beq.n	9bd4 <strchr+0xc>
    9c3a:	4618      	mov	r0, r3
    9c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
    9c40:	2a00      	cmp	r2, #0
    9c42:	d1f5      	bne.n	9c30 <strchr+0x68>
    9c44:	4610      	mov	r0, r2
    9c46:	4770      	bx	lr
    9c48:	0799      	lsls	r1, r3, #30
    9c4a:	4618      	mov	r0, r3
    9c4c:	d007      	beq.n	9c5e <strchr+0x96>
    9c4e:	4618      	mov	r0, r3
    9c50:	3301      	adds	r3, #1
    9c52:	7802      	ldrb	r2, [r0, #0]
    9c54:	2a00      	cmp	r2, #0
    9c56:	d1f7      	bne.n	9c48 <strchr+0x80>
    9c58:	4770      	bx	lr
    9c5a:	0782      	lsls	r2, r0, #30
    9c5c:	d1f7      	bne.n	9c4e <strchr+0x86>
    9c5e:	6802      	ldr	r2, [r0, #0]
    9c60:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    9c64:	ea23 0302 	bic.w	r3, r3, r2
    9c68:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    9c6c:	d108      	bne.n	9c80 <strchr+0xb8>
    9c6e:	f850 2f04 	ldr.w	r2, [r0, #4]!
    9c72:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
    9c76:	ea23 0302 	bic.w	r3, r3, r2
    9c7a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
    9c7e:	d0f6      	beq.n	9c6e <strchr+0xa6>
    9c80:	7803      	ldrb	r3, [r0, #0]
    9c82:	2b00      	cmp	r3, #0
    9c84:	d0e8      	beq.n	9c58 <strchr+0x90>
    9c86:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	d1fb      	bne.n	9c86 <strchr+0xbe>
    9c8e:	4770      	bx	lr
    9c90:	4618      	mov	r0, r3
    9c92:	bd10      	pop	{r4, pc}

00009c94 <strncpy>:
    9c94:	ea40 0301 	orr.w	r3, r0, r1
    9c98:	079b      	lsls	r3, r3, #30
    9c9a:	b530      	push	{r4, r5, lr}
    9c9c:	d101      	bne.n	9ca2 <strncpy+0xe>
    9c9e:	2a03      	cmp	r2, #3
    9ca0:	d80f      	bhi.n	9cc2 <strncpy+0x2e>
    9ca2:	4684      	mov	ip, r0
    9ca4:	f101 3eff 	add.w	lr, r1, #4294967295
    9ca8:	e007      	b.n	9cba <strncpy+0x26>
    9caa:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    9cae:	f803 1b01 	strb.w	r1, [r3], #1
    9cb2:	1e54      	subs	r4, r2, #1
    9cb4:	b1c1      	cbz	r1, 9ce8 <strncpy+0x54>
    9cb6:	469c      	mov	ip, r3
    9cb8:	4622      	mov	r2, r4
    9cba:	4663      	mov	r3, ip
    9cbc:	2a00      	cmp	r2, #0
    9cbe:	d1f4      	bne.n	9caa <strncpy+0x16>
    9cc0:	bd30      	pop	{r4, r5, pc}
    9cc2:	460b      	mov	r3, r1
    9cc4:	4684      	mov	ip, r0
    9cc6:	4619      	mov	r1, r3
    9cc8:	f853 5b04 	ldr.w	r5, [r3], #4
    9ccc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    9cd0:	ea24 0405 	bic.w	r4, r4, r5
    9cd4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    9cd8:	d1e4      	bne.n	9ca4 <strncpy+0x10>
    9cda:	3a04      	subs	r2, #4
    9cdc:	2a03      	cmp	r2, #3
    9cde:	f84c 5b04 	str.w	r5, [ip], #4
    9ce2:	4619      	mov	r1, r3
    9ce4:	d8ef      	bhi.n	9cc6 <strncpy+0x32>
    9ce6:	e7dd      	b.n	9ca4 <strncpy+0x10>
    9ce8:	4494      	add	ip, r2
    9cea:	2c00      	cmp	r4, #0
    9cec:	d0e8      	beq.n	9cc0 <strncpy+0x2c>
    9cee:	f803 1b01 	strb.w	r1, [r3], #1
    9cf2:	4563      	cmp	r3, ip
    9cf4:	d1fb      	bne.n	9cee <strncpy+0x5a>
    9cf6:	bd30      	pop	{r4, r5, pc}

00009cf8 <__locale_mb_cur_max>:
    9cf8:	4b01      	ldr	r3, [pc, #4]	; (9d00 <__locale_mb_cur_max+0x8>)
    9cfa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    9cfe:	4770      	bx	lr
    9d00:	200041cc 	.word	0x200041cc

00009d04 <_close_r>:
    9d04:	b538      	push	{r3, r4, r5, lr}
    9d06:	4d07      	ldr	r5, [pc, #28]	; (9d24 <_close_r+0x20>)
    9d08:	2200      	movs	r2, #0
    9d0a:	4604      	mov	r4, r0
    9d0c:	4608      	mov	r0, r1
    9d0e:	602a      	str	r2, [r5, #0]
    9d10:	f7fd fb08 	bl	7324 <_close>
    9d14:	1c43      	adds	r3, r0, #1
    9d16:	d000      	beq.n	9d1a <_close_r+0x16>
    9d18:	bd38      	pop	{r3, r4, r5, pc}
    9d1a:	682b      	ldr	r3, [r5, #0]
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d0fb      	beq.n	9d18 <_close_r+0x14>
    9d20:	6023      	str	r3, [r4, #0]
    9d22:	bd38      	pop	{r3, r4, r5, pc}
    9d24:	20004fdc 	.word	0x20004fdc

00009d28 <_lseek_r>:
    9d28:	b538      	push	{r3, r4, r5, lr}
    9d2a:	460c      	mov	r4, r1
    9d2c:	4d08      	ldr	r5, [pc, #32]	; (9d50 <_lseek_r+0x28>)
    9d2e:	4684      	mov	ip, r0
    9d30:	4611      	mov	r1, r2
    9d32:	4620      	mov	r0, r4
    9d34:	461a      	mov	r2, r3
    9d36:	2300      	movs	r3, #0
    9d38:	602b      	str	r3, [r5, #0]
    9d3a:	4664      	mov	r4, ip
    9d3c:	f7fd fafe 	bl	733c <_lseek>
    9d40:	1c43      	adds	r3, r0, #1
    9d42:	d000      	beq.n	9d46 <_lseek_r+0x1e>
    9d44:	bd38      	pop	{r3, r4, r5, pc}
    9d46:	682b      	ldr	r3, [r5, #0]
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d0fb      	beq.n	9d44 <_lseek_r+0x1c>
    9d4c:	6023      	str	r3, [r4, #0]
    9d4e:	bd38      	pop	{r3, r4, r5, pc}
    9d50:	20004fdc 	.word	0x20004fdc

00009d54 <_read_r>:
    9d54:	b538      	push	{r3, r4, r5, lr}
    9d56:	460c      	mov	r4, r1
    9d58:	4d08      	ldr	r5, [pc, #32]	; (9d7c <_read_r+0x28>)
    9d5a:	4684      	mov	ip, r0
    9d5c:	4611      	mov	r1, r2
    9d5e:	4620      	mov	r0, r4
    9d60:	461a      	mov	r2, r3
    9d62:	2300      	movs	r3, #0
    9d64:	602b      	str	r3, [r5, #0]
    9d66:	4664      	mov	r4, ip
    9d68:	f7fd fada 	bl	7320 <_read>
    9d6c:	1c43      	adds	r3, r0, #1
    9d6e:	d000      	beq.n	9d72 <_read_r+0x1e>
    9d70:	bd38      	pop	{r3, r4, r5, pc}
    9d72:	682b      	ldr	r3, [r5, #0]
    9d74:	2b00      	cmp	r3, #0
    9d76:	d0fb      	beq.n	9d70 <_read_r+0x1c>
    9d78:	6023      	str	r3, [r4, #0]
    9d7a:	bd38      	pop	{r3, r4, r5, pc}
    9d7c:	20004fdc 	.word	0x20004fdc

00009d80 <_sbrk_r>:
    9d80:	b538      	push	{r3, r4, r5, lr}
    9d82:	4d07      	ldr	r5, [pc, #28]	; (9da0 <_sbrk_r+0x20>)
    9d84:	2200      	movs	r2, #0
    9d86:	4604      	mov	r4, r0
    9d88:	4608      	mov	r0, r1
    9d8a:	602a      	str	r2, [r5, #0]
    9d8c:	f7fd faae 	bl	72ec <_sbrk>
    9d90:	1c43      	adds	r3, r0, #1
    9d92:	d000      	beq.n	9d96 <_sbrk_r+0x16>
    9d94:	bd38      	pop	{r3, r4, r5, pc}
    9d96:	682b      	ldr	r3, [r5, #0]
    9d98:	2b00      	cmp	r3, #0
    9d9a:	d0fb      	beq.n	9d94 <_sbrk_r+0x14>
    9d9c:	6023      	str	r3, [r4, #0]
    9d9e:	bd38      	pop	{r3, r4, r5, pc}
    9da0:	20004fdc 	.word	0x20004fdc

00009da4 <_write_r>:
    9da4:	b538      	push	{r3, r4, r5, lr}
    9da6:	460c      	mov	r4, r1
    9da8:	4d08      	ldr	r5, [pc, #32]	; (9dcc <_write_r+0x28>)
    9daa:	4684      	mov	ip, r0
    9dac:	4611      	mov	r1, r2
    9dae:	4620      	mov	r0, r4
    9db0:	461a      	mov	r2, r3
    9db2:	2300      	movs	r3, #0
    9db4:	602b      	str	r3, [r5, #0]
    9db6:	4664      	mov	r4, ip
    9db8:	f7fc fe56 	bl	6a68 <_write>
    9dbc:	1c43      	adds	r3, r0, #1
    9dbe:	d000      	beq.n	9dc2 <_write_r+0x1e>
    9dc0:	bd38      	pop	{r3, r4, r5, pc}
    9dc2:	682b      	ldr	r3, [r5, #0]
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d0fb      	beq.n	9dc0 <_write_r+0x1c>
    9dc8:	6023      	str	r3, [r4, #0]
    9dca:	bd38      	pop	{r3, r4, r5, pc}
    9dcc:	20004fdc 	.word	0x20004fdc

00009dd0 <__errno>:
    9dd0:	4b01      	ldr	r3, [pc, #4]	; (9dd8 <__errno+0x8>)
    9dd2:	6818      	ldr	r0, [r3, #0]
    9dd4:	4770      	bx	lr
    9dd6:	bf00      	nop
    9dd8:	20004754 	.word	0x20004754

00009ddc <__libc_init_array>:
    9ddc:	b570      	push	{r4, r5, r6, lr}
    9dde:	4e0d      	ldr	r6, [pc, #52]	; (9e14 <__libc_init_array+0x38>)
    9de0:	4d0d      	ldr	r5, [pc, #52]	; (9e18 <__libc_init_array+0x3c>)
    9de2:	1b76      	subs	r6, r6, r5
    9de4:	10b6      	asrs	r6, r6, #2
    9de6:	d006      	beq.n	9df6 <__libc_init_array+0x1a>
    9de8:	2400      	movs	r4, #0
    9dea:	f855 3b04 	ldr.w	r3, [r5], #4
    9dee:	3401      	adds	r4, #1
    9df0:	4798      	blx	r3
    9df2:	42a6      	cmp	r6, r4
    9df4:	d1f9      	bne.n	9dea <__libc_init_array+0xe>
    9df6:	4e09      	ldr	r6, [pc, #36]	; (9e1c <__libc_init_array+0x40>)
    9df8:	4d09      	ldr	r5, [pc, #36]	; (9e20 <__libc_init_array+0x44>)
    9dfa:	1b76      	subs	r6, r6, r5
    9dfc:	f005 fba4 	bl	f548 <___init_veneer>
    9e00:	10b6      	asrs	r6, r6, #2
    9e02:	d006      	beq.n	9e12 <__libc_init_array+0x36>
    9e04:	2400      	movs	r4, #0
    9e06:	f855 3b04 	ldr.w	r3, [r5], #4
    9e0a:	3401      	adds	r4, #1
    9e0c:	4798      	blx	r3
    9e0e:	42a6      	cmp	r6, r4
    9e10:	d1f9      	bne.n	9e06 <__libc_init_array+0x2a>
    9e12:	bd70      	pop	{r4, r5, r6, pc}
    9e14:	60001e48 	.word	0x60001e48
    9e18:	60001e48 	.word	0x60001e48
    9e1c:	60001e50 	.word	0x60001e50
    9e20:	60001e48 	.word	0x60001e48

00009e24 <__retarget_lock_init_recursive>:
    9e24:	4770      	bx	lr
    9e26:	bf00      	nop

00009e28 <__retarget_lock_close_recursive>:
    9e28:	4770      	bx	lr
    9e2a:	bf00      	nop

00009e2c <__retarget_lock_acquire_recursive>:
    9e2c:	4770      	bx	lr
    9e2e:	bf00      	nop

00009e30 <__retarget_lock_release_recursive>:
    9e30:	4770      	bx	lr
    9e32:	bf00      	nop
	...
    9e40:	eba2 0003 	sub.w	r0, r2, r3
    9e44:	4770      	bx	lr
    9e46:	bf00      	nop

00009e48 <strcmp>:
    9e48:	7802      	ldrb	r2, [r0, #0]
    9e4a:	780b      	ldrb	r3, [r1, #0]
    9e4c:	2a01      	cmp	r2, #1
    9e4e:	bf28      	it	cs
    9e50:	429a      	cmpcs	r2, r3
    9e52:	d1f5      	bne.n	9e40 <__retarget_lock_release_recursive+0x10>
    9e54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
    9e58:	ea40 0401 	orr.w	r4, r0, r1
    9e5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    9e60:	f06f 0c00 	mvn.w	ip, #0
    9e64:	ea4f 7244 	mov.w	r2, r4, lsl #29
    9e68:	b312      	cbz	r2, 9eb0 <strcmp+0x68>
    9e6a:	ea80 0401 	eor.w	r4, r0, r1
    9e6e:	f014 0f07 	tst.w	r4, #7
    9e72:	d16a      	bne.n	9f4a <strcmp+0x102>
    9e74:	f000 0407 	and.w	r4, r0, #7
    9e78:	f020 0007 	bic.w	r0, r0, #7
    9e7c:	f004 0503 	and.w	r5, r4, #3
    9e80:	f021 0107 	bic.w	r1, r1, #7
    9e84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    9e88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    9e8c:	f014 0f04 	tst.w	r4, #4
    9e90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    9e94:	fa0c f405 	lsl.w	r4, ip, r5
    9e98:	ea62 0204 	orn	r2, r2, r4
    9e9c:	ea66 0604 	orn	r6, r6, r4
    9ea0:	d00a      	beq.n	9eb8 <strcmp+0x70>
    9ea2:	ea63 0304 	orn	r3, r3, r4
    9ea6:	4662      	mov	r2, ip
    9ea8:	ea67 0704 	orn	r7, r7, r4
    9eac:	4666      	mov	r6, ip
    9eae:	e003      	b.n	9eb8 <strcmp+0x70>
    9eb0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
    9eb4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
    9eb8:	fa82 f54c 	uadd8	r5, r2, ip
    9ebc:	ea82 0406 	eor.w	r4, r2, r6
    9ec0:	faa4 f48c 	sel	r4, r4, ip
    9ec4:	bb6c      	cbnz	r4, 9f22 <strcmp+0xda>
    9ec6:	fa83 f54c 	uadd8	r5, r3, ip
    9eca:	ea83 0507 	eor.w	r5, r3, r7
    9ece:	faa5 f58c 	sel	r5, r5, ip
    9ed2:	b995      	cbnz	r5, 9efa <strcmp+0xb2>
    9ed4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
    9ed8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
    9edc:	fa82 f54c 	uadd8	r5, r2, ip
    9ee0:	ea82 0406 	eor.w	r4, r2, r6
    9ee4:	faa4 f48c 	sel	r4, r4, ip
    9ee8:	fa83 f54c 	uadd8	r5, r3, ip
    9eec:	ea83 0507 	eor.w	r5, r3, r7
    9ef0:	faa5 f58c 	sel	r5, r5, ip
    9ef4:	4325      	orrs	r5, r4
    9ef6:	d0db      	beq.n	9eb0 <strcmp+0x68>
    9ef8:	b99c      	cbnz	r4, 9f22 <strcmp+0xda>
    9efa:	ba2d      	rev	r5, r5
    9efc:	fab5 f485 	clz	r4, r5
    9f00:	f024 0407 	bic.w	r4, r4, #7
    9f04:	fa27 f104 	lsr.w	r1, r7, r4
    9f08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    9f0c:	fa23 f304 	lsr.w	r3, r3, r4
    9f10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9f14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9f18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    9f1c:	eba0 0001 	sub.w	r0, r0, r1
    9f20:	4770      	bx	lr
    9f22:	ba24      	rev	r4, r4
    9f24:	fab4 f484 	clz	r4, r4
    9f28:	f024 0407 	bic.w	r4, r4, #7
    9f2c:	fa26 f104 	lsr.w	r1, r6, r4
    9f30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    9f34:	fa22 f204 	lsr.w	r2, r2, r4
    9f38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    9f3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9f40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    9f44:	eba0 0001 	sub.w	r0, r0, r1
    9f48:	4770      	bx	lr
    9f4a:	f014 0f03 	tst.w	r4, #3
    9f4e:	d13c      	bne.n	9fca <strcmp+0x182>
    9f50:	f010 0403 	ands.w	r4, r0, #3
    9f54:	d128      	bne.n	9fa8 <strcmp+0x160>
    9f56:	f850 2b08 	ldr.w	r2, [r0], #8
    9f5a:	f851 3b08 	ldr.w	r3, [r1], #8
    9f5e:	fa82 f54c 	uadd8	r5, r2, ip
    9f62:	ea82 0503 	eor.w	r5, r2, r3
    9f66:	faa5 f58c 	sel	r5, r5, ip
    9f6a:	b95d      	cbnz	r5, 9f84 <strcmp+0x13c>
    9f6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
    9f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
    9f74:	fa82 f54c 	uadd8	r5, r2, ip
    9f78:	ea82 0503 	eor.w	r5, r2, r3
    9f7c:	faa5 f58c 	sel	r5, r5, ip
    9f80:	2d00      	cmp	r5, #0
    9f82:	d0e8      	beq.n	9f56 <strcmp+0x10e>
    9f84:	ba2d      	rev	r5, r5
    9f86:	fab5 f485 	clz	r4, r5
    9f8a:	f024 0407 	bic.w	r4, r4, #7
    9f8e:	fa23 f104 	lsr.w	r1, r3, r4
    9f92:	fa22 f204 	lsr.w	r2, r2, r4
    9f96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    9f9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    9f9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    9fa2:	eba0 0001 	sub.w	r0, r0, r1
    9fa6:	4770      	bx	lr
    9fa8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
    9fac:	f020 0003 	bic.w	r0, r0, #3
    9fb0:	f850 2b08 	ldr.w	r2, [r0], #8
    9fb4:	f021 0103 	bic.w	r1, r1, #3
    9fb8:	f851 3b08 	ldr.w	r3, [r1], #8
    9fbc:	fa0c f404 	lsl.w	r4, ip, r4
    9fc0:	ea62 0204 	orn	r2, r2, r4
    9fc4:	ea63 0304 	orn	r3, r3, r4
    9fc8:	e7c9      	b.n	9f5e <strcmp+0x116>
    9fca:	f010 0403 	ands.w	r4, r0, #3
    9fce:	d01a      	beq.n	a006 <strcmp+0x1be>
    9fd0:	eba1 0104 	sub.w	r1, r1, r4
    9fd4:	f020 0003 	bic.w	r0, r0, #3
    9fd8:	07e4      	lsls	r4, r4, #31
    9fda:	f850 2b04 	ldr.w	r2, [r0], #4
    9fde:	d006      	beq.n	9fee <strcmp+0x1a6>
    9fe0:	d20f      	bcs.n	a002 <strcmp+0x1ba>
    9fe2:	788b      	ldrb	r3, [r1, #2]
    9fe4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
    9fe8:	1ae4      	subs	r4, r4, r3
    9fea:	d106      	bne.n	9ffa <strcmp+0x1b2>
    9fec:	b12b      	cbz	r3, 9ffa <strcmp+0x1b2>
    9fee:	78cb      	ldrb	r3, [r1, #3]
    9ff0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
    9ff4:	1ae4      	subs	r4, r4, r3
    9ff6:	d100      	bne.n	9ffa <strcmp+0x1b2>
    9ff8:	b91b      	cbnz	r3, a002 <strcmp+0x1ba>
    9ffa:	4620      	mov	r0, r4
    9ffc:	f85d 4b10 	ldr.w	r4, [sp], #16
    a000:	4770      	bx	lr
    a002:	f101 0104 	add.w	r1, r1, #4
    a006:	f850 2b04 	ldr.w	r2, [r0], #4
    a00a:	07cc      	lsls	r4, r1, #31
    a00c:	f021 0103 	bic.w	r1, r1, #3
    a010:	f851 3b04 	ldr.w	r3, [r1], #4
    a014:	d848      	bhi.n	a0a8 <strcmp+0x260>
    a016:	d224      	bcs.n	a062 <strcmp+0x21a>
    a018:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
    a01c:	fa82 f54c 	uadd8	r5, r2, ip
    a020:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
    a024:	faa5 f58c 	sel	r5, r5, ip
    a028:	d10a      	bne.n	a040 <strcmp+0x1f8>
    a02a:	b965      	cbnz	r5, a046 <strcmp+0x1fe>
    a02c:	f851 3b04 	ldr.w	r3, [r1], #4
    a030:	ea84 0402 	eor.w	r4, r4, r2
    a034:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
    a038:	d10e      	bne.n	a058 <strcmp+0x210>
    a03a:	f850 2b04 	ldr.w	r2, [r0], #4
    a03e:	e7eb      	b.n	a018 <strcmp+0x1d0>
    a040:	ea4f 2313 	mov.w	r3, r3, lsr #8
    a044:	e055      	b.n	a0f2 <strcmp+0x2aa>
    a046:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
    a04a:	d14d      	bne.n	a0e8 <strcmp+0x2a0>
    a04c:	7808      	ldrb	r0, [r1, #0]
    a04e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    a052:	f1c0 0000 	rsb	r0, r0, #0
    a056:	4770      	bx	lr
    a058:	ea4f 6212 	mov.w	r2, r2, lsr #24
    a05c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    a060:	e047      	b.n	a0f2 <strcmp+0x2aa>
    a062:	ea02 441c 	and.w	r4, r2, ip, lsr #16
    a066:	fa82 f54c 	uadd8	r5, r2, ip
    a06a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
    a06e:	faa5 f58c 	sel	r5, r5, ip
    a072:	d10a      	bne.n	a08a <strcmp+0x242>
    a074:	b965      	cbnz	r5, a090 <strcmp+0x248>
    a076:	f851 3b04 	ldr.w	r3, [r1], #4
    a07a:	ea84 0402 	eor.w	r4, r4, r2
    a07e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
    a082:	d10c      	bne.n	a09e <strcmp+0x256>
    a084:	f850 2b04 	ldr.w	r2, [r0], #4
    a088:	e7eb      	b.n	a062 <strcmp+0x21a>
    a08a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    a08e:	e030      	b.n	a0f2 <strcmp+0x2aa>
    a090:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
    a094:	d128      	bne.n	a0e8 <strcmp+0x2a0>
    a096:	880b      	ldrh	r3, [r1, #0]
    a098:	ea4f 4212 	mov.w	r2, r2, lsr #16
    a09c:	e029      	b.n	a0f2 <strcmp+0x2aa>
    a09e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    a0a2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
    a0a6:	e024      	b.n	a0f2 <strcmp+0x2aa>
    a0a8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    a0ac:	fa82 f54c 	uadd8	r5, r2, ip
    a0b0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
    a0b4:	faa5 f58c 	sel	r5, r5, ip
    a0b8:	d10a      	bne.n	a0d0 <strcmp+0x288>
    a0ba:	b965      	cbnz	r5, a0d6 <strcmp+0x28e>
    a0bc:	f851 3b04 	ldr.w	r3, [r1], #4
    a0c0:	ea84 0402 	eor.w	r4, r4, r2
    a0c4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
    a0c8:	d109      	bne.n	a0de <strcmp+0x296>
    a0ca:	f850 2b04 	ldr.w	r2, [r0], #4
    a0ce:	e7eb      	b.n	a0a8 <strcmp+0x260>
    a0d0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    a0d4:	e00d      	b.n	a0f2 <strcmp+0x2aa>
    a0d6:	f015 0fff 	tst.w	r5, #255	; 0xff
    a0da:	d105      	bne.n	a0e8 <strcmp+0x2a0>
    a0dc:	680b      	ldr	r3, [r1, #0]
    a0de:	ea4f 2212 	mov.w	r2, r2, lsr #8
    a0e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a0e6:	e004      	b.n	a0f2 <strcmp+0x2aa>
    a0e8:	f04f 0000 	mov.w	r0, #0
    a0ec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    a0f0:	4770      	bx	lr
    a0f2:	ba12      	rev	r2, r2
    a0f4:	ba1b      	rev	r3, r3
    a0f6:	fa82 f44c 	uadd8	r4, r2, ip
    a0fa:	ea82 0403 	eor.w	r4, r2, r3
    a0fe:	faa4 f58c 	sel	r5, r4, ip
    a102:	fab5 f485 	clz	r4, r5
    a106:	fa02 f204 	lsl.w	r2, r2, r4
    a10a:	fa03 f304 	lsl.w	r3, r3, r4
    a10e:	ea4f 6012 	mov.w	r0, r2, lsr #24
    a112:	e8fd 4504 	ldrd	r4, r5, [sp], #16
    a116:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
    a11a:	4770      	bx	lr

0000a11c <strcpy>:
    a11c:	ea80 0201 	eor.w	r2, r0, r1
    a120:	4684      	mov	ip, r0
    a122:	f012 0f03 	tst.w	r2, #3
    a126:	d14f      	bne.n	a1c8 <strcpy+0xac>
    a128:	f011 0f03 	tst.w	r1, #3
    a12c:	d132      	bne.n	a194 <strcpy+0x78>
    a12e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    a132:	f011 0f04 	tst.w	r1, #4
    a136:	f851 3b04 	ldr.w	r3, [r1], #4
    a13a:	d00b      	beq.n	a154 <strcpy+0x38>
    a13c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a140:	439a      	bics	r2, r3
    a142:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a146:	bf04      	itt	eq
    a148:	f84c 3b04 	streq.w	r3, [ip], #4
    a14c:	f851 3b04 	ldreq.w	r3, [r1], #4
    a150:	d116      	bne.n	a180 <strcpy+0x64>
    a152:	bf00      	nop
    a154:	f851 4b04 	ldr.w	r4, [r1], #4
    a158:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a15c:	439a      	bics	r2, r3
    a15e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a162:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    a166:	d10b      	bne.n	a180 <strcpy+0x64>
    a168:	f84c 3b04 	str.w	r3, [ip], #4
    a16c:	43a2      	bics	r2, r4
    a16e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a172:	bf04      	itt	eq
    a174:	f851 3b04 	ldreq.w	r3, [r1], #4
    a178:	f84c 4b04 	streq.w	r4, [ip], #4
    a17c:	d0ea      	beq.n	a154 <strcpy+0x38>
    a17e:	4623      	mov	r3, r4
    a180:	f80c 3b01 	strb.w	r3, [ip], #1
    a184:	f013 0fff 	tst.w	r3, #255	; 0xff
    a188:	ea4f 2333 	mov.w	r3, r3, ror #8
    a18c:	d1f8      	bne.n	a180 <strcpy+0x64>
    a18e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a192:	4770      	bx	lr
    a194:	f011 0f01 	tst.w	r1, #1
    a198:	d006      	beq.n	a1a8 <strcpy+0x8c>
    a19a:	f811 2b01 	ldrb.w	r2, [r1], #1
    a19e:	f80c 2b01 	strb.w	r2, [ip], #1
    a1a2:	2a00      	cmp	r2, #0
    a1a4:	bf08      	it	eq
    a1a6:	4770      	bxeq	lr
    a1a8:	f011 0f02 	tst.w	r1, #2
    a1ac:	d0bf      	beq.n	a12e <strcpy+0x12>
    a1ae:	f831 2b02 	ldrh.w	r2, [r1], #2
    a1b2:	f012 0fff 	tst.w	r2, #255	; 0xff
    a1b6:	bf16      	itet	ne
    a1b8:	f82c 2b02 	strhne.w	r2, [ip], #2
    a1bc:	f88c 2000 	strbeq.w	r2, [ip]
    a1c0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    a1c4:	d1b3      	bne.n	a12e <strcpy+0x12>
    a1c6:	4770      	bx	lr
    a1c8:	f811 2b01 	ldrb.w	r2, [r1], #1
    a1cc:	f80c 2b01 	strb.w	r2, [ip], #1
    a1d0:	2a00      	cmp	r2, #0
    a1d2:	d1f9      	bne.n	a1c8 <strcpy+0xac>
    a1d4:	4770      	bx	lr
    a1d6:	bf00      	nop
	...

0000a200 <strlen>:
    a200:	f890 f000 	pld	[r0]
    a204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    a208:	f020 0107 	bic.w	r1, r0, #7
    a20c:	f06f 0c00 	mvn.w	ip, #0
    a210:	f010 0407 	ands.w	r4, r0, #7
    a214:	f891 f020 	pld	[r1, #32]
    a218:	f040 8049 	bne.w	a2ae <strlen+0xae>
    a21c:	f04f 0400 	mov.w	r4, #0
    a220:	f06f 0007 	mvn.w	r0, #7
    a224:	e9d1 2300 	ldrd	r2, r3, [r1]
    a228:	f891 f040 	pld	[r1, #64]	; 0x40
    a22c:	f100 0008 	add.w	r0, r0, #8
    a230:	fa82 f24c 	uadd8	r2, r2, ip
    a234:	faa4 f28c 	sel	r2, r4, ip
    a238:	fa83 f34c 	uadd8	r3, r3, ip
    a23c:	faa2 f38c 	sel	r3, r2, ip
    a240:	bb4b      	cbnz	r3, a296 <strlen+0x96>
    a242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    a246:	fa82 f24c 	uadd8	r2, r2, ip
    a24a:	f100 0008 	add.w	r0, r0, #8
    a24e:	faa4 f28c 	sel	r2, r4, ip
    a252:	fa83 f34c 	uadd8	r3, r3, ip
    a256:	faa2 f38c 	sel	r3, r2, ip
    a25a:	b9e3      	cbnz	r3, a296 <strlen+0x96>
    a25c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    a260:	fa82 f24c 	uadd8	r2, r2, ip
    a264:	f100 0008 	add.w	r0, r0, #8
    a268:	faa4 f28c 	sel	r2, r4, ip
    a26c:	fa83 f34c 	uadd8	r3, r3, ip
    a270:	faa2 f38c 	sel	r3, r2, ip
    a274:	b97b      	cbnz	r3, a296 <strlen+0x96>
    a276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    a27a:	f101 0120 	add.w	r1, r1, #32
    a27e:	fa82 f24c 	uadd8	r2, r2, ip
    a282:	f100 0008 	add.w	r0, r0, #8
    a286:	faa4 f28c 	sel	r2, r4, ip
    a28a:	fa83 f34c 	uadd8	r3, r3, ip
    a28e:	faa2 f38c 	sel	r3, r2, ip
    a292:	2b00      	cmp	r3, #0
    a294:	d0c6      	beq.n	a224 <strlen+0x24>
    a296:	2a00      	cmp	r2, #0
    a298:	bf04      	itt	eq
    a29a:	3004      	addeq	r0, #4
    a29c:	461a      	moveq	r2, r3
    a29e:	ba12      	rev	r2, r2
    a2a0:	fab2 f282 	clz	r2, r2
    a2a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    a2a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    a2ac:	4770      	bx	lr
    a2ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    a2b2:	f004 0503 	and.w	r5, r4, #3
    a2b6:	f1c4 0000 	rsb	r0, r4, #0
    a2ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    a2be:	f014 0f04 	tst.w	r4, #4
    a2c2:	f891 f040 	pld	[r1, #64]	; 0x40
    a2c6:	fa0c f505 	lsl.w	r5, ip, r5
    a2ca:	ea62 0205 	orn	r2, r2, r5
    a2ce:	bf1c      	itt	ne
    a2d0:	ea63 0305 	ornne	r3, r3, r5
    a2d4:	4662      	movne	r2, ip
    a2d6:	f04f 0400 	mov.w	r4, #0
    a2da:	e7a9      	b.n	a230 <strlen+0x30>

0000a2dc <__register_exitproc>:
    a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a2e0:	f8df a07c 	ldr.w	sl, [pc, #124]	; a360 <__register_exitproc+0x84>
    a2e4:	4606      	mov	r6, r0
    a2e6:	f8da 0000 	ldr.w	r0, [sl]
    a2ea:	4698      	mov	r8, r3
    a2ec:	460f      	mov	r7, r1
    a2ee:	4691      	mov	r9, r2
    a2f0:	f7ff fd9c 	bl	9e2c <__retarget_lock_acquire_recursive>
    a2f4:	4b18      	ldr	r3, [pc, #96]	; (a358 <__register_exitproc+0x7c>)
    a2f6:	681c      	ldr	r4, [r3, #0]
    a2f8:	b324      	cbz	r4, a344 <__register_exitproc+0x68>
    a2fa:	6865      	ldr	r5, [r4, #4]
    a2fc:	2d1f      	cmp	r5, #31
    a2fe:	dc24      	bgt.n	a34a <__register_exitproc+0x6e>
    a300:	b95e      	cbnz	r6, a31a <__register_exitproc+0x3e>
    a302:	1c6b      	adds	r3, r5, #1
    a304:	3502      	adds	r5, #2
    a306:	f8da 0000 	ldr.w	r0, [sl]
    a30a:	6063      	str	r3, [r4, #4]
    a30c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    a310:	f7ff fd8e 	bl	9e30 <__retarget_lock_release_recursive>
    a314:	2000      	movs	r0, #0
    a316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a31a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    a31e:	2301      	movs	r3, #1
    a320:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    a324:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    a328:	40ab      	lsls	r3, r5
    a32a:	431a      	orrs	r2, r3
    a32c:	2e02      	cmp	r6, #2
    a32e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    a332:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    a336:	d1e4      	bne.n	a302 <__register_exitproc+0x26>
    a338:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    a33c:	431a      	orrs	r2, r3
    a33e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    a342:	e7de      	b.n	a302 <__register_exitproc+0x26>
    a344:	4c05      	ldr	r4, [pc, #20]	; (a35c <__register_exitproc+0x80>)
    a346:	601c      	str	r4, [r3, #0]
    a348:	e7d7      	b.n	a2fa <__register_exitproc+0x1e>
    a34a:	f8da 0000 	ldr.w	r0, [sl]
    a34e:	f7ff fd6f 	bl	9e30 <__retarget_lock_release_recursive>
    a352:	f04f 30ff 	mov.w	r0, #4294967295
    a356:	e7de      	b.n	a316 <__register_exitproc+0x3a>
    a358:	20004cb8 	.word	0x20004cb8
    a35c:	20004cbc 	.word	0x20004cbc
    a360:	200041c0 	.word	0x200041c0

0000a364 <_malloc_trim_r>:
    a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a366:	4f24      	ldr	r7, [pc, #144]	; (a3f8 <_malloc_trim_r+0x94>)
    a368:	460c      	mov	r4, r1
    a36a:	4606      	mov	r6, r0
    a36c:	f7fe fe92 	bl	9094 <__malloc_lock>
    a370:	68bb      	ldr	r3, [r7, #8]
    a372:	685d      	ldr	r5, [r3, #4]
    a374:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    a378:	310f      	adds	r1, #15
    a37a:	f025 0503 	bic.w	r5, r5, #3
    a37e:	194b      	adds	r3, r1, r5
    a380:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    a384:	f023 030f 	bic.w	r3, r3, #15
    a388:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    a38c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    a390:	db07      	blt.n	a3a2 <_malloc_trim_r+0x3e>
    a392:	2100      	movs	r1, #0
    a394:	4630      	mov	r0, r6
    a396:	f7ff fcf3 	bl	9d80 <_sbrk_r>
    a39a:	68bb      	ldr	r3, [r7, #8]
    a39c:	442b      	add	r3, r5
    a39e:	4298      	cmp	r0, r3
    a3a0:	d004      	beq.n	a3ac <_malloc_trim_r+0x48>
    a3a2:	4630      	mov	r0, r6
    a3a4:	f7fe fe7c 	bl	90a0 <__malloc_unlock>
    a3a8:	2000      	movs	r0, #0
    a3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3ac:	4261      	negs	r1, r4
    a3ae:	4630      	mov	r0, r6
    a3b0:	f7ff fce6 	bl	9d80 <_sbrk_r>
    a3b4:	3001      	adds	r0, #1
    a3b6:	d00d      	beq.n	a3d4 <_malloc_trim_r+0x70>
    a3b8:	4a10      	ldr	r2, [pc, #64]	; (a3fc <_malloc_trim_r+0x98>)
    a3ba:	68bb      	ldr	r3, [r7, #8]
    a3bc:	1b2d      	subs	r5, r5, r4
    a3be:	f045 0501 	orr.w	r5, r5, #1
    a3c2:	605d      	str	r5, [r3, #4]
    a3c4:	6813      	ldr	r3, [r2, #0]
    a3c6:	4630      	mov	r0, r6
    a3c8:	1b1b      	subs	r3, r3, r4
    a3ca:	6013      	str	r3, [r2, #0]
    a3cc:	f7fe fe68 	bl	90a0 <__malloc_unlock>
    a3d0:	2001      	movs	r0, #1
    a3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3d4:	2100      	movs	r1, #0
    a3d6:	4630      	mov	r0, r6
    a3d8:	f7ff fcd2 	bl	9d80 <_sbrk_r>
    a3dc:	68ba      	ldr	r2, [r7, #8]
    a3de:	1a83      	subs	r3, r0, r2
    a3e0:	2b0f      	cmp	r3, #15
    a3e2:	ddde      	ble.n	a3a2 <_malloc_trim_r+0x3e>
    a3e4:	f043 0301 	orr.w	r3, r3, #1
    a3e8:	6053      	str	r3, [r2, #4]
    a3ea:	4b05      	ldr	r3, [pc, #20]	; (a400 <_malloc_trim_r+0x9c>)
    a3ec:	4903      	ldr	r1, [pc, #12]	; (a3fc <_malloc_trim_r+0x98>)
    a3ee:	681b      	ldr	r3, [r3, #0]
    a3f0:	1ac0      	subs	r0, r0, r3
    a3f2:	6008      	str	r0, [r1, #0]
    a3f4:	e7d5      	b.n	a3a2 <_malloc_trim_r+0x3e>
    a3f6:	bf00      	nop
    a3f8:	20004338 	.word	0x20004338
    a3fc:	20004e58 	.word	0x20004e58
    a400:	20004740 	.word	0x20004740

0000a404 <_free_r>:
    a404:	2900      	cmp	r1, #0
    a406:	d061      	beq.n	a4cc <_free_r+0xc8>
    a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a40a:	460c      	mov	r4, r1
    a40c:	4606      	mov	r6, r0
    a40e:	f7fe fe41 	bl	9094 <__malloc_lock>
    a412:	f854 2c04 	ldr.w	r2, [r4, #-4]
    a416:	4f7b      	ldr	r7, [pc, #492]	; (a604 <_free_r+0x200>)
    a418:	f1a4 0508 	sub.w	r5, r4, #8
    a41c:	f022 0101 	bic.w	r1, r2, #1
    a420:	eb05 0c01 	add.w	ip, r5, r1
    a424:	68b8      	ldr	r0, [r7, #8]
    a426:	f8dc 3004 	ldr.w	r3, [ip, #4]
    a42a:	4560      	cmp	r0, ip
    a42c:	f023 0303 	bic.w	r3, r3, #3
    a430:	f000 808b 	beq.w	a54a <_free_r+0x146>
    a434:	07d2      	lsls	r2, r2, #31
    a436:	f8cc 3004 	str.w	r3, [ip, #4]
    a43a:	d432      	bmi.n	a4a2 <_free_r+0x9e>
    a43c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    a440:	1aad      	subs	r5, r5, r2
    a442:	4411      	add	r1, r2
    a444:	68aa      	ldr	r2, [r5, #8]
    a446:	f107 0008 	add.w	r0, r7, #8
    a44a:	4282      	cmp	r2, r0
    a44c:	d06a      	beq.n	a524 <_free_r+0x120>
    a44e:	eb0c 0403 	add.w	r4, ip, r3
    a452:	f8d4 e004 	ldr.w	lr, [r4, #4]
    a456:	68ec      	ldr	r4, [r5, #12]
    a458:	60d4      	str	r4, [r2, #12]
    a45a:	f01e 0f01 	tst.w	lr, #1
    a45e:	60a2      	str	r2, [r4, #8]
    a460:	f000 8097 	beq.w	a592 <_free_r+0x18e>
    a464:	f041 0301 	orr.w	r3, r1, #1
    a468:	606b      	str	r3, [r5, #4]
    a46a:	f8cc 1000 	str.w	r1, [ip]
    a46e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a472:	d235      	bcs.n	a4e0 <_free_r+0xdc>
    a474:	6878      	ldr	r0, [r7, #4]
    a476:	08cb      	lsrs	r3, r1, #3
    a478:	2201      	movs	r2, #1
    a47a:	0949      	lsrs	r1, r1, #5
    a47c:	3301      	adds	r3, #1
    a47e:	408a      	lsls	r2, r1
    a480:	4302      	orrs	r2, r0
    a482:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    a486:	607a      	str	r2, [r7, #4]
    a488:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    a48c:	3a08      	subs	r2, #8
    a48e:	e9c5 1202 	strd	r1, r2, [r5, #8]
    a492:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    a496:	60cd      	str	r5, [r1, #12]
    a498:	4630      	mov	r0, r6
    a49a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a49e:	f7fe bdff 	b.w	90a0 <__malloc_unlock>
    a4a2:	eb0c 0203 	add.w	r2, ip, r3
    a4a6:	6852      	ldr	r2, [r2, #4]
    a4a8:	07d0      	lsls	r0, r2, #31
    a4aa:	d410      	bmi.n	a4ce <_free_r+0xca>
    a4ac:	4419      	add	r1, r3
    a4ae:	f107 0008 	add.w	r0, r7, #8
    a4b2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    a4b6:	4283      	cmp	r3, r0
    a4b8:	d073      	beq.n	a5a2 <_free_r+0x19e>
    a4ba:	f8dc 200c 	ldr.w	r2, [ip, #12]
    a4be:	60da      	str	r2, [r3, #12]
    a4c0:	6093      	str	r3, [r2, #8]
    a4c2:	f041 0301 	orr.w	r3, r1, #1
    a4c6:	606b      	str	r3, [r5, #4]
    a4c8:	5069      	str	r1, [r5, r1]
    a4ca:	e7d0      	b.n	a46e <_free_r+0x6a>
    a4cc:	4770      	bx	lr
    a4ce:	f041 0301 	orr.w	r3, r1, #1
    a4d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    a4d6:	f844 3c04 	str.w	r3, [r4, #-4]
    a4da:	f8cc 1000 	str.w	r1, [ip]
    a4de:	d3c9      	bcc.n	a474 <_free_r+0x70>
    a4e0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    a4e4:	ea4f 2351 	mov.w	r3, r1, lsr #9
    a4e8:	d248      	bcs.n	a57c <_free_r+0x178>
    a4ea:	098b      	lsrs	r3, r1, #6
    a4ec:	f103 0039 	add.w	r0, r3, #57	; 0x39
    a4f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
    a4f4:	00c3      	lsls	r3, r0, #3
    a4f6:	18f8      	adds	r0, r7, r3
    a4f8:	58fb      	ldr	r3, [r7, r3]
    a4fa:	3808      	subs	r0, #8
    a4fc:	4298      	cmp	r0, r3
    a4fe:	d059      	beq.n	a5b4 <_free_r+0x1b0>
    a500:	685a      	ldr	r2, [r3, #4]
    a502:	f022 0203 	bic.w	r2, r2, #3
    a506:	428a      	cmp	r2, r1
    a508:	d902      	bls.n	a510 <_free_r+0x10c>
    a50a:	689b      	ldr	r3, [r3, #8]
    a50c:	4298      	cmp	r0, r3
    a50e:	d1f7      	bne.n	a500 <_free_r+0xfc>
    a510:	68d8      	ldr	r0, [r3, #12]
    a512:	e9c5 3002 	strd	r3, r0, [r5, #8]
    a516:	6085      	str	r5, [r0, #8]
    a518:	60dd      	str	r5, [r3, #12]
    a51a:	4630      	mov	r0, r6
    a51c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a520:	f7fe bdbe 	b.w	90a0 <__malloc_unlock>
    a524:	eb0c 0203 	add.w	r2, ip, r3
    a528:	6852      	ldr	r2, [r2, #4]
    a52a:	07d2      	lsls	r2, r2, #31
    a52c:	d463      	bmi.n	a5f6 <_free_r+0x1f2>
    a52e:	440b      	add	r3, r1
    a530:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    a534:	60ca      	str	r2, [r1, #12]
    a536:	6091      	str	r1, [r2, #8]
    a538:	f043 0201 	orr.w	r2, r3, #1
    a53c:	606a      	str	r2, [r5, #4]
    a53e:	4630      	mov	r0, r6
    a540:	50eb      	str	r3, [r5, r3]
    a542:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a546:	f7fe bdab 	b.w	90a0 <__malloc_unlock>
    a54a:	440b      	add	r3, r1
    a54c:	07d1      	lsls	r1, r2, #31
    a54e:	d407      	bmi.n	a560 <_free_r+0x15c>
    a550:	f854 2c08 	ldr.w	r2, [r4, #-8]
    a554:	1aad      	subs	r5, r5, r2
    a556:	4413      	add	r3, r2
    a558:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    a55c:	60ca      	str	r2, [r1, #12]
    a55e:	6091      	str	r1, [r2, #8]
    a560:	f043 0201 	orr.w	r2, r3, #1
    a564:	606a      	str	r2, [r5, #4]
    a566:	4a28      	ldr	r2, [pc, #160]	; (a608 <_free_r+0x204>)
    a568:	60bd      	str	r5, [r7, #8]
    a56a:	6812      	ldr	r2, [r2, #0]
    a56c:	429a      	cmp	r2, r3
    a56e:	d893      	bhi.n	a498 <_free_r+0x94>
    a570:	4b26      	ldr	r3, [pc, #152]	; (a60c <_free_r+0x208>)
    a572:	4630      	mov	r0, r6
    a574:	6819      	ldr	r1, [r3, #0]
    a576:	f7ff fef5 	bl	a364 <_malloc_trim_r>
    a57a:	e78d      	b.n	a498 <_free_r+0x94>
    a57c:	2b14      	cmp	r3, #20
    a57e:	d90a      	bls.n	a596 <_free_r+0x192>
    a580:	2b54      	cmp	r3, #84	; 0x54
    a582:	d81f      	bhi.n	a5c4 <_free_r+0x1c0>
    a584:	0b0b      	lsrs	r3, r1, #12
    a586:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    a58a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    a58e:	00c3      	lsls	r3, r0, #3
    a590:	e7b1      	b.n	a4f6 <_free_r+0xf2>
    a592:	4419      	add	r1, r3
    a594:	e78d      	b.n	a4b2 <_free_r+0xae>
    a596:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    a59a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    a59e:	00c3      	lsls	r3, r0, #3
    a5a0:	e7a9      	b.n	a4f6 <_free_r+0xf2>
    a5a2:	f041 0301 	orr.w	r3, r1, #1
    a5a6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    a5aa:	e9c5 0002 	strd	r0, r0, [r5, #8]
    a5ae:	606b      	str	r3, [r5, #4]
    a5b0:	5069      	str	r1, [r5, r1]
    a5b2:	e771      	b.n	a498 <_free_r+0x94>
    a5b4:	6879      	ldr	r1, [r7, #4]
    a5b6:	1092      	asrs	r2, r2, #2
    a5b8:	2401      	movs	r4, #1
    a5ba:	fa04 f202 	lsl.w	r2, r4, r2
    a5be:	430a      	orrs	r2, r1
    a5c0:	607a      	str	r2, [r7, #4]
    a5c2:	e7a6      	b.n	a512 <_free_r+0x10e>
    a5c4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    a5c8:	d806      	bhi.n	a5d8 <_free_r+0x1d4>
    a5ca:	0bcb      	lsrs	r3, r1, #15
    a5cc:	f103 0078 	add.w	r0, r3, #120	; 0x78
    a5d0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    a5d4:	00c3      	lsls	r3, r0, #3
    a5d6:	e78e      	b.n	a4f6 <_free_r+0xf2>
    a5d8:	f240 5254 	movw	r2, #1364	; 0x554
    a5dc:	4293      	cmp	r3, r2
    a5de:	d806      	bhi.n	a5ee <_free_r+0x1ea>
    a5e0:	0c8b      	lsrs	r3, r1, #18
    a5e2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    a5e6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    a5ea:	00c3      	lsls	r3, r0, #3
    a5ec:	e783      	b.n	a4f6 <_free_r+0xf2>
    a5ee:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    a5f2:	227e      	movs	r2, #126	; 0x7e
    a5f4:	e77f      	b.n	a4f6 <_free_r+0xf2>
    a5f6:	f041 0301 	orr.w	r3, r1, #1
    a5fa:	606b      	str	r3, [r5, #4]
    a5fc:	f8cc 1000 	str.w	r1, [ip]
    a600:	e74a      	b.n	a498 <_free_r+0x94>
    a602:	bf00      	nop
    a604:	20004338 	.word	0x20004338
    a608:	20004744 	.word	0x20004744
    a60c:	20004e88 	.word	0x20004e88

0000a610 <__ascii_mbtowc>:
    a610:	b082      	sub	sp, #8
    a612:	b149      	cbz	r1, a628 <__ascii_mbtowc+0x18>
    a614:	b15a      	cbz	r2, a62e <__ascii_mbtowc+0x1e>
    a616:	b16b      	cbz	r3, a634 <__ascii_mbtowc+0x24>
    a618:	7813      	ldrb	r3, [r2, #0]
    a61a:	600b      	str	r3, [r1, #0]
    a61c:	7812      	ldrb	r2, [r2, #0]
    a61e:	1e10      	subs	r0, r2, #0
    a620:	bf18      	it	ne
    a622:	2001      	movne	r0, #1
    a624:	b002      	add	sp, #8
    a626:	4770      	bx	lr
    a628:	a901      	add	r1, sp, #4
    a62a:	2a00      	cmp	r2, #0
    a62c:	d1f3      	bne.n	a616 <__ascii_mbtowc+0x6>
    a62e:	4610      	mov	r0, r2
    a630:	b002      	add	sp, #8
    a632:	4770      	bx	lr
    a634:	f06f 0001 	mvn.w	r0, #1
    a638:	e7f4      	b.n	a624 <__ascii_mbtowc+0x14>
    a63a:	bf00      	nop

0000a63c <_Balloc>:
    a63c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    a63e:	b570      	push	{r4, r5, r6, lr}
    a640:	4605      	mov	r5, r0
    a642:	460c      	mov	r4, r1
    a644:	b14b      	cbz	r3, a65a <_Balloc+0x1e>
    a646:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a64a:	b180      	cbz	r0, a66e <_Balloc+0x32>
    a64c:	6802      	ldr	r2, [r0, #0]
    a64e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    a652:	2300      	movs	r3, #0
    a654:	e9c0 3303 	strd	r3, r3, [r0, #12]
    a658:	bd70      	pop	{r4, r5, r6, pc}
    a65a:	2221      	movs	r2, #33	; 0x21
    a65c:	2104      	movs	r1, #4
    a65e:	f002 fb33 	bl	ccc8 <_calloc_r>
    a662:	4603      	mov	r3, r0
    a664:	6468      	str	r0, [r5, #68]	; 0x44
    a666:	2800      	cmp	r0, #0
    a668:	d1ed      	bne.n	a646 <_Balloc+0xa>
    a66a:	2000      	movs	r0, #0
    a66c:	bd70      	pop	{r4, r5, r6, pc}
    a66e:	2101      	movs	r1, #1
    a670:	fa01 f604 	lsl.w	r6, r1, r4
    a674:	1d72      	adds	r2, r6, #5
    a676:	0092      	lsls	r2, r2, #2
    a678:	4628      	mov	r0, r5
    a67a:	f002 fb25 	bl	ccc8 <_calloc_r>
    a67e:	2800      	cmp	r0, #0
    a680:	d0f3      	beq.n	a66a <_Balloc+0x2e>
    a682:	e9c0 4601 	strd	r4, r6, [r0, #4]
    a686:	e7e4      	b.n	a652 <_Balloc+0x16>

0000a688 <_Bfree>:
    a688:	b131      	cbz	r1, a698 <_Bfree+0x10>
    a68a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    a68c:	684a      	ldr	r2, [r1, #4]
    a68e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    a692:	6008      	str	r0, [r1, #0]
    a694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    a698:	4770      	bx	lr
    a69a:	bf00      	nop

0000a69c <__multadd>:
    a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6a0:	690e      	ldr	r6, [r1, #16]
    a6a2:	4680      	mov	r8, r0
    a6a4:	460f      	mov	r7, r1
    a6a6:	461d      	mov	r5, r3
    a6a8:	f101 0e14 	add.w	lr, r1, #20
    a6ac:	2000      	movs	r0, #0
    a6ae:	f8de 1000 	ldr.w	r1, [lr]
    a6b2:	b28c      	uxth	r4, r1
    a6b4:	fb02 5304 	mla	r3, r2, r4, r5
    a6b8:	0c09      	lsrs	r1, r1, #16
    a6ba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    a6be:	fb02 cc01 	mla	ip, r2, r1, ip
    a6c2:	3001      	adds	r0, #1
    a6c4:	b29c      	uxth	r4, r3
    a6c6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    a6ca:	4286      	cmp	r6, r0
    a6cc:	f84e 4b04 	str.w	r4, [lr], #4
    a6d0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    a6d4:	dceb      	bgt.n	a6ae <__multadd+0x12>
    a6d6:	b13d      	cbz	r5, a6e8 <__multadd+0x4c>
    a6d8:	68bb      	ldr	r3, [r7, #8]
    a6da:	42b3      	cmp	r3, r6
    a6dc:	dd07      	ble.n	a6ee <__multadd+0x52>
    a6de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    a6e2:	3601      	adds	r6, #1
    a6e4:	615d      	str	r5, [r3, #20]
    a6e6:	613e      	str	r6, [r7, #16]
    a6e8:	4638      	mov	r0, r7
    a6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6ee:	6879      	ldr	r1, [r7, #4]
    a6f0:	4640      	mov	r0, r8
    a6f2:	3101      	adds	r1, #1
    a6f4:	f7ff ffa2 	bl	a63c <_Balloc>
    a6f8:	4604      	mov	r4, r0
    a6fa:	b1b0      	cbz	r0, a72a <__multadd+0x8e>
    a6fc:	693a      	ldr	r2, [r7, #16]
    a6fe:	3202      	adds	r2, #2
    a700:	f107 010c 	add.w	r1, r7, #12
    a704:	0092      	lsls	r2, r2, #2
    a706:	300c      	adds	r0, #12
    a708:	f7fc fc64 	bl	6fd4 <memcpy>
    a70c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    a710:	687a      	ldr	r2, [r7, #4]
    a712:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    a716:	6039      	str	r1, [r7, #0]
    a718:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    a71c:	4627      	mov	r7, r4
    a71e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    a722:	3601      	adds	r6, #1
    a724:	615d      	str	r5, [r3, #20]
    a726:	613e      	str	r6, [r7, #16]
    a728:	e7de      	b.n	a6e8 <__multadd+0x4c>
    a72a:	4b03      	ldr	r3, [pc, #12]	; (a738 <__multadd+0x9c>)
    a72c:	4803      	ldr	r0, [pc, #12]	; (a73c <__multadd+0xa0>)
    a72e:	4622      	mov	r2, r4
    a730:	21ba      	movs	r1, #186	; 0xba
    a732:	f002 faa9 	bl	cc88 <__assert_func>
    a736:	bf00      	nop
    a738:	200008fc 	.word	0x200008fc
    a73c:	20000910 	.word	0x20000910

0000a740 <__hi0bits>:
    a740:	0c03      	lsrs	r3, r0, #16
    a742:	041b      	lsls	r3, r3, #16
    a744:	b9d3      	cbnz	r3, a77c <__hi0bits+0x3c>
    a746:	0400      	lsls	r0, r0, #16
    a748:	2310      	movs	r3, #16
    a74a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    a74e:	bf04      	itt	eq
    a750:	0200      	lsleq	r0, r0, #8
    a752:	3308      	addeq	r3, #8
    a754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    a758:	bf04      	itt	eq
    a75a:	0100      	lsleq	r0, r0, #4
    a75c:	3304      	addeq	r3, #4
    a75e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    a762:	bf04      	itt	eq
    a764:	0080      	lsleq	r0, r0, #2
    a766:	3302      	addeq	r3, #2
    a768:	2800      	cmp	r0, #0
    a76a:	db05      	blt.n	a778 <__hi0bits+0x38>
    a76c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    a770:	f103 0301 	add.w	r3, r3, #1
    a774:	bf08      	it	eq
    a776:	2320      	moveq	r3, #32
    a778:	4618      	mov	r0, r3
    a77a:	4770      	bx	lr
    a77c:	2300      	movs	r3, #0
    a77e:	e7e4      	b.n	a74a <__hi0bits+0xa>

0000a780 <__lo0bits>:
    a780:	6803      	ldr	r3, [r0, #0]
    a782:	f013 0207 	ands.w	r2, r3, #7
    a786:	d008      	beq.n	a79a <__lo0bits+0x1a>
    a788:	07d9      	lsls	r1, r3, #31
    a78a:	d41f      	bmi.n	a7cc <__lo0bits+0x4c>
    a78c:	079a      	lsls	r2, r3, #30
    a78e:	d522      	bpl.n	a7d6 <__lo0bits+0x56>
    a790:	085b      	lsrs	r3, r3, #1
    a792:	6003      	str	r3, [r0, #0]
    a794:	2201      	movs	r2, #1
    a796:	4610      	mov	r0, r2
    a798:	4770      	bx	lr
    a79a:	b299      	uxth	r1, r3
    a79c:	b909      	cbnz	r1, a7a2 <__lo0bits+0x22>
    a79e:	0c1b      	lsrs	r3, r3, #16
    a7a0:	2210      	movs	r2, #16
    a7a2:	b2d9      	uxtb	r1, r3
    a7a4:	b909      	cbnz	r1, a7aa <__lo0bits+0x2a>
    a7a6:	3208      	adds	r2, #8
    a7a8:	0a1b      	lsrs	r3, r3, #8
    a7aa:	0719      	lsls	r1, r3, #28
    a7ac:	bf04      	itt	eq
    a7ae:	091b      	lsreq	r3, r3, #4
    a7b0:	3204      	addeq	r2, #4
    a7b2:	0799      	lsls	r1, r3, #30
    a7b4:	bf04      	itt	eq
    a7b6:	089b      	lsreq	r3, r3, #2
    a7b8:	3202      	addeq	r2, #2
    a7ba:	07d9      	lsls	r1, r3, #31
    a7bc:	d403      	bmi.n	a7c6 <__lo0bits+0x46>
    a7be:	085b      	lsrs	r3, r3, #1
    a7c0:	f102 0201 	add.w	r2, r2, #1
    a7c4:	d005      	beq.n	a7d2 <__lo0bits+0x52>
    a7c6:	6003      	str	r3, [r0, #0]
    a7c8:	4610      	mov	r0, r2
    a7ca:	4770      	bx	lr
    a7cc:	2200      	movs	r2, #0
    a7ce:	4610      	mov	r0, r2
    a7d0:	4770      	bx	lr
    a7d2:	2220      	movs	r2, #32
    a7d4:	e7df      	b.n	a796 <__lo0bits+0x16>
    a7d6:	089b      	lsrs	r3, r3, #2
    a7d8:	2202      	movs	r2, #2
    a7da:	6003      	str	r3, [r0, #0]
    a7dc:	4610      	mov	r0, r2
    a7de:	4770      	bx	lr

0000a7e0 <__i2b>:
    a7e0:	b538      	push	{r3, r4, r5, lr}
    a7e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    a7e4:	4604      	mov	r4, r0
    a7e6:	460d      	mov	r5, r1
    a7e8:	b14b      	cbz	r3, a7fe <__i2b+0x1e>
    a7ea:	6858      	ldr	r0, [r3, #4]
    a7ec:	b1b0      	cbz	r0, a81c <__i2b+0x3c>
    a7ee:	6802      	ldr	r2, [r0, #0]
    a7f0:	605a      	str	r2, [r3, #4]
    a7f2:	2200      	movs	r2, #0
    a7f4:	2301      	movs	r3, #1
    a7f6:	e9c0 3504 	strd	r3, r5, [r0, #16]
    a7fa:	60c2      	str	r2, [r0, #12]
    a7fc:	bd38      	pop	{r3, r4, r5, pc}
    a7fe:	2221      	movs	r2, #33	; 0x21
    a800:	2104      	movs	r1, #4
    a802:	f002 fa61 	bl	ccc8 <_calloc_r>
    a806:	4603      	mov	r3, r0
    a808:	6460      	str	r0, [r4, #68]	; 0x44
    a80a:	2800      	cmp	r0, #0
    a80c:	d1ed      	bne.n	a7ea <__i2b+0xa>
    a80e:	4b09      	ldr	r3, [pc, #36]	; (a834 <__i2b+0x54>)
    a810:	4809      	ldr	r0, [pc, #36]	; (a838 <__i2b+0x58>)
    a812:	2200      	movs	r2, #0
    a814:	f240 1145 	movw	r1, #325	; 0x145
    a818:	f002 fa36 	bl	cc88 <__assert_func>
    a81c:	221c      	movs	r2, #28
    a81e:	2101      	movs	r1, #1
    a820:	4620      	mov	r0, r4
    a822:	f002 fa51 	bl	ccc8 <_calloc_r>
    a826:	2800      	cmp	r0, #0
    a828:	d0f1      	beq.n	a80e <__i2b+0x2e>
    a82a:	2201      	movs	r2, #1
    a82c:	2302      	movs	r3, #2
    a82e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    a832:	e7de      	b.n	a7f2 <__i2b+0x12>
    a834:	200008fc 	.word	0x200008fc
    a838:	20000910 	.word	0x20000910

0000a83c <__multiply>:
    a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a840:	690e      	ldr	r6, [r1, #16]
    a842:	6915      	ldr	r5, [r2, #16]
    a844:	42ae      	cmp	r6, r5
    a846:	b085      	sub	sp, #20
    a848:	4688      	mov	r8, r1
    a84a:	4614      	mov	r4, r2
    a84c:	db05      	blt.n	a85a <__multiply+0x1e>
    a84e:	462a      	mov	r2, r5
    a850:	4623      	mov	r3, r4
    a852:	4635      	mov	r5, r6
    a854:	460c      	mov	r4, r1
    a856:	4616      	mov	r6, r2
    a858:	4698      	mov	r8, r3
    a85a:	68a3      	ldr	r3, [r4, #8]
    a85c:	6861      	ldr	r1, [r4, #4]
    a85e:	19af      	adds	r7, r5, r6
    a860:	42bb      	cmp	r3, r7
    a862:	bfb8      	it	lt
    a864:	3101      	addlt	r1, #1
    a866:	f7ff fee9 	bl	a63c <_Balloc>
    a86a:	9001      	str	r0, [sp, #4]
    a86c:	2800      	cmp	r0, #0
    a86e:	f000 8087 	beq.w	a980 <__multiply+0x144>
    a872:	9b01      	ldr	r3, [sp, #4]
    a874:	f103 0914 	add.w	r9, r3, #20
    a878:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    a87c:	45d1      	cmp	r9, sl
    a87e:	d205      	bcs.n	a88c <__multiply+0x50>
    a880:	464b      	mov	r3, r9
    a882:	2200      	movs	r2, #0
    a884:	f843 2b04 	str.w	r2, [r3], #4
    a888:	459a      	cmp	sl, r3
    a88a:	d8fb      	bhi.n	a884 <__multiply+0x48>
    a88c:	f108 0814 	add.w	r8, r8, #20
    a890:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    a894:	f104 0314 	add.w	r3, r4, #20
    a898:	45d8      	cmp	r8, fp
    a89a:	461a      	mov	r2, r3
    a89c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    a8a0:	d25f      	bcs.n	a962 <__multiply+0x126>
    a8a2:	1b2b      	subs	r3, r5, r4
    a8a4:	3b15      	subs	r3, #21
    a8a6:	f023 0303 	bic.w	r3, r3, #3
    a8aa:	3304      	adds	r3, #4
    a8ac:	3415      	adds	r4, #21
    a8ae:	42a5      	cmp	r5, r4
    a8b0:	bf38      	it	cc
    a8b2:	2304      	movcc	r3, #4
    a8b4:	e9cd a702 	strd	sl, r7, [sp, #8]
    a8b8:	46ac      	mov	ip, r5
    a8ba:	461f      	mov	r7, r3
    a8bc:	4692      	mov	sl, r2
    a8be:	e005      	b.n	a8cc <__multiply+0x90>
    a8c0:	0c09      	lsrs	r1, r1, #16
    a8c2:	d129      	bne.n	a918 <__multiply+0xdc>
    a8c4:	45c3      	cmp	fp, r8
    a8c6:	f109 0904 	add.w	r9, r9, #4
    a8ca:	d948      	bls.n	a95e <__multiply+0x122>
    a8cc:	f858 1b04 	ldr.w	r1, [r8], #4
    a8d0:	b28d      	uxth	r5, r1
    a8d2:	2d00      	cmp	r5, #0
    a8d4:	d0f4      	beq.n	a8c0 <__multiply+0x84>
    a8d6:	4656      	mov	r6, sl
    a8d8:	464c      	mov	r4, r9
    a8da:	2300      	movs	r3, #0
    a8dc:	f856 1b04 	ldr.w	r1, [r6], #4
    a8e0:	6822      	ldr	r2, [r4, #0]
    a8e2:	fa1f fe81 	uxth.w	lr, r1
    a8e6:	b290      	uxth	r0, r2
    a8e8:	0c09      	lsrs	r1, r1, #16
    a8ea:	fb05 000e 	mla	r0, r5, lr, r0
    a8ee:	0c12      	lsrs	r2, r2, #16
    a8f0:	4403      	add	r3, r0
    a8f2:	fb05 2201 	mla	r2, r5, r1, r2
    a8f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    a8fa:	b29b      	uxth	r3, r3
    a8fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a900:	45b4      	cmp	ip, r6
    a902:	f844 3b04 	str.w	r3, [r4], #4
    a906:	ea4f 4312 	mov.w	r3, r2, lsr #16
    a90a:	d8e7      	bhi.n	a8dc <__multiply+0xa0>
    a90c:	f849 3007 	str.w	r3, [r9, r7]
    a910:	f858 1c04 	ldr.w	r1, [r8, #-4]
    a914:	0c09      	lsrs	r1, r1, #16
    a916:	d0d5      	beq.n	a8c4 <__multiply+0x88>
    a918:	f8d9 3000 	ldr.w	r3, [r9]
    a91c:	4650      	mov	r0, sl
    a91e:	461a      	mov	r2, r3
    a920:	464c      	mov	r4, r9
    a922:	2600      	movs	r6, #0
    a924:	8805      	ldrh	r5, [r0, #0]
    a926:	0c12      	lsrs	r2, r2, #16
    a928:	fb01 2205 	mla	r2, r1, r5, r2
    a92c:	4416      	add	r6, r2
    a92e:	b29b      	uxth	r3, r3
    a930:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    a934:	f844 3b04 	str.w	r3, [r4], #4
    a938:	f850 5b04 	ldr.w	r5, [r0], #4
    a93c:	6822      	ldr	r2, [r4, #0]
    a93e:	0c2d      	lsrs	r5, r5, #16
    a940:	b293      	uxth	r3, r2
    a942:	fb01 3305 	mla	r3, r1, r5, r3
    a946:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    a94a:	4584      	cmp	ip, r0
    a94c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    a950:	d8e8      	bhi.n	a924 <__multiply+0xe8>
    a952:	45c3      	cmp	fp, r8
    a954:	f849 3007 	str.w	r3, [r9, r7]
    a958:	f109 0904 	add.w	r9, r9, #4
    a95c:	d8b6      	bhi.n	a8cc <__multiply+0x90>
    a95e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    a962:	2f00      	cmp	r7, #0
    a964:	dc02      	bgt.n	a96c <__multiply+0x130>
    a966:	e005      	b.n	a974 <__multiply+0x138>
    a968:	3f01      	subs	r7, #1
    a96a:	d003      	beq.n	a974 <__multiply+0x138>
    a96c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    a970:	2b00      	cmp	r3, #0
    a972:	d0f9      	beq.n	a968 <__multiply+0x12c>
    a974:	9b01      	ldr	r3, [sp, #4]
    a976:	4618      	mov	r0, r3
    a978:	611f      	str	r7, [r3, #16]
    a97a:	b005      	add	sp, #20
    a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a980:	4b03      	ldr	r3, [pc, #12]	; (a990 <__multiply+0x154>)
    a982:	4804      	ldr	r0, [pc, #16]	; (a994 <__multiply+0x158>)
    a984:	9a01      	ldr	r2, [sp, #4]
    a986:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a98a:	f002 f97d 	bl	cc88 <__assert_func>
    a98e:	bf00      	nop
    a990:	200008fc 	.word	0x200008fc
    a994:	20000910 	.word	0x20000910

0000a998 <__pow5mult>:
    a998:	f012 0303 	ands.w	r3, r2, #3
    a99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9a0:	4614      	mov	r4, r2
    a9a2:	4606      	mov	r6, r0
    a9a4:	d132      	bne.n	aa0c <__pow5mult+0x74>
    a9a6:	460d      	mov	r5, r1
    a9a8:	10a4      	asrs	r4, r4, #2
    a9aa:	d020      	beq.n	a9ee <__pow5mult+0x56>
    a9ac:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    a9b0:	f1b8 0f00 	cmp.w	r8, #0
    a9b4:	d033      	beq.n	aa1e <__pow5mult+0x86>
    a9b6:	07e3      	lsls	r3, r4, #31
    a9b8:	f04f 0700 	mov.w	r7, #0
    a9bc:	d407      	bmi.n	a9ce <__pow5mult+0x36>
    a9be:	1064      	asrs	r4, r4, #1
    a9c0:	d015      	beq.n	a9ee <__pow5mult+0x56>
    a9c2:	f8d8 0000 	ldr.w	r0, [r8]
    a9c6:	b1a8      	cbz	r0, a9f4 <__pow5mult+0x5c>
    a9c8:	4680      	mov	r8, r0
    a9ca:	07e3      	lsls	r3, r4, #31
    a9cc:	d5f7      	bpl.n	a9be <__pow5mult+0x26>
    a9ce:	4642      	mov	r2, r8
    a9d0:	4629      	mov	r1, r5
    a9d2:	4630      	mov	r0, r6
    a9d4:	f7ff ff32 	bl	a83c <__multiply>
    a9d8:	b1b5      	cbz	r5, aa08 <__pow5mult+0x70>
    a9da:	6869      	ldr	r1, [r5, #4]
    a9dc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    a9de:	1064      	asrs	r4, r4, #1
    a9e0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    a9e4:	602a      	str	r2, [r5, #0]
    a9e6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    a9ea:	4605      	mov	r5, r0
    a9ec:	d1e9      	bne.n	a9c2 <__pow5mult+0x2a>
    a9ee:	4628      	mov	r0, r5
    a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9f4:	4642      	mov	r2, r8
    a9f6:	4641      	mov	r1, r8
    a9f8:	4630      	mov	r0, r6
    a9fa:	f7ff ff1f 	bl	a83c <__multiply>
    a9fe:	f8c8 0000 	str.w	r0, [r8]
    aa02:	6007      	str	r7, [r0, #0]
    aa04:	4680      	mov	r8, r0
    aa06:	e7e0      	b.n	a9ca <__pow5mult+0x32>
    aa08:	4605      	mov	r5, r0
    aa0a:	e7d8      	b.n	a9be <__pow5mult+0x26>
    aa0c:	3b01      	subs	r3, #1
    aa0e:	4a0f      	ldr	r2, [pc, #60]	; (aa4c <__pow5mult+0xb4>)
    aa10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    aa14:	2300      	movs	r3, #0
    aa16:	f7ff fe41 	bl	a69c <__multadd>
    aa1a:	4605      	mov	r5, r0
    aa1c:	e7c4      	b.n	a9a8 <__pow5mult+0x10>
    aa1e:	2101      	movs	r1, #1
    aa20:	4630      	mov	r0, r6
    aa22:	f7ff fe0b 	bl	a63c <_Balloc>
    aa26:	4680      	mov	r8, r0
    aa28:	b140      	cbz	r0, aa3c <__pow5mult+0xa4>
    aa2a:	2301      	movs	r3, #1
    aa2c:	f240 2271 	movw	r2, #625	; 0x271
    aa30:	e9c0 3204 	strd	r3, r2, [r0, #16]
    aa34:	2300      	movs	r3, #0
    aa36:	6430      	str	r0, [r6, #64]	; 0x40
    aa38:	6003      	str	r3, [r0, #0]
    aa3a:	e7bc      	b.n	a9b6 <__pow5mult+0x1e>
    aa3c:	4b04      	ldr	r3, [pc, #16]	; (aa50 <__pow5mult+0xb8>)
    aa3e:	4805      	ldr	r0, [pc, #20]	; (aa54 <__pow5mult+0xbc>)
    aa40:	4642      	mov	r2, r8
    aa42:	f240 1145 	movw	r1, #325	; 0x145
    aa46:	f002 f91f 	bl	cc88 <__assert_func>
    aa4a:	bf00      	nop
    aa4c:	20000ecc 	.word	0x20000ecc
    aa50:	200008fc 	.word	0x200008fc
    aa54:	20000910 	.word	0x20000910

0000aa58 <__lshift>:
    aa58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa5c:	460d      	mov	r5, r1
    aa5e:	4614      	mov	r4, r2
    aa60:	692f      	ldr	r7, [r5, #16]
    aa62:	68ab      	ldr	r3, [r5, #8]
    aa64:	6849      	ldr	r1, [r1, #4]
    aa66:	eb07 1762 	add.w	r7, r7, r2, asr #5
    aa6a:	1c7e      	adds	r6, r7, #1
    aa6c:	429e      	cmp	r6, r3
    aa6e:	4680      	mov	r8, r0
    aa70:	ea4f 1962 	mov.w	r9, r2, asr #5
    aa74:	dd04      	ble.n	aa80 <__lshift+0x28>
    aa76:	005b      	lsls	r3, r3, #1
    aa78:	429e      	cmp	r6, r3
    aa7a:	f101 0101 	add.w	r1, r1, #1
    aa7e:	dcfa      	bgt.n	aa76 <__lshift+0x1e>
    aa80:	4640      	mov	r0, r8
    aa82:	f7ff fddb 	bl	a63c <_Balloc>
    aa86:	4684      	mov	ip, r0
    aa88:	2800      	cmp	r0, #0
    aa8a:	d052      	beq.n	ab32 <__lshift+0xda>
    aa8c:	f1b9 0f00 	cmp.w	r9, #0
    aa90:	f100 0214 	add.w	r2, r0, #20
    aa94:	dd0e      	ble.n	aab4 <__lshift+0x5c>
    aa96:	f109 0105 	add.w	r1, r9, #5
    aa9a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    aa9e:	4613      	mov	r3, r2
    aaa0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    aaa4:	2000      	movs	r0, #0
    aaa6:	f843 0b04 	str.w	r0, [r3], #4
    aaaa:	428b      	cmp	r3, r1
    aaac:	d1fb      	bne.n	aaa6 <__lshift+0x4e>
    aaae:	f1ae 0314 	sub.w	r3, lr, #20
    aab2:	441a      	add	r2, r3
    aab4:	6929      	ldr	r1, [r5, #16]
    aab6:	f105 0314 	add.w	r3, r5, #20
    aaba:	f014 0e1f 	ands.w	lr, r4, #31
    aabe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    aac2:	d02e      	beq.n	ab22 <__lshift+0xca>
    aac4:	f1ce 0920 	rsb	r9, lr, #32
    aac8:	4610      	mov	r0, r2
    aaca:	f04f 0a00 	mov.w	sl, #0
    aace:	681c      	ldr	r4, [r3, #0]
    aad0:	fa04 f40e 	lsl.w	r4, r4, lr
    aad4:	ea44 040a 	orr.w	r4, r4, sl
    aad8:	f840 4b04 	str.w	r4, [r0], #4
    aadc:	f853 4b04 	ldr.w	r4, [r3], #4
    aae0:	4299      	cmp	r1, r3
    aae2:	fa24 fa09 	lsr.w	sl, r4, r9
    aae6:	d8f2      	bhi.n	aace <__lshift+0x76>
    aae8:	1b4b      	subs	r3, r1, r5
    aaea:	3b15      	subs	r3, #21
    aaec:	f023 0303 	bic.w	r3, r3, #3
    aaf0:	3304      	adds	r3, #4
    aaf2:	f105 0015 	add.w	r0, r5, #21
    aaf6:	4281      	cmp	r1, r0
    aaf8:	bf38      	it	cc
    aafa:	2304      	movcc	r3, #4
    aafc:	f1ba 0f00 	cmp.w	sl, #0
    ab00:	bf18      	it	ne
    ab02:	4637      	movne	r7, r6
    ab04:	f842 a003 	str.w	sl, [r2, r3]
    ab08:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    ab0c:	686a      	ldr	r2, [r5, #4]
    ab0e:	f8cc 7010 	str.w	r7, [ip, #16]
    ab12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ab16:	6029      	str	r1, [r5, #0]
    ab18:	4660      	mov	r0, ip
    ab1a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    ab1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ab22:	3a04      	subs	r2, #4
    ab24:	f853 0b04 	ldr.w	r0, [r3], #4
    ab28:	f842 0f04 	str.w	r0, [r2, #4]!
    ab2c:	4299      	cmp	r1, r3
    ab2e:	d8f9      	bhi.n	ab24 <__lshift+0xcc>
    ab30:	e7ea      	b.n	ab08 <__lshift+0xb0>
    ab32:	4b03      	ldr	r3, [pc, #12]	; (ab40 <__lshift+0xe8>)
    ab34:	4803      	ldr	r0, [pc, #12]	; (ab44 <__lshift+0xec>)
    ab36:	4662      	mov	r2, ip
    ab38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    ab3c:	f002 f8a4 	bl	cc88 <__assert_func>
    ab40:	200008fc 	.word	0x200008fc
    ab44:	20000910 	.word	0x20000910

0000ab48 <__mcmp>:
    ab48:	690b      	ldr	r3, [r1, #16]
    ab4a:	4684      	mov	ip, r0
    ab4c:	6900      	ldr	r0, [r0, #16]
    ab4e:	1ac0      	subs	r0, r0, r3
    ab50:	d116      	bne.n	ab80 <__mcmp+0x38>
    ab52:	f10c 0c14 	add.w	ip, ip, #20
    ab56:	3114      	adds	r1, #20
    ab58:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    ab5c:	b410      	push	{r4}
    ab5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ab62:	e001      	b.n	ab68 <__mcmp+0x20>
    ab64:	4594      	cmp	ip, r2
    ab66:	d208      	bcs.n	ab7a <__mcmp+0x32>
    ab68:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ab6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ab70:	428c      	cmp	r4, r1
    ab72:	d0f7      	beq.n	ab64 <__mcmp+0x1c>
    ab74:	d205      	bcs.n	ab82 <__mcmp+0x3a>
    ab76:	f04f 30ff 	mov.w	r0, #4294967295
    ab7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ab7e:	4770      	bx	lr
    ab80:	4770      	bx	lr
    ab82:	2001      	movs	r0, #1
    ab84:	f85d 4b04 	ldr.w	r4, [sp], #4
    ab88:	4770      	bx	lr
    ab8a:	bf00      	nop

0000ab8c <__mdiff>:
    ab8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab90:	690f      	ldr	r7, [r1, #16]
    ab92:	6913      	ldr	r3, [r2, #16]
    ab94:	1aff      	subs	r7, r7, r3
    ab96:	2f00      	cmp	r7, #0
    ab98:	460e      	mov	r6, r1
    ab9a:	4690      	mov	r8, r2
    ab9c:	d17f      	bne.n	ac9e <__mdiff+0x112>
    ab9e:	f101 0514 	add.w	r5, r1, #20
    aba2:	3214      	adds	r2, #20
    aba4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    aba8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    abac:	e001      	b.n	abb2 <__mdiff+0x26>
    abae:	429d      	cmp	r5, r3
    abb0:	d278      	bcs.n	aca4 <__mdiff+0x118>
    abb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    abb6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    abba:	42a1      	cmp	r1, r4
    abbc:	d0f7      	beq.n	abae <__mdiff+0x22>
    abbe:	d369      	bcc.n	ac94 <__mdiff+0x108>
    abc0:	6871      	ldr	r1, [r6, #4]
    abc2:	f7ff fd3b 	bl	a63c <_Balloc>
    abc6:	4681      	mov	r9, r0
    abc8:	2800      	cmp	r0, #0
    abca:	d077      	beq.n	acbc <__mdiff+0x130>
    abcc:	6935      	ldr	r5, [r6, #16]
    abce:	f8d8 2010 	ldr.w	r2, [r8, #16]
    abd2:	60c7      	str	r7, [r0, #12]
    abd4:	f108 0e14 	add.w	lr, r8, #20
    abd8:	f106 0014 	add.w	r0, r6, #20
    abdc:	f109 0a14 	add.w	sl, r9, #20
    abe0:	f106 0110 	add.w	r1, r6, #16
    abe4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    abe8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    abec:	4656      	mov	r6, sl
    abee:	f04f 0c00 	mov.w	ip, #0
    abf2:	f85e 4b04 	ldr.w	r4, [lr], #4
    abf6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    abfa:	b2a3      	uxth	r3, r4
    abfc:	fa1c fc8b 	uxtah	ip, ip, fp
    ac00:	ebac 0303 	sub.w	r3, ip, r3
    ac04:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    ac08:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    ac0c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    ac10:	b29b      	uxth	r3, r3
    ac12:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ac16:	4572      	cmp	r2, lr
    ac18:	f846 3b04 	str.w	r3, [r6], #4
    ac1c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    ac20:	d8e7      	bhi.n	abf2 <__mdiff+0x66>
    ac22:	eba2 0108 	sub.w	r1, r2, r8
    ac26:	3915      	subs	r1, #21
    ac28:	f108 0815 	add.w	r8, r8, #21
    ac2c:	4542      	cmp	r2, r8
    ac2e:	f021 0403 	bic.w	r4, r1, #3
    ac32:	f104 0404 	add.w	r4, r4, #4
    ac36:	bf38      	it	cc
    ac38:	2404      	movcc	r4, #4
    ac3a:	4420      	add	r0, r4
    ac3c:	f021 0203 	bic.w	r2, r1, #3
    ac40:	bf38      	it	cc
    ac42:	2200      	movcc	r2, #0
    ac44:	4287      	cmp	r7, r0
    ac46:	4452      	add	r2, sl
    ac48:	4454      	add	r4, sl
    ac4a:	d918      	bls.n	ac7e <__mdiff+0xf2>
    ac4c:	4626      	mov	r6, r4
    ac4e:	4601      	mov	r1, r0
    ac50:	f851 3b04 	ldr.w	r3, [r1], #4
    ac54:	fa1c fc83 	uxtah	ip, ip, r3
    ac58:	ea4f 422c 	mov.w	r2, ip, asr #16
    ac5c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    ac60:	fa1f fc8c 	uxth.w	ip, ip
    ac64:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    ac68:	428f      	cmp	r7, r1
    ac6a:	f846 3b04 	str.w	r3, [r6], #4
    ac6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    ac72:	d8ed      	bhi.n	ac50 <__mdiff+0xc4>
    ac74:	3f01      	subs	r7, #1
    ac76:	1a3f      	subs	r7, r7, r0
    ac78:	f027 0703 	bic.w	r7, r7, #3
    ac7c:	19e2      	adds	r2, r4, r7
    ac7e:	b923      	cbnz	r3, ac8a <__mdiff+0xfe>
    ac80:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    ac84:	3d01      	subs	r5, #1
    ac86:	2b00      	cmp	r3, #0
    ac88:	d0fa      	beq.n	ac80 <__mdiff+0xf4>
    ac8a:	f8c9 5010 	str.w	r5, [r9, #16]
    ac8e:	4648      	mov	r0, r9
    ac90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac94:	4633      	mov	r3, r6
    ac96:	2701      	movs	r7, #1
    ac98:	4646      	mov	r6, r8
    ac9a:	4698      	mov	r8, r3
    ac9c:	e790      	b.n	abc0 <__mdiff+0x34>
    ac9e:	dbf9      	blt.n	ac94 <__mdiff+0x108>
    aca0:	2700      	movs	r7, #0
    aca2:	e78d      	b.n	abc0 <__mdiff+0x34>
    aca4:	2100      	movs	r1, #0
    aca6:	f7ff fcc9 	bl	a63c <_Balloc>
    acaa:	4681      	mov	r9, r0
    acac:	b168      	cbz	r0, acca <__mdiff+0x13e>
    acae:	2201      	movs	r2, #1
    acb0:	2300      	movs	r3, #0
    acb2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    acb6:	4648      	mov	r0, r9
    acb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acbc:	4b06      	ldr	r3, [pc, #24]	; (acd8 <__mdiff+0x14c>)
    acbe:	4807      	ldr	r0, [pc, #28]	; (acdc <__mdiff+0x150>)
    acc0:	464a      	mov	r2, r9
    acc2:	f240 2145 	movw	r1, #581	; 0x245
    acc6:	f001 ffdf 	bl	cc88 <__assert_func>
    acca:	4b03      	ldr	r3, [pc, #12]	; (acd8 <__mdiff+0x14c>)
    accc:	4803      	ldr	r0, [pc, #12]	; (acdc <__mdiff+0x150>)
    acce:	464a      	mov	r2, r9
    acd0:	f240 2137 	movw	r1, #567	; 0x237
    acd4:	f001 ffd8 	bl	cc88 <__assert_func>
    acd8:	200008fc 	.word	0x200008fc
    acdc:	20000910 	.word	0x20000910

0000ace0 <__d2b>:
    ace0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ace4:	4688      	mov	r8, r1
    ace6:	b083      	sub	sp, #12
    ace8:	2101      	movs	r1, #1
    acea:	ec57 6b10 	vmov	r6, r7, d0
    acee:	4615      	mov	r5, r2
    acf0:	f7ff fca4 	bl	a63c <_Balloc>
    acf4:	4604      	mov	r4, r0
    acf6:	2800      	cmp	r0, #0
    acf8:	d051      	beq.n	ad9e <__d2b+0xbe>
    acfa:	f3c7 590a 	ubfx	r9, r7, #20, #11
    acfe:	f3c7 0313 	ubfx	r3, r7, #0, #20
    ad02:	f1b9 0f00 	cmp.w	r9, #0
    ad06:	d001      	beq.n	ad0c <__d2b+0x2c>
    ad08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ad0c:	2e00      	cmp	r6, #0
    ad0e:	9301      	str	r3, [sp, #4]
    ad10:	d118      	bne.n	ad44 <__d2b+0x64>
    ad12:	a801      	add	r0, sp, #4
    ad14:	f7ff fd34 	bl	a780 <__lo0bits>
    ad18:	9a01      	ldr	r2, [sp, #4]
    ad1a:	6162      	str	r2, [r4, #20]
    ad1c:	2201      	movs	r2, #1
    ad1e:	f100 0320 	add.w	r3, r0, #32
    ad22:	6122      	str	r2, [r4, #16]
    ad24:	f1b9 0f00 	cmp.w	r9, #0
    ad28:	d025      	beq.n	ad76 <__d2b+0x96>
    ad2a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    ad2e:	eb09 0203 	add.w	r2, r9, r3
    ad32:	4620      	mov	r0, r4
    ad34:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    ad38:	f8c8 2000 	str.w	r2, [r8]
    ad3c:	602b      	str	r3, [r5, #0]
    ad3e:	b003      	add	sp, #12
    ad40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad44:	4668      	mov	r0, sp
    ad46:	9600      	str	r6, [sp, #0]
    ad48:	f7ff fd1a 	bl	a780 <__lo0bits>
    ad4c:	4603      	mov	r3, r0
    ad4e:	b310      	cbz	r0, ad96 <__d2b+0xb6>
    ad50:	e9dd 0200 	ldrd	r0, r2, [sp]
    ad54:	f1c3 0120 	rsb	r1, r3, #32
    ad58:	fa02 f101 	lsl.w	r1, r2, r1
    ad5c:	4301      	orrs	r1, r0
    ad5e:	40da      	lsrs	r2, r3
    ad60:	6161      	str	r1, [r4, #20]
    ad62:	9201      	str	r2, [sp, #4]
    ad64:	2a00      	cmp	r2, #0
    ad66:	61a2      	str	r2, [r4, #24]
    ad68:	bf14      	ite	ne
    ad6a:	2202      	movne	r2, #2
    ad6c:	2201      	moveq	r2, #1
    ad6e:	6122      	str	r2, [r4, #16]
    ad70:	f1b9 0f00 	cmp.w	r9, #0
    ad74:	d1d9      	bne.n	ad2a <__d2b+0x4a>
    ad76:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    ad7a:	f8c8 3000 	str.w	r3, [r8]
    ad7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    ad82:	6918      	ldr	r0, [r3, #16]
    ad84:	f7ff fcdc 	bl	a740 <__hi0bits>
    ad88:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    ad8c:	4620      	mov	r0, r4
    ad8e:	602b      	str	r3, [r5, #0]
    ad90:	b003      	add	sp, #12
    ad92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ad96:	9a00      	ldr	r2, [sp, #0]
    ad98:	6162      	str	r2, [r4, #20]
    ad9a:	9a01      	ldr	r2, [sp, #4]
    ad9c:	e7e2      	b.n	ad64 <__d2b+0x84>
    ad9e:	4b03      	ldr	r3, [pc, #12]	; (adac <__d2b+0xcc>)
    ada0:	4803      	ldr	r0, [pc, #12]	; (adb0 <__d2b+0xd0>)
    ada2:	4622      	mov	r2, r4
    ada4:	f240 310f 	movw	r1, #783	; 0x30f
    ada8:	f001 ff6e 	bl	cc88 <__assert_func>
    adac:	200008fc 	.word	0x200008fc
    adb0:	20000910 	.word	0x20000910

0000adb4 <__ascii_wctomb>:
    adb4:	b149      	cbz	r1, adca <__ascii_wctomb+0x16>
    adb6:	2aff      	cmp	r2, #255	; 0xff
    adb8:	d802      	bhi.n	adc0 <__ascii_wctomb+0xc>
    adba:	700a      	strb	r2, [r1, #0]
    adbc:	2001      	movs	r0, #1
    adbe:	4770      	bx	lr
    adc0:	238a      	movs	r3, #138	; 0x8a
    adc2:	6003      	str	r3, [r0, #0]
    adc4:	f04f 30ff 	mov.w	r0, #4294967295
    adc8:	4770      	bx	lr
    adca:	4608      	mov	r0, r1
    adcc:	4770      	bx	lr
    adce:	bf00      	nop

0000add0 <_svfprintf_r>:
    add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add4:	ed2d 8b08 	vpush	{d8-d11}
    add8:	b0d1      	sub	sp, #324	; 0x144
    adda:	460c      	mov	r4, r1
    addc:	ee0b 1a10 	vmov	s22, r1
    ade0:	4690      	mov	r8, r2
    ade2:	9308      	str	r3, [sp, #32]
    ade4:	4683      	mov	fp, r0
    ade6:	f001 febb 	bl	cb60 <_localeconv_r>
    adea:	6803      	ldr	r3, [r0, #0]
    adec:	9312      	str	r3, [sp, #72]	; 0x48
    adee:	4618      	mov	r0, r3
    adf0:	f7ff fa06 	bl	a200 <strlen>
    adf4:	af20      	add	r7, sp, #128	; 0x80
    adf6:	9010      	str	r0, [sp, #64]	; 0x40
    adf8:	2208      	movs	r2, #8
    adfa:	2100      	movs	r1, #0
    adfc:	4638      	mov	r0, r7
    adfe:	f7fe fe91 	bl	9b24 <memset>
    ae02:	89a3      	ldrh	r3, [r4, #12]
    ae04:	061b      	lsls	r3, r3, #24
    ae06:	d503      	bpl.n	ae10 <_svfprintf_r+0x40>
    ae08:	6923      	ldr	r3, [r4, #16]
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	f000 8755 	beq.w	bcba <_svfprintf_r+0xeea>
    ae10:	2300      	movs	r3, #0
    ae12:	ed9f 8b83 	vldr	d8, [pc, #524]	; b020 <_svfprintf_r+0x250>
    ae16:	ed9f 9b84 	vldr	d9, [pc, #528]	; b028 <_svfprintf_r+0x258>
    ae1a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
    ae1e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    ae22:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    ae26:	aa27      	add	r2, sp, #156	; 0x9c
    ae28:	930e      	str	r3, [sp, #56]	; 0x38
    ae2a:	9224      	str	r2, [sp, #144]	; 0x90
    ae2c:	4692      	mov	sl, r2
    ae2e:	9311      	str	r3, [sp, #68]	; 0x44
    ae30:	9304      	str	r3, [sp, #16]
    ae32:	4644      	mov	r4, r8
    ae34:	46a1      	mov	r9, r4
    ae36:	4b7e      	ldr	r3, [pc, #504]	; (b030 <_svfprintf_r+0x260>)
    ae38:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    ae3c:	f7fe ff5c 	bl	9cf8 <__locale_mb_cur_max>
    ae40:	464a      	mov	r2, r9
    ae42:	4603      	mov	r3, r0
    ae44:	a91c      	add	r1, sp, #112	; 0x70
    ae46:	9700      	str	r7, [sp, #0]
    ae48:	4658      	mov	r0, fp
    ae4a:	47a8      	blx	r5
    ae4c:	2800      	cmp	r0, #0
    ae4e:	f000 80b0 	beq.w	afb2 <_svfprintf_r+0x1e2>
    ae52:	f2c0 80a6 	blt.w	afa2 <_svfprintf_r+0x1d2>
    ae56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ae58:	2a25      	cmp	r2, #37	; 0x25
    ae5a:	4603      	mov	r3, r0
    ae5c:	d001      	beq.n	ae62 <_svfprintf_r+0x92>
    ae5e:	4499      	add	r9, r3
    ae60:	e7e9      	b.n	ae36 <_svfprintf_r+0x66>
    ae62:	ebb9 0504 	subs.w	r5, r9, r4
    ae66:	4606      	mov	r6, r0
    ae68:	f040 80a7 	bne.w	afba <_svfprintf_r+0x1ea>
    ae6c:	2300      	movs	r3, #0
    ae6e:	f04f 32ff 	mov.w	r2, #4294967295
    ae72:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    ae76:	4698      	mov	r8, r3
    ae78:	9306      	str	r3, [sp, #24]
    ae7a:	f109 0901 	add.w	r9, r9, #1
    ae7e:	f899 3000 	ldrb.w	r3, [r9]
    ae82:	9203      	str	r2, [sp, #12]
    ae84:	252b      	movs	r5, #43	; 0x2b
    ae86:	2620      	movs	r6, #32
    ae88:	f109 0901 	add.w	r9, r9, #1
    ae8c:	f1a3 0220 	sub.w	r2, r3, #32
    ae90:	2a5a      	cmp	r2, #90	; 0x5a
    ae92:	f200 80cf 	bhi.w	b034 <_svfprintf_r+0x264>
    ae96:	e8df f012 	tbh	[pc, r2, lsl #1]
    ae9a:	02e8      	.short	0x02e8
    ae9c:	00cd00cd 	.word	0x00cd00cd
    aea0:	00cd02e3 	.word	0x00cd02e3
    aea4:	00cd00cd 	.word	0x00cd00cd
    aea8:	00cd006a 	.word	0x00cd006a
    aeac:	020500cd 	.word	0x020500cd
    aeb0:	00cd0284 	.word	0x00cd0284
    aeb4:	02c90210 	.word	0x02c90210
    aeb8:	02bd00cd 	.word	0x02bd00cd
    aebc:	005b005b 	.word	0x005b005b
    aec0:	005b005b 	.word	0x005b005b
    aec4:	005b005b 	.word	0x005b005b
    aec8:	005b005b 	.word	0x005b005b
    aecc:	00cd005b 	.word	0x00cd005b
    aed0:	00cd00cd 	.word	0x00cd00cd
    aed4:	00cd00cd 	.word	0x00cd00cd
    aed8:	00cd00cd 	.word	0x00cd00cd
    aedc:	00cd0153 	.word	0x00cd0153
    aee0:	021a0183 	.word	0x021a0183
    aee4:	01530153 	.word	0x01530153
    aee8:	00cd0153 	.word	0x00cd0153
    aeec:	00cd00cd 	.word	0x00cd00cd
    aef0:	021500cd 	.word	0x021500cd
    aef4:	00cd00cd 	.word	0x00cd00cd
    aef8:	00cd0296 	.word	0x00cd0296
    aefc:	00cd00cd 	.word	0x00cd00cd
    af00:	00cd01ab 	.word	0x00cd01ab
    af04:	00cd02aa 	.word	0x00cd02aa
    af08:	06e300cd 	.word	0x06e300cd
    af0c:	00cd00cd 	.word	0x00cd00cd
    af10:	00cd00cd 	.word	0x00cd00cd
    af14:	00cd00cd 	.word	0x00cd00cd
    af18:	00cd00cd 	.word	0x00cd00cd
    af1c:	00cd0153 	.word	0x00cd0153
    af20:	01de0183 	.word	0x01de0183
    af24:	01530153 	.word	0x01530153
    af28:	02770153 	.word	0x02770153
    af2c:	007f01de 	.word	0x007f01de
    af30:	028900cd 	.word	0x028900cd
    af34:	025f00cd 	.word	0x025f00cd
    af38:	022f06e0 	.word	0x022f06e0
    af3c:	00cd007f 	.word	0x00cd007f
    af40:	007c01ab 	.word	0x007c01ab
    af44:	00cd06b8 	.word	0x00cd06b8
    af48:	06bd00cd 	.word	0x06bd00cd
    af4c:	007c00cd 	.word	0x007c00cd
    af50:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    af54:	2100      	movs	r1, #0
    af56:	f819 3b01 	ldrb.w	r3, [r9], #1
    af5a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    af5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    af62:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    af66:	2a09      	cmp	r2, #9
    af68:	d9f5      	bls.n	af56 <_svfprintf_r+0x186>
    af6a:	9106      	str	r1, [sp, #24]
    af6c:	e78e      	b.n	ae8c <_svfprintf_r+0xbc>
    af6e:	4658      	mov	r0, fp
    af70:	f001 fdf6 	bl	cb60 <_localeconv_r>
    af74:	6843      	ldr	r3, [r0, #4]
    af76:	9315      	str	r3, [sp, #84]	; 0x54
    af78:	4618      	mov	r0, r3
    af7a:	f7ff f941 	bl	a200 <strlen>
    af7e:	9016      	str	r0, [sp, #88]	; 0x58
    af80:	4658      	mov	r0, fp
    af82:	f001 fded 	bl	cb60 <_localeconv_r>
    af86:	6883      	ldr	r3, [r0, #8]
    af88:	9313      	str	r3, [sp, #76]	; 0x4c
    af8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    af8c:	2b00      	cmp	r3, #0
    af8e:	f040 862d 	bne.w	bbec <_svfprintf_r+0xe1c>
    af92:	f899 3000 	ldrb.w	r3, [r9]
    af96:	e777      	b.n	ae88 <_svfprintf_r+0xb8>
    af98:	f899 3000 	ldrb.w	r3, [r9]
    af9c:	f048 0820 	orr.w	r8, r8, #32
    afa0:	e772      	b.n	ae88 <_svfprintf_r+0xb8>
    afa2:	2208      	movs	r2, #8
    afa4:	2100      	movs	r1, #0
    afa6:	4638      	mov	r0, r7
    afa8:	f7fe fdbc 	bl	9b24 <memset>
    afac:	2301      	movs	r3, #1
    afae:	4499      	add	r9, r3
    afb0:	e741      	b.n	ae36 <_svfprintf_r+0x66>
    afb2:	ebb9 0504 	subs.w	r5, r9, r4
    afb6:	4606      	mov	r6, r0
    afb8:	d011      	beq.n	afde <_svfprintf_r+0x20e>
    afba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    afbc:	442b      	add	r3, r5
    afbe:	9326      	str	r3, [sp, #152]	; 0x98
    afc0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    afc2:	3301      	adds	r3, #1
    afc4:	2b07      	cmp	r3, #7
    afc6:	e9ca 4500 	strd	r4, r5, [sl]
    afca:	9325      	str	r3, [sp, #148]	; 0x94
    afcc:	dc1c      	bgt.n	b008 <_svfprintf_r+0x238>
    afce:	f10a 0a08 	add.w	sl, sl, #8
    afd2:	9b04      	ldr	r3, [sp, #16]
    afd4:	442b      	add	r3, r5
    afd6:	9304      	str	r3, [sp, #16]
    afd8:	2e00      	cmp	r6, #0
    afda:	f47f af47 	bne.w	ae6c <_svfprintf_r+0x9c>
    afde:	9b26      	ldr	r3, [sp, #152]	; 0x98
    afe0:	2b00      	cmp	r3, #0
    afe2:	f041 820b 	bne.w	c3fc <_svfprintf_r+0x162c>
    afe6:	ee1b 3a10 	vmov	r3, s22
    afea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    afee:	f013 0f40 	tst.w	r3, #64	; 0x40
    aff2:	9b04      	ldr	r3, [sp, #16]
    aff4:	bf18      	it	ne
    aff6:	f04f 33ff 	movne.w	r3, #4294967295
    affa:	9304      	str	r3, [sp, #16]
    affc:	9804      	ldr	r0, [sp, #16]
    affe:	b051      	add	sp, #324	; 0x144
    b000:	ecbd 8b08 	vpop	{d8-d11}
    b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b008:	ee1b 1a10 	vmov	r1, s22
    b00c:	aa24      	add	r2, sp, #144	; 0x90
    b00e:	4658      	mov	r0, fp
    b010:	f002 fde6 	bl	dbe0 <__ssprint_r>
    b014:	2800      	cmp	r0, #0
    b016:	d1e6      	bne.n	afe6 <_svfprintf_r+0x216>
    b018:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b01c:	e7d9      	b.n	afd2 <_svfprintf_r+0x202>
    b01e:	bf00      	nop
	...
    b028:	ffffffff 	.word	0xffffffff
    b02c:	7fefffff 	.word	0x7fefffff
    b030:	200041cc 	.word	0x200041cc
    b034:	930b      	str	r3, [sp, #44]	; 0x2c
    b036:	2b00      	cmp	r3, #0
    b038:	d0d1      	beq.n	afde <_svfprintf_r+0x20e>
    b03a:	2100      	movs	r1, #0
    b03c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    b040:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
    b044:	2301      	movs	r3, #1
    b046:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    b04a:	9302      	str	r3, [sp, #8]
    b04c:	9107      	str	r1, [sp, #28]
    b04e:	9305      	str	r3, [sp, #20]
    b050:	9103      	str	r1, [sp, #12]
    b052:	910f      	str	r1, [sp, #60]	; 0x3c
    b054:	ac37      	add	r4, sp, #220	; 0xdc
    b056:	f018 0302 	ands.w	r3, r8, #2
    b05a:	9309      	str	r3, [sp, #36]	; 0x24
    b05c:	d002      	beq.n	b064 <_svfprintf_r+0x294>
    b05e:	9b02      	ldr	r3, [sp, #8]
    b060:	3302      	adds	r3, #2
    b062:	9302      	str	r3, [sp, #8]
    b064:	f018 0384 	ands.w	r3, r8, #132	; 0x84
    b068:	930a      	str	r3, [sp, #40]	; 0x28
    b06a:	d105      	bne.n	b078 <_svfprintf_r+0x2a8>
    b06c:	9b06      	ldr	r3, [sp, #24]
    b06e:	9a02      	ldr	r2, [sp, #8]
    b070:	1a9d      	subs	r5, r3, r2
    b072:	2d00      	cmp	r5, #0
    b074:	f300 8369 	bgt.w	b74a <_svfprintf_r+0x97a>
    b078:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b07a:	b189      	cbz	r1, b0a0 <_svfprintf_r+0x2d0>
    b07c:	9925      	ldr	r1, [sp, #148]	; 0x94
    b07e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
    b082:	3101      	adds	r1, #1
    b084:	3201      	adds	r2, #1
    b086:	f8ca 0000 	str.w	r0, [sl]
    b08a:	2907      	cmp	r1, #7
    b08c:	f04f 0001 	mov.w	r0, #1
    b090:	9226      	str	r2, [sp, #152]	; 0x98
    b092:	9125      	str	r1, [sp, #148]	; 0x94
    b094:	f8ca 0004 	str.w	r0, [sl, #4]
    b098:	f300 83a2 	bgt.w	b7e0 <_svfprintf_r+0xa10>
    b09c:	f10a 0a08 	add.w	sl, sl, #8
    b0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0a2:	b183      	cbz	r3, b0c6 <_svfprintf_r+0x2f6>
    b0a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b0a6:	a91a      	add	r1, sp, #104	; 0x68
    b0a8:	3301      	adds	r3, #1
    b0aa:	3202      	adds	r2, #2
    b0ac:	f8ca 1000 	str.w	r1, [sl]
    b0b0:	2b07      	cmp	r3, #7
    b0b2:	f04f 0102 	mov.w	r1, #2
    b0b6:	9226      	str	r2, [sp, #152]	; 0x98
    b0b8:	9325      	str	r3, [sp, #148]	; 0x94
    b0ba:	f8ca 1004 	str.w	r1, [sl, #4]
    b0be:	f300 83a3 	bgt.w	b808 <_svfprintf_r+0xa38>
    b0c2:	f10a 0a08 	add.w	sl, sl, #8
    b0c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b0c8:	2b80      	cmp	r3, #128	; 0x80
    b0ca:	f000 826c 	beq.w	b5a6 <_svfprintf_r+0x7d6>
    b0ce:	9b03      	ldr	r3, [sp, #12]
    b0d0:	9905      	ldr	r1, [sp, #20]
    b0d2:	1a5d      	subs	r5, r3, r1
    b0d4:	2d00      	cmp	r5, #0
    b0d6:	f300 82a5 	bgt.w	b624 <_svfprintf_r+0x854>
    b0da:	f418 7f80 	tst.w	r8, #256	; 0x100
    b0de:	f040 820d 	bne.w	b4fc <_svfprintf_r+0x72c>
    b0e2:	9b05      	ldr	r3, [sp, #20]
    b0e4:	f8ca 3004 	str.w	r3, [sl, #4]
    b0e8:	441a      	add	r2, r3
    b0ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b0ec:	f8ca 4000 	str.w	r4, [sl]
    b0f0:	3301      	adds	r3, #1
    b0f2:	2b07      	cmp	r3, #7
    b0f4:	9226      	str	r2, [sp, #152]	; 0x98
    b0f6:	9325      	str	r3, [sp, #148]	; 0x94
    b0f8:	f300 831b 	bgt.w	b732 <_svfprintf_r+0x962>
    b0fc:	f10a 0a08 	add.w	sl, sl, #8
    b100:	f018 0f04 	tst.w	r8, #4
    b104:	d005      	beq.n	b112 <_svfprintf_r+0x342>
    b106:	9b06      	ldr	r3, [sp, #24]
    b108:	9902      	ldr	r1, [sp, #8]
    b10a:	1a5c      	subs	r4, r3, r1
    b10c:	2c00      	cmp	r4, #0
    b10e:	f300 8388 	bgt.w	b822 <_svfprintf_r+0xa52>
    b112:	9b04      	ldr	r3, [sp, #16]
    b114:	9906      	ldr	r1, [sp, #24]
    b116:	9802      	ldr	r0, [sp, #8]
    b118:	4281      	cmp	r1, r0
    b11a:	bfac      	ite	ge
    b11c:	185b      	addge	r3, r3, r1
    b11e:	181b      	addlt	r3, r3, r0
    b120:	9304      	str	r3, [sp, #16]
    b122:	2a00      	cmp	r2, #0
    b124:	f040 82b0 	bne.w	b688 <_svfprintf_r+0x8b8>
    b128:	2300      	movs	r3, #0
    b12a:	9325      	str	r3, [sp, #148]	; 0x94
    b12c:	9b07      	ldr	r3, [sp, #28]
    b12e:	b11b      	cbz	r3, b138 <_svfprintf_r+0x368>
    b130:	9907      	ldr	r1, [sp, #28]
    b132:	4658      	mov	r0, fp
    b134:	f7ff f966 	bl	a404 <_free_r>
    b138:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b13c:	464c      	mov	r4, r9
    b13e:	e679      	b.n	ae34 <_svfprintf_r+0x64>
    b140:	930b      	str	r3, [sp, #44]	; 0x2c
    b142:	9b08      	ldr	r3, [sp, #32]
    b144:	3307      	adds	r3, #7
    b146:	f023 0307 	bic.w	r3, r3, #7
    b14a:	ecb3 8b02 	vldmia	r3!, {d8}
    b14e:	eeb0 7bc8 	vabs.f64	d7, d8
    b152:	eeb4 7b49 	vcmp.f64	d7, d9
    b156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b15a:	9308      	str	r3, [sp, #32]
    b15c:	f340 84e9 	ble.w	bb32 <_svfprintf_r+0xd62>
    b160:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    b164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b168:	f101 8059 	bmi.w	c21e <_svfprintf_r+0x144e>
    b16c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    b170:	4cab      	ldr	r4, [pc, #684]	; (b420 <_svfprintf_r+0x650>)
    b172:	4bac      	ldr	r3, [pc, #688]	; (b424 <_svfprintf_r+0x654>)
    b174:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    b178:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b17a:	2a47      	cmp	r2, #71	; 0x47
    b17c:	bfc8      	it	gt
    b17e:	461c      	movgt	r4, r3
    b180:	2300      	movs	r3, #0
    b182:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    b186:	2203      	movs	r2, #3
    b188:	9307      	str	r3, [sp, #28]
    b18a:	9202      	str	r2, [sp, #8]
    b18c:	9205      	str	r2, [sp, #20]
    b18e:	9303      	str	r3, [sp, #12]
    b190:	930f      	str	r3, [sp, #60]	; 0x3c
    b192:	2900      	cmp	r1, #0
    b194:	f43f af5f 	beq.w	b056 <_svfprintf_r+0x286>
    b198:	9b02      	ldr	r3, [sp, #8]
    b19a:	3301      	adds	r3, #1
    b19c:	9302      	str	r3, [sp, #8]
    b19e:	e75a      	b.n	b056 <_svfprintf_r+0x286>
    b1a0:	2b43      	cmp	r3, #67	; 0x43
    b1a2:	930b      	str	r3, [sp, #44]	; 0x2c
    b1a4:	d003      	beq.n	b1ae <_svfprintf_r+0x3de>
    b1a6:	f018 0f10 	tst.w	r8, #16
    b1aa:	f000 855d 	beq.w	bc68 <_svfprintf_r+0xe98>
    b1ae:	9d08      	ldr	r5, [sp, #32]
    b1b0:	2208      	movs	r2, #8
    b1b2:	2100      	movs	r1, #0
    b1b4:	a822      	add	r0, sp, #136	; 0x88
    b1b6:	ac37      	add	r4, sp, #220	; 0xdc
    b1b8:	f7fe fcb4 	bl	9b24 <memset>
    b1bc:	ab22      	add	r3, sp, #136	; 0x88
    b1be:	f855 2b04 	ldr.w	r2, [r5], #4
    b1c2:	4621      	mov	r1, r4
    b1c4:	4658      	mov	r0, fp
    b1c6:	f002 fcc5 	bl	db54 <_wcrtomb_r>
    b1ca:	4603      	mov	r3, r0
    b1cc:	3301      	adds	r3, #1
    b1ce:	9005      	str	r0, [sp, #20]
    b1d0:	f001 82ee 	beq.w	c7b0 <_svfprintf_r+0x19e0>
    b1d4:	9b05      	ldr	r3, [sp, #20]
    b1d6:	9508      	str	r5, [sp, #32]
    b1d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b1dc:	9302      	str	r3, [sp, #8]
    b1de:	2100      	movs	r1, #0
    b1e0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    b1e4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    b1e8:	9107      	str	r1, [sp, #28]
    b1ea:	9103      	str	r1, [sp, #12]
    b1ec:	910f      	str	r1, [sp, #60]	; 0x3c
    b1ee:	e732      	b.n	b056 <_svfprintf_r+0x286>
    b1f0:	930b      	str	r3, [sp, #44]	; 0x2c
    b1f2:	9b08      	ldr	r3, [sp, #32]
    b1f4:	461a      	mov	r2, r3
    b1f6:	2300      	movs	r3, #0
    b1f8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    b1fc:	4613      	mov	r3, r2
    b1fe:	f853 4b04 	ldr.w	r4, [r3], #4
    b202:	9308      	str	r3, [sp, #32]
    b204:	2c00      	cmp	r4, #0
    b206:	f000 8548 	beq.w	bc9a <_svfprintf_r+0xeca>
    b20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b20c:	2b53      	cmp	r3, #83	; 0x53
    b20e:	f000 86ec 	beq.w	bfea <_svfprintf_r+0x121a>
    b212:	f018 0310 	ands.w	r3, r8, #16
    b216:	930c      	str	r3, [sp, #48]	; 0x30
    b218:	f040 86e7 	bne.w	bfea <_svfprintf_r+0x121a>
    b21c:	9b03      	ldr	r3, [sp, #12]
    b21e:	1c5d      	adds	r5, r3, #1
    b220:	f001 80e5 	beq.w	c3ee <_svfprintf_r+0x161e>
    b224:	990c      	ldr	r1, [sp, #48]	; 0x30
    b226:	461a      	mov	r2, r3
    b228:	4620      	mov	r0, r4
    b22a:	f001 fca1 	bl	cb70 <memchr>
    b22e:	9007      	str	r0, [sp, #28]
    b230:	2800      	cmp	r0, #0
    b232:	f001 8328 	beq.w	c886 <_svfprintf_r+0x1ab6>
    b236:	9b07      	ldr	r3, [sp, #28]
    b238:	1b1a      	subs	r2, r3, r4
    b23a:	9205      	str	r2, [sp, #20]
    b23c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b23e:	9303      	str	r3, [sp, #12]
    b240:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    b244:	930f      	str	r3, [sp, #60]	; 0x3c
    b246:	930d      	str	r3, [sp, #52]	; 0x34
    b248:	9307      	str	r3, [sp, #28]
    b24a:	2373      	movs	r3, #115	; 0x73
    b24c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    b250:	9202      	str	r2, [sp, #8]
    b252:	930b      	str	r3, [sp, #44]	; 0x2c
    b254:	e79d      	b.n	b192 <_svfprintf_r+0x3c2>
    b256:	f018 0f20 	tst.w	r8, #32
    b25a:	930b      	str	r3, [sp, #44]	; 0x2c
    b25c:	9b08      	ldr	r3, [sp, #32]
    b25e:	d03d      	beq.n	b2dc <_svfprintf_r+0x50c>
    b260:	3307      	adds	r3, #7
    b262:	f023 0307 	bic.w	r3, r3, #7
    b266:	461a      	mov	r2, r3
    b268:	4611      	mov	r1, r2
    b26a:	685b      	ldr	r3, [r3, #4]
    b26c:	f851 2b08 	ldr.w	r2, [r1], #8
    b270:	9108      	str	r1, [sp, #32]
    b272:	4619      	mov	r1, r3
    b274:	2b00      	cmp	r3, #0
    b276:	f2c0 840c 	blt.w	ba92 <_svfprintf_r+0xcc2>
    b27a:	9b03      	ldr	r3, [sp, #12]
    b27c:	3301      	adds	r3, #1
    b27e:	f000 829e 	beq.w	b7be <_svfprintf_r+0x9ee>
    b282:	f028 0080 	bic.w	r0, r8, #128	; 0x80
    b286:	ea52 0301 	orrs.w	r3, r2, r1
    b28a:	9002      	str	r0, [sp, #8]
    b28c:	f040 8299 	bne.w	b7c2 <_svfprintf_r+0x9f2>
    b290:	9b03      	ldr	r3, [sp, #12]
    b292:	2b00      	cmp	r3, #0
    b294:	f040 829a 	bne.w	b7cc <_svfprintf_r+0x9fc>
    b298:	4680      	mov	r8, r0
    b29a:	2300      	movs	r3, #0
    b29c:	9303      	str	r3, [sp, #12]
    b29e:	9305      	str	r3, [sp, #20]
    b2a0:	ac50      	add	r4, sp, #320	; 0x140
    b2a2:	e106      	b.n	b4b2 <_svfprintf_r+0x6e2>
    b2a4:	9b08      	ldr	r3, [sp, #32]
    b2a6:	f853 2b04 	ldr.w	r2, [r3], #4
    b2aa:	9206      	str	r2, [sp, #24]
    b2ac:	2a00      	cmp	r2, #0
    b2ae:	f280 8419 	bge.w	bae4 <_svfprintf_r+0xd14>
    b2b2:	9a06      	ldr	r2, [sp, #24]
    b2b4:	9308      	str	r3, [sp, #32]
    b2b6:	4252      	negs	r2, r2
    b2b8:	9206      	str	r2, [sp, #24]
    b2ba:	f899 3000 	ldrb.w	r3, [r9]
    b2be:	f048 0804 	orr.w	r8, r8, #4
    b2c2:	e5e1      	b.n	ae88 <_svfprintf_r+0xb8>
    b2c4:	f899 3000 	ldrb.w	r3, [r9]
    b2c8:	f048 0808 	orr.w	r8, r8, #8
    b2cc:	e5dc      	b.n	ae88 <_svfprintf_r+0xb8>
    b2ce:	f048 0810 	orr.w	r8, r8, #16
    b2d2:	f018 0f20 	tst.w	r8, #32
    b2d6:	930b      	str	r3, [sp, #44]	; 0x2c
    b2d8:	9b08      	ldr	r3, [sp, #32]
    b2da:	d1c1      	bne.n	b260 <_svfprintf_r+0x490>
    b2dc:	f018 0f10 	tst.w	r8, #16
    b2e0:	f040 840b 	bne.w	bafa <_svfprintf_r+0xd2a>
    b2e4:	f018 0f40 	tst.w	r8, #64	; 0x40
    b2e8:	f000 8403 	beq.w	baf2 <_svfprintf_r+0xd22>
    b2ec:	f933 2b04 	ldrsh.w	r2, [r3], #4
    b2f0:	9308      	str	r3, [sp, #32]
    b2f2:	17d1      	asrs	r1, r2, #31
    b2f4:	460b      	mov	r3, r1
    b2f6:	e7bd      	b.n	b274 <_svfprintf_r+0x4a4>
    b2f8:	9b08      	ldr	r3, [sp, #32]
    b2fa:	f048 0202 	orr.w	r2, r8, #2
    b2fe:	9202      	str	r2, [sp, #8]
    b300:	f853 2b04 	ldr.w	r2, [r3], #4
    b304:	9308      	str	r3, [sp, #32]
    b306:	f647 0330 	movw	r3, #30768	; 0x7830
    b30a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
    b30e:	2078      	movs	r0, #120	; 0x78
    b310:	4b45      	ldr	r3, [pc, #276]	; (b428 <_svfprintf_r+0x658>)
    b312:	9311      	str	r3, [sp, #68]	; 0x44
    b314:	2100      	movs	r1, #0
    b316:	2302      	movs	r3, #2
    b318:	900b      	str	r0, [sp, #44]	; 0x2c
    b31a:	2000      	movs	r0, #0
    b31c:	9c03      	ldr	r4, [sp, #12]
    b31e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    b322:	1c60      	adds	r0, r4, #1
    b324:	f000 80ad 	beq.w	b482 <_svfprintf_r+0x6b2>
    b328:	9802      	ldr	r0, [sp, #8]
    b32a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
    b32e:	ea52 0001 	orrs.w	r0, r2, r1
    b332:	f040 80a4 	bne.w	b47e <_svfprintf_r+0x6ae>
    b336:	2c00      	cmp	r4, #0
    b338:	f040 86ae 	bne.w	c098 <_svfprintf_r+0x12c8>
    b33c:	2b00      	cmp	r3, #0
    b33e:	d1ac      	bne.n	b29a <_svfprintf_r+0x4ca>
    b340:	9b02      	ldr	r3, [sp, #8]
    b342:	f013 0301 	ands.w	r3, r3, #1
    b346:	9305      	str	r3, [sp, #20]
    b348:	f000 83d1 	beq.w	baee <_svfprintf_r+0xd1e>
    b34c:	2330      	movs	r3, #48	; 0x30
    b34e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
    b352:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    b356:	e0ac      	b.n	b4b2 <_svfprintf_r+0x6e2>
    b358:	f018 0f20 	tst.w	r8, #32
    b35c:	f040 83d4 	bne.w	bb08 <_svfprintf_r+0xd38>
    b360:	f018 0f10 	tst.w	r8, #16
    b364:	f040 869f 	bne.w	c0a6 <_svfprintf_r+0x12d6>
    b368:	f018 0f40 	tst.w	r8, #64	; 0x40
    b36c:	f040 8797 	bne.w	c29e <_svfprintf_r+0x14ce>
    b370:	f418 7f00 	tst.w	r8, #512	; 0x200
    b374:	f000 8697 	beq.w	c0a6 <_svfprintf_r+0x12d6>
    b378:	9b08      	ldr	r3, [sp, #32]
    b37a:	9904      	ldr	r1, [sp, #16]
    b37c:	f853 2b04 	ldr.w	r2, [r3], #4
    b380:	9308      	str	r3, [sp, #32]
    b382:	7011      	strb	r1, [r2, #0]
    b384:	464c      	mov	r4, r9
    b386:	e555      	b.n	ae34 <_svfprintf_r+0x64>
    b388:	f899 3000 	ldrb.w	r3, [r9]
    b38c:	2b68      	cmp	r3, #104	; 0x68
    b38e:	bf03      	ittte	eq
    b390:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    b394:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
    b398:	f109 0901 	addeq.w	r9, r9, #1
    b39c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
    b3a0:	e572      	b.n	ae88 <_svfprintf_r+0xb8>
    b3a2:	f899 3000 	ldrb.w	r3, [r9]
    b3a6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
    b3aa:	e56d      	b.n	ae88 <_svfprintf_r+0xb8>
    b3ac:	f899 3000 	ldrb.w	r3, [r9]
    b3b0:	2b6c      	cmp	r3, #108	; 0x6c
    b3b2:	bf03      	ittte	eq
    b3b4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
    b3b8:	f048 0820 	orreq.w	r8, r8, #32
    b3bc:	f109 0901 	addeq.w	r9, r9, #1
    b3c0:	f048 0810 	orrne.w	r8, r8, #16
    b3c4:	e560      	b.n	ae88 <_svfprintf_r+0xb8>
    b3c6:	930b      	str	r3, [sp, #44]	; 0x2c
    b3c8:	f048 0810 	orr.w	r8, r8, #16
    b3cc:	f018 0120 	ands.w	r1, r8, #32
    b3d0:	f000 8351 	beq.w	ba76 <_svfprintf_r+0xca6>
    b3d4:	9b08      	ldr	r3, [sp, #32]
    b3d6:	3307      	adds	r3, #7
    b3d8:	f023 0307 	bic.w	r3, r3, #7
    b3dc:	6859      	ldr	r1, [r3, #4]
    b3de:	f853 2b08 	ldr.w	r2, [r3], #8
    b3e2:	9308      	str	r3, [sp, #32]
    b3e4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    b3e8:	9302      	str	r3, [sp, #8]
    b3ea:	2300      	movs	r3, #0
    b3ec:	e795      	b.n	b31a <_svfprintf_r+0x54a>
    b3ee:	930b      	str	r3, [sp, #44]	; 0x2c
    b3f0:	f048 0310 	orr.w	r3, r8, #16
    b3f4:	9302      	str	r3, [sp, #8]
    b3f6:	9b02      	ldr	r3, [sp, #8]
    b3f8:	f013 0120 	ands.w	r1, r3, #32
    b3fc:	f000 8329 	beq.w	ba52 <_svfprintf_r+0xc82>
    b400:	9b08      	ldr	r3, [sp, #32]
    b402:	3307      	adds	r3, #7
    b404:	f023 0307 	bic.w	r3, r3, #7
    b408:	6859      	ldr	r1, [r3, #4]
    b40a:	f853 2b08 	ldr.w	r2, [r3], #8
    b40e:	9308      	str	r3, [sp, #32]
    b410:	2301      	movs	r3, #1
    b412:	e782      	b.n	b31a <_svfprintf_r+0x54a>
    b414:	f899 3000 	ldrb.w	r3, [r9]
    b418:	f048 0880 	orr.w	r8, r8, #128	; 0x80
    b41c:	e534      	b.n	ae88 <_svfprintf_r+0xb8>
    b41e:	bf00      	nop
    b420:	20000adc 	.word	0x20000adc
    b424:	20000ae0 	.word	0x20000ae0
    b428:	20000aec 	.word	0x20000aec
    b42c:	4649      	mov	r1, r9
    b42e:	f811 3b01 	ldrb.w	r3, [r1], #1
    b432:	2b2a      	cmp	r3, #42	; 0x2a
    b434:	f001 8249 	beq.w	c8ca <_svfprintf_r+0x1afa>
    b438:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    b43c:	2a09      	cmp	r2, #9
    b43e:	4689      	mov	r9, r1
    b440:	bf98      	it	ls
    b442:	2100      	movls	r1, #0
    b444:	f201 8144 	bhi.w	c6d0 <_svfprintf_r+0x1900>
    b448:	f819 3b01 	ldrb.w	r3, [r9], #1
    b44c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    b450:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    b454:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    b458:	2a09      	cmp	r2, #9
    b45a:	d9f5      	bls.n	b448 <_svfprintf_r+0x678>
    b45c:	9103      	str	r1, [sp, #12]
    b45e:	e515      	b.n	ae8c <_svfprintf_r+0xbc>
    b460:	f899 3000 	ldrb.w	r3, [r9]
    b464:	f048 0801 	orr.w	r8, r8, #1
    b468:	e50e      	b.n	ae88 <_svfprintf_r+0xb8>
    b46a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    b46e:	2b00      	cmp	r3, #0
    b470:	f47f ad8f 	bne.w	af92 <_svfprintf_r+0x1c2>
    b474:	f899 3000 	ldrb.w	r3, [r9]
    b478:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
    b47c:	e504      	b.n	ae88 <_svfprintf_r+0xb8>
    b47e:	f8cd 8008 	str.w	r8, [sp, #8]
    b482:	2b01      	cmp	r3, #1
    b484:	f000 819d 	beq.w	b7c2 <_svfprintf_r+0x9f2>
    b488:	2b02      	cmp	r3, #2
    b48a:	ac50      	add	r4, sp, #320	; 0x140
    b48c:	d120      	bne.n	b4d0 <_svfprintf_r+0x700>
    b48e:	9811      	ldr	r0, [sp, #68]	; 0x44
    b490:	f002 030f 	and.w	r3, r2, #15
    b494:	0912      	lsrs	r2, r2, #4
    b496:	5cc3      	ldrb	r3, [r0, r3]
    b498:	f804 3d01 	strb.w	r3, [r4, #-1]!
    b49c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    b4a0:	0909      	lsrs	r1, r1, #4
    b4a2:	ea52 0301 	orrs.w	r3, r2, r1
    b4a6:	d1f3      	bne.n	b490 <_svfprintf_r+0x6c0>
    b4a8:	ab50      	add	r3, sp, #320	; 0x140
    b4aa:	1b1b      	subs	r3, r3, r4
    b4ac:	f8dd 8008 	ldr.w	r8, [sp, #8]
    b4b0:	9305      	str	r3, [sp, #20]
    b4b2:	9a05      	ldr	r2, [sp, #20]
    b4b4:	9803      	ldr	r0, [sp, #12]
    b4b6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    b4ba:	4282      	cmp	r2, r0
    b4bc:	f04f 0300 	mov.w	r3, #0
    b4c0:	bfb8      	it	lt
    b4c2:	4602      	movlt	r2, r0
    b4c4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    b4c8:	9307      	str	r3, [sp, #28]
    b4ca:	9202      	str	r2, [sp, #8]
    b4cc:	930f      	str	r3, [sp, #60]	; 0x3c
    b4ce:	e660      	b.n	b192 <_svfprintf_r+0x3c2>
    b4d0:	f002 0307 	and.w	r3, r2, #7
    b4d4:	08d2      	lsrs	r2, r2, #3
    b4d6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    b4da:	08c9      	lsrs	r1, r1, #3
    b4dc:	3330      	adds	r3, #48	; 0x30
    b4de:	ea52 0501 	orrs.w	r5, r2, r1
    b4e2:	4620      	mov	r0, r4
    b4e4:	f804 3d01 	strb.w	r3, [r4, #-1]!
    b4e8:	d1f2      	bne.n	b4d0 <_svfprintf_r+0x700>
    b4ea:	9a02      	ldr	r2, [sp, #8]
    b4ec:	07d1      	lsls	r1, r2, #31
    b4ee:	f100 824d 	bmi.w	b98c <_svfprintf_r+0xbbc>
    b4f2:	ab50      	add	r3, sp, #320	; 0x140
    b4f4:	1b1b      	subs	r3, r3, r4
    b4f6:	4690      	mov	r8, r2
    b4f8:	9305      	str	r3, [sp, #20]
    b4fa:	e7da      	b.n	b4b2 <_svfprintf_r+0x6e2>
    b4fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b4fe:	2b65      	cmp	r3, #101	; 0x65
    b500:	f340 80d4 	ble.w	b6ac <_svfprintf_r+0x8dc>
    b504:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b50c:	f040 81c1 	bne.w	b892 <_svfprintf_r+0xac2>
    b510:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b512:	49ba      	ldr	r1, [pc, #744]	; (b7fc <_svfprintf_r+0xa2c>)
    b514:	f8ca 1000 	str.w	r1, [sl]
    b518:	3301      	adds	r3, #1
    b51a:	3201      	adds	r2, #1
    b51c:	2101      	movs	r1, #1
    b51e:	2b07      	cmp	r3, #7
    b520:	9226      	str	r2, [sp, #152]	; 0x98
    b522:	9325      	str	r3, [sp, #148]	; 0x94
    b524:	f8ca 1004 	str.w	r1, [sl, #4]
    b528:	f300 8551 	bgt.w	bfce <_svfprintf_r+0x11fe>
    b52c:	f10a 0a08 	add.w	sl, sl, #8
    b530:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b532:	990e      	ldr	r1, [sp, #56]	; 0x38
    b534:	428b      	cmp	r3, r1
    b536:	f280 82d0 	bge.w	bada <_svfprintf_r+0xd0a>
    b53a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b53c:	9912      	ldr	r1, [sp, #72]	; 0x48
    b53e:	441a      	add	r2, r3
    b540:	e9ca 1300 	strd	r1, r3, [sl]
    b544:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b546:	9226      	str	r2, [sp, #152]	; 0x98
    b548:	3301      	adds	r3, #1
    b54a:	2b07      	cmp	r3, #7
    b54c:	9325      	str	r3, [sp, #148]	; 0x94
    b54e:	f300 8397 	bgt.w	bc80 <_svfprintf_r+0xeb0>
    b552:	f10a 0a08 	add.w	sl, sl, #8
    b556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b558:	1e5c      	subs	r4, r3, #1
    b55a:	2c00      	cmp	r4, #0
    b55c:	f77f add0 	ble.w	b100 <_svfprintf_r+0x330>
    b560:	2c10      	cmp	r4, #16
    b562:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b564:	f340 856e 	ble.w	c044 <_svfprintf_r+0x1274>
    b568:	ee1b 6a10 	vmov	r6, s22
    b56c:	2510      	movs	r5, #16
    b56e:	e005      	b.n	b57c <_svfprintf_r+0x7ac>
    b570:	f10a 0a08 	add.w	sl, sl, #8
    b574:	3c10      	subs	r4, #16
    b576:	2c10      	cmp	r4, #16
    b578:	f340 8564 	ble.w	c044 <_svfprintf_r+0x1274>
    b57c:	3301      	adds	r3, #1
    b57e:	49a0      	ldr	r1, [pc, #640]	; (b800 <_svfprintf_r+0xa30>)
    b580:	3210      	adds	r2, #16
    b582:	2b07      	cmp	r3, #7
    b584:	e9ca 1500 	strd	r1, r5, [sl]
    b588:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b58c:	ddf0      	ble.n	b570 <_svfprintf_r+0x7a0>
    b58e:	aa24      	add	r2, sp, #144	; 0x90
    b590:	4631      	mov	r1, r6
    b592:	4658      	mov	r0, fp
    b594:	f002 fb24 	bl	dbe0 <__ssprint_r>
    b598:	2800      	cmp	r0, #0
    b59a:	d17e      	bne.n	b69a <_svfprintf_r+0x8ca>
    b59c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b5a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b5a4:	e7e6      	b.n	b574 <_svfprintf_r+0x7a4>
    b5a6:	9b06      	ldr	r3, [sp, #24]
    b5a8:	9902      	ldr	r1, [sp, #8]
    b5aa:	1a5d      	subs	r5, r3, r1
    b5ac:	2d00      	cmp	r5, #0
    b5ae:	f77f ad8e 	ble.w	b0ce <_svfprintf_r+0x2fe>
    b5b2:	2d10      	cmp	r5, #16
    b5b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b5b6:	dd21      	ble.n	b5fc <_svfprintf_r+0x82c>
    b5b8:	9409      	str	r4, [sp, #36]	; 0x24
    b5ba:	2610      	movs	r6, #16
    b5bc:	ee1b 4a10 	vmov	r4, s22
    b5c0:	e004      	b.n	b5cc <_svfprintf_r+0x7fc>
    b5c2:	3d10      	subs	r5, #16
    b5c4:	2d10      	cmp	r5, #16
    b5c6:	f10a 0a08 	add.w	sl, sl, #8
    b5ca:	dd16      	ble.n	b5fa <_svfprintf_r+0x82a>
    b5cc:	3301      	adds	r3, #1
    b5ce:	498c      	ldr	r1, [pc, #560]	; (b800 <_svfprintf_r+0xa30>)
    b5d0:	3210      	adds	r2, #16
    b5d2:	2b07      	cmp	r3, #7
    b5d4:	e9ca 1600 	strd	r1, r6, [sl]
    b5d8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b5dc:	ddf1      	ble.n	b5c2 <_svfprintf_r+0x7f2>
    b5de:	aa24      	add	r2, sp, #144	; 0x90
    b5e0:	4621      	mov	r1, r4
    b5e2:	4658      	mov	r0, fp
    b5e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b5e8:	f002 fafa 	bl	dbe0 <__ssprint_r>
    b5ec:	2800      	cmp	r0, #0
    b5ee:	d154      	bne.n	b69a <_svfprintf_r+0x8ca>
    b5f0:	3d10      	subs	r5, #16
    b5f2:	2d10      	cmp	r5, #16
    b5f4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b5f8:	dce8      	bgt.n	b5cc <_svfprintf_r+0x7fc>
    b5fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b5fc:	4980      	ldr	r1, [pc, #512]	; (b800 <_svfprintf_r+0xa30>)
    b5fe:	f8ca 5004 	str.w	r5, [sl, #4]
    b602:	3301      	adds	r3, #1
    b604:	442a      	add	r2, r5
    b606:	2b07      	cmp	r3, #7
    b608:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b60c:	f8ca 1000 	str.w	r1, [sl]
    b610:	f300 8526 	bgt.w	c060 <_svfprintf_r+0x1290>
    b614:	9b03      	ldr	r3, [sp, #12]
    b616:	9905      	ldr	r1, [sp, #20]
    b618:	1a5d      	subs	r5, r3, r1
    b61a:	2d00      	cmp	r5, #0
    b61c:	f10a 0a08 	add.w	sl, sl, #8
    b620:	f77f ad5b 	ble.w	b0da <_svfprintf_r+0x30a>
    b624:	2d10      	cmp	r5, #16
    b626:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b628:	dd1f      	ble.n	b66a <_svfprintf_r+0x89a>
    b62a:	4651      	mov	r1, sl
    b62c:	2610      	movs	r6, #16
    b62e:	ee1b aa10 	vmov	sl, s22
    b632:	e004      	b.n	b63e <_svfprintf_r+0x86e>
    b634:	3d10      	subs	r5, #16
    b636:	2d10      	cmp	r5, #16
    b638:	f101 0108 	add.w	r1, r1, #8
    b63c:	dd14      	ble.n	b668 <_svfprintf_r+0x898>
    b63e:	3301      	adds	r3, #1
    b640:	486f      	ldr	r0, [pc, #444]	; (b800 <_svfprintf_r+0xa30>)
    b642:	3210      	adds	r2, #16
    b644:	2b07      	cmp	r3, #7
    b646:	e9c1 0600 	strd	r0, r6, [r1]
    b64a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b64e:	ddf1      	ble.n	b634 <_svfprintf_r+0x864>
    b650:	aa24      	add	r2, sp, #144	; 0x90
    b652:	4651      	mov	r1, sl
    b654:	4658      	mov	r0, fp
    b656:	f002 fac3 	bl	dbe0 <__ssprint_r>
    b65a:	b9f0      	cbnz	r0, b69a <_svfprintf_r+0x8ca>
    b65c:	3d10      	subs	r5, #16
    b65e:	2d10      	cmp	r5, #16
    b660:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b664:	a927      	add	r1, sp, #156	; 0x9c
    b666:	dcea      	bgt.n	b63e <_svfprintf_r+0x86e>
    b668:	468a      	mov	sl, r1
    b66a:	3301      	adds	r3, #1
    b66c:	4964      	ldr	r1, [pc, #400]	; (b800 <_svfprintf_r+0xa30>)
    b66e:	f8ca 5004 	str.w	r5, [sl, #4]
    b672:	442a      	add	r2, r5
    b674:	2b07      	cmp	r3, #7
    b676:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b67a:	f8ca 1000 	str.w	r1, [sl]
    b67e:	f300 81da 	bgt.w	ba36 <_svfprintf_r+0xc66>
    b682:	f10a 0a08 	add.w	sl, sl, #8
    b686:	e528      	b.n	b0da <_svfprintf_r+0x30a>
    b688:	ee1b 1a10 	vmov	r1, s22
    b68c:	aa24      	add	r2, sp, #144	; 0x90
    b68e:	4658      	mov	r0, fp
    b690:	f002 faa6 	bl	dbe0 <__ssprint_r>
    b694:	2800      	cmp	r0, #0
    b696:	f43f ad47 	beq.w	b128 <_svfprintf_r+0x358>
    b69a:	9b07      	ldr	r3, [sp, #28]
    b69c:	2b00      	cmp	r3, #0
    b69e:	f43f aca2 	beq.w	afe6 <_svfprintf_r+0x216>
    b6a2:	9907      	ldr	r1, [sp, #28]
    b6a4:	4658      	mov	r0, fp
    b6a6:	f7fe fead 	bl	a404 <_free_r>
    b6aa:	e49c      	b.n	afe6 <_svfprintf_r+0x216>
    b6ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b6ae:	2b01      	cmp	r3, #1
    b6b0:	f340 817a 	ble.w	b9a8 <_svfprintf_r+0xbd8>
    b6b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b6b6:	f8ca 4000 	str.w	r4, [sl]
    b6ba:	3301      	adds	r3, #1
    b6bc:	3201      	adds	r2, #1
    b6be:	2101      	movs	r1, #1
    b6c0:	2b07      	cmp	r3, #7
    b6c2:	9226      	str	r2, [sp, #152]	; 0x98
    b6c4:	9325      	str	r3, [sp, #148]	; 0x94
    b6c6:	f8ca 1004 	str.w	r1, [sl, #4]
    b6ca:	f300 81f8 	bgt.w	babe <_svfprintf_r+0xcee>
    b6ce:	f10a 0a08 	add.w	sl, sl, #8
    b6d2:	9910      	ldr	r1, [sp, #64]	; 0x40
    b6d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    b6d6:	3301      	adds	r3, #1
    b6d8:	440a      	add	r2, r1
    b6da:	2b07      	cmp	r3, #7
    b6dc:	e9ca 0100 	strd	r0, r1, [sl]
    b6e0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b6e4:	f300 81dd 	bgt.w	baa2 <_svfprintf_r+0xcd2>
    b6e8:	f10a 0a08 	add.w	sl, sl, #8
    b6ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
    b6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b6f4:	f000 8177 	beq.w	b9e6 <_svfprintf_r+0xc16>
    b6f8:	990e      	ldr	r1, [sp, #56]	; 0x38
    b6fa:	3301      	adds	r3, #1
    b6fc:	3901      	subs	r1, #1
    b6fe:	3401      	adds	r4, #1
    b700:	440a      	add	r2, r1
    b702:	2b07      	cmp	r3, #7
    b704:	f8ca 4000 	str.w	r4, [sl]
    b708:	9325      	str	r3, [sp, #148]	; 0x94
    b70a:	f8ca 1004 	str.w	r1, [sl, #4]
    b70e:	9226      	str	r2, [sp, #152]	; 0x98
    b710:	f300 815b 	bgt.w	b9ca <_svfprintf_r+0xbfa>
    b714:	f10a 0a08 	add.w	sl, sl, #8
    b718:	9914      	ldr	r1, [sp, #80]	; 0x50
    b71a:	f8ca 1004 	str.w	r1, [sl, #4]
    b71e:	3301      	adds	r3, #1
    b720:	440a      	add	r2, r1
    b722:	2b07      	cmp	r3, #7
    b724:	a91e      	add	r1, sp, #120	; 0x78
    b726:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b72a:	f8ca 1000 	str.w	r1, [sl]
    b72e:	f77f ace5 	ble.w	b0fc <_svfprintf_r+0x32c>
    b732:	ee1b 1a10 	vmov	r1, s22
    b736:	aa24      	add	r2, sp, #144	; 0x90
    b738:	4658      	mov	r0, fp
    b73a:	f002 fa51 	bl	dbe0 <__ssprint_r>
    b73e:	2800      	cmp	r0, #0
    b740:	d1ab      	bne.n	b69a <_svfprintf_r+0x8ca>
    b742:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b744:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b748:	e4da      	b.n	b100 <_svfprintf_r+0x330>
    b74a:	2d10      	cmp	r5, #16
    b74c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
    b750:	4e2c      	ldr	r6, [pc, #176]	; (b804 <_svfprintf_r+0xa34>)
    b752:	dd24      	ble.n	b79e <_svfprintf_r+0x9ce>
    b754:	9417      	str	r4, [sp, #92]	; 0x5c
    b756:	2310      	movs	r3, #16
    b758:	ee1b 4a10 	vmov	r4, s22
    b75c:	4608      	mov	r0, r1
    b75e:	e004      	b.n	b76a <_svfprintf_r+0x99a>
    b760:	3d10      	subs	r5, #16
    b762:	2d10      	cmp	r5, #16
    b764:	f10a 0a08 	add.w	sl, sl, #8
    b768:	dd17      	ble.n	b79a <_svfprintf_r+0x9ca>
    b76a:	3001      	adds	r0, #1
    b76c:	3210      	adds	r2, #16
    b76e:	2807      	cmp	r0, #7
    b770:	e9ca 6300 	strd	r6, r3, [sl]
    b774:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
    b778:	ddf2      	ble.n	b760 <_svfprintf_r+0x990>
    b77a:	aa24      	add	r2, sp, #144	; 0x90
    b77c:	4621      	mov	r1, r4
    b77e:	4658      	mov	r0, fp
    b780:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b784:	f002 fa2c 	bl	dbe0 <__ssprint_r>
    b788:	2800      	cmp	r0, #0
    b78a:	d186      	bne.n	b69a <_svfprintf_r+0x8ca>
    b78c:	3d10      	subs	r5, #16
    b78e:	2d10      	cmp	r5, #16
    b790:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
    b794:	f04f 0310 	mov.w	r3, #16
    b798:	dce7      	bgt.n	b76a <_svfprintf_r+0x99a>
    b79a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    b79c:	4601      	mov	r1, r0
    b79e:	3101      	adds	r1, #1
    b7a0:	442a      	add	r2, r5
    b7a2:	2907      	cmp	r1, #7
    b7a4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
    b7a8:	f8ca 6000 	str.w	r6, [sl]
    b7ac:	f8ca 5004 	str.w	r5, [sl, #4]
    b7b0:	f300 83bd 	bgt.w	bf2e <_svfprintf_r+0x115e>
    b7b4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    b7b8:	f10a 0a08 	add.w	sl, sl, #8
    b7bc:	e45d      	b.n	b07a <_svfprintf_r+0x2aa>
    b7be:	f8cd 8008 	str.w	r8, [sp, #8]
    b7c2:	2a0a      	cmp	r2, #10
    b7c4:	f171 0300 	sbcs.w	r3, r1, #0
    b7c8:	f080 8345 	bcs.w	be56 <_svfprintf_r+0x1086>
    b7cc:	3230      	adds	r2, #48	; 0x30
    b7ce:	2301      	movs	r3, #1
    b7d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
    b7d4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
    b7d8:	9305      	str	r3, [sp, #20]
    b7da:	f20d 143f 	addw	r4, sp, #319	; 0x13f
    b7de:	e668      	b.n	b4b2 <_svfprintf_r+0x6e2>
    b7e0:	ee1b 1a10 	vmov	r1, s22
    b7e4:	aa24      	add	r2, sp, #144	; 0x90
    b7e6:	4658      	mov	r0, fp
    b7e8:	f002 f9fa 	bl	dbe0 <__ssprint_r>
    b7ec:	2800      	cmp	r0, #0
    b7ee:	f47f af54 	bne.w	b69a <_svfprintf_r+0x8ca>
    b7f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b7f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b7f8:	e452      	b.n	b0a0 <_svfprintf_r+0x2d0>
    b7fa:	bf00      	nop
    b7fc:	20000b1c 	.word	0x20000b1c
    b800:	20001064 	.word	0x20001064
    b804:	20000b20 	.word	0x20000b20
    b808:	ee1b 1a10 	vmov	r1, s22
    b80c:	aa24      	add	r2, sp, #144	; 0x90
    b80e:	4658      	mov	r0, fp
    b810:	f002 f9e6 	bl	dbe0 <__ssprint_r>
    b814:	2800      	cmp	r0, #0
    b816:	f47f af40 	bne.w	b69a <_svfprintf_r+0x8ca>
    b81a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b81c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b820:	e451      	b.n	b0c6 <_svfprintf_r+0x2f6>
    b822:	2c10      	cmp	r4, #16
    b824:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b826:	4ebe      	ldr	r6, [pc, #760]	; (bb20 <_svfprintf_r+0xd50>)
    b828:	dd1f      	ble.n	b86a <_svfprintf_r+0xa9a>
    b82a:	ee1b 8a10 	vmov	r8, s22
    b82e:	2510      	movs	r5, #16
    b830:	e004      	b.n	b83c <_svfprintf_r+0xa6c>
    b832:	3c10      	subs	r4, #16
    b834:	2c10      	cmp	r4, #16
    b836:	f10a 0a08 	add.w	sl, sl, #8
    b83a:	dd16      	ble.n	b86a <_svfprintf_r+0xa9a>
    b83c:	3301      	adds	r3, #1
    b83e:	3210      	adds	r2, #16
    b840:	2b07      	cmp	r3, #7
    b842:	e9ca 6500 	strd	r6, r5, [sl]
    b846:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b84a:	ddf2      	ble.n	b832 <_svfprintf_r+0xa62>
    b84c:	aa24      	add	r2, sp, #144	; 0x90
    b84e:	4641      	mov	r1, r8
    b850:	4658      	mov	r0, fp
    b852:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b856:	f002 f9c3 	bl	dbe0 <__ssprint_r>
    b85a:	2800      	cmp	r0, #0
    b85c:	f47f af1d 	bne.w	b69a <_svfprintf_r+0x8ca>
    b860:	3c10      	subs	r4, #16
    b862:	2c10      	cmp	r4, #16
    b864:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b868:	dce8      	bgt.n	b83c <_svfprintf_r+0xa6c>
    b86a:	3301      	adds	r3, #1
    b86c:	4422      	add	r2, r4
    b86e:	2b07      	cmp	r3, #7
    b870:	e9ca 6400 	strd	r6, r4, [sl]
    b874:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b878:	f77f ac4b 	ble.w	b112 <_svfprintf_r+0x342>
    b87c:	ee1b 1a10 	vmov	r1, s22
    b880:	aa24      	add	r2, sp, #144	; 0x90
    b882:	4658      	mov	r0, fp
    b884:	f002 f9ac 	bl	dbe0 <__ssprint_r>
    b888:	2800      	cmp	r0, #0
    b88a:	f47f af06 	bne.w	b69a <_svfprintf_r+0x8ca>
    b88e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b890:	e43f      	b.n	b112 <_svfprintf_r+0x342>
    b892:	991b      	ldr	r1, [sp, #108]	; 0x6c
    b894:	2900      	cmp	r1, #0
    b896:	f340 835a 	ble.w	bf4e <_svfprintf_r+0x117e>
    b89a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    b89c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b89e:	429e      	cmp	r6, r3
    b8a0:	bfa8      	it	ge
    b8a2:	461e      	movge	r6, r3
    b8a4:	2e00      	cmp	r6, #0
    b8a6:	dd0b      	ble.n	b8c0 <_svfprintf_r+0xaf0>
    b8a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b8aa:	3301      	adds	r3, #1
    b8ac:	4432      	add	r2, r6
    b8ae:	2b07      	cmp	r3, #7
    b8b0:	e9ca 4600 	strd	r4, r6, [sl]
    b8b4:	9226      	str	r2, [sp, #152]	; 0x98
    b8b6:	9325      	str	r3, [sp, #148]	; 0x94
    b8b8:	f300 8689 	bgt.w	c5ce <_svfprintf_r+0x17fe>
    b8bc:	f10a 0a08 	add.w	sl, sl, #8
    b8c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b8c2:	2e00      	cmp	r6, #0
    b8c4:	bfa8      	it	ge
    b8c6:	1bad      	subge	r5, r5, r6
    b8c8:	2d00      	cmp	r5, #0
    b8ca:	f300 8203 	bgt.w	bcd4 <_svfprintf_r+0xf04>
    b8ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b8d0:	f418 6f80 	tst.w	r8, #1024	; 0x400
    b8d4:	4423      	add	r3, r4
    b8d6:	9305      	str	r3, [sp, #20]
    b8d8:	f040 821f 	bne.w	bd1a <_svfprintf_r+0xf4a>
    b8dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    b8de:	990e      	ldr	r1, [sp, #56]	; 0x38
    b8e0:	428b      	cmp	r3, r1
    b8e2:	db03      	blt.n	b8ec <_svfprintf_r+0xb1c>
    b8e4:	f018 0f01 	tst.w	r8, #1
    b8e8:	f000 84cf 	beq.w	c28a <_svfprintf_r+0x14ba>
    b8ec:	9910      	ldr	r1, [sp, #64]	; 0x40
    b8ee:	9812      	ldr	r0, [sp, #72]	; 0x48
    b8f0:	440a      	add	r2, r1
    b8f2:	e9ca 0100 	strd	r0, r1, [sl]
    b8f6:	9925      	ldr	r1, [sp, #148]	; 0x94
    b8f8:	9226      	str	r2, [sp, #152]	; 0x98
    b8fa:	3101      	adds	r1, #1
    b8fc:	2907      	cmp	r1, #7
    b8fe:	9125      	str	r1, [sp, #148]	; 0x94
    b900:	f300 86a5 	bgt.w	c64e <_svfprintf_r+0x187e>
    b904:	f10a 0a08 	add.w	sl, sl, #8
    b908:	990e      	ldr	r1, [sp, #56]	; 0x38
    b90a:	1865      	adds	r5, r4, r1
    b90c:	1acc      	subs	r4, r1, r3
    b90e:	9b05      	ldr	r3, [sp, #20]
    b910:	1aed      	subs	r5, r5, r3
    b912:	42a5      	cmp	r5, r4
    b914:	bfa8      	it	ge
    b916:	4625      	movge	r5, r4
    b918:	2d00      	cmp	r5, #0
    b91a:	dd0d      	ble.n	b938 <_svfprintf_r+0xb68>
    b91c:	f8ca 3000 	str.w	r3, [sl]
    b920:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b922:	f8ca 5004 	str.w	r5, [sl, #4]
    b926:	3301      	adds	r3, #1
    b928:	442a      	add	r2, r5
    b92a:	2b07      	cmp	r3, #7
    b92c:	9226      	str	r2, [sp, #152]	; 0x98
    b92e:	9325      	str	r3, [sp, #148]	; 0x94
    b930:	f300 86bb 	bgt.w	c6aa <_svfprintf_r+0x18da>
    b934:	f10a 0a08 	add.w	sl, sl, #8
    b938:	2d00      	cmp	r5, #0
    b93a:	bfa8      	it	ge
    b93c:	1b64      	subge	r4, r4, r5
    b93e:	2c00      	cmp	r4, #0
    b940:	f77f abde 	ble.w	b100 <_svfprintf_r+0x330>
    b944:	2c10      	cmp	r4, #16
    b946:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b948:	f340 837c 	ble.w	c044 <_svfprintf_r+0x1274>
    b94c:	ee1b 6a10 	vmov	r6, s22
    b950:	2510      	movs	r5, #16
    b952:	e005      	b.n	b960 <_svfprintf_r+0xb90>
    b954:	f10a 0a08 	add.w	sl, sl, #8
    b958:	3c10      	subs	r4, #16
    b95a:	2c10      	cmp	r4, #16
    b95c:	f340 8372 	ble.w	c044 <_svfprintf_r+0x1274>
    b960:	3301      	adds	r3, #1
    b962:	4970      	ldr	r1, [pc, #448]	; (bb24 <_svfprintf_r+0xd54>)
    b964:	3210      	adds	r2, #16
    b966:	2b07      	cmp	r3, #7
    b968:	e9ca 1500 	strd	r1, r5, [sl]
    b96c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    b970:	ddf0      	ble.n	b954 <_svfprintf_r+0xb84>
    b972:	aa24      	add	r2, sp, #144	; 0x90
    b974:	4631      	mov	r1, r6
    b976:	4658      	mov	r0, fp
    b978:	f002 f932 	bl	dbe0 <__ssprint_r>
    b97c:	2800      	cmp	r0, #0
    b97e:	f47f ae8c 	bne.w	b69a <_svfprintf_r+0x8ca>
    b982:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b986:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b98a:	e7e5      	b.n	b958 <_svfprintf_r+0xb88>
    b98c:	2b30      	cmp	r3, #48	; 0x30
    b98e:	f43f ad8b 	beq.w	b4a8 <_svfprintf_r+0x6d8>
    b992:	2330      	movs	r3, #48	; 0x30
    b994:	3802      	subs	r0, #2
    b996:	f804 3c01 	strb.w	r3, [r4, #-1]
    b99a:	ab50      	add	r3, sp, #320	; 0x140
    b99c:	1a1b      	subs	r3, r3, r0
    b99e:	f8dd 8008 	ldr.w	r8, [sp, #8]
    b9a2:	9305      	str	r3, [sp, #20]
    b9a4:	4604      	mov	r4, r0
    b9a6:	e584      	b.n	b4b2 <_svfprintf_r+0x6e2>
    b9a8:	f018 0f01 	tst.w	r8, #1
    b9ac:	f47f ae82 	bne.w	b6b4 <_svfprintf_r+0x8e4>
    b9b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    b9b2:	f8ca 4000 	str.w	r4, [sl]
    b9b6:	3301      	adds	r3, #1
    b9b8:	3201      	adds	r2, #1
    b9ba:	2101      	movs	r1, #1
    b9bc:	2b07      	cmp	r3, #7
    b9be:	9226      	str	r2, [sp, #152]	; 0x98
    b9c0:	9325      	str	r3, [sp, #148]	; 0x94
    b9c2:	f8ca 1004 	str.w	r1, [sl, #4]
    b9c6:	f77f aea5 	ble.w	b714 <_svfprintf_r+0x944>
    b9ca:	ee1b 1a10 	vmov	r1, s22
    b9ce:	aa24      	add	r2, sp, #144	; 0x90
    b9d0:	4658      	mov	r0, fp
    b9d2:	f002 f905 	bl	dbe0 <__ssprint_r>
    b9d6:	2800      	cmp	r0, #0
    b9d8:	f47f ae5f 	bne.w	b69a <_svfprintf_r+0x8ca>
    b9dc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    b9e0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    b9e4:	e698      	b.n	b718 <_svfprintf_r+0x948>
    b9e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    b9e8:	1e4c      	subs	r4, r1, #1
    b9ea:	2c00      	cmp	r4, #0
    b9ec:	f77f ae94 	ble.w	b718 <_svfprintf_r+0x948>
    b9f0:	2c10      	cmp	r4, #16
    b9f2:	f340 8361 	ble.w	c0b8 <_svfprintf_r+0x12e8>
    b9f6:	ee1b 6a10 	vmov	r6, s22
    b9fa:	2510      	movs	r5, #16
    b9fc:	e005      	b.n	ba0a <_svfprintf_r+0xc3a>
    b9fe:	f10a 0a08 	add.w	sl, sl, #8
    ba02:	3c10      	subs	r4, #16
    ba04:	2c10      	cmp	r4, #16
    ba06:	f340 8357 	ble.w	c0b8 <_svfprintf_r+0x12e8>
    ba0a:	3301      	adds	r3, #1
    ba0c:	4945      	ldr	r1, [pc, #276]	; (bb24 <_svfprintf_r+0xd54>)
    ba0e:	3210      	adds	r2, #16
    ba10:	2b07      	cmp	r3, #7
    ba12:	e9ca 1500 	strd	r1, r5, [sl]
    ba16:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    ba1a:	ddf0      	ble.n	b9fe <_svfprintf_r+0xc2e>
    ba1c:	aa24      	add	r2, sp, #144	; 0x90
    ba1e:	4631      	mov	r1, r6
    ba20:	4658      	mov	r0, fp
    ba22:	f002 f8dd 	bl	dbe0 <__ssprint_r>
    ba26:	2800      	cmp	r0, #0
    ba28:	f47f ae37 	bne.w	b69a <_svfprintf_r+0x8ca>
    ba2c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    ba30:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ba34:	e7e5      	b.n	ba02 <_svfprintf_r+0xc32>
    ba36:	ee1b 1a10 	vmov	r1, s22
    ba3a:	aa24      	add	r2, sp, #144	; 0x90
    ba3c:	4658      	mov	r0, fp
    ba3e:	f002 f8cf 	bl	dbe0 <__ssprint_r>
    ba42:	2800      	cmp	r0, #0
    ba44:	f47f ae29 	bne.w	b69a <_svfprintf_r+0x8ca>
    ba48:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ba4a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    ba4e:	f7ff bb44 	b.w	b0da <_svfprintf_r+0x30a>
    ba52:	9b02      	ldr	r3, [sp, #8]
    ba54:	f013 0310 	ands.w	r3, r3, #16
    ba58:	f040 80c1 	bne.w	bbde <_svfprintf_r+0xe0e>
    ba5c:	9a02      	ldr	r2, [sp, #8]
    ba5e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    ba62:	f000 837a 	beq.w	c15a <_svfprintf_r+0x138a>
    ba66:	9808      	ldr	r0, [sp, #32]
    ba68:	f850 2b04 	ldr.w	r2, [r0], #4
    ba6c:	9008      	str	r0, [sp, #32]
    ba6e:	4619      	mov	r1, r3
    ba70:	b292      	uxth	r2, r2
    ba72:	2301      	movs	r3, #1
    ba74:	e451      	b.n	b31a <_svfprintf_r+0x54a>
    ba76:	f018 0310 	ands.w	r3, r8, #16
    ba7a:	d155      	bne.n	bb28 <_svfprintf_r+0xd58>
    ba7c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    ba80:	f000 835d 	beq.w	c13e <_svfprintf_r+0x136e>
    ba84:	9808      	ldr	r0, [sp, #32]
    ba86:	f850 2b04 	ldr.w	r2, [r0], #4
    ba8a:	9008      	str	r0, [sp, #32]
    ba8c:	4619      	mov	r1, r3
    ba8e:	b292      	uxth	r2, r2
    ba90:	e4a8      	b.n	b3e4 <_svfprintf_r+0x614>
    ba92:	4252      	negs	r2, r2
    ba94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ba98:	f8cd 8008 	str.w	r8, [sp, #8]
    ba9c:	202d      	movs	r0, #45	; 0x2d
    ba9e:	2301      	movs	r3, #1
    baa0:	e43c      	b.n	b31c <_svfprintf_r+0x54c>
    baa2:	ee1b 1a10 	vmov	r1, s22
    baa6:	aa24      	add	r2, sp, #144	; 0x90
    baa8:	4658      	mov	r0, fp
    baaa:	f002 f899 	bl	dbe0 <__ssprint_r>
    baae:	2800      	cmp	r0, #0
    bab0:	f47f adf3 	bne.w	b69a <_svfprintf_r+0x8ca>
    bab4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    bab8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    babc:	e616      	b.n	b6ec <_svfprintf_r+0x91c>
    babe:	ee1b 1a10 	vmov	r1, s22
    bac2:	aa24      	add	r2, sp, #144	; 0x90
    bac4:	4658      	mov	r0, fp
    bac6:	f002 f88b 	bl	dbe0 <__ssprint_r>
    baca:	2800      	cmp	r0, #0
    bacc:	f47f ade5 	bne.w	b69a <_svfprintf_r+0x8ca>
    bad0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    bad4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    bad8:	e5fb      	b.n	b6d2 <_svfprintf_r+0x902>
    bada:	f018 0f01 	tst.w	r8, #1
    bade:	f43f ab0f 	beq.w	b100 <_svfprintf_r+0x330>
    bae2:	e52a      	b.n	b53a <_svfprintf_r+0x76a>
    bae4:	9308      	str	r3, [sp, #32]
    bae6:	f899 3000 	ldrb.w	r3, [r9]
    baea:	f7ff b9cd 	b.w	ae88 <_svfprintf_r+0xb8>
    baee:	ac50      	add	r4, sp, #320	; 0x140
    baf0:	e4df      	b.n	b4b2 <_svfprintf_r+0x6e2>
    baf2:	f418 7f00 	tst.w	r8, #512	; 0x200
    baf6:	f040 83db 	bne.w	c2b0 <_svfprintf_r+0x14e0>
    bafa:	f853 2b04 	ldr.w	r2, [r3], #4
    bafe:	9308      	str	r3, [sp, #32]
    bb00:	17d1      	asrs	r1, r2, #31
    bb02:	460b      	mov	r3, r1
    bb04:	f7ff bbb6 	b.w	b274 <_svfprintf_r+0x4a4>
    bb08:	9b08      	ldr	r3, [sp, #32]
    bb0a:	9804      	ldr	r0, [sp, #16]
    bb0c:	f853 1b04 	ldr.w	r1, [r3], #4
    bb10:	9308      	str	r3, [sp, #32]
    bb12:	17c2      	asrs	r2, r0, #31
    bb14:	e9c1 0200 	strd	r0, r2, [r1]
    bb18:	464c      	mov	r4, r9
    bb1a:	f7ff b98b 	b.w	ae34 <_svfprintf_r+0x64>
    bb1e:	bf00      	nop
    bb20:	20000b20 	.word	0x20000b20
    bb24:	20001064 	.word	0x20001064
    bb28:	9b08      	ldr	r3, [sp, #32]
    bb2a:	f853 2b04 	ldr.w	r2, [r3], #4
    bb2e:	9308      	str	r3, [sp, #32]
    bb30:	e458      	b.n	b3e4 <_svfprintf_r+0x614>
    bb32:	eeb4 8b48 	vcmp.f64	d8, d8
    bb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bb3a:	f180 8694 	bvs.w	c866 <_svfprintf_r+0x1a96>
    bb3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb40:	2b61      	cmp	r3, #97	; 0x61
    bb42:	f000 8552 	beq.w	c5ea <_svfprintf_r+0x181a>
    bb46:	2b41      	cmp	r3, #65	; 0x41
    bb48:	f000 85c0 	beq.w	c6cc <_svfprintf_r+0x18fc>
    bb4c:	9b03      	ldr	r3, [sp, #12]
    bb4e:	3301      	adds	r3, #1
    bb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb52:	f023 0520 	bic.w	r5, r3, #32
    bb56:	f000 8480 	beq.w	c45a <_svfprintf_r+0x168a>
    bb5a:	2d47      	cmp	r5, #71	; 0x47
    bb5c:	d104      	bne.n	bb68 <_svfprintf_r+0xd98>
    bb5e:	9b03      	ldr	r3, [sp, #12]
    bb60:	2b00      	cmp	r3, #0
    bb62:	bf08      	it	eq
    bb64:	2301      	moveq	r3, #1
    bb66:	9303      	str	r3, [sp, #12]
    bb68:	ee18 3a90 	vmov	r3, s17
    bb6c:	2b00      	cmp	r3, #0
    bb6e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
    bb72:	4646      	mov	r6, r8
    bb74:	f2c0 8618 	blt.w	c7a8 <_svfprintf_r+0x19d8>
    bb78:	eeb0 ab48 	vmov.f64	d10, d8
    bb7c:	2300      	movs	r3, #0
    bb7e:	4690      	mov	r8, r2
    bb80:	9309      	str	r3, [sp, #36]	; 0x24
    bb82:	9307      	str	r3, [sp, #28]
    bb84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb86:	3b41      	subs	r3, #65	; 0x41
    bb88:	2b25      	cmp	r3, #37	; 0x25
    bb8a:	f200 8398 	bhi.w	c2be <_svfprintf_r+0x14ee>
    bb8e:	e8df f013 	tbh	[pc, r3, lsl #1]
    bb92:	046f      	.short	0x046f
    bb94:	03960396 	.word	0x03960396
    bb98:	04680396 	.word	0x04680396
    bb9c:	0396046c 	.word	0x0396046c
    bba0:	03960396 	.word	0x03960396
    bba4:	03960396 	.word	0x03960396
    bba8:	03960396 	.word	0x03960396
    bbac:	03960396 	.word	0x03960396
    bbb0:	03960396 	.word	0x03960396
    bbb4:	03960396 	.word	0x03960396
    bbb8:	03960396 	.word	0x03960396
    bbbc:	03960396 	.word	0x03960396
    bbc0:	03960396 	.word	0x03960396
    bbc4:	03960396 	.word	0x03960396
    bbc8:	03960396 	.word	0x03960396
    bbcc:	03960396 	.word	0x03960396
    bbd0:	03960396 	.word	0x03960396
    bbd4:	03960396 	.word	0x03960396
    bbd8:	04680396 	.word	0x04680396
    bbdc:	046c      	.short	0x046c
    bbde:	9b08      	ldr	r3, [sp, #32]
    bbe0:	f853 2b04 	ldr.w	r2, [r3], #4
    bbe4:	9308      	str	r3, [sp, #32]
    bbe6:	2301      	movs	r3, #1
    bbe8:	f7ff bb97 	b.w	b31a <_svfprintf_r+0x54a>
    bbec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bbee:	2b00      	cmp	r3, #0
    bbf0:	f43f a9cf 	beq.w	af92 <_svfprintf_r+0x1c2>
    bbf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bbf6:	781b      	ldrb	r3, [r3, #0]
    bbf8:	2b00      	cmp	r3, #0
    bbfa:	f43f a9ca 	beq.w	af92 <_svfprintf_r+0x1c2>
    bbfe:	f899 3000 	ldrb.w	r3, [r9]
    bc02:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
    bc06:	f7ff b93f 	b.w	ae88 <_svfprintf_r+0xb8>
    bc0a:	930b      	str	r3, [sp, #44]	; 0x2c
    bc0c:	f8cd 8008 	str.w	r8, [sp, #8]
    bc10:	f7ff bbf1 	b.w	b3f6 <_svfprintf_r+0x626>
    bc14:	930b      	str	r3, [sp, #44]	; 0x2c
    bc16:	4b9a      	ldr	r3, [pc, #616]	; (be80 <_svfprintf_r+0x10b0>)
    bc18:	9311      	str	r3, [sp, #68]	; 0x44
    bc1a:	f018 0120 	ands.w	r1, r8, #32
    bc1e:	f000 8105 	beq.w	be2c <_svfprintf_r+0x105c>
    bc22:	9b08      	ldr	r3, [sp, #32]
    bc24:	3307      	adds	r3, #7
    bc26:	f023 0307 	bic.w	r3, r3, #7
    bc2a:	6859      	ldr	r1, [r3, #4]
    bc2c:	f853 2b08 	ldr.w	r2, [r3], #8
    bc30:	9308      	str	r3, [sp, #32]
    bc32:	f018 0f01 	tst.w	r8, #1
    bc36:	d00a      	beq.n	bc4e <_svfprintf_r+0xe7e>
    bc38:	ea52 0301 	orrs.w	r3, r2, r1
    bc3c:	d007      	beq.n	bc4e <_svfprintf_r+0xe7e>
    bc3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bc40:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    bc44:	2330      	movs	r3, #48	; 0x30
    bc46:	f048 0802 	orr.w	r8, r8, #2
    bc4a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    bc4e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
    bc52:	9302      	str	r3, [sp, #8]
    bc54:	2302      	movs	r3, #2
    bc56:	f7ff bb60 	b.w	b31a <_svfprintf_r+0x54a>
    bc5a:	930b      	str	r3, [sp, #44]	; 0x2c
    bc5c:	f7ff bbb6 	b.w	b3cc <_svfprintf_r+0x5fc>
    bc60:	930b      	str	r3, [sp, #44]	; 0x2c
    bc62:	4b88      	ldr	r3, [pc, #544]	; (be84 <_svfprintf_r+0x10b4>)
    bc64:	9311      	str	r3, [sp, #68]	; 0x44
    bc66:	e7d8      	b.n	bc1a <_svfprintf_r+0xe4a>
    bc68:	9b08      	ldr	r3, [sp, #32]
    bc6a:	2101      	movs	r1, #1
    bc6c:	f853 2b04 	ldr.w	r2, [r3], #4
    bc70:	9102      	str	r1, [sp, #8]
    bc72:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
    bc76:	9308      	str	r3, [sp, #32]
    bc78:	9105      	str	r1, [sp, #20]
    bc7a:	ac37      	add	r4, sp, #220	; 0xdc
    bc7c:	f7ff baaf 	b.w	b1de <_svfprintf_r+0x40e>
    bc80:	ee1b 1a10 	vmov	r1, s22
    bc84:	aa24      	add	r2, sp, #144	; 0x90
    bc86:	4658      	mov	r0, fp
    bc88:	f001 ffaa 	bl	dbe0 <__ssprint_r>
    bc8c:	2800      	cmp	r0, #0
    bc8e:	f47f ad04 	bne.w	b69a <_svfprintf_r+0x8ca>
    bc92:	9a26      	ldr	r2, [sp, #152]	; 0x98
    bc94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    bc98:	e45d      	b.n	b556 <_svfprintf_r+0x786>
    bc9a:	9b03      	ldr	r3, [sp, #12]
    bc9c:	9407      	str	r4, [sp, #28]
    bc9e:	2b06      	cmp	r3, #6
    bca0:	4622      	mov	r2, r4
    bca2:	bf28      	it	cs
    bca4:	2306      	movcs	r3, #6
    bca6:	9403      	str	r4, [sp, #12]
    bca8:	4621      	mov	r1, r4
    bcaa:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
    bcae:	4c76      	ldr	r4, [pc, #472]	; (be88 <_svfprintf_r+0x10b8>)
    bcb0:	9302      	str	r3, [sp, #8]
    bcb2:	9305      	str	r3, [sp, #20]
    bcb4:	920f      	str	r2, [sp, #60]	; 0x3c
    bcb6:	f7ff ba6c 	b.w	b192 <_svfprintf_r+0x3c2>
    bcba:	2140      	movs	r1, #64	; 0x40
    bcbc:	4658      	mov	r0, fp
    bcbe:	f7fc ff39 	bl	8b34 <_malloc_r>
    bcc2:	6020      	str	r0, [r4, #0]
    bcc4:	6120      	str	r0, [r4, #16]
    bcc6:	2800      	cmp	r0, #0
    bcc8:	f000 860f 	beq.w	c8ea <_svfprintf_r+0x1b1a>
    bccc:	2340      	movs	r3, #64	; 0x40
    bcce:	6163      	str	r3, [r4, #20]
    bcd0:	f7ff b89e 	b.w	ae10 <_svfprintf_r+0x40>
    bcd4:	2d10      	cmp	r5, #16
    bcd6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    bcd8:	f340 825d 	ble.w	c196 <_svfprintf_r+0x13c6>
    bcdc:	4651      	mov	r1, sl
    bcde:	2610      	movs	r6, #16
    bce0:	ee1b aa10 	vmov	sl, s22
    bce4:	e004      	b.n	bcf0 <_svfprintf_r+0xf20>
    bce6:	3108      	adds	r1, #8
    bce8:	3d10      	subs	r5, #16
    bcea:	2d10      	cmp	r5, #16
    bcec:	f340 8252 	ble.w	c194 <_svfprintf_r+0x13c4>
    bcf0:	3301      	adds	r3, #1
    bcf2:	4866      	ldr	r0, [pc, #408]	; (be8c <_svfprintf_r+0x10bc>)
    bcf4:	3210      	adds	r2, #16
    bcf6:	2b07      	cmp	r3, #7
    bcf8:	e9c1 0600 	strd	r0, r6, [r1]
    bcfc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    bd00:	ddf1      	ble.n	bce6 <_svfprintf_r+0xf16>
    bd02:	aa24      	add	r2, sp, #144	; 0x90
    bd04:	4651      	mov	r1, sl
    bd06:	4658      	mov	r0, fp
    bd08:	f001 ff6a 	bl	dbe0 <__ssprint_r>
    bd0c:	2800      	cmp	r0, #0
    bd0e:	f47f acc4 	bne.w	b69a <_svfprintf_r+0x8ca>
    bd12:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    bd16:	a927      	add	r1, sp, #156	; 0x9c
    bd18:	e7e6      	b.n	bce8 <_svfprintf_r+0xf18>
    bd1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bd1c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    bd20:	18e3      	adds	r3, r4, r3
    bd22:	9303      	str	r3, [sp, #12]
    bd24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bd26:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    bd2a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    bd2c:	9d05      	ldr	r5, [sp, #20]
    bd2e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    bd32:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    bd36:	940b      	str	r4, [sp, #44]	; 0x2c
    bd38:	ee1b 1a10 	vmov	r1, s22
    bd3c:	4650      	mov	r0, sl
    bd3e:	2b00      	cmp	r3, #0
    bd40:	d034      	beq.n	bdac <_svfprintf_r+0xfdc>
    bd42:	f1b8 0f00 	cmp.w	r8, #0
    bd46:	d135      	bne.n	bdb4 <_svfprintf_r+0xfe4>
    bd48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bd4a:	3b01      	subs	r3, #1
    bd4c:	3e01      	subs	r6, #1
    bd4e:	930d      	str	r3, [sp, #52]	; 0x34
    bd50:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bd52:	e9c0 3900 	strd	r3, r9, [r0]
    bd56:	9b25      	ldr	r3, [sp, #148]	; 0x94
    bd58:	3301      	adds	r3, #1
    bd5a:	444a      	add	r2, r9
    bd5c:	2b07      	cmp	r3, #7
    bd5e:	9226      	str	r2, [sp, #152]	; 0x98
    bd60:	9325      	str	r3, [sp, #148]	; 0x94
    bd62:	dc6c      	bgt.n	be3e <_svfprintf_r+0x106e>
    bd64:	3008      	adds	r0, #8
    bd66:	9b03      	ldr	r3, [sp, #12]
    bd68:	f896 c000 	ldrb.w	ip, [r6]
    bd6c:	1b5b      	subs	r3, r3, r5
    bd6e:	4563      	cmp	r3, ip
    bd70:	bfa8      	it	ge
    bd72:	4663      	movge	r3, ip
    bd74:	2b00      	cmp	r3, #0
    bd76:	469a      	mov	sl, r3
    bd78:	dd0c      	ble.n	bd94 <_svfprintf_r+0xfc4>
    bd7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    bd7c:	3401      	adds	r4, #1
    bd7e:	441a      	add	r2, r3
    bd80:	2c07      	cmp	r4, #7
    bd82:	e9c0 5300 	strd	r5, r3, [r0]
    bd86:	9226      	str	r2, [sp, #152]	; 0x98
    bd88:	9425      	str	r4, [sp, #148]	; 0x94
    bd8a:	f300 8177 	bgt.w	c07c <_svfprintf_r+0x12ac>
    bd8e:	f896 c000 	ldrb.w	ip, [r6]
    bd92:	3008      	adds	r0, #8
    bd94:	f1ba 0f00 	cmp.w	sl, #0
    bd98:	bfac      	ite	ge
    bd9a:	ebac 040a 	subge.w	r4, ip, sl
    bd9e:	4664      	movlt	r4, ip
    bda0:	2c00      	cmp	r4, #0
    bda2:	dc0a      	bgt.n	bdba <_svfprintf_r+0xfea>
    bda4:	4465      	add	r5, ip
    bda6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bda8:	2b00      	cmp	r3, #0
    bdaa:	d1ca      	bne.n	bd42 <_svfprintf_r+0xf72>
    bdac:	f1b8 0f00 	cmp.w	r8, #0
    bdb0:	f000 83ac 	beq.w	c50c <_svfprintf_r+0x173c>
    bdb4:	f108 38ff 	add.w	r8, r8, #4294967295
    bdb8:	e7ca      	b.n	bd50 <_svfprintf_r+0xf80>
    bdba:	2c10      	cmp	r4, #16
    bdbc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
    bdc0:	dd24      	ble.n	be0c <_svfprintf_r+0x103c>
    bdc2:	9505      	str	r5, [sp, #20]
    bdc4:	f04f 0a10 	mov.w	sl, #16
    bdc8:	4663      	mov	r3, ip
    bdca:	460d      	mov	r5, r1
    bdcc:	e004      	b.n	bdd8 <_svfprintf_r+0x1008>
    bdce:	3c10      	subs	r4, #16
    bdd0:	2c10      	cmp	r4, #16
    bdd2:	f100 0008 	add.w	r0, r0, #8
    bdd6:	dd16      	ble.n	be06 <_svfprintf_r+0x1036>
    bdd8:	3301      	adds	r3, #1
    bdda:	492c      	ldr	r1, [pc, #176]	; (be8c <_svfprintf_r+0x10bc>)
    bddc:	3210      	adds	r2, #16
    bdde:	2b07      	cmp	r3, #7
    bde0:	e9c0 1a00 	strd	r1, sl, [r0]
    bde4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    bde8:	ddf1      	ble.n	bdce <_svfprintf_r+0xffe>
    bdea:	aa24      	add	r2, sp, #144	; 0x90
    bdec:	4629      	mov	r1, r5
    bdee:	4658      	mov	r0, fp
    bdf0:	f001 fef6 	bl	dbe0 <__ssprint_r>
    bdf4:	2800      	cmp	r0, #0
    bdf6:	f47f ac50 	bne.w	b69a <_svfprintf_r+0x8ca>
    bdfa:	3c10      	subs	r4, #16
    bdfc:	2c10      	cmp	r4, #16
    bdfe:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    be02:	a827      	add	r0, sp, #156	; 0x9c
    be04:	dce8      	bgt.n	bdd8 <_svfprintf_r+0x1008>
    be06:	4629      	mov	r1, r5
    be08:	9d05      	ldr	r5, [sp, #20]
    be0a:	469c      	mov	ip, r3
    be0c:	f10c 0301 	add.w	r3, ip, #1
    be10:	4422      	add	r2, r4
    be12:	6044      	str	r4, [r0, #4]
    be14:	2b07      	cmp	r3, #7
    be16:	4c1d      	ldr	r4, [pc, #116]	; (be8c <_svfprintf_r+0x10bc>)
    be18:	6004      	str	r4, [r0, #0]
    be1a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    be1e:	f300 83c6 	bgt.w	c5ae <_svfprintf_r+0x17de>
    be22:	f896 c000 	ldrb.w	ip, [r6]
    be26:	3008      	adds	r0, #8
    be28:	4465      	add	r5, ip
    be2a:	e7bc      	b.n	bda6 <_svfprintf_r+0xfd6>
    be2c:	f018 0310 	ands.w	r3, r8, #16
    be30:	f000 80c2 	beq.w	bfb8 <_svfprintf_r+0x11e8>
    be34:	9b08      	ldr	r3, [sp, #32]
    be36:	f853 2b04 	ldr.w	r2, [r3], #4
    be3a:	9308      	str	r3, [sp, #32]
    be3c:	e6f9      	b.n	bc32 <_svfprintf_r+0xe62>
    be3e:	aa24      	add	r2, sp, #144	; 0x90
    be40:	4658      	mov	r0, fp
    be42:	9105      	str	r1, [sp, #20]
    be44:	f001 fecc 	bl	dbe0 <__ssprint_r>
    be48:	2800      	cmp	r0, #0
    be4a:	f47f ac26 	bne.w	b69a <_svfprintf_r+0x8ca>
    be4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    be50:	9905      	ldr	r1, [sp, #20]
    be52:	a827      	add	r0, sp, #156	; 0x9c
    be54:	e787      	b.n	bd66 <_svfprintf_r+0xf96>
    be56:	9802      	ldr	r0, [sp, #8]
    be58:	f8cd a01c 	str.w	sl, [sp, #28]
    be5c:	ac50      	add	r4, sp, #320	; 0x140
    be5e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
    be62:	2500      	movs	r5, #0
    be64:	ee0a ba10 	vmov	s20, fp
    be68:	4b09      	ldr	r3, [pc, #36]	; (be90 <_svfprintf_r+0x10c0>)
    be6a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
    be6e:	f8cd 9014 	str.w	r9, [sp, #20]
    be72:	46a3      	mov	fp, r4
    be74:	f04f 0805 	mov.w	r8, #5
    be78:	46ac      	mov	ip, r5
    be7a:	4604      	mov	r4, r0
    be7c:	e010      	b.n	bea0 <_svfprintf_r+0x10d0>
    be7e:	bf00      	nop
    be80:	20000aec 	.word	0x20000aec
    be84:	20000b00 	.word	0x20000b00
    be88:	20000b14 	.word	0x20000b14
    be8c:	20001064 	.word	0x20001064
    be90:	cccccccd 	.word	0xcccccccd
    be94:	2a0a      	cmp	r2, #10
    be96:	f171 0100 	sbcs.w	r1, r1, #0
    be9a:	d336      	bcc.n	bf0a <_svfprintf_r+0x113a>
    be9c:	464a      	mov	r2, r9
    be9e:	4631      	mov	r1, r6
    bea0:	1850      	adds	r0, r2, r1
    bea2:	f140 0000 	adc.w	r0, r0, #0
    bea6:	fba3 5600 	umull	r5, r6, r3, r0
    beaa:	f026 0503 	bic.w	r5, r6, #3
    beae:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    beb2:	1b40      	subs	r0, r0, r5
    beb4:	1a15      	subs	r5, r2, r0
    beb6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
    beba:	f161 0e00 	sbc.w	lr, r1, #0
    bebe:	fb06 f605 	mul.w	r6, r6, r5
    bec2:	fba5 9503 	umull	r9, r5, r5, r3
    bec6:	fb03 660e 	mla	r6, r3, lr, r6
    beca:	f009 0e01 	and.w	lr, r9, #1
    bece:	442e      	add	r6, r5
    bed0:	fbae 5e08 	umull	r5, lr, lr, r8
    bed4:	182d      	adds	r5, r5, r0
    bed6:	ea4f 0959 	mov.w	r9, r9, lsr #1
    beda:	3530      	adds	r5, #48	; 0x30
    bedc:	f80b 5c01 	strb.w	r5, [fp, #-1]
    bee0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
    bee4:	f10c 0c01 	add.w	ip, ip, #1
    bee8:	f10b 3bff 	add.w	fp, fp, #4294967295
    beec:	0876      	lsrs	r6, r6, #1
    beee:	2c00      	cmp	r4, #0
    bef0:	d0d0      	beq.n	be94 <_svfprintf_r+0x10c4>
    bef2:	f89a 0000 	ldrb.w	r0, [sl]
    bef6:	4584      	cmp	ip, r0
    bef8:	d1cc      	bne.n	be94 <_svfprintf_r+0x10c4>
    befa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    befe:	d0c9      	beq.n	be94 <_svfprintf_r+0x10c4>
    bf00:	2a0a      	cmp	r2, #10
    bf02:	f171 0100 	sbcs.w	r1, r1, #0
    bf06:	f080 818f 	bcs.w	c228 <_svfprintf_r+0x1458>
    bf0a:	465c      	mov	r4, fp
    bf0c:	ab50      	add	r3, sp, #320	; 0x140
    bf0e:	1b1b      	subs	r3, r3, r4
    bf10:	f8dd 9014 	ldr.w	r9, [sp, #20]
    bf14:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
    bf18:	ee1a ba10 	vmov	fp, s20
    bf1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
    bf20:	f8dd 8008 	ldr.w	r8, [sp, #8]
    bf24:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    bf28:	9305      	str	r3, [sp, #20]
    bf2a:	f7ff bac2 	b.w	b4b2 <_svfprintf_r+0x6e2>
    bf2e:	ee1b 1a10 	vmov	r1, s22
    bf32:	aa24      	add	r2, sp, #144	; 0x90
    bf34:	4658      	mov	r0, fp
    bf36:	f001 fe53 	bl	dbe0 <__ssprint_r>
    bf3a:	2800      	cmp	r0, #0
    bf3c:	f47f abad 	bne.w	b69a <_svfprintf_r+0x8ca>
    bf40:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    bf44:	9a26      	ldr	r2, [sp, #152]	; 0x98
    bf46:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    bf4a:	f7ff b896 	b.w	b07a <_svfprintf_r+0x2aa>
    bf4e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    bf50:	48be      	ldr	r0, [pc, #760]	; (c24c <_svfprintf_r+0x147c>)
    bf52:	f8ca 0000 	str.w	r0, [sl]
    bf56:	3301      	adds	r3, #1
    bf58:	3201      	adds	r2, #1
    bf5a:	2001      	movs	r0, #1
    bf5c:	2b07      	cmp	r3, #7
    bf5e:	9226      	str	r2, [sp, #152]	; 0x98
    bf60:	9325      	str	r3, [sp, #148]	; 0x94
    bf62:	f8ca 0004 	str.w	r0, [sl, #4]
    bf66:	f300 8177 	bgt.w	c258 <_svfprintf_r+0x1488>
    bf6a:	f10a 0a08 	add.w	sl, sl, #8
    bf6e:	2900      	cmp	r1, #0
    bf70:	f040 80af 	bne.w	c0d2 <_svfprintf_r+0x1302>
    bf74:	990e      	ldr	r1, [sp, #56]	; 0x38
    bf76:	f008 0301 	and.w	r3, r8, #1
    bf7a:	430b      	orrs	r3, r1
    bf7c:	f43f a8c0 	beq.w	b100 <_svfprintf_r+0x330>
    bf80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bf82:	9912      	ldr	r1, [sp, #72]	; 0x48
    bf84:	441a      	add	r2, r3
    bf86:	e9ca 1300 	strd	r1, r3, [sl]
    bf8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    bf8c:	9226      	str	r2, [sp, #152]	; 0x98
    bf8e:	3301      	adds	r3, #1
    bf90:	2b07      	cmp	r3, #7
    bf92:	9325      	str	r3, [sp, #148]	; 0x94
    bf94:	f300 8252 	bgt.w	c43c <_svfprintf_r+0x166c>
    bf98:	f10a 0a08 	add.w	sl, sl, #8
    bf9c:	990e      	ldr	r1, [sp, #56]	; 0x38
    bf9e:	f8ca 4000 	str.w	r4, [sl]
    bfa2:	3301      	adds	r3, #1
    bfa4:	440a      	add	r2, r1
    bfa6:	2b07      	cmp	r3, #7
    bfa8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    bfac:	f8ca 1004 	str.w	r1, [sl, #4]
    bfb0:	f77f a8a4 	ble.w	b0fc <_svfprintf_r+0x32c>
    bfb4:	f7ff bbbd 	b.w	b732 <_svfprintf_r+0x962>
    bfb8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
    bfbc:	f000 80dd 	beq.w	c17a <_svfprintf_r+0x13aa>
    bfc0:	9808      	ldr	r0, [sp, #32]
    bfc2:	f850 2b04 	ldr.w	r2, [r0], #4
    bfc6:	9008      	str	r0, [sp, #32]
    bfc8:	4619      	mov	r1, r3
    bfca:	b292      	uxth	r2, r2
    bfcc:	e631      	b.n	bc32 <_svfprintf_r+0xe62>
    bfce:	ee1b 1a10 	vmov	r1, s22
    bfd2:	aa24      	add	r2, sp, #144	; 0x90
    bfd4:	4658      	mov	r0, fp
    bfd6:	f001 fe03 	bl	dbe0 <__ssprint_r>
    bfda:	2800      	cmp	r0, #0
    bfdc:	f47f ab5d 	bne.w	b69a <_svfprintf_r+0x8ca>
    bfe0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    bfe2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    bfe6:	f7ff baa3 	b.w	b530 <_svfprintf_r+0x760>
    bfea:	ae22      	add	r6, sp, #136	; 0x88
    bfec:	2208      	movs	r2, #8
    bfee:	2100      	movs	r1, #0
    bff0:	4630      	mov	r0, r6
    bff2:	941d      	str	r4, [sp, #116]	; 0x74
    bff4:	f7fd fd96 	bl	9b24 <memset>
    bff8:	9b03      	ldr	r3, [sp, #12]
    bffa:	1c5a      	adds	r2, r3, #1
    bffc:	f000 80db 	beq.w	c1b6 <_svfprintf_r+0x13e6>
    c000:	2500      	movs	r5, #0
    c002:	f8cd 9008 	str.w	r9, [sp, #8]
    c006:	f8cd 801c 	str.w	r8, [sp, #28]
    c00a:	4699      	mov	r9, r3
    c00c:	46a8      	mov	r8, r5
    c00e:	e00c      	b.n	c02a <_svfprintf_r+0x125a>
    c010:	a937      	add	r1, sp, #220	; 0xdc
    c012:	4658      	mov	r0, fp
    c014:	f001 fd9e 	bl	db54 <_wcrtomb_r>
    c018:	1c43      	adds	r3, r0, #1
    c01a:	4440      	add	r0, r8
    c01c:	f000 83c8 	beq.w	c7b0 <_svfprintf_r+0x19e0>
    c020:	4548      	cmp	r0, r9
    c022:	dc08      	bgt.n	c036 <_svfprintf_r+0x1266>
    c024:	f000 8418 	beq.w	c858 <_svfprintf_r+0x1a88>
    c028:	4680      	mov	r8, r0
    c02a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    c02c:	5952      	ldr	r2, [r2, r5]
    c02e:	4633      	mov	r3, r6
    c030:	3504      	adds	r5, #4
    c032:	2a00      	cmp	r2, #0
    c034:	d1ec      	bne.n	c010 <_svfprintf_r+0x1240>
    c036:	f8cd 8014 	str.w	r8, [sp, #20]
    c03a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    c03e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    c042:	e0c5      	b.n	c1d0 <_svfprintf_r+0x1400>
    c044:	3301      	adds	r3, #1
    c046:	4982      	ldr	r1, [pc, #520]	; (c250 <_svfprintf_r+0x1480>)
    c048:	f8ca 4004 	str.w	r4, [sl, #4]
    c04c:	4422      	add	r2, r4
    c04e:	2b07      	cmp	r3, #7
    c050:	f8ca 1000 	str.w	r1, [sl]
    c054:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    c058:	f77f a850 	ble.w	b0fc <_svfprintf_r+0x32c>
    c05c:	f7ff bb69 	b.w	b732 <_svfprintf_r+0x962>
    c060:	ee1b 1a10 	vmov	r1, s22
    c064:	aa24      	add	r2, sp, #144	; 0x90
    c066:	4658      	mov	r0, fp
    c068:	f001 fdba 	bl	dbe0 <__ssprint_r>
    c06c:	2800      	cmp	r0, #0
    c06e:	f47f ab14 	bne.w	b69a <_svfprintf_r+0x8ca>
    c072:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c074:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c078:	f7ff b829 	b.w	b0ce <_svfprintf_r+0x2fe>
    c07c:	aa24      	add	r2, sp, #144	; 0x90
    c07e:	4658      	mov	r0, fp
    c080:	9105      	str	r1, [sp, #20]
    c082:	f001 fdad 	bl	dbe0 <__ssprint_r>
    c086:	2800      	cmp	r0, #0
    c088:	f47f ab07 	bne.w	b69a <_svfprintf_r+0x8ca>
    c08c:	f896 c000 	ldrb.w	ip, [r6]
    c090:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c092:	9905      	ldr	r1, [sp, #20]
    c094:	a827      	add	r0, sp, #156	; 0x9c
    c096:	e67d      	b.n	bd94 <_svfprintf_r+0xfc4>
    c098:	2b01      	cmp	r3, #1
    c09a:	f8cd 8008 	str.w	r8, [sp, #8]
    c09e:	f47f a9f3 	bne.w	b488 <_svfprintf_r+0x6b8>
    c0a2:	f7ff bb93 	b.w	b7cc <_svfprintf_r+0x9fc>
    c0a6:	9b08      	ldr	r3, [sp, #32]
    c0a8:	9904      	ldr	r1, [sp, #16]
    c0aa:	f853 2b04 	ldr.w	r2, [r3], #4
    c0ae:	464c      	mov	r4, r9
    c0b0:	6011      	str	r1, [r2, #0]
    c0b2:	9308      	str	r3, [sp, #32]
    c0b4:	f7fe bebe 	b.w	ae34 <_svfprintf_r+0x64>
    c0b8:	3301      	adds	r3, #1
    c0ba:	4965      	ldr	r1, [pc, #404]	; (c250 <_svfprintf_r+0x1480>)
    c0bc:	f8ca 4004 	str.w	r4, [sl, #4]
    c0c0:	4422      	add	r2, r4
    c0c2:	2b07      	cmp	r3, #7
    c0c4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    c0c8:	f8ca 1000 	str.w	r1, [sl]
    c0cc:	f77f ab22 	ble.w	b714 <_svfprintf_r+0x944>
    c0d0:	e47b      	b.n	b9ca <_svfprintf_r+0xbfa>
    c0d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c0d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    c0d6:	441a      	add	r2, r3
    c0d8:	e9ca 0300 	strd	r0, r3, [sl]
    c0dc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    c0de:	9226      	str	r2, [sp, #152]	; 0x98
    c0e0:	3301      	adds	r3, #1
    c0e2:	2b07      	cmp	r3, #7
    c0e4:	9325      	str	r3, [sp, #148]	; 0x94
    c0e6:	f300 81a9 	bgt.w	c43c <_svfprintf_r+0x166c>
    c0ea:	f10a 0a08 	add.w	sl, sl, #8
    c0ee:	2900      	cmp	r1, #0
    c0f0:	f6bf af54 	bge.w	bf9c <_svfprintf_r+0x11cc>
    c0f4:	424d      	negs	r5, r1
    c0f6:	3110      	adds	r1, #16
    c0f8:	f280 830f 	bge.w	c71a <_svfprintf_r+0x194a>
    c0fc:	ee1b 1a10 	vmov	r1, s22
    c100:	2610      	movs	r6, #16
    c102:	e005      	b.n	c110 <_svfprintf_r+0x1340>
    c104:	f10a 0a08 	add.w	sl, sl, #8
    c108:	3d10      	subs	r5, #16
    c10a:	2d10      	cmp	r5, #16
    c10c:	f340 8305 	ble.w	c71a <_svfprintf_r+0x194a>
    c110:	3301      	adds	r3, #1
    c112:	484f      	ldr	r0, [pc, #316]	; (c250 <_svfprintf_r+0x1480>)
    c114:	3210      	adds	r2, #16
    c116:	2b07      	cmp	r3, #7
    c118:	e9ca 0600 	strd	r0, r6, [sl]
    c11c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    c120:	ddf0      	ble.n	c104 <_svfprintf_r+0x1334>
    c122:	aa24      	add	r2, sp, #144	; 0x90
    c124:	4658      	mov	r0, fp
    c126:	9103      	str	r1, [sp, #12]
    c128:	f001 fd5a 	bl	dbe0 <__ssprint_r>
    c12c:	2800      	cmp	r0, #0
    c12e:	f47f aab4 	bne.w	b69a <_svfprintf_r+0x8ca>
    c132:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    c136:	9903      	ldr	r1, [sp, #12]
    c138:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c13c:	e7e4      	b.n	c108 <_svfprintf_r+0x1338>
    c13e:	9b08      	ldr	r3, [sp, #32]
    c140:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    c144:	bf1a      	itte	ne
    c146:	4611      	movne	r1, r2
    c148:	f853 2b04 	ldrne.w	r2, [r3], #4
    c14c:	f853 2b04 	ldreq.w	r2, [r3], #4
    c150:	9308      	str	r3, [sp, #32]
    c152:	bf18      	it	ne
    c154:	b2d2      	uxtbne	r2, r2
    c156:	f7ff b945 	b.w	b3e4 <_svfprintf_r+0x614>
    c15a:	9b02      	ldr	r3, [sp, #8]
    c15c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
    c160:	9b08      	ldr	r3, [sp, #32]
    c162:	bf1a      	itte	ne
    c164:	4611      	movne	r1, r2
    c166:	f853 2b04 	ldrne.w	r2, [r3], #4
    c16a:	f853 2b04 	ldreq.w	r2, [r3], #4
    c16e:	9308      	str	r3, [sp, #32]
    c170:	bf18      	it	ne
    c172:	b2d2      	uxtbne	r2, r2
    c174:	2301      	movs	r3, #1
    c176:	f7ff b8d0 	b.w	b31a <_svfprintf_r+0x54a>
    c17a:	9b08      	ldr	r3, [sp, #32]
    c17c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
    c180:	bf1a      	itte	ne
    c182:	4611      	movne	r1, r2
    c184:	f853 2b04 	ldrne.w	r2, [r3], #4
    c188:	f853 2b04 	ldreq.w	r2, [r3], #4
    c18c:	9308      	str	r3, [sp, #32]
    c18e:	bf18      	it	ne
    c190:	b2d2      	uxtbne	r2, r2
    c192:	e54e      	b.n	bc32 <_svfprintf_r+0xe62>
    c194:	468a      	mov	sl, r1
    c196:	3301      	adds	r3, #1
    c198:	492d      	ldr	r1, [pc, #180]	; (c250 <_svfprintf_r+0x1480>)
    c19a:	f8ca 5004 	str.w	r5, [sl, #4]
    c19e:	442a      	add	r2, r5
    c1a0:	2b07      	cmp	r3, #7
    c1a2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    c1a6:	f8ca 1000 	str.w	r1, [sl]
    c1aa:	f300 8139 	bgt.w	c420 <_svfprintf_r+0x1650>
    c1ae:	f10a 0a08 	add.w	sl, sl, #8
    c1b2:	f7ff bb8c 	b.w	b8ce <_svfprintf_r+0xafe>
    c1b6:	2300      	movs	r3, #0
    c1b8:	4619      	mov	r1, r3
    c1ba:	9600      	str	r6, [sp, #0]
    c1bc:	aa1d      	add	r2, sp, #116	; 0x74
    c1be:	4658      	mov	r0, fp
    c1c0:	f001 fcee 	bl	dba0 <_wcsrtombs_r>
    c1c4:	4603      	mov	r3, r0
    c1c6:	3301      	adds	r3, #1
    c1c8:	9005      	str	r0, [sp, #20]
    c1ca:	f000 82f1 	beq.w	c7b0 <_svfprintf_r+0x19e0>
    c1ce:	941d      	str	r4, [sp, #116]	; 0x74
    c1d0:	9b05      	ldr	r3, [sp, #20]
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d04e      	beq.n	c274 <_svfprintf_r+0x14a4>
    c1d6:	2b63      	cmp	r3, #99	; 0x63
    c1d8:	f300 8118 	bgt.w	c40c <_svfprintf_r+0x163c>
    c1dc:	2300      	movs	r3, #0
    c1de:	9307      	str	r3, [sp, #28]
    c1e0:	ac37      	add	r4, sp, #220	; 0xdc
    c1e2:	2208      	movs	r2, #8
    c1e4:	2100      	movs	r1, #0
    c1e6:	4630      	mov	r0, r6
    c1e8:	f7fd fc9c 	bl	9b24 <memset>
    c1ec:	9d05      	ldr	r5, [sp, #20]
    c1ee:	9600      	str	r6, [sp, #0]
    c1f0:	462b      	mov	r3, r5
    c1f2:	aa1d      	add	r2, sp, #116	; 0x74
    c1f4:	4621      	mov	r1, r4
    c1f6:	4658      	mov	r0, fp
    c1f8:	f001 fcd2 	bl	dba0 <_wcsrtombs_r>
    c1fc:	4285      	cmp	r5, r0
    c1fe:	f040 837c 	bne.w	c8fa <_svfprintf_r+0x1b2a>
    c202:	9a05      	ldr	r2, [sp, #20]
    c204:	2300      	movs	r3, #0
    c206:	54a3      	strb	r3, [r4, r2]
    c208:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    c20c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    c210:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    c214:	9303      	str	r3, [sp, #12]
    c216:	9202      	str	r2, [sp, #8]
    c218:	930f      	str	r3, [sp, #60]	; 0x3c
    c21a:	f7fe bfba 	b.w	b192 <_svfprintf_r+0x3c2>
    c21e:	212d      	movs	r1, #45	; 0x2d
    c220:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    c224:	f7fe bfa4 	b.w	b170 <_svfprintf_r+0x3a0>
    c228:	9b16      	ldr	r3, [sp, #88]	; 0x58
    c22a:	9915      	ldr	r1, [sp, #84]	; 0x54
    c22c:	ebab 0b03 	sub.w	fp, fp, r3
    c230:	461a      	mov	r2, r3
    c232:	4658      	mov	r0, fp
    c234:	f7fd fd2e 	bl	9c94 <strncpy>
    c238:	f89a 2001 	ldrb.w	r2, [sl, #1]
    c23c:	4b05      	ldr	r3, [pc, #20]	; (c254 <_svfprintf_r+0x1484>)
    c23e:	b10a      	cbz	r2, c244 <_svfprintf_r+0x1474>
    c240:	f10a 0a01 	add.w	sl, sl, #1
    c244:	f04f 0c00 	mov.w	ip, #0
    c248:	e628      	b.n	be9c <_svfprintf_r+0x10cc>
    c24a:	bf00      	nop
    c24c:	20000b1c 	.word	0x20000b1c
    c250:	20001064 	.word	0x20001064
    c254:	cccccccd 	.word	0xcccccccd
    c258:	ee1b 1a10 	vmov	r1, s22
    c25c:	aa24      	add	r2, sp, #144	; 0x90
    c25e:	4658      	mov	r0, fp
    c260:	f001 fcbe 	bl	dbe0 <__ssprint_r>
    c264:	2800      	cmp	r0, #0
    c266:	f47f aa18 	bne.w	b69a <_svfprintf_r+0x8ca>
    c26a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    c26c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c26e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c272:	e67c      	b.n	bf6e <_svfprintf_r+0x119e>
    c274:	9b05      	ldr	r3, [sp, #20]
    c276:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    c27a:	930f      	str	r3, [sp, #60]	; 0x3c
    c27c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    c280:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    c284:	9307      	str	r3, [sp, #28]
    c286:	f7fe bf84 	b.w	b192 <_svfprintf_r+0x3c2>
    c28a:	990e      	ldr	r1, [sp, #56]	; 0x38
    c28c:	9805      	ldr	r0, [sp, #20]
    c28e:	1865      	adds	r5, r4, r1
    c290:	1a2d      	subs	r5, r5, r0
    c292:	1acc      	subs	r4, r1, r3
    c294:	42a5      	cmp	r5, r4
    c296:	bfa8      	it	ge
    c298:	4625      	movge	r5, r4
    c29a:	f7ff bb4d 	b.w	b938 <_svfprintf_r+0xb68>
    c29e:	9b08      	ldr	r3, [sp, #32]
    c2a0:	9904      	ldr	r1, [sp, #16]
    c2a2:	f853 2b04 	ldr.w	r2, [r3], #4
    c2a6:	9308      	str	r3, [sp, #32]
    c2a8:	8011      	strh	r1, [r2, #0]
    c2aa:	464c      	mov	r4, r9
    c2ac:	f7fe bdc2 	b.w	ae34 <_svfprintf_r+0x64>
    c2b0:	f913 2b04 	ldrsb.w	r2, [r3], #4
    c2b4:	9308      	str	r3, [sp, #32]
    c2b6:	17d1      	asrs	r1, r2, #31
    c2b8:	460b      	mov	r3, r1
    c2ba:	f7fe bfdb 	b.w	b274 <_svfprintf_r+0x4a4>
    c2be:	9a03      	ldr	r2, [sp, #12]
    c2c0:	2102      	movs	r1, #2
    c2c2:	ab22      	add	r3, sp, #136	; 0x88
    c2c4:	9301      	str	r3, [sp, #4]
    c2c6:	ab1d      	add	r3, sp, #116	; 0x74
    c2c8:	9300      	str	r3, [sp, #0]
    c2ca:	4658      	mov	r0, fp
    c2cc:	ab1b      	add	r3, sp, #108	; 0x6c
    c2ce:	eeb0 0b4a 	vmov.f64	d0, d10
    c2d2:	9202      	str	r2, [sp, #8]
    c2d4:	f000 fdc8 	bl	ce68 <_dtoa_r>
    c2d8:	2d47      	cmp	r5, #71	; 0x47
    c2da:	9a02      	ldr	r2, [sp, #8]
    c2dc:	4604      	mov	r4, r0
    c2de:	f000 8161 	beq.w	c5a4 <_svfprintf_r+0x17d4>
    c2e2:	2d46      	cmp	r5, #70	; 0x46
    c2e4:	4410      	add	r0, r2
    c2e6:	d105      	bne.n	c2f4 <_svfprintf_r+0x1524>
    c2e8:	7823      	ldrb	r3, [r4, #0]
    c2ea:	2b30      	cmp	r3, #48	; 0x30
    c2ec:	f000 826f 	beq.w	c7ce <_svfprintf_r+0x19fe>
    c2f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c2f2:	4410      	add	r0, r2
    c2f4:	eeb5 ab40 	vcmp.f64	d10, #0.0
    c2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c2fc:	f040 8146 	bne.w	c58c <_svfprintf_r+0x17bc>
    c300:	4603      	mov	r3, r0
    c302:	1b1b      	subs	r3, r3, r4
    c304:	930e      	str	r3, [sp, #56]	; 0x38
    c306:	2d47      	cmp	r5, #71	; 0x47
    c308:	f000 8110 	beq.w	c52c <_svfprintf_r+0x175c>
    c30c:	2d46      	cmp	r5, #70	; 0x46
    c30e:	f000 81b5 	beq.w	c67c <_svfprintf_r+0x18ac>
    c312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c314:	930c      	str	r3, [sp, #48]	; 0x30
    c316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c318:	2d41      	cmp	r5, #65	; 0x41
    c31a:	f103 33ff 	add.w	r3, r3, #4294967295
    c31e:	931b      	str	r3, [sp, #108]	; 0x6c
    c320:	f000 81e5 	beq.w	c6ee <_svfprintf_r+0x191e>
    c324:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    c328:	2100      	movs	r1, #0
    c32a:	2b00      	cmp	r3, #0
    c32c:	bfb8      	it	lt
    c32e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
    c330:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    c334:	bfba      	itte	lt
    c336:	f1c3 0301 	rsblt	r3, r3, #1
    c33a:	222d      	movlt	r2, #45	; 0x2d
    c33c:	222b      	movge	r2, #43	; 0x2b
    c33e:	2b09      	cmp	r3, #9
    c340:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
    c344:	f340 81da 	ble.w	c6fc <_svfprintf_r+0x192c>
    c348:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
    c34c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; c76c <_svfprintf_r+0x199c>
    c350:	462a      	mov	r2, r5
    c352:	4610      	mov	r0, r2
    c354:	fb8c 2103 	smull	r2, r1, ip, r3
    c358:	17da      	asrs	r2, r3, #31
    c35a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    c35e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    c362:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    c366:	3130      	adds	r1, #48	; 0x30
    c368:	f800 1c01 	strb.w	r1, [r0, #-1]
    c36c:	4619      	mov	r1, r3
    c36e:	2963      	cmp	r1, #99	; 0x63
    c370:	4613      	mov	r3, r2
    c372:	f100 32ff 	add.w	r2, r0, #4294967295
    c376:	dcec      	bgt.n	c352 <_svfprintf_r+0x1582>
    c378:	3330      	adds	r3, #48	; 0x30
    c37a:	b2d9      	uxtb	r1, r3
    c37c:	1e83      	subs	r3, r0, #2
    c37e:	429d      	cmp	r5, r3
    c380:	f802 1c01 	strb.w	r1, [r2, #-1]
    c384:	f240 828b 	bls.w	c89e <_svfprintf_r+0x1ace>
    c388:	4613      	mov	r3, r2
    c38a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    c38e:	e001      	b.n	c394 <_svfprintf_r+0x15c4>
    c390:	f813 1b01 	ldrb.w	r1, [r3], #1
    c394:	f802 1b01 	strb.w	r1, [r2], #1
    c398:	429d      	cmp	r5, r3
    c39a:	d1f9      	bne.n	c390 <_svfprintf_r+0x15c0>
    c39c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
    c3a0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    c3a4:	1a1b      	subs	r3, r3, r0
    c3a6:	4413      	add	r3, r2
    c3a8:	aa1e      	add	r2, sp, #120	; 0x78
    c3aa:	1a9b      	subs	r3, r3, r2
    c3ac:	9314      	str	r3, [sp, #80]	; 0x50
    c3ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c3b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c3b2:	2b01      	cmp	r3, #1
    c3b4:	441a      	add	r2, r3
    c3b6:	9205      	str	r2, [sp, #20]
    c3b8:	f340 8203 	ble.w	c7c2 <_svfprintf_r+0x19f2>
    c3bc:	9b05      	ldr	r3, [sp, #20]
    c3be:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c3c0:	4413      	add	r3, r2
    c3c2:	9305      	str	r3, [sp, #20]
    c3c4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
    c3c8:	9a05      	ldr	r2, [sp, #20]
    c3ca:	f443 7880 	orr.w	r8, r3, #256	; 0x100
    c3ce:	2300      	movs	r3, #0
    c3d0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    c3d4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    c3d8:	930f      	str	r3, [sp, #60]	; 0x3c
    c3da:	9202      	str	r2, [sp, #8]
    c3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3de:	2b00      	cmp	r3, #0
    c3e0:	f040 80b1 	bne.w	c546 <_svfprintf_r+0x1776>
    c3e4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    c3e8:	9303      	str	r3, [sp, #12]
    c3ea:	f7fe bed2 	b.w	b192 <_svfprintf_r+0x3c2>
    c3ee:	4620      	mov	r0, r4
    c3f0:	f7fd ff06 	bl	a200 <strlen>
    c3f4:	4602      	mov	r2, r0
    c3f6:	9005      	str	r0, [sp, #20]
    c3f8:	f7fe bf20 	b.w	b23c <_svfprintf_r+0x46c>
    c3fc:	ee1b 1a10 	vmov	r1, s22
    c400:	aa24      	add	r2, sp, #144	; 0x90
    c402:	4658      	mov	r0, fp
    c404:	f001 fbec 	bl	dbe0 <__ssprint_r>
    c408:	f7fe bded 	b.w	afe6 <_svfprintf_r+0x216>
    c40c:	1c59      	adds	r1, r3, #1
    c40e:	4658      	mov	r0, fp
    c410:	f7fc fb90 	bl	8b34 <_malloc_r>
    c414:	4604      	mov	r4, r0
    c416:	2800      	cmp	r0, #0
    c418:	f000 81ca 	beq.w	c7b0 <_svfprintf_r+0x19e0>
    c41c:	9007      	str	r0, [sp, #28]
    c41e:	e6e0      	b.n	c1e2 <_svfprintf_r+0x1412>
    c420:	ee1b 1a10 	vmov	r1, s22
    c424:	aa24      	add	r2, sp, #144	; 0x90
    c426:	4658      	mov	r0, fp
    c428:	f001 fbda 	bl	dbe0 <__ssprint_r>
    c42c:	2800      	cmp	r0, #0
    c42e:	f47f a934 	bne.w	b69a <_svfprintf_r+0x8ca>
    c432:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c434:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c438:	f7ff ba49 	b.w	b8ce <_svfprintf_r+0xafe>
    c43c:	ee1b 1a10 	vmov	r1, s22
    c440:	aa24      	add	r2, sp, #144	; 0x90
    c442:	4658      	mov	r0, fp
    c444:	f001 fbcc 	bl	dbe0 <__ssprint_r>
    c448:	2800      	cmp	r0, #0
    c44a:	f47f a926 	bne.w	b69a <_svfprintf_r+0x8ca>
    c44e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    c452:	991b      	ldr	r1, [sp, #108]	; 0x6c
    c454:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c458:	e649      	b.n	c0ee <_svfprintf_r+0x131e>
    c45a:	2306      	movs	r3, #6
    c45c:	9303      	str	r3, [sp, #12]
    c45e:	f7ff bb83 	b.w	bb68 <_svfprintf_r+0xd98>
    c462:	9b03      	ldr	r3, [sp, #12]
    c464:	2102      	movs	r1, #2
    c466:	1c5a      	adds	r2, r3, #1
    c468:	e72b      	b.n	c2c2 <_svfprintf_r+0x14f2>
    c46a:	9a03      	ldr	r2, [sp, #12]
    c46c:	2103      	movs	r1, #3
    c46e:	e728      	b.n	c2c2 <_svfprintf_r+0x14f2>
    c470:	a81b      	add	r0, sp, #108	; 0x6c
    c472:	eeb0 0b4a 	vmov.f64	d0, d10
    c476:	f000 fbcb 	bl	cc10 <frexp>
    c47a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    c47e:	ee20 0b07 	vmul.f64	d0, d0, d7
    c482:	eeb5 0b40 	vcmp.f64	d0, #0.0
    c486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c48a:	d101      	bne.n	c490 <_svfprintf_r+0x16c0>
    c48c:	2301      	movs	r3, #1
    c48e:	931b      	str	r3, [sp, #108]	; 0x6c
    c490:	48b3      	ldr	r0, [pc, #716]	; (c760 <_svfprintf_r+0x1990>)
    c492:	9b03      	ldr	r3, [sp, #12]
    c494:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
    c498:	3b01      	subs	r3, #1
    c49a:	4622      	mov	r2, r4
    c49c:	e004      	b.n	c4a8 <_svfprintf_r+0x16d8>
    c49e:	eeb5 0b40 	vcmp.f64	d0, #0.0
    c4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4a6:	d013      	beq.n	c4d0 <_svfprintf_r+0x1700>
    c4a8:	ee20 0b05 	vmul.f64	d0, d0, d5
    c4ac:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    c4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
    c4b4:	ee17 1a90 	vmov	r1, s15
    c4b8:	5c41      	ldrb	r1, [r0, r1]
    c4ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    c4be:	4694      	mov	ip, r2
    c4c0:	ee30 0b46 	vsub.f64	d0, d0, d6
    c4c4:	f802 1b01 	strb.w	r1, [r2], #1
    c4c8:	4619      	mov	r1, r3
    c4ca:	f103 33ff 	add.w	r3, r3, #4294967295
    c4ce:	d1e6      	bne.n	c49e <_svfprintf_r+0x16ce>
    c4d0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    c4d4:	eeb4 0bc6 	vcmpe.f64	d0, d6
    c4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4dc:	f300 8148 	bgt.w	c770 <_svfprintf_r+0x19a0>
    c4e0:	eeb4 0b46 	vcmp.f64	d0, d6
    c4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c4e8:	d104      	bne.n	c4f4 <_svfprintf_r+0x1724>
    c4ea:	ee17 3a90 	vmov	r3, s15
    c4ee:	07db      	lsls	r3, r3, #31
    c4f0:	f100 813e 	bmi.w	c770 <_svfprintf_r+0x19a0>
    c4f4:	2900      	cmp	r1, #0
    c4f6:	db06      	blt.n	c506 <_svfprintf_r+0x1736>
    c4f8:	1c4b      	adds	r3, r1, #1
    c4fa:	4413      	add	r3, r2
    c4fc:	2130      	movs	r1, #48	; 0x30
    c4fe:	f802 1b01 	strb.w	r1, [r2], #1
    c502:	4293      	cmp	r3, r2
    c504:	d1fb      	bne.n	c4fe <_svfprintf_r+0x172e>
    c506:	1b13      	subs	r3, r2, r4
    c508:	930e      	str	r3, [sp, #56]	; 0x38
    c50a:	e6fc      	b.n	c306 <_svfprintf_r+0x1536>
    c50c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    c50e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c510:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    c514:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    c518:	9613      	str	r6, [sp, #76]	; 0x4c
    c51a:	18e3      	adds	r3, r4, r3
    c51c:	429d      	cmp	r5, r3
    c51e:	4629      	mov	r1, r5
    c520:	bf28      	it	cs
    c522:	4619      	movcs	r1, r3
    c524:	4682      	mov	sl, r0
    c526:	9105      	str	r1, [sp, #20]
    c528:	f7ff b9d8 	b.w	b8dc <_svfprintf_r+0xb0c>
    c52c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c52e:	930c      	str	r3, [sp, #48]	; 0x30
    c530:	1cda      	adds	r2, r3, #3
    c532:	db02      	blt.n	c53a <_svfprintf_r+0x176a>
    c534:	9a03      	ldr	r2, [sp, #12]
    c536:	4293      	cmp	r3, r2
    c538:	dd0c      	ble.n	c554 <_svfprintf_r+0x1784>
    c53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c53c:	3b02      	subs	r3, #2
    c53e:	930b      	str	r3, [sp, #44]	; 0x2c
    c540:	f023 0520 	bic.w	r5, r3, #32
    c544:	e6e7      	b.n	c316 <_svfprintf_r+0x1546>
    c546:	212d      	movs	r1, #45	; 0x2d
    c548:	2300      	movs	r3, #0
    c54a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
    c54e:	9303      	str	r3, [sp, #12]
    c550:	f7fe be22 	b.w	b198 <_svfprintf_r+0x3c8>
    c554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c558:	4293      	cmp	r3, r2
    c55a:	f2c0 80bd 	blt.w	c6d8 <_svfprintf_r+0x1908>
    c55e:	07f0      	lsls	r0, r6, #31
    c560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c562:	f140 8132 	bpl.w	c7ca <_svfprintf_r+0x19fa>
    c566:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c568:	4413      	add	r3, r2
    c56a:	9305      	str	r3, [sp, #20]
    c56c:	0571      	lsls	r1, r6, #21
    c56e:	d503      	bpl.n	c578 <_svfprintf_r+0x17a8>
    c570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c572:	2b00      	cmp	r3, #0
    c574:	f300 8135 	bgt.w	c7e2 <_svfprintf_r+0x1a12>
    c578:	9b05      	ldr	r3, [sp, #20]
    c57a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c57e:	9302      	str	r3, [sp, #8]
    c580:	2367      	movs	r3, #103	; 0x67
    c582:	930b      	str	r3, [sp, #44]	; 0x2c
    c584:	2300      	movs	r3, #0
    c586:	930f      	str	r3, [sp, #60]	; 0x3c
    c588:	930d      	str	r3, [sp, #52]	; 0x34
    c58a:	e727      	b.n	c3dc <_svfprintf_r+0x160c>
    c58c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c58e:	4283      	cmp	r3, r0
    c590:	f4bf aeb7 	bcs.w	c302 <_svfprintf_r+0x1532>
    c594:	2130      	movs	r1, #48	; 0x30
    c596:	1c5a      	adds	r2, r3, #1
    c598:	9222      	str	r2, [sp, #136]	; 0x88
    c59a:	7019      	strb	r1, [r3, #0]
    c59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c59e:	4298      	cmp	r0, r3
    c5a0:	d8f9      	bhi.n	c596 <_svfprintf_r+0x17c6>
    c5a2:	e6ae      	b.n	c302 <_svfprintf_r+0x1532>
    c5a4:	07f3      	lsls	r3, r6, #31
    c5a6:	f100 80a7 	bmi.w	c6f8 <_svfprintf_r+0x1928>
    c5aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c5ac:	e6a9      	b.n	c302 <_svfprintf_r+0x1532>
    c5ae:	aa24      	add	r2, sp, #144	; 0x90
    c5b0:	4658      	mov	r0, fp
    c5b2:	9105      	str	r1, [sp, #20]
    c5b4:	f001 fb14 	bl	dbe0 <__ssprint_r>
    c5b8:	2800      	cmp	r0, #0
    c5ba:	f47f a86e 	bne.w	b69a <_svfprintf_r+0x8ca>
    c5be:	f896 c000 	ldrb.w	ip, [r6]
    c5c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c5c4:	9905      	ldr	r1, [sp, #20]
    c5c6:	a827      	add	r0, sp, #156	; 0x9c
    c5c8:	4465      	add	r5, ip
    c5ca:	f7ff bbec 	b.w	bda6 <_svfprintf_r+0xfd6>
    c5ce:	ee1b 1a10 	vmov	r1, s22
    c5d2:	aa24      	add	r2, sp, #144	; 0x90
    c5d4:	4658      	mov	r0, fp
    c5d6:	f001 fb03 	bl	dbe0 <__ssprint_r>
    c5da:	2800      	cmp	r0, #0
    c5dc:	f47f a85d 	bne.w	b69a <_svfprintf_r+0x8ca>
    c5e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c5e2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c5e6:	f7ff b96b 	b.w	b8c0 <_svfprintf_r+0xaf0>
    c5ea:	2378      	movs	r3, #120	; 0x78
    c5ec:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    c5f0:	2330      	movs	r3, #48	; 0x30
    c5f2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    c5f6:	9b03      	ldr	r3, [sp, #12]
    c5f8:	2b63      	cmp	r3, #99	; 0x63
    c5fa:	f048 0602 	orr.w	r6, r8, #2
    c5fe:	f300 80a6 	bgt.w	c74e <_svfprintf_r+0x197e>
    c602:	2300      	movs	r3, #0
    c604:	9307      	str	r3, [sp, #28]
    c606:	ac37      	add	r4, sp, #220	; 0xdc
    c608:	ee18 3a90 	vmov	r3, s17
    c60c:	2b00      	cmp	r3, #0
    c60e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
    c612:	db2b      	blt.n	c66c <_svfprintf_r+0x189c>
    c614:	eeb0 ab48 	vmov.f64	d10, d8
    c618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c61a:	f023 0520 	bic.w	r5, r3, #32
    c61e:	2300      	movs	r3, #0
    c620:	9309      	str	r3, [sp, #36]	; 0x24
    c622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c624:	2b61      	cmp	r3, #97	; 0x61
    c626:	f47f aaad 	bne.w	bb84 <_svfprintf_r+0xdb4>
    c62a:	eeb0 0b4a 	vmov.f64	d0, d10
    c62e:	a81b      	add	r0, sp, #108	; 0x6c
    c630:	f000 faee 	bl	cc10 <frexp>
    c634:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
    c638:	ee20 0b07 	vmul.f64	d0, d0, d7
    c63c:	eeb5 0b40 	vcmp.f64	d0, #0.0
    c640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c644:	d101      	bne.n	c64a <_svfprintf_r+0x187a>
    c646:	2301      	movs	r3, #1
    c648:	931b      	str	r3, [sp, #108]	; 0x6c
    c64a:	4846      	ldr	r0, [pc, #280]	; (c764 <_svfprintf_r+0x1994>)
    c64c:	e721      	b.n	c492 <_svfprintf_r+0x16c2>
    c64e:	ee1b 1a10 	vmov	r1, s22
    c652:	aa24      	add	r2, sp, #144	; 0x90
    c654:	4658      	mov	r0, fp
    c656:	f001 fac3 	bl	dbe0 <__ssprint_r>
    c65a:	2800      	cmp	r0, #0
    c65c:	f47f a81d 	bne.w	b69a <_svfprintf_r+0x8ca>
    c660:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    c662:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c664:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c668:	f7ff b94e 	b.w	b908 <_svfprintf_r+0xb38>
    c66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c66e:	f023 0520 	bic.w	r5, r3, #32
    c672:	232d      	movs	r3, #45	; 0x2d
    c674:	9309      	str	r3, [sp, #36]	; 0x24
    c676:	eeb1 ab48 	vneg.f64	d10, d8
    c67a:	e7d2      	b.n	c622 <_svfprintf_r+0x1852>
    c67c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    c67e:	920c      	str	r2, [sp, #48]	; 0x30
    c680:	2a00      	cmp	r2, #0
    c682:	f006 0301 	and.w	r3, r6, #1
    c686:	f340 810d 	ble.w	c8a4 <_svfprintf_r+0x1ad4>
    c68a:	9903      	ldr	r1, [sp, #12]
    c68c:	430b      	orrs	r3, r1
    c68e:	f040 80cf 	bne.w	c830 <_svfprintf_r+0x1a60>
    c692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c694:	9305      	str	r3, [sp, #20]
    c696:	2366      	movs	r3, #102	; 0x66
    c698:	930b      	str	r3, [sp, #44]	; 0x2c
    c69a:	0572      	lsls	r2, r6, #21
    c69c:	f100 80a3 	bmi.w	c7e6 <_svfprintf_r+0x1a16>
    c6a0:	9b05      	ldr	r3, [sp, #20]
    c6a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c6a6:	9302      	str	r3, [sp, #8]
    c6a8:	e76c      	b.n	c584 <_svfprintf_r+0x17b4>
    c6aa:	ee1b 1a10 	vmov	r1, s22
    c6ae:	aa24      	add	r2, sp, #144	; 0x90
    c6b0:	4658      	mov	r0, fp
    c6b2:	f001 fa95 	bl	dbe0 <__ssprint_r>
    c6b6:	2800      	cmp	r0, #0
    c6b8:	f47e afef 	bne.w	b69a <_svfprintf_r+0x8ca>
    c6bc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    c6be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c6c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
    c6c2:	1b1c      	subs	r4, r3, r4
    c6c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c6c8:	f7ff b936 	b.w	b938 <_svfprintf_r+0xb68>
    c6cc:	2358      	movs	r3, #88	; 0x58
    c6ce:	e78d      	b.n	c5ec <_svfprintf_r+0x181c>
    c6d0:	2200      	movs	r2, #0
    c6d2:	9203      	str	r2, [sp, #12]
    c6d4:	f7fe bbda 	b.w	ae8c <_svfprintf_r+0xbc>
    c6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c6da:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c6dc:	189a      	adds	r2, r3, r2
    c6de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c6e0:	9205      	str	r2, [sp, #20]
    c6e2:	2b00      	cmp	r3, #0
    c6e4:	f340 80ab 	ble.w	c83e <_svfprintf_r+0x1a6e>
    c6e8:	2367      	movs	r3, #103	; 0x67
    c6ea:	930b      	str	r3, [sp, #44]	; 0x2c
    c6ec:	e7d5      	b.n	c69a <_svfprintf_r+0x18ca>
    c6ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c6f0:	320f      	adds	r2, #15
    c6f2:	b2d2      	uxtb	r2, r2
    c6f4:	2101      	movs	r1, #1
    c6f6:	e618      	b.n	c32a <_svfprintf_r+0x155a>
    c6f8:	18a0      	adds	r0, r4, r2
    c6fa:	e5fb      	b.n	c2f4 <_svfprintf_r+0x1524>
    c6fc:	2900      	cmp	r1, #0
    c6fe:	f040 80a8 	bne.w	c852 <_svfprintf_r+0x1a82>
    c702:	2230      	movs	r2, #48	; 0x30
    c704:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
    c708:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
    c70c:	3330      	adds	r3, #48	; 0x30
    c70e:	f802 3b01 	strb.w	r3, [r2], #1
    c712:	ab1e      	add	r3, sp, #120	; 0x78
    c714:	1ad3      	subs	r3, r2, r3
    c716:	9314      	str	r3, [sp, #80]	; 0x50
    c718:	e649      	b.n	c3ae <_svfprintf_r+0x15de>
    c71a:	3301      	adds	r3, #1
    c71c:	4912      	ldr	r1, [pc, #72]	; (c768 <_svfprintf_r+0x1998>)
    c71e:	f8ca 5004 	str.w	r5, [sl, #4]
    c722:	442a      	add	r2, r5
    c724:	2b07      	cmp	r3, #7
    c726:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
    c72a:	f8ca 1000 	str.w	r1, [sl]
    c72e:	f77f ac33 	ble.w	bf98 <_svfprintf_r+0x11c8>
    c732:	ee1b 1a10 	vmov	r1, s22
    c736:	aa24      	add	r2, sp, #144	; 0x90
    c738:	4658      	mov	r0, fp
    c73a:	f001 fa51 	bl	dbe0 <__ssprint_r>
    c73e:	2800      	cmp	r0, #0
    c740:	f47e afab 	bne.w	b69a <_svfprintf_r+0x8ca>
    c744:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
    c748:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
    c74c:	e426      	b.n	bf9c <_svfprintf_r+0x11cc>
    c74e:	1c59      	adds	r1, r3, #1
    c750:	4658      	mov	r0, fp
    c752:	f7fc f9ef 	bl	8b34 <_malloc_r>
    c756:	4604      	mov	r4, r0
    c758:	b350      	cbz	r0, c7b0 <_svfprintf_r+0x19e0>
    c75a:	9007      	str	r0, [sp, #28]
    c75c:	e754      	b.n	c608 <_svfprintf_r+0x1838>
    c75e:	bf00      	nop
    c760:	20000b00 	.word	0x20000b00
    c764:	20000aec 	.word	0x20000aec
    c768:	20001064 	.word	0x20001064
    c76c:	66666667 	.word	0x66666667
    c770:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    c774:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    c778:	f890 c00f 	ldrb.w	ip, [r0, #15]
    c77c:	4561      	cmp	r1, ip
    c77e:	4613      	mov	r3, r2
    c780:	d10a      	bne.n	c798 <_svfprintf_r+0x19c8>
    c782:	f04f 0e30 	mov.w	lr, #48	; 0x30
    c786:	f803 ec01 	strb.w	lr, [r3, #-1]
    c78a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c78c:	1e59      	subs	r1, r3, #1
    c78e:	9122      	str	r1, [sp, #136]	; 0x88
    c790:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    c794:	458c      	cmp	ip, r1
    c796:	d0f6      	beq.n	c786 <_svfprintf_r+0x19b6>
    c798:	2939      	cmp	r1, #57	; 0x39
    c79a:	bf16      	itet	ne
    c79c:	3101      	addne	r1, #1
    c79e:	7a81      	ldrbeq	r1, [r0, #10]
    c7a0:	b2c9      	uxtbne	r1, r1
    c7a2:	f803 1c01 	strb.w	r1, [r3, #-1]
    c7a6:	e6ae      	b.n	c506 <_svfprintf_r+0x1736>
    c7a8:	2300      	movs	r3, #0
    c7aa:	4690      	mov	r8, r2
    c7ac:	9307      	str	r3, [sp, #28]
    c7ae:	e760      	b.n	c672 <_svfprintf_r+0x18a2>
    c7b0:	ee1b 2a10 	vmov	r2, s22
    c7b4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    c7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c7bc:	8193      	strh	r3, [r2, #12]
    c7be:	f7fe bc16 	b.w	afee <_svfprintf_r+0x21e>
    c7c2:	07f5      	lsls	r5, r6, #31
    c7c4:	f57f adfe 	bpl.w	c3c4 <_svfprintf_r+0x15f4>
    c7c8:	e5f8      	b.n	c3bc <_svfprintf_r+0x15ec>
    c7ca:	9305      	str	r3, [sp, #20]
    c7cc:	e6ce      	b.n	c56c <_svfprintf_r+0x179c>
    c7ce:	eeb5 ab40 	vcmp.f64	d10, #0.0
    c7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c7d6:	f43f ad8b 	beq.w	c2f0 <_svfprintf_r+0x1520>
    c7da:	f1c2 0201 	rsb	r2, r2, #1
    c7de:	921b      	str	r2, [sp, #108]	; 0x6c
    c7e0:	e587      	b.n	c2f2 <_svfprintf_r+0x1522>
    c7e2:	2367      	movs	r3, #103	; 0x67
    c7e4:	930b      	str	r3, [sp, #44]	; 0x2c
    c7e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c7e8:	780b      	ldrb	r3, [r1, #0]
    c7ea:	2bff      	cmp	r3, #255	; 0xff
    c7ec:	d079      	beq.n	c8e2 <_svfprintf_r+0x1b12>
    c7ee:	2500      	movs	r5, #0
    c7f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7f2:	4628      	mov	r0, r5
    c7f4:	e003      	b.n	c7fe <_svfprintf_r+0x1a2e>
    c7f6:	3001      	adds	r0, #1
    c7f8:	3101      	adds	r1, #1
    c7fa:	2bff      	cmp	r3, #255	; 0xff
    c7fc:	d008      	beq.n	c810 <_svfprintf_r+0x1a40>
    c7fe:	4293      	cmp	r3, r2
    c800:	da06      	bge.n	c810 <_svfprintf_r+0x1a40>
    c802:	1ad2      	subs	r2, r2, r3
    c804:	784b      	ldrb	r3, [r1, #1]
    c806:	2b00      	cmp	r3, #0
    c808:	d1f5      	bne.n	c7f6 <_svfprintf_r+0x1a26>
    c80a:	780b      	ldrb	r3, [r1, #0]
    c80c:	3501      	adds	r5, #1
    c80e:	e7f4      	b.n	c7fa <_svfprintf_r+0x1a2a>
    c810:	920c      	str	r2, [sp, #48]	; 0x30
    c812:	9113      	str	r1, [sp, #76]	; 0x4c
    c814:	900d      	str	r0, [sp, #52]	; 0x34
    c816:	950f      	str	r5, [sp, #60]	; 0x3c
    c818:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c81c:	9916      	ldr	r1, [sp, #88]	; 0x58
    c81e:	4413      	add	r3, r2
    c820:	9a05      	ldr	r2, [sp, #20]
    c822:	fb01 2303 	mla	r3, r1, r3, r2
    c826:	9305      	str	r3, [sp, #20]
    c828:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c82c:	9302      	str	r3, [sp, #8]
    c82e:	e5d5      	b.n	c3dc <_svfprintf_r+0x160c>
    c830:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c832:	18d3      	adds	r3, r2, r3
    c834:	4419      	add	r1, r3
    c836:	2366      	movs	r3, #102	; 0x66
    c838:	9105      	str	r1, [sp, #20]
    c83a:	930b      	str	r3, [sp, #44]	; 0x2c
    c83c:	e72d      	b.n	c69a <_svfprintf_r+0x18ca>
    c83e:	f1c3 0301 	rsb	r3, r3, #1
    c842:	441a      	add	r2, r3
    c844:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    c848:	9302      	str	r3, [sp, #8]
    c84a:	2367      	movs	r3, #103	; 0x67
    c84c:	9205      	str	r2, [sp, #20]
    c84e:	930b      	str	r3, [sp, #44]	; 0x2c
    c850:	e698      	b.n	c584 <_svfprintf_r+0x17b4>
    c852:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
    c856:	e759      	b.n	c70c <_svfprintf_r+0x193c>
    c858:	9b03      	ldr	r3, [sp, #12]
    c85a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    c85e:	f8dd 801c 	ldr.w	r8, [sp, #28]
    c862:	9305      	str	r3, [sp, #20]
    c864:	e4b4      	b.n	c1d0 <_svfprintf_r+0x1400>
    c866:	ee18 3a90 	vmov	r3, s17
    c86a:	2b00      	cmp	r3, #0
    c86c:	bfb4      	ite	lt
    c86e:	212d      	movlt	r1, #45	; 0x2d
    c870:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
    c874:	4c25      	ldr	r4, [pc, #148]	; (c90c <_svfprintf_r+0x1b3c>)
    c876:	4b26      	ldr	r3, [pc, #152]	; (c910 <_svfprintf_r+0x1b40>)
    c878:	bfb8      	it	lt
    c87a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
    c87e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
    c882:	f7fe bc79 	b.w	b178 <_svfprintf_r+0x3a8>
    c886:	9b03      	ldr	r3, [sp, #12]
    c888:	9302      	str	r3, [sp, #8]
    c88a:	9305      	str	r3, [sp, #20]
    c88c:	2373      	movs	r3, #115	; 0x73
    c88e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
    c892:	9003      	str	r0, [sp, #12]
    c894:	900f      	str	r0, [sp, #60]	; 0x3c
    c896:	900d      	str	r0, [sp, #52]	; 0x34
    c898:	930b      	str	r3, [sp, #44]	; 0x2c
    c89a:	f7fe bc7a 	b.w	b192 <_svfprintf_r+0x3c2>
    c89e:	2302      	movs	r3, #2
    c8a0:	9314      	str	r3, [sp, #80]	; 0x50
    c8a2:	e584      	b.n	c3ae <_svfprintf_r+0x15de>
    c8a4:	9a03      	ldr	r2, [sp, #12]
    c8a6:	4313      	orrs	r3, r2
    c8a8:	d105      	bne.n	c8b6 <_svfprintf_r+0x1ae6>
    c8aa:	2301      	movs	r3, #1
    c8ac:	2266      	movs	r2, #102	; 0x66
    c8ae:	9302      	str	r3, [sp, #8]
    c8b0:	920b      	str	r2, [sp, #44]	; 0x2c
    c8b2:	9305      	str	r3, [sp, #20]
    c8b4:	e666      	b.n	c584 <_svfprintf_r+0x17b4>
    c8b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8b8:	3301      	adds	r3, #1
    c8ba:	441a      	add	r2, r3
    c8bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    c8c0:	9302      	str	r3, [sp, #8]
    c8c2:	2366      	movs	r3, #102	; 0x66
    c8c4:	9205      	str	r2, [sp, #20]
    c8c6:	930b      	str	r3, [sp, #44]	; 0x2c
    c8c8:	e65c      	b.n	c584 <_svfprintf_r+0x17b4>
    c8ca:	9a08      	ldr	r2, [sp, #32]
    c8cc:	f899 3001 	ldrb.w	r3, [r9, #1]
    c8d0:	4689      	mov	r9, r1
    c8d2:	f852 1b04 	ldr.w	r1, [r2], #4
    c8d6:	9208      	str	r2, [sp, #32]
    c8d8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    c8dc:	9103      	str	r1, [sp, #12]
    c8de:	f7fe bad3 	b.w	ae88 <_svfprintf_r+0xb8>
    c8e2:	2300      	movs	r3, #0
    c8e4:	930f      	str	r3, [sp, #60]	; 0x3c
    c8e6:	930d      	str	r3, [sp, #52]	; 0x34
    c8e8:	e796      	b.n	c818 <_svfprintf_r+0x1a48>
    c8ea:	230c      	movs	r3, #12
    c8ec:	f8cb 3000 	str.w	r3, [fp]
    c8f0:	f04f 33ff 	mov.w	r3, #4294967295
    c8f4:	9304      	str	r3, [sp, #16]
    c8f6:	f7fe bb81 	b.w	affc <_svfprintf_r+0x22c>
    c8fa:	ee1b 2a10 	vmov	r2, s22
    c8fe:	8993      	ldrh	r3, [r2, #12]
    c900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c904:	8193      	strh	r3, [r2, #12]
    c906:	f7fe bec8 	b.w	b69a <_svfprintf_r+0x8ca>
    c90a:	bf00      	nop
    c90c:	20000ae4 	.word	0x20000ae4
    c910:	20000ae8 	.word	0x20000ae8

0000c914 <_fclose_r>:
    c914:	b570      	push	{r4, r5, r6, lr}
    c916:	2900      	cmp	r1, #0
    c918:	d04b      	beq.n	c9b2 <_fclose_r+0x9e>
    c91a:	4606      	mov	r6, r0
    c91c:	460c      	mov	r4, r1
    c91e:	b110      	cbz	r0, c926 <_fclose_r+0x12>
    c920:	6b43      	ldr	r3, [r0, #52]	; 0x34
    c922:	2b00      	cmp	r3, #0
    c924:	d048      	beq.n	c9b8 <_fclose_r+0xa4>
    c926:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c928:	07d8      	lsls	r0, r3, #31
    c92a:	d534      	bpl.n	c996 <_fclose_r+0x82>
    c92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c930:	2b00      	cmp	r3, #0
    c932:	d03e      	beq.n	c9b2 <_fclose_r+0x9e>
    c934:	4621      	mov	r1, r4
    c936:	4630      	mov	r0, r6
    c938:	f000 f850 	bl	c9dc <__sflush_r>
    c93c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c93e:	4605      	mov	r5, r0
    c940:	b133      	cbz	r3, c950 <_fclose_r+0x3c>
    c942:	69e1      	ldr	r1, [r4, #28]
    c944:	4630      	mov	r0, r6
    c946:	4798      	blx	r3
    c948:	2800      	cmp	r0, #0
    c94a:	bfb8      	it	lt
    c94c:	f04f 35ff 	movlt.w	r5, #4294967295
    c950:	89a3      	ldrh	r3, [r4, #12]
    c952:	061a      	lsls	r2, r3, #24
    c954:	d43c      	bmi.n	c9d0 <_fclose_r+0xbc>
    c956:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c958:	b141      	cbz	r1, c96c <_fclose_r+0x58>
    c95a:	f104 0340 	add.w	r3, r4, #64	; 0x40
    c95e:	4299      	cmp	r1, r3
    c960:	d002      	beq.n	c968 <_fclose_r+0x54>
    c962:	4630      	mov	r0, r6
    c964:	f7fd fd4e 	bl	a404 <_free_r>
    c968:	2300      	movs	r3, #0
    c96a:	6323      	str	r3, [r4, #48]	; 0x30
    c96c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    c96e:	b121      	cbz	r1, c97a <_fclose_r+0x66>
    c970:	4630      	mov	r0, r6
    c972:	f7fd fd47 	bl	a404 <_free_r>
    c976:	2300      	movs	r3, #0
    c978:	6463      	str	r3, [r4, #68]	; 0x44
    c97a:	f7fc ffc1 	bl	9900 <__sfp_lock_acquire>
    c97e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    c980:	2200      	movs	r2, #0
    c982:	07db      	lsls	r3, r3, #31
    c984:	81a2      	strh	r2, [r4, #12]
    c986:	d51f      	bpl.n	c9c8 <_fclose_r+0xb4>
    c988:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c98a:	f7fd fa4d 	bl	9e28 <__retarget_lock_close_recursive>
    c98e:	f7fc ffbd 	bl	990c <__sfp_lock_release>
    c992:	4628      	mov	r0, r5
    c994:	bd70      	pop	{r4, r5, r6, pc}
    c996:	89a3      	ldrh	r3, [r4, #12]
    c998:	0599      	lsls	r1, r3, #22
    c99a:	d4cb      	bmi.n	c934 <_fclose_r+0x20>
    c99c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c99e:	f7fd fa45 	bl	9e2c <__retarget_lock_acquire_recursive>
    c9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	d1c4      	bne.n	c934 <_fclose_r+0x20>
    c9aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
    c9ac:	f015 0501 	ands.w	r5, r5, #1
    c9b0:	d005      	beq.n	c9be <_fclose_r+0xaa>
    c9b2:	2500      	movs	r5, #0
    c9b4:	4628      	mov	r0, r5
    c9b6:	bd70      	pop	{r4, r5, r6, pc}
    c9b8:	f7fc ff84 	bl	98c4 <__sinit>
    c9bc:	e7b3      	b.n	c926 <_fclose_r+0x12>
    c9be:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c9c0:	f7fd fa36 	bl	9e30 <__retarget_lock_release_recursive>
    c9c4:	4628      	mov	r0, r5
    c9c6:	bd70      	pop	{r4, r5, r6, pc}
    c9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    c9ca:	f7fd fa31 	bl	9e30 <__retarget_lock_release_recursive>
    c9ce:	e7db      	b.n	c988 <_fclose_r+0x74>
    c9d0:	6921      	ldr	r1, [r4, #16]
    c9d2:	4630      	mov	r0, r6
    c9d4:	f7fd fd16 	bl	a404 <_free_r>
    c9d8:	e7bd      	b.n	c956 <_fclose_r+0x42>
    c9da:	bf00      	nop

0000c9dc <__sflush_r>:
    c9dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    c9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9e4:	460c      	mov	r4, r1
    c9e6:	0711      	lsls	r1, r2, #28
    c9e8:	4680      	mov	r8, r0
    c9ea:	d447      	bmi.n	ca7c <__sflush_r+0xa0>
    c9ec:	6863      	ldr	r3, [r4, #4]
    c9ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	81a2      	strh	r2, [r4, #12]
    c9f6:	dd5e      	ble.n	cab6 <__sflush_r+0xda>
    c9f8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    c9fa:	2d00      	cmp	r5, #0
    c9fc:	d058      	beq.n	cab0 <__sflush_r+0xd4>
    c9fe:	2300      	movs	r3, #0
    ca00:	f8d8 6000 	ldr.w	r6, [r8]
    ca04:	f8c8 3000 	str.w	r3, [r8]
    ca08:	b293      	uxth	r3, r2
    ca0a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    ca0e:	d156      	bne.n	cabe <__sflush_r+0xe2>
    ca10:	2301      	movs	r3, #1
    ca12:	69e1      	ldr	r1, [r4, #28]
    ca14:	4640      	mov	r0, r8
    ca16:	47a8      	blx	r5
    ca18:	1c43      	adds	r3, r0, #1
    ca1a:	d067      	beq.n	caec <__sflush_r+0x110>
    ca1c:	89a3      	ldrh	r3, [r4, #12]
    ca1e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    ca20:	075f      	lsls	r7, r3, #29
    ca22:	d505      	bpl.n	ca30 <__sflush_r+0x54>
    ca24:	6863      	ldr	r3, [r4, #4]
    ca26:	1ac0      	subs	r0, r0, r3
    ca28:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ca2a:	b10b      	cbz	r3, ca30 <__sflush_r+0x54>
    ca2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ca2e:	1ac0      	subs	r0, r0, r3
    ca30:	69e1      	ldr	r1, [r4, #28]
    ca32:	4602      	mov	r2, r0
    ca34:	2300      	movs	r3, #0
    ca36:	4640      	mov	r0, r8
    ca38:	47a8      	blx	r5
    ca3a:	1c41      	adds	r1, r0, #1
    ca3c:	d141      	bne.n	cac2 <__sflush_r+0xe6>
    ca3e:	f8d8 3000 	ldr.w	r3, [r8]
    ca42:	2b00      	cmp	r3, #0
    ca44:	d03d      	beq.n	cac2 <__sflush_r+0xe6>
    ca46:	2b1d      	cmp	r3, #29
    ca48:	d001      	beq.n	ca4e <__sflush_r+0x72>
    ca4a:	2b16      	cmp	r3, #22
    ca4c:	d156      	bne.n	cafc <__sflush_r+0x120>
    ca4e:	89a3      	ldrh	r3, [r4, #12]
    ca50:	6922      	ldr	r2, [r4, #16]
    ca52:	6022      	str	r2, [r4, #0]
    ca54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    ca58:	2100      	movs	r1, #0
    ca5a:	6061      	str	r1, [r4, #4]
    ca5c:	81a3      	strh	r3, [r4, #12]
    ca5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ca60:	f8c8 6000 	str.w	r6, [r8]
    ca64:	b321      	cbz	r1, cab0 <__sflush_r+0xd4>
    ca66:	f104 0340 	add.w	r3, r4, #64	; 0x40
    ca6a:	4299      	cmp	r1, r3
    ca6c:	d002      	beq.n	ca74 <__sflush_r+0x98>
    ca6e:	4640      	mov	r0, r8
    ca70:	f7fd fcc8 	bl	a404 <_free_r>
    ca74:	2000      	movs	r0, #0
    ca76:	6320      	str	r0, [r4, #48]	; 0x30
    ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca7c:	6926      	ldr	r6, [r4, #16]
    ca7e:	b1be      	cbz	r6, cab0 <__sflush_r+0xd4>
    ca80:	b293      	uxth	r3, r2
    ca82:	6825      	ldr	r5, [r4, #0]
    ca84:	6026      	str	r6, [r4, #0]
    ca86:	079a      	lsls	r2, r3, #30
    ca88:	bf0c      	ite	eq
    ca8a:	6963      	ldreq	r3, [r4, #20]
    ca8c:	2300      	movne	r3, #0
    ca8e:	1bad      	subs	r5, r5, r6
    ca90:	60a3      	str	r3, [r4, #8]
    ca92:	e00b      	b.n	caac <__sflush_r+0xd0>
    ca94:	462b      	mov	r3, r5
    ca96:	4632      	mov	r2, r6
    ca98:	69e1      	ldr	r1, [r4, #28]
    ca9a:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ca9c:	4640      	mov	r0, r8
    ca9e:	47b8      	blx	r7
    caa0:	f1b0 0c00 	subs.w	ip, r0, #0
    caa4:	eba5 050c 	sub.w	r5, r5, ip
    caa8:	4466      	add	r6, ip
    caaa:	dd17      	ble.n	cadc <__sflush_r+0x100>
    caac:	2d00      	cmp	r5, #0
    caae:	dcf1      	bgt.n	ca94 <__sflush_r+0xb8>
    cab0:	2000      	movs	r0, #0
    cab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cab6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    cab8:	2b00      	cmp	r3, #0
    caba:	dc9d      	bgt.n	c9f8 <__sflush_r+0x1c>
    cabc:	e7f8      	b.n	cab0 <__sflush_r+0xd4>
    cabe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    cac0:	e7ae      	b.n	ca20 <__sflush_r+0x44>
    cac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    cac6:	6922      	ldr	r2, [r4, #16]
    cac8:	6022      	str	r2, [r4, #0]
    caca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    cace:	81a3      	strh	r3, [r4, #12]
    cad0:	2200      	movs	r2, #0
    cad2:	04db      	lsls	r3, r3, #19
    cad4:	6062      	str	r2, [r4, #4]
    cad6:	d5c2      	bpl.n	ca5e <__sflush_r+0x82>
    cad8:	6520      	str	r0, [r4, #80]	; 0x50
    cada:	e7c0      	b.n	ca5e <__sflush_r+0x82>
    cadc:	89a3      	ldrh	r3, [r4, #12]
    cade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cae2:	f04f 30ff 	mov.w	r0, #4294967295
    cae6:	81a3      	strh	r3, [r4, #12]
    cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    caec:	f8d8 3000 	ldr.w	r3, [r8]
    caf0:	2b00      	cmp	r3, #0
    caf2:	d093      	beq.n	ca1c <__sflush_r+0x40>
    caf4:	2b1d      	cmp	r3, #29
    caf6:	d006      	beq.n	cb06 <__sflush_r+0x12a>
    caf8:	2b16      	cmp	r3, #22
    cafa:	d004      	beq.n	cb06 <__sflush_r+0x12a>
    cafc:	89a3      	ldrh	r3, [r4, #12]
    cafe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cb02:	81a3      	strh	r3, [r4, #12]
    cb04:	e7d5      	b.n	cab2 <__sflush_r+0xd6>
    cb06:	f8c8 6000 	str.w	r6, [r8]
    cb0a:	e7d1      	b.n	cab0 <__sflush_r+0xd4>

0000cb0c <_fflush_r>:
    cb0c:	b538      	push	{r3, r4, r5, lr}
    cb0e:	460c      	mov	r4, r1
    cb10:	4605      	mov	r5, r0
    cb12:	b108      	cbz	r0, cb18 <_fflush_r+0xc>
    cb14:	6b43      	ldr	r3, [r0, #52]	; 0x34
    cb16:	b303      	cbz	r3, cb5a <_fflush_r+0x4e>
    cb18:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    cb1c:	b188      	cbz	r0, cb42 <_fflush_r+0x36>
    cb1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    cb20:	07db      	lsls	r3, r3, #31
    cb22:	d401      	bmi.n	cb28 <_fflush_r+0x1c>
    cb24:	0581      	lsls	r1, r0, #22
    cb26:	d50f      	bpl.n	cb48 <_fflush_r+0x3c>
    cb28:	4628      	mov	r0, r5
    cb2a:	4621      	mov	r1, r4
    cb2c:	f7ff ff56 	bl	c9dc <__sflush_r>
    cb30:	6e63      	ldr	r3, [r4, #100]	; 0x64
    cb32:	07da      	lsls	r2, r3, #31
    cb34:	4605      	mov	r5, r0
    cb36:	d402      	bmi.n	cb3e <_fflush_r+0x32>
    cb38:	89a3      	ldrh	r3, [r4, #12]
    cb3a:	059b      	lsls	r3, r3, #22
    cb3c:	d508      	bpl.n	cb50 <_fflush_r+0x44>
    cb3e:	4628      	mov	r0, r5
    cb40:	bd38      	pop	{r3, r4, r5, pc}
    cb42:	4605      	mov	r5, r0
    cb44:	4628      	mov	r0, r5
    cb46:	bd38      	pop	{r3, r4, r5, pc}
    cb48:	6da0      	ldr	r0, [r4, #88]	; 0x58
    cb4a:	f7fd f96f 	bl	9e2c <__retarget_lock_acquire_recursive>
    cb4e:	e7eb      	b.n	cb28 <_fflush_r+0x1c>
    cb50:	6da0      	ldr	r0, [r4, #88]	; 0x58
    cb52:	f7fd f96d 	bl	9e30 <__retarget_lock_release_recursive>
    cb56:	4628      	mov	r0, r5
    cb58:	bd38      	pop	{r3, r4, r5, pc}
    cb5a:	f7fc feb3 	bl	98c4 <__sinit>
    cb5e:	e7db      	b.n	cb18 <_fflush_r+0xc>

0000cb60 <_localeconv_r>:
    cb60:	4800      	ldr	r0, [pc, #0]	; (cb64 <_localeconv_r+0x4>)
    cb62:	4770      	bx	lr
    cb64:	200042bc 	.word	0x200042bc
	...

0000cb70 <memchr>:
    cb70:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cb74:	2a10      	cmp	r2, #16
    cb76:	db2b      	blt.n	cbd0 <memchr+0x60>
    cb78:	f010 0f07 	tst.w	r0, #7
    cb7c:	d008      	beq.n	cb90 <memchr+0x20>
    cb7e:	f810 3b01 	ldrb.w	r3, [r0], #1
    cb82:	3a01      	subs	r2, #1
    cb84:	428b      	cmp	r3, r1
    cb86:	d02d      	beq.n	cbe4 <memchr+0x74>
    cb88:	f010 0f07 	tst.w	r0, #7
    cb8c:	b342      	cbz	r2, cbe0 <memchr+0x70>
    cb8e:	d1f6      	bne.n	cb7e <memchr+0xe>
    cb90:	b4f0      	push	{r4, r5, r6, r7}
    cb92:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    cb96:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    cb9a:	f022 0407 	bic.w	r4, r2, #7
    cb9e:	f07f 0700 	mvns.w	r7, #0
    cba2:	2300      	movs	r3, #0
    cba4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    cba8:	3c08      	subs	r4, #8
    cbaa:	ea85 0501 	eor.w	r5, r5, r1
    cbae:	ea86 0601 	eor.w	r6, r6, r1
    cbb2:	fa85 f547 	uadd8	r5, r5, r7
    cbb6:	faa3 f587 	sel	r5, r3, r7
    cbba:	fa86 f647 	uadd8	r6, r6, r7
    cbbe:	faa5 f687 	sel	r6, r5, r7
    cbc2:	b98e      	cbnz	r6, cbe8 <memchr+0x78>
    cbc4:	d1ee      	bne.n	cba4 <memchr+0x34>
    cbc6:	bcf0      	pop	{r4, r5, r6, r7}
    cbc8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cbcc:	f002 0207 	and.w	r2, r2, #7
    cbd0:	b132      	cbz	r2, cbe0 <memchr+0x70>
    cbd2:	f810 3b01 	ldrb.w	r3, [r0], #1
    cbd6:	3a01      	subs	r2, #1
    cbd8:	ea83 0301 	eor.w	r3, r3, r1
    cbdc:	b113      	cbz	r3, cbe4 <memchr+0x74>
    cbde:	d1f8      	bne.n	cbd2 <memchr+0x62>
    cbe0:	2000      	movs	r0, #0
    cbe2:	4770      	bx	lr
    cbe4:	3801      	subs	r0, #1
    cbe6:	4770      	bx	lr
    cbe8:	2d00      	cmp	r5, #0
    cbea:	bf06      	itte	eq
    cbec:	4635      	moveq	r5, r6
    cbee:	3803      	subeq	r0, #3
    cbf0:	3807      	subne	r0, #7
    cbf2:	f015 0f01 	tst.w	r5, #1
    cbf6:	d107      	bne.n	cc08 <memchr+0x98>
    cbf8:	3001      	adds	r0, #1
    cbfa:	f415 7f80 	tst.w	r5, #256	; 0x100
    cbfe:	bf02      	ittt	eq
    cc00:	3001      	addeq	r0, #1
    cc02:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    cc06:	3001      	addeq	r0, #1
    cc08:	bcf0      	pop	{r4, r5, r6, r7}
    cc0a:	3801      	subs	r0, #1
    cc0c:	4770      	bx	lr
    cc0e:	bf00      	nop

0000cc10 <frexp>:
    cc10:	b430      	push	{r4, r5}
    cc12:	b082      	sub	sp, #8
    cc14:	ed8d 0b00 	vstr	d0, [sp]
    cc18:	9a01      	ldr	r2, [sp, #4]
    cc1a:	4c19      	ldr	r4, [pc, #100]	; (cc80 <frexp+0x70>)
    cc1c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    cc20:	2100      	movs	r1, #0
    cc22:	42a3      	cmp	r3, r4
    cc24:	6001      	str	r1, [r0, #0]
    cc26:	dc21      	bgt.n	cc6c <frexp+0x5c>
    cc28:	9c00      	ldr	r4, [sp, #0]
    cc2a:	431c      	orrs	r4, r3
    cc2c:	d01e      	beq.n	cc6c <frexp+0x5c>
    cc2e:	4c15      	ldr	r4, [pc, #84]	; (cc84 <frexp+0x74>)
    cc30:	4014      	ands	r4, r2
    cc32:	b954      	cbnz	r4, cc4a <frexp+0x3a>
    cc34:	ed9f 7b10 	vldr	d7, [pc, #64]	; cc78 <frexp+0x68>
    cc38:	ee20 7b07 	vmul.f64	d7, d0, d7
    cc3c:	ed8d 7b00 	vstr	d7, [sp]
    cc40:	9a01      	ldr	r2, [sp, #4]
    cc42:	f06f 0135 	mvn.w	r1, #53	; 0x35
    cc46:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
    cc4a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    cc4e:	e9dd 4500 	ldrd	r4, r5, [sp]
    cc52:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    cc56:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    cc5a:	151b      	asrs	r3, r3, #20
    cc5c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    cc60:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    cc64:	e9cd 4500 	strd	r4, r5, [sp]
    cc68:	440b      	add	r3, r1
    cc6a:	6003      	str	r3, [r0, #0]
    cc6c:	ed9d 0b00 	vldr	d0, [sp]
    cc70:	b002      	add	sp, #8
    cc72:	bc30      	pop	{r4, r5}
    cc74:	4770      	bx	lr
    cc76:	bf00      	nop
    cc78:	00000000 	.word	0x00000000
    cc7c:	43500000 	.word	0x43500000
    cc80:	7fefffff 	.word	0x7fefffff
    cc84:	7ff00000 	.word	0x7ff00000

0000cc88 <__assert_func>:
    cc88:	b500      	push	{lr}
    cc8a:	4c0b      	ldr	r4, [pc, #44]	; (ccb8 <__assert_func+0x30>)
    cc8c:	6825      	ldr	r5, [r4, #0]
    cc8e:	4614      	mov	r4, r2
    cc90:	68ee      	ldr	r6, [r5, #12]
    cc92:	461a      	mov	r2, r3
    cc94:	b085      	sub	sp, #20
    cc96:	4603      	mov	r3, r0
    cc98:	460d      	mov	r5, r1
    cc9a:	b14c      	cbz	r4, ccb0 <__assert_func+0x28>
    cc9c:	4907      	ldr	r1, [pc, #28]	; (ccbc <__assert_func+0x34>)
    cc9e:	9500      	str	r5, [sp, #0]
    cca0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    cca4:	4630      	mov	r0, r6
    cca6:	4906      	ldr	r1, [pc, #24]	; (ccc0 <__assert_func+0x38>)
    cca8:	f000 ff86 	bl	dbb8 <fiprintf>
    ccac:	f7fa fb4a 	bl	7344 <abort>
    ccb0:	4904      	ldr	r1, [pc, #16]	; (ccc4 <__assert_func+0x3c>)
    ccb2:	460c      	mov	r4, r1
    ccb4:	e7f3      	b.n	cc9e <__assert_func+0x16>
    ccb6:	bf00      	nop
    ccb8:	20004754 	.word	0x20004754
    ccbc:	200008bc 	.word	0x200008bc
    ccc0:	200008cc 	.word	0x200008cc
    ccc4:	2000047c 	.word	0x2000047c

0000ccc8 <_calloc_r>:
    ccc8:	b538      	push	{r3, r4, r5, lr}
    ccca:	fba1 1402 	umull	r1, r4, r1, r2
    ccce:	bb8c      	cbnz	r4, cd34 <_calloc_r+0x6c>
    ccd0:	f7fb ff30 	bl	8b34 <_malloc_r>
    ccd4:	4605      	mov	r5, r0
    ccd6:	b1e0      	cbz	r0, cd12 <_calloc_r+0x4a>
    ccd8:	f850 2c04 	ldr.w	r2, [r0, #-4]
    ccdc:	f022 0203 	bic.w	r2, r2, #3
    cce0:	3a04      	subs	r2, #4
    cce2:	2a24      	cmp	r2, #36	; 0x24
    cce4:	d817      	bhi.n	cd16 <_calloc_r+0x4e>
    cce6:	2a13      	cmp	r2, #19
    cce8:	d91a      	bls.n	cd20 <_calloc_r+0x58>
    ccea:	2a1b      	cmp	r2, #27
    ccec:	e9c0 4400 	strd	r4, r4, [r0]
    ccf0:	d91d      	bls.n	cd2e <_calloc_r+0x66>
    ccf2:	2a24      	cmp	r2, #36	; 0x24
    ccf4:	bf14      	ite	ne
    ccf6:	f100 0210 	addne.w	r2, r0, #16
    ccfa:	f100 0218 	addeq.w	r2, r0, #24
    ccfe:	f04f 0300 	mov.w	r3, #0
    cd02:	e9c0 4402 	strd	r4, r4, [r0, #8]
    cd06:	bf04      	itt	eq
    cd08:	6104      	streq	r4, [r0, #16]
    cd0a:	6144      	streq	r4, [r0, #20]
    cd0c:	e9c2 3300 	strd	r3, r3, [r2]
    cd10:	6093      	str	r3, [r2, #8]
    cd12:	4628      	mov	r0, r5
    cd14:	bd38      	pop	{r3, r4, r5, pc}
    cd16:	4621      	mov	r1, r4
    cd18:	f7fc ff04 	bl	9b24 <memset>
    cd1c:	4628      	mov	r0, r5
    cd1e:	bd38      	pop	{r3, r4, r5, pc}
    cd20:	4602      	mov	r2, r0
    cd22:	2300      	movs	r3, #0
    cd24:	e9c2 3300 	strd	r3, r3, [r2]
    cd28:	6093      	str	r3, [r2, #8]
    cd2a:	4628      	mov	r0, r5
    cd2c:	bd38      	pop	{r3, r4, r5, pc}
    cd2e:	f100 0208 	add.w	r2, r0, #8
    cd32:	e7f6      	b.n	cd22 <_calloc_r+0x5a>
    cd34:	f7fd f84c 	bl	9dd0 <__errno>
    cd38:	230c      	movs	r3, #12
    cd3a:	2500      	movs	r5, #0
    cd3c:	6003      	str	r3, [r0, #0]
    cd3e:	e7e8      	b.n	cd12 <_calloc_r+0x4a>

0000cd40 <quorem>:
    cd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd44:	6903      	ldr	r3, [r0, #16]
    cd46:	690c      	ldr	r4, [r1, #16]
    cd48:	42a3      	cmp	r3, r4
    cd4a:	b083      	sub	sp, #12
    cd4c:	f2c0 8087 	blt.w	ce5e <quorem+0x11e>
    cd50:	3c01      	subs	r4, #1
    cd52:	f101 0514 	add.w	r5, r1, #20
    cd56:	00a3      	lsls	r3, r4, #2
    cd58:	f100 0814 	add.w	r8, r0, #20
    cd5c:	9300      	str	r3, [sp, #0]
    cd5e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    cd62:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    cd66:	3301      	adds	r3, #1
    cd68:	4681      	mov	r9, r0
    cd6a:	429a      	cmp	r2, r3
    cd6c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    cd70:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    cd74:	9001      	str	r0, [sp, #4]
    cd76:	fbb2 f6f3 	udiv	r6, r2, r3
    cd7a:	d33b      	bcc.n	cdf4 <quorem+0xb4>
    cd7c:	f04f 0c00 	mov.w	ip, #0
    cd80:	46ae      	mov	lr, r5
    cd82:	4640      	mov	r0, r8
    cd84:	46e2      	mov	sl, ip
    cd86:	4663      	mov	r3, ip
    cd88:	f85e bb04 	ldr.w	fp, [lr], #4
    cd8c:	6802      	ldr	r2, [r0, #0]
    cd8e:	fa1f fc8b 	uxth.w	ip, fp
    cd92:	fb06 330c 	mla	r3, r6, ip, r3
    cd96:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    cd9a:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    cd9e:	fb06 cc0b 	mla	ip, r6, fp, ip
    cda2:	b29b      	uxth	r3, r3
    cda4:	ebaa 0303 	sub.w	r3, sl, r3
    cda8:	fa1f fa8c 	uxth.w	sl, ip
    cdac:	fa13 f382 	uxtah	r3, r3, r2
    cdb0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    cdb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
    cdb8:	b29b      	uxth	r3, r3
    cdba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cdbe:	4577      	cmp	r7, lr
    cdc0:	f840 3b04 	str.w	r3, [r0], #4
    cdc4:	ea4f 4a22 	mov.w	sl, r2, asr #16
    cdc8:	ea4f 431c 	mov.w	r3, ip, lsr #16
    cdcc:	d2dc      	bcs.n	cd88 <quorem+0x48>
    cdce:	9b00      	ldr	r3, [sp, #0]
    cdd0:	f858 3003 	ldr.w	r3, [r8, r3]
    cdd4:	b973      	cbnz	r3, cdf4 <quorem+0xb4>
    cdd6:	9b01      	ldr	r3, [sp, #4]
    cdd8:	3b04      	subs	r3, #4
    cdda:	4598      	cmp	r8, r3
    cddc:	d304      	bcc.n	cde8 <quorem+0xa8>
    cdde:	e007      	b.n	cdf0 <quorem+0xb0>
    cde0:	4598      	cmp	r8, r3
    cde2:	f104 34ff 	add.w	r4, r4, #4294967295
    cde6:	d203      	bcs.n	cdf0 <quorem+0xb0>
    cde8:	f853 2904 	ldr.w	r2, [r3], #-4
    cdec:	2a00      	cmp	r2, #0
    cdee:	d0f7      	beq.n	cde0 <quorem+0xa0>
    cdf0:	f8c9 4010 	str.w	r4, [r9, #16]
    cdf4:	4648      	mov	r0, r9
    cdf6:	f7fd fea7 	bl	ab48 <__mcmp>
    cdfa:	2800      	cmp	r0, #0
    cdfc:	db2b      	blt.n	ce56 <quorem+0x116>
    cdfe:	3601      	adds	r6, #1
    ce00:	4641      	mov	r1, r8
    ce02:	2300      	movs	r3, #0
    ce04:	f855 0b04 	ldr.w	r0, [r5], #4
    ce08:	f8d1 c000 	ldr.w	ip, [r1]
    ce0c:	b282      	uxth	r2, r0
    ce0e:	1a9a      	subs	r2, r3, r2
    ce10:	0c03      	lsrs	r3, r0, #16
    ce12:	fa12 f28c 	uxtah	r2, r2, ip
    ce16:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    ce1a:	eb03 4322 	add.w	r3, r3, r2, asr #16
    ce1e:	b292      	uxth	r2, r2
    ce20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    ce24:	42af      	cmp	r7, r5
    ce26:	f841 2b04 	str.w	r2, [r1], #4
    ce2a:	ea4f 4323 	mov.w	r3, r3, asr #16
    ce2e:	d2e9      	bcs.n	ce04 <quorem+0xc4>
    ce30:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    ce34:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    ce38:	b96a      	cbnz	r2, ce56 <quorem+0x116>
    ce3a:	3b04      	subs	r3, #4
    ce3c:	4598      	cmp	r8, r3
    ce3e:	d304      	bcc.n	ce4a <quorem+0x10a>
    ce40:	e007      	b.n	ce52 <quorem+0x112>
    ce42:	4598      	cmp	r8, r3
    ce44:	f104 34ff 	add.w	r4, r4, #4294967295
    ce48:	d203      	bcs.n	ce52 <quorem+0x112>
    ce4a:	f853 2904 	ldr.w	r2, [r3], #-4
    ce4e:	2a00      	cmp	r2, #0
    ce50:	d0f7      	beq.n	ce42 <quorem+0x102>
    ce52:	f8c9 4010 	str.w	r4, [r9, #16]
    ce56:	4630      	mov	r0, r6
    ce58:	b003      	add	sp, #12
    ce5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce5e:	2000      	movs	r0, #0
    ce60:	b003      	add	sp, #12
    ce62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce66:	bf00      	nop

0000ce68 <_dtoa_r>:
    ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce6c:	ed2d 8b02 	vpush	{d8}
    ce70:	b08f      	sub	sp, #60	; 0x3c
    ce72:	ed8d 0b02 	vstr	d0, [sp, #8]
    ce76:	9101      	str	r1, [sp, #4]
    ce78:	6b81      	ldr	r1, [r0, #56]	; 0x38
    ce7a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    ce7c:	9305      	str	r3, [sp, #20]
    ce7e:	ec57 6b10 	vmov	r6, r7, d0
    ce82:	4604      	mov	r4, r0
    ce84:	4693      	mov	fp, r2
    ce86:	b141      	cbz	r1, ce9a <_dtoa_r+0x32>
    ce88:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    ce8a:	604a      	str	r2, [r1, #4]
    ce8c:	2301      	movs	r3, #1
    ce8e:	4093      	lsls	r3, r2
    ce90:	608b      	str	r3, [r1, #8]
    ce92:	f7fd fbf9 	bl	a688 <_Bfree>
    ce96:	2300      	movs	r3, #0
    ce98:	63a3      	str	r3, [r4, #56]	; 0x38
    ce9a:	f1b7 0800 	subs.w	r8, r7, #0
    ce9e:	bfb4      	ite	lt
    cea0:	2301      	movlt	r3, #1
    cea2:	2300      	movge	r3, #0
    cea4:	602b      	str	r3, [r5, #0]
    cea6:	4bbe      	ldr	r3, [pc, #760]	; (d1a0 <_dtoa_r+0x338>)
    cea8:	bfbc      	itt	lt
    ceaa:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    ceae:	f8cd 800c 	strlt.w	r8, [sp, #12]
    ceb2:	ea33 0308 	bics.w	r3, r3, r8
    ceb6:	f000 809f 	beq.w	cff8 <_dtoa_r+0x190>
    ceba:	ed9d 8b02 	vldr	d8, [sp, #8]
    cebe:	eeb5 8b40 	vcmp.f64	d8, #0.0
    cec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cec6:	d111      	bne.n	ceec <_dtoa_r+0x84>
    cec8:	9a05      	ldr	r2, [sp, #20]
    ceca:	2301      	movs	r3, #1
    cecc:	6013      	str	r3, [r2, #0]
    cece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ced0:	2b00      	cmp	r3, #0
    ced2:	f000 823f 	beq.w	d354 <_dtoa_r+0x4ec>
    ced6:	4bb3      	ldr	r3, [pc, #716]	; (d1a4 <_dtoa_r+0x33c>)
    ced8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    ceda:	6013      	str	r3, [r2, #0]
    cedc:	3b01      	subs	r3, #1
    cede:	9300      	str	r3, [sp, #0]
    cee0:	9800      	ldr	r0, [sp, #0]
    cee2:	b00f      	add	sp, #60	; 0x3c
    cee4:	ecbd 8b02 	vpop	{d8}
    cee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ceec:	aa0c      	add	r2, sp, #48	; 0x30
    ceee:	a90d      	add	r1, sp, #52	; 0x34
    cef0:	4620      	mov	r0, r4
    cef2:	eeb0 0b48 	vmov.f64	d0, d8
    cef6:	f7fd fef3 	bl	ace0 <__d2b>
    cefa:	ea5f 5318 	movs.w	r3, r8, lsr #20
    cefe:	4605      	mov	r5, r0
    cf00:	f040 8092 	bne.w	d028 <_dtoa_r+0x1c0>
    cf04:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
    cf08:	440b      	add	r3, r1
    cf0a:	f203 4232 	addw	r2, r3, #1074	; 0x432
    cf0e:	2a20      	cmp	r2, #32
    cf10:	f340 82fa 	ble.w	d508 <_dtoa_r+0x6a0>
    cf14:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    cf18:	fa08 f802 	lsl.w	r8, r8, r2
    cf1c:	f203 4212 	addw	r2, r3, #1042	; 0x412
    cf20:	40d6      	lsrs	r6, r2
    cf22:	ea48 0206 	orr.w	r2, r8, r6
    cf26:	ee07 2a10 	vmov	s14, r2
    cf2a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
    cf2e:	1e58      	subs	r0, r3, #1
    cf30:	ee17 6a90 	vmov	r6, s15
    cf34:	ec53 2b17 	vmov	r2, r3, d7
    cf38:	f04f 0a01 	mov.w	sl, #1
    cf3c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
    cf40:	ed9f 3b91 	vldr	d3, [pc, #580]	; d188 <_dtoa_r+0x320>
    cf44:	ed9f 7b92 	vldr	d7, [pc, #584]	; d190 <_dtoa_r+0x328>
    cf48:	ed9f 5b93 	vldr	d5, [pc, #588]	; d198 <_dtoa_r+0x330>
    cf4c:	ee06 0a90 	vmov	s13, r0
    cf50:	ec43 2b12 	vmov	d2, r2, r3
    cf54:	eeb8 4be6 	vcvt.f64.s32	d4, s13
    cf58:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    cf5c:	ee32 6b46 	vsub.f64	d6, d2, d6
    cf60:	eea6 7b03 	vfma.f64	d7, d6, d3
    cf64:	eea4 7b05 	vfma.f64	d7, d4, d5
    cf68:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    cf6c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    cf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cf74:	ee16 7a90 	vmov	r7, s13
    cf78:	d508      	bpl.n	cf8c <_dtoa_r+0x124>
    cf7a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    cf7e:	eeb4 6b47 	vcmp.f64	d6, d7
    cf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cf86:	bf18      	it	ne
    cf88:	f107 37ff 	addne.w	r7, r7, #4294967295
    cf8c:	2f16      	cmp	r7, #22
    cf8e:	f200 8145 	bhi.w	d21c <_dtoa_r+0x3b4>
    cf92:	4b85      	ldr	r3, [pc, #532]	; (d1a8 <_dtoa_r+0x340>)
    cf94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    cf98:	ed93 7b00 	vldr	d7, [r3]
    cf9c:	eeb4 8bc7 	vcmpe.f64	d8, d7
    cfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cfa4:	d557      	bpl.n	d056 <_dtoa_r+0x1ee>
    cfa6:	1a09      	subs	r1, r1, r0
    cfa8:	2300      	movs	r3, #0
    cfaa:	f1b1 0801 	subs.w	r8, r1, #1
    cfae:	f107 37ff 	add.w	r7, r7, #4294967295
    cfb2:	930a      	str	r3, [sp, #40]	; 0x28
    cfb4:	f100 8139 	bmi.w	d22a <_dtoa_r+0x3c2>
    cfb8:	2300      	movs	r3, #0
    cfba:	9306      	str	r3, [sp, #24]
    cfbc:	2f00      	cmp	r7, #0
    cfbe:	da52      	bge.n	d066 <_dtoa_r+0x1fe>
    cfc0:	9b06      	ldr	r3, [sp, #24]
    cfc2:	9704      	str	r7, [sp, #16]
    cfc4:	1bdb      	subs	r3, r3, r7
    cfc6:	9306      	str	r3, [sp, #24]
    cfc8:	427b      	negs	r3, r7
    cfca:	9308      	str	r3, [sp, #32]
    cfcc:	9b01      	ldr	r3, [sp, #4]
    cfce:	2b09      	cmp	r3, #9
    cfd0:	f04f 0700 	mov.w	r7, #0
    cfd4:	d84e      	bhi.n	d074 <_dtoa_r+0x20c>
    cfd6:	2b05      	cmp	r3, #5
    cfd8:	f340 829d 	ble.w	d516 <_dtoa_r+0x6ae>
    cfdc:	3b04      	subs	r3, #4
    cfde:	9301      	str	r3, [sp, #4]
    cfe0:	2600      	movs	r6, #0
    cfe2:	9b01      	ldr	r3, [sp, #4]
    cfe4:	1e9a      	subs	r2, r3, #2
    cfe6:	2a03      	cmp	r2, #3
    cfe8:	f200 8125 	bhi.w	d236 <_dtoa_r+0x3ce>
    cfec:	e8df f012 	tbh	[pc, r2, lsl #1]
    cff0:	03a703aa 	.word	0x03a703aa
    cff4:	037e039d 	.word	0x037e039d
    cff8:	9a05      	ldr	r2, [sp, #20]
    cffa:	f3c8 0813 	ubfx	r8, r8, #0, #20
    cffe:	f242 730f 	movw	r3, #9999	; 0x270f
    d002:	ea58 0806 	orrs.w	r8, r8, r6
    d006:	6013      	str	r3, [r2, #0]
    d008:	d11e      	bne.n	d048 <_dtoa_r+0x1e0>
    d00a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d00c:	2b00      	cmp	r3, #0
    d00e:	f000 8591 	beq.w	db34 <_dtoa_r+0xccc>
    d012:	4b66      	ldr	r3, [pc, #408]	; (d1ac <_dtoa_r+0x344>)
    d014:	9300      	str	r3, [sp, #0]
    d016:	3308      	adds	r3, #8
    d018:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    d01a:	9800      	ldr	r0, [sp, #0]
    d01c:	6013      	str	r3, [r2, #0]
    d01e:	b00f      	add	sp, #60	; 0x3c
    d020:	ecbd 8b02 	vpop	{d8}
    d024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d028:	ee18 6a90 	vmov	r6, s17
    d02c:	f3c6 0613 	ubfx	r6, r6, #0, #20
    d030:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
    d034:	ec53 2b18 	vmov	r2, r3, d8
    d038:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
    d03c:	990c      	ldr	r1, [sp, #48]	; 0x30
    d03e:	f04f 0a00 	mov.w	sl, #0
    d042:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d046:	e77b      	b.n	cf40 <_dtoa_r+0xd8>
    d048:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d04a:	2b00      	cmp	r3, #0
    d04c:	f040 833b 	bne.w	d6c6 <_dtoa_r+0x85e>
    d050:	4b57      	ldr	r3, [pc, #348]	; (d1b0 <_dtoa_r+0x348>)
    d052:	9300      	str	r3, [sp, #0]
    d054:	e744      	b.n	cee0 <_dtoa_r+0x78>
    d056:	1a09      	subs	r1, r1, r0
    d058:	2300      	movs	r3, #0
    d05a:	f1b1 0801 	subs.w	r8, r1, #1
    d05e:	930a      	str	r3, [sp, #40]	; 0x28
    d060:	f100 80e3 	bmi.w	d22a <_dtoa_r+0x3c2>
    d064:	9306      	str	r3, [sp, #24]
    d066:	2300      	movs	r3, #0
    d068:	9308      	str	r3, [sp, #32]
    d06a:	9b01      	ldr	r3, [sp, #4]
    d06c:	9704      	str	r7, [sp, #16]
    d06e:	2b09      	cmp	r3, #9
    d070:	44b8      	add	r8, r7
    d072:	d9b0      	bls.n	cfd6 <_dtoa_r+0x16e>
    d074:	2300      	movs	r3, #0
    d076:	2601      	movs	r6, #1
    d078:	9301      	str	r3, [sp, #4]
    d07a:	9607      	str	r6, [sp, #28]
    d07c:	f04f 39ff 	mov.w	r9, #4294967295
    d080:	469b      	mov	fp, r3
    d082:	2100      	movs	r1, #0
    d084:	63e1      	str	r1, [r4, #60]	; 0x3c
    d086:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    d08a:	4620      	mov	r0, r4
    d08c:	f7fd fad6 	bl	a63c <_Balloc>
    d090:	9000      	str	r0, [sp, #0]
    d092:	2800      	cmp	r0, #0
    d094:	f000 8540 	beq.w	db18 <_dtoa_r+0xcb0>
    d098:	9b00      	ldr	r3, [sp, #0]
    d09a:	63a3      	str	r3, [r4, #56]	; 0x38
    d09c:	f1b9 0f0e 	cmp.w	r9, #14
    d0a0:	f200 80dc 	bhi.w	d25c <_dtoa_r+0x3f4>
    d0a4:	2e00      	cmp	r6, #0
    d0a6:	f000 80d9 	beq.w	d25c <_dtoa_r+0x3f4>
    d0aa:	9b04      	ldr	r3, [sp, #16]
    d0ac:	2b00      	cmp	r3, #0
    d0ae:	f340 83de 	ble.w	d86e <_dtoa_r+0xa06>
    d0b2:	4a3d      	ldr	r2, [pc, #244]	; (d1a8 <_dtoa_r+0x340>)
    d0b4:	f003 010f 	and.w	r1, r3, #15
    d0b8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    d0bc:	ed92 7b00 	vldr	d7, [r2]
    d0c0:	111a      	asrs	r2, r3, #4
    d0c2:	05db      	lsls	r3, r3, #23
    d0c4:	f140 8382 	bpl.w	d7cc <_dtoa_r+0x964>
    d0c8:	493a      	ldr	r1, [pc, #232]	; (d1b4 <_dtoa_r+0x34c>)
    d0ca:	ed91 6b08 	vldr	d6, [r1, #32]
    d0ce:	f002 020f 	and.w	r2, r2, #15
    d0d2:	2003      	movs	r0, #3
    d0d4:	ee88 5b06 	vdiv.f64	d5, d8, d6
    d0d8:	b15a      	cbz	r2, d0f2 <_dtoa_r+0x28a>
    d0da:	4936      	ldr	r1, [pc, #216]	; (d1b4 <_dtoa_r+0x34c>)
    d0dc:	07d6      	lsls	r6, r2, #31
    d0de:	d504      	bpl.n	d0ea <_dtoa_r+0x282>
    d0e0:	ed91 6b00 	vldr	d6, [r1]
    d0e4:	3001      	adds	r0, #1
    d0e6:	ee27 7b06 	vmul.f64	d7, d7, d6
    d0ea:	1052      	asrs	r2, r2, #1
    d0ec:	f101 0108 	add.w	r1, r1, #8
    d0f0:	d1f4      	bne.n	d0dc <_dtoa_r+0x274>
    d0f2:	ee85 6b07 	vdiv.f64	d6, d5, d7
    d0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d0f8:	b13b      	cbz	r3, d10a <_dtoa_r+0x2a2>
    d0fa:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    d0fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
    d102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d106:	f100 84ae 	bmi.w	da66 <_dtoa_r+0xbfe>
    d10a:	ee07 0a90 	vmov	s15, r0
    d10e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    d112:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    d116:	eea5 7b06 	vfma.f64	d7, d5, d6
    d11a:	ee17 2a90 	vmov	r2, s15
    d11e:	ec51 0b17 	vmov	r0, r1, d7
    d122:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    d126:	f1b9 0f00 	cmp.w	r9, #0
    d12a:	f000 8388 	beq.w	d83e <_dtoa_r+0x9d6>
    d12e:	9e04      	ldr	r6, [sp, #16]
    d130:	464a      	mov	r2, r9
    d132:	9b07      	ldr	r3, [sp, #28]
    d134:	2b00      	cmp	r3, #0
    d136:	f000 8447 	beq.w	d9c8 <_dtoa_r+0xb60>
    d13a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    d13e:	4b1a      	ldr	r3, [pc, #104]	; (d1a8 <_dtoa_r+0x340>)
    d140:	eefd 4bc6 	vcvt.s32.f64	s9, d6
    d144:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    d148:	eeb8 7be4 	vcvt.f64.s32	d7, s9
    d14c:	ee36 7b47 	vsub.f64	d7, d6, d7
    d150:	ed1c 6b02 	vldr	d6, [ip, #-8]
    d154:	ee83 5b06 	vdiv.f64	d5, d3, d6
    d158:	ec41 0b16 	vmov	d6, r0, r1
    d15c:	ee14 0a90 	vmov	r0, s9
    d160:	ee35 5b46 	vsub.f64	d5, d5, d6
    d164:	9900      	ldr	r1, [sp, #0]
    d166:	eeb4 5bc7 	vcmpe.f64	d5, d7
    d16a:	3030      	adds	r0, #48	; 0x30
    d16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d170:	f801 0b01 	strb.w	r0, [r1], #1
    d174:	f300 84ac 	bgt.w	dad0 <_dtoa_r+0xc68>
    d178:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
    d17c:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    d180:	f04f 0c00 	mov.w	ip, #0
    d184:	e031      	b.n	d1ea <_dtoa_r+0x382>
    d186:	bf00      	nop
    d188:	636f4361 	.word	0x636f4361
    d18c:	3fd287a7 	.word	0x3fd287a7
    d190:	8b60c8b3 	.word	0x8b60c8b3
    d194:	3fc68a28 	.word	0x3fc68a28
    d198:	509f79fb 	.word	0x509f79fb
    d19c:	3fd34413 	.word	0x3fd34413
    d1a0:	7ff00000 	.word	0x7ff00000
    d1a4:	20000b1d 	.word	0x20000b1d
    d1a8:	200002a8 	.word	0x200002a8
    d1ac:	20000a70 	.word	0x20000a70
    d1b0:	20000a7c 	.word	0x20000a7c
    d1b4:	20000280 	.word	0x20000280
    d1b8:	f10c 0c01 	add.w	ip, ip, #1
    d1bc:	4594      	cmp	ip, r2
    d1be:	da4d      	bge.n	d25c <_dtoa_r+0x3f4>
    d1c0:	ee27 7b04 	vmul.f64	d7, d7, d4
    d1c4:	ee25 5b04 	vmul.f64	d5, d5, d4
    d1c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    d1cc:	ee16 3a90 	vmov	r3, s13
    d1d0:	eeb8 3be6 	vcvt.f64.s32	d3, s13
    d1d4:	3330      	adds	r3, #48	; 0x30
    d1d6:	ee37 7b43 	vsub.f64	d7, d7, d3
    d1da:	eeb4 7bc5 	vcmpe.f64	d7, d5
    d1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1e2:	f801 3b01 	strb.w	r3, [r1], #1
    d1e6:	f100 8473 	bmi.w	dad0 <_dtoa_r+0xc68>
    d1ea:	ee32 6b47 	vsub.f64	d6, d2, d7
    d1ee:	eeb4 6bc5 	vcmpe.f64	d6, d5
    d1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d1f6:	d5df      	bpl.n	d1b8 <_dtoa_r+0x350>
    d1f8:	9a00      	ldr	r2, [sp, #0]
    d1fa:	9604      	str	r6, [sp, #16]
    d1fc:	e002      	b.n	d204 <_dtoa_r+0x39c>
    d1fe:	428a      	cmp	r2, r1
    d200:	f000 8450 	beq.w	daa4 <_dtoa_r+0xc3c>
    d204:	4689      	mov	r9, r1
    d206:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    d20a:	2b39      	cmp	r3, #57	; 0x39
    d20c:	d0f7      	beq.n	d1fe <_dtoa_r+0x396>
    d20e:	3301      	adds	r3, #1
    d210:	b2db      	uxtb	r3, r3
    d212:	700b      	strb	r3, [r1, #0]
    d214:	9b04      	ldr	r3, [sp, #16]
    d216:	3301      	adds	r3, #1
    d218:	9304      	str	r3, [sp, #16]
    d21a:	e155      	b.n	d4c8 <_dtoa_r+0x660>
    d21c:	1a09      	subs	r1, r1, r0
    d21e:	2301      	movs	r3, #1
    d220:	f1b1 0801 	subs.w	r8, r1, #1
    d224:	930a      	str	r3, [sp, #40]	; 0x28
    d226:	f57f aec7 	bpl.w	cfb8 <_dtoa_r+0x150>
    d22a:	f1c1 0301 	rsb	r3, r1, #1
    d22e:	9306      	str	r3, [sp, #24]
    d230:	f04f 0800 	mov.w	r8, #0
    d234:	e6c2      	b.n	cfbc <_dtoa_r+0x154>
    d236:	2600      	movs	r6, #0
    d238:	63e6      	str	r6, [r4, #60]	; 0x3c
    d23a:	4631      	mov	r1, r6
    d23c:	4620      	mov	r0, r4
    d23e:	f7fd f9fd 	bl	a63c <_Balloc>
    d242:	9000      	str	r0, [sp, #0]
    d244:	2800      	cmp	r0, #0
    d246:	f000 8467 	beq.w	db18 <_dtoa_r+0xcb0>
    d24a:	9b00      	ldr	r3, [sp, #0]
    d24c:	63a3      	str	r3, [r4, #56]	; 0x38
    d24e:	f04f 33ff 	mov.w	r3, #4294967295
    d252:	930b      	str	r3, [sp, #44]	; 0x2c
    d254:	4699      	mov	r9, r3
    d256:	2301      	movs	r3, #1
    d258:	46b3      	mov	fp, r6
    d25a:	9307      	str	r3, [sp, #28]
    d25c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d25e:	2a00      	cmp	r2, #0
    d260:	db55      	blt.n	d30e <_dtoa_r+0x4a6>
    d262:	9904      	ldr	r1, [sp, #16]
    d264:	290e      	cmp	r1, #14
    d266:	dc52      	bgt.n	d30e <_dtoa_r+0x4a6>
    d268:	4bb7      	ldr	r3, [pc, #732]	; (d548 <_dtoa_r+0x6e0>)
    d26a:	f1bb 0f00 	cmp.w	fp, #0
    d26e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    d272:	ed93 6b00 	vldr	d6, [r3]
    d276:	da15      	bge.n	d2a4 <_dtoa_r+0x43c>
    d278:	f1b9 0f00 	cmp.w	r9, #0
    d27c:	dc12      	bgt.n	d2a4 <_dtoa_r+0x43c>
    d27e:	f040 82f2 	bne.w	d866 <_dtoa_r+0x9fe>
    d282:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    d286:	ee26 7b07 	vmul.f64	d7, d6, d7
    d28a:	eeb4 8bc7 	vcmpe.f64	d8, d7
    d28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d292:	46ca      	mov	sl, r9
    d294:	464e      	mov	r6, r9
    d296:	f200 826d 	bhi.w	d774 <_dtoa_r+0x90c>
    d29a:	f8dd 8000 	ldr.w	r8, [sp]
    d29e:	ea6f 0b0b 	mvn.w	fp, fp
    d2a2:	e270      	b.n	d786 <_dtoa_r+0x91e>
    d2a4:	ee88 7b06 	vdiv.f64	d7, d8, d6
    d2a8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    d2ac:	9900      	ldr	r1, [sp, #0]
    d2ae:	ee17 3a10 	vmov	r3, s14
    d2b2:	f1b9 0f01 	cmp.w	r9, #1
    d2b6:	f103 0330 	add.w	r3, r3, #48	; 0x30
    d2ba:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    d2be:	f801 3b01 	strb.w	r3, [r1], #1
    d2c2:	eea5 8b46 	vfms.f64	d8, d5, d6
    d2c6:	f000 8334 	beq.w	d932 <_dtoa_r+0xaca>
    d2ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    d2ce:	2301      	movs	r3, #1
    d2d0:	e011      	b.n	d2f6 <_dtoa_r+0x48e>
    d2d2:	ee88 7b06 	vdiv.f64	d7, d8, d6
    d2d6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    d2da:	3301      	adds	r3, #1
    d2dc:	ee17 2a10 	vmov	r2, s14
    d2e0:	454b      	cmp	r3, r9
    d2e2:	f102 0230 	add.w	r2, r2, #48	; 0x30
    d2e6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
    d2ea:	f801 2b01 	strb.w	r2, [r1], #1
    d2ee:	eea5 8b46 	vfms.f64	d8, d5, d6
    d2f2:	f000 831e 	beq.w	d932 <_dtoa_r+0xaca>
    d2f6:	ee28 8b04 	vmul.f64	d8, d8, d4
    d2fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
    d2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d302:	d1e6      	bne.n	d2d2 <_dtoa_r+0x46a>
    d304:	9b04      	ldr	r3, [sp, #16]
    d306:	3301      	adds	r3, #1
    d308:	9304      	str	r3, [sp, #16]
    d30a:	4689      	mov	r9, r1
    d30c:	e0dc      	b.n	d4c8 <_dtoa_r+0x660>
    d30e:	9b07      	ldr	r3, [sp, #28]
    d310:	b343      	cbz	r3, d364 <_dtoa_r+0x4fc>
    d312:	9b01      	ldr	r3, [sp, #4]
    d314:	2b01      	cmp	r3, #1
    d316:	f340 8276 	ble.w	d806 <_dtoa_r+0x99e>
    d31a:	9b08      	ldr	r3, [sp, #32]
    d31c:	f109 3aff 	add.w	sl, r9, #4294967295
    d320:	4553      	cmp	r3, sl
    d322:	f280 823f 	bge.w	d7a4 <_dtoa_r+0x93c>
    d326:	9b08      	ldr	r3, [sp, #32]
    d328:	f8cd a020 	str.w	sl, [sp, #32]
    d32c:	ebaa 0203 	sub.w	r2, sl, r3
    d330:	4417      	add	r7, r2
    d332:	f04f 0a00 	mov.w	sl, #0
    d336:	f1b9 0f00 	cmp.w	r9, #0
    d33a:	f2c0 8325 	blt.w	d988 <_dtoa_r+0xb20>
    d33e:	9b06      	ldr	r3, [sp, #24]
    d340:	9309      	str	r3, [sp, #36]	; 0x24
    d342:	444b      	add	r3, r9
    d344:	44c8      	add	r8, r9
    d346:	9306      	str	r3, [sp, #24]
    d348:	2101      	movs	r1, #1
    d34a:	4620      	mov	r0, r4
    d34c:	f7fd fa48 	bl	a7e0 <__i2b>
    d350:	4606      	mov	r6, r0
    d352:	e00c      	b.n	d36e <_dtoa_r+0x506>
    d354:	4b7d      	ldr	r3, [pc, #500]	; (d54c <_dtoa_r+0x6e4>)
    d356:	9300      	str	r3, [sp, #0]
    d358:	9800      	ldr	r0, [sp, #0]
    d35a:	b00f      	add	sp, #60	; 0x3c
    d35c:	ecbd 8b02 	vpop	{d8}
    d360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d364:	9b06      	ldr	r3, [sp, #24]
    d366:	f8dd a020 	ldr.w	sl, [sp, #32]
    d36a:	9e07      	ldr	r6, [sp, #28]
    d36c:	9309      	str	r3, [sp, #36]	; 0x24
    d36e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d370:	b16b      	cbz	r3, d38e <_dtoa_r+0x526>
    d372:	f1b8 0f00 	cmp.w	r8, #0
    d376:	dd0a      	ble.n	d38e <_dtoa_r+0x526>
    d378:	4543      	cmp	r3, r8
    d37a:	9906      	ldr	r1, [sp, #24]
    d37c:	461a      	mov	r2, r3
    d37e:	bfa8      	it	ge
    d380:	4642      	movge	r2, r8
    d382:	1a89      	subs	r1, r1, r2
    d384:	1a9b      	subs	r3, r3, r2
    d386:	9106      	str	r1, [sp, #24]
    d388:	9309      	str	r3, [sp, #36]	; 0x24
    d38a:	eba8 0802 	sub.w	r8, r8, r2
    d38e:	9b08      	ldr	r3, [sp, #32]
    d390:	b163      	cbz	r3, d3ac <_dtoa_r+0x544>
    d392:	9b07      	ldr	r3, [sp, #28]
    d394:	2b00      	cmp	r3, #0
    d396:	f000 82a7 	beq.w	d8e8 <_dtoa_r+0xa80>
    d39a:	f1ba 0f00 	cmp.w	sl, #0
    d39e:	f300 8204 	bgt.w	d7aa <_dtoa_r+0x942>
    d3a2:	9b08      	ldr	r3, [sp, #32]
    d3a4:	ebb3 020a 	subs.w	r2, r3, sl
    d3a8:	f040 82ff 	bne.w	d9aa <_dtoa_r+0xb42>
    d3ac:	2101      	movs	r1, #1
    d3ae:	4620      	mov	r0, r4
    d3b0:	f7fd fa16 	bl	a7e0 <__i2b>
    d3b4:	2f00      	cmp	r7, #0
    d3b6:	4682      	mov	sl, r0
    d3b8:	f300 80af 	bgt.w	d51a <_dtoa_r+0x6b2>
    d3bc:	9b01      	ldr	r3, [sp, #4]
    d3be:	2b01      	cmp	r3, #1
    d3c0:	f340 8187 	ble.w	d6d2 <_dtoa_r+0x86a>
    d3c4:	2300      	movs	r3, #0
    d3c6:	9308      	str	r3, [sp, #32]
    d3c8:	2001      	movs	r0, #1
    d3ca:	2f00      	cmp	r7, #0
    d3cc:	f040 80b1 	bne.w	d532 <_dtoa_r+0x6ca>
    d3d0:	4440      	add	r0, r8
    d3d2:	f010 001f 	ands.w	r0, r0, #31
    d3d6:	f000 817a 	beq.w	d6ce <_dtoa_r+0x866>
    d3da:	f1c0 0220 	rsb	r2, r0, #32
    d3de:	2a04      	cmp	r2, #4
    d3e0:	f300 8088 	bgt.w	d4f4 <_dtoa_r+0x68c>
    d3e4:	f040 81f6 	bne.w	d7d4 <_dtoa_r+0x96c>
    d3e8:	9b06      	ldr	r3, [sp, #24]
    d3ea:	2b00      	cmp	r3, #0
    d3ec:	dd05      	ble.n	d3fa <_dtoa_r+0x592>
    d3ee:	4629      	mov	r1, r5
    d3f0:	461a      	mov	r2, r3
    d3f2:	4620      	mov	r0, r4
    d3f4:	f7fd fb30 	bl	aa58 <__lshift>
    d3f8:	4605      	mov	r5, r0
    d3fa:	f1b8 0f00 	cmp.w	r8, #0
    d3fe:	dd05      	ble.n	d40c <_dtoa_r+0x5a4>
    d400:	4651      	mov	r1, sl
    d402:	4642      	mov	r2, r8
    d404:	4620      	mov	r0, r4
    d406:	f7fd fb27 	bl	aa58 <__lshift>
    d40a:	4682      	mov	sl, r0
    d40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d40e:	2b00      	cmp	r3, #0
    d410:	f040 813f 	bne.w	d692 <_dtoa_r+0x82a>
    d414:	f1b9 0f00 	cmp.w	r9, #0
    d418:	f340 8125 	ble.w	d666 <_dtoa_r+0x7fe>
    d41c:	9b07      	ldr	r3, [sp, #28]
    d41e:	2b00      	cmp	r3, #0
    d420:	f040 80a3 	bne.w	d56a <_dtoa_r+0x702>
    d424:	9b04      	ldr	r3, [sp, #16]
    d426:	3301      	adds	r3, #1
    d428:	9304      	str	r3, [sp, #16]
    d42a:	f8dd 8000 	ldr.w	r8, [sp]
    d42e:	2701      	movs	r7, #1
    d430:	e007      	b.n	d442 <_dtoa_r+0x5da>
    d432:	4629      	mov	r1, r5
    d434:	2300      	movs	r3, #0
    d436:	220a      	movs	r2, #10
    d438:	4620      	mov	r0, r4
    d43a:	f7fd f92f 	bl	a69c <__multadd>
    d43e:	3701      	adds	r7, #1
    d440:	4605      	mov	r5, r0
    d442:	4651      	mov	r1, sl
    d444:	4628      	mov	r0, r5
    d446:	f7ff fc7b 	bl	cd40 <quorem>
    d44a:	45b9      	cmp	r9, r7
    d44c:	f100 0030 	add.w	r0, r0, #48	; 0x30
    d450:	f808 0b01 	strb.w	r0, [r8], #1
    d454:	dced      	bgt.n	d432 <_dtoa_r+0x5ca>
    d456:	f1b9 0f00 	cmp.w	r9, #0
    d45a:	9a00      	ldr	r2, [sp, #0]
    d45c:	bfcc      	ite	gt
    d45e:	46cb      	movgt	fp, r9
    d460:	f04f 0b01 	movle.w	fp, #1
    d464:	4603      	mov	r3, r0
    d466:	4493      	add	fp, r2
    d468:	2700      	movs	r7, #0
    d46a:	4629      	mov	r1, r5
    d46c:	2201      	movs	r2, #1
    d46e:	4620      	mov	r0, r4
    d470:	9301      	str	r3, [sp, #4]
    d472:	f7fd faf1 	bl	aa58 <__lshift>
    d476:	4651      	mov	r1, sl
    d478:	4605      	mov	r5, r0
    d47a:	f7fd fb65 	bl	ab48 <__mcmp>
    d47e:	2800      	cmp	r0, #0
    d480:	f340 81af 	ble.w	d7e2 <_dtoa_r+0x97a>
    d484:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    d488:	9a00      	ldr	r2, [sp, #0]
    d48a:	f10b 3bff 	add.w	fp, fp, #4294967295
    d48e:	e004      	b.n	d49a <_dtoa_r+0x632>
    d490:	455a      	cmp	r2, fp
    d492:	f000 81b1 	beq.w	d7f8 <_dtoa_r+0x990>
    d496:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    d49a:	2b39      	cmp	r3, #57	; 0x39
    d49c:	f10b 0901 	add.w	r9, fp, #1
    d4a0:	d0f6      	beq.n	d490 <_dtoa_r+0x628>
    d4a2:	3301      	adds	r3, #1
    d4a4:	f88b 3000 	strb.w	r3, [fp]
    d4a8:	4651      	mov	r1, sl
    d4aa:	4620      	mov	r0, r4
    d4ac:	f7fd f8ec 	bl	a688 <_Bfree>
    d4b0:	b156      	cbz	r6, d4c8 <_dtoa_r+0x660>
    d4b2:	b12f      	cbz	r7, d4c0 <_dtoa_r+0x658>
    d4b4:	42b7      	cmp	r7, r6
    d4b6:	d003      	beq.n	d4c0 <_dtoa_r+0x658>
    d4b8:	4639      	mov	r1, r7
    d4ba:	4620      	mov	r0, r4
    d4bc:	f7fd f8e4 	bl	a688 <_Bfree>
    d4c0:	4631      	mov	r1, r6
    d4c2:	4620      	mov	r0, r4
    d4c4:	f7fd f8e0 	bl	a688 <_Bfree>
    d4c8:	4629      	mov	r1, r5
    d4ca:	4620      	mov	r0, r4
    d4cc:	f7fd f8dc 	bl	a688 <_Bfree>
    d4d0:	2300      	movs	r3, #0
    d4d2:	f889 3000 	strb.w	r3, [r9]
    d4d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    d4da:	601a      	str	r2, [r3, #0]
    d4dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d4de:	2b00      	cmp	r3, #0
    d4e0:	f43f acfe 	beq.w	cee0 <_dtoa_r+0x78>
    d4e4:	9800      	ldr	r0, [sp, #0]
    d4e6:	f8c3 9000 	str.w	r9, [r3]
    d4ea:	b00f      	add	sp, #60	; 0x3c
    d4ec:	ecbd 8b02 	vpop	{d8}
    d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4f4:	f1c0 001c 	rsb	r0, r0, #28
    d4f8:	9b06      	ldr	r3, [sp, #24]
    d4fa:	4403      	add	r3, r0
    d4fc:	9306      	str	r3, [sp, #24]
    d4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d500:	4403      	add	r3, r0
    d502:	9309      	str	r3, [sp, #36]	; 0x24
    d504:	4480      	add	r8, r0
    d506:	e76f      	b.n	d3e8 <_dtoa_r+0x580>
    d508:	f1c2 0220 	rsb	r2, r2, #32
    d50c:	fa06 f202 	lsl.w	r2, r6, r2
    d510:	ee07 2a10 	vmov	s14, r2
    d514:	e509      	b.n	cf2a <_dtoa_r+0xc2>
    d516:	2601      	movs	r6, #1
    d518:	e563      	b.n	cfe2 <_dtoa_r+0x17a>
    d51a:	4601      	mov	r1, r0
    d51c:	463a      	mov	r2, r7
    d51e:	4620      	mov	r0, r4
    d520:	f7fd fa3a 	bl	a998 <__pow5mult>
    d524:	9b01      	ldr	r3, [sp, #4]
    d526:	2b01      	cmp	r3, #1
    d528:	4682      	mov	sl, r0
    d52a:	f340 81c5 	ble.w	d8b8 <_dtoa_r+0xa50>
    d52e:	2300      	movs	r3, #0
    d530:	9308      	str	r3, [sp, #32]
    d532:	f8da 2010 	ldr.w	r2, [sl, #16]
    d536:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    d53a:	6910      	ldr	r0, [r2, #16]
    d53c:	f7fd f900 	bl	a740 <__hi0bits>
    d540:	f1c0 0020 	rsb	r0, r0, #32
    d544:	e744      	b.n	d3d0 <_dtoa_r+0x568>
    d546:	bf00      	nop
    d548:	200002a8 	.word	0x200002a8
    d54c:	20000b1c 	.word	0x20000b1c
    d550:	4631      	mov	r1, r6
    d552:	2300      	movs	r3, #0
    d554:	220a      	movs	r2, #10
    d556:	4620      	mov	r0, r4
    d558:	f7fd f8a0 	bl	a69c <__multadd>
    d55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d55e:	2b00      	cmp	r3, #0
    d560:	4606      	mov	r6, r0
    d562:	f340 82ce 	ble.w	db02 <_dtoa_r+0xc9a>
    d566:	9704      	str	r7, [sp, #16]
    d568:	4699      	mov	r9, r3
    d56a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d56c:	2b00      	cmp	r3, #0
    d56e:	dd05      	ble.n	d57c <_dtoa_r+0x714>
    d570:	4631      	mov	r1, r6
    d572:	461a      	mov	r2, r3
    d574:	4620      	mov	r0, r4
    d576:	f7fd fa6f 	bl	aa58 <__lshift>
    d57a:	4606      	mov	r6, r0
    d57c:	9b08      	ldr	r3, [sp, #32]
    d57e:	2b00      	cmp	r3, #0
    d580:	f040 81eb 	bne.w	d95a <_dtoa_r+0xaf2>
    d584:	46b0      	mov	r8, r6
    d586:	9b02      	ldr	r3, [sp, #8]
    d588:	9f00      	ldr	r7, [sp, #0]
    d58a:	f003 0201 	and.w	r2, r3, #1
    d58e:	1e7b      	subs	r3, r7, #1
    d590:	444b      	add	r3, r9
    d592:	9308      	str	r3, [sp, #32]
    d594:	9b01      	ldr	r3, [sp, #4]
    d596:	920a      	str	r2, [sp, #40]	; 0x28
    d598:	4313      	orrs	r3, r2
    d59a:	9309      	str	r3, [sp, #36]	; 0x24
    d59c:	4651      	mov	r1, sl
    d59e:	4628      	mov	r0, r5
    d5a0:	f7ff fbce 	bl	cd40 <quorem>
    d5a4:	4631      	mov	r1, r6
    d5a6:	4683      	mov	fp, r0
    d5a8:	4628      	mov	r0, r5
    d5aa:	f7fd facd 	bl	ab48 <__mcmp>
    d5ae:	4642      	mov	r2, r8
    d5b0:	4651      	mov	r1, sl
    d5b2:	4681      	mov	r9, r0
    d5b4:	4620      	mov	r0, r4
    d5b6:	f7fd fae9 	bl	ab8c <__mdiff>
    d5ba:	68c2      	ldr	r2, [r0, #12]
    d5bc:	4601      	mov	r1, r0
    d5be:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    d5c2:	2a00      	cmp	r2, #0
    d5c4:	d142      	bne.n	d64c <_dtoa_r+0x7e4>
    d5c6:	e9cd 0306 	strd	r0, r3, [sp, #24]
    d5ca:	4628      	mov	r0, r5
    d5cc:	f7fd fabc 	bl	ab48 <__mcmp>
    d5d0:	9906      	ldr	r1, [sp, #24]
    d5d2:	9002      	str	r0, [sp, #8]
    d5d4:	4620      	mov	r0, r4
    d5d6:	f7fd f857 	bl	a688 <_Bfree>
    d5da:	9a02      	ldr	r2, [sp, #8]
    d5dc:	9b07      	ldr	r3, [sp, #28]
    d5de:	b91a      	cbnz	r2, d5e8 <_dtoa_r+0x780>
    d5e0:	9909      	ldr	r1, [sp, #36]	; 0x24
    d5e2:	2900      	cmp	r1, #0
    d5e4:	f000 827e 	beq.w	dae4 <_dtoa_r+0xc7c>
    d5e8:	f1b9 0f00 	cmp.w	r9, #0
    d5ec:	f2c0 8183 	blt.w	d8f6 <_dtoa_r+0xa8e>
    d5f0:	9901      	ldr	r1, [sp, #4]
    d5f2:	ea49 0901 	orr.w	r9, r9, r1
    d5f6:	990a      	ldr	r1, [sp, #40]	; 0x28
    d5f8:	ea51 0909 	orrs.w	r9, r1, r9
    d5fc:	f000 817b 	beq.w	d8f6 <_dtoa_r+0xa8e>
    d600:	2a00      	cmp	r2, #0
    d602:	f300 81c6 	bgt.w	d992 <_dtoa_r+0xb2a>
    d606:	9a08      	ldr	r2, [sp, #32]
    d608:	703b      	strb	r3, [r7, #0]
    d60a:	f107 0901 	add.w	r9, r7, #1
    d60e:	4297      	cmp	r7, r2
    d610:	46cb      	mov	fp, r9
    d612:	f000 81c4 	beq.w	d99e <_dtoa_r+0xb36>
    d616:	4629      	mov	r1, r5
    d618:	2300      	movs	r3, #0
    d61a:	220a      	movs	r2, #10
    d61c:	4620      	mov	r0, r4
    d61e:	f7fd f83d 	bl	a69c <__multadd>
    d622:	4546      	cmp	r6, r8
    d624:	4605      	mov	r5, r0
    d626:	4631      	mov	r1, r6
    d628:	f04f 0300 	mov.w	r3, #0
    d62c:	f04f 020a 	mov.w	r2, #10
    d630:	4620      	mov	r0, r4
    d632:	d012      	beq.n	d65a <_dtoa_r+0x7f2>
    d634:	f7fd f832 	bl	a69c <__multadd>
    d638:	4641      	mov	r1, r8
    d63a:	4606      	mov	r6, r0
    d63c:	2300      	movs	r3, #0
    d63e:	220a      	movs	r2, #10
    d640:	4620      	mov	r0, r4
    d642:	f7fd f82b 	bl	a69c <__multadd>
    d646:	464f      	mov	r7, r9
    d648:	4680      	mov	r8, r0
    d64a:	e7a7      	b.n	d59c <_dtoa_r+0x734>
    d64c:	4620      	mov	r0, r4
    d64e:	9302      	str	r3, [sp, #8]
    d650:	f7fd f81a 	bl	a688 <_Bfree>
    d654:	9b02      	ldr	r3, [sp, #8]
    d656:	2201      	movs	r2, #1
    d658:	e7c6      	b.n	d5e8 <_dtoa_r+0x780>
    d65a:	f7fd f81f 	bl	a69c <__multadd>
    d65e:	464f      	mov	r7, r9
    d660:	4606      	mov	r6, r0
    d662:	4680      	mov	r8, r0
    d664:	e79a      	b.n	d59c <_dtoa_r+0x734>
    d666:	9b01      	ldr	r3, [sp, #4]
    d668:	2b02      	cmp	r3, #2
    d66a:	dc71      	bgt.n	d750 <_dtoa_r+0x8e8>
    d66c:	9b07      	ldr	r3, [sp, #28]
    d66e:	2b00      	cmp	r3, #0
    d670:	f47f af7b 	bne.w	d56a <_dtoa_r+0x702>
    d674:	9b04      	ldr	r3, [sp, #16]
    d676:	4651      	mov	r1, sl
    d678:	3301      	adds	r3, #1
    d67a:	4628      	mov	r0, r5
    d67c:	9304      	str	r3, [sp, #16]
    d67e:	f7ff fb5f 	bl	cd40 <quorem>
    d682:	f8dd b000 	ldr.w	fp, [sp]
    d686:	f100 0330 	add.w	r3, r0, #48	; 0x30
    d68a:	f80b 3b01 	strb.w	r3, [fp], #1
    d68e:	2700      	movs	r7, #0
    d690:	e6eb      	b.n	d46a <_dtoa_r+0x602>
    d692:	4651      	mov	r1, sl
    d694:	4628      	mov	r0, r5
    d696:	f7fd fa57 	bl	ab48 <__mcmp>
    d69a:	2800      	cmp	r0, #0
    d69c:	f6bf aeba 	bge.w	d414 <_dtoa_r+0x5ac>
    d6a0:	4629      	mov	r1, r5
    d6a2:	2300      	movs	r3, #0
    d6a4:	220a      	movs	r2, #10
    d6a6:	4620      	mov	r0, r4
    d6a8:	f7fc fff8 	bl	a69c <__multadd>
    d6ac:	9b04      	ldr	r3, [sp, #16]
    d6ae:	1e5f      	subs	r7, r3, #1
    d6b0:	9b07      	ldr	r3, [sp, #28]
    d6b2:	4605      	mov	r5, r0
    d6b4:	2b00      	cmp	r3, #0
    d6b6:	f47f af4b 	bne.w	d550 <_dtoa_r+0x6e8>
    d6ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d6bc:	2b00      	cmp	r3, #0
    d6be:	f340 8218 	ble.w	daf2 <_dtoa_r+0xc8a>
    d6c2:	4699      	mov	r9, r3
    d6c4:	e6b1      	b.n	d42a <_dtoa_r+0x5c2>
    d6c6:	4bbc      	ldr	r3, [pc, #752]	; (d9b8 <_dtoa_r+0xb50>)
    d6c8:	9300      	str	r3, [sp, #0]
    d6ca:	3303      	adds	r3, #3
    d6cc:	e4a4      	b.n	d018 <_dtoa_r+0x1b0>
    d6ce:	201c      	movs	r0, #28
    d6d0:	e712      	b.n	d4f8 <_dtoa_r+0x690>
    d6d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d6d6:	2800      	cmp	r0, #0
    d6d8:	f47f ae74 	bne.w	d3c4 <_dtoa_r+0x55c>
    d6dc:	f3c1 0213 	ubfx	r2, r1, #0, #20
    d6e0:	2a00      	cmp	r2, #0
    d6e2:	f000 80f4 	beq.w	d8ce <_dtoa_r+0xa66>
    d6e6:	9b02      	ldr	r3, [sp, #8]
    d6e8:	9308      	str	r3, [sp, #32]
    d6ea:	e66d      	b.n	d3c8 <_dtoa_r+0x560>
    d6ec:	2301      	movs	r3, #1
    d6ee:	9307      	str	r3, [sp, #28]
    d6f0:	9b04      	ldr	r3, [sp, #16]
    d6f2:	445b      	add	r3, fp
    d6f4:	f103 0901 	add.w	r9, r3, #1
    d6f8:	f1b9 0f01 	cmp.w	r9, #1
    d6fc:	46cc      	mov	ip, r9
    d6fe:	930b      	str	r3, [sp, #44]	; 0x2c
    d700:	bfb8      	it	lt
    d702:	f04f 0c01 	movlt.w	ip, #1
    d706:	2100      	movs	r1, #0
    d708:	f1bc 0f17 	cmp.w	ip, #23
    d70c:	63e1      	str	r1, [r4, #60]	; 0x3c
    d70e:	f77f acbc 	ble.w	d08a <_dtoa_r+0x222>
    d712:	2001      	movs	r0, #1
    d714:	2204      	movs	r2, #4
    d716:	0052      	lsls	r2, r2, #1
    d718:	f102 0314 	add.w	r3, r2, #20
    d71c:	4563      	cmp	r3, ip
    d71e:	4601      	mov	r1, r0
    d720:	f100 0001 	add.w	r0, r0, #1
    d724:	d9f7      	bls.n	d716 <_dtoa_r+0x8ae>
    d726:	63e1      	str	r1, [r4, #60]	; 0x3c
    d728:	e4af      	b.n	d08a <_dtoa_r+0x222>
    d72a:	2301      	movs	r3, #1
    d72c:	9307      	str	r3, [sp, #28]
    d72e:	f1bb 0f00 	cmp.w	fp, #0
    d732:	dd52      	ble.n	d7da <_dtoa_r+0x972>
    d734:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    d738:	46d9      	mov	r9, fp
    d73a:	46dc      	mov	ip, fp
    d73c:	e7e3      	b.n	d706 <_dtoa_r+0x89e>
    d73e:	2300      	movs	r3, #0
    d740:	9307      	str	r3, [sp, #28]
    d742:	e7d5      	b.n	d6f0 <_dtoa_r+0x888>
    d744:	2300      	movs	r3, #0
    d746:	9307      	str	r3, [sp, #28]
    d748:	e7f1      	b.n	d72e <_dtoa_r+0x8c6>
    d74a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    d74e:	9704      	str	r7, [sp, #16]
    d750:	f1b9 0f00 	cmp.w	r9, #0
    d754:	f47f ada1 	bne.w	d29a <_dtoa_r+0x432>
    d758:	4651      	mov	r1, sl
    d75a:	464b      	mov	r3, r9
    d75c:	2205      	movs	r2, #5
    d75e:	4620      	mov	r0, r4
    d760:	f7fc ff9c 	bl	a69c <__multadd>
    d764:	4601      	mov	r1, r0
    d766:	4682      	mov	sl, r0
    d768:	4628      	mov	r0, r5
    d76a:	f7fd f9ed 	bl	ab48 <__mcmp>
    d76e:	2800      	cmp	r0, #0
    d770:	f77f ad93 	ble.w	d29a <_dtoa_r+0x432>
    d774:	9b04      	ldr	r3, [sp, #16]
    d776:	f103 0b01 	add.w	fp, r3, #1
    d77a:	9b00      	ldr	r3, [sp, #0]
    d77c:	2231      	movs	r2, #49	; 0x31
    d77e:	4698      	mov	r8, r3
    d780:	f803 2b01 	strb.w	r2, [r3], #1
    d784:	9300      	str	r3, [sp, #0]
    d786:	4651      	mov	r1, sl
    d788:	4620      	mov	r0, r4
    d78a:	f7fc ff7d 	bl	a688 <_Bfree>
    d78e:	f10b 0301 	add.w	r3, fp, #1
    d792:	f8dd 9000 	ldr.w	r9, [sp]
    d796:	9304      	str	r3, [sp, #16]
    d798:	f8cd 8000 	str.w	r8, [sp]
    d79c:	2e00      	cmp	r6, #0
    d79e:	f47f ae8f 	bne.w	d4c0 <_dtoa_r+0x658>
    d7a2:	e691      	b.n	d4c8 <_dtoa_r+0x660>
    d7a4:	eba3 0a0a 	sub.w	sl, r3, sl
    d7a8:	e5c5      	b.n	d336 <_dtoa_r+0x4ce>
    d7aa:	4631      	mov	r1, r6
    d7ac:	4652      	mov	r2, sl
    d7ae:	4620      	mov	r0, r4
    d7b0:	f7fd f8f2 	bl	a998 <__pow5mult>
    d7b4:	462a      	mov	r2, r5
    d7b6:	4601      	mov	r1, r0
    d7b8:	4606      	mov	r6, r0
    d7ba:	4620      	mov	r0, r4
    d7bc:	f7fd f83e 	bl	a83c <__multiply>
    d7c0:	4629      	mov	r1, r5
    d7c2:	4605      	mov	r5, r0
    d7c4:	4620      	mov	r0, r4
    d7c6:	f7fc ff5f 	bl	a688 <_Bfree>
    d7ca:	e5ea      	b.n	d3a2 <_dtoa_r+0x53a>
    d7cc:	2002      	movs	r0, #2
    d7ce:	eeb0 5b48 	vmov.f64	d5, d8
    d7d2:	e481      	b.n	d0d8 <_dtoa_r+0x270>
    d7d4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    d7d8:	e68e      	b.n	d4f8 <_dtoa_r+0x690>
    d7da:	f04f 0b01 	mov.w	fp, #1
    d7de:	46d9      	mov	r9, fp
    d7e0:	e44f      	b.n	d082 <_dtoa_r+0x21a>
    d7e2:	d103      	bne.n	d7ec <_dtoa_r+0x984>
    d7e4:	9b01      	ldr	r3, [sp, #4]
    d7e6:	07db      	lsls	r3, r3, #31
    d7e8:	f53f ae4c 	bmi.w	d484 <_dtoa_r+0x61c>
    d7ec:	46d9      	mov	r9, fp
    d7ee:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    d7f2:	2b30      	cmp	r3, #48	; 0x30
    d7f4:	d0fa      	beq.n	d7ec <_dtoa_r+0x984>
    d7f6:	e657      	b.n	d4a8 <_dtoa_r+0x640>
    d7f8:	9b04      	ldr	r3, [sp, #16]
    d7fa:	9a00      	ldr	r2, [sp, #0]
    d7fc:	3301      	adds	r3, #1
    d7fe:	9304      	str	r3, [sp, #16]
    d800:	2331      	movs	r3, #49	; 0x31
    d802:	7013      	strb	r3, [r2, #0]
    d804:	e650      	b.n	d4a8 <_dtoa_r+0x640>
    d806:	f1ba 0f00 	cmp.w	sl, #0
    d80a:	f000 8123 	beq.w	da54 <_dtoa_r+0xbec>
    d80e:	f202 4233 	addw	r2, r2, #1075	; 0x433
    d812:	9b06      	ldr	r3, [sp, #24]
    d814:	9309      	str	r3, [sp, #36]	; 0x24
    d816:	4413      	add	r3, r2
    d818:	f8dd a020 	ldr.w	sl, [sp, #32]
    d81c:	9306      	str	r3, [sp, #24]
    d81e:	4490      	add	r8, r2
    d820:	e592      	b.n	d348 <_dtoa_r+0x4e0>
    d822:	ee07 0a90 	vmov	s15, r0
    d826:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
    d82a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    d82e:	eea6 5b07 	vfma.f64	d5, d6, d7
    d832:	ee15 2a90 	vmov	r2, s11
    d836:	ec51 0b15 	vmov	r0, r1, d5
    d83a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
    d83e:	ec41 0b15 	vmov	d5, r0, r1
    d842:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    d846:	ee36 7b47 	vsub.f64	d7, d6, d7
    d84a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    d84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d852:	f300 8137 	bgt.w	dac4 <_dtoa_r+0xc5c>
    d856:	eeb1 5b45 	vneg.f64	d5, d5
    d85a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    d85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d862:	f57f acfb 	bpl.w	d25c <_dtoa_r+0x3f4>
    d866:	f04f 0a00 	mov.w	sl, #0
    d86a:	4656      	mov	r6, sl
    d86c:	e515      	b.n	d29a <_dtoa_r+0x432>
    d86e:	f000 80f5 	beq.w	da5c <_dtoa_r+0xbf4>
    d872:	9b04      	ldr	r3, [sp, #16]
    d874:	4951      	ldr	r1, [pc, #324]	; (d9bc <_dtoa_r+0xb54>)
    d876:	425a      	negs	r2, r3
    d878:	f002 000f 	and.w	r0, r2, #15
    d87c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    d880:	ed91 6b00 	vldr	d6, [r1]
    d884:	1112      	asrs	r2, r2, #4
    d886:	ee28 6b06 	vmul.f64	d6, d8, d6
    d88a:	f000 8142 	beq.w	db12 <_dtoa_r+0xcaa>
    d88e:	eeb0 7b46 	vmov.f64	d7, d6
    d892:	494b      	ldr	r1, [pc, #300]	; (d9c0 <_dtoa_r+0xb58>)
    d894:	2600      	movs	r6, #0
    d896:	2002      	movs	r0, #2
    d898:	07d3      	lsls	r3, r2, #31
    d89a:	d505      	bpl.n	d8a8 <_dtoa_r+0xa40>
    d89c:	ed91 5b00 	vldr	d5, [r1]
    d8a0:	3001      	adds	r0, #1
    d8a2:	2601      	movs	r6, #1
    d8a4:	ee27 7b05 	vmul.f64	d7, d7, d5
    d8a8:	1052      	asrs	r2, r2, #1
    d8aa:	f101 0108 	add.w	r1, r1, #8
    d8ae:	d1f3      	bne.n	d898 <_dtoa_r+0xa30>
    d8b0:	2e00      	cmp	r6, #0
    d8b2:	fe06 6b07 	vseleq.f64	d6, d6, d7
    d8b6:	e41e      	b.n	d0f6 <_dtoa_r+0x28e>
    d8b8:	9b02      	ldr	r3, [sp, #8]
    d8ba:	2b00      	cmp	r3, #0
    d8bc:	f47f ae37 	bne.w	d52e <_dtoa_r+0x6c6>
    d8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    d8c4:	f3c1 0213 	ubfx	r2, r1, #0, #20
    d8c8:	2a00      	cmp	r2, #0
    d8ca:	f040 8137 	bne.w	db3c <_dtoa_r+0xcd4>
    d8ce:	4a3d      	ldr	r2, [pc, #244]	; (d9c4 <_dtoa_r+0xb5c>)
    d8d0:	400a      	ands	r2, r1
    d8d2:	2a00      	cmp	r2, #0
    d8d4:	f000 80fa 	beq.w	dacc <_dtoa_r+0xc64>
    d8d8:	9b06      	ldr	r3, [sp, #24]
    d8da:	3301      	adds	r3, #1
    d8dc:	9306      	str	r3, [sp, #24]
    d8de:	2301      	movs	r3, #1
    d8e0:	f108 0801 	add.w	r8, r8, #1
    d8e4:	9308      	str	r3, [sp, #32]
    d8e6:	e56f      	b.n	d3c8 <_dtoa_r+0x560>
    d8e8:	4629      	mov	r1, r5
    d8ea:	9a08      	ldr	r2, [sp, #32]
    d8ec:	4620      	mov	r0, r4
    d8ee:	f7fd f853 	bl	a998 <__pow5mult>
    d8f2:	4605      	mov	r5, r0
    d8f4:	e55a      	b.n	d3ac <_dtoa_r+0x544>
    d8f6:	2a00      	cmp	r2, #0
    d8f8:	dd12      	ble.n	d920 <_dtoa_r+0xab8>
    d8fa:	4629      	mov	r1, r5
    d8fc:	2201      	movs	r2, #1
    d8fe:	4620      	mov	r0, r4
    d900:	9301      	str	r3, [sp, #4]
    d902:	f7fd f8a9 	bl	aa58 <__lshift>
    d906:	4651      	mov	r1, sl
    d908:	4605      	mov	r5, r0
    d90a:	f7fd f91d 	bl	ab48 <__mcmp>
    d90e:	2800      	cmp	r0, #0
    d910:	9b01      	ldr	r3, [sp, #4]
    d912:	f340 80e1 	ble.w	dad8 <_dtoa_r+0xc70>
    d916:	2b39      	cmp	r3, #57	; 0x39
    d918:	f000 80ca 	beq.w	dab0 <_dtoa_r+0xc48>
    d91c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    d920:	46b9      	mov	r9, r7
    d922:	f809 3b01 	strb.w	r3, [r9], #1
    d926:	9b04      	ldr	r3, [sp, #16]
    d928:	3301      	adds	r3, #1
    d92a:	4637      	mov	r7, r6
    d92c:	9304      	str	r3, [sp, #16]
    d92e:	4646      	mov	r6, r8
    d930:	e5ba      	b.n	d4a8 <_dtoa_r+0x640>
    d932:	ee38 8b08 	vadd.f64	d8, d8, d8
    d936:	eeb4 8bc6 	vcmpe.f64	d8, d6
    d93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d93e:	dc0a      	bgt.n	d956 <_dtoa_r+0xaee>
    d940:	eeb4 8b46 	vcmp.f64	d8, d6
    d944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d948:	f47f acdc 	bne.w	d304 <_dtoa_r+0x49c>
    d94c:	ee17 3a10 	vmov	r3, s14
    d950:	07d8      	lsls	r0, r3, #31
    d952:	f57f acd7 	bpl.w	d304 <_dtoa_r+0x49c>
    d956:	9a00      	ldr	r2, [sp, #0]
    d958:	e454      	b.n	d204 <_dtoa_r+0x39c>
    d95a:	6871      	ldr	r1, [r6, #4]
    d95c:	4620      	mov	r0, r4
    d95e:	f7fc fe6d 	bl	a63c <_Balloc>
    d962:	4607      	mov	r7, r0
    d964:	2800      	cmp	r0, #0
    d966:	f000 80de 	beq.w	db26 <_dtoa_r+0xcbe>
    d96a:	6933      	ldr	r3, [r6, #16]
    d96c:	3302      	adds	r3, #2
    d96e:	009a      	lsls	r2, r3, #2
    d970:	f106 010c 	add.w	r1, r6, #12
    d974:	300c      	adds	r0, #12
    d976:	f7f9 fb2d 	bl	6fd4 <memcpy>
    d97a:	4639      	mov	r1, r7
    d97c:	2201      	movs	r2, #1
    d97e:	4620      	mov	r0, r4
    d980:	f7fd f86a 	bl	aa58 <__lshift>
    d984:	4680      	mov	r8, r0
    d986:	e5fe      	b.n	d586 <_dtoa_r+0x71e>
    d988:	9b06      	ldr	r3, [sp, #24]
    d98a:	eba3 0309 	sub.w	r3, r3, r9
    d98e:	9309      	str	r3, [sp, #36]	; 0x24
    d990:	e4da      	b.n	d348 <_dtoa_r+0x4e0>
    d992:	2b39      	cmp	r3, #57	; 0x39
    d994:	f000 808c 	beq.w	dab0 <_dtoa_r+0xc48>
    d998:	46b9      	mov	r9, r7
    d99a:	3301      	adds	r3, #1
    d99c:	e7c1      	b.n	d922 <_dtoa_r+0xaba>
    d99e:	9a04      	ldr	r2, [sp, #16]
    d9a0:	3201      	adds	r2, #1
    d9a2:	4637      	mov	r7, r6
    d9a4:	9204      	str	r2, [sp, #16]
    d9a6:	4646      	mov	r6, r8
    d9a8:	e55f      	b.n	d46a <_dtoa_r+0x602>
    d9aa:	4629      	mov	r1, r5
    d9ac:	4620      	mov	r0, r4
    d9ae:	f7fc fff3 	bl	a998 <__pow5mult>
    d9b2:	4605      	mov	r5, r0
    d9b4:	e4fa      	b.n	d3ac <_dtoa_r+0x544>
    d9b6:	bf00      	nop
    d9b8:	20000a7c 	.word	0x20000a7c
    d9bc:	200002a8 	.word	0x200002a8
    d9c0:	20000280 	.word	0x20000280
    d9c4:	7ff00000 	.word	0x7ff00000
    d9c8:	4b5e      	ldr	r3, [pc, #376]	; (db44 <_dtoa_r+0xcdc>)
    d9ca:	eefd 5bc6 	vcvt.s32.f64	s11, d6
    d9ce:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    d9d2:	ed1c 3b02 	vldr	d3, [ip, #-8]
    d9d6:	eeb8 7be5 	vcvt.f64.s32	d7, s11
    d9da:	ee36 7b47 	vsub.f64	d7, d6, d7
    d9de:	ec41 0b16 	vmov	d6, r0, r1
    d9e2:	ee15 1a90 	vmov	r1, s11
    d9e6:	ee23 3b06 	vmul.f64	d3, d3, d6
    d9ea:	9800      	ldr	r0, [sp, #0]
    d9ec:	3130      	adds	r1, #48	; 0x30
    d9ee:	2a01      	cmp	r2, #1
    d9f0:	f800 1b01 	strb.w	r1, [r0], #1
    d9f4:	f000 8083 	beq.w	dafe <_dtoa_r+0xc96>
    d9f8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    d9fc:	9b00      	ldr	r3, [sp, #0]
    d9fe:	1899      	adds	r1, r3, r2
    da00:	ee27 7b04 	vmul.f64	d7, d7, d4
    da04:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    da08:	ee16 3a90 	vmov	r3, s13
    da0c:	3330      	adds	r3, #48	; 0x30
    da0e:	f800 3b01 	strb.w	r3, [r0], #1
    da12:	4281      	cmp	r1, r0
    da14:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    da18:	ee37 7b45 	vsub.f64	d7, d7, d5
    da1c:	d1f0      	bne.n	da00 <_dtoa_r+0xb98>
    da1e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    da22:	ee33 5b06 	vadd.f64	d5, d3, d6
    da26:	eeb4 5bc7 	vcmpe.f64	d5, d7
    da2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da2e:	f53f abe3 	bmi.w	d1f8 <_dtoa_r+0x390>
    da32:	ee36 6b43 	vsub.f64	d6, d6, d3
    da36:	eeb4 6bc7 	vcmpe.f64	d6, d7
    da3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da3e:	f77f ac0d 	ble.w	d25c <_dtoa_r+0x3f4>
    da42:	4689      	mov	r9, r1
    da44:	3901      	subs	r1, #1
    da46:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    da4a:	2b30      	cmp	r3, #48	; 0x30
    da4c:	d0f9      	beq.n	da42 <_dtoa_r+0xbda>
    da4e:	1c73      	adds	r3, r6, #1
    da50:	9304      	str	r3, [sp, #16]
    da52:	e539      	b.n	d4c8 <_dtoa_r+0x660>
    da54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    da56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
    da5a:	e6da      	b.n	d812 <_dtoa_r+0x9aa>
    da5c:	2002      	movs	r0, #2
    da5e:	eeb0 6b48 	vmov.f64	d6, d8
    da62:	f7ff bb48 	b.w	d0f6 <_dtoa_r+0x28e>
    da66:	f1b9 0f00 	cmp.w	r9, #0
    da6a:	f43f aeda 	beq.w	d822 <_dtoa_r+0x9ba>
    da6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    da70:	2a00      	cmp	r2, #0
    da72:	f77f abf3 	ble.w	d25c <_dtoa_r+0x3f4>
    da76:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    da7a:	ee26 6b04 	vmul.f64	d6, d6, d4
    da7e:	3001      	adds	r0, #1
    da80:	ee07 0a90 	vmov	s15, r0
    da84:	9b04      	ldr	r3, [sp, #16]
    da86:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    da8a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    da8e:	eea6 7b05 	vfma.f64	d7, d6, d5
    da92:	ee17 ca90 	vmov	ip, s15
    da96:	ec51 0b17 	vmov	r0, r1, d7
    da9a:	1e5e      	subs	r6, r3, #1
    da9c:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
    daa0:	f7ff bb47 	b.w	d132 <_dtoa_r+0x2ca>
    daa4:	9b04      	ldr	r3, [sp, #16]
    daa6:	3301      	adds	r3, #1
    daa8:	9304      	str	r3, [sp, #16]
    daaa:	2331      	movs	r3, #49	; 0x31
    daac:	f7ff bbb1 	b.w	d212 <_dtoa_r+0x3aa>
    dab0:	9b04      	ldr	r3, [sp, #16]
    dab2:	46bb      	mov	fp, r7
    dab4:	3301      	adds	r3, #1
    dab6:	9304      	str	r3, [sp, #16]
    dab8:	2339      	movs	r3, #57	; 0x39
    daba:	4637      	mov	r7, r6
    dabc:	f80b 3b01 	strb.w	r3, [fp], #1
    dac0:	4646      	mov	r6, r8
    dac2:	e4e1      	b.n	d488 <_dtoa_r+0x620>
    dac4:	f04f 0a00 	mov.w	sl, #0
    dac8:	4656      	mov	r6, sl
    daca:	e653      	b.n	d774 <_dtoa_r+0x90c>
    dacc:	9208      	str	r2, [sp, #32]
    dace:	e47b      	b.n	d3c8 <_dtoa_r+0x560>
    dad0:	1c73      	adds	r3, r6, #1
    dad2:	9304      	str	r3, [sp, #16]
    dad4:	4689      	mov	r9, r1
    dad6:	e4f7      	b.n	d4c8 <_dtoa_r+0x660>
    dad8:	f47f af22 	bne.w	d920 <_dtoa_r+0xab8>
    dadc:	07da      	lsls	r2, r3, #31
    dade:	f57f af1f 	bpl.w	d920 <_dtoa_r+0xab8>
    dae2:	e718      	b.n	d916 <_dtoa_r+0xaae>
    dae4:	2b39      	cmp	r3, #57	; 0x39
    dae6:	d0e3      	beq.n	dab0 <_dtoa_r+0xc48>
    dae8:	f1b9 0f00 	cmp.w	r9, #0
    daec:	f73f af16 	bgt.w	d91c <_dtoa_r+0xab4>
    daf0:	e716      	b.n	d920 <_dtoa_r+0xab8>
    daf2:	9b01      	ldr	r3, [sp, #4]
    daf4:	2b02      	cmp	r3, #2
    daf6:	f73f ae28 	bgt.w	d74a <_dtoa_r+0x8e2>
    dafa:	9704      	str	r7, [sp, #16]
    dafc:	e5ba      	b.n	d674 <_dtoa_r+0x80c>
    dafe:	4601      	mov	r1, r0
    db00:	e78d      	b.n	da1e <_dtoa_r+0xbb6>
    db02:	9b01      	ldr	r3, [sp, #4]
    db04:	2b02      	cmp	r3, #2
    db06:	f73f ae20 	bgt.w	d74a <_dtoa_r+0x8e2>
    db0a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    db0e:	9704      	str	r7, [sp, #16]
    db10:	e52b      	b.n	d56a <_dtoa_r+0x702>
    db12:	2002      	movs	r0, #2
    db14:	f7ff baef 	b.w	d0f6 <_dtoa_r+0x28e>
    db18:	4b0b      	ldr	r3, [pc, #44]	; (db48 <_dtoa_r+0xce0>)
    db1a:	480c      	ldr	r0, [pc, #48]	; (db4c <_dtoa_r+0xce4>)
    db1c:	2200      	movs	r2, #0
    db1e:	f240 11af 	movw	r1, #431	; 0x1af
    db22:	f7ff f8b1 	bl	cc88 <__assert_func>
    db26:	4b08      	ldr	r3, [pc, #32]	; (db48 <_dtoa_r+0xce0>)
    db28:	4808      	ldr	r0, [pc, #32]	; (db4c <_dtoa_r+0xce4>)
    db2a:	463a      	mov	r2, r7
    db2c:	f240 21ef 	movw	r1, #751	; 0x2ef
    db30:	f7ff f8aa 	bl	cc88 <__assert_func>
    db34:	4b06      	ldr	r3, [pc, #24]	; (db50 <_dtoa_r+0xce8>)
    db36:	9300      	str	r3, [sp, #0]
    db38:	f7ff b9d2 	b.w	cee0 <_dtoa_r+0x78>
    db3c:	9b02      	ldr	r3, [sp, #8]
    db3e:	9308      	str	r3, [sp, #32]
    db40:	e4f7      	b.n	d532 <_dtoa_r+0x6ca>
    db42:	bf00      	nop
    db44:	200002a8 	.word	0x200002a8
    db48:	200008fc 	.word	0x200008fc
    db4c:	20000a80 	.word	0x20000a80
    db50:	20000a70 	.word	0x20000a70

0000db54 <_wcrtomb_r>:
    db54:	b570      	push	{r4, r5, r6, lr}
    db56:	4605      	mov	r5, r0
    db58:	b084      	sub	sp, #16
    db5a:	b15b      	cbz	r3, db74 <_wcrtomb_r+0x20>
    db5c:	461c      	mov	r4, r3
    db5e:	b169      	cbz	r1, db7c <_wcrtomb_r+0x28>
    db60:	4b0e      	ldr	r3, [pc, #56]	; (db9c <_wcrtomb_r+0x48>)
    db62:	4628      	mov	r0, r5
    db64:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    db68:	4623      	mov	r3, r4
    db6a:	47b0      	blx	r6
    db6c:	1c43      	adds	r3, r0, #1
    db6e:	d00f      	beq.n	db90 <_wcrtomb_r+0x3c>
    db70:	b004      	add	sp, #16
    db72:	bd70      	pop	{r4, r5, r6, pc}
    db74:	f500 7482 	add.w	r4, r0, #260	; 0x104
    db78:	2900      	cmp	r1, #0
    db7a:	d1f1      	bne.n	db60 <_wcrtomb_r+0xc>
    db7c:	4a07      	ldr	r2, [pc, #28]	; (db9c <_wcrtomb_r+0x48>)
    db7e:	4623      	mov	r3, r4
    db80:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    db84:	4628      	mov	r0, r5
    db86:	460a      	mov	r2, r1
    db88:	a901      	add	r1, sp, #4
    db8a:	47b0      	blx	r6
    db8c:	1c43      	adds	r3, r0, #1
    db8e:	d1ef      	bne.n	db70 <_wcrtomb_r+0x1c>
    db90:	2200      	movs	r2, #0
    db92:	238a      	movs	r3, #138	; 0x8a
    db94:	6022      	str	r2, [r4, #0]
    db96:	602b      	str	r3, [r5, #0]
    db98:	b004      	add	sp, #16
    db9a:	bd70      	pop	{r4, r5, r6, pc}
    db9c:	200041cc 	.word	0x200041cc

0000dba0 <_wcsrtombs_r>:
    dba0:	b510      	push	{r4, lr}
    dba2:	b082      	sub	sp, #8
    dba4:	9c04      	ldr	r4, [sp, #16]
    dba6:	e9cd 3400 	strd	r3, r4, [sp]
    dbaa:	f04f 33ff 	mov.w	r3, #4294967295
    dbae:	f001 fbc7 	bl	f340 <_wcsnrtombs_r>
    dbb2:	b002      	add	sp, #8
    dbb4:	bd10      	pop	{r4, pc}
    dbb6:	bf00      	nop

0000dbb8 <fiprintf>:
    dbb8:	b40e      	push	{r1, r2, r3}
    dbba:	b510      	push	{r4, lr}
    dbbc:	b083      	sub	sp, #12
    dbbe:	ab05      	add	r3, sp, #20
    dbc0:	4c06      	ldr	r4, [pc, #24]	; (dbdc <fiprintf+0x24>)
    dbc2:	f853 2b04 	ldr.w	r2, [r3], #4
    dbc6:	9301      	str	r3, [sp, #4]
    dbc8:	4601      	mov	r1, r0
    dbca:	6820      	ldr	r0, [r4, #0]
    dbcc:	f000 f8c4 	bl	dd58 <_vfiprintf_r>
    dbd0:	b003      	add	sp, #12
    dbd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbd6:	b003      	add	sp, #12
    dbd8:	4770      	bx	lr
    dbda:	bf00      	nop
    dbdc:	20004754 	.word	0x20004754

0000dbe0 <__ssprint_r>:
    dbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbe4:	6893      	ldr	r3, [r2, #8]
    dbe6:	6817      	ldr	r7, [r2, #0]
    dbe8:	b083      	sub	sp, #12
    dbea:	4692      	mov	sl, r2
    dbec:	2b00      	cmp	r3, #0
    dbee:	d070      	beq.n	dcd2 <__ssprint_r+0xf2>
    dbf0:	4681      	mov	r9, r0
    dbf2:	688a      	ldr	r2, [r1, #8]
    dbf4:	6808      	ldr	r0, [r1, #0]
    dbf6:	460c      	mov	r4, r1
    dbf8:	3708      	adds	r7, #8
    dbfa:	e043      	b.n	dc84 <__ssprint_r+0xa4>
    dbfc:	89a3      	ldrh	r3, [r4, #12]
    dbfe:	f413 6f90 	tst.w	r3, #1152	; 0x480
    dc02:	d02e      	beq.n	dc62 <__ssprint_r+0x82>
    dc04:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    dc08:	eba0 0801 	sub.w	r8, r0, r1
    dc0c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    dc10:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    dc14:	f108 0001 	add.w	r0, r8, #1
    dc18:	1076      	asrs	r6, r6, #1
    dc1a:	4428      	add	r0, r5
    dc1c:	42b0      	cmp	r0, r6
    dc1e:	4632      	mov	r2, r6
    dc20:	bf84      	itt	hi
    dc22:	4606      	movhi	r6, r0
    dc24:	4632      	movhi	r2, r6
    dc26:	055b      	lsls	r3, r3, #21
    dc28:	d537      	bpl.n	dc9a <__ssprint_r+0xba>
    dc2a:	4611      	mov	r1, r2
    dc2c:	4648      	mov	r0, r9
    dc2e:	f7fa ff81 	bl	8b34 <_malloc_r>
    dc32:	9001      	str	r0, [sp, #4]
    dc34:	2800      	cmp	r0, #0
    dc36:	d03a      	beq.n	dcae <__ssprint_r+0xce>
    dc38:	4642      	mov	r2, r8
    dc3a:	6921      	ldr	r1, [r4, #16]
    dc3c:	f7f9 f9ca 	bl	6fd4 <memcpy>
    dc40:	89a2      	ldrh	r2, [r4, #12]
    dc42:	9b01      	ldr	r3, [sp, #4]
    dc44:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    dc48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    dc4c:	81a2      	strh	r2, [r4, #12]
    dc4e:	eba6 0208 	sub.w	r2, r6, r8
    dc52:	eb03 0008 	add.w	r0, r3, r8
    dc56:	6166      	str	r6, [r4, #20]
    dc58:	60a2      	str	r2, [r4, #8]
    dc5a:	6123      	str	r3, [r4, #16]
    dc5c:	6020      	str	r0, [r4, #0]
    dc5e:	462e      	mov	r6, r5
    dc60:	46a8      	mov	r8, r5
    dc62:	4642      	mov	r2, r8
    dc64:	4659      	mov	r1, fp
    dc66:	f7fb fee1 	bl	9a2c <memmove>
    dc6a:	f8da 3008 	ldr.w	r3, [sl, #8]
    dc6e:	68a2      	ldr	r2, [r4, #8]
    dc70:	6820      	ldr	r0, [r4, #0]
    dc72:	1b92      	subs	r2, r2, r6
    dc74:	4440      	add	r0, r8
    dc76:	1b5b      	subs	r3, r3, r5
    dc78:	60a2      	str	r2, [r4, #8]
    dc7a:	6020      	str	r0, [r4, #0]
    dc7c:	f8ca 3008 	str.w	r3, [sl, #8]
    dc80:	b33b      	cbz	r3, dcd2 <__ssprint_r+0xf2>
    dc82:	3708      	adds	r7, #8
    dc84:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    dc88:	2d00      	cmp	r5, #0
    dc8a:	d0fa      	beq.n	dc82 <__ssprint_r+0xa2>
    dc8c:	42aa      	cmp	r2, r5
    dc8e:	4616      	mov	r6, r2
    dc90:	4690      	mov	r8, r2
    dc92:	d9b3      	bls.n	dbfc <__ssprint_r+0x1c>
    dc94:	462e      	mov	r6, r5
    dc96:	46a8      	mov	r8, r5
    dc98:	e7e3      	b.n	dc62 <__ssprint_r+0x82>
    dc9a:	4648      	mov	r0, r9
    dc9c:	f7fb fa12 	bl	90c4 <_realloc_r>
    dca0:	4603      	mov	r3, r0
    dca2:	2800      	cmp	r0, #0
    dca4:	d1d3      	bne.n	dc4e <__ssprint_r+0x6e>
    dca6:	6921      	ldr	r1, [r4, #16]
    dca8:	4648      	mov	r0, r9
    dcaa:	f7fc fbab 	bl	a404 <_free_r>
    dcae:	89a3      	ldrh	r3, [r4, #12]
    dcb0:	220c      	movs	r2, #12
    dcb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dcb6:	f8c9 2000 	str.w	r2, [r9]
    dcba:	f04f 30ff 	mov.w	r0, #4294967295
    dcbe:	81a3      	strh	r3, [r4, #12]
    dcc0:	2200      	movs	r2, #0
    dcc2:	2300      	movs	r3, #0
    dcc4:	f8ca 2008 	str.w	r2, [sl, #8]
    dcc8:	f8ca 3004 	str.w	r3, [sl, #4]
    dccc:	b003      	add	sp, #12
    dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcd2:	2000      	movs	r0, #0
    dcd4:	2300      	movs	r3, #0
    dcd6:	f8ca 3004 	str.w	r3, [sl, #4]
    dcda:	b003      	add	sp, #12
    dcdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000dce0 <__sprint_r.part.0>:
    dce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dce4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    dce6:	049c      	lsls	r4, r3, #18
    dce8:	4690      	mov	r8, r2
    dcea:	d52d      	bpl.n	dd48 <__sprint_r.part.0+0x68>
    dcec:	6893      	ldr	r3, [r2, #8]
    dcee:	6812      	ldr	r2, [r2, #0]
    dcf0:	b343      	cbz	r3, dd44 <__sprint_r.part.0+0x64>
    dcf2:	468b      	mov	fp, r1
    dcf4:	4606      	mov	r6, r0
    dcf6:	f102 0908 	add.w	r9, r2, #8
    dcfa:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    dcfe:	ea5f 079a 	movs.w	r7, sl, lsr #2
    dd02:	d015      	beq.n	dd30 <__sprint_r.part.0+0x50>
    dd04:	3d04      	subs	r5, #4
    dd06:	2400      	movs	r4, #0
    dd08:	e001      	b.n	dd0e <__sprint_r.part.0+0x2e>
    dd0a:	42a7      	cmp	r7, r4
    dd0c:	d00e      	beq.n	dd2c <__sprint_r.part.0+0x4c>
    dd0e:	f855 1f04 	ldr.w	r1, [r5, #4]!
    dd12:	465a      	mov	r2, fp
    dd14:	4630      	mov	r0, r6
    dd16:	f001 fa5b 	bl	f1d0 <_fputwc_r>
    dd1a:	1c43      	adds	r3, r0, #1
    dd1c:	f104 0401 	add.w	r4, r4, #1
    dd20:	d1f3      	bne.n	dd0a <__sprint_r.part.0+0x2a>
    dd22:	2300      	movs	r3, #0
    dd24:	e9c8 3301 	strd	r3, r3, [r8, #4]
    dd28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    dd30:	f02a 0a03 	bic.w	sl, sl, #3
    dd34:	eba3 030a 	sub.w	r3, r3, sl
    dd38:	f8c8 3008 	str.w	r3, [r8, #8]
    dd3c:	f109 0908 	add.w	r9, r9, #8
    dd40:	2b00      	cmp	r3, #0
    dd42:	d1da      	bne.n	dcfa <__sprint_r.part.0+0x1a>
    dd44:	2000      	movs	r0, #0
    dd46:	e7ec      	b.n	dd22 <__sprint_r.part.0+0x42>
    dd48:	f001 f80c 	bl	ed64 <__sfvwrite_r>
    dd4c:	2300      	movs	r3, #0
    dd4e:	e9c8 3301 	strd	r3, r3, [r8, #4]
    dd52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd56:	bf00      	nop

0000dd58 <_vfiprintf_r>:
    dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd5c:	ed2d 8b02 	vpush	{d8}
    dd60:	b0c5      	sub	sp, #276	; 0x114
    dd62:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    dd66:	4683      	mov	fp, r0
    dd68:	ee08 1a10 	vmov	s16, r1
    dd6c:	4616      	mov	r6, r2
    dd6e:	2100      	movs	r1, #0
    dd70:	2208      	movs	r2, #8
    dd72:	4650      	mov	r0, sl
    dd74:	461c      	mov	r4, r3
    dd76:	9307      	str	r3, [sp, #28]
    dd78:	f7fb fed4 	bl	9b24 <memset>
    dd7c:	f1bb 0f00 	cmp.w	fp, #0
    dd80:	d004      	beq.n	dd8c <_vfiprintf_r+0x34>
    dd82:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    dd86:	2b00      	cmp	r3, #0
    dd88:	f000 86a0 	beq.w	eacc <_vfiprintf_r+0xd74>
    dd8c:	ee18 2a10 	vmov	r2, s16
    dd90:	6e53      	ldr	r3, [r2, #100]	; 0x64
    dd92:	07db      	lsls	r3, r3, #31
    dd94:	f140 8513 	bpl.w	e7be <_vfiprintf_r+0xa66>
    dd98:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    dd9c:	b28a      	uxth	r2, r1
    dd9e:	0495      	lsls	r5, r2, #18
    dda0:	d40b      	bmi.n	ddba <_vfiprintf_r+0x62>
    dda2:	ee18 3a10 	vmov	r3, s16
    dda6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    ddaa:	8199      	strh	r1, [r3, #12]
    ddac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ddae:	b28a      	uxth	r2, r1
    ddb0:	ee18 1a10 	vmov	r1, s16
    ddb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    ddb8:	664b      	str	r3, [r1, #100]	; 0x64
    ddba:	0710      	lsls	r0, r2, #28
    ddbc:	f140 8105 	bpl.w	dfca <_vfiprintf_r+0x272>
    ddc0:	ee18 3a10 	vmov	r3, s16
    ddc4:	691b      	ldr	r3, [r3, #16]
    ddc6:	2b00      	cmp	r3, #0
    ddc8:	f000 80ff 	beq.w	dfca <_vfiprintf_r+0x272>
    ddcc:	f002 031a 	and.w	r3, r2, #26
    ddd0:	2b0a      	cmp	r3, #10
    ddd2:	f000 810a 	beq.w	dfea <_vfiprintf_r+0x292>
    ddd6:	2300      	movs	r3, #0
    ddd8:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    dddc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    dde0:	aa1b      	add	r2, sp, #108	; 0x6c
    dde2:	930c      	str	r3, [sp, #48]	; 0x30
    dde4:	9218      	str	r2, [sp, #96]	; 0x60
    dde6:	4691      	mov	r9, r2
    dde8:	930b      	str	r3, [sp, #44]	; 0x2c
    ddea:	9305      	str	r3, [sp, #20]
    ddec:	46b0      	mov	r8, r6
    ddee:	4644      	mov	r4, r8
    ddf0:	4ba8      	ldr	r3, [pc, #672]	; (e094 <_vfiprintf_r+0x33c>)
    ddf2:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    ddf6:	f7fb ff7f 	bl	9cf8 <__locale_mb_cur_max>
    ddfa:	4622      	mov	r2, r4
    ddfc:	4603      	mov	r3, r0
    ddfe:	a912      	add	r1, sp, #72	; 0x48
    de00:	f8cd a000 	str.w	sl, [sp]
    de04:	4658      	mov	r0, fp
    de06:	47a8      	blx	r5
    de08:	2800      	cmp	r0, #0
    de0a:	f000 8145 	beq.w	e098 <_vfiprintf_r+0x340>
    de0e:	f2c0 8139 	blt.w	e084 <_vfiprintf_r+0x32c>
    de12:	9a12      	ldr	r2, [sp, #72]	; 0x48
    de14:	2a25      	cmp	r2, #37	; 0x25
    de16:	4603      	mov	r3, r0
    de18:	d001      	beq.n	de1e <_vfiprintf_r+0xc6>
    de1a:	441c      	add	r4, r3
    de1c:	e7e8      	b.n	ddf0 <_vfiprintf_r+0x98>
    de1e:	ebb4 0608 	subs.w	r6, r4, r8
    de22:	4605      	mov	r5, r0
    de24:	f040 813c 	bne.w	e0a0 <_vfiprintf_r+0x348>
    de28:	2300      	movs	r3, #0
    de2a:	7861      	ldrb	r1, [r4, #1]
    de2c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    de30:	f104 0801 	add.w	r8, r4, #1
    de34:	9306      	str	r3, [sp, #24]
    de36:	f04f 37ff 	mov.w	r7, #4294967295
    de3a:	461e      	mov	r6, r3
    de3c:	242b      	movs	r4, #43	; 0x2b
    de3e:	f108 0801 	add.w	r8, r8, #1
    de42:	f1a1 0320 	sub.w	r3, r1, #32
    de46:	2b5a      	cmp	r3, #90	; 0x5a
    de48:	f200 8178 	bhi.w	e13c <_vfiprintf_r+0x3e4>
    de4c:	e8df f013 	tbh	[pc, r3, lsl #1]
    de50:	017602b5 	.word	0x017602b5
    de54:	02b00176 	.word	0x02b00176
    de58:	01760176 	.word	0x01760176
    de5c:	006a0176 	.word	0x006a0176
    de60:	01760176 	.word	0x01760176
    de64:	028d027d 	.word	0x028d027d
    de68:	02880176 	.word	0x02880176
    de6c:	01760297 	.word	0x01760297
    de70:	005b0292 	.word	0x005b0292
    de74:	005b005b 	.word	0x005b005b
    de78:	005b005b 	.word	0x005b005b
    de7c:	005b005b 	.word	0x005b005b
    de80:	005b005b 	.word	0x005b005b
    de84:	01760176 	.word	0x01760176
    de88:	01760176 	.word	0x01760176
    de8c:	01760176 	.word	0x01760176
    de90:	01760176 	.word	0x01760176
    de94:	025c0176 	.word	0x025c0176
    de98:	01760084 	.word	0x01760084
    de9c:	01760176 	.word	0x01760176
    dea0:	01760176 	.word	0x01760176
    dea4:	01760176 	.word	0x01760176
    dea8:	01760176 	.word	0x01760176
    deac:	00e80176 	.word	0x00e80176
    deb0:	01760176 	.word	0x01760176
    deb4:	02330176 	.word	0x02330176
    deb8:	02da0176 	.word	0x02da0176
    debc:	01760176 	.word	0x01760176
    dec0:	0176058b 	.word	0x0176058b
    dec4:	01760176 	.word	0x01760176
    dec8:	01760176 	.word	0x01760176
    decc:	01760176 	.word	0x01760176
    ded0:	01760176 	.word	0x01760176
    ded4:	025c0176 	.word	0x025c0176
    ded8:	01760086 	.word	0x01760086
    dedc:	01760176 	.word	0x01760176
    dee0:	008602cd 	.word	0x008602cd
    dee4:	0176007f 	.word	0x0176007f
    dee8:	017602c0 	.word	0x017602c0
    deec:	00ea02fd 	.word	0x00ea02fd
    def0:	007f02ed 	.word	0x007f02ed
    def4:	02330176 	.word	0x02330176
    def8:	0569007c 	.word	0x0569007c
    defc:	01760176 	.word	0x01760176
    df00:	0176056b 	.word	0x0176056b
    df04:	007c      	.short	0x007c
    df06:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    df0a:	2200      	movs	r2, #0
    df0c:	f818 1b01 	ldrb.w	r1, [r8], #1
    df10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    df14:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    df18:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    df1c:	2b09      	cmp	r3, #9
    df1e:	d9f5      	bls.n	df0c <_vfiprintf_r+0x1b4>
    df20:	9206      	str	r2, [sp, #24]
    df22:	e78e      	b.n	de42 <_vfiprintf_r+0xea>
    df24:	4658      	mov	r0, fp
    df26:	f7fe fe1b 	bl	cb60 <_localeconv_r>
    df2a:	6843      	ldr	r3, [r0, #4]
    df2c:	930d      	str	r3, [sp, #52]	; 0x34
    df2e:	4618      	mov	r0, r3
    df30:	f7fc f966 	bl	a200 <strlen>
    df34:	900e      	str	r0, [sp, #56]	; 0x38
    df36:	4605      	mov	r5, r0
    df38:	4658      	mov	r0, fp
    df3a:	f7fe fe11 	bl	cb60 <_localeconv_r>
    df3e:	6883      	ldr	r3, [r0, #8]
    df40:	930b      	str	r3, [sp, #44]	; 0x2c
    df42:	2d00      	cmp	r5, #0
    df44:	f040 84d6 	bne.w	e8f4 <_vfiprintf_r+0xb9c>
    df48:	f898 1000 	ldrb.w	r1, [r8]
    df4c:	e777      	b.n	de3e <_vfiprintf_r+0xe6>
    df4e:	f898 1000 	ldrb.w	r1, [r8]
    df52:	f046 0620 	orr.w	r6, r6, #32
    df56:	e772      	b.n	de3e <_vfiprintf_r+0xe6>
    df58:	f046 0610 	orr.w	r6, r6, #16
    df5c:	06b4      	lsls	r4, r6, #26
    df5e:	f140 818e 	bpl.w	e27e <_vfiprintf_r+0x526>
    df62:	9b07      	ldr	r3, [sp, #28]
    df64:	3307      	adds	r3, #7
    df66:	f023 0307 	bic.w	r3, r3, #7
    df6a:	461a      	mov	r2, r3
    df6c:	6859      	ldr	r1, [r3, #4]
    df6e:	f852 3b08 	ldr.w	r3, [r2], #8
    df72:	9207      	str	r2, [sp, #28]
    df74:	460a      	mov	r2, r1
    df76:	2900      	cmp	r1, #0
    df78:	f2c0 8470 	blt.w	e85c <_vfiprintf_r+0xb04>
    df7c:	1c79      	adds	r1, r7, #1
    df7e:	f000 85a2 	beq.w	eac6 <_vfiprintf_r+0xd6e>
    df82:	f026 0180 	bic.w	r1, r6, #128	; 0x80
    df86:	9103      	str	r1, [sp, #12]
    df88:	ea53 0102 	orrs.w	r1, r3, r2
    df8c:	f000 843f 	beq.w	e80e <_vfiprintf_r+0xab6>
    df90:	2b0a      	cmp	r3, #10
    df92:	f172 0100 	sbcs.w	r1, r2, #0
    df96:	f080 8541 	bcs.w	ea1c <_vfiprintf_r+0xcc4>
    df9a:	3330      	adds	r3, #48	; 0x30
    df9c:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    dfa0:	9e03      	ldr	r6, [sp, #12]
    dfa2:	2301      	movs	r3, #1
    dfa4:	9304      	str	r3, [sp, #16]
    dfa6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    dfaa:	9b04      	ldr	r3, [sp, #16]
    dfac:	42bb      	cmp	r3, r7
    dfae:	bfb8      	it	lt
    dfb0:	463b      	movlt	r3, r7
    dfb2:	9303      	str	r3, [sp, #12]
    dfb4:	2300      	movs	r3, #0
    dfb6:	9308      	str	r3, [sp, #32]
    dfb8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    dfbc:	2b00      	cmp	r3, #0
    dfbe:	f000 80cb 	beq.w	e158 <_vfiprintf_r+0x400>
    dfc2:	9b03      	ldr	r3, [sp, #12]
    dfc4:	3301      	adds	r3, #1
    dfc6:	9303      	str	r3, [sp, #12]
    dfc8:	e0c6      	b.n	e158 <_vfiprintf_r+0x400>
    dfca:	ee18 1a10 	vmov	r1, s16
    dfce:	4658      	mov	r0, fp
    dfd0:	ee18 5a10 	vmov	r5, s16
    dfd4:	f001 f840 	bl	f058 <__swsetup_r>
    dfd8:	2800      	cmp	r0, #0
    dfda:	f040 8652 	bne.w	ec82 <_vfiprintf_r+0xf2a>
    dfde:	89aa      	ldrh	r2, [r5, #12]
    dfe0:	f002 031a 	and.w	r3, r2, #26
    dfe4:	2b0a      	cmp	r3, #10
    dfe6:	f47f aef6 	bne.w	ddd6 <_vfiprintf_r+0x7e>
    dfea:	ee18 1a10 	vmov	r1, s16
    dfee:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
    dff2:	2b00      	cmp	r3, #0
    dff4:	f6ff aeef 	blt.w	ddd6 <_vfiprintf_r+0x7e>
    dff8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    dffa:	07db      	lsls	r3, r3, #31
    dffc:	d402      	bmi.n	e004 <_vfiprintf_r+0x2ac>
    dffe:	0597      	lsls	r7, r2, #22
    e000:	f140 8612 	bpl.w	ec28 <_vfiprintf_r+0xed0>
    e004:	ee18 1a10 	vmov	r1, s16
    e008:	4623      	mov	r3, r4
    e00a:	4632      	mov	r2, r6
    e00c:	4658      	mov	r0, fp
    e00e:	f000 fe69 	bl	ece4 <__sbprintf>
    e012:	9005      	str	r0, [sp, #20]
    e014:	9805      	ldr	r0, [sp, #20]
    e016:	b045      	add	sp, #276	; 0x114
    e018:	ecbd 8b02 	vpop	{d8}
    e01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e020:	f046 0610 	orr.w	r6, r6, #16
    e024:	f016 0220 	ands.w	r2, r6, #32
    e028:	f000 8136 	beq.w	e298 <_vfiprintf_r+0x540>
    e02c:	9b07      	ldr	r3, [sp, #28]
    e02e:	3307      	adds	r3, #7
    e030:	f023 0307 	bic.w	r3, r3, #7
    e034:	4619      	mov	r1, r3
    e036:	685a      	ldr	r2, [r3, #4]
    e038:	f851 3b08 	ldr.w	r3, [r1], #8
    e03c:	9107      	str	r1, [sp, #28]
    e03e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    e042:	9103      	str	r1, [sp, #12]
    e044:	2100      	movs	r1, #0
    e046:	2000      	movs	r0, #0
    e048:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    e04c:	1c78      	adds	r0, r7, #1
    e04e:	f000 8210 	beq.w	e472 <_vfiprintf_r+0x71a>
    e052:	9803      	ldr	r0, [sp, #12]
    e054:	f020 0680 	bic.w	r6, r0, #128	; 0x80
    e058:	ea53 0002 	orrs.w	r0, r3, r2
    e05c:	f040 8208 	bne.w	e470 <_vfiprintf_r+0x718>
    e060:	2f00      	cmp	r7, #0
    e062:	f040 8538 	bne.w	ead6 <_vfiprintf_r+0xd7e>
    e066:	2900      	cmp	r1, #0
    e068:	f040 83d5 	bne.w	e816 <_vfiprintf_r+0xabe>
    e06c:	9b03      	ldr	r3, [sp, #12]
    e06e:	f013 0301 	ands.w	r3, r3, #1
    e072:	9304      	str	r3, [sp, #16]
    e074:	f000 8411 	beq.w	e89a <_vfiprintf_r+0xb42>
    e078:	2330      	movs	r3, #48	; 0x30
    e07a:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
    e07e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
    e082:	e792      	b.n	dfaa <_vfiprintf_r+0x252>
    e084:	2208      	movs	r2, #8
    e086:	2100      	movs	r1, #0
    e088:	4650      	mov	r0, sl
    e08a:	f7fb fd4b 	bl	9b24 <memset>
    e08e:	2301      	movs	r3, #1
    e090:	441c      	add	r4, r3
    e092:	e6ad      	b.n	ddf0 <_vfiprintf_r+0x98>
    e094:	200041cc 	.word	0x200041cc
    e098:	ebb4 0608 	subs.w	r6, r4, r8
    e09c:	4605      	mov	r5, r0
    e09e:	d01b      	beq.n	e0d8 <_vfiprintf_r+0x380>
    e0a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e0a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e0a4:	3301      	adds	r3, #1
    e0a6:	4432      	add	r2, r6
    e0a8:	2b07      	cmp	r3, #7
    e0aa:	e9c9 8600 	strd	r8, r6, [r9]
    e0ae:	921a      	str	r2, [sp, #104]	; 0x68
    e0b0:	9319      	str	r3, [sp, #100]	; 0x64
    e0b2:	dd1c      	ble.n	e0ee <_vfiprintf_r+0x396>
    e0b4:	2a00      	cmp	r2, #0
    e0b6:	f000 83a6 	beq.w	e806 <_vfiprintf_r+0xaae>
    e0ba:	ee18 1a10 	vmov	r1, s16
    e0be:	aa18      	add	r2, sp, #96	; 0x60
    e0c0:	4658      	mov	r0, fp
    e0c2:	f7ff fe0d 	bl	dce0 <__sprint_r.part.0>
    e0c6:	bb20      	cbnz	r0, e112 <_vfiprintf_r+0x3ba>
    e0c8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e0cc:	9b05      	ldr	r3, [sp, #20]
    e0ce:	4433      	add	r3, r6
    e0d0:	9305      	str	r3, [sp, #20]
    e0d2:	2d00      	cmp	r5, #0
    e0d4:	f47f aea8 	bne.w	de28 <_vfiprintf_r+0xd0>
    e0d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e0da:	2b00      	cmp	r3, #0
    e0dc:	f040 85c1 	bne.w	ec62 <_vfiprintf_r+0xf0a>
    e0e0:	ee18 3a10 	vmov	r3, s16
    e0e4:	2200      	movs	r2, #0
    e0e6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    e0ea:	9219      	str	r2, [sp, #100]	; 0x64
    e0ec:	e015      	b.n	e11a <_vfiprintf_r+0x3c2>
    e0ee:	f109 0908 	add.w	r9, r9, #8
    e0f2:	e7eb      	b.n	e0cc <_vfiprintf_r+0x374>
    e0f4:	ee18 1a10 	vmov	r1, s16
    e0f8:	aa18      	add	r2, sp, #96	; 0x60
    e0fa:	4658      	mov	r0, fp
    e0fc:	f7ff fdf0 	bl	dce0 <__sprint_r.part.0>
    e100:	2800      	cmp	r0, #0
    e102:	f000 80a6 	beq.w	e252 <_vfiprintf_r+0x4fa>
    e106:	9b08      	ldr	r3, [sp, #32]
    e108:	b11b      	cbz	r3, e112 <_vfiprintf_r+0x3ba>
    e10a:	9908      	ldr	r1, [sp, #32]
    e10c:	4658      	mov	r0, fp
    e10e:	f7fc f979 	bl	a404 <_free_r>
    e112:	ee18 3a10 	vmov	r3, s16
    e116:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    e11a:	ee18 2a10 	vmov	r2, s16
    e11e:	6e52      	ldr	r2, [r2, #100]	; 0x64
    e120:	f012 0f01 	tst.w	r2, #1
    e124:	b29a      	uxth	r2, r3
    e126:	f000 80a0 	beq.w	e26a <_vfiprintf_r+0x512>
    e12a:	0650      	lsls	r0, r2, #25
    e12c:	f100 85b2 	bmi.w	ec94 <_vfiprintf_r+0xf3c>
    e130:	9805      	ldr	r0, [sp, #20]
    e132:	b045      	add	sp, #276	; 0x114
    e134:	ecbd 8b02 	vpop	{d8}
    e138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e13c:	2900      	cmp	r1, #0
    e13e:	d0cb      	beq.n	e0d8 <_vfiprintf_r+0x380>
    e140:	2300      	movs	r3, #0
    e142:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    e146:	2301      	movs	r3, #1
    e148:	e9cd 3303 	strd	r3, r3, [sp, #12]
    e14c:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
    e150:	ac2b      	add	r4, sp, #172	; 0xac
    e152:	2300      	movs	r3, #0
    e154:	9308      	str	r3, [sp, #32]
    e156:	461f      	mov	r7, r3
    e158:	f016 0302 	ands.w	r3, r6, #2
    e15c:	9309      	str	r3, [sp, #36]	; 0x24
    e15e:	d002      	beq.n	e166 <_vfiprintf_r+0x40e>
    e160:	9b03      	ldr	r3, [sp, #12]
    e162:	3302      	adds	r3, #2
    e164:	9303      	str	r3, [sp, #12]
    e166:	f016 0384 	ands.w	r3, r6, #132	; 0x84
    e16a:	930a      	str	r3, [sp, #40]	; 0x28
    e16c:	d105      	bne.n	e17a <_vfiprintf_r+0x422>
    e16e:	9b06      	ldr	r3, [sp, #24]
    e170:	9a03      	ldr	r2, [sp, #12]
    e172:	1a9d      	subs	r5, r3, r2
    e174:	2d00      	cmp	r5, #0
    e176:	f300 827b 	bgt.w	e670 <_vfiprintf_r+0x918>
    e17a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    e17e:	1c41      	adds	r1, r0, #1
    e180:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    e184:	b182      	cbz	r2, e1a8 <_vfiprintf_r+0x450>
    e186:	2201      	movs	r2, #1
    e188:	3301      	adds	r3, #1
    e18a:	f8c9 2004 	str.w	r2, [r9, #4]
    e18e:	2907      	cmp	r1, #7
    e190:	f10d 0243 	add.w	r2, sp, #67	; 0x43
    e194:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    e198:	f8c9 2000 	str.w	r2, [r9]
    e19c:	f300 824a 	bgt.w	e634 <_vfiprintf_r+0x8dc>
    e1a0:	4608      	mov	r0, r1
    e1a2:	f109 0908 	add.w	r9, r9, #8
    e1a6:	3101      	adds	r1, #1
    e1a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e1aa:	b1e2      	cbz	r2, e1e6 <_vfiprintf_r+0x48e>
    e1ac:	aa11      	add	r2, sp, #68	; 0x44
    e1ae:	3302      	adds	r3, #2
    e1b0:	f8c9 2000 	str.w	r2, [r9]
    e1b4:	2907      	cmp	r1, #7
    e1b6:	f04f 0202 	mov.w	r2, #2
    e1ba:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    e1be:	f8c9 2004 	str.w	r2, [r9, #4]
    e1c2:	f340 8250 	ble.w	e666 <_vfiprintf_r+0x90e>
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	f000 8343 	beq.w	e852 <_vfiprintf_r+0xafa>
    e1cc:	ee18 1a10 	vmov	r1, s16
    e1d0:	aa18      	add	r2, sp, #96	; 0x60
    e1d2:	4658      	mov	r0, fp
    e1d4:	f7ff fd84 	bl	dce0 <__sprint_r.part.0>
    e1d8:	2800      	cmp	r0, #0
    e1da:	d194      	bne.n	e106 <_vfiprintf_r+0x3ae>
    e1dc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    e1e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e1e4:	1c41      	adds	r1, r0, #1
    e1e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e1e8:	2a80      	cmp	r2, #128	; 0x80
    e1ea:	f000 8184 	beq.w	e4f6 <_vfiprintf_r+0x79e>
    e1ee:	9a04      	ldr	r2, [sp, #16]
    e1f0:	1abd      	subs	r5, r7, r2
    e1f2:	2d00      	cmp	r5, #0
    e1f4:	f300 81d7 	bgt.w	e5a6 <_vfiprintf_r+0x84e>
    e1f8:	9a04      	ldr	r2, [sp, #16]
    e1fa:	f8c9 4000 	str.w	r4, [r9]
    e1fe:	4413      	add	r3, r2
    e200:	2907      	cmp	r1, #7
    e202:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    e206:	f8c9 2004 	str.w	r2, [r9, #4]
    e20a:	f340 816e 	ble.w	e4ea <_vfiprintf_r+0x792>
    e20e:	2b00      	cmp	r3, #0
    e210:	f000 8275 	beq.w	e6fe <_vfiprintf_r+0x9a6>
    e214:	ee18 1a10 	vmov	r1, s16
    e218:	aa18      	add	r2, sp, #96	; 0x60
    e21a:	4658      	mov	r0, fp
    e21c:	f7ff fd60 	bl	dce0 <__sprint_r.part.0>
    e220:	2800      	cmp	r0, #0
    e222:	f47f af70 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e226:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e228:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e22c:	0775      	lsls	r5, r6, #29
    e22e:	d505      	bpl.n	e23c <_vfiprintf_r+0x4e4>
    e230:	9a06      	ldr	r2, [sp, #24]
    e232:	9903      	ldr	r1, [sp, #12]
    e234:	1a54      	subs	r4, r2, r1
    e236:	2c00      	cmp	r4, #0
    e238:	f300 826b 	bgt.w	e712 <_vfiprintf_r+0x9ba>
    e23c:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
    e240:	9803      	ldr	r0, [sp, #12]
    e242:	4281      	cmp	r1, r0
    e244:	bfac      	ite	ge
    e246:	1852      	addge	r2, r2, r1
    e248:	1812      	addlt	r2, r2, r0
    e24a:	9205      	str	r2, [sp, #20]
    e24c:	2b00      	cmp	r3, #0
    e24e:	f47f af51 	bne.w	e0f4 <_vfiprintf_r+0x39c>
    e252:	9908      	ldr	r1, [sp, #32]
    e254:	2300      	movs	r3, #0
    e256:	9319      	str	r3, [sp, #100]	; 0x64
    e258:	2900      	cmp	r1, #0
    e25a:	f000 8149 	beq.w	e4f0 <_vfiprintf_r+0x798>
    e25e:	4658      	mov	r0, fp
    e260:	f7fc f8d0 	bl	a404 <_free_r>
    e264:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e268:	e5c1      	b.n	ddee <_vfiprintf_r+0x96>
    e26a:	059c      	lsls	r4, r3, #22
    e26c:	f53f af5d 	bmi.w	e12a <_vfiprintf_r+0x3d2>
    e270:	ee18 4a10 	vmov	r4, s16
    e274:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e276:	f7fb fddb 	bl	9e30 <__retarget_lock_release_recursive>
    e27a:	89a2      	ldrh	r2, [r4, #12]
    e27c:	e755      	b.n	e12a <_vfiprintf_r+0x3d2>
    e27e:	06f0      	lsls	r0, r6, #27
    e280:	9a07      	ldr	r2, [sp, #28]
    e282:	f100 831f 	bmi.w	e8c4 <_vfiprintf_r+0xb6c>
    e286:	0671      	lsls	r1, r6, #25
    e288:	f140 8319 	bpl.w	e8be <_vfiprintf_r+0xb66>
    e28c:	f932 3b04 	ldrsh.w	r3, [r2], #4
    e290:	9207      	str	r2, [sp, #28]
    e292:	17da      	asrs	r2, r3, #31
    e294:	4611      	mov	r1, r2
    e296:	e66e      	b.n	df76 <_vfiprintf_r+0x21e>
    e298:	f016 0310 	ands.w	r3, r6, #16
    e29c:	9907      	ldr	r1, [sp, #28]
    e29e:	f040 8309 	bne.w	e8b4 <_vfiprintf_r+0xb5c>
    e2a2:	f016 0040 	ands.w	r0, r6, #64	; 0x40
    e2a6:	f000 8301 	beq.w	e8ac <_vfiprintf_r+0xb54>
    e2aa:	461a      	mov	r2, r3
    e2ac:	f851 3b04 	ldr.w	r3, [r1], #4
    e2b0:	9107      	str	r1, [sp, #28]
    e2b2:	b29b      	uxth	r3, r3
    e2b4:	e6c3      	b.n	e03e <_vfiprintf_r+0x2e6>
    e2b6:	9b07      	ldr	r3, [sp, #28]
    e2b8:	461a      	mov	r2, r3
    e2ba:	2300      	movs	r3, #0
    e2bc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    e2c0:	4613      	mov	r3, r2
    e2c2:	f853 4b04 	ldr.w	r4, [r3], #4
    e2c6:	9303      	str	r3, [sp, #12]
    e2c8:	2c00      	cmp	r4, #0
    e2ca:	f000 8412 	beq.w	eaf2 <_vfiprintf_r+0xd9a>
    e2ce:	2953      	cmp	r1, #83	; 0x53
    e2d0:	f000 8365 	beq.w	e99e <_vfiprintf_r+0xc46>
    e2d4:	f016 0510 	ands.w	r5, r6, #16
    e2d8:	f040 8361 	bne.w	e99e <_vfiprintf_r+0xc46>
    e2dc:	1c7b      	adds	r3, r7, #1
    e2de:	f000 84b3 	beq.w	ec48 <_vfiprintf_r+0xef0>
    e2e2:	463a      	mov	r2, r7
    e2e4:	4629      	mov	r1, r5
    e2e6:	4620      	mov	r0, r4
    e2e8:	f7fe fc42 	bl	cb70 <memchr>
    e2ec:	9008      	str	r0, [sp, #32]
    e2ee:	2800      	cmp	r0, #0
    e2f0:	f000 849f 	beq.w	ec32 <_vfiprintf_r+0xeda>
    e2f4:	1b03      	subs	r3, r0, r4
    e2f6:	9a03      	ldr	r2, [sp, #12]
    e2f8:	9304      	str	r3, [sp, #16]
    e2fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e2fe:	462f      	mov	r7, r5
    e300:	9207      	str	r2, [sp, #28]
    e302:	9303      	str	r3, [sp, #12]
    e304:	9508      	str	r5, [sp, #32]
    e306:	e657      	b.n	dfb8 <_vfiprintf_r+0x260>
    e308:	2943      	cmp	r1, #67	; 0x43
    e30a:	d002      	beq.n	e312 <_vfiprintf_r+0x5ba>
    e30c:	06f5      	lsls	r5, r6, #27
    e30e:	f140 832d 	bpl.w	e96c <_vfiprintf_r+0xc14>
    e312:	9d07      	ldr	r5, [sp, #28]
    e314:	2208      	movs	r2, #8
    e316:	2100      	movs	r1, #0
    e318:	a816      	add	r0, sp, #88	; 0x58
    e31a:	ac2b      	add	r4, sp, #172	; 0xac
    e31c:	f7fb fc02 	bl	9b24 <memset>
    e320:	ab16      	add	r3, sp, #88	; 0x58
    e322:	f855 2b04 	ldr.w	r2, [r5], #4
    e326:	4621      	mov	r1, r4
    e328:	4658      	mov	r0, fp
    e32a:	f7ff fc13 	bl	db54 <_wcrtomb_r>
    e32e:	4603      	mov	r3, r0
    e330:	3301      	adds	r3, #1
    e332:	9004      	str	r0, [sp, #16]
    e334:	f000 84b3 	beq.w	ec9e <_vfiprintf_r+0xf46>
    e338:	9b04      	ldr	r3, [sp, #16]
    e33a:	9507      	str	r5, [sp, #28]
    e33c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e340:	9303      	str	r3, [sp, #12]
    e342:	2300      	movs	r3, #0
    e344:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    e348:	e703      	b.n	e152 <_vfiprintf_r+0x3fa>
    e34a:	9b07      	ldr	r3, [sp, #28]
    e34c:	f853 2b04 	ldr.w	r2, [r3], #4
    e350:	9206      	str	r2, [sp, #24]
    e352:	2a00      	cmp	r2, #0
    e354:	f280 829c 	bge.w	e890 <_vfiprintf_r+0xb38>
    e358:	9a06      	ldr	r2, [sp, #24]
    e35a:	4252      	negs	r2, r2
    e35c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    e360:	f898 1000 	ldrb.w	r1, [r8]
    e364:	f046 0604 	orr.w	r6, r6, #4
    e368:	e569      	b.n	de3e <_vfiprintf_r+0xe6>
    e36a:	f898 1000 	ldrb.w	r1, [r8]
    e36e:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
    e372:	e564      	b.n	de3e <_vfiprintf_r+0xe6>
    e374:	f898 1000 	ldrb.w	r1, [r8]
    e378:	f046 0680 	orr.w	r6, r6, #128	; 0x80
    e37c:	e55f      	b.n	de3e <_vfiprintf_r+0xe6>
    e37e:	4642      	mov	r2, r8
    e380:	f812 1b01 	ldrb.w	r1, [r2], #1
    e384:	292a      	cmp	r1, #42	; 0x2a
    e386:	f000 8496 	beq.w	ecb6 <_vfiprintf_r+0xf5e>
    e38a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    e38e:	2b09      	cmp	r3, #9
    e390:	4690      	mov	r8, r2
    e392:	f04f 0700 	mov.w	r7, #0
    e396:	f63f ad54 	bhi.w	de42 <_vfiprintf_r+0xea>
    e39a:	f818 1b01 	ldrb.w	r1, [r8], #1
    e39e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    e3a2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
    e3a6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    e3aa:	2b09      	cmp	r3, #9
    e3ac:	d9f5      	bls.n	e39a <_vfiprintf_r+0x642>
    e3ae:	e548      	b.n	de42 <_vfiprintf_r+0xea>
    e3b0:	f898 1000 	ldrb.w	r1, [r8]
    e3b4:	f046 0601 	orr.w	r6, r6, #1
    e3b8:	e541      	b.n	de3e <_vfiprintf_r+0xe6>
    e3ba:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    e3be:	2b00      	cmp	r3, #0
    e3c0:	f47f adc2 	bne.w	df48 <_vfiprintf_r+0x1f0>
    e3c4:	2320      	movs	r3, #32
    e3c6:	f898 1000 	ldrb.w	r1, [r8]
    e3ca:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    e3ce:	e536      	b.n	de3e <_vfiprintf_r+0xe6>
    e3d0:	f898 1000 	ldrb.w	r1, [r8]
    e3d4:	296c      	cmp	r1, #108	; 0x6c
    e3d6:	bf03      	ittte	eq
    e3d8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    e3dc:	f046 0620 	orreq.w	r6, r6, #32
    e3e0:	f108 0801 	addeq.w	r8, r8, #1
    e3e4:	f046 0610 	orrne.w	r6, r6, #16
    e3e8:	e529      	b.n	de3e <_vfiprintf_r+0xe6>
    e3ea:	f898 1000 	ldrb.w	r1, [r8]
    e3ee:	2968      	cmp	r1, #104	; 0x68
    e3f0:	bf03      	ittte	eq
    e3f2:	f898 1001 	ldrbeq.w	r1, [r8, #1]
    e3f6:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
    e3fa:	f108 0801 	addeq.w	r8, r8, #1
    e3fe:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
    e402:	e51c      	b.n	de3e <_vfiprintf_r+0xe6>
    e404:	f046 0310 	orr.w	r3, r6, #16
    e408:	9303      	str	r3, [sp, #12]
    e40a:	9b03      	ldr	r3, [sp, #12]
    e40c:	f013 0220 	ands.w	r2, r3, #32
    e410:	f000 8206 	beq.w	e820 <_vfiprintf_r+0xac8>
    e414:	9b07      	ldr	r3, [sp, #28]
    e416:	3307      	adds	r3, #7
    e418:	f023 0307 	bic.w	r3, r3, #7
    e41c:	4619      	mov	r1, r3
    e41e:	685a      	ldr	r2, [r3, #4]
    e420:	f851 3b08 	ldr.w	r3, [r1], #8
    e424:	9107      	str	r1, [sp, #28]
    e426:	2101      	movs	r1, #1
    e428:	e60d      	b.n	e046 <_vfiprintf_r+0x2ee>
    e42a:	9a07      	ldr	r2, [sp, #28]
    e42c:	f046 0302 	orr.w	r3, r6, #2
    e430:	9303      	str	r3, [sp, #12]
    e432:	f852 3b04 	ldr.w	r3, [r2], #4
    e436:	9207      	str	r2, [sp, #28]
    e438:	f647 0230 	movw	r2, #30768	; 0x7830
    e43c:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
    e440:	4ab8      	ldr	r2, [pc, #736]	; (e724 <_vfiprintf_r+0x9cc>)
    e442:	920c      	str	r2, [sp, #48]	; 0x30
    e444:	2102      	movs	r1, #2
    e446:	2200      	movs	r2, #0
    e448:	e5fd      	b.n	e046 <_vfiprintf_r+0x2ee>
    e44a:	06b7      	lsls	r7, r6, #26
    e44c:	f100 8248 	bmi.w	e8e0 <_vfiprintf_r+0xb88>
    e450:	06f5      	lsls	r5, r6, #27
    e452:	f100 8346 	bmi.w	eae2 <_vfiprintf_r+0xd8a>
    e456:	0674      	lsls	r4, r6, #25
    e458:	f100 83d5 	bmi.w	ec06 <_vfiprintf_r+0xeae>
    e45c:	05b0      	lsls	r0, r6, #22
    e45e:	f140 8340 	bpl.w	eae2 <_vfiprintf_r+0xd8a>
    e462:	9b07      	ldr	r3, [sp, #28]
    e464:	9905      	ldr	r1, [sp, #20]
    e466:	f853 2b04 	ldr.w	r2, [r3], #4
    e46a:	9307      	str	r3, [sp, #28]
    e46c:	7011      	strb	r1, [r2, #0]
    e46e:	e4be      	b.n	ddee <_vfiprintf_r+0x96>
    e470:	9603      	str	r6, [sp, #12]
    e472:	2901      	cmp	r1, #1
    e474:	f43f ad8c 	beq.w	df90 <_vfiprintf_r+0x238>
    e478:	2902      	cmp	r1, #2
    e47a:	ac44      	add	r4, sp, #272	; 0x110
    e47c:	d111      	bne.n	e4a2 <_vfiprintf_r+0x74a>
    e47e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e480:	f003 010f 	and.w	r1, r3, #15
    e484:	091b      	lsrs	r3, r3, #4
    e486:	5c41      	ldrb	r1, [r0, r1]
    e488:	f804 1d01 	strb.w	r1, [r4, #-1]!
    e48c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    e490:	0912      	lsrs	r2, r2, #4
    e492:	ea53 0102 	orrs.w	r1, r3, r2
    e496:	d1f3      	bne.n	e480 <_vfiprintf_r+0x728>
    e498:	9e03      	ldr	r6, [sp, #12]
    e49a:	ab44      	add	r3, sp, #272	; 0x110
    e49c:	1b1b      	subs	r3, r3, r4
    e49e:	9304      	str	r3, [sp, #16]
    e4a0:	e583      	b.n	dfaa <_vfiprintf_r+0x252>
    e4a2:	f003 0107 	and.w	r1, r3, #7
    e4a6:	08db      	lsrs	r3, r3, #3
    e4a8:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    e4ac:	08d2      	lsrs	r2, r2, #3
    e4ae:	3130      	adds	r1, #48	; 0x30
    e4b0:	ea53 0502 	orrs.w	r5, r3, r2
    e4b4:	4620      	mov	r0, r4
    e4b6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    e4ba:	d1f2      	bne.n	e4a2 <_vfiprintf_r+0x74a>
    e4bc:	9e03      	ldr	r6, [sp, #12]
    e4be:	07f3      	lsls	r3, r6, #31
    e4c0:	d5eb      	bpl.n	e49a <_vfiprintf_r+0x742>
    e4c2:	2930      	cmp	r1, #48	; 0x30
    e4c4:	d0e8      	beq.n	e498 <_vfiprintf_r+0x740>
    e4c6:	2330      	movs	r3, #48	; 0x30
    e4c8:	3802      	subs	r0, #2
    e4ca:	f804 3c01 	strb.w	r3, [r4, #-1]
    e4ce:	ab44      	add	r3, sp, #272	; 0x110
    e4d0:	1a1b      	subs	r3, r3, r0
    e4d2:	9e03      	ldr	r6, [sp, #12]
    e4d4:	9304      	str	r3, [sp, #16]
    e4d6:	4604      	mov	r4, r0
    e4d8:	e567      	b.n	dfaa <_vfiprintf_r+0x252>
    e4da:	9b04      	ldr	r3, [sp, #16]
    e4dc:	941b      	str	r4, [sp, #108]	; 0x6c
    e4de:	2201      	movs	r2, #1
    e4e0:	931c      	str	r3, [sp, #112]	; 0x70
    e4e2:	931a      	str	r3, [sp, #104]	; 0x68
    e4e4:	9219      	str	r2, [sp, #100]	; 0x64
    e4e6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e4ea:	f109 0908 	add.w	r9, r9, #8
    e4ee:	e69d      	b.n	e22c <_vfiprintf_r+0x4d4>
    e4f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e4f4:	e47b      	b.n	ddee <_vfiprintf_r+0x96>
    e4f6:	9a06      	ldr	r2, [sp, #24]
    e4f8:	9d03      	ldr	r5, [sp, #12]
    e4fa:	1b55      	subs	r5, r2, r5
    e4fc:	2d00      	cmp	r5, #0
    e4fe:	f77f ae76 	ble.w	e1ee <_vfiprintf_r+0x496>
    e502:	2d10      	cmp	r5, #16
    e504:	f340 83bb 	ble.w	ec7e <_vfiprintf_r+0xf26>
    e508:	9409      	str	r4, [sp, #36]	; 0x24
    e50a:	ee18 4a10 	vmov	r4, s16
    e50e:	e007      	b.n	e520 <_vfiprintf_r+0x7c8>
    e510:	f100 0c02 	add.w	ip, r0, #2
    e514:	f109 0908 	add.w	r9, r9, #8
    e518:	4610      	mov	r0, r2
    e51a:	3d10      	subs	r5, #16
    e51c:	2d10      	cmp	r5, #16
    e51e:	dd1e      	ble.n	e55e <_vfiprintf_r+0x806>
    e520:	4981      	ldr	r1, [pc, #516]	; (e728 <_vfiprintf_r+0x9d0>)
    e522:	f8c9 1000 	str.w	r1, [r9]
    e526:	1c42      	adds	r2, r0, #1
    e528:	3310      	adds	r3, #16
    e52a:	2110      	movs	r1, #16
    e52c:	2a07      	cmp	r2, #7
    e52e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    e532:	f8c9 1004 	str.w	r1, [r9, #4]
    e536:	ddeb      	ble.n	e510 <_vfiprintf_r+0x7b8>
    e538:	aa18      	add	r2, sp, #96	; 0x60
    e53a:	2b00      	cmp	r3, #0
    e53c:	d074      	beq.n	e628 <_vfiprintf_r+0x8d0>
    e53e:	4621      	mov	r1, r4
    e540:	4658      	mov	r0, fp
    e542:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e546:	f7ff fbcb 	bl	dce0 <__sprint_r.part.0>
    e54a:	2800      	cmp	r0, #0
    e54c:	f47f addb 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e550:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    e554:	3d10      	subs	r5, #16
    e556:	2d10      	cmp	r5, #16
    e558:	f100 0c01 	add.w	ip, r0, #1
    e55c:	dce0      	bgt.n	e520 <_vfiprintf_r+0x7c8>
    e55e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e560:	4a71      	ldr	r2, [pc, #452]	; (e728 <_vfiprintf_r+0x9d0>)
    e562:	f8c9 5004 	str.w	r5, [r9, #4]
    e566:	442b      	add	r3, r5
    e568:	f1bc 0f07 	cmp.w	ip, #7
    e56c:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
    e570:	f8c9 2000 	str.w	r2, [r9]
    e574:	f340 8194 	ble.w	e8a0 <_vfiprintf_r+0xb48>
    e578:	2b00      	cmp	r3, #0
    e57a:	f000 831f 	beq.w	ebbc <_vfiprintf_r+0xe64>
    e57e:	ee18 1a10 	vmov	r1, s16
    e582:	aa18      	add	r2, sp, #96	; 0x60
    e584:	4658      	mov	r0, fp
    e586:	f7ff fbab 	bl	dce0 <__sprint_r.part.0>
    e58a:	2800      	cmp	r0, #0
    e58c:	f47f adbb 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e590:	9a04      	ldr	r2, [sp, #16]
    e592:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    e596:	1abd      	subs	r5, r7, r2
    e598:	2d00      	cmp	r5, #0
    e59a:	f100 0101 	add.w	r1, r0, #1
    e59e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e5a2:	f77f ae29 	ble.w	e1f8 <_vfiprintf_r+0x4a0>
    e5a6:	2d10      	cmp	r5, #16
    e5a8:	dd29      	ble.n	e5fe <_vfiprintf_r+0x8a6>
    e5aa:	9409      	str	r4, [sp, #36]	; 0x24
    e5ac:	2710      	movs	r7, #16
    e5ae:	ee18 4a10 	vmov	r4, s16
    e5b2:	e007      	b.n	e5c4 <_vfiprintf_r+0x86c>
    e5b4:	f100 0c02 	add.w	ip, r0, #2
    e5b8:	f109 0908 	add.w	r9, r9, #8
    e5bc:	4610      	mov	r0, r2
    e5be:	3d10      	subs	r5, #16
    e5c0:	2d10      	cmp	r5, #16
    e5c2:	dd1a      	ble.n	e5fa <_vfiprintf_r+0x8a2>
    e5c4:	1c42      	adds	r2, r0, #1
    e5c6:	4958      	ldr	r1, [pc, #352]	; (e728 <_vfiprintf_r+0x9d0>)
    e5c8:	3310      	adds	r3, #16
    e5ca:	2a07      	cmp	r2, #7
    e5cc:	e9c9 1700 	strd	r1, r7, [r9]
    e5d0:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    e5d4:	ddee      	ble.n	e5b4 <_vfiprintf_r+0x85c>
    e5d6:	aa18      	add	r2, sp, #96	; 0x60
    e5d8:	b303      	cbz	r3, e61c <_vfiprintf_r+0x8c4>
    e5da:	4621      	mov	r1, r4
    e5dc:	4658      	mov	r0, fp
    e5de:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e5e2:	f7ff fb7d 	bl	dce0 <__sprint_r.part.0>
    e5e6:	2800      	cmp	r0, #0
    e5e8:	f47f ad8d 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e5ec:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    e5f0:	3d10      	subs	r5, #16
    e5f2:	2d10      	cmp	r5, #16
    e5f4:	f100 0c01 	add.w	ip, r0, #1
    e5f8:	dce4      	bgt.n	e5c4 <_vfiprintf_r+0x86c>
    e5fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e5fc:	4661      	mov	r1, ip
    e5fe:	4a4a      	ldr	r2, [pc, #296]	; (e728 <_vfiprintf_r+0x9d0>)
    e600:	f8c9 5004 	str.w	r5, [r9, #4]
    e604:	442b      	add	r3, r5
    e606:	2907      	cmp	r1, #7
    e608:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
    e60c:	f8c9 2000 	str.w	r2, [r9]
    e610:	f300 80e7 	bgt.w	e7e2 <_vfiprintf_r+0xa8a>
    e614:	f109 0908 	add.w	r9, r9, #8
    e618:	3101      	adds	r1, #1
    e61a:	e5ed      	b.n	e1f8 <_vfiprintf_r+0x4a0>
    e61c:	f04f 0c01 	mov.w	ip, #1
    e620:	4618      	mov	r0, r3
    e622:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e626:	e7ca      	b.n	e5be <_vfiprintf_r+0x866>
    e628:	f04f 0c01 	mov.w	ip, #1
    e62c:	4618      	mov	r0, r3
    e62e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e632:	e772      	b.n	e51a <_vfiprintf_r+0x7c2>
    e634:	2b00      	cmp	r3, #0
    e636:	f000 8104 	beq.w	e842 <_vfiprintf_r+0xaea>
    e63a:	ee18 1a10 	vmov	r1, s16
    e63e:	aa18      	add	r2, sp, #96	; 0x60
    e640:	4658      	mov	r0, fp
    e642:	f7ff fb4d 	bl	dce0 <__sprint_r.part.0>
    e646:	2800      	cmp	r0, #0
    e648:	f47f ad5d 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e64c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    e650:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e654:	1c41      	adds	r1, r0, #1
    e656:	e5a7      	b.n	e1a8 <_vfiprintf_r+0x450>
    e658:	2302      	movs	r3, #2
    e65a:	aa11      	add	r2, sp, #68	; 0x44
    e65c:	931c      	str	r3, [sp, #112]	; 0x70
    e65e:	921b      	str	r2, [sp, #108]	; 0x6c
    e660:	2101      	movs	r1, #1
    e662:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e666:	4608      	mov	r0, r1
    e668:	f109 0908 	add.w	r9, r9, #8
    e66c:	1c41      	adds	r1, r0, #1
    e66e:	e5ba      	b.n	e1e6 <_vfiprintf_r+0x48e>
    e670:	2d10      	cmp	r5, #16
    e672:	f340 82e5 	ble.w	ec40 <_vfiprintf_r+0xee8>
    e676:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    e67a:	940f      	str	r4, [sp, #60]	; 0x3c
    e67c:	4608      	mov	r0, r1
    e67e:	ee18 4a10 	vmov	r4, s16
    e682:	e007      	b.n	e694 <_vfiprintf_r+0x93c>
    e684:	f100 0c02 	add.w	ip, r0, #2
    e688:	f109 0908 	add.w	r9, r9, #8
    e68c:	4610      	mov	r0, r2
    e68e:	3d10      	subs	r5, #16
    e690:	2d10      	cmp	r5, #16
    e692:	dd1d      	ble.n	e6d0 <_vfiprintf_r+0x978>
    e694:	4925      	ldr	r1, [pc, #148]	; (e72c <_vfiprintf_r+0x9d4>)
    e696:	f8c9 1000 	str.w	r1, [r9]
    e69a:	1c42      	adds	r2, r0, #1
    e69c:	3310      	adds	r3, #16
    e69e:	2110      	movs	r1, #16
    e6a0:	2a07      	cmp	r2, #7
    e6a2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    e6a6:	f8c9 1004 	str.w	r1, [r9, #4]
    e6aa:	ddeb      	ble.n	e684 <_vfiprintf_r+0x92c>
    e6ac:	aa18      	add	r2, sp, #96	; 0x60
    e6ae:	b303      	cbz	r3, e6f2 <_vfiprintf_r+0x99a>
    e6b0:	4621      	mov	r1, r4
    e6b2:	4658      	mov	r0, fp
    e6b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e6b8:	f7ff fb12 	bl	dce0 <__sprint_r.part.0>
    e6bc:	2800      	cmp	r0, #0
    e6be:	f47f ad22 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e6c2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    e6c6:	3d10      	subs	r5, #16
    e6c8:	2d10      	cmp	r5, #16
    e6ca:	f100 0c01 	add.w	ip, r0, #1
    e6ce:	dce1      	bgt.n	e694 <_vfiprintf_r+0x93c>
    e6d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    e6d2:	4660      	mov	r0, ip
    e6d4:	4a15      	ldr	r2, [pc, #84]	; (e72c <_vfiprintf_r+0x9d4>)
    e6d6:	f8c9 5004 	str.w	r5, [r9, #4]
    e6da:	442b      	add	r3, r5
    e6dc:	2807      	cmp	r0, #7
    e6de:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    e6e2:	f8c9 2000 	str.w	r2, [r9]
    e6e6:	f300 80c1 	bgt.w	e86c <_vfiprintf_r+0xb14>
    e6ea:	f109 0908 	add.w	r9, r9, #8
    e6ee:	1c41      	adds	r1, r0, #1
    e6f0:	e546      	b.n	e180 <_vfiprintf_r+0x428>
    e6f2:	4618      	mov	r0, r3
    e6f4:	f04f 0c01 	mov.w	ip, #1
    e6f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e6fc:	e7c7      	b.n	e68e <_vfiprintf_r+0x936>
    e6fe:	0776      	lsls	r6, r6, #29
    e700:	9319      	str	r3, [sp, #100]	; 0x64
    e702:	d553      	bpl.n	e7ac <_vfiprintf_r+0xa54>
    e704:	9a06      	ldr	r2, [sp, #24]
    e706:	9903      	ldr	r1, [sp, #12]
    e708:	1a54      	subs	r4, r2, r1
    e70a:	2c00      	cmp	r4, #0
    e70c:	dd4e      	ble.n	e7ac <_vfiprintf_r+0xa54>
    e70e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e712:	2c10      	cmp	r4, #16
    e714:	f340 82b0 	ble.w	ec78 <_vfiprintf_r+0xf20>
    e718:	9919      	ldr	r1, [sp, #100]	; 0x64
    e71a:	ee18 6a10 	vmov	r6, s16
    e71e:	2510      	movs	r5, #16
    e720:	e00d      	b.n	e73e <_vfiprintf_r+0x9e6>
    e722:	bf00      	nop
    e724:	20000aec 	.word	0x20000aec
    e728:	20001074 	.word	0x20001074
    e72c:	20000b30 	.word	0x20000b30
    e730:	1c88      	adds	r0, r1, #2
    e732:	f109 0908 	add.w	r9, r9, #8
    e736:	4611      	mov	r1, r2
    e738:	3c10      	subs	r4, #16
    e73a:	2c10      	cmp	r4, #16
    e73c:	dd1a      	ble.n	e774 <_vfiprintf_r+0xa1c>
    e73e:	1c4a      	adds	r2, r1, #1
    e740:	48b3      	ldr	r0, [pc, #716]	; (ea10 <_vfiprintf_r+0xcb8>)
    e742:	3310      	adds	r3, #16
    e744:	2a07      	cmp	r2, #7
    e746:	e9c9 0500 	strd	r0, r5, [r9]
    e74a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
    e74e:	ddef      	ble.n	e730 <_vfiprintf_r+0x9d8>
    e750:	aa18      	add	r2, sp, #96	; 0x60
    e752:	b333      	cbz	r3, e7a2 <_vfiprintf_r+0xa4a>
    e754:	4631      	mov	r1, r6
    e756:	4658      	mov	r0, fp
    e758:	f7ff fac2 	bl	dce0 <__sprint_r.part.0>
    e75c:	2800      	cmp	r0, #0
    e75e:	f47f acd2 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e762:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
    e766:	3c10      	subs	r4, #16
    e768:	2c10      	cmp	r4, #16
    e76a:	f101 0001 	add.w	r0, r1, #1
    e76e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e772:	dce4      	bgt.n	e73e <_vfiprintf_r+0x9e6>
    e774:	4aa6      	ldr	r2, [pc, #664]	; (ea10 <_vfiprintf_r+0xcb8>)
    e776:	f8c9 4004 	str.w	r4, [r9, #4]
    e77a:	4423      	add	r3, r4
    e77c:	2807      	cmp	r0, #7
    e77e:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
    e782:	f8c9 2000 	str.w	r2, [r9]
    e786:	f77f ad59 	ble.w	e23c <_vfiprintf_r+0x4e4>
    e78a:	b17b      	cbz	r3, e7ac <_vfiprintf_r+0xa54>
    e78c:	ee18 1a10 	vmov	r1, s16
    e790:	aa18      	add	r2, sp, #96	; 0x60
    e792:	4658      	mov	r0, fp
    e794:	f7ff faa4 	bl	dce0 <__sprint_r.part.0>
    e798:	2800      	cmp	r0, #0
    e79a:	f47f acb4 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e79e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e7a0:	e54c      	b.n	e23c <_vfiprintf_r+0x4e4>
    e7a2:	2001      	movs	r0, #1
    e7a4:	4619      	mov	r1, r3
    e7a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e7aa:	e7c5      	b.n	e738 <_vfiprintf_r+0x9e0>
    e7ac:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    e7b0:	9903      	ldr	r1, [sp, #12]
    e7b2:	428a      	cmp	r2, r1
    e7b4:	bfac      	ite	ge
    e7b6:	189b      	addge	r3, r3, r2
    e7b8:	185b      	addlt	r3, r3, r1
    e7ba:	9305      	str	r3, [sp, #20]
    e7bc:	e549      	b.n	e252 <_vfiprintf_r+0x4fa>
    e7be:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    e7c2:	058f      	lsls	r7, r1, #22
    e7c4:	ee18 3a10 	vmov	r3, s16
    e7c8:	b28a      	uxth	r2, r1
    e7ca:	f53f aae8 	bmi.w	dd9e <_vfiprintf_r+0x46>
    e7ce:	ee18 5a10 	vmov	r5, s16
    e7d2:	6d98      	ldr	r0, [r3, #88]	; 0x58
    e7d4:	f7fb fb2a 	bl	9e2c <__retarget_lock_acquire_recursive>
    e7d8:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
    e7dc:	b28a      	uxth	r2, r1
    e7de:	f7ff bade 	b.w	dd9e <_vfiprintf_r+0x46>
    e7e2:	2b00      	cmp	r3, #0
    e7e4:	f43f ae79 	beq.w	e4da <_vfiprintf_r+0x782>
    e7e8:	ee18 1a10 	vmov	r1, s16
    e7ec:	aa18      	add	r2, sp, #96	; 0x60
    e7ee:	4658      	mov	r0, fp
    e7f0:	f7ff fa76 	bl	dce0 <__sprint_r.part.0>
    e7f4:	2800      	cmp	r0, #0
    e7f6:	f47f ac86 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e7fa:	9919      	ldr	r1, [sp, #100]	; 0x64
    e7fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e7fe:	3101      	adds	r1, #1
    e800:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e804:	e4f8      	b.n	e1f8 <_vfiprintf_r+0x4a0>
    e806:	9219      	str	r2, [sp, #100]	; 0x64
    e808:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e80c:	e45e      	b.n	e0cc <_vfiprintf_r+0x374>
    e80e:	2f00      	cmp	r7, #0
    e810:	f47f abc3 	bne.w	df9a <_vfiprintf_r+0x242>
    e814:	9e03      	ldr	r6, [sp, #12]
    e816:	2700      	movs	r7, #0
    e818:	9704      	str	r7, [sp, #16]
    e81a:	ac44      	add	r4, sp, #272	; 0x110
    e81c:	f7ff bbc5 	b.w	dfaa <_vfiprintf_r+0x252>
    e820:	9b03      	ldr	r3, [sp, #12]
    e822:	f013 0310 	ands.w	r3, r3, #16
    e826:	d154      	bne.n	e8d2 <_vfiprintf_r+0xb7a>
    e828:	9a03      	ldr	r2, [sp, #12]
    e82a:	f012 0040 	ands.w	r0, r2, #64	; 0x40
    e82e:	f000 816b 	beq.w	eb08 <_vfiprintf_r+0xdb0>
    e832:	9907      	ldr	r1, [sp, #28]
    e834:	461a      	mov	r2, r3
    e836:	f851 3b04 	ldr.w	r3, [r1], #4
    e83a:	9107      	str	r1, [sp, #28]
    e83c:	b29b      	uxth	r3, r3
    e83e:	2101      	movs	r1, #1
    e840:	e401      	b.n	e046 <_vfiprintf_r+0x2ee>
    e842:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e844:	2a00      	cmp	r2, #0
    e846:	d164      	bne.n	e912 <_vfiprintf_r+0xbba>
    e848:	4618      	mov	r0, r3
    e84a:	2101      	movs	r1, #1
    e84c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e850:	e4c9      	b.n	e1e6 <_vfiprintf_r+0x48e>
    e852:	2101      	movs	r1, #1
    e854:	4618      	mov	r0, r3
    e856:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e85a:	e4c4      	b.n	e1e6 <_vfiprintf_r+0x48e>
    e85c:	425b      	negs	r3, r3
    e85e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
    e862:	9603      	str	r6, [sp, #12]
    e864:	202d      	movs	r0, #45	; 0x2d
    e866:	2101      	movs	r1, #1
    e868:	f7ff bbee 	b.w	e048 <_vfiprintf_r+0x2f0>
    e86c:	2b00      	cmp	r3, #0
    e86e:	f000 8088 	beq.w	e982 <_vfiprintf_r+0xc2a>
    e872:	ee18 1a10 	vmov	r1, s16
    e876:	aa18      	add	r2, sp, #96	; 0x60
    e878:	4658      	mov	r0, fp
    e87a:	f7ff fa31 	bl	dce0 <__sprint_r.part.0>
    e87e:	2800      	cmp	r0, #0
    e880:	f47f ac41 	bne.w	e106 <_vfiprintf_r+0x3ae>
    e884:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
    e888:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e88c:	1c41      	adds	r1, r0, #1
    e88e:	e477      	b.n	e180 <_vfiprintf_r+0x428>
    e890:	f898 1000 	ldrb.w	r1, [r8]
    e894:	9307      	str	r3, [sp, #28]
    e896:	f7ff bad2 	b.w	de3e <_vfiprintf_r+0xe6>
    e89a:	ac44      	add	r4, sp, #272	; 0x110
    e89c:	f7ff bb85 	b.w	dfaa <_vfiprintf_r+0x252>
    e8a0:	f109 0908 	add.w	r9, r9, #8
    e8a4:	f10c 0101 	add.w	r1, ip, #1
    e8a8:	4660      	mov	r0, ip
    e8aa:	e4a0      	b.n	e1ee <_vfiprintf_r+0x496>
    e8ac:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    e8b0:	f040 8197 	bne.w	ebe2 <_vfiprintf_r+0xe8a>
    e8b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8b8:	9107      	str	r1, [sp, #28]
    e8ba:	f7ff bbc0 	b.w	e03e <_vfiprintf_r+0x2e6>
    e8be:	05b3      	lsls	r3, r6, #22
    e8c0:	f100 8188 	bmi.w	ebd4 <_vfiprintf_r+0xe7c>
    e8c4:	f852 3b04 	ldr.w	r3, [r2], #4
    e8c8:	9207      	str	r2, [sp, #28]
    e8ca:	17da      	asrs	r2, r3, #31
    e8cc:	4611      	mov	r1, r2
    e8ce:	f7ff bb52 	b.w	df76 <_vfiprintf_r+0x21e>
    e8d2:	9907      	ldr	r1, [sp, #28]
    e8d4:	f851 3b04 	ldr.w	r3, [r1], #4
    e8d8:	9107      	str	r1, [sp, #28]
    e8da:	2101      	movs	r1, #1
    e8dc:	f7ff bbb3 	b.w	e046 <_vfiprintf_r+0x2ee>
    e8e0:	9b07      	ldr	r3, [sp, #28]
    e8e2:	9805      	ldr	r0, [sp, #20]
    e8e4:	f853 1b04 	ldr.w	r1, [r3], #4
    e8e8:	9307      	str	r3, [sp, #28]
    e8ea:	17c2      	asrs	r2, r0, #31
    e8ec:	e9c1 0200 	strd	r0, r2, [r1]
    e8f0:	f7ff ba7d 	b.w	ddee <_vfiprintf_r+0x96>
    e8f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8f6:	2b00      	cmp	r3, #0
    e8f8:	f43f ab26 	beq.w	df48 <_vfiprintf_r+0x1f0>
    e8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e8fe:	781b      	ldrb	r3, [r3, #0]
    e900:	2b00      	cmp	r3, #0
    e902:	f43f ab21 	beq.w	df48 <_vfiprintf_r+0x1f0>
    e906:	f898 1000 	ldrb.w	r1, [r8]
    e90a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
    e90e:	f7ff ba96 	b.w	de3e <_vfiprintf_r+0xe6>
    e912:	2302      	movs	r3, #2
    e914:	aa11      	add	r2, sp, #68	; 0x44
    e916:	931c      	str	r3, [sp, #112]	; 0x70
    e918:	921b      	str	r2, [sp, #108]	; 0x6c
    e91a:	2001      	movs	r0, #1
    e91c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e920:	e6a2      	b.n	e668 <_vfiprintf_r+0x910>
    e922:	9603      	str	r6, [sp, #12]
    e924:	e571      	b.n	e40a <_vfiprintf_r+0x6b2>
    e926:	4b3b      	ldr	r3, [pc, #236]	; (ea14 <_vfiprintf_r+0xcbc>)
    e928:	930c      	str	r3, [sp, #48]	; 0x30
    e92a:	f016 0220 	ands.w	r2, r6, #32
    e92e:	d059      	beq.n	e9e4 <_vfiprintf_r+0xc8c>
    e930:	9b07      	ldr	r3, [sp, #28]
    e932:	3307      	adds	r3, #7
    e934:	f023 0307 	bic.w	r3, r3, #7
    e938:	4618      	mov	r0, r3
    e93a:	685a      	ldr	r2, [r3, #4]
    e93c:	f850 3b08 	ldr.w	r3, [r0], #8
    e940:	9007      	str	r0, [sp, #28]
    e942:	07f4      	lsls	r4, r6, #31
    e944:	d509      	bpl.n	e95a <_vfiprintf_r+0xc02>
    e946:	ea53 0002 	orrs.w	r0, r3, r2
    e94a:	d006      	beq.n	e95a <_vfiprintf_r+0xc02>
    e94c:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    e950:	2130      	movs	r1, #48	; 0x30
    e952:	f046 0602 	orr.w	r6, r6, #2
    e956:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
    e95a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
    e95e:	9103      	str	r1, [sp, #12]
    e960:	2102      	movs	r1, #2
    e962:	f7ff bb70 	b.w	e046 <_vfiprintf_r+0x2ee>
    e966:	4b2c      	ldr	r3, [pc, #176]	; (ea18 <_vfiprintf_r+0xcc0>)
    e968:	930c      	str	r3, [sp, #48]	; 0x30
    e96a:	e7de      	b.n	e92a <_vfiprintf_r+0xbd2>
    e96c:	9b07      	ldr	r3, [sp, #28]
    e96e:	2101      	movs	r1, #1
    e970:	f853 2b04 	ldr.w	r2, [r3], #4
    e974:	9103      	str	r1, [sp, #12]
    e976:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
    e97a:	9307      	str	r3, [sp, #28]
    e97c:	9104      	str	r1, [sp, #16]
    e97e:	ac2b      	add	r4, sp, #172	; 0xac
    e980:	e4df      	b.n	e342 <_vfiprintf_r+0x5ea>
    e982:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
    e986:	2a00      	cmp	r2, #0
    e988:	f040 8132 	bne.w	ebf0 <_vfiprintf_r+0xe98>
    e98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e98e:	2a00      	cmp	r2, #0
    e990:	f47f ae62 	bne.w	e658 <_vfiprintf_r+0x900>
    e994:	4618      	mov	r0, r3
    e996:	2101      	movs	r1, #1
    e998:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    e99c:	e427      	b.n	e1ee <_vfiprintf_r+0x496>
    e99e:	2100      	movs	r1, #0
    e9a0:	2208      	movs	r2, #8
    e9a2:	a816      	add	r0, sp, #88	; 0x58
    e9a4:	9413      	str	r4, [sp, #76]	; 0x4c
    e9a6:	f7fb f8bd 	bl	9b24 <memset>
    e9aa:	1c79      	adds	r1, r7, #1
    e9ac:	f000 80bc 	beq.w	eb28 <_vfiprintf_r+0xdd0>
    e9b0:	2500      	movs	r5, #0
    e9b2:	9407      	str	r4, [sp, #28]
    e9b4:	462c      	mov	r4, r5
    e9b6:	e00c      	b.n	e9d2 <_vfiprintf_r+0xc7a>
    e9b8:	a92b      	add	r1, sp, #172	; 0xac
    e9ba:	4658      	mov	r0, fp
    e9bc:	f7ff f8ca 	bl	db54 <_wcrtomb_r>
    e9c0:	1c42      	adds	r2, r0, #1
    e9c2:	4420      	add	r0, r4
    e9c4:	f000 816b 	beq.w	ec9e <_vfiprintf_r+0xf46>
    e9c8:	42b8      	cmp	r0, r7
    e9ca:	dc08      	bgt.n	e9de <_vfiprintf_r+0xc86>
    e9cc:	f000 8170 	beq.w	ecb0 <_vfiprintf_r+0xf58>
    e9d0:	4604      	mov	r4, r0
    e9d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e9d4:	5952      	ldr	r2, [r2, r5]
    e9d6:	ab16      	add	r3, sp, #88	; 0x58
    e9d8:	3504      	adds	r5, #4
    e9da:	2a00      	cmp	r2, #0
    e9dc:	d1ec      	bne.n	e9b8 <_vfiprintf_r+0xc60>
    e9de:	9404      	str	r4, [sp, #16]
    e9e0:	9c07      	ldr	r4, [sp, #28]
    e9e2:	e0af      	b.n	eb44 <_vfiprintf_r+0xdec>
    e9e4:	f016 0310 	ands.w	r3, r6, #16
    e9e8:	9807      	ldr	r0, [sp, #28]
    e9ea:	d10c      	bne.n	ea06 <_vfiprintf_r+0xcae>
    e9ec:	f016 0440 	ands.w	r4, r6, #64	; 0x40
    e9f0:	d005      	beq.n	e9fe <_vfiprintf_r+0xca6>
    e9f2:	461a      	mov	r2, r3
    e9f4:	f850 3b04 	ldr.w	r3, [r0], #4
    e9f8:	9007      	str	r0, [sp, #28]
    e9fa:	b29b      	uxth	r3, r3
    e9fc:	e7a1      	b.n	e942 <_vfiprintf_r+0xbea>
    e9fe:	f416 7200 	ands.w	r2, r6, #512	; 0x200
    ea02:	f040 80e1 	bne.w	ebc8 <_vfiprintf_r+0xe70>
    ea06:	f850 3b04 	ldr.w	r3, [r0], #4
    ea0a:	9007      	str	r0, [sp, #28]
    ea0c:	e799      	b.n	e942 <_vfiprintf_r+0xbea>
    ea0e:	bf00      	nop
    ea10:	20000b30 	.word	0x20000b30
    ea14:	20000aec 	.word	0x20000aec
    ea18:	20000b00 	.word	0x20000b00
    ea1c:	9903      	ldr	r1, [sp, #12]
    ea1e:	9704      	str	r7, [sp, #16]
    ea20:	ac44      	add	r4, sp, #272	; 0x110
    ea22:	469e      	mov	lr, r3
    ea24:	ee08 ba90 	vmov	s17, fp
    ea28:	f401 6680 	and.w	r6, r1, #1024	; 0x400
    ea2c:	f04f 0c00 	mov.w	ip, #0
    ea30:	4623      	mov	r3, r4
    ea32:	e006      	b.n	ea42 <_vfiprintf_r+0xcea>
    ea34:	f1be 0f0a 	cmp.w	lr, #10
    ea38:	f172 0200 	sbcs.w	r2, r2, #0
    ea3c:	d339      	bcc.n	eab2 <_vfiprintf_r+0xd5a>
    ea3e:	46a6      	mov	lr, r4
    ea40:	462a      	mov	r2, r5
    ea42:	49a6      	ldr	r1, [pc, #664]	; (ecdc <_vfiprintf_r+0xf84>)
    ea44:	eb1e 0002 	adds.w	r0, lr, r2
    ea48:	f140 0000 	adc.w	r0, r0, #0
    ea4c:	460f      	mov	r7, r1
    ea4e:	fba1 1400 	umull	r1, r4, r1, r0
    ea52:	f024 0103 	bic.w	r1, r4, #3
    ea56:	eb01 0194 	add.w	r1, r1, r4, lsr #2
    ea5a:	1a40      	subs	r0, r0, r1
    ea5c:	ebbe 0100 	subs.w	r1, lr, r0
    ea60:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
    ea64:	f162 0400 	sbc.w	r4, r2, #0
    ea68:	fb05 f501 	mul.w	r5, r5, r1
    ea6c:	fb07 5504 	mla	r5, r7, r4, r5
    ea70:	fba1 4107 	umull	r4, r1, r1, r7
    ea74:	440d      	add	r5, r1
    ea76:	2705      	movs	r7, #5
    ea78:	f004 0101 	and.w	r1, r4, #1
    ea7c:	fba1 1b07 	umull	r1, fp, r1, r7
    ea80:	1809      	adds	r1, r1, r0
    ea82:	0864      	lsrs	r4, r4, #1
    ea84:	3130      	adds	r1, #48	; 0x30
    ea86:	f803 1c01 	strb.w	r1, [r3, #-1]
    ea8a:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
    ea8e:	f10c 0c01 	add.w	ip, ip, #1
    ea92:	3b01      	subs	r3, #1
    ea94:	086d      	lsrs	r5, r5, #1
    ea96:	2e00      	cmp	r6, #0
    ea98:	d0cc      	beq.n	ea34 <_vfiprintf_r+0xcdc>
    ea9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ea9c:	7809      	ldrb	r1, [r1, #0]
    ea9e:	4561      	cmp	r1, ip
    eaa0:	d1c8      	bne.n	ea34 <_vfiprintf_r+0xcdc>
    eaa2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    eaa6:	d0c5      	beq.n	ea34 <_vfiprintf_r+0xcdc>
    eaa8:	f1be 0f0a 	cmp.w	lr, #10
    eaac:	f172 0200 	sbcs.w	r2, r2, #0
    eab0:	d26c      	bcs.n	eb8c <_vfiprintf_r+0xe34>
    eab2:	461c      	mov	r4, r3
    eab4:	ab44      	add	r3, sp, #272	; 0x110
    eab6:	1b1b      	subs	r3, r3, r4
    eab8:	9f04      	ldr	r7, [sp, #16]
    eaba:	9e03      	ldr	r6, [sp, #12]
    eabc:	9304      	str	r3, [sp, #16]
    eabe:	ee18 ba90 	vmov	fp, s17
    eac2:	f7ff ba72 	b.w	dfaa <_vfiprintf_r+0x252>
    eac6:	9603      	str	r6, [sp, #12]
    eac8:	f7ff ba62 	b.w	df90 <_vfiprintf_r+0x238>
    eacc:	4658      	mov	r0, fp
    eace:	f7fa fef9 	bl	98c4 <__sinit>
    ead2:	f7ff b95b 	b.w	dd8c <_vfiprintf_r+0x34>
    ead6:	2901      	cmp	r1, #1
    ead8:	9603      	str	r6, [sp, #12]
    eada:	f47f accd 	bne.w	e478 <_vfiprintf_r+0x720>
    eade:	f7ff ba5c 	b.w	df9a <_vfiprintf_r+0x242>
    eae2:	9b07      	ldr	r3, [sp, #28]
    eae4:	9905      	ldr	r1, [sp, #20]
    eae6:	f853 2b04 	ldr.w	r2, [r3], #4
    eaea:	6011      	str	r1, [r2, #0]
    eaec:	9307      	str	r3, [sp, #28]
    eaee:	f7ff b97e 	b.w	ddee <_vfiprintf_r+0x96>
    eaf2:	2f06      	cmp	r7, #6
    eaf4:	463b      	mov	r3, r7
    eaf6:	9a03      	ldr	r2, [sp, #12]
    eaf8:	4c79      	ldr	r4, [pc, #484]	; (ece0 <_vfiprintf_r+0xf88>)
    eafa:	9207      	str	r2, [sp, #28]
    eafc:	bf28      	it	cs
    eafe:	2306      	movcs	r3, #6
    eb00:	9304      	str	r3, [sp, #16]
    eb02:	9303      	str	r3, [sp, #12]
    eb04:	f7ff bb25 	b.w	e152 <_vfiprintf_r+0x3fa>
    eb08:	9b03      	ldr	r3, [sp, #12]
    eb0a:	9907      	ldr	r1, [sp, #28]
    eb0c:	f413 7200 	ands.w	r2, r3, #512	; 0x200
    eb10:	bf14      	ite	ne
    eb12:	f851 3b04 	ldrne.w	r3, [r1], #4
    eb16:	f851 3b04 	ldreq.w	r3, [r1], #4
    eb1a:	9107      	str	r1, [sp, #28]
    eb1c:	bf1c      	itt	ne
    eb1e:	4602      	movne	r2, r0
    eb20:	b2db      	uxtbne	r3, r3
    eb22:	2101      	movs	r1, #1
    eb24:	f7ff ba8f 	b.w	e046 <_vfiprintf_r+0x2ee>
    eb28:	ab16      	add	r3, sp, #88	; 0x58
    eb2a:	9300      	str	r3, [sp, #0]
    eb2c:	2300      	movs	r3, #0
    eb2e:	4619      	mov	r1, r3
    eb30:	aa13      	add	r2, sp, #76	; 0x4c
    eb32:	4658      	mov	r0, fp
    eb34:	f7ff f834 	bl	dba0 <_wcsrtombs_r>
    eb38:	4603      	mov	r3, r0
    eb3a:	3301      	adds	r3, #1
    eb3c:	9004      	str	r0, [sp, #16]
    eb3e:	f000 80ae 	beq.w	ec9e <_vfiprintf_r+0xf46>
    eb42:	9413      	str	r4, [sp, #76]	; 0x4c
    eb44:	9b04      	ldr	r3, [sp, #16]
    eb46:	2b00      	cmp	r3, #0
    eb48:	d030      	beq.n	ebac <_vfiprintf_r+0xe54>
    eb4a:	2b63      	cmp	r3, #99	; 0x63
    eb4c:	dc63      	bgt.n	ec16 <_vfiprintf_r+0xebe>
    eb4e:	2300      	movs	r3, #0
    eb50:	9308      	str	r3, [sp, #32]
    eb52:	ac2b      	add	r4, sp, #172	; 0xac
    eb54:	2208      	movs	r2, #8
    eb56:	2100      	movs	r1, #0
    eb58:	a816      	add	r0, sp, #88	; 0x58
    eb5a:	f7fa ffe3 	bl	9b24 <memset>
    eb5e:	9d04      	ldr	r5, [sp, #16]
    eb60:	ab16      	add	r3, sp, #88	; 0x58
    eb62:	9300      	str	r3, [sp, #0]
    eb64:	aa13      	add	r2, sp, #76	; 0x4c
    eb66:	462b      	mov	r3, r5
    eb68:	4621      	mov	r1, r4
    eb6a:	4658      	mov	r0, fp
    eb6c:	f7ff f818 	bl	dba0 <_wcsrtombs_r>
    eb70:	4285      	cmp	r5, r0
    eb72:	f040 80ab 	bne.w	eccc <_vfiprintf_r+0xf74>
    eb76:	9b03      	ldr	r3, [sp, #12]
    eb78:	9a04      	ldr	r2, [sp, #16]
    eb7a:	9307      	str	r3, [sp, #28]
    eb7c:	2300      	movs	r3, #0
    eb7e:	54a3      	strb	r3, [r4, r2]
    eb80:	461f      	mov	r7, r3
    eb82:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    eb86:	9303      	str	r3, [sp, #12]
    eb88:	f7ff ba16 	b.w	dfb8 <_vfiprintf_r+0x260>
    eb8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    eb8e:	990d      	ldr	r1, [sp, #52]	; 0x34
    eb90:	1a9b      	subs	r3, r3, r2
    eb92:	4618      	mov	r0, r3
    eb94:	9308      	str	r3, [sp, #32]
    eb96:	f7fb f87d 	bl	9c94 <strncpy>
    eb9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    eb9c:	9b08      	ldr	r3, [sp, #32]
    eb9e:	784a      	ldrb	r2, [r1, #1]
    eba0:	b10a      	cbz	r2, eba6 <_vfiprintf_r+0xe4e>
    eba2:	3101      	adds	r1, #1
    eba4:	910b      	str	r1, [sp, #44]	; 0x2c
    eba6:	f04f 0c00 	mov.w	ip, #0
    ebaa:	e748      	b.n	ea3e <_vfiprintf_r+0xce6>
    ebac:	9b03      	ldr	r3, [sp, #12]
    ebae:	9307      	str	r3, [sp, #28]
    ebb0:	9b04      	ldr	r3, [sp, #16]
    ebb2:	9303      	str	r3, [sp, #12]
    ebb4:	461f      	mov	r7, r3
    ebb6:	9308      	str	r3, [sp, #32]
    ebb8:	f7ff b9fe 	b.w	dfb8 <_vfiprintf_r+0x260>
    ebbc:	2101      	movs	r1, #1
    ebbe:	4618      	mov	r0, r3
    ebc0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ebc4:	f7ff bb13 	b.w	e1ee <_vfiprintf_r+0x496>
    ebc8:	f850 3b04 	ldr.w	r3, [r0], #4
    ebcc:	9007      	str	r0, [sp, #28]
    ebce:	4622      	mov	r2, r4
    ebd0:	b2db      	uxtb	r3, r3
    ebd2:	e6b6      	b.n	e942 <_vfiprintf_r+0xbea>
    ebd4:	f912 3b04 	ldrsb.w	r3, [r2], #4
    ebd8:	9207      	str	r2, [sp, #28]
    ebda:	17da      	asrs	r2, r3, #31
    ebdc:	4611      	mov	r1, r2
    ebde:	f7ff b9ca 	b.w	df76 <_vfiprintf_r+0x21e>
    ebe2:	f851 3b04 	ldr.w	r3, [r1], #4
    ebe6:	9107      	str	r1, [sp, #28]
    ebe8:	4602      	mov	r2, r0
    ebea:	b2db      	uxtb	r3, r3
    ebec:	f7ff ba27 	b.w	e03e <_vfiprintf_r+0x2e6>
    ebf0:	2301      	movs	r3, #1
    ebf2:	931c      	str	r3, [sp, #112]	; 0x70
    ebf4:	2101      	movs	r1, #1
    ebf6:	f10d 0343 	add.w	r3, sp, #67	; 0x43
    ebfa:	931b      	str	r3, [sp, #108]	; 0x6c
    ebfc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
    ec00:	460b      	mov	r3, r1
    ec02:	f7ff bacd 	b.w	e1a0 <_vfiprintf_r+0x448>
    ec06:	9b07      	ldr	r3, [sp, #28]
    ec08:	9905      	ldr	r1, [sp, #20]
    ec0a:	f853 2b04 	ldr.w	r2, [r3], #4
    ec0e:	9307      	str	r3, [sp, #28]
    ec10:	8011      	strh	r1, [r2, #0]
    ec12:	f7ff b8ec 	b.w	ddee <_vfiprintf_r+0x96>
    ec16:	1c59      	adds	r1, r3, #1
    ec18:	4658      	mov	r0, fp
    ec1a:	f7f9 ff8b 	bl	8b34 <_malloc_r>
    ec1e:	4604      	mov	r4, r0
    ec20:	2800      	cmp	r0, #0
    ec22:	d03c      	beq.n	ec9e <_vfiprintf_r+0xf46>
    ec24:	9008      	str	r0, [sp, #32]
    ec26:	e795      	b.n	eb54 <_vfiprintf_r+0xdfc>
    ec28:	6d88      	ldr	r0, [r1, #88]	; 0x58
    ec2a:	f7fb f901 	bl	9e30 <__retarget_lock_release_recursive>
    ec2e:	f7ff b9e9 	b.w	e004 <_vfiprintf_r+0x2ac>
    ec32:	9b03      	ldr	r3, [sp, #12]
    ec34:	9307      	str	r3, [sp, #28]
    ec36:	e9cd 7703 	strd	r7, r7, [sp, #12]
    ec3a:	9f08      	ldr	r7, [sp, #32]
    ec3c:	f7ff b9bc 	b.w	dfb8 <_vfiprintf_r+0x260>
    ec40:	9819      	ldr	r0, [sp, #100]	; 0x64
    ec42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ec44:	3001      	adds	r0, #1
    ec46:	e545      	b.n	e6d4 <_vfiprintf_r+0x97c>
    ec48:	9b03      	ldr	r3, [sp, #12]
    ec4a:	9307      	str	r3, [sp, #28]
    ec4c:	4620      	mov	r0, r4
    ec4e:	f7fb fad7 	bl	a200 <strlen>
    ec52:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
    ec56:	462f      	mov	r7, r5
    ec58:	9004      	str	r0, [sp, #16]
    ec5a:	9303      	str	r3, [sp, #12]
    ec5c:	9508      	str	r5, [sp, #32]
    ec5e:	f7ff b9ab 	b.w	dfb8 <_vfiprintf_r+0x260>
    ec62:	ee18 1a10 	vmov	r1, s16
    ec66:	aa18      	add	r2, sp, #96	; 0x60
    ec68:	4658      	mov	r0, fp
    ec6a:	f7ff f839 	bl	dce0 <__sprint_r.part.0>
    ec6e:	2800      	cmp	r0, #0
    ec70:	f43f aa36 	beq.w	e0e0 <_vfiprintf_r+0x388>
    ec74:	f7ff ba4d 	b.w	e112 <_vfiprintf_r+0x3ba>
    ec78:	9819      	ldr	r0, [sp, #100]	; 0x64
    ec7a:	3001      	adds	r0, #1
    ec7c:	e57a      	b.n	e774 <_vfiprintf_r+0xa1c>
    ec7e:	468c      	mov	ip, r1
    ec80:	e46e      	b.n	e560 <_vfiprintf_r+0x808>
    ec82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    ec84:	07d9      	lsls	r1, r3, #31
    ec86:	d405      	bmi.n	ec94 <_vfiprintf_r+0xf3c>
    ec88:	89ab      	ldrh	r3, [r5, #12]
    ec8a:	059a      	lsls	r2, r3, #22
    ec8c:	d402      	bmi.n	ec94 <_vfiprintf_r+0xf3c>
    ec8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    ec90:	f7fb f8ce 	bl	9e30 <__retarget_lock_release_recursive>
    ec94:	f04f 33ff 	mov.w	r3, #4294967295
    ec98:	9305      	str	r3, [sp, #20]
    ec9a:	f7ff ba49 	b.w	e130 <_vfiprintf_r+0x3d8>
    ec9e:	ee18 2a10 	vmov	r2, s16
    eca2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    eca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ecaa:	8193      	strh	r3, [r2, #12]
    ecac:	f7ff ba35 	b.w	e11a <_vfiprintf_r+0x3c2>
    ecb0:	9c07      	ldr	r4, [sp, #28]
    ecb2:	9704      	str	r7, [sp, #16]
    ecb4:	e746      	b.n	eb44 <_vfiprintf_r+0xdec>
    ecb6:	9b07      	ldr	r3, [sp, #28]
    ecb8:	f898 1001 	ldrb.w	r1, [r8, #1]
    ecbc:	f853 7b04 	ldr.w	r7, [r3], #4
    ecc0:	9307      	str	r3, [sp, #28]
    ecc2:	4690      	mov	r8, r2
    ecc4:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
    ecc8:	f7ff b8b9 	b.w	de3e <_vfiprintf_r+0xe6>
    eccc:	ee18 2a10 	vmov	r2, s16
    ecd0:	8993      	ldrh	r3, [r2, #12]
    ecd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ecd6:	8193      	strh	r3, [r2, #12]
    ecd8:	f7ff ba15 	b.w	e106 <_vfiprintf_r+0x3ae>
    ecdc:	cccccccd 	.word	0xcccccccd
    ece0:	20000b14 	.word	0x20000b14

0000ece4 <__sbprintf>:
    ece4:	b570      	push	{r4, r5, r6, lr}
    ece6:	460c      	mov	r4, r1
    ece8:	8989      	ldrh	r1, [r1, #12]
    ecea:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
    ecee:	f021 0102 	bic.w	r1, r1, #2
    ecf2:	f8ad 1014 	strh.w	r1, [sp, #20]
    ecf6:	6e61      	ldr	r1, [r4, #100]	; 0x64
    ecf8:	911b      	str	r1, [sp, #108]	; 0x6c
    ecfa:	89e1      	ldrh	r1, [r4, #14]
    ecfc:	f8ad 1016 	strh.w	r1, [sp, #22]
    ed00:	69e1      	ldr	r1, [r4, #28]
    ed02:	9109      	str	r1, [sp, #36]	; 0x24
    ed04:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ed06:	910b      	str	r1, [sp, #44]	; 0x2c
    ed08:	a91c      	add	r1, sp, #112	; 0x70
    ed0a:	9102      	str	r1, [sp, #8]
    ed0c:	9106      	str	r1, [sp, #24]
    ed0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    ed12:	4606      	mov	r6, r0
    ed14:	9104      	str	r1, [sp, #16]
    ed16:	9107      	str	r1, [sp, #28]
    ed18:	a818      	add	r0, sp, #96	; 0x60
    ed1a:	2100      	movs	r1, #0
    ed1c:	e9cd 3200 	strd	r3, r2, [sp]
    ed20:	9108      	str	r1, [sp, #32]
    ed22:	f7fb f87f 	bl	9e24 <__retarget_lock_init_recursive>
    ed26:	e9dd 3200 	ldrd	r3, r2, [sp]
    ed2a:	a902      	add	r1, sp, #8
    ed2c:	4630      	mov	r0, r6
    ed2e:	f7ff f813 	bl	dd58 <_vfiprintf_r>
    ed32:	1e05      	subs	r5, r0, #0
    ed34:	db07      	blt.n	ed46 <__sbprintf+0x62>
    ed36:	a902      	add	r1, sp, #8
    ed38:	4630      	mov	r0, r6
    ed3a:	f7fd fee7 	bl	cb0c <_fflush_r>
    ed3e:	2800      	cmp	r0, #0
    ed40:	bf18      	it	ne
    ed42:	f04f 35ff 	movne.w	r5, #4294967295
    ed46:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    ed4a:	065b      	lsls	r3, r3, #25
    ed4c:	d503      	bpl.n	ed56 <__sbprintf+0x72>
    ed4e:	89a3      	ldrh	r3, [r4, #12]
    ed50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ed54:	81a3      	strh	r3, [r4, #12]
    ed56:	9818      	ldr	r0, [sp, #96]	; 0x60
    ed58:	f7fb f866 	bl	9e28 <__retarget_lock_close_recursive>
    ed5c:	4628      	mov	r0, r5
    ed5e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
    ed62:	bd70      	pop	{r4, r5, r6, pc}

0000ed64 <__sfvwrite_r>:
    ed64:	6893      	ldr	r3, [r2, #8]
    ed66:	2b00      	cmp	r3, #0
    ed68:	f000 8085 	beq.w	ee76 <__sfvwrite_r+0x112>
    ed6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed70:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
    ed74:	460c      	mov	r4, r1
    ed76:	0719      	lsls	r1, r3, #28
    ed78:	4680      	mov	r8, r0
    ed7a:	b083      	sub	sp, #12
    ed7c:	4617      	mov	r7, r2
    ed7e:	b298      	uxth	r0, r3
    ed80:	d525      	bpl.n	edce <__sfvwrite_r+0x6a>
    ed82:	6923      	ldr	r3, [r4, #16]
    ed84:	b31b      	cbz	r3, edce <__sfvwrite_r+0x6a>
    ed86:	f010 0302 	ands.w	r3, r0, #2
    ed8a:	683d      	ldr	r5, [r7, #0]
    ed8c:	d02d      	beq.n	edea <__sfvwrite_r+0x86>
    ed8e:	f04f 0a00 	mov.w	sl, #0
    ed92:	f8df b2c0 	ldr.w	fp, [pc, #704]	; f054 <__sfvwrite_r+0x2f0>
    ed96:	4656      	mov	r6, sl
    ed98:	46b9      	mov	r9, r7
    ed9a:	455e      	cmp	r6, fp
    ed9c:	4633      	mov	r3, r6
    ed9e:	4652      	mov	r2, sl
    eda0:	bf28      	it	cs
    eda2:	465b      	movcs	r3, fp
    eda4:	4640      	mov	r0, r8
    eda6:	2e00      	cmp	r6, #0
    eda8:	d052      	beq.n	ee50 <__sfvwrite_r+0xec>
    edaa:	69e1      	ldr	r1, [r4, #28]
    edac:	6a67      	ldr	r7, [r4, #36]	; 0x24
    edae:	47b8      	blx	r7
    edb0:	2800      	cmp	r0, #0
    edb2:	dd56      	ble.n	ee62 <__sfvwrite_r+0xfe>
    edb4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    edb8:	1a1b      	subs	r3, r3, r0
    edba:	4482      	add	sl, r0
    edbc:	1a36      	subs	r6, r6, r0
    edbe:	f8c9 3008 	str.w	r3, [r9, #8]
    edc2:	2b00      	cmp	r3, #0
    edc4:	d1e9      	bne.n	ed9a <__sfvwrite_r+0x36>
    edc6:	2000      	movs	r0, #0
    edc8:	b003      	add	sp, #12
    edca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edce:	4621      	mov	r1, r4
    edd0:	4640      	mov	r0, r8
    edd2:	f000 f941 	bl	f058 <__swsetup_r>
    edd6:	2800      	cmp	r0, #0
    edd8:	f040 8138 	bne.w	f04c <__sfvwrite_r+0x2e8>
    eddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ede0:	683d      	ldr	r5, [r7, #0]
    ede2:	b298      	uxth	r0, r3
    ede4:	f010 0302 	ands.w	r3, r0, #2
    ede8:	d1d1      	bne.n	ed8e <__sfvwrite_r+0x2a>
    edea:	f010 0901 	ands.w	r9, r0, #1
    edee:	d144      	bne.n	ee7a <__sfvwrite_r+0x116>
    edf0:	464e      	mov	r6, r9
    edf2:	9700      	str	r7, [sp, #0]
    edf4:	b346      	cbz	r6, ee48 <__sfvwrite_r+0xe4>
    edf6:	0582      	lsls	r2, r0, #22
    edf8:	f8d4 b008 	ldr.w	fp, [r4, #8]
    edfc:	f140 8085 	bpl.w	ef0a <__sfvwrite_r+0x1a6>
    ee00:	45b3      	cmp	fp, r6
    ee02:	465a      	mov	r2, fp
    ee04:	f200 80b4 	bhi.w	ef70 <__sfvwrite_r+0x20c>
    ee08:	f410 6f90 	tst.w	r0, #1152	; 0x480
    ee0c:	f040 80c1 	bne.w	ef92 <__sfvwrite_r+0x22e>
    ee10:	6820      	ldr	r0, [r4, #0]
    ee12:	9201      	str	r2, [sp, #4]
    ee14:	4649      	mov	r1, r9
    ee16:	f7fa fe09 	bl	9a2c <memmove>
    ee1a:	68a3      	ldr	r3, [r4, #8]
    ee1c:	9a01      	ldr	r2, [sp, #4]
    ee1e:	eba3 010b 	sub.w	r1, r3, fp
    ee22:	6823      	ldr	r3, [r4, #0]
    ee24:	60a1      	str	r1, [r4, #8]
    ee26:	4413      	add	r3, r2
    ee28:	46b2      	mov	sl, r6
    ee2a:	6023      	str	r3, [r4, #0]
    ee2c:	2600      	movs	r6, #0
    ee2e:	9a00      	ldr	r2, [sp, #0]
    ee30:	6893      	ldr	r3, [r2, #8]
    ee32:	eba3 030a 	sub.w	r3, r3, sl
    ee36:	44d1      	add	r9, sl
    ee38:	6093      	str	r3, [r2, #8]
    ee3a:	2b00      	cmp	r3, #0
    ee3c:	d0c3      	beq.n	edc6 <__sfvwrite_r+0x62>
    ee3e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    ee42:	b280      	uxth	r0, r0
    ee44:	2e00      	cmp	r6, #0
    ee46:	d1d6      	bne.n	edf6 <__sfvwrite_r+0x92>
    ee48:	e9d5 9600 	ldrd	r9, r6, [r5]
    ee4c:	3508      	adds	r5, #8
    ee4e:	e7d1      	b.n	edf4 <__sfvwrite_r+0x90>
    ee50:	e9d5 a600 	ldrd	sl, r6, [r5]
    ee54:	3508      	adds	r5, #8
    ee56:	e7a0      	b.n	ed9a <__sfvwrite_r+0x36>
    ee58:	4621      	mov	r1, r4
    ee5a:	4640      	mov	r0, r8
    ee5c:	f7fd fe56 	bl	cb0c <_fflush_r>
    ee60:	b388      	cbz	r0, eec6 <__sfvwrite_r+0x162>
    ee62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ee66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ee6a:	f04f 30ff 	mov.w	r0, #4294967295
    ee6e:	81a3      	strh	r3, [r4, #12]
    ee70:	b003      	add	sp, #12
    ee72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee76:	2000      	movs	r0, #0
    ee78:	4770      	bx	lr
    ee7a:	461e      	mov	r6, r3
    ee7c:	46ba      	mov	sl, r7
    ee7e:	4699      	mov	r9, r3
    ee80:	4618      	mov	r0, r3
    ee82:	9500      	str	r5, [sp, #0]
    ee84:	461f      	mov	r7, r3
    ee86:	b366      	cbz	r6, eee2 <__sfvwrite_r+0x17e>
    ee88:	2800      	cmp	r0, #0
    ee8a:	d032      	beq.n	eef2 <__sfvwrite_r+0x18e>
    ee8c:	464a      	mov	r2, r9
    ee8e:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    ee92:	6820      	ldr	r0, [r4, #0]
    ee94:	68a5      	ldr	r5, [r4, #8]
    ee96:	42b2      	cmp	r2, r6
    ee98:	bf28      	it	cs
    ee9a:	4632      	movcs	r2, r6
    ee9c:	4288      	cmp	r0, r1
    ee9e:	d904      	bls.n	eeaa <__sfvwrite_r+0x146>
    eea0:	eb05 0b03 	add.w	fp, r5, r3
    eea4:	455a      	cmp	r2, fp
    eea6:	f300 80a7 	bgt.w	eff8 <__sfvwrite_r+0x294>
    eeaa:	4293      	cmp	r3, r2
    eeac:	dc64      	bgt.n	ef78 <__sfvwrite_r+0x214>
    eeae:	69e1      	ldr	r1, [r4, #28]
    eeb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
    eeb2:	463a      	mov	r2, r7
    eeb4:	4640      	mov	r0, r8
    eeb6:	47a8      	blx	r5
    eeb8:	f1b0 0b00 	subs.w	fp, r0, #0
    eebc:	ddd1      	ble.n	ee62 <__sfvwrite_r+0xfe>
    eebe:	ebb9 090b 	subs.w	r9, r9, fp
    eec2:	d0c9      	beq.n	ee58 <__sfvwrite_r+0xf4>
    eec4:	2001      	movs	r0, #1
    eec6:	f8da 3008 	ldr.w	r3, [sl, #8]
    eeca:	eba3 030b 	sub.w	r3, r3, fp
    eece:	445f      	add	r7, fp
    eed0:	eba6 060b 	sub.w	r6, r6, fp
    eed4:	f8ca 3008 	str.w	r3, [sl, #8]
    eed8:	2b00      	cmp	r3, #0
    eeda:	f43f af74 	beq.w	edc6 <__sfvwrite_r+0x62>
    eede:	2e00      	cmp	r6, #0
    eee0:	d1d2      	bne.n	ee88 <__sfvwrite_r+0x124>
    eee2:	9a00      	ldr	r2, [sp, #0]
    eee4:	6856      	ldr	r6, [r2, #4]
    eee6:	4613      	mov	r3, r2
    eee8:	3208      	adds	r2, #8
    eeea:	9200      	str	r2, [sp, #0]
    eeec:	2e00      	cmp	r6, #0
    eeee:	d0f8      	beq.n	eee2 <__sfvwrite_r+0x17e>
    eef0:	681f      	ldr	r7, [r3, #0]
    eef2:	4632      	mov	r2, r6
    eef4:	210a      	movs	r1, #10
    eef6:	4638      	mov	r0, r7
    eef8:	f7fd fe3a 	bl	cb70 <memchr>
    eefc:	2800      	cmp	r0, #0
    eefe:	f000 809c 	beq.w	f03a <__sfvwrite_r+0x2d6>
    ef02:	3001      	adds	r0, #1
    ef04:	eba0 0907 	sub.w	r9, r0, r7
    ef08:	e7c0      	b.n	ee8c <__sfvwrite_r+0x128>
    ef0a:	6820      	ldr	r0, [r4, #0]
    ef0c:	6923      	ldr	r3, [r4, #16]
    ef0e:	4298      	cmp	r0, r3
    ef10:	d816      	bhi.n	ef40 <__sfvwrite_r+0x1dc>
    ef12:	6962      	ldr	r2, [r4, #20]
    ef14:	42b2      	cmp	r2, r6
    ef16:	d813      	bhi.n	ef40 <__sfvwrite_r+0x1dc>
    ef18:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    ef1c:	42b3      	cmp	r3, r6
    ef1e:	bf28      	it	cs
    ef20:	4633      	movcs	r3, r6
    ef22:	69e1      	ldr	r1, [r4, #28]
    ef24:	fb93 f3f2 	sdiv	r3, r3, r2
    ef28:	6a67      	ldr	r7, [r4, #36]	; 0x24
    ef2a:	fb02 f303 	mul.w	r3, r2, r3
    ef2e:	4640      	mov	r0, r8
    ef30:	464a      	mov	r2, r9
    ef32:	47b8      	blx	r7
    ef34:	f1b0 0a00 	subs.w	sl, r0, #0
    ef38:	dd93      	ble.n	ee62 <__sfvwrite_r+0xfe>
    ef3a:	eba6 060a 	sub.w	r6, r6, sl
    ef3e:	e776      	b.n	ee2e <__sfvwrite_r+0xca>
    ef40:	45b3      	cmp	fp, r6
    ef42:	46da      	mov	sl, fp
    ef44:	bf28      	it	cs
    ef46:	46b2      	movcs	sl, r6
    ef48:	4652      	mov	r2, sl
    ef4a:	4649      	mov	r1, r9
    ef4c:	f7fa fd6e 	bl	9a2c <memmove>
    ef50:	68a3      	ldr	r3, [r4, #8]
    ef52:	6822      	ldr	r2, [r4, #0]
    ef54:	eba3 030a 	sub.w	r3, r3, sl
    ef58:	4452      	add	r2, sl
    ef5a:	60a3      	str	r3, [r4, #8]
    ef5c:	6022      	str	r2, [r4, #0]
    ef5e:	2b00      	cmp	r3, #0
    ef60:	d1eb      	bne.n	ef3a <__sfvwrite_r+0x1d6>
    ef62:	4621      	mov	r1, r4
    ef64:	4640      	mov	r0, r8
    ef66:	f7fd fdd1 	bl	cb0c <_fflush_r>
    ef6a:	2800      	cmp	r0, #0
    ef6c:	d0e5      	beq.n	ef3a <__sfvwrite_r+0x1d6>
    ef6e:	e778      	b.n	ee62 <__sfvwrite_r+0xfe>
    ef70:	6820      	ldr	r0, [r4, #0]
    ef72:	46b3      	mov	fp, r6
    ef74:	4632      	mov	r2, r6
    ef76:	e74c      	b.n	ee12 <__sfvwrite_r+0xae>
    ef78:	4639      	mov	r1, r7
    ef7a:	9201      	str	r2, [sp, #4]
    ef7c:	f7fa fd56 	bl	9a2c <memmove>
    ef80:	9a01      	ldr	r2, [sp, #4]
    ef82:	68a3      	ldr	r3, [r4, #8]
    ef84:	1a9b      	subs	r3, r3, r2
    ef86:	60a3      	str	r3, [r4, #8]
    ef88:	6823      	ldr	r3, [r4, #0]
    ef8a:	4413      	add	r3, r2
    ef8c:	6023      	str	r3, [r4, #0]
    ef8e:	4693      	mov	fp, r2
    ef90:	e795      	b.n	eebe <__sfvwrite_r+0x15a>
    ef92:	6823      	ldr	r3, [r4, #0]
    ef94:	6921      	ldr	r1, [r4, #16]
    ef96:	eba3 0b01 	sub.w	fp, r3, r1
    ef9a:	6963      	ldr	r3, [r4, #20]
    ef9c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
    efa0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
    efa4:	f10b 0301 	add.w	r3, fp, #1
    efa8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    efac:	4433      	add	r3, r6
    efae:	4553      	cmp	r3, sl
    efb0:	4652      	mov	r2, sl
    efb2:	bf84      	itt	hi
    efb4:	469a      	movhi	sl, r3
    efb6:	4652      	movhi	r2, sl
    efb8:	0543      	lsls	r3, r0, #21
    efba:	d52c      	bpl.n	f016 <__sfvwrite_r+0x2b2>
    efbc:	4611      	mov	r1, r2
    efbe:	4640      	mov	r0, r8
    efc0:	f7f9 fdb8 	bl	8b34 <_malloc_r>
    efc4:	2800      	cmp	r0, #0
    efc6:	d03b      	beq.n	f040 <__sfvwrite_r+0x2dc>
    efc8:	465a      	mov	r2, fp
    efca:	6921      	ldr	r1, [r4, #16]
    efcc:	9001      	str	r0, [sp, #4]
    efce:	f7f8 f801 	bl	6fd4 <memcpy>
    efd2:	89a2      	ldrh	r2, [r4, #12]
    efd4:	9b01      	ldr	r3, [sp, #4]
    efd6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    efda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    efde:	81a2      	strh	r2, [r4, #12]
    efe0:	eb03 000b 	add.w	r0, r3, fp
    efe4:	6123      	str	r3, [r4, #16]
    efe6:	ebaa 030b 	sub.w	r3, sl, fp
    efea:	f8c4 a014 	str.w	sl, [r4, #20]
    efee:	60a3      	str	r3, [r4, #8]
    eff0:	6020      	str	r0, [r4, #0]
    eff2:	46b3      	mov	fp, r6
    eff4:	4632      	mov	r2, r6
    eff6:	e70c      	b.n	ee12 <__sfvwrite_r+0xae>
    eff8:	4639      	mov	r1, r7
    effa:	465a      	mov	r2, fp
    effc:	f7fa fd16 	bl	9a2c <memmove>
    f000:	6823      	ldr	r3, [r4, #0]
    f002:	445b      	add	r3, fp
    f004:	6023      	str	r3, [r4, #0]
    f006:	4621      	mov	r1, r4
    f008:	4640      	mov	r0, r8
    f00a:	f7fd fd7f 	bl	cb0c <_fflush_r>
    f00e:	2800      	cmp	r0, #0
    f010:	f43f af55 	beq.w	eebe <__sfvwrite_r+0x15a>
    f014:	e725      	b.n	ee62 <__sfvwrite_r+0xfe>
    f016:	4640      	mov	r0, r8
    f018:	f7fa f854 	bl	90c4 <_realloc_r>
    f01c:	4603      	mov	r3, r0
    f01e:	2800      	cmp	r0, #0
    f020:	d1de      	bne.n	efe0 <__sfvwrite_r+0x27c>
    f022:	6921      	ldr	r1, [r4, #16]
    f024:	4640      	mov	r0, r8
    f026:	f7fb f9ed 	bl	a404 <_free_r>
    f02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f02e:	220c      	movs	r2, #12
    f030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    f034:	f8c8 2000 	str.w	r2, [r8]
    f038:	e715      	b.n	ee66 <__sfvwrite_r+0x102>
    f03a:	1c72      	adds	r2, r6, #1
    f03c:	4691      	mov	r9, r2
    f03e:	e726      	b.n	ee8e <__sfvwrite_r+0x12a>
    f040:	220c      	movs	r2, #12
    f042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f046:	f8c8 2000 	str.w	r2, [r8]
    f04a:	e70c      	b.n	ee66 <__sfvwrite_r+0x102>
    f04c:	f04f 30ff 	mov.w	r0, #4294967295
    f050:	e6ba      	b.n	edc8 <__sfvwrite_r+0x64>
    f052:	bf00      	nop
    f054:	7ffffc00 	.word	0x7ffffc00

0000f058 <__swsetup_r>:
    f058:	b538      	push	{r3, r4, r5, lr}
    f05a:	4b31      	ldr	r3, [pc, #196]	; (f120 <__swsetup_r+0xc8>)
    f05c:	681b      	ldr	r3, [r3, #0]
    f05e:	4605      	mov	r5, r0
    f060:	460c      	mov	r4, r1
    f062:	b113      	cbz	r3, f06a <__swsetup_r+0x12>
    f064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    f066:	2a00      	cmp	r2, #0
    f068:	d04e      	beq.n	f108 <__swsetup_r+0xb0>
    f06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f06e:	0718      	lsls	r0, r3, #28
    f070:	b29a      	uxth	r2, r3
    f072:	d51c      	bpl.n	f0ae <__swsetup_r+0x56>
    f074:	6921      	ldr	r1, [r4, #16]
    f076:	b329      	cbz	r1, f0c4 <__swsetup_r+0x6c>
    f078:	f012 0001 	ands.w	r0, r2, #1
    f07c:	d007      	beq.n	f08e <__swsetup_r+0x36>
    f07e:	2000      	movs	r0, #0
    f080:	60a0      	str	r0, [r4, #8]
    f082:	6960      	ldr	r0, [r4, #20]
    f084:	4240      	negs	r0, r0
    f086:	61a0      	str	r0, [r4, #24]
    f088:	b139      	cbz	r1, f09a <__swsetup_r+0x42>
    f08a:	2000      	movs	r0, #0
    f08c:	bd38      	pop	{r3, r4, r5, pc}
    f08e:	0795      	lsls	r5, r2, #30
    f090:	bf58      	it	pl
    f092:	6960      	ldrpl	r0, [r4, #20]
    f094:	60a0      	str	r0, [r4, #8]
    f096:	2900      	cmp	r1, #0
    f098:	d1f7      	bne.n	f08a <__swsetup_r+0x32>
    f09a:	0612      	lsls	r2, r2, #24
    f09c:	bf58      	it	pl
    f09e:	4608      	movpl	r0, r1
    f0a0:	d5f4      	bpl.n	f08c <__swsetup_r+0x34>
    f0a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0a6:	81a3      	strh	r3, [r4, #12]
    f0a8:	f04f 30ff 	mov.w	r0, #4294967295
    f0ac:	bd38      	pop	{r3, r4, r5, pc}
    f0ae:	06d1      	lsls	r1, r2, #27
    f0b0:	d52e      	bpl.n	f110 <__swsetup_r+0xb8>
    f0b2:	0752      	lsls	r2, r2, #29
    f0b4:	d414      	bmi.n	f0e0 <__swsetup_r+0x88>
    f0b6:	6921      	ldr	r1, [r4, #16]
    f0b8:	f043 0308 	orr.w	r3, r3, #8
    f0bc:	81a3      	strh	r3, [r4, #12]
    f0be:	b29a      	uxth	r2, r3
    f0c0:	2900      	cmp	r1, #0
    f0c2:	d1d9      	bne.n	f078 <__swsetup_r+0x20>
    f0c4:	f402 7020 	and.w	r0, r2, #640	; 0x280
    f0c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    f0cc:	d0d4      	beq.n	f078 <__swsetup_r+0x20>
    f0ce:	4621      	mov	r1, r4
    f0d0:	4628      	mov	r0, r5
    f0d2:	f000 f947 	bl	f364 <__smakebuf_r>
    f0d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f0da:	6921      	ldr	r1, [r4, #16]
    f0dc:	b29a      	uxth	r2, r3
    f0de:	e7cb      	b.n	f078 <__swsetup_r+0x20>
    f0e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    f0e2:	b151      	cbz	r1, f0fa <__swsetup_r+0xa2>
    f0e4:	f104 0240 	add.w	r2, r4, #64	; 0x40
    f0e8:	4291      	cmp	r1, r2
    f0ea:	d004      	beq.n	f0f6 <__swsetup_r+0x9e>
    f0ec:	4628      	mov	r0, r5
    f0ee:	f7fb f989 	bl	a404 <_free_r>
    f0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f0f6:	2200      	movs	r2, #0
    f0f8:	6322      	str	r2, [r4, #48]	; 0x30
    f0fa:	6921      	ldr	r1, [r4, #16]
    f0fc:	2200      	movs	r2, #0
    f0fe:	e9c4 1200 	strd	r1, r2, [r4]
    f102:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    f106:	e7d7      	b.n	f0b8 <__swsetup_r+0x60>
    f108:	4618      	mov	r0, r3
    f10a:	f7fa fbdb 	bl	98c4 <__sinit>
    f10e:	e7ac      	b.n	f06a <__swsetup_r+0x12>
    f110:	2209      	movs	r2, #9
    f112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f116:	602a      	str	r2, [r5, #0]
    f118:	f04f 30ff 	mov.w	r0, #4294967295
    f11c:	81a3      	strh	r3, [r4, #12]
    f11e:	bd38      	pop	{r3, r4, r5, pc}
    f120:	20004754 	.word	0x20004754

0000f124 <__fputwc>:
    f124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f128:	b082      	sub	sp, #8
    f12a:	4682      	mov	sl, r0
    f12c:	4688      	mov	r8, r1
    f12e:	4614      	mov	r4, r2
    f130:	f7fa fde2 	bl	9cf8 <__locale_mb_cur_max>
    f134:	2801      	cmp	r0, #1
    f136:	d103      	bne.n	f140 <__fputwc+0x1c>
    f138:	f108 33ff 	add.w	r3, r8, #4294967295
    f13c:	2bfe      	cmp	r3, #254	; 0xfe
    f13e:	d936      	bls.n	f1ae <__fputwc+0x8a>
    f140:	f10d 0904 	add.w	r9, sp, #4
    f144:	4642      	mov	r2, r8
    f146:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    f14a:	4649      	mov	r1, r9
    f14c:	4650      	mov	r0, sl
    f14e:	f7fe fd01 	bl	db54 <_wcrtomb_r>
    f152:	1c42      	adds	r2, r0, #1
    f154:	4606      	mov	r6, r0
    f156:	d032      	beq.n	f1be <__fputwc+0x9a>
    f158:	b320      	cbz	r0, f1a4 <__fputwc+0x80>
    f15a:	f89d c004 	ldrb.w	ip, [sp, #4]
    f15e:	2500      	movs	r5, #0
    f160:	e009      	b.n	f176 <__fputwc+0x52>
    f162:	6823      	ldr	r3, [r4, #0]
    f164:	1c5a      	adds	r2, r3, #1
    f166:	6022      	str	r2, [r4, #0]
    f168:	f883 c000 	strb.w	ip, [r3]
    f16c:	3501      	adds	r5, #1
    f16e:	42b5      	cmp	r5, r6
    f170:	d218      	bcs.n	f1a4 <__fputwc+0x80>
    f172:	f819 cf01 	ldrb.w	ip, [r9, #1]!
    f176:	68a3      	ldr	r3, [r4, #8]
    f178:	3b01      	subs	r3, #1
    f17a:	2b00      	cmp	r3, #0
    f17c:	60a3      	str	r3, [r4, #8]
    f17e:	daf0      	bge.n	f162 <__fputwc+0x3e>
    f180:	69a7      	ldr	r7, [r4, #24]
    f182:	42bb      	cmp	r3, r7
    f184:	4661      	mov	r1, ip
    f186:	4622      	mov	r2, r4
    f188:	4650      	mov	r0, sl
    f18a:	db02      	blt.n	f192 <__fputwc+0x6e>
    f18c:	f1bc 0f0a 	cmp.w	ip, #10
    f190:	d1e7      	bne.n	f162 <__fputwc+0x3e>
    f192:	f000 f953 	bl	f43c <__swbuf_r>
    f196:	1c43      	adds	r3, r0, #1
    f198:	d1e8      	bne.n	f16c <__fputwc+0x48>
    f19a:	4606      	mov	r6, r0
    f19c:	4630      	mov	r0, r6
    f19e:	b002      	add	sp, #8
    f1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1a4:	4646      	mov	r6, r8
    f1a6:	4630      	mov	r0, r6
    f1a8:	b002      	add	sp, #8
    f1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1ae:	fa5f fc88 	uxtb.w	ip, r8
    f1b2:	f88d c004 	strb.w	ip, [sp, #4]
    f1b6:	4606      	mov	r6, r0
    f1b8:	f10d 0904 	add.w	r9, sp, #4
    f1bc:	e7cf      	b.n	f15e <__fputwc+0x3a>
    f1be:	89a3      	ldrh	r3, [r4, #12]
    f1c0:	4630      	mov	r0, r6
    f1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f1c6:	81a3      	strh	r3, [r4, #12]
    f1c8:	b002      	add	sp, #8
    f1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1ce:	bf00      	nop

0000f1d0 <_fputwc_r>:
    f1d0:	b530      	push	{r4, r5, lr}
    f1d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
    f1d4:	f013 0f01 	tst.w	r3, #1
    f1d8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f1dc:	4614      	mov	r4, r2
    f1de:	b083      	sub	sp, #12
    f1e0:	4605      	mov	r5, r0
    f1e2:	b29a      	uxth	r2, r3
    f1e4:	d101      	bne.n	f1ea <_fputwc_r+0x1a>
    f1e6:	0598      	lsls	r0, r3, #22
    f1e8:	d51c      	bpl.n	f224 <_fputwc_r+0x54>
    f1ea:	0490      	lsls	r0, r2, #18
    f1ec:	d406      	bmi.n	f1fc <_fputwc_r+0x2c>
    f1ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
    f1f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f1f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f1f8:	81a3      	strh	r3, [r4, #12]
    f1fa:	6662      	str	r2, [r4, #100]	; 0x64
    f1fc:	4622      	mov	r2, r4
    f1fe:	4628      	mov	r0, r5
    f200:	f7ff ff90 	bl	f124 <__fputwc>
    f204:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f206:	07da      	lsls	r2, r3, #31
    f208:	4605      	mov	r5, r0
    f20a:	d402      	bmi.n	f212 <_fputwc_r+0x42>
    f20c:	89a3      	ldrh	r3, [r4, #12]
    f20e:	059b      	lsls	r3, r3, #22
    f210:	d502      	bpl.n	f218 <_fputwc_r+0x48>
    f212:	4628      	mov	r0, r5
    f214:	b003      	add	sp, #12
    f216:	bd30      	pop	{r4, r5, pc}
    f218:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f21a:	f7fa fe09 	bl	9e30 <__retarget_lock_release_recursive>
    f21e:	4628      	mov	r0, r5
    f220:	b003      	add	sp, #12
    f222:	bd30      	pop	{r4, r5, pc}
    f224:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f226:	9101      	str	r1, [sp, #4]
    f228:	f7fa fe00 	bl	9e2c <__retarget_lock_acquire_recursive>
    f22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f230:	9901      	ldr	r1, [sp, #4]
    f232:	b29a      	uxth	r2, r3
    f234:	e7d9      	b.n	f1ea <_fputwc_r+0x1a>
    f236:	bf00      	nop

0000f238 <_wcsnrtombs_l>:
    f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f23c:	b08b      	sub	sp, #44	; 0x2c
    f23e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
    f242:	9f14      	ldr	r7, [sp, #80]	; 0x50
    f244:	9103      	str	r1, [sp, #12]
    f246:	4681      	mov	r9, r0
    f248:	9205      	str	r2, [sp, #20]
    f24a:	461e      	mov	r6, r3
    f24c:	f1b8 0f00 	cmp.w	r8, #0
    f250:	d05c      	beq.n	f30c <_wcsnrtombs_l+0xd4>
    f252:	9b03      	ldr	r3, [sp, #12]
    f254:	2b00      	cmp	r3, #0
    f256:	d05e      	beq.n	f316 <_wcsnrtombs_l+0xde>
    f258:	9b05      	ldr	r3, [sp, #20]
    f25a:	681d      	ldr	r5, [r3, #0]
    f25c:	2f00      	cmp	r7, #0
    f25e:	d06a      	beq.n	f336 <_wcsnrtombs_l+0xfe>
    f260:	1e74      	subs	r4, r6, #1
    f262:	b34e      	cbz	r6, f2b8 <_wcsnrtombs_l+0x80>
    f264:	9b03      	ldr	r3, [sp, #12]
    f266:	9304      	str	r3, [sp, #16]
    f268:	3d04      	subs	r5, #4
    f26a:	2600      	movs	r6, #0
    f26c:	9501      	str	r5, [sp, #4]
    f26e:	e00b      	b.n	f288 <_wcsnrtombs_l+0x50>
    f270:	9b03      	ldr	r3, [sp, #12]
    f272:	bb2b      	cbnz	r3, f2c0 <_wcsnrtombs_l+0x88>
    f274:	9b01      	ldr	r3, [sp, #4]
    f276:	681a      	ldr	r2, [r3, #0]
    f278:	2a00      	cmp	r2, #0
    f27a:	d03a      	beq.n	f2f2 <_wcsnrtombs_l+0xba>
    f27c:	45bc      	cmp	ip, r7
    f27e:	d25c      	bcs.n	f33a <_wcsnrtombs_l+0x102>
    f280:	3c01      	subs	r4, #1
    f282:	1c63      	adds	r3, r4, #1
    f284:	4666      	mov	r6, ip
    f286:	d017      	beq.n	f2b8 <_wcsnrtombs_l+0x80>
    f288:	f8d8 3000 	ldr.w	r3, [r8]
    f28c:	9302      	str	r3, [sp, #8]
    f28e:	9b01      	ldr	r3, [sp, #4]
    f290:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
    f294:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f298:	9301      	str	r3, [sp, #4]
    f29a:	a907      	add	r1, sp, #28
    f29c:	4643      	mov	r3, r8
    f29e:	4648      	mov	r0, r9
    f2a0:	f8d8 b004 	ldr.w	fp, [r8, #4]
    f2a4:	47a8      	blx	r5
    f2a6:	1c42      	adds	r2, r0, #1
    f2a8:	d03a      	beq.n	f320 <_wcsnrtombs_l+0xe8>
    f2aa:	eb00 0c06 	add.w	ip, r0, r6
    f2ae:	45bc      	cmp	ip, r7
    f2b0:	d9de      	bls.n	f270 <_wcsnrtombs_l+0x38>
    f2b2:	9b02      	ldr	r3, [sp, #8]
    f2b4:	e9c8 3b00 	strd	r3, fp, [r8]
    f2b8:	4630      	mov	r0, r6
    f2ba:	b00b      	add	sp, #44	; 0x2c
    f2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2c0:	2800      	cmp	r0, #0
    f2c2:	dd0e      	ble.n	f2e2 <_wcsnrtombs_l+0xaa>
    f2c4:	9b04      	ldr	r3, [sp, #16]
    f2c6:	9d01      	ldr	r5, [sp, #4]
    f2c8:	4418      	add	r0, r3
    f2ca:	1e5a      	subs	r2, r3, #1
    f2cc:	a907      	add	r1, sp, #28
    f2ce:	f100 3eff 	add.w	lr, r0, #4294967295
    f2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
    f2d6:	f802 3f01 	strb.w	r3, [r2, #1]!
    f2da:	4572      	cmp	r2, lr
    f2dc:	d1f9      	bne.n	f2d2 <_wcsnrtombs_l+0x9a>
    f2de:	9501      	str	r5, [sp, #4]
    f2e0:	9004      	str	r0, [sp, #16]
    f2e2:	9b05      	ldr	r3, [sp, #20]
    f2e4:	681a      	ldr	r2, [r3, #0]
    f2e6:	3204      	adds	r2, #4
    f2e8:	601a      	str	r2, [r3, #0]
    f2ea:	9b01      	ldr	r3, [sp, #4]
    f2ec:	681a      	ldr	r2, [r3, #0]
    f2ee:	2a00      	cmp	r2, #0
    f2f0:	d1c4      	bne.n	f27c <_wcsnrtombs_l+0x44>
    f2f2:	9b03      	ldr	r3, [sp, #12]
    f2f4:	b10b      	cbz	r3, f2fa <_wcsnrtombs_l+0xc2>
    f2f6:	9b05      	ldr	r3, [sp, #20]
    f2f8:	601a      	str	r2, [r3, #0]
    f2fa:	f10c 36ff 	add.w	r6, ip, #4294967295
    f2fe:	2200      	movs	r2, #0
    f300:	4630      	mov	r0, r6
    f302:	f8c8 2000 	str.w	r2, [r8]
    f306:	b00b      	add	sp, #44	; 0x2c
    f308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f30c:	9b03      	ldr	r3, [sp, #12]
    f30e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
    f312:	2b00      	cmp	r3, #0
    f314:	d1a0      	bne.n	f258 <_wcsnrtombs_l+0x20>
    f316:	9b05      	ldr	r3, [sp, #20]
    f318:	f04f 37ff 	mov.w	r7, #4294967295
    f31c:	681d      	ldr	r5, [r3, #0]
    f31e:	e79f      	b.n	f260 <_wcsnrtombs_l+0x28>
    f320:	4606      	mov	r6, r0
    f322:	218a      	movs	r1, #138	; 0x8a
    f324:	2200      	movs	r2, #0
    f326:	4630      	mov	r0, r6
    f328:	f8c9 1000 	str.w	r1, [r9]
    f32c:	f8c8 2000 	str.w	r2, [r8]
    f330:	b00b      	add	sp, #44	; 0x2c
    f332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f336:	463e      	mov	r6, r7
    f338:	e7be      	b.n	f2b8 <_wcsnrtombs_l+0x80>
    f33a:	4666      	mov	r6, ip
    f33c:	e7bc      	b.n	f2b8 <_wcsnrtombs_l+0x80>
    f33e:	bf00      	nop

0000f340 <_wcsnrtombs_r>:
    f340:	b510      	push	{r4, lr}
    f342:	b084      	sub	sp, #16
    f344:	4c05      	ldr	r4, [pc, #20]	; (f35c <_wcsnrtombs_r+0x1c>)
    f346:	9806      	ldr	r0, [sp, #24]
    f348:	9000      	str	r0, [sp, #0]
    f34a:	9807      	ldr	r0, [sp, #28]
    f34c:	9001      	str	r0, [sp, #4]
    f34e:	4804      	ldr	r0, [pc, #16]	; (f360 <_wcsnrtombs_r+0x20>)
    f350:	6800      	ldr	r0, [r0, #0]
    f352:	9402      	str	r4, [sp, #8]
    f354:	f7ff ff70 	bl	f238 <_wcsnrtombs_l>
    f358:	b004      	add	sp, #16
    f35a:	bd10      	pop	{r4, pc}
    f35c:	200041cc 	.word	0x200041cc
    f360:	20004754 	.word	0x20004754

0000f364 <__smakebuf_r>:
    f364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f368:	898b      	ldrh	r3, [r1, #12]
    f36a:	460c      	mov	r4, r1
    f36c:	0799      	lsls	r1, r3, #30
    f36e:	b096      	sub	sp, #88	; 0x58
    f370:	d508      	bpl.n	f384 <__smakebuf_r+0x20>
    f372:	f104 0343 	add.w	r3, r4, #67	; 0x43
    f376:	2201      	movs	r2, #1
    f378:	e9c4 3204 	strd	r3, r2, [r4, #16]
    f37c:	6023      	str	r3, [r4, #0]
    f37e:	b016      	add	sp, #88	; 0x58
    f380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    f388:	2900      	cmp	r1, #0
    f38a:	4606      	mov	r6, r0
    f38c:	db25      	blt.n	f3da <__smakebuf_r+0x76>
    f38e:	466a      	mov	r2, sp
    f390:	f000 f8ac 	bl	f4ec <_fstat_r>
    f394:	2800      	cmp	r0, #0
    f396:	db1f      	blt.n	f3d8 <__smakebuf_r+0x74>
    f398:	9d01      	ldr	r5, [sp, #4]
    f39a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    f39e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
    f3a2:	fab5 f585 	clz	r5, r5
    f3a6:	f44f 6880 	mov.w	r8, #1024	; 0x400
    f3aa:	096d      	lsrs	r5, r5, #5
    f3ac:	f44f 6700 	mov.w	r7, #2048	; 0x800
    f3b0:	4641      	mov	r1, r8
    f3b2:	4630      	mov	r0, r6
    f3b4:	f7f9 fbbe 	bl	8b34 <_malloc_r>
    f3b8:	b1e0      	cbz	r0, f3f4 <__smakebuf_r+0x90>
    f3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f3be:	f8c4 8014 	str.w	r8, [r4, #20]
    f3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f3c6:	6020      	str	r0, [r4, #0]
    f3c8:	6120      	str	r0, [r4, #16]
    f3ca:	81a3      	strh	r3, [r4, #12]
    f3cc:	bb35      	cbnz	r5, f41c <__smakebuf_r+0xb8>
    f3ce:	433b      	orrs	r3, r7
    f3d0:	81a3      	strh	r3, [r4, #12]
    f3d2:	b016      	add	sp, #88	; 0x58
    f3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f3d8:	89a3      	ldrh	r3, [r4, #12]
    f3da:	f013 0580 	ands.w	r5, r3, #128	; 0x80
    f3de:	d019      	beq.n	f414 <__smakebuf_r+0xb0>
    f3e0:	f04f 0840 	mov.w	r8, #64	; 0x40
    f3e4:	2500      	movs	r5, #0
    f3e6:	4641      	mov	r1, r8
    f3e8:	4630      	mov	r0, r6
    f3ea:	462f      	mov	r7, r5
    f3ec:	f7f9 fba2 	bl	8b34 <_malloc_r>
    f3f0:	2800      	cmp	r0, #0
    f3f2:	d1e2      	bne.n	f3ba <__smakebuf_r+0x56>
    f3f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f3f8:	059a      	lsls	r2, r3, #22
    f3fa:	d4c0      	bmi.n	f37e <__smakebuf_r+0x1a>
    f3fc:	f023 0303 	bic.w	r3, r3, #3
    f400:	f104 0243 	add.w	r2, r4, #67	; 0x43
    f404:	f043 0302 	orr.w	r3, r3, #2
    f408:	2101      	movs	r1, #1
    f40a:	e9c4 2104 	strd	r2, r1, [r4, #16]
    f40e:	81a3      	strh	r3, [r4, #12]
    f410:	6022      	str	r2, [r4, #0]
    f412:	e7b4      	b.n	f37e <__smakebuf_r+0x1a>
    f414:	f44f 6880 	mov.w	r8, #1024	; 0x400
    f418:	462f      	mov	r7, r5
    f41a:	e7c9      	b.n	f3b0 <__smakebuf_r+0x4c>
    f41c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    f420:	4630      	mov	r0, r6
    f422:	f000 f879 	bl	f518 <_isatty_r>
    f426:	b910      	cbnz	r0, f42e <__smakebuf_r+0xca>
    f428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f42c:	e7cf      	b.n	f3ce <__smakebuf_r+0x6a>
    f42e:	89a3      	ldrh	r3, [r4, #12]
    f430:	f023 0303 	bic.w	r3, r3, #3
    f434:	f043 0301 	orr.w	r3, r3, #1
    f438:	b21b      	sxth	r3, r3
    f43a:	e7c8      	b.n	f3ce <__smakebuf_r+0x6a>

0000f43c <__swbuf_r>:
    f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f43e:	460d      	mov	r5, r1
    f440:	4614      	mov	r4, r2
    f442:	4606      	mov	r6, r0
    f444:	b110      	cbz	r0, f44c <__swbuf_r+0x10>
    f446:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f448:	2b00      	cmp	r3, #0
    f44a:	d04c      	beq.n	f4e6 <__swbuf_r+0xaa>
    f44c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    f450:	69a3      	ldr	r3, [r4, #24]
    f452:	60a3      	str	r3, [r4, #8]
    f454:	0717      	lsls	r7, r2, #28
    f456:	b290      	uxth	r0, r2
    f458:	d51b      	bpl.n	f492 <__swbuf_r+0x56>
    f45a:	6923      	ldr	r3, [r4, #16]
    f45c:	b1cb      	cbz	r3, f492 <__swbuf_r+0x56>
    f45e:	b2ed      	uxtb	r5, r5
    f460:	0481      	lsls	r1, r0, #18
    f462:	462f      	mov	r7, r5
    f464:	d522      	bpl.n	f4ac <__swbuf_r+0x70>
    f466:	6822      	ldr	r2, [r4, #0]
    f468:	6961      	ldr	r1, [r4, #20]
    f46a:	1ad3      	subs	r3, r2, r3
    f46c:	4299      	cmp	r1, r3
    f46e:	dd29      	ble.n	f4c4 <__swbuf_r+0x88>
    f470:	3301      	adds	r3, #1
    f472:	68a1      	ldr	r1, [r4, #8]
    f474:	3901      	subs	r1, #1
    f476:	60a1      	str	r1, [r4, #8]
    f478:	1c51      	adds	r1, r2, #1
    f47a:	6021      	str	r1, [r4, #0]
    f47c:	7015      	strb	r5, [r2, #0]
    f47e:	6962      	ldr	r2, [r4, #20]
    f480:	429a      	cmp	r2, r3
    f482:	d027      	beq.n	f4d4 <__swbuf_r+0x98>
    f484:	89a3      	ldrh	r3, [r4, #12]
    f486:	07db      	lsls	r3, r3, #31
    f488:	d501      	bpl.n	f48e <__swbuf_r+0x52>
    f48a:	2d0a      	cmp	r5, #10
    f48c:	d022      	beq.n	f4d4 <__swbuf_r+0x98>
    f48e:	4638      	mov	r0, r7
    f490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f492:	4621      	mov	r1, r4
    f494:	4630      	mov	r0, r6
    f496:	f7ff fddf 	bl	f058 <__swsetup_r>
    f49a:	bb08      	cbnz	r0, f4e0 <__swbuf_r+0xa4>
    f49c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    f4a0:	6923      	ldr	r3, [r4, #16]
    f4a2:	b290      	uxth	r0, r2
    f4a4:	b2ed      	uxtb	r5, r5
    f4a6:	0481      	lsls	r1, r0, #18
    f4a8:	462f      	mov	r7, r5
    f4aa:	d4dc      	bmi.n	f466 <__swbuf_r+0x2a>
    f4ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    f4b0:	81a2      	strh	r2, [r4, #12]
    f4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    f4b4:	6961      	ldr	r1, [r4, #20]
    f4b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    f4ba:	6662      	str	r2, [r4, #100]	; 0x64
    f4bc:	6822      	ldr	r2, [r4, #0]
    f4be:	1ad3      	subs	r3, r2, r3
    f4c0:	4299      	cmp	r1, r3
    f4c2:	dcd5      	bgt.n	f470 <__swbuf_r+0x34>
    f4c4:	4621      	mov	r1, r4
    f4c6:	4630      	mov	r0, r6
    f4c8:	f7fd fb20 	bl	cb0c <_fflush_r>
    f4cc:	b940      	cbnz	r0, f4e0 <__swbuf_r+0xa4>
    f4ce:	6822      	ldr	r2, [r4, #0]
    f4d0:	2301      	movs	r3, #1
    f4d2:	e7ce      	b.n	f472 <__swbuf_r+0x36>
    f4d4:	4621      	mov	r1, r4
    f4d6:	4630      	mov	r0, r6
    f4d8:	f7fd fb18 	bl	cb0c <_fflush_r>
    f4dc:	2800      	cmp	r0, #0
    f4de:	d0d6      	beq.n	f48e <__swbuf_r+0x52>
    f4e0:	f04f 37ff 	mov.w	r7, #4294967295
    f4e4:	e7d3      	b.n	f48e <__swbuf_r+0x52>
    f4e6:	f7fa f9ed 	bl	98c4 <__sinit>
    f4ea:	e7af      	b.n	f44c <__swbuf_r+0x10>

0000f4ec <_fstat_r>:
    f4ec:	b570      	push	{r4, r5, r6, lr}
    f4ee:	460c      	mov	r4, r1
    f4f0:	4d08      	ldr	r5, [pc, #32]	; (f514 <_fstat_r+0x28>)
    f4f2:	4603      	mov	r3, r0
    f4f4:	2600      	movs	r6, #0
    f4f6:	4620      	mov	r0, r4
    f4f8:	4611      	mov	r1, r2
    f4fa:	461c      	mov	r4, r3
    f4fc:	602e      	str	r6, [r5, #0]
    f4fe:	f7f7 ff15 	bl	732c <_fstat>
    f502:	1c43      	adds	r3, r0, #1
    f504:	d000      	beq.n	f508 <_fstat_r+0x1c>
    f506:	bd70      	pop	{r4, r5, r6, pc}
    f508:	682b      	ldr	r3, [r5, #0]
    f50a:	2b00      	cmp	r3, #0
    f50c:	d0fb      	beq.n	f506 <_fstat_r+0x1a>
    f50e:	6023      	str	r3, [r4, #0]
    f510:	bd70      	pop	{r4, r5, r6, pc}
    f512:	bf00      	nop
    f514:	20004fdc 	.word	0x20004fdc

0000f518 <_isatty_r>:
    f518:	b538      	push	{r3, r4, r5, lr}
    f51a:	4d07      	ldr	r5, [pc, #28]	; (f538 <_isatty_r+0x20>)
    f51c:	2200      	movs	r2, #0
    f51e:	4604      	mov	r4, r0
    f520:	4608      	mov	r0, r1
    f522:	602a      	str	r2, [r5, #0]
    f524:	f7f7 ff08 	bl	7338 <_isatty>
    f528:	1c43      	adds	r3, r0, #1
    f52a:	d000      	beq.n	f52e <_isatty_r+0x16>
    f52c:	bd38      	pop	{r3, r4, r5, pc}
    f52e:	682b      	ldr	r3, [r5, #0]
    f530:	2b00      	cmp	r3, #0
    f532:	d0fb      	beq.n	f52c <_isatty_r+0x14>
    f534:	6023      	str	r3, [r4, #0]
    f536:	bd38      	pop	{r3, r4, r5, pc}
    f538:	20004fdc 	.word	0x20004fdc
    f53c:	00000000 	.word	0x00000000

0000f540 <___reboot_Teensyduino__veneer>:
    f540:	f85f f000 	ldr.w	pc, [pc]	; f544 <___reboot_Teensyduino__veneer+0x4>
    f544:	60001d55 	.word	0x60001d55

0000f548 <___init_veneer>:
    f548:	f85f f000 	ldr.w	pc, [pc]	; f54c <___init_veneer+0x4>
    f54c:	60001dfd 	.word	0x60001dfd

Disassembly of section .fini:

0000f550 <_fini>:
    f550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f552:	bf00      	nop
